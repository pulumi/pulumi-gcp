{
    "auto-aliasing": {
        "resources": {
            "google_access_context_manager_access_level": {
                "current": "gcp:accesscontextmanager/accessLevel:AccessLevel",
                "majorVersion": 6,
                "fields": {
                    "basic": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "conditions": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "device_policy": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_device_management_levels": {
                                                            "maxItemsOne": false
                                                        },
                                                        "allowed_encryption_statuses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "os_constraints": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "ip_subnetworks": {
                                                "maxItemsOne": false
                                            },
                                            "members": {
                                                "maxItemsOne": false
                                            },
                                            "regions": {
                                                "maxItemsOne": false
                                            },
                                            "required_access_levels": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "custom": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "expr": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_access_context_manager_access_level_condition": {
                "current": "gcp:accesscontextmanager/accessLevelCondition:AccessLevelCondition",
                "majorVersion": 6,
                "fields": {
                    "device_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allowed_device_management_levels": {
                                    "maxItemsOne": false
                                },
                                "allowed_encryption_statuses": {
                                    "maxItemsOne": false
                                },
                                "os_constraints": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "ip_subnetworks": {
                        "maxItemsOne": false
                    },
                    "members": {
                        "maxItemsOne": false
                    },
                    "regions": {
                        "maxItemsOne": false
                    },
                    "required_access_levels": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_access_context_manager_access_levels": {
                "current": "gcp:accesscontextmanager/accessLevels:AccessLevels",
                "majorVersion": 6,
                "fields": {
                    "access_levels": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "basic": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "conditions": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "device_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "allowed_device_management_levels": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allowed_encryption_statuses": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "os_constraints": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "ip_subnetworks": {
                                                            "maxItemsOne": false
                                                        },
                                                        "members": {
                                                            "maxItemsOne": false
                                                        },
                                                        "regions": {
                                                            "maxItemsOne": false
                                                        },
                                                        "required_access_levels": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "custom": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "expr": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_access_context_manager_access_policy": {
                "current": "gcp:accesscontextmanager/accessPolicy:AccessPolicy",
                "majorVersion": 6,
                "fields": {
                    "scopes": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_access_context_manager_access_policy_iam_binding": {
                "current": "gcp:accesscontextmanager/accessPolicyIamBinding:AccessPolicyIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_access_context_manager_access_policy_iam_member": {
                "current": "gcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_access_context_manager_access_policy_iam_policy": {
                "current": "gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy",
                "majorVersion": 6
            },
            "google_access_context_manager_authorized_orgs_desc": {
                "current": "gcp:accesscontextmanager/authorizedOrgsDesc:AuthorizedOrgsDesc",
                "majorVersion": 6,
                "fields": {
                    "orgs": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_access_context_manager_egress_policy": {
                "current": "gcp:accesscontextmanager/egressPolicy:EgressPolicy",
                "majorVersion": 6
            },
            "google_access_context_manager_gcp_user_access_binding": {
                "current": "gcp:accesscontextmanager/gcpUserAccessBinding:GcpUserAccessBinding",
                "majorVersion": 6,
                "fields": {
                    "access_levels": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_access_context_manager_ingress_policy": {
                "current": "gcp:accesscontextmanager/ingressPolicy:IngressPolicy",
                "majorVersion": 6
            },
            "google_access_context_manager_service_perimeter": {
                "current": "gcp:accesscontextmanager/servicePerimeter:ServicePerimeter",
                "majorVersion": 6,
                "fields": {
                    "spec": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "access_levels": {
                                    "maxItemsOne": false
                                },
                                "egress_policies": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "egress_from": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "identities": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "egress_to": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "external_resources": {
                                                            "maxItemsOne": false
                                                        },
                                                        "operations": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "method_selectors": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "resources": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "ingress_policies": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ingress_from": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "identities": {
                                                            "maxItemsOne": false
                                                        },
                                                        "sources": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "ingress_to": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "operations": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "method_selectors": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "resources": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "resources": {
                                    "maxItemsOne": false
                                },
                                "restricted_services": {
                                    "maxItemsOne": false
                                },
                                "vpc_accessible_services": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "allowed_services": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "status": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "access_levels": {
                                    "maxItemsOne": false
                                },
                                "egress_policies": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "egress_from": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "identities": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "egress_to": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "external_resources": {
                                                            "maxItemsOne": false
                                                        },
                                                        "operations": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "method_selectors": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "resources": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "ingress_policies": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ingress_from": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "identities": {
                                                            "maxItemsOne": false
                                                        },
                                                        "sources": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "ingress_to": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "operations": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "method_selectors": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "resources": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "resources": {
                                    "maxItemsOne": false
                                },
                                "restricted_services": {
                                    "maxItemsOne": false
                                },
                                "vpc_accessible_services": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "allowed_services": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_access_context_manager_service_perimeter_egress_policy": {
                "current": "gcp:accesscontextmanager/servicePerimeterEgressPolicy:ServicePerimeterEgressPolicy",
                "majorVersion": 6,
                "fields": {
                    "egress_from": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "identities": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "egress_to": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "external_resources": {
                                    "maxItemsOne": false
                                },
                                "operations": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "method_selectors": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "resources": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_access_context_manager_service_perimeter_ingress_policy": {
                "current": "gcp:accesscontextmanager/servicePerimeterIngressPolicy:ServicePerimeterIngressPolicy",
                "majorVersion": 6,
                "fields": {
                    "ingress_from": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "identities": {
                                    "maxItemsOne": false
                                },
                                "sources": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "ingress_to": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "operations": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "method_selectors": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "resources": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_access_context_manager_service_perimeter_resource": {
                "current": "gcp:accesscontextmanager/servicePerimeterResource:ServicePerimeterResource",
                "majorVersion": 6
            },
            "google_access_context_manager_service_perimeters": {
                "current": "gcp:accesscontextmanager/servicePerimeters:ServicePerimeters",
                "majorVersion": 6,
                "fields": {
                    "service_perimeters": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "spec": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "access_levels": {
                                                "maxItemsOne": false
                                            },
                                            "egress_policies": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "egress_from": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "identities": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "egress_to": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "external_resources": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "operations": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "method_selectors": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "resources": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "ingress_policies": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "ingress_from": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "identities": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "sources": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "ingress_to": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "operations": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "method_selectors": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "resources": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "resources": {
                                                "maxItemsOne": false
                                            },
                                            "restricted_services": {
                                                "maxItemsOne": false
                                            },
                                            "vpc_accessible_services": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_services": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "status": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "access_levels": {
                                                "maxItemsOne": false
                                            },
                                            "egress_policies": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "egress_from": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "identities": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "egress_to": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "external_resources": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "operations": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "method_selectors": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "resources": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "ingress_policies": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "ingress_from": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "identities": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "sources": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "ingress_to": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "operations": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "method_selectors": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "resources": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "resources": {
                                                "maxItemsOne": false
                                            },
                                            "restricted_services": {
                                                "maxItemsOne": false
                                            },
                                            "vpc_accessible_services": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_services": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_active_directory_domain": {
                "current": "gcp:activedirectory/domain:Domain",
                "majorVersion": 6,
                "fields": {
                    "authorized_networks": {
                        "maxItemsOne": false
                    },
                    "locations": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_active_directory_domain_trust": {
                "current": "gcp:activedirectory/domainTrust:DomainTrust",
                "majorVersion": 6,
                "fields": {
                    "target_dns_ip_addresses": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_active_directory_peering": {
                "current": "gcp:activedirectory/peering:Peering",
                "majorVersion": 6
            },
            "google_alloydb_backup": {
                "current": "gcp:alloydb/backup:Backup",
                "majorVersion": 6,
                "fields": {
                    "encryption_config": {
                        "maxItemsOne": true
                    },
                    "encryption_info": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "kms_key_versions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_alloydb_cluster": {
                "current": "gcp:alloydb/cluster:Cluster",
                "majorVersion": 6,
                "fields": {
                    "automated_backup_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "encryption_config": {
                                    "maxItemsOne": true
                                },
                                "quantity_based_retention": {
                                    "maxItemsOne": true
                                },
                                "time_based_retention": {
                                    "maxItemsOne": true
                                },
                                "weekly_schedule": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "days_of_week": {
                                                "maxItemsOne": false
                                            },
                                            "start_times": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "backup_source": {
                        "maxItemsOne": false
                    },
                    "encryption_config": {
                        "maxItemsOne": true
                    },
                    "encryption_info": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "kms_key_versions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "initial_user": {
                        "maxItemsOne": true
                    },
                    "migration_source": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_alloydb_instance": {
                "current": "gcp:alloydb/instance:Instance",
                "majorVersion": 6,
                "fields": {
                    "machine_config": {
                        "maxItemsOne": true
                    },
                    "read_pool_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_api_gateway_api": {
                "current": "gcp:apigateway/api:Api",
                "majorVersion": 6
            },
            "google_api_gateway_api_config": {
                "current": "gcp:apigateway/apiConfig:ApiConfig",
                "majorVersion": 6,
                "fields": {
                    "gateway_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "backend_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "grpc_services": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "file_descriptor_set": {
                                    "maxItemsOne": true
                                },
                                "source": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "managed_service_configs": {
                        "maxItemsOne": false
                    },
                    "openapi_documents": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "document": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_api_gateway_api_config_iam_binding": {
                "current": "gcp:apigateway/apiConfigIamBinding:ApiConfigIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_api_gateway_api_config_iam_member": {
                "current": "gcp:apigateway/apiConfigIamMember:ApiConfigIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_api_gateway_api_config_iam_policy": {
                "current": "gcp:apigateway/apiConfigIamPolicy:ApiConfigIamPolicy",
                "majorVersion": 6
            },
            "google_api_gateway_api_iam_binding": {
                "current": "gcp:apigateway/apiIamBinding:ApiIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_api_gateway_api_iam_member": {
                "current": "gcp:apigateway/apiIamMember:ApiIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_api_gateway_api_iam_policy": {
                "current": "gcp:apigateway/apiIamPolicy:ApiIamPolicy",
                "majorVersion": 6
            },
            "google_api_gateway_gateway": {
                "current": "gcp:apigateway/gateway:Gateway",
                "majorVersion": 6
            },
            "google_api_gateway_gateway_iam_binding": {
                "current": "gcp:apigateway/gatewayIamBinding:GatewayIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_api_gateway_gateway_iam_member": {
                "current": "gcp:apigateway/gatewayIamMember:GatewayIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_api_gateway_gateway_iam_policy": {
                "current": "gcp:apigateway/gatewayIamPolicy:GatewayIamPolicy",
                "majorVersion": 6
            },
            "google_apigee_addons_config": {
                "current": "gcp:apigee/addonsConfig:AddonsConfig",
                "majorVersion": 6,
                "fields": {
                    "addons_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "advanced_api_ops_config": {
                                    "maxItemsOne": true
                                },
                                "api_security_config": {
                                    "maxItemsOne": true
                                },
                                "connectors_platform_config": {
                                    "maxItemsOne": true
                                },
                                "integration_config": {
                                    "maxItemsOne": true
                                },
                                "monetization_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_apigee_endpoint_attachment": {
                "current": "gcp:apigee/endpointAttachment:EndpointAttachment",
                "majorVersion": 6
            },
            "google_apigee_env_keystore": {
                "current": "gcp:apigee/envKeystore:EnvKeystore",
                "majorVersion": 6,
                "fields": {
                    "aliases": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_apigee_env_references": {
                "current": "gcp:apigee/envReferences:EnvReferences",
                "majorVersion": 6
            },
            "google_apigee_envgroup": {
                "current": "gcp:apigee/envGroup:EnvGroup",
                "majorVersion": 6,
                "fields": {
                    "hostnames": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_apigee_envgroup_attachment": {
                "current": "gcp:apigee/envGroupAttachment:EnvGroupAttachment",
                "majorVersion": 6
            },
            "google_apigee_environment": {
                "current": "gcp:apigee/environment:Environment",
                "majorVersion": 6,
                "fields": {
                    "node_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_apigee_environment_iam_binding": {
                "current": "gcp:apigee/environmentIamBinding:EnvironmentIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_apigee_environment_iam_member": {
                "current": "gcp:apigee/environmentIamMember:EnvironmentIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_apigee_environment_iam_policy": {
                "current": "gcp:apigee/environmentIamPolicy:EnvironmentIamPolicy",
                "majorVersion": 6
            },
            "google_apigee_flowhook": {
                "current": "gcp:apigee/flowhook:Flowhook",
                "majorVersion": 6
            },
            "google_apigee_instance": {
                "current": "gcp:apigee/instance:Instance",
                "majorVersion": 6,
                "fields": {
                    "consumer_accept_list": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_apigee_instance_attachment": {
                "current": "gcp:apigee/instanceAttachment:InstanceAttachment",
                "majorVersion": 6
            },
            "google_apigee_keystores_aliases_key_cert_file": {
                "current": "gcp:apigee/keystoresAliasesKeyCertFile:KeystoresAliasesKeyCertFile",
                "majorVersion": 6,
                "fields": {
                    "certs_info": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cert_info": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "subject_alternative_names": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_apigee_keystores_aliases_pkcs12": {
                "current": "gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12",
                "majorVersion": 6,
                "fields": {
                    "certs_info": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "cert_info": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "subject_alternative_names": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_apigee_keystores_aliases_self_signed_cert": {
                "current": "gcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCert",
                "majorVersion": 6,
                "fields": {
                    "certs_info": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "cert_info": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "subject_alternative_names": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "subject": {
                        "maxItemsOne": true
                    },
                    "subject_alternative_dns_names": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_apigee_nat_address": {
                "current": "gcp:apigee/natAddress:NatAddress",
                "majorVersion": 6
            },
            "google_apigee_organization": {
                "current": "gcp:apigee/organization:Organization",
                "majorVersion": 6,
                "fields": {
                    "properties": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "property": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_apigee_sharedflow": {
                "current": "gcp:apigee/sharedflow:Sharedflow",
                "majorVersion": 6,
                "fields": {
                    "meta_data": {
                        "maxItemsOne": false
                    },
                    "revision": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_apigee_sharedflow_deployment": {
                "current": "gcp:apigee/sharedflowDeployment:SharedflowDeployment",
                "majorVersion": 6
            },
            "google_apigee_sync_authorization": {
                "current": "gcp:apigee/syncAuthorization:SyncAuthorization",
                "majorVersion": 6,
                "fields": {
                    "identities": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_apikeys_key": {
                "current": "gcp:projects/apiKey:ApiKey",
                "majorVersion": 6,
                "fields": {
                    "restrictions": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "android_key_restrictions": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "allowed_applications": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "api_targets": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "methods": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "browser_key_restrictions": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "allowed_referrers": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "ios_key_restrictions": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "allowed_bundle_ids": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "server_key_restrictions": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "allowed_ips": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_app_engine_application": {
                "current": "gcp:appengine/application:Application",
                "majorVersion": 6,
                "fields": {
                    "feature_settings": {
                        "maxItemsOne": true
                    },
                    "iap": {
                        "maxItemsOne": true
                    },
                    "url_dispatch_rule": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_app_engine_application_url_dispatch_rules": {
                "current": "gcp:appengine/applicationUrlDispatchRules:ApplicationUrlDispatchRules",
                "majorVersion": 6,
                "fields": {
                    "dispatch_rules": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_app_engine_domain_mapping": {
                "current": "gcp:appengine/domainMapping:DomainMapping",
                "majorVersion": 6,
                "fields": {
                    "resource_records": {
                        "maxItemsOne": false
                    },
                    "ssl_settings": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_app_engine_firewall_rule": {
                "current": "gcp:appengine/firewallRule:FirewallRule",
                "majorVersion": 6
            },
            "google_app_engine_flexible_app_version": {
                "current": "gcp:appengine/flexibleAppVersion:FlexibleAppVersion",
                "majorVersion": 6,
                "fields": {
                    "api_config": {
                        "maxItemsOne": true
                    },
                    "automatic_scaling": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cpu_utilization": {
                                    "maxItemsOne": true
                                },
                                "disk_utilization": {
                                    "maxItemsOne": true
                                },
                                "network_utilization": {
                                    "maxItemsOne": true
                                },
                                "request_utilization": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "deployment": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cloud_build_options": {
                                    "maxItemsOne": true
                                },
                                "container": {
                                    "maxItemsOne": true
                                },
                                "files": {
                                    "maxItemsOne": false
                                },
                                "zip": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "endpoints_api_service": {
                        "maxItemsOne": true
                    },
                    "entrypoint": {
                        "maxItemsOne": true
                    },
                    "handlers": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "script": {
                                    "maxItemsOne": true
                                },
                                "static_files": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "inbound_services": {
                        "maxItemsOne": false
                    },
                    "liveness_check": {
                        "maxItemsOne": true
                    },
                    "manual_scaling": {
                        "maxItemsOne": true
                    },
                    "network": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "forwarded_ports": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "readiness_check": {
                        "maxItemsOne": true
                    },
                    "resources": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "volumes": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "vpc_access_connector": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_app_engine_service_network_settings": {
                "current": "gcp:appengine/serviceNetworkSettings:ServiceNetworkSettings",
                "majorVersion": 6,
                "fields": {
                    "network_settings": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_app_engine_service_split_traffic": {
                "current": "gcp:appengine/engineSplitTraffic:EngineSplitTraffic",
                "majorVersion": 6,
                "fields": {
                    "split": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_app_engine_standard_app_version": {
                "current": "gcp:appengine/standardAppVersion:StandardAppVersion",
                "majorVersion": 6,
                "fields": {
                    "automatic_scaling": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "standard_scheduler_settings": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "basic_scaling": {
                        "maxItemsOne": true
                    },
                    "deployment": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "files": {
                                    "maxItemsOne": false
                                },
                                "zip": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "entrypoint": {
                        "maxItemsOne": true
                    },
                    "handlers": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "script": {
                                    "maxItemsOne": true
                                },
                                "static_files": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "inbound_services": {
                        "maxItemsOne": false
                    },
                    "libraries": {
                        "maxItemsOne": false
                    },
                    "manual_scaling": {
                        "maxItemsOne": true
                    },
                    "vpc_access_connector": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_artifact_registry_repository": {
                "current": "gcp:artifactregistry/repository:Repository",
                "majorVersion": 6,
                "fields": {
                    "docker_config": {
                        "maxItemsOne": true
                    },
                    "maven_config": {
                        "maxItemsOne": true
                    },
                    "remote_repository_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "docker_repository": {
                                    "maxItemsOne": true
                                },
                                "maven_repository": {
                                    "maxItemsOne": true
                                },
                                "npm_repository": {
                                    "maxItemsOne": true
                                },
                                "python_repository": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "virtual_repository_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "upstream_policies": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_artifact_registry_repository_iam_binding": {
                "current": "gcp:artifactregistry/repositoryIamBinding:RepositoryIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_artifact_registry_repository_iam_member": {
                "current": "gcp:artifactregistry/repositoryIamMember:RepositoryIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_artifact_registry_repository_iam_policy": {
                "current": "gcp:artifactregistry/repositoryIamPolicy:RepositoryIamPolicy",
                "majorVersion": 6
            },
            "google_assured_workloads_workload": {
                "current": "gcp:assuredworkloads/workload:Workload",
                "majorVersion": 6,
                "fields": {
                    "kms_settings": {
                        "maxItemsOne": true
                    },
                    "resource_settings": {
                        "maxItemsOne": false
                    },
                    "resources": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_beyondcorp_app_connection": {
                "current": "gcp:beyondcorp/appConnection:AppConnection",
                "majorVersion": 6,
                "fields": {
                    "application_endpoint": {
                        "maxItemsOne": true
                    },
                    "connectors": {
                        "maxItemsOne": false
                    },
                    "gateway": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_beyondcorp_app_connector": {
                "current": "gcp:beyondcorp/appConnector:AppConnector",
                "majorVersion": 6,
                "fields": {
                    "principal_info": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "service_account": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_beyondcorp_app_gateway": {
                "current": "gcp:beyondcorp/appGateway:AppGateway",
                "majorVersion": 6,
                "fields": {
                    "allocated_connections": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigquery_analytics_hub_data_exchange": {
                "current": "gcp:bigqueryanalyticshub/dataExchange:DataExchange",
                "majorVersion": 6
            },
            "google_bigquery_analytics_hub_data_exchange_iam_binding": {
                "current": "gcp:bigqueryanalyticshub/dataExchangeIamBinding:DataExchangeIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigquery_analytics_hub_data_exchange_iam_member": {
                "current": "gcp:bigqueryanalyticshub/dataExchangeIamMember:DataExchangeIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_analytics_hub_data_exchange_iam_policy": {
                "current": "gcp:bigqueryanalyticshub/dataExchangeIamPolicy:DataExchangeIamPolicy",
                "majorVersion": 6
            },
            "google_bigquery_analytics_hub_listing": {
                "current": "gcp:bigqueryanalyticshub/listing:Listing",
                "majorVersion": 6,
                "fields": {
                    "bigquery_dataset": {
                        "maxItemsOne": true
                    },
                    "categories": {
                        "maxItemsOne": false
                    },
                    "data_provider": {
                        "maxItemsOne": true
                    },
                    "publisher": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_analytics_hub_listing_iam_binding": {
                "current": "gcp:bigqueryanalyticshub/listingIamBinding:ListingIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigquery_analytics_hub_listing_iam_member": {
                "current": "gcp:bigqueryanalyticshub/listingIamMember:ListingIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_analytics_hub_listing_iam_policy": {
                "current": "gcp:bigqueryanalyticshub/listingIamPolicy:ListingIamPolicy",
                "majorVersion": 6
            },
            "google_bigquery_capacity_commitment": {
                "current": "gcp:bigquery/capacityCommitment:CapacityCommitment",
                "majorVersion": 6
            },
            "google_bigquery_connection": {
                "current": "gcp:bigquery/connection:Connection",
                "majorVersion": 6,
                "fields": {
                    "aws": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "access_role": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "azure": {
                        "maxItemsOne": true
                    },
                    "cloud_resource": {
                        "maxItemsOne": true
                    },
                    "cloud_spanner": {
                        "maxItemsOne": true
                    },
                    "cloud_sql": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "credential": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_bigquery_connection_iam_binding": {
                "current": "gcp:bigquery/connectionIamBinding:ConnectionIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigquery_connection_iam_member": {
                "current": "gcp:bigquery/connectionIamMember:ConnectionIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_connection_iam_policy": {
                "current": "gcp:bigquery/connectionIamPolicy:ConnectionIamPolicy",
                "majorVersion": 6
            },
            "google_bigquery_data_transfer_config": {
                "current": "gcp:bigquery/dataTransferConfig:DataTransferConfig",
                "majorVersion": 6,
                "fields": {
                    "email_preferences": {
                        "maxItemsOne": true
                    },
                    "schedule_options": {
                        "maxItemsOne": true
                    },
                    "sensitive_params": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_datapolicy_data_policy": {
                "current": "gcp:bigquerydatapolicy/dataPolicy:DataPolicy",
                "majorVersion": 6,
                "fields": {
                    "data_masking_policy": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_datapolicy_data_policy_iam_binding": {
                "current": "gcp:bigquerydatapolicy/dataPolicyIamBinding:DataPolicyIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigquery_datapolicy_data_policy_iam_member": {
                "current": "gcp:bigquerydatapolicy/dataPolicyIamMember:DataPolicyIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_datapolicy_data_policy_iam_policy": {
                "current": "gcp:bigquerydatapolicy/dataPolicyIamPolicy:DataPolicyIamPolicy",
                "majorVersion": 6
            },
            "google_bigquery_dataset": {
                "current": "gcp:bigquery/dataset:Dataset",
                "majorVersion": 6,
                "fields": {
                    "access": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "dataset": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "dataset": {
                                                "maxItemsOne": true
                                            },
                                            "target_types": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "routine": {
                                    "maxItemsOne": true
                                },
                                "view": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "default_encryption_configuration": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_dataset_access": {
                "current": "gcp:bigquery/datasetAccess:DatasetAccess",
                "majorVersion": 6,
                "fields": {
                    "dataset": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "dataset": {
                                    "maxItemsOne": true
                                },
                                "target_types": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "routine": {
                        "maxItemsOne": true
                    },
                    "view": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_dataset_iam_binding": {
                "current": "gcp:bigquery/datasetIamBinding:DatasetIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigquery_dataset_iam_member": {
                "current": "gcp:bigquery/datasetIamMember:DatasetIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_dataset_iam_policy": {
                "current": "gcp:bigquery/datasetIamPolicy:DatasetIamPolicy",
                "majorVersion": 6
            },
            "google_bigquery_job": {
                "current": "gcp:bigquery/job:Job",
                "majorVersion": 6,
                "fields": {
                    "copy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "destination_encryption_configuration": {
                                    "maxItemsOne": true
                                },
                                "destination_table": {
                                    "maxItemsOne": true
                                },
                                "source_tables": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "extract": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "destination_uris": {
                                    "maxItemsOne": false
                                },
                                "source_model": {
                                    "maxItemsOne": true
                                },
                                "source_table": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "load": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "destination_encryption_configuration": {
                                    "maxItemsOne": true
                                },
                                "destination_table": {
                                    "maxItemsOne": true
                                },
                                "parquet_options": {
                                    "maxItemsOne": true
                                },
                                "projection_fields": {
                                    "maxItemsOne": false
                                },
                                "schema_update_options": {
                                    "maxItemsOne": false
                                },
                                "source_uris": {
                                    "maxItemsOne": false
                                },
                                "time_partitioning": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "query": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "default_dataset": {
                                    "maxItemsOne": true
                                },
                                "destination_encryption_configuration": {
                                    "maxItemsOne": true
                                },
                                "destination_table": {
                                    "maxItemsOne": true
                                },
                                "schema_update_options": {
                                    "maxItemsOne": false
                                },
                                "script_options": {
                                    "maxItemsOne": true
                                },
                                "user_defined_function_resources": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "error_result": {
                                    "maxItemsOne": false
                                },
                                "errors": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_bigquery_reservation": {
                "current": "gcp:bigquery/reservation:Reservation",
                "majorVersion": 6,
                "fields": {
                    "autoscale": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_reservation_assignment": {
                "current": "gcp:bigquery/reservationAssignment:ReservationAssignment",
                "majorVersion": 6
            },
            "google_bigquery_routine": {
                "current": "gcp:bigquery/routine:Routine",
                "majorVersion": 6,
                "fields": {
                    "arguments": {
                        "maxItemsOne": false
                    },
                    "imported_libraries": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigquery_table": {
                "current": "gcp:bigquery/table:Table",
                "majorVersion": 6,
                "fields": {
                    "clustering": {
                        "maxItemsOne": false
                    },
                    "encryption_configuration": {
                        "maxItemsOne": true
                    },
                    "external_data_configuration": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "avro_options": {
                                    "maxItemsOne": true
                                },
                                "csv_options": {
                                    "maxItemsOne": true
                                },
                                "google_sheets_options": {
                                    "maxItemsOne": true
                                },
                                "hive_partitioning_options": {
                                    "maxItemsOne": true
                                },
                                "json_options": {
                                    "maxItemsOne": true
                                },
                                "parquet_options": {
                                    "maxItemsOne": true
                                },
                                "source_uris": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "materialized_view": {
                        "maxItemsOne": true
                    },
                    "range_partitioning": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "range": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "time_partitioning": {
                        "maxItemsOne": true
                    },
                    "view": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_table_iam_binding": {
                "current": "gcp:bigquery/iamBinding:IamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigquery_table_iam_member": {
                "current": "gcp:bigquery/iamMember:IamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigquery_table_iam_policy": {
                "current": "gcp:bigquery/iamPolicy:IamPolicy",
                "majorVersion": 6
            },
            "google_bigtable_app_profile": {
                "current": "gcp:bigquery/appProfile:AppProfile",
                "majorVersion": 6,
                "fields": {
                    "multi_cluster_routing_cluster_ids": {
                        "maxItemsOne": false
                    },
                    "single_cluster_routing": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigtable_gc_policy": {
                "current": "gcp:bigtable/gCPolicy:GCPolicy",
                "majorVersion": 6,
                "fields": {
                    "max_age": {
                        "maxItemsOne": true
                    },
                    "max_version": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigtable_instance": {
                "current": "gcp:bigtable/instance:Instance",
                "majorVersion": 6,
                "fields": {
                    "cluster": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "autoscaling_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_bigtable_instance_iam_binding": {
                "current": "gcp:bigtable/instanceIamBinding:InstanceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigtable_instance_iam_member": {
                "current": "gcp:bigtable/instanceIamMember:InstanceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigtable_instance_iam_policy": {
                "current": "gcp:bigtable/instanceIamPolicy:InstanceIamPolicy",
                "majorVersion": 6
            },
            "google_bigtable_table": {
                "current": "gcp:bigtable/table:Table",
                "majorVersion": 6,
                "fields": {
                    "column_family": {
                        "maxItemsOne": false
                    },
                    "split_keys": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigtable_table_iam_binding": {
                "current": "gcp:bigtable/tableIamBinding:TableIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigtable_table_iam_member": {
                "current": "gcp:bigtable/tableIamMember:TableIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_bigtable_table_iam_policy": {
                "current": "gcp:bigtable/tableIamPolicy:TableIamPolicy",
                "majorVersion": 6
            },
            "google_billing_account_iam_binding": {
                "current": "gcp:billing/accountIamBinding:AccountIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_billing_account_iam_member": {
                "current": "gcp:billing/accountIamMember:AccountIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_billing_account_iam_policy": {
                "current": "gcp:billing/accountIamPolicy:AccountIamPolicy",
                "majorVersion": 6
            },
            "google_billing_budget": {
                "current": "gcp:billing/budget:Budget",
                "majorVersion": 6,
                "fields": {
                    "all_updates_rule": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "monitoring_notification_channels": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "amount": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "specified_amount": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "budget_filter": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "credit_types": {
                                    "maxItemsOne": false
                                },
                                "custom_period": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "end_date": {
                                                "maxItemsOne": true
                                            },
                                            "start_date": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "projects": {
                                    "maxItemsOne": false
                                },
                                "services": {
                                    "maxItemsOne": false
                                },
                                "subaccounts": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "threshold_rules": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_billing_subaccount": {
                "current": "gcp:billing/subAccount:SubAccount",
                "majorVersion": 6
            },
            "google_binary_authorization_attestor": {
                "current": "gcp:binaryauthorization/attestor:Attestor",
                "majorVersion": 6,
                "fields": {
                    "attestation_authority_note": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "public_keys": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "pkix_public_key": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_binary_authorization_attestor_iam_binding": {
                "current": "gcp:binaryauthorization/attestorIamBinding:AttestorIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_binary_authorization_attestor_iam_member": {
                "current": "gcp:binaryauthorization/attestorIamMember:AttestorIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_binary_authorization_attestor_iam_policy": {
                "current": "gcp:binaryauthorization/attestorIamPolicy:AttestorIamPolicy",
                "majorVersion": 6
            },
            "google_binary_authorization_policy": {
                "current": "gcp:binaryauthorization/policy:Policy",
                "majorVersion": 6,
                "fields": {
                    "admission_whitelist_patterns": {
                        "maxItemsOne": false
                    },
                    "cluster_admission_rules": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "require_attestations_by": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "default_admission_rule": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "require_attestations_by": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_certificate_manager_certificate": {
                "current": "gcp:certificatemanager/certificate:Certificate",
                "majorVersion": 6,
                "fields": {
                    "managed": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "authorization_attempt_info": {
                                    "maxItemsOne": false
                                },
                                "dns_authorizations": {
                                    "maxItemsOne": false
                                },
                                "domains": {
                                    "maxItemsOne": false
                                },
                                "provisioning_issue": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "self_managed": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_certificate_manager_certificate_issuance_config": {
                "current": "gcp:certificatemanager/certificateIssuanceConfig:CertificateIssuanceConfig",
                "majorVersion": 6,
                "fields": {
                    "certificate_authority_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "certificate_authority_service_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_certificate_manager_certificate_map": {
                "current": "gcp:certificatemanager/certificateMap:CertificateMap",
                "majorVersion": 6,
                "fields": {
                    "gclb_targets": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "ip_configs": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ports": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_certificate_manager_certificate_map_entry": {
                "current": "gcp:certificatemanager/certificateMapEntry:CertificateMapEntry",
                "majorVersion": 6,
                "fields": {
                    "certificates": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_certificate_manager_dns_authorization": {
                "current": "gcp:certificatemanager/dnsAuthorization:DnsAuthorization",
                "majorVersion": 6,
                "fields": {
                    "dns_resource_record": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloud_asset_folder_feed": {
                "current": "gcp:cloudasset/folderFeed:FolderFeed",
                "majorVersion": 6,
                "fields": {
                    "asset_names": {
                        "maxItemsOne": false
                    },
                    "asset_types": {
                        "maxItemsOne": false
                    },
                    "condition": {
                        "maxItemsOne": true
                    },
                    "feed_output_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "pubsub_destination": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_cloud_asset_organization_feed": {
                "current": "gcp:cloudasset/organizationFeed:OrganizationFeed",
                "majorVersion": 6,
                "fields": {
                    "asset_names": {
                        "maxItemsOne": false
                    },
                    "asset_types": {
                        "maxItemsOne": false
                    },
                    "condition": {
                        "maxItemsOne": true
                    },
                    "feed_output_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "pubsub_destination": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_cloud_asset_project_feed": {
                "current": "gcp:cloudasset/projectFeed:ProjectFeed",
                "majorVersion": 6,
                "fields": {
                    "asset_names": {
                        "maxItemsOne": false
                    },
                    "asset_types": {
                        "maxItemsOne": false
                    },
                    "condition": {
                        "maxItemsOne": true
                    },
                    "feed_output_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "pubsub_destination": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_cloud_identity_group": {
                "current": "gcp:cloudidentity/group:Group",
                "majorVersion": 6,
                "fields": {
                    "group_key": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloud_identity_group_membership": {
                "current": "gcp:cloudidentity/groupMembership:GroupMembership",
                "majorVersion": 6,
                "fields": {
                    "member_key": {
                        "maxItemsOne": true
                    },
                    "preferred_member_key": {
                        "maxItemsOne": true
                    },
                    "roles": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloud_ids_endpoint": {
                "current": "gcp:cloudids/endpoint:Endpoint",
                "majorVersion": 6,
                "fields": {
                    "threat_exceptions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloud_run_domain_mapping": {
                "current": "gcp:cloudrun/domainMapping:DomainMapping",
                "majorVersion": 6,
                "fields": {
                    "metadata": {
                        "maxItemsOne": true
                    },
                    "spec": {
                        "maxItemsOne": true
                    },
                    "status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "conditions": {
                                    "maxItemsOne": false
                                },
                                "resource_records": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_cloud_run_service": {
                "current": "gcp:cloudrun/service:Service",
                "majorVersion": 6,
                "fields": {
                    "metadata": {
                        "maxItemsOne": true
                    },
                    "status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "conditions": {
                                    "maxItemsOne": false
                                },
                                "traffic": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "template": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "metadata": {
                                    "maxItemsOne": true
                                },
                                "spec": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "containers": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "args": {
                                                            "maxItemsOne": false
                                                        },
                                                        "command": {
                                                            "maxItemsOne": false
                                                        },
                                                        "env": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "value_from": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "secret_key_ref": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "env_from": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "config_map_ref": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "local_object_reference": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "secret_ref": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "local_object_reference": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "liveness_probe": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "grpc": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "http_get": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "http_headers": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "ports": {
                                                            "maxItemsOne": false
                                                        },
                                                        "resources": {
                                                            "maxItemsOne": true
                                                        },
                                                        "startup_probe": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "grpc": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "http_get": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "http_headers": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "tcp_socket": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "volume_mounts": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "volumes": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "empty_dir": {
                                                            "maxItemsOne": true
                                                        },
                                                        "secret": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "items": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "traffic": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloud_run_service_iam_binding": {
                "current": "gcp:cloudrun/iamBinding:IamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloud_run_service_iam_member": {
                "current": "gcp:cloudrun/iamMember:IamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloud_run_service_iam_policy": {
                "current": "gcp:cloudrun/iamPolicy:IamPolicy",
                "majorVersion": 6
            },
            "google_cloud_run_v2_job": {
                "current": "gcp:cloudrunv2/job:Job",
                "majorVersion": 6,
                "fields": {
                    "binary_authorization": {
                        "maxItemsOne": true
                    },
                    "conditions": {
                        "maxItemsOne": false
                    },
                    "latest_created_execution": {
                        "maxItemsOne": false
                    },
                    "template": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "template": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "containers": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "args": {
                                                            "maxItemsOne": false
                                                        },
                                                        "command": {
                                                            "maxItemsOne": false
                                                        },
                                                        "env": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "value_source": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "secret_key_ref": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "liveness_probe": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "http_get": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "http_headers": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "tcp_socket": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "ports": {
                                                            "maxItemsOne": false
                                                        },
                                                        "resources": {
                                                            "maxItemsOne": true
                                                        },
                                                        "startup_probe": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "http_get": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "http_headers": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "tcp_socket": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "volume_mounts": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "volumes": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "cloud_sql_instance": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "instances": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "empty_dir": {
                                                            "maxItemsOne": true
                                                        },
                                                        "secret": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "items": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "vpc_access": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "terminal_condition": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloud_run_v2_job_iam_binding": {
                "current": "gcp:cloudrunv2/jobIamBinding:JobIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloud_run_v2_job_iam_member": {
                "current": "gcp:cloudrunv2/jobIamMember:JobIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloud_run_v2_job_iam_policy": {
                "current": "gcp:cloudrunv2/jobIamPolicy:JobIamPolicy",
                "majorVersion": 6
            },
            "google_cloud_run_v2_service": {
                "current": "gcp:cloudrunv2/service:Service",
                "majorVersion": 6,
                "fields": {
                    "binary_authorization": {
                        "maxItemsOne": true
                    },
                    "conditions": {
                        "maxItemsOne": false
                    },
                    "custom_audiences": {
                        "maxItemsOne": false
                    },
                    "template": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "containers": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "args": {
                                                "maxItemsOne": false
                                            },
                                            "command": {
                                                "maxItemsOne": false
                                            },
                                            "depends_on": {
                                                "maxItemsOne": false
                                            },
                                            "env": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "value_source": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "secret_key_ref": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "liveness_probe": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "grpc": {
                                                            "maxItemsOne": true
                                                        },
                                                        "http_get": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "http_headers": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "tcp_socket": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "ports": {
                                                "maxItemsOne": false
                                            },
                                            "resources": {
                                                "maxItemsOne": true
                                            },
                                            "startup_probe": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "grpc": {
                                                            "maxItemsOne": true
                                                        },
                                                        "http_get": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "http_headers": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "tcp_socket": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "volume_mounts": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "scaling": {
                                    "maxItemsOne": true
                                },
                                "volumes": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "cloud_sql_instance": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "instances": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "empty_dir": {
                                                "maxItemsOne": true
                                            },
                                            "secret": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "items": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "vpc_access": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "terminal_condition": {
                        "maxItemsOne": false
                    },
                    "traffic": {
                        "maxItemsOne": false
                    },
                    "traffic_statuses": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloud_run_v2_service_iam_binding": {
                "current": "gcp:cloudrunv2/serviceIamBinding:ServiceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloud_run_v2_service_iam_member": {
                "current": "gcp:cloudrunv2/serviceIamMember:ServiceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloud_run_v2_service_iam_policy": {
                "current": "gcp:cloudrunv2/serviceIamPolicy:ServiceIamPolicy",
                "majorVersion": 6
            },
            "google_cloud_scheduler_job": {
                "current": "gcp:cloudscheduler/job:Job",
                "majorVersion": 6,
                "fields": {
                    "app_engine_http_target": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "app_engine_routing": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "http_target": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "oauth_token": {
                                    "maxItemsOne": true
                                },
                                "oidc_token": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "pubsub_target": {
                        "maxItemsOne": true
                    },
                    "retry_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloud_tasks_queue": {
                "current": "gcp:cloudtasks/queue:Queue",
                "majorVersion": 6,
                "fields": {
                    "app_engine_routing_override": {
                        "maxItemsOne": true
                    },
                    "rate_limits": {
                        "maxItemsOne": true
                    },
                    "retry_config": {
                        "maxItemsOne": true
                    },
                    "stackdriver_logging_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloud_tasks_queue_iam_binding": {
                "current": "gcp:cloudtasks/queueIamBinding:QueueIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloud_tasks_queue_iam_member": {
                "current": "gcp:cloudtasks/queueIamMember:QueueIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloud_tasks_queue_iam_policy": {
                "current": "gcp:cloudtasks/queueIamPolicy:QueueIamPolicy",
                "majorVersion": 6
            },
            "google_cloudbuild_bitbucket_server_config": {
                "current": "gcp:cloudbuild/bitbucketServerConfig:BitbucketServerConfig",
                "majorVersion": 6,
                "fields": {
                    "connected_repositories": {
                        "maxItemsOne": false
                    },
                    "secrets": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloudbuild_trigger": {
                "current": "gcp:cloudbuild/trigger:Trigger",
                "majorVersion": 6,
                "fields": {
                    "approval_config": {
                        "maxItemsOne": true
                    },
                    "bitbucket_server_trigger_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "pull_request": {
                                    "maxItemsOne": true
                                },
                                "push": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "build": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "artifacts": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "images": {
                                                "maxItemsOne": false
                                            },
                                            "objects": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "paths": {
                                                            "maxItemsOne": false
                                                        },
                                                        "timing": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "available_secrets": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "secret_manager": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "images": {
                                    "maxItemsOne": false
                                },
                                "options": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "env": {
                                                "maxItemsOne": false
                                            },
                                            "secret_env": {
                                                "maxItemsOne": false
                                            },
                                            "source_provenance_hash": {
                                                "maxItemsOne": false
                                            },
                                            "volumes": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "secret": {
                                    "maxItemsOne": false
                                },
                                "source": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "repo_source": {
                                                "maxItemsOne": true
                                            },
                                            "storage_source": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "step": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "allow_exit_codes": {
                                                "maxItemsOne": false
                                            },
                                            "args": {
                                                "maxItemsOne": false
                                            },
                                            "env": {
                                                "maxItemsOne": false
                                            },
                                            "secret_env": {
                                                "maxItemsOne": false
                                            },
                                            "volumes": {
                                                "maxItemsOne": false
                                            },
                                            "wait_for": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "tags": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "git_file_source": {
                        "maxItemsOne": true
                    },
                    "github": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "pull_request": {
                                    "maxItemsOne": true
                                },
                                "push": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "ignored_files": {
                        "maxItemsOne": false
                    },
                    "included_files": {
                        "maxItemsOne": false
                    },
                    "pubsub_config": {
                        "maxItemsOne": true
                    },
                    "repository_event_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "pull_request": {
                                    "maxItemsOne": true
                                },
                                "push": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "source_to_build": {
                        "maxItemsOne": true
                    },
                    "tags": {
                        "maxItemsOne": false
                    },
                    "trigger_template": {
                        "maxItemsOne": true
                    },
                    "webhook_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloudbuild_worker_pool": {
                "current": "gcp:cloudbuild/workerPool:WorkerPool",
                "majorVersion": 6,
                "fields": {
                    "network_config": {
                        "maxItemsOne": true
                    },
                    "worker_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloudbuildv2_connection": {
                "current": "gcp:cloudbuildv2/connection:Connection",
                "majorVersion": 6,
                "fields": {
                    "github_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "authorizer_credential": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "github_enterprise_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "service_directory_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "gitlab_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "authorizer_credential": {
                                    "maxItemsOne": true
                                },
                                "read_authorizer_credential": {
                                    "maxItemsOne": true
                                },
                                "service_directory_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "installation_state": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloudbuildv2_connection_iam_binding": {
                "current": "gcp:cloudbuildv2/connectionIAMBinding:ConnectionIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloudbuildv2_connection_iam_member": {
                "current": "gcp:cloudbuildv2/connectionIAMMember:ConnectionIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloudbuildv2_connection_iam_policy": {
                "current": "gcp:cloudbuildv2/connectionIAMPolicy:ConnectionIAMPolicy",
                "majorVersion": 6
            },
            "google_cloudbuildv2_repository": {
                "current": "gcp:cloudbuildv2/repository:Repository",
                "majorVersion": 6
            },
            "google_clouddeploy_delivery_pipeline": {
                "current": "gcp:clouddeploy/deliveryPipeline:DeliveryPipeline",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "pipeline_ready_condition": {
                                    "maxItemsOne": false
                                },
                                "targets_present_condition": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "missing_targets": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "targets_type_condition": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "serial_pipeline": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "stages": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "deploy_parameters": {
                                                "maxItemsOne": false
                                            },
                                            "profiles": {
                                                "maxItemsOne": false
                                            },
                                            "strategy": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "canary": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "canary_deployment": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "percentages": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "custom_canary_deployment": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "phase_configs": {
                                                                                    "maxItemsOne": false,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "profiles": {
                                                                                                "maxItemsOne": false
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "runtime_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "cloud_run": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "kubernetes": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "gateway_service_mesh": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "service_networking": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "standard": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_clouddeploy_target": {
                "current": "gcp:clouddeploy/target:Target",
                "majorVersion": 6,
                "fields": {
                    "anthos_cluster": {
                        "maxItemsOne": true
                    },
                    "execution_configs": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "usages": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "gke": {
                        "maxItemsOne": true
                    },
                    "multi_target": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "target_ids": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "run": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloudfunctions2_function": {
                "current": "gcp:cloudfunctionsv2/function:Function",
                "majorVersion": 6,
                "fields": {
                    "build_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "source": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "repo_source": {
                                                "maxItemsOne": true
                                            },
                                            "storage_source": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "event_trigger": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "event_filters": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "service_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "secret_environment_variables": {
                                    "maxItemsOne": false
                                },
                                "secret_volumes": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "versions": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_cloudfunctions2_function_iam_binding": {
                "current": "gcp:cloudfunctionsv2/functionIamBinding:FunctionIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloudfunctions2_function_iam_member": {
                "current": "gcp:cloudfunctionsv2/functionIamMember:FunctionIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloudfunctions2_function_iam_policy": {
                "current": "gcp:cloudfunctionsv2/functionIamPolicy:FunctionIamPolicy",
                "majorVersion": 6
            },
            "google_cloudfunctions_function": {
                "current": "gcp:cloudfunctions/function:Function",
                "majorVersion": 6,
                "fields": {
                    "event_trigger": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "failure_policy": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "secret_environment_variables": {
                        "maxItemsOne": false
                    },
                    "secret_volumes": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "versions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "source_repository": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloudfunctions_function_iam_binding": {
                "current": "gcp:cloudfunctions/functionIamBinding:FunctionIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloudfunctions_function_iam_member": {
                "current": "gcp:cloudfunctions/functionIamMember:FunctionIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloudfunctions_function_iam_policy": {
                "current": "gcp:cloudfunctions/functionIamPolicy:FunctionIamPolicy",
                "majorVersion": 6
            },
            "google_cloudiot_device": {
                "current": "gcp:iot/device:Device",
                "majorVersion": 6,
                "fields": {
                    "config": {
                        "maxItemsOne": false
                    },
                    "credentials": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "public_key": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "gateway_config": {
                        "maxItemsOne": true
                    },
                    "last_error_status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "details": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "state": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloudiot_registry": {
                "current": "gcp:iot/registry:Registry",
                "majorVersion": 6,
                "fields": {
                    "credentials": {
                        "maxItemsOne": false
                    },
                    "event_notification_configs": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloudiot_registry_iam_binding": {
                "current": "gcp:iot/registryIamBinding:RegistryIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloudiot_registry_iam_member": {
                "current": "gcp:iot/registryIamMember:RegistryIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_cloudiot_registry_iam_policy": {
                "current": "gcp:iot/registryIamPolicy:RegistryIamPolicy",
                "majorVersion": 6
            },
            "google_cloudiot_registry_legacy": {
                "current": "gcp:kms/registry:Registry",
                "majorVersion": 6,
                "fields": {
                    "credentials": {
                        "maxItemsOne": false
                    },
                    "event_notification_configs": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_composer_environment": {
                "current": "gcp:composer/environment:Environment",
                "majorVersion": 6,
                "fields": {
                    "config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "database_config": {
                                    "maxItemsOne": true
                                },
                                "encryption_config": {
                                    "maxItemsOne": true
                                },
                                "maintenance_window": {
                                    "maxItemsOne": true
                                },
                                "master_authorized_networks_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "cidr_blocks": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "node_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "ip_allocation_policy": {
                                                "maxItemsOne": true
                                            },
                                            "oauth_scopes": {
                                                "maxItemsOne": false
                                            },
                                            "tags": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "private_environment_config": {
                                    "maxItemsOne": true
                                },
                                "recovery_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "scheduled_snapshots_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "software_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "cloud_data_lineage_integration": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "web_server_config": {
                                    "maxItemsOne": true
                                },
                                "web_server_network_access_control": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "allowed_ip_range": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "workloads_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "scheduler": {
                                                "maxItemsOne": true
                                            },
                                            "triggerer": {
                                                "maxItemsOne": true
                                            },
                                            "web_server": {
                                                "maxItemsOne": true
                                            },
                                            "worker": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_address": {
                "current": "gcp:compute/address:Address",
                "majorVersion": 6,
                "fields": {
                    "users": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_attached_disk": {
                "current": "gcp:compute/attachedDisk:AttachedDisk",
                "majorVersion": 6
            },
            "google_compute_autoscaler": {
                "current": "gcp:compute/autoscalar:Autoscalar",
                "past": [
                    {
                        "name": "gcp:compute/autoscalar:Autoscalar",
                        "inCodegen": true,
                        "majorVersion": 6
                    }
                ],
                "majorVersion": 6,
                "fields": {
                    "autoscaling_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cpu_utilization": {
                                    "maxItemsOne": true
                                },
                                "load_balancing_utilization": {
                                    "maxItemsOne": true
                                },
                                "metric": {
                                    "maxItemsOne": false
                                },
                                "scale_down_control": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "max_scaled_down_replicas": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "scale_in_control": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "max_scaled_in_replicas": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "scaling_schedules": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_backend_bucket": {
                "current": "gcp:compute/backendBucket:BackendBucket",
                "majorVersion": 6,
                "fields": {
                    "cdn_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "bypass_cache_on_request_headers": {
                                    "maxItemsOne": false
                                },
                                "cache_key_policy": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "include_http_headers": {
                                                "maxItemsOne": false
                                            },
                                            "query_string_whitelist": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "negative_caching_policy": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "custom_response_headers": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_backend_bucket_iam_binding": {
                "current": "gcp:compute/backendBucketIamBinding:BackendBucketIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_backend_bucket_iam_member": {
                "current": "gcp:compute/backendBucketIamMember:BackendBucketIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_backend_bucket_iam_policy": {
                "current": "gcp:compute/backendBucketIamPolicy:BackendBucketIamPolicy",
                "majorVersion": 6
            },
            "google_compute_backend_bucket_signed_url_key": {
                "current": "gcp:compute/backendBucketSignedUrlKey:BackendBucketSignedUrlKey",
                "majorVersion": 6
            },
            "google_compute_backend_service": {
                "current": "gcp:compute/backendService:BackendService",
                "majorVersion": 6,
                "fields": {
                    "backend": {
                        "maxItemsOne": false
                    },
                    "cdn_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "bypass_cache_on_request_headers": {
                                    "maxItemsOne": false
                                },
                                "cache_key_policy": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "include_http_headers": {
                                                "maxItemsOne": false
                                            },
                                            "include_named_cookies": {
                                                "maxItemsOne": false
                                            },
                                            "query_string_blacklist": {
                                                "maxItemsOne": false
                                            },
                                            "query_string_whitelist": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "negative_caching_policy": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "circuit_breakers": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "connect_timeout": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "consistent_hash": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "http_cookie": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "ttl": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "custom_request_headers": {
                        "maxItemsOne": false
                    },
                    "custom_response_headers": {
                        "maxItemsOne": false
                    },
                    "health_checks": {
                        "maxItemsOne": true
                    },
                    "iap": {
                        "maxItemsOne": true
                    },
                    "locality_lb_policies": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "custom_policy": {
                                    "maxItemsOne": true
                                },
                                "policy": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "log_config": {
                        "maxItemsOne": true
                    },
                    "outlier_detection": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "base_ejection_time": {
                                    "maxItemsOne": true
                                },
                                "interval": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "security_settings": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "subject_alt_names": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_backend_service_iam_binding": {
                "current": "gcp:compute/backendServiceIamBinding:BackendServiceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_backend_service_iam_member": {
                "current": "gcp:compute/backendServiceIamMember:BackendServiceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_backend_service_iam_policy": {
                "current": "gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy",
                "majorVersion": 6
            },
            "google_compute_backend_service_signed_url_key": {
                "current": "gcp:compute/backendServiceSignedUrlKey:BackendServiceSignedUrlKey",
                "majorVersion": 6
            },
            "google_compute_disk": {
                "current": "gcp:compute/disk:Disk",
                "majorVersion": 6,
                "fields": {
                    "async_primary_disk": {
                        "maxItemsOne": true
                    },
                    "disk_encryption_key": {
                        "maxItemsOne": true
                    },
                    "guest_os_features": {
                        "maxItemsOne": false
                    },
                    "licenses": {
                        "maxItemsOne": false
                    },
                    "resource_policies": {
                        "maxItemsOne": false
                    },
                    "source_image_encryption_key": {
                        "maxItemsOne": true
                    },
                    "source_snapshot_encryption_key": {
                        "maxItemsOne": true
                    },
                    "users": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_disk_async_replication": {
                "current": "gcp:compute/diskAsyncReplication:DiskAsyncReplication",
                "majorVersion": 6,
                "fields": {
                    "secondary_disk": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_disk_iam_binding": {
                "current": "gcp:compute/diskIamBinding:DiskIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_disk_iam_member": {
                "current": "gcp:compute/diskIamMember:DiskIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_disk_iam_policy": {
                "current": "gcp:compute/diskIamPolicy:DiskIamPolicy",
                "majorVersion": 6
            },
            "google_compute_disk_resource_policy_attachment": {
                "current": "gcp:compute/diskResourcePolicyAttachment:DiskResourcePolicyAttachment",
                "majorVersion": 6
            },
            "google_compute_external_vpn_gateway": {
                "current": "gcp:compute/externalVpnGateway:ExternalVpnGateway",
                "majorVersion": 6,
                "fields": {
                    "interface": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_firewall": {
                "current": "gcp:compute/firewall:Firewall",
                "majorVersion": 6,
                "fields": {
                    "allow": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "ports": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "deny": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "ports": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "destination_ranges": {
                        "maxItemsOne": false
                    },
                    "log_config": {
                        "maxItemsOne": true
                    },
                    "source_ranges": {
                        "maxItemsOne": false
                    },
                    "source_service_accounts": {
                        "maxItemsOne": false
                    },
                    "source_tags": {
                        "maxItemsOne": false
                    },
                    "target_service_accounts": {
                        "maxItemsOne": false
                    },
                    "target_tags": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_firewall_policy": {
                "current": "gcp:compute/firewallPolicy:FirewallPolicy",
                "majorVersion": 6
            },
            "google_compute_firewall_policy_association": {
                "current": "gcp:compute/firewallPolicyAssociation:FirewallPolicyAssociation",
                "majorVersion": 6
            },
            "google_compute_firewall_policy_rule": {
                "current": "gcp:compute/firewallPolicyRule:FirewallPolicyRule",
                "majorVersion": 6,
                "fields": {
                    "match": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "dest_address_groups": {
                                    "maxItemsOne": false
                                },
                                "dest_fqdns": {
                                    "maxItemsOne": false
                                },
                                "dest_ip_ranges": {
                                    "maxItemsOne": false
                                },
                                "dest_region_codes": {
                                    "maxItemsOne": false
                                },
                                "dest_threat_intelligences": {
                                    "maxItemsOne": false
                                },
                                "layer4_configs": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ports": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "src_address_groups": {
                                    "maxItemsOne": false
                                },
                                "src_fqdns": {
                                    "maxItemsOne": false
                                },
                                "src_ip_ranges": {
                                    "maxItemsOne": false
                                },
                                "src_region_codes": {
                                    "maxItemsOne": false
                                },
                                "src_threat_intelligences": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "target_resources": {
                        "maxItemsOne": false
                    },
                    "target_service_accounts": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_forwarding_rule": {
                "current": "gcp:compute/forwardingRule:ForwardingRule",
                "majorVersion": 6,
                "fields": {
                    "ports": {
                        "maxItemsOne": false
                    },
                    "service_directory_registrations": {
                        "maxItemsOne": false
                    },
                    "source_ip_ranges": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_global_address": {
                "current": "gcp:compute/globalAddress:GlobalAddress",
                "majorVersion": 6
            },
            "google_compute_global_forwarding_rule": {
                "current": "gcp:compute/globalForwardingRule:GlobalForwardingRule",
                "majorVersion": 6,
                "fields": {
                    "metadata_filters": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "filter_labels": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "source_ip_ranges": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_global_network_endpoint": {
                "current": "gcp:compute/globalNetworkEndpoint:GlobalNetworkEndpoint",
                "majorVersion": 6
            },
            "google_compute_global_network_endpoint_group": {
                "current": "gcp:compute/globalNetworkEndpointGroup:GlobalNetworkEndpointGroup",
                "majorVersion": 6
            },
            "google_compute_ha_vpn_gateway": {
                "current": "gcp:compute/haVpnGateway:HaVpnGateway",
                "majorVersion": 6,
                "fields": {
                    "vpn_interfaces": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_health_check": {
                "current": "gcp:compute/healthCheck:HealthCheck",
                "majorVersion": 6,
                "fields": {
                    "grpc_health_check": {
                        "maxItemsOne": true
                    },
                    "http2_health_check": {
                        "maxItemsOne": true
                    },
                    "http_health_check": {
                        "maxItemsOne": true
                    },
                    "https_health_check": {
                        "maxItemsOne": true
                    },
                    "log_config": {
                        "maxItemsOne": true
                    },
                    "ssl_health_check": {
                        "maxItemsOne": true
                    },
                    "tcp_health_check": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_http_health_check": {
                "current": "gcp:compute/httpHealthCheck:HttpHealthCheck",
                "majorVersion": 6
            },
            "google_compute_https_health_check": {
                "current": "gcp:compute/httpsHealthCheck:HttpsHealthCheck",
                "majorVersion": 6
            },
            "google_compute_image": {
                "current": "gcp:compute/image:Image",
                "majorVersion": 6,
                "fields": {
                    "guest_os_features": {
                        "maxItemsOne": false
                    },
                    "image_encryption_key": {
                        "maxItemsOne": true
                    },
                    "licenses": {
                        "maxItemsOne": false
                    },
                    "raw_disk": {
                        "maxItemsOne": true
                    },
                    "storage_locations": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_image_iam_binding": {
                "current": "gcp:compute/imageIamBinding:ImageIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_image_iam_member": {
                "current": "gcp:compute/imageIamMember:ImageIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_image_iam_policy": {
                "current": "gcp:compute/imageIamPolicy:ImageIamPolicy",
                "majorVersion": 6
            },
            "google_compute_instance": {
                "current": "gcp:compute/instance:Instance",
                "majorVersion": 6,
                "fields": {
                    "advanced_machine_features": {
                        "maxItemsOne": true
                    },
                    "attached_disk": {
                        "maxItemsOne": false
                    },
                    "boot_disk": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "initialize_params": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "confidential_instance_config": {
                        "maxItemsOne": true
                    },
                    "guest_accelerator": {
                        "maxItemsOne": false
                    },
                    "network_interface": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "access_config": {
                                    "maxItemsOne": false
                                },
                                "alias_ip_range": {
                                    "maxItemsOne": false
                                },
                                "ipv6_access_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_performance_config": {
                        "maxItemsOne": true
                    },
                    "params": {
                        "maxItemsOne": true
                    },
                    "reservation_affinity": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "specific_reservation": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "resource_policies": {
                        "maxItemsOne": true
                    },
                    "scheduling": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "max_run_duration": {
                                    "maxItemsOne": true
                                },
                                "node_affinities": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "scratch_disk": {
                        "maxItemsOne": false
                    },
                    "service_account": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "scopes": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "shielded_instance_config": {
                        "maxItemsOne": true
                    },
                    "tags": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_instance_from_machine_image": {
                "current": "gcp:compute/instanceFromMachineImage:InstanceFromMachineImage",
                "majorVersion": 6,
                "fields": {
                    "advanced_machine_features": {
                        "maxItemsOne": true
                    },
                    "attached_disk": {
                        "maxItemsOne": false
                    },
                    "boot_disk": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "initialize_params": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "confidential_instance_config": {
                        "maxItemsOne": true
                    },
                    "guest_accelerator": {
                        "maxItemsOne": false
                    },
                    "network_interface": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "access_config": {
                                    "maxItemsOne": false
                                },
                                "alias_ip_range": {
                                    "maxItemsOne": false
                                },
                                "ipv6_access_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_performance_config": {
                        "maxItemsOne": true
                    },
                    "params": {
                        "maxItemsOne": true
                    },
                    "reservation_affinity": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "specific_reservation": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "resource_policies": {
                        "maxItemsOne": true
                    },
                    "scheduling": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "max_run_duration": {
                                    "maxItemsOne": true
                                },
                                "node_affinities": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "scratch_disk": {
                        "maxItemsOne": false
                    },
                    "service_account": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "scopes": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "shielded_instance_config": {
                        "maxItemsOne": true
                    },
                    "tags": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_instance_from_template": {
                "current": "gcp:compute/instanceFromTemplate:InstanceFromTemplate",
                "majorVersion": 6,
                "fields": {
                    "advanced_machine_features": {
                        "maxItemsOne": true
                    },
                    "attached_disk": {
                        "maxItemsOne": false
                    },
                    "boot_disk": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "initialize_params": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "confidential_instance_config": {
                        "maxItemsOne": true
                    },
                    "guest_accelerator": {
                        "maxItemsOne": false
                    },
                    "network_interface": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "access_config": {
                                    "maxItemsOne": false
                                },
                                "alias_ip_range": {
                                    "maxItemsOne": false
                                },
                                "ipv6_access_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_performance_config": {
                        "maxItemsOne": true
                    },
                    "params": {
                        "maxItemsOne": true
                    },
                    "reservation_affinity": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "specific_reservation": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "resource_policies": {
                        "maxItemsOne": true
                    },
                    "scheduling": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "max_run_duration": {
                                    "maxItemsOne": true
                                },
                                "node_affinities": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "scratch_disk": {
                        "maxItemsOne": false
                    },
                    "service_account": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "scopes": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "shielded_instance_config": {
                        "maxItemsOne": true
                    },
                    "tags": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_instance_group": {
                "current": "gcp:compute/instanceGroup:InstanceGroup",
                "majorVersion": 6,
                "fields": {
                    "instances": {
                        "maxItemsOne": false
                    },
                    "named_port": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_instance_group_manager": {
                "current": "gcp:compute/instanceGroupManager:InstanceGroupManager",
                "majorVersion": 6,
                "fields": {
                    "all_instances_config": {
                        "maxItemsOne": true
                    },
                    "auto_healing_policies": {
                        "maxItemsOne": true
                    },
                    "instance_lifecycle_policy": {
                        "maxItemsOne": true
                    },
                    "named_port": {
                        "maxItemsOne": false
                    },
                    "stateful_disk": {
                        "maxItemsOne": false
                    },
                    "stateful_external_ip": {
                        "maxItemsOne": false
                    },
                    "stateful_internal_ip": {
                        "maxItemsOne": false
                    },
                    "status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "all_instances_config": {
                                    "maxItemsOne": false
                                },
                                "stateful": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "per_instance_configs": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "version_target": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "target_pools": {
                        "maxItemsOne": false
                    },
                    "update_policy": {
                        "maxItemsOne": true
                    },
                    "version": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "target_size": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_instance_group_named_port": {
                "current": "gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort",
                "majorVersion": 6
            },
            "google_compute_instance_iam_binding": {
                "current": "gcp:compute/instanceIAMBinding:InstanceIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_instance_iam_member": {
                "current": "gcp:compute/instanceIAMMember:InstanceIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_instance_iam_policy": {
                "current": "gcp:compute/instanceIAMPolicy:InstanceIAMPolicy",
                "majorVersion": 6
            },
            "google_compute_instance_template": {
                "current": "gcp:compute/instanceTemplate:InstanceTemplate",
                "majorVersion": 6,
                "fields": {
                    "advanced_machine_features": {
                        "maxItemsOne": true
                    },
                    "confidential_instance_config": {
                        "maxItemsOne": true
                    },
                    "disk": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "disk_encryption_key": {
                                    "maxItemsOne": true
                                },
                                "resource_policies": {
                                    "maxItemsOne": true
                                },
                                "source_image_encryption_key": {
                                    "maxItemsOne": true
                                },
                                "source_snapshot_encryption_key": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "guest_accelerator": {
                        "maxItemsOne": false
                    },
                    "network_interface": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "access_config": {
                                    "maxItemsOne": false
                                },
                                "alias_ip_range": {
                                    "maxItemsOne": false
                                },
                                "ipv6_access_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_performance_config": {
                        "maxItemsOne": true
                    },
                    "reservation_affinity": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "specific_reservation": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "resource_policies": {
                        "maxItemsOne": true
                    },
                    "scheduling": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "max_run_duration": {
                                    "maxItemsOne": true
                                },
                                "node_affinities": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "service_account": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "scopes": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "shielded_instance_config": {
                        "maxItemsOne": true
                    },
                    "tags": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_interconnect_attachment": {
                "current": "gcp:compute/interconnectAttachment:InterconnectAttachment",
                "majorVersion": 6,
                "fields": {
                    "candidate_subnets": {
                        "maxItemsOne": false
                    },
                    "ipsec_internal_addresses": {
                        "maxItemsOne": false
                    },
                    "private_interconnect_info": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_machine_image": {
                "current": "gcp:compute/machineImage:MachineImage",
                "majorVersion": 6,
                "fields": {
                    "machine_image_encryption_key": {
                        "maxItemsOne": true
                    },
                    "storage_locations": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_machine_image_iam_binding": {
                "current": "gcp:compute/machineImageIamBinding:MachineImageIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_machine_image_iam_member": {
                "current": "gcp:compute/machineImageIamMember:MachineImageIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_machine_image_iam_policy": {
                "current": "gcp:compute/machineImageIamPolicy:MachineImageIamPolicy",
                "majorVersion": 6
            },
            "google_compute_managed_ssl_certificate": {
                "current": "gcp:compute/managedSslCertificate:ManagedSslCertificate",
                "majorVersion": 6,
                "fields": {
                    "managed": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "domains": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "subject_alternative_names": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_managed_ssl_certificate_legacy": {
                "current": "gcp:compute/mangedSslCertificate:MangedSslCertificate",
                "majorVersion": 6,
                "fields": {
                    "managed": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "domains": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "subject_alternative_names": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_network": {
                "current": "gcp:compute/network:Network",
                "majorVersion": 6
            },
            "google_compute_network_edge_security_service": {
                "current": "gcp:compute/networkEdgeSecurityService:NetworkEdgeSecurityService",
                "majorVersion": 6
            },
            "google_compute_network_endpoint": {
                "current": "gcp:compute/networkEndpoint:NetworkEndpoint",
                "majorVersion": 6
            },
            "google_compute_network_endpoint_group": {
                "current": "gcp:compute/networkEndpointGroup:NetworkEndpointGroup",
                "majorVersion": 6
            },
            "google_compute_network_endpoints": {
                "current": "gcp:compute/networkEndpointList:NetworkEndpointList",
                "majorVersion": 6,
                "fields": {
                    "network_endpoints": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_network_firewall_policy": {
                "current": "gcp:compute/networkFirewallPolicy:NetworkFirewallPolicy",
                "majorVersion": 6
            },
            "google_compute_network_firewall_policy_association": {
                "current": "gcp:compute/networkFirewallPolicyAssociation:NetworkFirewallPolicyAssociation",
                "majorVersion": 6
            },
            "google_compute_network_firewall_policy_rule": {
                "current": "gcp:compute/networkFirewallPolicyRule:NetworkFirewallPolicyRule",
                "majorVersion": 6,
                "fields": {
                    "match": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "dest_address_groups": {
                                    "maxItemsOne": false
                                },
                                "dest_fqdns": {
                                    "maxItemsOne": false
                                },
                                "dest_ip_ranges": {
                                    "maxItemsOne": false
                                },
                                "dest_region_codes": {
                                    "maxItemsOne": false
                                },
                                "dest_threat_intelligences": {
                                    "maxItemsOne": false
                                },
                                "layer4_configs": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ports": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "src_address_groups": {
                                    "maxItemsOne": false
                                },
                                "src_fqdns": {
                                    "maxItemsOne": false
                                },
                                "src_ip_ranges": {
                                    "maxItemsOne": false
                                },
                                "src_region_codes": {
                                    "maxItemsOne": false
                                },
                                "src_secure_tags": {
                                    "maxItemsOne": false
                                },
                                "src_threat_intelligences": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "target_secure_tags": {
                        "maxItemsOne": false
                    },
                    "target_service_accounts": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_network_peering": {
                "current": "gcp:compute/networkPeering:NetworkPeering",
                "majorVersion": 6
            },
            "google_compute_network_peering_routes_config": {
                "current": "gcp:compute/networkPeeringRoutesConfig:NetworkPeeringRoutesConfig",
                "majorVersion": 6
            },
            "google_compute_node_group": {
                "current": "gcp:compute/nodeGroup:NodeGroup",
                "majorVersion": 6,
                "fields": {
                    "autoscaling_policy": {
                        "maxItemsOne": true
                    },
                    "maintenance_window": {
                        "maxItemsOne": true
                    },
                    "share_settings": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "project_map": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_node_template": {
                "current": "gcp:compute/nodeTemplate:NodeTemplate",
                "majorVersion": 6,
                "fields": {
                    "node_type_flexibility": {
                        "maxItemsOne": true
                    },
                    "server_binding": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_organization_security_policy": {
                "current": "gcp:compute/organizationSecurityPolicy:OrganizationSecurityPolicy",
                "majorVersion": 6
            },
            "google_compute_organization_security_policy_association": {
                "current": "gcp:compute/organizationSecurityPolicyAssociation:OrganizationSecurityPolicyAssociation",
                "majorVersion": 6
            },
            "google_compute_organization_security_policy_rule": {
                "current": "gcp:compute/organizationSecurityPolicyRule:OrganizationSecurityPolicyRule",
                "majorVersion": 6,
                "fields": {
                    "match": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "dest_ip_ranges": {
                                                "maxItemsOne": false
                                            },
                                            "layer4_config": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "ports": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "src_ip_ranges": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "target_resources": {
                        "maxItemsOne": false
                    },
                    "target_service_accounts": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_packet_mirroring": {
                "current": "gcp:compute/packetMirroring:PacketMirroring",
                "majorVersion": 6,
                "fields": {
                    "collector_ilb": {
                        "maxItemsOne": true
                    },
                    "filter": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cidr_ranges": {
                                    "maxItemsOne": false
                                },
                                "ip_protocols": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "mirrored_resources": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "instances": {
                                    "maxItemsOne": false
                                },
                                "subnetworks": {
                                    "maxItemsOne": false
                                },
                                "tags": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_per_instance_config": {
                "current": "gcp:compute/perInstanceConfig:PerInstanceConfig",
                "majorVersion": 6,
                "fields": {
                    "preserved_state": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "disk": {
                                    "maxItemsOne": false
                                },
                                "external_ip": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ip_address": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "internal_ip": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ip_address": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_project_default_network_tier": {
                "current": "gcp:compute/projectDefaultNetworkTier:ProjectDefaultNetworkTier",
                "majorVersion": 6
            },
            "google_compute_project_metadata": {
                "current": "gcp:compute/projectMetadata:ProjectMetadata",
                "majorVersion": 6
            },
            "google_compute_project_metadata_item": {
                "current": "gcp:compute/projectMetadataItem:ProjectMetadataItem",
                "majorVersion": 6
            },
            "google_compute_public_advertised_prefix": {
                "current": "gcp:compute/publicAdvertisedPrefix:PublicAdvertisedPrefix",
                "majorVersion": 6
            },
            "google_compute_public_delegated_prefix": {
                "current": "gcp:compute/publicDelegatedPrefix:PublicDelegatedPrefix",
                "majorVersion": 6
            },
            "google_compute_region_autoscaler": {
                "current": "gcp:compute/regionAutoscaler:RegionAutoscaler",
                "majorVersion": 6,
                "fields": {
                    "autoscaling_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cpu_utilization": {
                                    "maxItemsOne": true
                                },
                                "load_balancing_utilization": {
                                    "maxItemsOne": true
                                },
                                "metric": {
                                    "maxItemsOne": false
                                },
                                "scale_down_control": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "max_scaled_down_replicas": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "scale_in_control": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "max_scaled_in_replicas": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "scaling_schedules": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_region_backend_service": {
                "current": "gcp:compute/regionBackendService:RegionBackendService",
                "majorVersion": 6,
                "fields": {
                    "backend": {
                        "maxItemsOne": false
                    },
                    "cdn_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cache_key_policy": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "include_named_cookies": {
                                                "maxItemsOne": false
                                            },
                                            "query_string_blacklist": {
                                                "maxItemsOne": false
                                            },
                                            "query_string_whitelist": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "negative_caching_policy": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "circuit_breakers": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "connect_timeout": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "connection_tracking_policy": {
                        "maxItemsOne": true
                    },
                    "consistent_hash": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "http_cookie": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "ttl": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "failover_policy": {
                        "maxItemsOne": true
                    },
                    "health_checks": {
                        "maxItemsOne": true
                    },
                    "iap": {
                        "maxItemsOne": true
                    },
                    "log_config": {
                        "maxItemsOne": true
                    },
                    "outlier_detection": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "base_ejection_time": {
                                    "maxItemsOne": true
                                },
                                "interval": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "subsetting": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_region_backend_service_iam_binding": {
                "current": "gcp:compute/regionBackendServiceIamBinding:RegionBackendServiceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_region_backend_service_iam_member": {
                "current": "gcp:compute/regionBackendServiceIamMember:RegionBackendServiceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_region_backend_service_iam_policy": {
                "current": "gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy",
                "majorVersion": 6
            },
            "google_compute_region_commitment": {
                "current": "gcp:compute/regionCommitment:RegionCommitment",
                "majorVersion": 6,
                "fields": {
                    "license_resource": {
                        "maxItemsOne": true
                    },
                    "resources": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_region_disk": {
                "current": "gcp:compute/regionDisk:RegionDisk",
                "majorVersion": 6,
                "fields": {
                    "async_primary_disk": {
                        "maxItemsOne": true
                    },
                    "disk_encryption_key": {
                        "maxItemsOne": true
                    },
                    "guest_os_features": {
                        "maxItemsOne": false
                    },
                    "licenses": {
                        "maxItemsOne": false
                    },
                    "replica_zones": {
                        "maxItemsOne": false
                    },
                    "source_snapshot_encryption_key": {
                        "maxItemsOne": true
                    },
                    "users": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_region_disk_iam_binding": {
                "current": "gcp:compute/regionDiskIamBinding:RegionDiskIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_region_disk_iam_member": {
                "current": "gcp:compute/regionDiskIamMember:RegionDiskIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_region_disk_iam_policy": {
                "current": "gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy",
                "majorVersion": 6
            },
            "google_compute_region_disk_resource_policy_attachment": {
                "current": "gcp:compute/regionDiskResourcePolicyAttachment:RegionDiskResourcePolicyAttachment",
                "majorVersion": 6
            },
            "google_compute_region_health_check": {
                "current": "gcp:compute/regionHealthCheck:RegionHealthCheck",
                "majorVersion": 6,
                "fields": {
                    "grpc_health_check": {
                        "maxItemsOne": true
                    },
                    "http2_health_check": {
                        "maxItemsOne": true
                    },
                    "http_health_check": {
                        "maxItemsOne": true
                    },
                    "https_health_check": {
                        "maxItemsOne": true
                    },
                    "log_config": {
                        "maxItemsOne": true
                    },
                    "ssl_health_check": {
                        "maxItemsOne": true
                    },
                    "tcp_health_check": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_region_instance_group_manager": {
                "current": "gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager",
                "majorVersion": 6,
                "fields": {
                    "all_instances_config": {
                        "maxItemsOne": true
                    },
                    "auto_healing_policies": {
                        "maxItemsOne": true
                    },
                    "distribution_policy_zones": {
                        "maxItemsOne": false
                    },
                    "instance_lifecycle_policy": {
                        "maxItemsOne": true
                    },
                    "named_port": {
                        "maxItemsOne": false
                    },
                    "stateful_disk": {
                        "maxItemsOne": false
                    },
                    "stateful_external_ip": {
                        "maxItemsOne": false
                    },
                    "stateful_internal_ip": {
                        "maxItemsOne": false
                    },
                    "status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "all_instances_config": {
                                    "maxItemsOne": false
                                },
                                "stateful": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "per_instance_configs": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "version_target": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "target_pools": {
                        "maxItemsOne": false
                    },
                    "update_policy": {
                        "maxItemsOne": true
                    },
                    "version": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "target_size": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_region_instance_template": {
                "current": "gcp:compute/regionInstanceTemplate:RegionInstanceTemplate",
                "majorVersion": 6,
                "fields": {
                    "advanced_machine_features": {
                        "maxItemsOne": true
                    },
                    "confidential_instance_config": {
                        "maxItemsOne": true
                    },
                    "disk": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "disk_encryption_key": {
                                    "maxItemsOne": true
                                },
                                "resource_policies": {
                                    "maxItemsOne": true
                                },
                                "source_image_encryption_key": {
                                    "maxItemsOne": true
                                },
                                "source_snapshot_encryption_key": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "guest_accelerator": {
                        "maxItemsOne": false
                    },
                    "network_interface": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "access_config": {
                                    "maxItemsOne": false
                                },
                                "alias_ip_range": {
                                    "maxItemsOne": false
                                },
                                "ipv6_access_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_performance_config": {
                        "maxItemsOne": true
                    },
                    "reservation_affinity": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "specific_reservation": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "resource_policies": {
                        "maxItemsOne": true
                    },
                    "scheduling": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "max_run_duration": {
                                    "maxItemsOne": true
                                },
                                "node_affinities": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "service_account": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "scopes": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "shielded_instance_config": {
                        "maxItemsOne": true
                    },
                    "tags": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_region_network_endpoint_group": {
                "current": "gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup",
                "majorVersion": 6,
                "fields": {
                    "app_engine": {
                        "maxItemsOne": true
                    },
                    "cloud_function": {
                        "maxItemsOne": true
                    },
                    "cloud_run": {
                        "maxItemsOne": true
                    },
                    "serverless_deployment": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_region_network_firewall_policy": {
                "current": "gcp:compute/regionNetworkFirewallPolicy:RegionNetworkFirewallPolicy",
                "majorVersion": 6
            },
            "google_compute_region_network_firewall_policy_association": {
                "current": "gcp:compute/regionNetworkFirewallPolicyAssociation:RegionNetworkFirewallPolicyAssociation",
                "majorVersion": 6
            },
            "google_compute_region_network_firewall_policy_rule": {
                "current": "gcp:compute/regionNetworkFirewallPolicyRule:RegionNetworkFirewallPolicyRule",
                "majorVersion": 6,
                "fields": {
                    "match": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "dest_address_groups": {
                                    "maxItemsOne": false
                                },
                                "dest_fqdns": {
                                    "maxItemsOne": false
                                },
                                "dest_ip_ranges": {
                                    "maxItemsOne": false
                                },
                                "dest_region_codes": {
                                    "maxItemsOne": false
                                },
                                "dest_threat_intelligences": {
                                    "maxItemsOne": false
                                },
                                "layer4_configs": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ports": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "src_address_groups": {
                                    "maxItemsOne": false
                                },
                                "src_fqdns": {
                                    "maxItemsOne": false
                                },
                                "src_ip_ranges": {
                                    "maxItemsOne": false
                                },
                                "src_region_codes": {
                                    "maxItemsOne": false
                                },
                                "src_secure_tags": {
                                    "maxItemsOne": false
                                },
                                "src_threat_intelligences": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "target_secure_tags": {
                        "maxItemsOne": false
                    },
                    "target_service_accounts": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_region_per_instance_config": {
                "current": "gcp:compute/regionPerInstanceConfig:RegionPerInstanceConfig",
                "majorVersion": 6,
                "fields": {
                    "preserved_state": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "disk": {
                                    "maxItemsOne": false
                                },
                                "external_ip": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ip_address": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "internal_ip": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ip_address": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_region_security_policy": {
                "current": "gcp:compute/regionSecurityPolicy:RegionSecurityPolicy",
                "majorVersion": 6,
                "fields": {
                    "ddos_protection_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_region_ssl_certificate": {
                "current": "gcp:compute/regionSslCertificate:RegionSslCertificate",
                "majorVersion": 6
            },
            "google_compute_region_ssl_policy": {
                "current": "gcp:compute/regionSslPolicy:RegionSslPolicy",
                "majorVersion": 6,
                "fields": {
                    "custom_features": {
                        "maxItemsOne": false
                    },
                    "enabled_features": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_region_target_http_proxy": {
                "current": "gcp:compute/regionTargetHttpProxy:RegionTargetHttpProxy",
                "majorVersion": 6
            },
            "google_compute_region_target_https_proxy": {
                "current": "gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy",
                "majorVersion": 6,
                "fields": {
                    "ssl_certificates": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_region_target_tcp_proxy": {
                "current": "gcp:compute/regionTargetTcpProxy:RegionTargetTcpProxy",
                "majorVersion": 6
            },
            "google_compute_region_url_map": {
                "current": "gcp:compute/regionUrlMap:RegionUrlMap",
                "majorVersion": 6,
                "fields": {
                    "default_route_action": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cors_policy": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "allow_headers": {
                                                "maxItemsOne": false
                                            },
                                            "allow_methods": {
                                                "maxItemsOne": false
                                            },
                                            "allow_origin_regexes": {
                                                "maxItemsOne": false
                                            },
                                            "allow_origins": {
                                                "maxItemsOne": false
                                            },
                                            "expose_headers": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "fault_injection_policy": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "abort": {
                                                "maxItemsOne": true
                                            },
                                            "delay": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "fixed_delay": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "request_mirror_policy": {
                                    "maxItemsOne": true
                                },
                                "retry_policy": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "per_try_timeout": {
                                                "maxItemsOne": true
                                            },
                                            "retry_conditions": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "timeout": {
                                    "maxItemsOne": true
                                },
                                "url_rewrite": {
                                    "maxItemsOne": true
                                },
                                "weighted_backend_services": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "header_action": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "request_headers_to_add": {
                                                            "maxItemsOne": false
                                                        },
                                                        "request_headers_to_remove": {
                                                            "maxItemsOne": false
                                                        },
                                                        "response_headers_to_add": {
                                                            "maxItemsOne": false
                                                        },
                                                        "response_headers_to_remove": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default_url_redirect": {
                        "maxItemsOne": true
                    },
                    "host_rule": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "hosts": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "path_matcher": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "default_url_redirect": {
                                    "maxItemsOne": true
                                },
                                "path_rule": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "paths": {
                                                "maxItemsOne": false
                                            },
                                            "route_action": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "cors_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "allow_headers": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allow_methods": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allow_origin_regexes": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allow_origins": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "expose_headers": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "fault_injection_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "abort": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "delay": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "fixed_delay": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "request_mirror_policy": {
                                                            "maxItemsOne": true
                                                        },
                                                        "retry_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "per_try_timeout": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "retry_conditions": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "timeout": {
                                                            "maxItemsOne": true
                                                        },
                                                        "url_rewrite": {
                                                            "maxItemsOne": true
                                                        },
                                                        "weighted_backend_services": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "header_action": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "request_headers_to_add": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "request_headers_to_remove": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "response_headers_to_add": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "response_headers_to_remove": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "url_redirect": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "route_rules": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "header_action": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "request_headers_to_add": {
                                                            "maxItemsOne": false
                                                        },
                                                        "request_headers_to_remove": {
                                                            "maxItemsOne": false
                                                        },
                                                        "response_headers_to_add": {
                                                            "maxItemsOne": false
                                                        },
                                                        "response_headers_to_remove": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "match_rules": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "header_matches": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "range_match": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "metadata_filters": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "filter_labels": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "query_parameter_matches": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "route_action": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "cors_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "allow_headers": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allow_methods": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allow_origin_regexes": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allow_origins": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "expose_headers": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "fault_injection_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "abort": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "delay": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "fixed_delay": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "request_mirror_policy": {
                                                            "maxItemsOne": true
                                                        },
                                                        "retry_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "per_try_timeout": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "retry_conditions": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "timeout": {
                                                            "maxItemsOne": true
                                                        },
                                                        "url_rewrite": {
                                                            "maxItemsOne": true
                                                        },
                                                        "weighted_backend_services": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "header_action": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "request_headers_to_add": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "request_headers_to_remove": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "response_headers_to_add": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "response_headers_to_remove": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "url_redirect": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "test": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_reservation": {
                "current": "gcp:compute/reservation:Reservation",
                "majorVersion": 6,
                "fields": {
                    "share_settings": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "project_map": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "specific_reservation": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "instance_properties": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "guest_accelerators": {
                                                "maxItemsOne": false
                                            },
                                            "local_ssds": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_resource_policy": {
                "current": "gcp:compute/resourcePolicy:ResourcePolicy",
                "majorVersion": 6,
                "fields": {
                    "disk_consistency_group_policy": {
                        "maxItemsOne": true
                    },
                    "group_placement_policy": {
                        "maxItemsOne": true
                    },
                    "instance_schedule_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "vm_start_schedule": {
                                    "maxItemsOne": true
                                },
                                "vm_stop_schedule": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "snapshot_schedule_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "retention_policy": {
                                    "maxItemsOne": true
                                },
                                "schedule": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "daily_schedule": {
                                                "maxItemsOne": true
                                            },
                                            "hourly_schedule": {
                                                "maxItemsOne": true
                                            },
                                            "weekly_schedule": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "day_of_weeks": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "snapshot_properties": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "storage_locations": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_route": {
                "current": "gcp:compute/route:Route",
                "majorVersion": 6,
                "fields": {
                    "tags": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_router": {
                "current": "gcp:compute/router:Router",
                "majorVersion": 6,
                "fields": {
                    "bgp": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "advertised_groups": {
                                    "maxItemsOne": false
                                },
                                "advertised_ip_ranges": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_router_interface": {
                "current": "gcp:compute/routerInterface:RouterInterface",
                "majorVersion": 6
            },
            "google_compute_router_nat": {
                "current": "gcp:compute/routerNat:RouterNat",
                "majorVersion": 6,
                "fields": {
                    "drain_nat_ips": {
                        "maxItemsOne": false
                    },
                    "log_config": {
                        "maxItemsOne": true
                    },
                    "nat_ips": {
                        "maxItemsOne": false
                    },
                    "rules": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "action": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "source_nat_active_ips": {
                                                "maxItemsOne": false
                                            },
                                            "source_nat_drain_ips": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "subnetwork": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "secondary_ip_range_names": {
                                    "maxItemsOne": false
                                },
                                "source_ip_ranges_to_nat": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_router_peer": {
                "current": "gcp:compute/routerPeer:RouterPeer",
                "majorVersion": 6,
                "fields": {
                    "advertised_groups": {
                        "maxItemsOne": false
                    },
                    "advertised_ip_ranges": {
                        "maxItemsOne": false
                    },
                    "bfd": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_security_policy": {
                "current": "gcp:compute/securityPolicy:SecurityPolicy",
                "majorVersion": 6,
                "fields": {
                    "adaptive_protection_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "auto_deploy_config": {
                                    "maxItemsOne": true
                                },
                                "layer_7_ddos_defense_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "advanced_options_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "json_custom_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "content_types": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "recaptcha_options_config": {
                        "maxItemsOne": true
                    },
                    "rule": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "header_action": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "request_headers_to_adds": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "match": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "src_ip_ranges": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "expr": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "preconfigured_waf_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "exclusion": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "request_cookie": {
                                                            "maxItemsOne": false
                                                        },
                                                        "request_header": {
                                                            "maxItemsOne": false
                                                        },
                                                        "request_query_param": {
                                                            "maxItemsOne": false
                                                        },
                                                        "request_uri": {
                                                            "maxItemsOne": false
                                                        },
                                                        "target_rule_ids": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "rate_limit_options": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "ban_threshold": {
                                                "maxItemsOne": true
                                            },
                                            "enforce_on_key_configs": {
                                                "maxItemsOne": false
                                            },
                                            "exceed_redirect_options": {
                                                "maxItemsOne": true
                                            },
                                            "rate_limit_threshold": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "redirect_options": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_service_attachment": {
                "current": "gcp:compute/serviceAttachment:ServiceAttachment",
                "majorVersion": 6,
                "fields": {
                    "connected_endpoints": {
                        "maxItemsOne": false
                    },
                    "consumer_accept_lists": {
                        "maxItemsOne": false
                    },
                    "consumer_reject_lists": {
                        "maxItemsOne": false
                    },
                    "domain_names": {
                        "maxItemsOne": false
                    },
                    "nat_subnets": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_shared_vpc_host_project": {
                "current": "gcp:compute/sharedVPCHostProject:SharedVPCHostProject",
                "majorVersion": 6
            },
            "google_compute_shared_vpc_service_project": {
                "current": "gcp:compute/sharedVPCServiceProject:SharedVPCServiceProject",
                "majorVersion": 6
            },
            "google_compute_snapshot": {
                "current": "gcp:compute/snapshot:Snapshot",
                "majorVersion": 6,
                "fields": {
                    "licenses": {
                        "maxItemsOne": false
                    },
                    "snapshot_encryption_key": {
                        "maxItemsOne": true
                    },
                    "source_disk_encryption_key": {
                        "maxItemsOne": true
                    },
                    "storage_locations": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_snapshot_iam_binding": {
                "current": "gcp:compute/snapshotIamBinding:SnapshotIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_snapshot_iam_member": {
                "current": "gcp:compute/snapshotIamMember:SnapshotIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_snapshot_iam_policy": {
                "current": "gcp:compute/snapshotIamPolicy:SnapshotIamPolicy",
                "majorVersion": 6
            },
            "google_compute_ssl_certificate": {
                "current": "gcp:compute/sSLCertificate:SSLCertificate",
                "majorVersion": 6
            },
            "google_compute_ssl_policy": {
                "current": "gcp:compute/sSLPolicy:SSLPolicy",
                "majorVersion": 6,
                "fields": {
                    "custom_features": {
                        "maxItemsOne": false
                    },
                    "enabled_features": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_subnetwork": {
                "current": "gcp:compute/subnetwork:Subnetwork",
                "majorVersion": 6,
                "fields": {
                    "log_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "metadata_fields": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "secondary_ip_range": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_subnetwork_iam_binding": {
                "current": "gcp:compute/subnetworkIAMBinding:SubnetworkIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_subnetwork_iam_member": {
                "current": "gcp:compute/subnetworkIAMMember:SubnetworkIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_compute_subnetwork_iam_policy": {
                "current": "gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy",
                "majorVersion": 6
            },
            "google_compute_target_grpc_proxy": {
                "current": "gcp:compute/targetGrpcProxy:TargetGrpcProxy",
                "majorVersion": 6
            },
            "google_compute_target_http_proxy": {
                "current": "gcp:compute/targetHttpProxy:TargetHttpProxy",
                "majorVersion": 6
            },
            "google_compute_target_https_proxy": {
                "current": "gcp:compute/targetHttpsProxy:TargetHttpsProxy",
                "majorVersion": 6,
                "fields": {
                    "ssl_certificates": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_target_instance": {
                "current": "gcp:compute/targetInstance:TargetInstance",
                "majorVersion": 6
            },
            "google_compute_target_pool": {
                "current": "gcp:compute/targetPool:TargetPool",
                "majorVersion": 6,
                "fields": {
                    "health_checks": {
                        "maxItemsOne": true
                    },
                    "instances": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_target_ssl_proxy": {
                "current": "gcp:compute/targetSSLProxy:TargetSSLProxy",
                "majorVersion": 6,
                "fields": {
                    "ssl_certificates": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_target_tcp_proxy": {
                "current": "gcp:compute/targetTCPProxy:TargetTCPProxy",
                "majorVersion": 6
            },
            "google_compute_url_map": {
                "current": "gcp:compute/uRLMap:URLMap",
                "majorVersion": 6,
                "fields": {
                    "default_route_action": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cors_policy": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "allow_headers": {
                                                "maxItemsOne": false
                                            },
                                            "allow_methods": {
                                                "maxItemsOne": false
                                            },
                                            "allow_origin_regexes": {
                                                "maxItemsOne": false
                                            },
                                            "allow_origins": {
                                                "maxItemsOne": false
                                            },
                                            "expose_headers": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "fault_injection_policy": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "abort": {
                                                "maxItemsOne": true
                                            },
                                            "delay": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "fixed_delay": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "request_mirror_policy": {
                                    "maxItemsOne": true
                                },
                                "retry_policy": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "per_try_timeout": {
                                                "maxItemsOne": true
                                            },
                                            "retry_conditions": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "timeout": {
                                    "maxItemsOne": true
                                },
                                "url_rewrite": {
                                    "maxItemsOne": true
                                },
                                "weighted_backend_services": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "header_action": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "request_headers_to_add": {
                                                            "maxItemsOne": false
                                                        },
                                                        "request_headers_to_remove": {
                                                            "maxItemsOne": false
                                                        },
                                                        "response_headers_to_add": {
                                                            "maxItemsOne": false
                                                        },
                                                        "response_headers_to_remove": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default_url_redirect": {
                        "maxItemsOne": true
                    },
                    "header_action": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "request_headers_to_add": {
                                    "maxItemsOne": false
                                },
                                "request_headers_to_remove": {
                                    "maxItemsOne": false
                                },
                                "response_headers_to_add": {
                                    "maxItemsOne": false
                                },
                                "response_headers_to_remove": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "host_rule": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "hosts": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "path_matcher": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "default_route_action": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "cors_policy": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allow_headers": {
                                                            "maxItemsOne": false
                                                        },
                                                        "allow_methods": {
                                                            "maxItemsOne": false
                                                        },
                                                        "allow_origin_regexes": {
                                                            "maxItemsOne": false
                                                        },
                                                        "allow_origins": {
                                                            "maxItemsOne": false
                                                        },
                                                        "expose_headers": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "fault_injection_policy": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "abort": {
                                                            "maxItemsOne": true
                                                        },
                                                        "delay": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "fixed_delay": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "request_mirror_policy": {
                                                "maxItemsOne": true
                                            },
                                            "retry_policy": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "per_try_timeout": {
                                                            "maxItemsOne": true
                                                        },
                                                        "retry_conditions": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "timeout": {
                                                "maxItemsOne": true
                                            },
                                            "url_rewrite": {
                                                "maxItemsOne": true
                                            },
                                            "weighted_backend_services": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "header_action": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "request_headers_to_add": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "request_headers_to_remove": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "response_headers_to_add": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "response_headers_to_remove": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "default_url_redirect": {
                                    "maxItemsOne": true
                                },
                                "header_action": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "request_headers_to_add": {
                                                "maxItemsOne": false
                                            },
                                            "request_headers_to_remove": {
                                                "maxItemsOne": false
                                            },
                                            "response_headers_to_add": {
                                                "maxItemsOne": false
                                            },
                                            "response_headers_to_remove": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "path_rule": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "paths": {
                                                "maxItemsOne": false
                                            },
                                            "route_action": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "cors_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "allow_headers": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allow_methods": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allow_origin_regexes": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allow_origins": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "expose_headers": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "fault_injection_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "abort": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "delay": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "fixed_delay": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "request_mirror_policy": {
                                                            "maxItemsOne": true
                                                        },
                                                        "retry_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "per_try_timeout": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "retry_conditions": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "timeout": {
                                                            "maxItemsOne": true
                                                        },
                                                        "url_rewrite": {
                                                            "maxItemsOne": true
                                                        },
                                                        "weighted_backend_services": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "header_action": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "request_headers_to_add": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "request_headers_to_remove": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "response_headers_to_add": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "response_headers_to_remove": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "url_redirect": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "route_rules": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "header_action": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "request_headers_to_add": {
                                                            "maxItemsOne": false
                                                        },
                                                        "request_headers_to_remove": {
                                                            "maxItemsOne": false
                                                        },
                                                        "response_headers_to_add": {
                                                            "maxItemsOne": false
                                                        },
                                                        "response_headers_to_remove": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "match_rules": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "header_matches": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "range_match": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "metadata_filters": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "filter_labels": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "query_parameter_matches": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "route_action": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "cors_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "allow_headers": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allow_methods": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allow_origin_regexes": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "allow_origins": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "expose_headers": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "fault_injection_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "abort": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "delay": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "fixed_delay": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "request_mirror_policy": {
                                                            "maxItemsOne": true
                                                        },
                                                        "retry_policy": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "per_try_timeout": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "retry_conditions": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "timeout": {
                                                            "maxItemsOne": true
                                                        },
                                                        "url_rewrite": {
                                                            "maxItemsOne": true
                                                        },
                                                        "weighted_backend_services": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "header_action": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "request_headers_to_add": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "request_headers_to_remove": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "response_headers_to_add": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "response_headers_to_remove": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "url_redirect": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "test": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_vpn_gateway": {
                "current": "gcp:compute/vPNGateway:VPNGateway",
                "majorVersion": 6
            },
            "google_compute_vpn_tunnel": {
                "current": "gcp:compute/vPNTunnel:VPNTunnel",
                "majorVersion": 6,
                "fields": {
                    "local_traffic_selector": {
                        "maxItemsOne": false
                    },
                    "remote_traffic_selector": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_container_analysis_note": {
                "current": "gcp:containeranalysis/note:Note",
                "majorVersion": 6,
                "fields": {
                    "attestation_authority": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "hint": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "related_note_names": {
                        "maxItemsOne": false
                    },
                    "related_url": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_container_analysis_note_iam_binding": {
                "current": "gcp:containeranalysis/noteIamBinding:NoteIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_container_analysis_note_iam_member": {
                "current": "gcp:containeranalysis/noteIamMember:NoteIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_container_analysis_note_iam_policy": {
                "current": "gcp:containeranalysis/noteIamPolicy:NoteIamPolicy",
                "majorVersion": 6
            },
            "google_container_analysis_occurrence": {
                "current": "gcp:containeranalysis/occurence:Occurence",
                "majorVersion": 6,
                "fields": {
                    "attestation": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "signatures": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_container_attached_cluster": {
                "current": "gcp:container/attachedCluster:AttachedCluster",
                "majorVersion": 6,
                "fields": {
                    "authorization": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "admin_users": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "errors": {
                        "maxItemsOne": false
                    },
                    "fleet": {
                        "maxItemsOne": true
                    },
                    "logging_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "component_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "enable_components": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "monitoring_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "managed_prometheus_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "oidc_config": {
                        "maxItemsOne": true
                    },
                    "workload_identity_config": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_container_aws_cluster": {
                "current": "gcp:container/awsCluster:AwsCluster",
                "majorVersion": 6,
                "fields": {
                    "authorization": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "admin_users": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "control_plane": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "aws_services_authentication": {
                                    "maxItemsOne": true
                                },
                                "config_encryption": {
                                    "maxItemsOne": true
                                },
                                "database_encryption": {
                                    "maxItemsOne": true
                                },
                                "instance_placement": {
                                    "maxItemsOne": true
                                },
                                "main_volume": {
                                    "maxItemsOne": true
                                },
                                "proxy_config": {
                                    "maxItemsOne": true
                                },
                                "root_volume": {
                                    "maxItemsOne": true
                                },
                                "security_group_ids": {
                                    "maxItemsOne": false
                                },
                                "ssh_config": {
                                    "maxItemsOne": true
                                },
                                "subnet_ids": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "fleet": {
                        "maxItemsOne": true
                    },
                    "logging_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "component_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "enable_components": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "networking": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "pod_address_cidr_blocks": {
                                    "maxItemsOne": false
                                },
                                "service_address_cidr_blocks": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "workload_identity_config": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_container_aws_node_pool": {
                "current": "gcp:container/awsNodePool:AwsNodePool",
                "majorVersion": 6,
                "fields": {
                    "autoscaling": {
                        "maxItemsOne": true
                    },
                    "config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "autoscaling_metrics_collection": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "metrics": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "config_encryption": {
                                    "maxItemsOne": true
                                },
                                "instance_placement": {
                                    "maxItemsOne": true
                                },
                                "proxy_config": {
                                    "maxItemsOne": true
                                },
                                "root_volume": {
                                    "maxItemsOne": true
                                },
                                "security_group_ids": {
                                    "maxItemsOne": false
                                },
                                "spot_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "instance_types": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "ssh_config": {
                                    "maxItemsOne": true
                                },
                                "taints": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "max_pods_constraint": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_container_azure_client": {
                "current": "gcp:container/azureClient:AzureClient",
                "majorVersion": 6
            },
            "google_container_azure_cluster": {
                "current": "gcp:container/azureCluster:AzureCluster",
                "majorVersion": 6,
                "fields": {
                    "authorization": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "admin_users": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "azure_services_authentication": {
                        "maxItemsOne": true
                    },
                    "control_plane": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "database_encryption": {
                                    "maxItemsOne": true
                                },
                                "main_volume": {
                                    "maxItemsOne": true
                                },
                                "proxy_config": {
                                    "maxItemsOne": true
                                },
                                "replica_placements": {
                                    "maxItemsOne": false
                                },
                                "root_volume": {
                                    "maxItemsOne": true
                                },
                                "ssh_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "fleet": {
                        "maxItemsOne": true
                    },
                    "logging_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "component_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "enable_components": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "networking": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "pod_address_cidr_blocks": {
                                    "maxItemsOne": false
                                },
                                "service_address_cidr_blocks": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "workload_identity_config": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_container_azure_node_pool": {
                "current": "gcp:container/azureNodePool:AzureNodePool",
                "majorVersion": 6,
                "fields": {
                    "autoscaling": {
                        "maxItemsOne": true
                    },
                    "config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "proxy_config": {
                                    "maxItemsOne": true
                                },
                                "root_volume": {
                                    "maxItemsOne": true
                                },
                                "ssh_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "max_pods_constraint": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_container_cluster": {
                "current": "gcp:container/cluster:Cluster",
                "majorVersion": 6,
                "fields": {
                    "addons_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cloudrun_config": {
                                    "maxItemsOne": true
                                },
                                "config_connector_config": {
                                    "maxItemsOne": true
                                },
                                "dns_cache_config": {
                                    "maxItemsOne": true
                                },
                                "gce_persistent_disk_csi_driver_config": {
                                    "maxItemsOne": true
                                },
                                "gcp_filestore_csi_driver_config": {
                                    "maxItemsOne": true
                                },
                                "gcs_fuse_csi_driver_config": {
                                    "maxItemsOne": true
                                },
                                "gke_backup_agent_config": {
                                    "maxItemsOne": true
                                },
                                "horizontal_pod_autoscaling": {
                                    "maxItemsOne": true
                                },
                                "http_load_balancing": {
                                    "maxItemsOne": true
                                },
                                "istio_config": {
                                    "maxItemsOne": true
                                },
                                "kalm_config": {
                                    "maxItemsOne": true
                                },
                                "network_policy_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "authenticator_groups_config": {
                        "maxItemsOne": true
                    },
                    "binary_authorization": {
                        "maxItemsOne": true
                    },
                    "cluster_autoscaling": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "auto_provisioning_defaults": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "management": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "upgrade_options": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "oauth_scopes": {
                                                "maxItemsOne": false
                                            },
                                            "shielded_instance_config": {
                                                "maxItemsOne": true
                                            },
                                            "upgrade_settings": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "blue_green_settings": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "standard_rollout_policy": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "resource_limits": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "cluster_telemetry": {
                        "maxItemsOne": true
                    },
                    "confidential_nodes": {
                        "maxItemsOne": true
                    },
                    "cost_management_config": {
                        "maxItemsOne": true
                    },
                    "database_encryption": {
                        "maxItemsOne": true
                    },
                    "default_snat_status": {
                        "maxItemsOne": true
                    },
                    "dns_config": {
                        "maxItemsOne": true
                    },
                    "gateway_api_config": {
                        "maxItemsOne": true
                    },
                    "identity_service_config": {
                        "maxItemsOne": true
                    },
                    "ip_allocation_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "pod_cidr_overprovision_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "logging_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "enable_components": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "maintenance_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "daily_maintenance_window": {
                                    "maxItemsOne": true
                                },
                                "maintenance_exclusion": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "exclusion_options": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "recurring_window": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "master_auth": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "client_certificate_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "master_authorized_networks_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cidr_blocks": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "mesh_certificates": {
                        "maxItemsOne": true
                    },
                    "monitoring_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "enable_components": {
                                    "maxItemsOne": false
                                },
                                "managed_prometheus": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "network_policy": {
                        "maxItemsOne": true
                    },
                    "node_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "advanced_machine_features": {
                                    "maxItemsOne": true
                                },
                                "ephemeral_storage_config": {
                                    "maxItemsOne": true
                                },
                                "ephemeral_storage_local_ssd_config": {
                                    "maxItemsOne": true
                                },
                                "gcfs_config": {
                                    "maxItemsOne": true
                                },
                                "guest_accelerator": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "gpu_driver_installation_config": {
                                                "maxItemsOne": true
                                            },
                                            "gpu_sharing_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "gvnic": {
                                    "maxItemsOne": true
                                },
                                "kubelet_config": {
                                    "maxItemsOne": true
                                },
                                "linux_node_config": {
                                    "maxItemsOne": true
                                },
                                "local_nvme_ssd_block_config": {
                                    "maxItemsOne": true
                                },
                                "oauth_scopes": {
                                    "maxItemsOne": false
                                },
                                "reservation_affinity": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "sandbox_config": {
                                    "maxItemsOne": true
                                },
                                "shielded_instance_config": {
                                    "maxItemsOne": true
                                },
                                "sole_tenant_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "node_affinity": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "values": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "tags": {
                                    "maxItemsOne": false
                                },
                                "taint": {
                                    "maxItemsOne": false
                                },
                                "workload_metadata_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "node_locations": {
                        "maxItemsOne": false
                    },
                    "node_pool": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "autoscaling": {
                                    "maxItemsOne": true
                                },
                                "instance_group_urls": {
                                    "maxItemsOne": false
                                },
                                "managed_instance_group_urls": {
                                    "maxItemsOne": false
                                },
                                "management": {
                                    "maxItemsOne": true
                                },
                                "network_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "additional_node_network_configs": {
                                                "maxItemsOne": false
                                            },
                                            "additional_pod_network_configs": {
                                                "maxItemsOne": false
                                            },
                                            "pod_cidr_overprovision_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "node_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "advanced_machine_features": {
                                                "maxItemsOne": true
                                            },
                                            "ephemeral_storage_config": {
                                                "maxItemsOne": true
                                            },
                                            "ephemeral_storage_local_ssd_config": {
                                                "maxItemsOne": true
                                            },
                                            "gcfs_config": {
                                                "maxItemsOne": true
                                            },
                                            "guest_accelerator": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "gpu_driver_installation_config": {
                                                            "maxItemsOne": true
                                                        },
                                                        "gpu_sharing_config": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "gvnic": {
                                                "maxItemsOne": true
                                            },
                                            "kubelet_config": {
                                                "maxItemsOne": true
                                            },
                                            "linux_node_config": {
                                                "maxItemsOne": true
                                            },
                                            "local_nvme_ssd_block_config": {
                                                "maxItemsOne": true
                                            },
                                            "oauth_scopes": {
                                                "maxItemsOne": false
                                            },
                                            "reservation_affinity": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "values": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "sandbox_config": {
                                                "maxItemsOne": true
                                            },
                                            "shielded_instance_config": {
                                                "maxItemsOne": true
                                            },
                                            "sole_tenant_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "node_affinity": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "values": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "tags": {
                                                "maxItemsOne": false
                                            },
                                            "taint": {
                                                "maxItemsOne": false
                                            },
                                            "workload_metadata_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "node_locations": {
                                    "maxItemsOne": false
                                },
                                "placement_policy": {
                                    "maxItemsOne": true
                                },
                                "upgrade_settings": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "blue_green_settings": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "standard_rollout_policy": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "node_pool_auto_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "network_tags": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "tags": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "node_pool_defaults": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "node_config_defaults": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "gcfs_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "notification_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "pubsub": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "filter": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "event_type": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "pod_security_policy_config": {
                        "maxItemsOne": true
                    },
                    "private_cluster_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "master_global_access_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "protect_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "workload_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "release_channel": {
                        "maxItemsOne": true
                    },
                    "resource_usage_export_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "bigquery_destination": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "security_posture_config": {
                        "maxItemsOne": true
                    },
                    "service_external_ips_config": {
                        "maxItemsOne": true
                    },
                    "tpu_config": {
                        "maxItemsOne": true
                    },
                    "vertical_pod_autoscaling": {
                        "maxItemsOne": true
                    },
                    "workload_identity_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_container_node_pool": {
                "current": "gcp:container/nodePool:NodePool",
                "majorVersion": 6,
                "fields": {
                    "autoscaling": {
                        "maxItemsOne": true
                    },
                    "instance_group_urls": {
                        "maxItemsOne": false
                    },
                    "managed_instance_group_urls": {
                        "maxItemsOne": false
                    },
                    "management": {
                        "maxItemsOne": true
                    },
                    "network_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "additional_node_network_configs": {
                                    "maxItemsOne": false
                                },
                                "additional_pod_network_configs": {
                                    "maxItemsOne": false
                                },
                                "pod_cidr_overprovision_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "node_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "advanced_machine_features": {
                                    "maxItemsOne": true
                                },
                                "ephemeral_storage_config": {
                                    "maxItemsOne": true
                                },
                                "ephemeral_storage_local_ssd_config": {
                                    "maxItemsOne": true
                                },
                                "gcfs_config": {
                                    "maxItemsOne": true
                                },
                                "guest_accelerator": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "gpu_driver_installation_config": {
                                                "maxItemsOne": true
                                            },
                                            "gpu_sharing_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "gvnic": {
                                    "maxItemsOne": true
                                },
                                "kubelet_config": {
                                    "maxItemsOne": true
                                },
                                "linux_node_config": {
                                    "maxItemsOne": true
                                },
                                "local_nvme_ssd_block_config": {
                                    "maxItemsOne": true
                                },
                                "oauth_scopes": {
                                    "maxItemsOne": false
                                },
                                "reservation_affinity": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "sandbox_config": {
                                    "maxItemsOne": true
                                },
                                "shielded_instance_config": {
                                    "maxItemsOne": true
                                },
                                "sole_tenant_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "node_affinity": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "values": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "tags": {
                                    "maxItemsOne": false
                                },
                                "taint": {
                                    "maxItemsOne": false
                                },
                                "workload_metadata_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "node_locations": {
                        "maxItemsOne": false
                    },
                    "placement_policy": {
                        "maxItemsOne": true
                    },
                    "upgrade_settings": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "blue_green_settings": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "standard_rollout_policy": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_container_registry": {
                "current": "gcp:container/registry:Registry",
                "majorVersion": 6
            },
            "google_data_catalog_entry": {
                "current": "gcp:datacatalog/entry:Entry",
                "majorVersion": 6,
                "fields": {
                    "bigquery_date_sharded_spec": {
                        "maxItemsOne": false
                    },
                    "bigquery_table_spec": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "table_spec": {
                                    "maxItemsOne": false
                                },
                                "view_spec": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "gcs_fileset_spec": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "file_patterns": {
                                    "maxItemsOne": false
                                },
                                "sample_gcs_file_specs": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_data_catalog_entry_group": {
                "current": "gcp:datacatalog/entryGroup:EntryGroup",
                "majorVersion": 6
            },
            "google_data_catalog_entry_group_iam_binding": {
                "current": "gcp:datacatalog/entryGroupIamBinding:EntryGroupIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_data_catalog_entry_group_iam_member": {
                "current": "gcp:datacatalog/entryGroupIamMember:EntryGroupIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_data_catalog_entry_group_iam_policy": {
                "current": "gcp:datacatalog/entryGroupIamPolicy:EntryGroupIamPolicy",
                "majorVersion": 6
            },
            "google_data_catalog_policy_tag": {
                "current": "gcp:datacatalog/policyTag:PolicyTag",
                "majorVersion": 6,
                "fields": {
                    "child_policy_tags": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_data_catalog_policy_tag_iam_binding": {
                "current": "gcp:datacatalog/policyTagIamBinding:PolicyTagIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_data_catalog_policy_tag_iam_member": {
                "current": "gcp:datacatalog/policyTagIamMember:PolicyTagIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_data_catalog_policy_tag_iam_policy": {
                "current": "gcp:datacatalog/policyTagIamPolicy:PolicyTagIamPolicy",
                "majorVersion": 6
            },
            "google_data_catalog_tag": {
                "current": "gcp:datacatalog/tag:Tag",
                "majorVersion": 6,
                "fields": {
                    "fields": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_data_catalog_tag_template": {
                "current": "gcp:datacatalog/tagTemplate:TagTemplate",
                "majorVersion": 6,
                "fields": {
                    "fields": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "type": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "enum_type": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_values": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_data_catalog_tag_template_iam_binding": {
                "current": "gcp:datacatalog/tagTemplateIamBinding:TagTemplateIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_data_catalog_tag_template_iam_member": {
                "current": "gcp:datacatalog/tagTemplateIamMember:TagTemplateIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_data_catalog_tag_template_iam_policy": {
                "current": "gcp:datacatalog/tagTemplateIamPolicy:TagTemplateIamPolicy",
                "majorVersion": 6
            },
            "google_data_catalog_taxonomy": {
                "current": "gcp:datacatalog/taxonomy:Taxonomy",
                "majorVersion": 6,
                "fields": {
                    "activated_policy_types": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_data_catalog_taxonomy_iam_binding": {
                "current": "gcp:datacatalog/taxonomyIamBinding:TaxonomyIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_data_catalog_taxonomy_iam_member": {
                "current": "gcp:datacatalog/taxonomyIamMember:TaxonomyIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_data_catalog_taxonomy_iam_policy": {
                "current": "gcp:datacatalog/taxonomyIamPolicy:TaxonomyIamPolicy",
                "majorVersion": 6
            },
            "google_data_fusion_instance": {
                "current": "gcp:datafusion/instance:Instance",
                "majorVersion": 6,
                "fields": {
                    "accelerators": {
                        "maxItemsOne": false
                    },
                    "crypto_key_config": {
                        "maxItemsOne": true
                    },
                    "event_publish_config": {
                        "maxItemsOne": true
                    },
                    "network_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_data_fusion_instance_iam_binding": {
                "current": "gcp:securitycenter/instanceIamBinding:InstanceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_data_fusion_instance_iam_member": {
                "current": "gcp:securitycenter/instanceIamMember:InstanceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_data_fusion_instance_iam_policy": {
                "current": "gcp:securitycenter/instanceIamPolicy:InstanceIamPolicy",
                "majorVersion": 6
            },
            "google_data_loss_prevention_deidentify_template": {
                "current": "gcp:dataloss/preventionDeidentifyTemplate:PreventionDeidentifyTemplate",
                "majorVersion": 6,
                "fields": {
                    "deidentify_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "image_transformations": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "transforms": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "all_info_types": {
                                                            "maxItemsOne": true
                                                        },
                                                        "all_text": {
                                                            "maxItemsOne": true
                                                        },
                                                        "redaction_color": {
                                                            "maxItemsOne": true
                                                        },
                                                        "selected_info_types": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "info_types": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "sensitivity_score": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "info_type_transformations": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "transformations": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "info_types": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "sensitivity_score": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "primitive_transformation": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "bucketing_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "buckets": {
                                                                                    "maxItemsOne": false,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "max": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "date_value": {
                                                                                                            "maxItemsOne": true
                                                                                                        },
                                                                                                        "time_value": {
                                                                                                            "maxItemsOne": true
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "min": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "date_value": {
                                                                                                            "maxItemsOne": true
                                                                                                        },
                                                                                                        "time_value": {
                                                                                                            "maxItemsOne": true
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "replacement_value": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "date_value": {
                                                                                                            "maxItemsOne": true
                                                                                                        },
                                                                                                        "time_value": {
                                                                                                            "maxItemsOne": true
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "character_mask_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "characters_to_ignore": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "crypto_deterministic_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "context": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "crypto_key": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "kms_wrapped": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "transient": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "unwrapped": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "surrogate_info_type": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "sensitivity_score": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "crypto_hash_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "crypto_key": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "kms_wrapped": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "transient": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "unwrapped": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "crypto_replace_ffx_fpe_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "context": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "crypto_key": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "kms_wrapped": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "transient": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "unwrapped": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "surrogate_info_type": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "sensitivity_score": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "date_shift_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "context": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "crypto_key": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "kms_wrapped": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "transient": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "unwrapped": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "fixed_size_bucketing_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "lower_bound": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "upper_bound": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "redact_config": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "replace_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "new_value": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "date_value": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "time_value": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "replace_dictionary_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "word_list": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "words": {
                                                                                                "maxItemsOne": false
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "time_part_config": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "record_transformations": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "field_transformations": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "condition": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "expressions": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "conditions": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "conditions": {
                                                                                                "maxItemsOne": false,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "field": {
                                                                                                            "maxItemsOne": true
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "maxItemsOne": true,
                                                                                                            "elem": {
                                                                                                                "fields": {
                                                                                                                    "date_value": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    },
                                                                                                                    "time_value": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "fields": {
                                                            "maxItemsOne": false
                                                        },
                                                        "info_type_transformations": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "transformations": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "info_types": {
                                                                                    "maxItemsOne": false,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "sensitivity_score": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "primitive_transformation": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "bucketing_config": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "buckets": {
                                                                                                            "maxItemsOne": false,
                                                                                                            "elem": {
                                                                                                                "fields": {
                                                                                                                    "max": {
                                                                                                                        "maxItemsOne": true,
                                                                                                                        "elem": {
                                                                                                                            "fields": {
                                                                                                                                "date_value": {
                                                                                                                                    "maxItemsOne": true
                                                                                                                                },
                                                                                                                                "time_value": {
                                                                                                                                    "maxItemsOne": true
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "min": {
                                                                                                                        "maxItemsOne": true,
                                                                                                                        "elem": {
                                                                                                                            "fields": {
                                                                                                                                "date_value": {
                                                                                                                                    "maxItemsOne": true
                                                                                                                                },
                                                                                                                                "time_value": {
                                                                                                                                    "maxItemsOne": true
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "replacement_value": {
                                                                                                                        "maxItemsOne": true,
                                                                                                                        "elem": {
                                                                                                                            "fields": {
                                                                                                                                "date_value": {
                                                                                                                                    "maxItemsOne": true
                                                                                                                                },
                                                                                                                                "time_value": {
                                                                                                                                    "maxItemsOne": true
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "character_mask_config": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "characters_to_ignore": {
                                                                                                            "maxItemsOne": false
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "crypto_deterministic_config": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "context": {
                                                                                                            "maxItemsOne": true
                                                                                                        },
                                                                                                        "crypto_key": {
                                                                                                            "maxItemsOne": true,
                                                                                                            "elem": {
                                                                                                                "fields": {
                                                                                                                    "kms_wrapped": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    },
                                                                                                                    "transient": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    },
                                                                                                                    "unwrapped": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        },
                                                                                                        "surrogate_info_type": {
                                                                                                            "maxItemsOne": true,
                                                                                                            "elem": {
                                                                                                                "fields": {
                                                                                                                    "sensitivity_score": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "crypto_hash_config": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "crypto_key": {
                                                                                                            "maxItemsOne": true,
                                                                                                            "elem": {
                                                                                                                "fields": {
                                                                                                                    "kms_wrapped": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    },
                                                                                                                    "transient": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    },
                                                                                                                    "unwrapped": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "crypto_replace_ffx_fpe_config": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "context": {
                                                                                                            "maxItemsOne": true
                                                                                                        },
                                                                                                        "crypto_key": {
                                                                                                            "maxItemsOne": true,
                                                                                                            "elem": {
                                                                                                                "fields": {
                                                                                                                    "kms_wrapped": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    },
                                                                                                                    "transient": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    },
                                                                                                                    "unwrapped": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        },
                                                                                                        "surrogate_info_type": {
                                                                                                            "maxItemsOne": true,
                                                                                                            "elem": {
                                                                                                                "fields": {
                                                                                                                    "sensitivity_score": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "date_shift_config": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "context": {
                                                                                                            "maxItemsOne": true
                                                                                                        },
                                                                                                        "crypto_key": {
                                                                                                            "maxItemsOne": true,
                                                                                                            "elem": {
                                                                                                                "fields": {
                                                                                                                    "kms_wrapped": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    },
                                                                                                                    "transient": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    },
                                                                                                                    "unwrapped": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "fixed_size_bucketing_config": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "lower_bound": {
                                                                                                            "maxItemsOne": true
                                                                                                        },
                                                                                                        "upper_bound": {
                                                                                                            "maxItemsOne": true
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "redact_config": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "replace_config": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "new_value": {
                                                                                                            "maxItemsOne": true,
                                                                                                            "elem": {
                                                                                                                "fields": {
                                                                                                                    "date_value": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    },
                                                                                                                    "time_value": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "replace_dictionary_config": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "word_list": {
                                                                                                            "maxItemsOne": true,
                                                                                                            "elem": {
                                                                                                                "fields": {
                                                                                                                    "words": {
                                                                                                                        "maxItemsOne": false
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "replace_with_info_type_config": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "time_part_config": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "primitive_transformation": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "bucketing_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "buckets": {
                                                                                    "maxItemsOne": false,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "max": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "date_value": {
                                                                                                            "maxItemsOne": true
                                                                                                        },
                                                                                                        "time_value": {
                                                                                                            "maxItemsOne": true
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "min": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "date_value": {
                                                                                                            "maxItemsOne": true
                                                                                                        },
                                                                                                        "time_value": {
                                                                                                            "maxItemsOne": true
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "replacement_value": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "date_value": {
                                                                                                            "maxItemsOne": true
                                                                                                        },
                                                                                                        "time_value": {
                                                                                                            "maxItemsOne": true
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "character_mask_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "characters_to_ignore": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "crypto_deterministic_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "context": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "crypto_key": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "kms_wrapped": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "transient": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "unwrapped": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "surrogate_info_type": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "sensitivity_score": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "crypto_hash_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "crypto_key": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "kms_wrapped": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "transient": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "unwrapped": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "crypto_replace_ffx_fpe_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "context": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "crypto_key": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "kms_wrapped": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "transient": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "unwrapped": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "surrogate_info_type": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "sensitivity_score": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "date_shift_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "context": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "crypto_key": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "kms_wrapped": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "transient": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "unwrapped": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "fixed_size_bucketing_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "lower_bound": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "date_value": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "time_value": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "upper_bound": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "date_value": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "time_value": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "redact_config": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "replace_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "new_value": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "date_value": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "time_value": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "replace_dictionary_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "word_list": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "words": {
                                                                                                "maxItemsOne": false
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "time_part_config": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "record_suppressions": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "condition": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "expressions": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "conditions": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "conditions": {
                                                                                                "maxItemsOne": false,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "field": {
                                                                                                            "maxItemsOne": true
                                                                                                        },
                                                                                                        "value": {
                                                                                                            "maxItemsOne": true,
                                                                                                            "elem": {
                                                                                                                "fields": {
                                                                                                                    "date_value": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    },
                                                                                                                    "time_value": {
                                                                                                                        "maxItemsOne": true
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_data_loss_prevention_inspect_template": {
                "current": "gcp:dataloss/preventionInspectTemplate:PreventionInspectTemplate",
                "majorVersion": 6,
                "fields": {
                    "inspect_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "content_options": {
                                    "maxItemsOne": false
                                },
                                "custom_info_types": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "dictionary": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "cloud_storage_path": {
                                                            "maxItemsOne": true
                                                        },
                                                        "word_list": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "words": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "info_type": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "sensitivity_score": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "regex": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "group_indexes": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "sensitivity_score": {
                                                "maxItemsOne": true
                                            },
                                            "stored_type": {
                                                "maxItemsOne": true
                                            },
                                            "surrogate_type": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "info_types": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "sensitivity_score": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "limits": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "max_findings_per_info_type": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "info_type": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "sensitivity_score": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "rule_set": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "info_types": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "sensitivity_score": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "rules": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "exclusion_rule": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "dictionary": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "cloud_storage_path": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "word_list": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "words": {
                                                                                                "maxItemsOne": false
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "exclude_by_hotword": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "hotword_regex": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "group_indexes": {
                                                                                                "maxItemsOne": false
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "proximity": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "exclude_info_types": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "info_types": {
                                                                                    "maxItemsOne": false,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "sensitivity_score": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "regex": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "group_indexes": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "hotword_rule": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "hotword_regex": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "group_indexes": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "likelihood_adjustment": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "proximity": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_data_loss_prevention_job_trigger": {
                "current": "gcp:dataloss/preventionJobTrigger:PreventionJobTrigger",
                "majorVersion": 6,
                "fields": {
                    "inspect_job": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "actions": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "deidentify": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "file_types_to_transform": {
                                                            "maxItemsOne": false
                                                        },
                                                        "transformation_config": {
                                                            "maxItemsOne": true
                                                        },
                                                        "transformation_details_storage_config": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "table": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "job_notification_emails": {
                                                "maxItemsOne": true
                                            },
                                            "pub_sub": {
                                                "maxItemsOne": true
                                            },
                                            "publish_findings_to_cloud_data_catalog": {
                                                "maxItemsOne": true
                                            },
                                            "publish_summary_to_cscc": {
                                                "maxItemsOne": true
                                            },
                                            "publish_to_stackdriver": {
                                                "maxItemsOne": true
                                            },
                                            "save_findings": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "output_config": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "table": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "inspect_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "custom_info_types": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "dictionary": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "cloud_storage_path": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "word_list": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "words": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "info_type": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "sensitivity_score": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "regex": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "group_indexes": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "sensitivity_score": {
                                                            "maxItemsOne": true
                                                        },
                                                        "stored_type": {
                                                            "maxItemsOne": true
                                                        },
                                                        "surrogate_type": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "info_types": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "sensitivity_score": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "limits": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "max_findings_per_info_type": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "info_type": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "sensitivity_score": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "rule_set": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "info_types": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "sensitivity_score": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "rules": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "exclusion_rule": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "dictionary": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "cloud_storage_path": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "word_list": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "words": {
                                                                                                            "maxItemsOne": false
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "exclude_by_hotword": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "hotword_regex": {
                                                                                                "maxItemsOne": true,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "group_indexes": {
                                                                                                            "maxItemsOne": false
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "proximity": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "exclude_info_types": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "info_types": {
                                                                                                "maxItemsOne": false,
                                                                                                "elem": {
                                                                                                    "fields": {
                                                                                                        "sensitivity_score": {
                                                                                                            "maxItemsOne": true
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "regex": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "group_indexes": {
                                                                                                "maxItemsOne": false
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "hotword_rule": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "hotword_regex": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "group_indexes": {
                                                                                                "maxItemsOne": false
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "likelihood_adjustment": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "proximity": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "storage_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "big_query_options": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "excluded_fields": {
                                                            "maxItemsOne": false
                                                        },
                                                        "identifying_fields": {
                                                            "maxItemsOne": false
                                                        },
                                                        "included_fields": {
                                                            "maxItemsOne": false
                                                        },
                                                        "table_reference": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "cloud_storage_options": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "file_set": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "regex_file_set": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "exclude_regex": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "include_regex": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "file_types": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "datastore_options": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "kind": {
                                                            "maxItemsOne": true
                                                        },
                                                        "partition_id": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "hybrid_options": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "required_finding_label_keys": {
                                                            "maxItemsOne": false
                                                        },
                                                        "table_options": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "identifying_fields": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "timespan_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "timestamp_field": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "triggers": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "manual": {
                                    "maxItemsOne": true
                                },
                                "schedule": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_data_loss_prevention_stored_info_type": {
                "current": "gcp:dataloss/preventionStoredInfoType:PreventionStoredInfoType",
                "majorVersion": 6,
                "fields": {
                    "dictionary": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cloud_storage_path": {
                                    "maxItemsOne": true
                                },
                                "word_list": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "words": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "large_custom_dictionary": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "big_query_field": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "field": {
                                                "maxItemsOne": true
                                            },
                                            "table": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "cloud_storage_file_set": {
                                    "maxItemsOne": true
                                },
                                "output_path": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "regex": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "group_indexes": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_database_migration_service_connection_profile": {
                "current": "gcp:databasemigrationservice/connectionProfile:ConnectionProfile",
                "majorVersion": 6,
                "fields": {
                    "alloydb": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "settings": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "initial_user": {
                                                "maxItemsOne": true
                                            },
                                            "primary_instance_settings": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "machine_config": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "cloudsql": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "settings": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "ip_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "authorized_networks": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "error": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "details": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "mysql": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "ssl": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "postgresql": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "ssl": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_dataflow_flex_template_job": {
                "current": "gcp:dataflow/flexTemplateJob:FlexTemplateJob",
                "majorVersion": 6,
                "fields": {
                    "additional_experiments": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataflow_job": {
                "current": "gcp:dataflow/job:Job",
                "majorVersion": 6,
                "fields": {
                    "additional_experiments": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataform_repository": {
                "current": "gcp:dataform/repository:Repository",
                "majorVersion": 6,
                "fields": {
                    "git_remote_settings": {
                        "maxItemsOne": true
                    },
                    "workspace_compilation_overrides": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataplex_asset": {
                "current": "gcp:dataplex/asset:Asset",
                "majorVersion": 6,
                "fields": {
                    "discovery_spec": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "csv_options": {
                                    "maxItemsOne": true
                                },
                                "exclude_patterns": {
                                    "maxItemsOne": false
                                },
                                "include_patterns": {
                                    "maxItemsOne": false
                                },
                                "json_options": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "discovery_status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "stats": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "resource_spec": {
                        "maxItemsOne": true
                    },
                    "resource_status": {
                        "maxItemsOne": false
                    },
                    "security_status": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataplex_asset_iam_binding": {
                "current": "gcp:dataplex/assetIamBinding:AssetIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataplex_asset_iam_member": {
                "current": "gcp:dataplex/assetIamMember:AssetIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataplex_asset_iam_policy": {
                "current": "gcp:dataplex/assetIamPolicy:AssetIamPolicy",
                "majorVersion": 6
            },
            "google_dataplex_datascan": {
                "current": "gcp:dataplex/datascan:Datascan",
                "majorVersion": 6,
                "fields": {
                    "data": {
                        "maxItemsOne": true
                    },
                    "data_profile_result": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "profile": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "fields": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "profile": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "double_profile": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "integer_profile": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "string_profile": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "top_n_values": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "scanned_data": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "incremental_field": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "data_profile_spec": {
                        "maxItemsOne": true
                    },
                    "data_quality_result": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "dimensions": {
                                    "maxItemsOne": false
                                },
                                "rules": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "rule": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "non_null_expectation": {
                                                            "maxItemsOne": false
                                                        },
                                                        "range_expectation": {
                                                            "maxItemsOne": false
                                                        },
                                                        "regex_expectation": {
                                                            "maxItemsOne": false
                                                        },
                                                        "row_condition_expectation": {
                                                            "maxItemsOne": false
                                                        },
                                                        "set_expectation": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "values": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "statistic_range_expectation": {
                                                            "maxItemsOne": false
                                                        },
                                                        "table_condition_expectation": {
                                                            "maxItemsOne": false
                                                        },
                                                        "uniqueness_expectation": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "scanned_data": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "incremental_field": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "data_quality_spec": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "rules": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "non_null_expectation": {
                                                "maxItemsOne": true
                                            },
                                            "range_expectation": {
                                                "maxItemsOne": true
                                            },
                                            "regex_expectation": {
                                                "maxItemsOne": true
                                            },
                                            "row_condition_expectation": {
                                                "maxItemsOne": true
                                            },
                                            "set_expectation": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "values": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "statistic_range_expectation": {
                                                "maxItemsOne": true
                                            },
                                            "table_condition_expectation": {
                                                "maxItemsOne": true
                                            },
                                            "uniqueness_expectation": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "execution_spec": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "trigger": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "on_demand": {
                                                "maxItemsOne": true
                                            },
                                            "schedule": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "execution_status": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataplex_datascan_iam_binding": {
                "current": "gcp:dataplex/datascanIamBinding:DatascanIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataplex_datascan_iam_member": {
                "current": "gcp:dataplex/datascanIamMember:DatascanIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataplex_datascan_iam_policy": {
                "current": "gcp:dataplex/datascanIamPolicy:DatascanIamPolicy",
                "majorVersion": 6
            },
            "google_dataplex_lake": {
                "current": "gcp:dataplex/lake:Lake",
                "majorVersion": 6,
                "fields": {
                    "asset_status": {
                        "maxItemsOne": false
                    },
                    "metastore": {
                        "maxItemsOne": true
                    },
                    "metastore_status": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataplex_lake_iam_binding": {
                "current": "gcp:dataplex/lakeIamBinding:LakeIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataplex_lake_iam_member": {
                "current": "gcp:dataplex/lakeIamMember:LakeIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataplex_lake_iam_policy": {
                "current": "gcp:dataplex/lakeIamPolicy:LakeIamPolicy",
                "majorVersion": 6
            },
            "google_dataplex_task": {
                "current": "gcp:dataplex/task:Task",
                "majorVersion": 6,
                "fields": {
                    "execution_spec": {
                        "maxItemsOne": true
                    },
                    "execution_status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "latest_job": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "notebook": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "archive_uris": {
                                    "maxItemsOne": false
                                },
                                "file_uris": {
                                    "maxItemsOne": false
                                },
                                "infrastructure_spec": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "batch": {
                                                "maxItemsOne": true
                                            },
                                            "container_image": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "java_jars": {
                                                            "maxItemsOne": false
                                                        },
                                                        "python_packages": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "vpc_network": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "network_tags": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "spark": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "archive_uris": {
                                    "maxItemsOne": false
                                },
                                "file_uris": {
                                    "maxItemsOne": false
                                },
                                "infrastructure_spec": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "batch": {
                                                "maxItemsOne": true
                                            },
                                            "container_image": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "java_jars": {
                                                            "maxItemsOne": false
                                                        },
                                                        "python_packages": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "vpc_network": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "network_tags": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "trigger_spec": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataplex_task_iam_binding": {
                "current": "gcp:dataplex/taskIamBinding:TaskIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataplex_task_iam_member": {
                "current": "gcp:dataplex/taskIamMember:TaskIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataplex_task_iam_policy": {
                "current": "gcp:dataplex/taskIamPolicy:TaskIamPolicy",
                "majorVersion": 6
            },
            "google_dataplex_zone": {
                "current": "gcp:dataplex/zone:Zone",
                "majorVersion": 6,
                "fields": {
                    "asset_status": {
                        "maxItemsOne": false
                    },
                    "discovery_spec": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "csv_options": {
                                    "maxItemsOne": true
                                },
                                "exclude_patterns": {
                                    "maxItemsOne": false
                                },
                                "include_patterns": {
                                    "maxItemsOne": false
                                },
                                "json_options": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "resource_spec": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataplex_zone_iam_binding": {
                "current": "gcp:dataplex/zoneIamBinding:ZoneIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataplex_zone_iam_member": {
                "current": "gcp:dataplex/zoneIamMember:ZoneIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataplex_zone_iam_policy": {
                "current": "gcp:dataplex/zoneIamPolicy:ZoneIamPolicy",
                "majorVersion": 6
            },
            "google_dataproc_autoscaling_policy": {
                "current": "gcp:dataproc/autoscalingPolicy:AutoscalingPolicy",
                "majorVersion": 6,
                "fields": {
                    "basic_algorithm": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "yarn_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "secondary_worker_config": {
                        "maxItemsOne": true
                    },
                    "worker_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataproc_autoscaling_policy_iam_binding": {
                "current": "gcp:dataproc/autoscalingPolicyIamBinding:AutoscalingPolicyIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataproc_autoscaling_policy_iam_member": {
                "current": "gcp:dataproc/autoscalingPolicyIamMember:AutoscalingPolicyIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataproc_autoscaling_policy_iam_policy": {
                "current": "gcp:dataproc/autoscalingPolicyIamPolicy:AutoscalingPolicyIamPolicy",
                "majorVersion": 6
            },
            "google_dataproc_cluster": {
                "current": "gcp:dataproc/cluster:Cluster",
                "majorVersion": 6,
                "fields": {
                    "cluster_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "autoscaling_config": {
                                    "maxItemsOne": true
                                },
                                "dataproc_metric_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "metrics": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "metric_overrides": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "encryption_config": {
                                    "maxItemsOne": true
                                },
                                "endpoint_config": {
                                    "maxItemsOne": true
                                },
                                "gce_cluster_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "node_group_affinity": {
                                                "maxItemsOne": true
                                            },
                                            "reservation_affinity": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "values": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "service_account_scopes": {
                                                "maxItemsOne": false
                                            },
                                            "shielded_instance_config": {
                                                "maxItemsOne": true
                                            },
                                            "tags": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "initialization_action": {
                                    "maxItemsOne": false
                                },
                                "lifecycle_config": {
                                    "maxItemsOne": true
                                },
                                "master_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "accelerators": {
                                                "maxItemsOne": false
                                            },
                                            "disk_config": {
                                                "maxItemsOne": true
                                            },
                                            "instance_names": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "metastore_config": {
                                    "maxItemsOne": true
                                },
                                "preemptible_worker_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "disk_config": {
                                                "maxItemsOne": true
                                            },
                                            "instance_names": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "security_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "kerberos_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "software_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "optional_components": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "worker_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "accelerators": {
                                                "maxItemsOne": false
                                            },
                                            "disk_config": {
                                                "maxItemsOne": true
                                            },
                                            "instance_names": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "virtual_cluster_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "auxiliary_services_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "metastore_config": {
                                                "maxItemsOne": true
                                            },
                                            "spark_history_server_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "kubernetes_cluster_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "gke_cluster_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "node_pool_target": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "node_pool_config": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "autoscaling": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "config": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "locations": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "roles": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "kubernetes_software_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_dataproc_cluster_iam_binding": {
                "current": "gcp:dataproc/clusterIAMBinding:ClusterIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataproc_cluster_iam_member": {
                "current": "gcp:dataproc/clusterIAMMember:ClusterIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataproc_cluster_iam_policy": {
                "current": "gcp:dataproc/clusterIAMPolicy:ClusterIAMPolicy",
                "majorVersion": 6
            },
            "google_dataproc_job": {
                "current": "gcp:dataproc/job:Job",
                "majorVersion": 6,
                "fields": {
                    "hadoop_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "archive_uris": {
                                    "maxItemsOne": false
                                },
                                "args": {
                                    "maxItemsOne": false
                                },
                                "file_uris": {
                                    "maxItemsOne": false
                                },
                                "jar_file_uris": {
                                    "maxItemsOne": false
                                },
                                "logging_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "hive_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "jar_file_uris": {
                                    "maxItemsOne": false
                                },
                                "query_list": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "pig_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "jar_file_uris": {
                                    "maxItemsOne": false
                                },
                                "logging_config": {
                                    "maxItemsOne": true
                                },
                                "query_list": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "placement": {
                        "maxItemsOne": true
                    },
                    "presto_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "client_tags": {
                                    "maxItemsOne": false
                                },
                                "logging_config": {
                                    "maxItemsOne": true
                                },
                                "query_list": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "pyspark_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "archive_uris": {
                                    "maxItemsOne": false
                                },
                                "args": {
                                    "maxItemsOne": false
                                },
                                "file_uris": {
                                    "maxItemsOne": false
                                },
                                "jar_file_uris": {
                                    "maxItemsOne": false
                                },
                                "logging_config": {
                                    "maxItemsOne": true
                                },
                                "python_file_uris": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "reference": {
                        "maxItemsOne": true
                    },
                    "scheduling": {
                        "maxItemsOne": true
                    },
                    "spark_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "archive_uris": {
                                    "maxItemsOne": false
                                },
                                "args": {
                                    "maxItemsOne": false
                                },
                                "file_uris": {
                                    "maxItemsOne": false
                                },
                                "jar_file_uris": {
                                    "maxItemsOne": false
                                },
                                "logging_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "sparksql_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "jar_file_uris": {
                                    "maxItemsOne": false
                                },
                                "logging_config": {
                                    "maxItemsOne": true
                                },
                                "query_list": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "status": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataproc_job_iam_binding": {
                "current": "gcp:dataproc/jobIAMBinding:JobIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataproc_job_iam_member": {
                "current": "gcp:dataproc/jobIAMMember:JobIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataproc_job_iam_policy": {
                "current": "gcp:dataproc/jobIAMPolicy:JobIAMPolicy",
                "majorVersion": 6
            },
            "google_dataproc_metastore_federation": {
                "current": "gcp:dataproc/metastoreFederation:MetastoreFederation",
                "majorVersion": 6,
                "fields": {
                    "backend_metastores": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataproc_metastore_federation_iam_binding": {
                "current": "gcp:dataproc/metastoreFederationIamBinding:MetastoreFederationIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataproc_metastore_federation_iam_member": {
                "current": "gcp:dataproc/metastoreFederationIamMember:MetastoreFederationIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataproc_metastore_federation_iam_policy": {
                "current": "gcp:dataproc/metastoreFederationIamPolicy:MetastoreFederationIamPolicy",
                "majorVersion": 6
            },
            "google_dataproc_metastore_service": {
                "current": "gcp:dataproc/metastoreService:MetastoreService",
                "majorVersion": 6,
                "fields": {
                    "encryption_config": {
                        "maxItemsOne": true
                    },
                    "hive_metastore_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "auxiliary_versions": {
                                    "maxItemsOne": false
                                },
                                "kerberos_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "keytab": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "maintenance_window": {
                        "maxItemsOne": true
                    },
                    "metadata_integration": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "data_catalog_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "network_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "consumers": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "telemetry_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataproc_metastore_service_iam_binding": {
                "current": "gcp:dataproc/metastoreServiceIamBinding:MetastoreServiceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dataproc_metastore_service_iam_member": {
                "current": "gcp:dataproc/metastoreServiceIamMember:MetastoreServiceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dataproc_metastore_service_iam_policy": {
                "current": "gcp:dataproc/metastoreServiceIamPolicy:MetastoreServiceIamPolicy",
                "majorVersion": 6
            },
            "google_dataproc_workflow_template": {
                "current": "gcp:dataproc/workflowTemplate:WorkflowTemplate",
                "majorVersion": 6,
                "fields": {
                    "jobs": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "hadoop_job": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "archive_uris": {
                                                "maxItemsOne": false
                                            },
                                            "args": {
                                                "maxItemsOne": false
                                            },
                                            "file_uris": {
                                                "maxItemsOne": false
                                            },
                                            "jar_file_uris": {
                                                "maxItemsOne": false
                                            },
                                            "logging_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "hive_job": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "jar_file_uris": {
                                                "maxItemsOne": false
                                            },
                                            "query_list": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "queries": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "pig_job": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "jar_file_uris": {
                                                "maxItemsOne": false
                                            },
                                            "logging_config": {
                                                "maxItemsOne": true
                                            },
                                            "query_list": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "queries": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "prerequisite_step_ids": {
                                    "maxItemsOne": false
                                },
                                "presto_job": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "client_tags": {
                                                "maxItemsOne": false
                                            },
                                            "logging_config": {
                                                "maxItemsOne": true
                                            },
                                            "query_list": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "queries": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "pyspark_job": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "archive_uris": {
                                                "maxItemsOne": false
                                            },
                                            "args": {
                                                "maxItemsOne": false
                                            },
                                            "file_uris": {
                                                "maxItemsOne": false
                                            },
                                            "jar_file_uris": {
                                                "maxItemsOne": false
                                            },
                                            "logging_config": {
                                                "maxItemsOne": true
                                            },
                                            "python_file_uris": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "scheduling": {
                                    "maxItemsOne": true
                                },
                                "spark_job": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "archive_uris": {
                                                "maxItemsOne": false
                                            },
                                            "args": {
                                                "maxItemsOne": false
                                            },
                                            "file_uris": {
                                                "maxItemsOne": false
                                            },
                                            "jar_file_uris": {
                                                "maxItemsOne": false
                                            },
                                            "logging_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "spark_r_job": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "archive_uris": {
                                                "maxItemsOne": false
                                            },
                                            "args": {
                                                "maxItemsOne": false
                                            },
                                            "file_uris": {
                                                "maxItemsOne": false
                                            },
                                            "logging_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "spark_sql_job": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "jar_file_uris": {
                                                "maxItemsOne": false
                                            },
                                            "logging_config": {
                                                "maxItemsOne": true
                                            },
                                            "query_list": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "queries": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "parameters": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "fields": {
                                    "maxItemsOne": false
                                },
                                "validation": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "regex": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "regexes": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "values": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "values": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "placement": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cluster_selector": {
                                    "maxItemsOne": true
                                },
                                "managed_cluster": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "autoscaling_config": {
                                                            "maxItemsOne": true
                                                        },
                                                        "encryption_config": {
                                                            "maxItemsOne": true
                                                        },
                                                        "endpoint_config": {
                                                            "maxItemsOne": true
                                                        },
                                                        "gce_cluster_config": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "node_group_affinity": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "reservation_affinity": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "values": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "service_account_scopes": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "shielded_instance_config": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "tags": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "gke_cluster_config": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "namespaced_gke_deployment_target": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "initialization_actions": {
                                                            "maxItemsOne": false
                                                        },
                                                        "lifecycle_config": {
                                                            "maxItemsOne": true
                                                        },
                                                        "master_config": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "accelerators": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "disk_config": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "instance_names": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "managed_group_config": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "metastore_config": {
                                                            "maxItemsOne": true
                                                        },
                                                        "secondary_worker_config": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "accelerators": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "disk_config": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "instance_names": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "managed_group_config": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "security_config": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "kerberos_config": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "software_config": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "optional_components": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "worker_config": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "accelerators": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "disk_config": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "instance_names": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "managed_group_config": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_datastore_index": {
                "current": "gcp:datastore/dataStoreIndex:DataStoreIndex",
                "majorVersion": 6,
                "fields": {
                    "properties": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_datastream_connection_profile": {
                "current": "gcp:datastream/connectionProfile:ConnectionProfile",
                "majorVersion": 6,
                "fields": {
                    "bigquery_profile": {
                        "maxItemsOne": true
                    },
                    "forward_ssh_connectivity": {
                        "maxItemsOne": true
                    },
                    "gcs_profile": {
                        "maxItemsOne": true
                    },
                    "mysql_profile": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "ssl_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "oracle_profile": {
                        "maxItemsOne": true
                    },
                    "postgresql_profile": {
                        "maxItemsOne": true
                    },
                    "private_connectivity": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_datastream_private_connection": {
                "current": "gcp:datastream/privateConnection:PrivateConnection",
                "majorVersion": 6,
                "fields": {
                    "error": {
                        "maxItemsOne": false
                    },
                    "vpc_peering_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_datastream_stream": {
                "current": "gcp:datastream/stream:Stream",
                "majorVersion": 6,
                "fields": {
                    "backfill_all": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "mysql_excluded_objects": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "mysql_databases": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "mysql_tables": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "mysql_columns": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "oracle_excluded_objects": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "oracle_schemas": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "oracle_tables": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "oracle_columns": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "postgresql_excluded_objects": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "postgresql_schemas": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "postgresql_tables": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "postgresql_columns": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "backfill_none": {
                        "maxItemsOne": true
                    },
                    "destination_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "bigquery_destination_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "single_target_dataset": {
                                                "maxItemsOne": true
                                            },
                                            "source_hierarchy_datasets": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "dataset_template": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "gcs_destination_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "avro_file_format": {
                                                "maxItemsOne": true
                                            },
                                            "json_file_format": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "source_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "mysql_source_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "exclude_objects": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "mysql_databases": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "mysql_tables": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "mysql_columns": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "include_objects": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "mysql_databases": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "mysql_tables": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "mysql_columns": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "oracle_source_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "drop_large_objects": {
                                                "maxItemsOne": true
                                            },
                                            "exclude_objects": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "oracle_schemas": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "oracle_tables": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "oracle_columns": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "include_objects": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "oracle_schemas": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "oracle_tables": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "oracle_columns": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "stream_large_objects": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "postgresql_source_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "exclude_objects": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "postgresql_schemas": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "postgresql_tables": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "postgresql_columns": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "include_objects": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "postgresql_schemas": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "postgresql_tables": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "postgresql_columns": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_deployment_manager_deployment": {
                "current": "gcp:deploymentmanager/deployment:Deployment",
                "majorVersion": 6,
                "fields": {
                    "labels": {
                        "maxItemsOne": false
                    },
                    "target": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "config": {
                                    "maxItemsOne": true
                                },
                                "imports": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_dialogflow_agent": {
                "current": "gcp:diagflow/agent:Agent",
                "majorVersion": 6,
                "fields": {
                    "supported_language_codes": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dialogflow_cx_agent": {
                "current": "gcp:diagflow/cxAgent:CxAgent",
                "majorVersion": 6,
                "fields": {
                    "speech_to_text_settings": {
                        "maxItemsOne": true
                    },
                    "supported_language_codes": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dialogflow_cx_entity_type": {
                "current": "gcp:diagflow/cxEntityType:CxEntityType",
                "majorVersion": 6,
                "fields": {
                    "entities": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "synonyms": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "excluded_phrases": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dialogflow_cx_environment": {
                "current": "gcp:diagflow/cxEnvironment:CxEnvironment",
                "majorVersion": 6,
                "fields": {
                    "version_configs": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dialogflow_cx_flow": {
                "current": "gcp:diagflow/cxFlow:CxFlow",
                "majorVersion": 6,
                "fields": {
                    "event_handlers": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "trigger_fulfillment": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "messages": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "text": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "text": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "nlu_settings": {
                        "maxItemsOne": true
                    },
                    "transition_route_groups": {
                        "maxItemsOne": false
                    },
                    "transition_routes": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "trigger_fulfillment": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "messages": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "text": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "text": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_dialogflow_cx_intent": {
                "current": "gcp:diagflow/cxIntent:CxIntent",
                "majorVersion": 6,
                "fields": {
                    "parameters": {
                        "maxItemsOne": false
                    },
                    "training_phrases": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "parts": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_dialogflow_cx_page": {
                "current": "gcp:diagflow/cxPage:CxPage",
                "majorVersion": 6,
                "fields": {
                    "entry_fulfillment": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "messages": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "text": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "text": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "event_handlers": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "trigger_fulfillment": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "messages": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "text": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "text": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "form": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "parameters": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "fill_behavior": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "initial_prompt_fulfillment": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "messages": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "text": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "text": {
                                                                                                "maxItemsOne": false
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "transition_route_groups": {
                        "maxItemsOne": false
                    },
                    "transition_routes": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "trigger_fulfillment": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "messages": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "text": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "text": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_dialogflow_cx_version": {
                "current": "gcp:diagflow/cxVersion:CxVersion",
                "majorVersion": 6,
                "fields": {
                    "nlu_settings": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dialogflow_cx_webhook": {
                "current": "gcp:diagflow/cxWebhook:CxWebhook",
                "majorVersion": 6,
                "fields": {
                    "generic_web_service": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allowed_ca_certs": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "service_directory": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "generic_web_service": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "allowed_ca_certs": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_dialogflow_entity_type": {
                "current": "gcp:diagflow/entityType:EntityType",
                "majorVersion": 6,
                "fields": {
                    "entities": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "synonyms": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_dialogflow_fulfillment": {
                "current": "gcp:diagflow/fulfillment:Fulfillment",
                "majorVersion": 6,
                "fields": {
                    "features": {
                        "maxItemsOne": false
                    },
                    "generic_web_service": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dialogflow_intent": {
                "current": "gcp:diagflow/intent:Intent",
                "majorVersion": 6,
                "fields": {
                    "default_response_platforms": {
                        "maxItemsOne": false
                    },
                    "events": {
                        "maxItemsOne": false
                    },
                    "followup_intent_info": {
                        "maxItemsOne": false
                    },
                    "input_context_names": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dns_managed_zone": {
                "current": "gcp:dns/managedZone:ManagedZone",
                "majorVersion": 6,
                "fields": {
                    "cloud_logging_config": {
                        "maxItemsOne": true
                    },
                    "dnssec_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "default_key_specs": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "forwarding_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "target_name_servers": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "name_servers": {
                        "maxItemsOne": false
                    },
                    "peering_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "target_network": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "private_visibility_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "gke_clusters": {
                                    "maxItemsOne": false
                                },
                                "networks": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "service_directory_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "namespace": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_dns_managed_zone_iam_binding": {
                "current": "gcp:dns/dnsManagedZoneIamBinding:DnsManagedZoneIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dns_managed_zone_iam_member": {
                "current": "gcp:dns/dnsManagedZoneIamMember:DnsManagedZoneIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_dns_managed_zone_iam_policy": {
                "current": "gcp:dns/dnsManagedZoneIamPolicy:DnsManagedZoneIamPolicy",
                "majorVersion": 6
            },
            "google_dns_policy": {
                "current": "gcp:dns/policy:Policy",
                "majorVersion": 6,
                "fields": {
                    "alternative_name_server_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "target_name_servers": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "networks": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dns_record_set": {
                "current": "gcp:dns/recordSet:RecordSet",
                "majorVersion": 6,
                "fields": {
                    "routing_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "geo": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "health_checked_targets": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "internal_load_balancers": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "rrdatas": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "primary_backup": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "backup_geo": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "health_checked_targets": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "internal_load_balancers": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "rrdatas": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "primary": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "internal_load_balancers": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "wrr": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "health_checked_targets": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "internal_load_balancers": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "rrdatas": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "rrdatas": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dns_response_policy": {
                "current": "gcp:dns/responsePolicy:ResponsePolicy",
                "majorVersion": 6,
                "fields": {
                    "gke_clusters": {
                        "maxItemsOne": false
                    },
                    "networks": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dns_response_policy_rule": {
                "current": "gcp:dns/responsePolicyRule:ResponsePolicyRule",
                "majorVersion": 6,
                "fields": {
                    "local_data": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "local_datas": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "rrdatas": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_document_ai_processor": {
                "current": "gcp:essentialcontacts/documentAiProcessor:DocumentAiProcessor",
                "majorVersion": 6
            },
            "google_document_ai_processor_default_version": {
                "current": "gcp:essentialcontacts/documentAiProcessorDefaultVersion:DocumentAiProcessorDefaultVersion",
                "majorVersion": 6
            },
            "google_endpoints_service": {
                "current": "gcp:endpoints/service:Service",
                "majorVersion": 6,
                "fields": {
                    "apis": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "methods": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "endpoints": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_endpoints_service_consumers_iam_binding": {
                "current": "gcp:endpoints/consumersIamBinding:ConsumersIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_endpoints_service_consumers_iam_member": {
                "current": "gcp:endpoints/consumersIamMember:ConsumersIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_endpoints_service_consumers_iam_policy": {
                "current": "gcp:endpoints/consumersIamPolicy:ConsumersIamPolicy",
                "majorVersion": 6
            },
            "google_endpoints_service_iam_binding": {
                "current": "gcp:endpoints/serviceIamBinding:ServiceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_endpoints_service_iam_member": {
                "current": "gcp:endpoints/serviceIamMember:ServiceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_endpoints_service_iam_policy": {
                "current": "gcp:endpoints/serviceIamPolicy:ServiceIamPolicy",
                "majorVersion": 6
            },
            "google_essential_contacts_contact": {
                "current": "gcp:essentialcontacts/contact:Contact",
                "majorVersion": 6,
                "fields": {
                    "notification_category_subscriptions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_eventarc_channel": {
                "current": "gcp:eventarc/channel:Channel",
                "majorVersion": 6
            },
            "google_eventarc_google_channel_config": {
                "current": "gcp:eventarc/googleChannelConfig:GoogleChannelConfig",
                "majorVersion": 6
            },
            "google_eventarc_trigger": {
                "current": "gcp:eventarc/trigger:Trigger",
                "majorVersion": 6,
                "fields": {
                    "destination": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cloud_run_service": {
                                    "maxItemsOne": true
                                },
                                "gke": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "matching_criteria": {
                        "maxItemsOne": false
                    },
                    "transport": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "pubsub": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_filestore_backup": {
                "current": "gcp:filestore/backup:Backup",
                "majorVersion": 6
            },
            "google_filestore_instance": {
                "current": "gcp:filestore/instance:Instance",
                "majorVersion": 6,
                "fields": {
                    "file_shares": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "nfs_export_options": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ip_ranges": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "networks": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "ip_addresses": {
                                    "maxItemsOne": false
                                },
                                "modes": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_filestore_snapshot": {
                "current": "gcp:filestore/snapshot:Snapshot",
                "majorVersion": 6
            },
            "google_firebase_android_app": {
                "current": "gcp:firebase/androidApp:AndroidApp",
                "majorVersion": 6,
                "fields": {
                    "sha1_hashes": {
                        "maxItemsOne": false
                    },
                    "sha256_hashes": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_firebase_apple_app": {
                "current": "gcp:firebase/appleApp:AppleApp",
                "majorVersion": 6
            },
            "google_firebase_database_instance": {
                "current": "gcp:firebase/databaseInstance:DatabaseInstance",
                "majorVersion": 6
            },
            "google_firebase_extensions_instance": {
                "current": "gcp:firebase/extensionsInstance:ExtensionsInstance",
                "majorVersion": 6,
                "fields": {
                    "config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allowed_event_types": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "error_status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "details": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "runtime_data": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "fatal_error": {
                                    "maxItemsOne": true
                                },
                                "processing_state": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_firebase_hosting_channel": {
                "current": "gcp:firebase/hostingChannel:HostingChannel",
                "majorVersion": 6
            },
            "google_firebase_hosting_release": {
                "current": "gcp:firebase/hostingRelease:HostingRelease",
                "majorVersion": 6
            },
            "google_firebase_hosting_site": {
                "current": "gcp:firebase/hostingSite:HostingSite",
                "majorVersion": 6
            },
            "google_firebase_hosting_version": {
                "current": "gcp:firebase/hostingVersion:HostingVersion",
                "majorVersion": 6,
                "fields": {
                    "config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "redirects": {
                                    "maxItemsOne": false
                                },
                                "rewrites": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "run": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_firebase_project": {
                "current": "gcp:firebase/project:Project",
                "majorVersion": 6
            },
            "google_firebase_project_location": {
                "current": "gcp:firebase/projectLocation:ProjectLocation",
                "majorVersion": 6
            },
            "google_firebase_storage_bucket": {
                "current": "gcp:firebase/storageBucket:StorageBucket",
                "majorVersion": 6
            },
            "google_firebase_web_app": {
                "current": "gcp:firebase/webApp:WebApp",
                "majorVersion": 6,
                "fields": {
                    "app_urls": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_firebaserules_release": {
                "current": "gcp:firebaserules/release:Release",
                "majorVersion": 6
            },
            "google_firebaserules_ruleset": {
                "current": "gcp:firebaserules/ruleset:Ruleset",
                "majorVersion": 6,
                "fields": {
                    "metadata": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "services": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "source": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "files": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_firestore_database": {
                "current": "gcp:firestore/database:Database",
                "majorVersion": 6
            },
            "google_firestore_document": {
                "current": "gcp:firestore/document:Document",
                "majorVersion": 6
            },
            "google_firestore_field": {
                "current": "gcp:firestore/field:Field",
                "majorVersion": 6,
                "fields": {
                    "index_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "indexes": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "ttl_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_firestore_index": {
                "current": "gcp:firestore/index:Index",
                "majorVersion": 6,
                "fields": {
                    "fields": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_folder": {
                "current": "gcp:organizations/folder:Folder",
                "majorVersion": 6
            },
            "google_folder_access_approval_settings": {
                "current": "gcp:folder/accessApprovalSettings:AccessApprovalSettings",
                "majorVersion": 6,
                "fields": {
                    "enrolled_services": {
                        "maxItemsOne": false
                    },
                    "notification_emails": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_folder_iam_audit_config": {
                "current": "gcp:folder/iamAuditConfig:IamAuditConfig",
                "majorVersion": 6,
                "fields": {
                    "audit_log_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "exempted_members": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_folder_iam_binding": {
                "current": "gcp:folder/iAMBinding:IAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_folder_iam_member": {
                "current": "gcp:folder/iAMMember:IAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_folder_iam_policy": {
                "current": "gcp:folder/iAMPolicy:IAMPolicy",
                "majorVersion": 6
            },
            "google_folder_organization_policy": {
                "current": "gcp:folder/organizationPolicy:OrganizationPolicy",
                "majorVersion": 6,
                "fields": {
                    "boolean_policy": {
                        "maxItemsOne": true
                    },
                    "list_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allow": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "deny": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "restore_policy": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_game_services_game_server_cluster": {
                "current": "gcp:gameservices/gameServerCluster:GameServerCluster",
                "majorVersion": 6,
                "fields": {
                    "connection_info": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "gke_cluster_reference": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_game_services_game_server_config": {
                "current": "gcp:gameservices/gameServerConfig:GameServerConfig",
                "majorVersion": 6,
                "fields": {
                    "fleet_configs": {
                        "maxItemsOne": false
                    },
                    "scaling_configs": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "schedules": {
                                    "maxItemsOne": false
                                },
                                "selectors": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_game_services_game_server_deployment": {
                "current": "gcp:gameservices/gameServerDeployment:GameServerDeployment",
                "majorVersion": 6
            },
            "google_game_services_game_server_deployment_rollout": {
                "current": "gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout",
                "majorVersion": 6,
                "fields": {
                    "game_server_config_overrides": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "realms_selector": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "realms": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_game_services_realm": {
                "current": "gcp:gameservices/realm:Realm",
                "majorVersion": 6
            },
            "google_gke_backup_backup_plan": {
                "current": "gcp:gkebackup/backupPlan:BackupPlan",
                "majorVersion": 6,
                "fields": {
                    "backup_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "encryption_key": {
                                    "maxItemsOne": true
                                },
                                "selected_applications": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "namespaced_names": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "selected_namespaces": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "namespaces": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "backup_schedule": {
                        "maxItemsOne": true
                    },
                    "retention_policy": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_gke_backup_backup_plan_iam_binding": {
                "current": "gcp:gkebackup/backupPlanIamBinding:BackupPlanIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_gke_backup_backup_plan_iam_member": {
                "current": "gcp:gkebackup/backupPlanIamMember:BackupPlanIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_gke_backup_backup_plan_iam_policy": {
                "current": "gcp:gkebackup/backupPlanIamPolicy:BackupPlanIamPolicy",
                "majorVersion": 6
            },
            "google_gke_hub_feature": {
                "current": "gcp:gkehub/feature:Feature",
                "majorVersion": 6,
                "fields": {
                    "resource_state": {
                        "maxItemsOne": false
                    },
                    "spec": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "fleetobservability": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "logging_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "default_config": {
                                                            "maxItemsOne": true
                                                        },
                                                        "fleet_scope_logs_config": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "multiclusteringress": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "state": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "state": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_gke_hub_feature_iam_binding": {
                "current": "gcp:gkehub/featureIamBinding:FeatureIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_gke_hub_feature_iam_member": {
                "current": "gcp:gkehub/featureIamMember:FeatureIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_gke_hub_feature_iam_policy": {
                "current": "gcp:gkehub/featureIamPolicy:FeatureIamPolicy",
                "majorVersion": 6
            },
            "google_gke_hub_feature_membership": {
                "current": "gcp:gkehub/featureMembership:FeatureMembership",
                "majorVersion": 6,
                "fields": {
                    "configmanagement": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "binauthz": {
                                    "maxItemsOne": true
                                },
                                "config_sync": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "git": {
                                                "maxItemsOne": true
                                            },
                                            "oci": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "hierarchy_controller": {
                                    "maxItemsOne": true
                                },
                                "policy_controller": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "exemptable_namespaces": {
                                                "maxItemsOne": false
                                            },
                                            "monitoring": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "backends": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "mesh": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_gke_hub_membership": {
                "current": "gcp:gkehub/membership:Membership",
                "majorVersion": 6,
                "fields": {
                    "authority": {
                        "maxItemsOne": true
                    },
                    "endpoint": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "gke_cluster": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_gke_hub_membership_iam_binding": {
                "current": "gcp:gkehub/membershipIamBinding:MembershipIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_gke_hub_membership_iam_member": {
                "current": "gcp:gkehub/membershipIamMember:MembershipIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_gke_hub_membership_iam_policy": {
                "current": "gcp:gkehub/membershipIamPolicy:MembershipIamPolicy",
                "majorVersion": 6
            },
            "google_gkeonprem_bare_metal_admin_cluster": {
                "current": "gcp:gkeonprem/bareMetalAdminCluster:BareMetalAdminCluster",
                "majorVersion": 6,
                "fields": {
                    "cluster_operations": {
                        "maxItemsOne": true
                    },
                    "control_plane": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "api_server_args": {
                                    "maxItemsOne": false
                                },
                                "control_plane_node_pool_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "node_pool_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "node_configs": {
                                                            "maxItemsOne": false
                                                        },
                                                        "taints": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "fleet": {
                        "maxItemsOne": false
                    },
                    "load_balancer": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "manual_lb_config": {
                                    "maxItemsOne": true
                                },
                                "port_config": {
                                    "maxItemsOne": true
                                },
                                "vip_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "maintenance_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "maintenance_address_cidr_blocks": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "island_mode_cidr": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "pod_address_cidr_blocks": {
                                                "maxItemsOne": false
                                            },
                                            "service_address_cidr_blocks": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "node_access_config": {
                        "maxItemsOne": true
                    },
                    "node_config": {
                        "maxItemsOne": true
                    },
                    "proxy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "no_proxy": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "security_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "authorization": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "admin_users": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "conditions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "storage": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "lvp_node_mounts_config": {
                                    "maxItemsOne": true
                                },
                                "lvp_share_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "lvp_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "validation_check": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "status": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "result": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_gkeonprem_bare_metal_cluster": {
                "current": "gcp:gkeonprem/bareMetalCluster:BareMetalCluster",
                "majorVersion": 6,
                "fields": {
                    "cluster_operations": {
                        "maxItemsOne": true
                    },
                    "control_plane": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "api_server_args": {
                                    "maxItemsOne": false
                                },
                                "control_plane_node_pool_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "node_pool_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "node_configs": {
                                                            "maxItemsOne": false
                                                        },
                                                        "taints": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "fleet": {
                        "maxItemsOne": false
                    },
                    "load_balancer": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "bgp_lb_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "address_pools": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "addresses": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "bgp_peer_configs": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "control_plane_nodes": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "load_balancer_node_pool_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "node_pool_config": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "kubelet_config": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "node_configs": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "taints": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "manual_lb_config": {
                                    "maxItemsOne": true
                                },
                                "metal_lb_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "address_pools": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "addresses": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "load_balancer_node_pool_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "node_pool_config": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "node_configs": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "taints": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "port_config": {
                                    "maxItemsOne": true
                                },
                                "vip_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "maintenance_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "maintenance_address_cidr_blocks": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "island_mode_cidr": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "pod_address_cidr_blocks": {
                                                "maxItemsOne": false
                                            },
                                            "service_address_cidr_blocks": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "multiple_network_interfaces_config": {
                                    "maxItemsOne": true
                                },
                                "sr_iov_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "node_access_config": {
                        "maxItemsOne": true
                    },
                    "node_config": {
                        "maxItemsOne": true
                    },
                    "os_environment_config": {
                        "maxItemsOne": true
                    },
                    "proxy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "no_proxy": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "security_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "authorization": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "admin_users": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "conditions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "storage": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "lvp_node_mounts_config": {
                                    "maxItemsOne": true
                                },
                                "lvp_share_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "lvp_config": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "validation_check": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "status": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "result": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_gkeonprem_bare_metal_node_pool": {
                "current": "gcp:gkeonprem/bareMetalNodePool:BareMetalNodePool",
                "majorVersion": 6,
                "fields": {
                    "node_pool_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "node_configs": {
                                    "maxItemsOne": false
                                },
                                "taints": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "conditions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_gkeonprem_vmware_cluster": {
                "current": "gcp:gkeonprem/vMwareCluster:VMwareCluster",
                "majorVersion": 6,
                "fields": {
                    "anti_affinity_groups": {
                        "maxItemsOne": true
                    },
                    "authorization": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "admin_users": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "auto_repair_config": {
                        "maxItemsOne": true
                    },
                    "control_plane_node": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "auto_resize_config": {
                                    "maxItemsOne": true
                                },
                                "vsphere_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "dataplane_v2": {
                        "maxItemsOne": true
                    },
                    "fleet": {
                        "maxItemsOne": false
                    },
                    "load_balancer": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "f5_config": {
                                    "maxItemsOne": true
                                },
                                "manual_lb_config": {
                                    "maxItemsOne": true
                                },
                                "metal_lb_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "address_pools": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "addresses": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "vip_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "network_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "control_plane_v2_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "control_plane_ip_block": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "ips": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "dhcp_ip_config": {
                                    "maxItemsOne": true
                                },
                                "host_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "dns_search_domains": {
                                                "maxItemsOne": false
                                            },
                                            "dns_servers": {
                                                "maxItemsOne": false
                                            },
                                            "ntp_servers": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "pod_address_cidr_blocks": {
                                    "maxItemsOne": false
                                },
                                "service_address_cidr_blocks": {
                                    "maxItemsOne": false
                                },
                                "static_ip_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "ip_blocks": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "ips": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "conditions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "storage": {
                        "maxItemsOne": true
                    },
                    "validation_check": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "status": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "result": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "vcenter": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_gkeonprem_vmware_node_pool": {
                "current": "gcp:gkeonprem/vMwareNodePool:VMwareNodePool",
                "majorVersion": 6,
                "fields": {
                    "config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "taints": {
                                    "maxItemsOne": false
                                },
                                "vsphere_config": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "tags": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "node_pool_autoscaling": {
                        "maxItemsOne": true
                    },
                    "status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "conditions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_healthcare_consent_store": {
                "current": "gcp:healthcare/consentStore:ConsentStore",
                "majorVersion": 6
            },
            "google_healthcare_consent_store_iam_binding": {
                "current": "gcp:healthcare/consentStoreIamBinding:ConsentStoreIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_healthcare_consent_store_iam_member": {
                "current": "gcp:healthcare/consentStoreIamMember:ConsentStoreIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_healthcare_consent_store_iam_policy": {
                "current": "gcp:healthcare/consentStoreIamPolicy:ConsentStoreIamPolicy",
                "majorVersion": 6
            },
            "google_healthcare_dataset": {
                "current": "gcp:healthcare/dataset:Dataset",
                "majorVersion": 6
            },
            "google_healthcare_dataset_iam_binding": {
                "current": "gcp:healthcare/datasetIamBinding:DatasetIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_healthcare_dataset_iam_member": {
                "current": "gcp:healthcare/datasetIamMember:DatasetIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_healthcare_dataset_iam_policy": {
                "current": "gcp:healthcare/datasetIamPolicy:DatasetIamPolicy",
                "majorVersion": 6
            },
            "google_healthcare_dicom_store": {
                "current": "gcp:healthcare/dicomStore:DicomStore",
                "majorVersion": 6,
                "fields": {
                    "notification_config": {
                        "maxItemsOne": true
                    },
                    "stream_configs": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "bigquery_destination": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_healthcare_dicom_store_iam_binding": {
                "current": "gcp:healthcare/dicomStoreIamBinding:DicomStoreIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_healthcare_dicom_store_iam_member": {
                "current": "gcp:healthcare/dicomStoreIamMember:DicomStoreIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_healthcare_dicom_store_iam_policy": {
                "current": "gcp:healthcare/dicomStoreIamPolicy:DicomStoreIamPolicy",
                "majorVersion": 6
            },
            "google_healthcare_fhir_store": {
                "current": "gcp:healthcare/fhirStore:FhirStore",
                "majorVersion": 6,
                "fields": {
                    "notification_config": {
                        "maxItemsOne": true
                    },
                    "notification_configs": {
                        "maxItemsOne": false
                    },
                    "stream_configs": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "bigquery_destination": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "schema_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "last_updated_partition_config": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "resource_types": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_healthcare_fhir_store_iam_binding": {
                "current": "gcp:healthcare/fhirStoreIamBinding:FhirStoreIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_healthcare_fhir_store_iam_member": {
                "current": "gcp:healthcare/fhirStoreIamMember:FhirStoreIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_healthcare_fhir_store_iam_policy": {
                "current": "gcp:healthcare/fhirStoreIamPolicy:FhirStoreIamPolicy",
                "majorVersion": 6
            },
            "google_healthcare_hl7_v2_store": {
                "current": "gcp:healthcare/hl7Store:Hl7Store",
                "majorVersion": 6,
                "fields": {
                    "notification_config": {
                        "maxItemsOne": true
                    },
                    "notification_configs": {
                        "maxItemsOne": false
                    },
                    "parser_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_healthcare_hl7_v2_store_iam_binding": {
                "current": "gcp:healthcare/hl7StoreIamBinding:Hl7StoreIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_healthcare_hl7_v2_store_iam_member": {
                "current": "gcp:healthcare/hl7StoreIamMember:Hl7StoreIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_healthcare_hl7_v2_store_iam_policy": {
                "current": "gcp:healthcare/hl7StoreIamPolicy:Hl7StoreIamPolicy",
                "majorVersion": 6
            },
            "google_iam_access_boundary_policy": {
                "current": "gcp:iam/accessBoundaryPolicy:AccessBoundaryPolicy",
                "majorVersion": 6,
                "fields": {
                    "rules": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "access_boundary_rule": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "availability_condition": {
                                                "maxItemsOne": true
                                            },
                                            "available_permissions": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_iam_deny_policy": {
                "current": "gcp:iam/denyPolicy:DenyPolicy",
                "majorVersion": 6,
                "fields": {
                    "rules": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "deny_rule": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "denial_condition": {
                                                "maxItemsOne": true
                                            },
                                            "denied_permissions": {
                                                "maxItemsOne": false
                                            },
                                            "denied_principals": {
                                                "maxItemsOne": false
                                            },
                                            "exception_permissions": {
                                                "maxItemsOne": false
                                            },
                                            "exception_principals": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_iam_workforce_pool": {
                "current": "gcp:iam/workforcePool:WorkforcePool",
                "majorVersion": 6
            },
            "google_iam_workforce_pool_provider": {
                "current": "gcp:iam/workforcePoolProvider:WorkforcePoolProvider",
                "majorVersion": 6,
                "fields": {
                    "oidc": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "client_secret": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "value": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "web_sso_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "saml": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_iam_workload_identity_pool": {
                "current": "gcp:iam/workloadIdentityPool:WorkloadIdentityPool",
                "majorVersion": 6
            },
            "google_iam_workload_identity_pool_provider": {
                "current": "gcp:iam/workloadIdentityPoolProvider:WorkloadIdentityPoolProvider",
                "majorVersion": 6,
                "fields": {
                    "aws": {
                        "maxItemsOne": true
                    },
                    "oidc": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allowed_audiences": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_iap_app_engine_service_iam_binding": {
                "current": "gcp:iap/appEngineServiceIamBinding:AppEngineServiceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_iap_app_engine_service_iam_member": {
                "current": "gcp:iap/appEngineServiceIamMember:AppEngineServiceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_iap_app_engine_service_iam_policy": {
                "current": "gcp:iap/appEngineServiceIamPolicy:AppEngineServiceIamPolicy",
                "majorVersion": 6
            },
            "google_iap_app_engine_version_iam_binding": {
                "current": "gcp:iap/appEngineVersionIamBinding:AppEngineVersionIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_iap_app_engine_version_iam_member": {
                "current": "gcp:iap/appEngineVersionIamMember:AppEngineVersionIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_iap_app_engine_version_iam_policy": {
                "current": "gcp:iap/appEngineVersionIamPolicy:AppEngineVersionIamPolicy",
                "majorVersion": 6
            },
            "google_iap_brand": {
                "current": "gcp:iap/brand:Brand",
                "majorVersion": 6
            },
            "google_iap_client": {
                "current": "gcp:iap/client:Client",
                "majorVersion": 6
            },
            "google_iap_tunnel_iam_binding": {
                "current": "gcp:iap/tunnelIamBinding:TunnelIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_iap_tunnel_iam_member": {
                "current": "gcp:iap/tunnelIamMember:TunnelIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_iap_tunnel_iam_policy": {
                "current": "gcp:iap/tunnelIamPolicy:TunnelIamPolicy",
                "majorVersion": 6
            },
            "google_iap_tunnel_instance_iam_binding": {
                "current": "gcp:iap/tunnelInstanceIAMBinding:TunnelInstanceIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_iap_tunnel_instance_iam_member": {
                "current": "gcp:iap/tunnelInstanceIAMMember:TunnelInstanceIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_iap_tunnel_instance_iam_policy": {
                "current": "gcp:iap/tunnelInstanceIAMPolicy:TunnelInstanceIAMPolicy",
                "majorVersion": 6
            },
            "google_iap_web_backend_service_iam_binding": {
                "current": "gcp:iap/webBackendServiceIamBinding:WebBackendServiceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_iap_web_backend_service_iam_member": {
                "current": "gcp:iap/webBackendServiceIamMember:WebBackendServiceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_iap_web_backend_service_iam_policy": {
                "current": "gcp:iap/webBackendServiceIamPolicy:WebBackendServiceIamPolicy",
                "majorVersion": 6
            },
            "google_iap_web_iam_binding": {
                "current": "gcp:iap/webIamBinding:WebIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_iap_web_iam_member": {
                "current": "gcp:iap/webIamMember:WebIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_iap_web_iam_policy": {
                "current": "gcp:iap/webIamPolicy:WebIamPolicy",
                "majorVersion": 6
            },
            "google_iap_web_region_backend_service_iam_binding": {
                "current": "gcp:iap/webRegionBackendServiceIamBinding:WebRegionBackendServiceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_iap_web_region_backend_service_iam_member": {
                "current": "gcp:iap/webRegionBackendServiceIamMember:WebRegionBackendServiceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_iap_web_region_backend_service_iam_policy": {
                "current": "gcp:iap/webRegionBackendServiceIamPolicy:WebRegionBackendServiceIamPolicy",
                "majorVersion": 6
            },
            "google_iap_web_type_app_engine_iam_binding": {
                "current": "gcp:iap/webTypeAppEngingIamBinding:WebTypeAppEngingIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_iap_web_type_app_engine_iam_member": {
                "current": "gcp:iap/webTypeAppEngingIamMember:WebTypeAppEngingIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_iap_web_type_app_engine_iam_policy": {
                "current": "gcp:iap/webTypeAppEngingIamPolicy:WebTypeAppEngingIamPolicy",
                "majorVersion": 6
            },
            "google_iap_web_type_compute_iam_binding": {
                "current": "gcp:iap/webTypeComputeIamBinding:WebTypeComputeIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_iap_web_type_compute_iam_member": {
                "current": "gcp:iap/webTypeComputeIamMember:WebTypeComputeIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_iap_web_type_compute_iam_policy": {
                "current": "gcp:iap/webTypeComputeIamPolicy:WebTypeComputeIamPolicy",
                "majorVersion": 6
            },
            "google_identity_platform_config": {
                "current": "gcp:identityplatform/config:Config",
                "majorVersion": 6
            },
            "google_identity_platform_default_supported_idp_config": {
                "current": "gcp:identityplatform/defaultSupportedIdpConfig:DefaultSupportedIdpConfig",
                "majorVersion": 6
            },
            "google_identity_platform_inbound_saml_config": {
                "current": "gcp:identityplatform/inboundSamlConfig:InboundSamlConfig",
                "majorVersion": 6,
                "fields": {
                    "idp_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "idp_certificates": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "sp_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "sp_certificates": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_identity_platform_oauth_idp_config": {
                "current": "gcp:identityplatform/oauthIdpConfig:OauthIdpConfig",
                "majorVersion": 6
            },
            "google_identity_platform_project_default_config": {
                "current": "gcp:identityplatform/projectDefaultConfig:ProjectDefaultConfig",
                "majorVersion": 6,
                "fields": {
                    "sign_in": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "anonymous": {
                                    "maxItemsOne": true
                                },
                                "email": {
                                    "maxItemsOne": true
                                },
                                "hash_config": {
                                    "maxItemsOne": false
                                },
                                "phone_number": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_identity_platform_tenant": {
                "current": "gcp:identityplatform/tenant:Tenant",
                "majorVersion": 6
            },
            "google_identity_platform_tenant_default_supported_idp_config": {
                "current": "gcp:identityplatform/tenantDefaultSupportedIdpConfig:TenantDefaultSupportedIdpConfig",
                "majorVersion": 6
            },
            "google_identity_platform_tenant_inbound_saml_config": {
                "current": "gcp:identityplatform/tenantInboundSamlConfig:TenantInboundSamlConfig",
                "majorVersion": 6,
                "fields": {
                    "idp_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "idp_certificates": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "sp_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "sp_certificates": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_identity_platform_tenant_oauth_idp_config": {
                "current": "gcp:identityplatform/tenantOauthIdpConfig:TenantOauthIdpConfig",
                "majorVersion": 6
            },
            "google_kms_crypto_key": {
                "current": "gcp:kms/cryptoKey:CryptoKey",
                "majorVersion": 6,
                "fields": {
                    "version_template": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_kms_crypto_key_iam_binding": {
                "current": "gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_kms_crypto_key_iam_member": {
                "current": "gcp:kms/cryptoKeyIAMMember:CryptoKeyIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_kms_crypto_key_iam_policy": {
                "current": "gcp:kms/cryptoKeyIAMPolicy:CryptoKeyIAMPolicy",
                "majorVersion": 6
            },
            "google_kms_crypto_key_version": {
                "current": "gcp:kms/cryptoKeyVersion:CryptoKeyVersion",
                "majorVersion": 6,
                "fields": {
                    "attestation": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "cert_chains": {
                                    "maxItemsOne": true
                                },
                                "external_protection_level_options": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_kms_key_ring": {
                "current": "gcp:kms/keyRing:KeyRing",
                "majorVersion": 6
            },
            "google_kms_key_ring_iam_binding": {
                "current": "gcp:kms/keyRingIAMBinding:KeyRingIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_kms_key_ring_iam_member": {
                "current": "gcp:kms/keyRingIAMMember:KeyRingIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_kms_key_ring_iam_policy": {
                "current": "gcp:kms/keyRingIAMPolicy:KeyRingIAMPolicy",
                "majorVersion": 6
            },
            "google_kms_key_ring_import_job": {
                "current": "gcp:kms/keyRingImportJob:KeyRingImportJob",
                "majorVersion": 6,
                "fields": {
                    "attestation": {
                        "maxItemsOne": false
                    },
                    "public_key": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_kms_secret_ciphertext": {
                "current": "gcp:kms/secretCiphertext:SecretCiphertext",
                "majorVersion": 6
            },
            "google_logging_billing_account_bucket_config": {
                "current": "gcp:logging/billingAccountBucketConfig:BillingAccountBucketConfig",
                "majorVersion": 6,
                "fields": {
                    "cmek_settings": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_logging_billing_account_exclusion": {
                "current": "gcp:logging/billingAccountExclusion:BillingAccountExclusion",
                "majorVersion": 6
            },
            "google_logging_billing_account_sink": {
                "current": "gcp:logging/billingAccountSink:BillingAccountSink",
                "majorVersion": 6,
                "fields": {
                    "bigquery_options": {
                        "maxItemsOne": true
                    },
                    "exclusions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_logging_folder_bucket_config": {
                "current": "gcp:logging/folderBucketConfig:FolderBucketConfig",
                "majorVersion": 6,
                "fields": {
                    "cmek_settings": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_logging_folder_exclusion": {
                "current": "gcp:logging/folderExclusion:FolderExclusion",
                "majorVersion": 6
            },
            "google_logging_folder_sink": {
                "current": "gcp:logging/folderSink:FolderSink",
                "majorVersion": 6,
                "fields": {
                    "bigquery_options": {
                        "maxItemsOne": true
                    },
                    "exclusions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_logging_linked_dataset": {
                "current": "gcp:logging/linkedDataset:LinkedDataset",
                "majorVersion": 6,
                "fields": {
                    "bigquery_dataset": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_logging_log_view": {
                "current": "gcp:logging/logView:LogView",
                "majorVersion": 6
            },
            "google_logging_metric": {
                "current": "gcp:logging/metric:Metric",
                "majorVersion": 6,
                "fields": {
                    "bucket_options": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "explicit_buckets": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "bounds": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "exponential_buckets": {
                                    "maxItemsOne": true
                                },
                                "linear_buckets": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "metric_descriptor": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "labels": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_logging_organization_bucket_config": {
                "current": "gcp:logging/organizationBucketConfig:OrganizationBucketConfig",
                "majorVersion": 6,
                "fields": {
                    "cmek_settings": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_logging_organization_exclusion": {
                "current": "gcp:logging/organizationExclusion:OrganizationExclusion",
                "majorVersion": 6
            },
            "google_logging_organization_sink": {
                "current": "gcp:logging/organizationSink:OrganizationSink",
                "majorVersion": 6,
                "fields": {
                    "bigquery_options": {
                        "maxItemsOne": true
                    },
                    "exclusions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_logging_project_bucket_config": {
                "current": "gcp:logging/projectBucketConfig:ProjectBucketConfig",
                "majorVersion": 6,
                "fields": {
                    "cmek_settings": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_logging_project_exclusion": {
                "current": "gcp:logging/projectExclusion:ProjectExclusion",
                "majorVersion": 6
            },
            "google_logging_project_sink": {
                "current": "gcp:logging/projectSink:ProjectSink",
                "majorVersion": 6,
                "fields": {
                    "bigquery_options": {
                        "maxItemsOne": true
                    },
                    "exclusions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_looker_instance": {
                "current": "gcp:looker/instance:Instance",
                "majorVersion": 6,
                "fields": {
                    "admin_settings": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allowed_email_domains": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "deny_maintenance_period": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "end_date": {
                                    "maxItemsOne": true
                                },
                                "start_date": {
                                    "maxItemsOne": true
                                },
                                "time": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "encryption_config": {
                        "maxItemsOne": true
                    },
                    "maintenance_window": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "start_time": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "oauth_config": {
                        "maxItemsOne": true
                    },
                    "user_metadata": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_memcache_instance": {
                "current": "gcp:memcache/instance:Instance",
                "majorVersion": 6,
                "fields": {
                    "maintenance_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "weekly_maintenance_window": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "start_time": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "maintenance_schedule": {
                        "maxItemsOne": false
                    },
                    "memcache_nodes": {
                        "maxItemsOne": false
                    },
                    "memcache_parameters": {
                        "maxItemsOne": true
                    },
                    "node_config": {
                        "maxItemsOne": true
                    },
                    "zones": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_ml_engine_model": {
                "current": "gcp:ml/engineModel:EngineModel",
                "majorVersion": 6,
                "fields": {
                    "default_version": {
                        "maxItemsOne": true
                    },
                    "regions": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_monitoring_alert_policy": {
                "current": "gcp:monitoring/alertPolicy:AlertPolicy",
                "majorVersion": 6,
                "fields": {
                    "alert_strategy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "notification_channel_strategy": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "notification_channel_names": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "notification_rate_limit": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "conditions": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "condition_absent": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "aggregations": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "group_by_fields": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "trigger": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "condition_matched_log": {
                                    "maxItemsOne": true
                                },
                                "condition_monitoring_query_language": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "trigger": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "condition_prometheus_query_language": {
                                    "maxItemsOne": true
                                },
                                "condition_threshold": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "aggregations": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "group_by_fields": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "denominator_aggregations": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "group_by_fields": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "forecast_options": {
                                                "maxItemsOne": true
                                            },
                                            "trigger": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "creation_record": {
                        "maxItemsOne": false
                    },
                    "documentation": {
                        "maxItemsOne": true
                    },
                    "notification_channels": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_monitoring_custom_service": {
                "current": "gcp:monitoring/customService:CustomService",
                "majorVersion": 6,
                "fields": {
                    "telemetry": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_monitoring_dashboard": {
                "current": "gcp:monitoring/dashboard:Dashboard",
                "majorVersion": 6
            },
            "google_monitoring_group": {
                "current": "gcp:monitoring/group:Group",
                "majorVersion": 6
            },
            "google_monitoring_metric_descriptor": {
                "current": "gcp:monitoring/metricDescriptor:MetricDescriptor",
                "majorVersion": 6,
                "fields": {
                    "labels": {
                        "maxItemsOne": false
                    },
                    "metadata": {
                        "maxItemsOne": true
                    },
                    "monitored_resource_types": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_monitoring_monitored_project": {
                "current": "gcp:monitoring/monitoredProject:MonitoredProject",
                "majorVersion": 6
            },
            "google_monitoring_notification_channel": {
                "current": "gcp:monitoring/notificationChannel:NotificationChannel",
                "majorVersion": 6,
                "fields": {
                    "sensitive_labels": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_monitoring_service": {
                "current": "gcp:monitoring/genericService:GenericService",
                "majorVersion": 6,
                "fields": {
                    "basic_service": {
                        "maxItemsOne": true
                    },
                    "telemetry": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_monitoring_slo": {
                "current": "gcp:monitoring/slo:Slo",
                "majorVersion": 6,
                "fields": {
                    "basic_sli": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "availability": {
                                    "maxItemsOne": true
                                },
                                "latency": {
                                    "maxItemsOne": true
                                },
                                "location": {
                                    "maxItemsOne": false
                                },
                                "method": {
                                    "maxItemsOne": false
                                },
                                "version": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "request_based_sli": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "distribution_cut": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "range": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "good_total_ratio": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "windows_based_sli": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "good_total_ratio_threshold": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "basic_sli_performance": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "availability": {
                                                            "maxItemsOne": true
                                                        },
                                                        "latency": {
                                                            "maxItemsOne": true
                                                        },
                                                        "location": {
                                                            "maxItemsOne": false
                                                        },
                                                        "method": {
                                                            "maxItemsOne": false
                                                        },
                                                        "version": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "performance": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "distribution_cut": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "range": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "good_total_ratio": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "metric_mean_in_range": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "range": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "metric_sum_in_range": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "range": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_monitoring_uptime_check_config": {
                "current": "gcp:monitoring/uptimeCheckConfig:UptimeCheckConfig",
                "majorVersion": 6,
                "fields": {
                    "content_matchers": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "json_path_matcher": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "http_check": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "accepted_response_status_codes": {
                                    "maxItemsOne": false
                                },
                                "auth_info": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "monitored_resource": {
                        "maxItemsOne": true
                    },
                    "resource_group": {
                        "maxItemsOne": true
                    },
                    "selected_regions": {
                        "maxItemsOne": false
                    },
                    "tcp_check": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_network_connectivity_hub": {
                "current": "gcp:networkconnectivity/hub:Hub",
                "majorVersion": 6,
                "fields": {
                    "routing_vpcs": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_network_connectivity_spoke": {
                "current": "gcp:networkconnectivity/spoke:Spoke",
                "majorVersion": 6,
                "fields": {
                    "linked_interconnect_attachments": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "uris": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "linked_router_appliance_instances": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "instances": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "linked_vpn_tunnels": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "uris": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_network_management_connectivity_test": {
                "current": "gcp:networkmanagement/connectivityTest:ConnectivityTest",
                "majorVersion": 6,
                "fields": {
                    "destination": {
                        "maxItemsOne": true
                    },
                    "related_projects": {
                        "maxItemsOne": false
                    },
                    "source": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_network_security_address_group": {
                "current": "gcp:networksecurity/addressGroup:AddressGroup",
                "majorVersion": 6,
                "fields": {
                    "items": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_network_security_authorization_policy": {
                "current": "gcp:networksecurity/authorizationPolicy:AuthorizationPolicy",
                "majorVersion": 6,
                "fields": {
                    "rules": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "destinations": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "hosts": {
                                                "maxItemsOne": false
                                            },
                                            "http_header_match": {
                                                "maxItemsOne": true
                                            },
                                            "methods": {
                                                "maxItemsOne": false
                                            },
                                            "ports": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "sources": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ip_blocks": {
                                                "maxItemsOne": false
                                            },
                                            "principals": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_network_security_client_tls_policy": {
                "current": "gcp:networksecurity/clientTlsPolicy:ClientTlsPolicy",
                "majorVersion": 6,
                "fields": {
                    "client_certificate": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "certificate_provider_instance": {
                                    "maxItemsOne": true
                                },
                                "grpc_endpoint": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "server_validation_ca": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "certificate_provider_instance": {
                                    "maxItemsOne": true
                                },
                                "grpc_endpoint": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_network_security_gateway_security_policy": {
                "current": "gcp:networksecurity/gatewaySecurityPolicy:GatewaySecurityPolicy",
                "majorVersion": 6
            },
            "google_network_security_gateway_security_policy_rule": {
                "current": "gcp:networksecurity/gatewaySecurityPolicyRule:GatewaySecurityPolicyRule",
                "majorVersion": 6
            },
            "google_network_security_server_tls_policy": {
                "current": "gcp:networksecurity/serverTlsPolicy:ServerTlsPolicy",
                "majorVersion": 6,
                "fields": {
                    "mtls_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "client_validation_ca": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "certificate_provider_instance": {
                                                "maxItemsOne": true
                                            },
                                            "grpc_endpoint": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "server_certificate": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "certificate_provider_instance": {
                                    "maxItemsOne": true
                                },
                                "grpc_endpoint": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_network_security_tls_inspection_policy": {
                "current": "gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy",
                "majorVersion": 6
            },
            "google_network_security_url_lists": {
                "current": "gcp:networksecurity/urlList:UrlList",
                "majorVersion": 6,
                "fields": {
                    "values": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_network_services_edge_cache_keyset": {
                "current": "gcp:networkservices/edgeCacheKeyset:EdgeCacheKeyset",
                "majorVersion": 6,
                "fields": {
                    "public_key": {
                        "maxItemsOne": false
                    },
                    "validation_shared_keys": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_network_services_edge_cache_origin": {
                "current": "gcp:networkservices/edgeCacheOrigin:EdgeCacheOrigin",
                "majorVersion": 6,
                "fields": {
                    "aws_v4_authentication": {
                        "maxItemsOne": true
                    },
                    "origin_override_action": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "header_action": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "request_headers_to_add": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "url_rewrite": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "origin_redirect": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "redirect_conditions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "retry_conditions": {
                        "maxItemsOne": false
                    },
                    "timeout": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_network_services_edge_cache_service": {
                "current": "gcp:networkservices/edgeCacheService:EdgeCacheService",
                "majorVersion": 6,
                "fields": {
                    "edge_ssl_certificates": {
                        "maxItemsOne": false
                    },
                    "ipv4_addresses": {
                        "maxItemsOne": false
                    },
                    "ipv6_addresses": {
                        "maxItemsOne": false
                    },
                    "log_config": {
                        "maxItemsOne": true
                    },
                    "routing": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "host_rule": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "hosts": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "path_matcher": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "route_rule": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "header_action": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "request_header_to_add": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "request_header_to_remove": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "response_header_to_add": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "response_header_to_remove": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "match_rule": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "header_match": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "query_parameter_match": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "route_action": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "cdn_policy": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "add_signatures": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "actions": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "copied_parameters": {
                                                                                                "maxItemsOne": false
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "cache_key_policy": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "excluded_query_parameters": {
                                                                                                "maxItemsOne": false
                                                                                            },
                                                                                            "included_cookie_names": {
                                                                                                "maxItemsOne": false
                                                                                            },
                                                                                            "included_header_names": {
                                                                                                "maxItemsOne": false
                                                                                            },
                                                                                            "included_query_parameters": {
                                                                                                "maxItemsOne": false
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "signed_token_options": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "allowed_signature_algorithms": {
                                                                                                "maxItemsOne": false
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "cors_policy": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "allow_headers": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "allow_methods": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "allow_origins": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "expose_headers": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "url_rewrite": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "url_redirect": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_network_services_endpoint_policy": {
                "current": "gcp:networkservices/endpointPolicy:EndpointPolicy",
                "majorVersion": 6,
                "fields": {
                    "endpoint_matcher": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "metadata_label_matcher": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "metadata_labels": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "traffic_port_selector": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "ports": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_network_services_gateway": {
                "current": "gcp:networkservices/gateway:Gateway",
                "majorVersion": 6,
                "fields": {
                    "addresses": {
                        "maxItemsOne": false
                    },
                    "certificate_urls": {
                        "maxItemsOne": false
                    },
                    "ports": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_network_services_grpc_route": {
                "current": "gcp:networkservices/grpcRoute:GrpcRoute",
                "majorVersion": 6,
                "fields": {
                    "gateways": {
                        "maxItemsOne": false
                    },
                    "hostnames": {
                        "maxItemsOne": false
                    },
                    "meshes": {
                        "maxItemsOne": false
                    },
                    "rules": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "action": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "destinations": {
                                                "maxItemsOne": false
                                            },
                                            "fault_injection_policy": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "abort": {
                                                            "maxItemsOne": true
                                                        },
                                                        "delay": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "retry_policy": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "retry_conditions": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "matches": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "headers": {
                                                "maxItemsOne": false
                                            },
                                            "method": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_network_services_http_route": {
                "current": "gcp:networkservices/httpRoute:HttpRoute",
                "majorVersion": 6,
                "fields": {
                    "gateways": {
                        "maxItemsOne": false
                    },
                    "hostnames": {
                        "maxItemsOne": false
                    },
                    "meshes": {
                        "maxItemsOne": false
                    },
                    "rules": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "action": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "cors_policy": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allow_headers": {
                                                            "maxItemsOne": false
                                                        },
                                                        "allow_methods": {
                                                            "maxItemsOne": false
                                                        },
                                                        "allow_origin_regexes": {
                                                            "maxItemsOne": false
                                                        },
                                                        "allow_origins": {
                                                            "maxItemsOne": false
                                                        },
                                                        "expose_headers": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "destinations": {
                                                "maxItemsOne": false
                                            },
                                            "fault_injection_policy": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "abort": {
                                                            "maxItemsOne": true
                                                        },
                                                        "delay": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "redirect": {
                                                "maxItemsOne": true
                                            },
                                            "request_header_modifier": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "remove": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "request_mirror_policy": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "destination": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "response_header_modifier": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "remove": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "retry_policy": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "retry_conditions": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "url_rewrite": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "matches": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "headers": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "range_match": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "query_parameters": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_network_services_mesh": {
                "current": "gcp:networkservices/mesh:Mesh",
                "majorVersion": 6
            },
            "google_network_services_service_binding": {
                "current": "gcp:networkservices/serviceBinding:ServiceBinding",
                "majorVersion": 6
            },
            "google_network_services_tcp_route": {
                "current": "gcp:networkservices/tcpRoute:TcpRoute",
                "majorVersion": 6,
                "fields": {
                    "gateways": {
                        "maxItemsOne": false
                    },
                    "meshes": {
                        "maxItemsOne": false
                    },
                    "rules": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "action": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "destinations": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "matches": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_network_services_tls_route": {
                "current": "gcp:networkservices/tlsRoute:TlsRoute",
                "majorVersion": 6,
                "fields": {
                    "gateways": {
                        "maxItemsOne": false
                    },
                    "meshes": {
                        "maxItemsOne": false
                    },
                    "rules": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "action": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "destinations": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "matches": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "alpn": {
                                                "maxItemsOne": false
                                            },
                                            "sni_host": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_notebooks_environment": {
                "current": "gcp:notebooks/environment:Environment",
                "majorVersion": 6,
                "fields": {
                    "container_image": {
                        "maxItemsOne": true
                    },
                    "vm_image": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_notebooks_instance": {
                "current": "gcp:notebooks/instance:Instance",
                "majorVersion": 6,
                "fields": {
                    "accelerator_config": {
                        "maxItemsOne": true
                    },
                    "container_image": {
                        "maxItemsOne": true
                    },
                    "instance_owners": {
                        "maxItemsOne": false
                    },
                    "reservation_affinity": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "values": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "service_account_scopes": {
                        "maxItemsOne": false
                    },
                    "shielded_instance_config": {
                        "maxItemsOne": true
                    },
                    "tags": {
                        "maxItemsOne": false
                    },
                    "vm_image": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_notebooks_instance_iam_binding": {
                "current": "gcp:notebooks/instanceIamBinding:InstanceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_notebooks_instance_iam_member": {
                "current": "gcp:notebooks/instanceIamMember:InstanceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_notebooks_instance_iam_policy": {
                "current": "gcp:notebooks/instanceIamPolicy:InstanceIamPolicy",
                "majorVersion": 6
            },
            "google_notebooks_location": {
                "current": "gcp:notebooks/location:Location",
                "majorVersion": 6
            },
            "google_notebooks_runtime": {
                "current": "gcp:notebooks/runtime:Runtime",
                "majorVersion": 6,
                "fields": {
                    "access_config": {
                        "maxItemsOne": true
                    },
                    "metrics": {
                        "maxItemsOne": false
                    },
                    "software_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "kernels": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "virtual_machine": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "virtual_machine_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "accelerator_config": {
                                                "maxItemsOne": true
                                            },
                                            "container_images": {
                                                "maxItemsOne": false
                                            },
                                            "data_disk": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "guest_os_features": {
                                                            "maxItemsOne": false
                                                        },
                                                        "initialize_params": {
                                                            "maxItemsOne": true
                                                        },
                                                        "licenses": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "encryption_config": {
                                                "maxItemsOne": true
                                            },
                                            "shielded_instance_config": {
                                                "maxItemsOne": true
                                            },
                                            "tags": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_notebooks_runtime_iam_binding": {
                "current": "gcp:notebooks/runtimeIamBinding:RuntimeIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_notebooks_runtime_iam_member": {
                "current": "gcp:notebooks/runtimeIamMember:RuntimeIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_notebooks_runtime_iam_policy": {
                "current": "gcp:notebooks/runtimeIamPolicy:RuntimeIamPolicy",
                "majorVersion": 6
            },
            "google_org_policy_custom_constraint": {
                "current": "gcp:orgpolicy/customConstraint:CustomConstraint",
                "majorVersion": 6,
                "fields": {
                    "method_types": {
                        "maxItemsOne": false
                    },
                    "resource_types": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_org_policy_policy": {
                "current": "gcp:orgpolicy/policy:Policy",
                "majorVersion": 6,
                "fields": {
                    "spec": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "rules": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "condition": {
                                                "maxItemsOne": true
                                            },
                                            "values": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_values": {
                                                            "maxItemsOne": false
                                                        },
                                                        "denied_values": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_organization_access_approval_settings": {
                "current": "gcp:organizations/accessApprovalSettings:AccessApprovalSettings",
                "majorVersion": 6,
                "fields": {
                    "enrolled_services": {
                        "maxItemsOne": false
                    },
                    "notification_emails": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_organization_iam_audit_config": {
                "current": "gcp:organizations/iamAuditConfig:IamAuditConfig",
                "majorVersion": 6,
                "fields": {
                    "audit_log_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "exempted_members": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_organization_iam_binding": {
                "current": "gcp:organizations/iAMBinding:IAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_organization_iam_custom_role": {
                "current": "gcp:organizations/iAMCustomRole:IAMCustomRole",
                "majorVersion": 6,
                "fields": {
                    "permissions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_organization_iam_member": {
                "current": "gcp:organizations/iAMMember:IAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_organization_iam_policy": {
                "current": "gcp:organizations/iAMPolicy:IAMPolicy",
                "majorVersion": 6
            },
            "google_organization_policy": {
                "current": "gcp:organizations/policy:Policy",
                "majorVersion": 6,
                "fields": {
                    "boolean_policy": {
                        "maxItemsOne": true
                    },
                    "list_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allow": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "deny": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "restore_policy": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_os_config_guest_policies": {
                "current": "gcp:osconfig/guestPolicies:GuestPolicies",
                "majorVersion": 6,
                "fields": {
                    "assignment": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "group_labels": {
                                    "maxItemsOne": false
                                },
                                "instance_name_prefixes": {
                                    "maxItemsOne": false
                                },
                                "instances": {
                                    "maxItemsOne": false
                                },
                                "os_types": {
                                    "maxItemsOne": false
                                },
                                "zones": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "package_repositories": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "apt": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "components": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "goo": {
                                    "maxItemsOne": true
                                },
                                "yum": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "gpg_keys": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "zypper": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "gpg_keys": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "packages": {
                        "maxItemsOne": false
                    },
                    "recipes": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "artifacts": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "gcs": {
                                                "maxItemsOne": true
                                            },
                                            "remote": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "install_steps": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "archive_extraction": {
                                                "maxItemsOne": true
                                            },
                                            "dpkg_installation": {
                                                "maxItemsOne": true
                                            },
                                            "file_copy": {
                                                "maxItemsOne": true
                                            },
                                            "file_exec": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "args": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "msi_installation": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_exit_codes": {
                                                            "maxItemsOne": false
                                                        },
                                                        "flags": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "rpm_installation": {
                                                "maxItemsOne": true
                                            },
                                            "script_run": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_exit_codes": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "update_steps": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "archive_extraction": {
                                                "maxItemsOne": true
                                            },
                                            "dpkg_installation": {
                                                "maxItemsOne": true
                                            },
                                            "file_copy": {
                                                "maxItemsOne": true
                                            },
                                            "file_exec": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_exit_codes": {
                                                            "maxItemsOne": false
                                                        },
                                                        "args": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "msi_installation": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_exit_codes": {
                                                            "maxItemsOne": false
                                                        },
                                                        "flags": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "rpm_installation": {
                                                "maxItemsOne": true
                                            },
                                            "script_run": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_exit_codes": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_os_config_os_policy_assignment": {
                "current": "gcp:osconfig/osPolicyAssignment:OsPolicyAssignment",
                "majorVersion": 6,
                "fields": {
                    "instance_filter": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "exclusion_labels": {
                                    "maxItemsOne": false
                                },
                                "inclusion_labels": {
                                    "maxItemsOne": false
                                },
                                "inventories": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "os_policies": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "resource_groups": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "inventory_filters": {
                                                "maxItemsOne": false
                                            },
                                            "resources": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "exec": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "enforce": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "args": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "file": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "gcs": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "remote": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "validate": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "args": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "file": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "gcs": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "remote": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "file": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "file": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "gcs": {
                                                                                    "maxItemsOne": true
                                                                                },
                                                                                "remote": {
                                                                                    "maxItemsOne": true
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "pkg": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "apt": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "deb": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "source": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "gcs": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "remote": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "googet": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "msi": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "properties": {
                                                                                    "maxItemsOne": false
                                                                                },
                                                                                "source": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "gcs": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "remote": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "rpm": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "source": {
                                                                                    "maxItemsOne": true,
                                                                                    "elem": {
                                                                                        "fields": {
                                                                                            "gcs": {
                                                                                                "maxItemsOne": true
                                                                                            },
                                                                                            "remote": {
                                                                                                "maxItemsOne": true
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "yum": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "zypper": {
                                                                        "maxItemsOne": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "repository": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "apt": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "components": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "goo": {
                                                                        "maxItemsOne": true
                                                                    },
                                                                    "yum": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "gpg_keys": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "zypper": {
                                                                        "maxItemsOne": true,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "gpg_keys": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "rollout": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "disruption_budget": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_os_config_patch_deployment": {
                "current": "gcp:osconfig/patchDeployment:PatchDeployment",
                "majorVersion": 6,
                "fields": {
                    "instance_filter": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "group_labels": {
                                    "maxItemsOne": false
                                },
                                "instance_name_prefixes": {
                                    "maxItemsOne": false
                                },
                                "instances": {
                                    "maxItemsOne": false
                                },
                                "zones": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "one_time_schedule": {
                        "maxItemsOne": true
                    },
                    "patch_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "apt": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "excludes": {
                                                "maxItemsOne": false
                                            },
                                            "exclusive_packages": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "goo": {
                                    "maxItemsOne": true
                                },
                                "post_step": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "linux_exec_step_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_success_codes": {
                                                            "maxItemsOne": false
                                                        },
                                                        "gcs_object": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "windows_exec_step_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_success_codes": {
                                                            "maxItemsOne": false
                                                        },
                                                        "gcs_object": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "pre_step": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "linux_exec_step_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_success_codes": {
                                                            "maxItemsOne": false
                                                        },
                                                        "gcs_object": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            },
                                            "windows_exec_step_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "allowed_success_codes": {
                                                            "maxItemsOne": false
                                                        },
                                                        "gcs_object": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "windows_update": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "classifications": {
                                                "maxItemsOne": false
                                            },
                                            "excludes": {
                                                "maxItemsOne": false
                                            },
                                            "exclusive_patches": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "yum": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "excludes": {
                                                "maxItemsOne": false
                                            },
                                            "exclusive_packages": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "zypper": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "categories": {
                                                "maxItemsOne": false
                                            },
                                            "excludes": {
                                                "maxItemsOne": false
                                            },
                                            "exclusive_patches": {
                                                "maxItemsOne": false
                                            },
                                            "severities": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "recurring_schedule": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "monthly": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "week_day_of_month": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "time_of_day": {
                                    "maxItemsOne": true
                                },
                                "time_zone": {
                                    "maxItemsOne": true
                                },
                                "weekly": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "rollout": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "disruption_budget": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_os_login_ssh_public_key": {
                "current": "gcp:oslogin/sshPublicKey:SshPublicKey",
                "majorVersion": 6
            },
            "google_privateca_ca_pool": {
                "current": "gcp:certificateauthority/caPool:CaPool",
                "majorVersion": 6,
                "fields": {
                    "issuance_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allowed_issuance_modes": {
                                    "maxItemsOne": true
                                },
                                "allowed_key_types": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "elliptic_curve": {
                                                "maxItemsOne": true
                                            },
                                            "rsa": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "baseline_values": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "additional_extensions": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "object_id": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "object_id_path": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "aia_ocsp_servers": {
                                                "maxItemsOne": false
                                            },
                                            "ca_options": {
                                                "maxItemsOne": true
                                            },
                                            "key_usage": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "base_key_usage": {
                                                            "maxItemsOne": true
                                                        },
                                                        "extended_key_usage": {
                                                            "maxItemsOne": true
                                                        },
                                                        "unknown_extended_key_usages": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "object_id_path": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "name_constraints": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "excluded_dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_ip_ranges": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_uris": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_ip_ranges": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_uris": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "policy_ids": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "object_id_path": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "identity_constraints": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "cel_expression": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "publishing_options": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_privateca_ca_pool_iam_binding": {
                "current": "gcp:certificateauthority/caPoolIamBinding:CaPoolIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_privateca_ca_pool_iam_member": {
                "current": "gcp:certificateauthority/caPoolIamMember:CaPoolIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_privateca_ca_pool_iam_policy": {
                "current": "gcp:certificateauthority/caPoolIamPolicy:CaPoolIamPolicy",
                "majorVersion": 6
            },
            "google_privateca_certificate": {
                "current": "gcp:certificateauthority/certificate:Certificate",
                "majorVersion": 6,
                "fields": {
                    "certificate_description": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "aia_issuing_certificate_urls": {
                                    "maxItemsOne": false
                                },
                                "authority_key_id": {
                                    "maxItemsOne": false
                                },
                                "cert_fingerprint": {
                                    "maxItemsOne": false
                                },
                                "config_values": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "key_usage": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "base_key_usage": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "key_usage_options": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "extended_key_usage": {
                                                            "maxItemsOne": false
                                                        },
                                                        "unknown_extended_key_usages": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "obect_id": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "object_id_path": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "crl_distribution_points": {
                                    "maxItemsOne": false
                                },
                                "public_key": {
                                    "maxItemsOne": false
                                },
                                "subject_description": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "subject": {
                                                "maxItemsOne": false
                                            },
                                            "subject_alt_name": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "custom_sans": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "obect_id": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "object_id_path": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "ip_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "uris": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "subject_key_id": {
                                    "maxItemsOne": false
                                },
                                "x509_description": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "additional_extensions": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "object_id": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "object_id_path": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "aia_ocsp_servers": {
                                                "maxItemsOne": false
                                            },
                                            "ca_options": {
                                                "maxItemsOne": false
                                            },
                                            "key_usage": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "base_key_usage": {
                                                            "maxItemsOne": false
                                                        },
                                                        "extended_key_usage": {
                                                            "maxItemsOne": false
                                                        },
                                                        "unknown_extended_key_usages": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "object_id_path": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "name_constraints": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "excluded_dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_ip_ranges": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_uris": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_ip_ranges": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_uris": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "policy_ids": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "object_id_path": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "public_key": {
                                    "maxItemsOne": true
                                },
                                "subject_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "subject": {
                                                "maxItemsOne": true
                                            },
                                            "subject_alt_name": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "ip_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "uris": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "x509_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "additional_extensions": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "object_id": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "object_id_path": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "aia_ocsp_servers": {
                                                "maxItemsOne": false
                                            },
                                            "ca_options": {
                                                "maxItemsOne": true
                                            },
                                            "key_usage": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "base_key_usage": {
                                                            "maxItemsOne": true
                                                        },
                                                        "extended_key_usage": {
                                                            "maxItemsOne": true
                                                        },
                                                        "unknown_extended_key_usages": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "object_id_path": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "name_constraints": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "excluded_dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_ip_ranges": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_uris": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_ip_ranges": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_uris": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "policy_ids": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "object_id_path": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "pem_certificate_chain": {
                        "maxItemsOne": false
                    },
                    "pem_certificates": {
                        "maxItemsOne": false
                    },
                    "revocation_details": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_privateca_certificate_authority": {
                "current": "gcp:certificateauthority/authority:Authority",
                "majorVersion": 6,
                "fields": {
                    "access_urls": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "crl_access_urls": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "subject_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "subject": {
                                                "maxItemsOne": true
                                            },
                                            "subject_alt_name": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "ip_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "uris": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "x509_config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "additional_extensions": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "object_id": {
                                                            "maxItemsOne": true,
                                                            "elem": {
                                                                "fields": {
                                                                    "object_id_path": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "aia_ocsp_servers": {
                                                "maxItemsOne": false
                                            },
                                            "ca_options": {
                                                "maxItemsOne": true
                                            },
                                            "key_usage": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "base_key_usage": {
                                                            "maxItemsOne": true
                                                        },
                                                        "extended_key_usage": {
                                                            "maxItemsOne": true
                                                        },
                                                        "unknown_extended_key_usages": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "object_id_path": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "name_constraints": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "excluded_dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_ip_ranges": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_uris": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_ip_ranges": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_uris": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "policy_ids": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "object_id_path": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "key_spec": {
                        "maxItemsOne": true
                    },
                    "pem_ca_certificates": {
                        "maxItemsOne": false
                    },
                    "subordinate_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "pem_issuer_chain": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "pem_certificates": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_privateca_certificate_template": {
                "current": "gcp:certificateauthority/certificateTemplate:CertificateTemplate",
                "majorVersion": 6,
                "fields": {
                    "identity_constraints": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "cel_expression": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "passthrough_extensions": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "additional_extensions": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "object_id_path": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "known_extensions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "predefined_values": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "additional_extensions": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "object_id": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "object_id_path": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "aia_ocsp_servers": {
                                    "maxItemsOne": false
                                },
                                "ca_options": {
                                    "maxItemsOne": true
                                },
                                "key_usage": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "base_key_usage": {
                                                "maxItemsOne": true
                                            },
                                            "extended_key_usage": {
                                                "maxItemsOne": true
                                            },
                                            "unknown_extended_key_usages": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "object_id_path": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "policy_ids": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "object_id_path": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_privateca_certificate_template_iam_binding": {
                "current": "gcp:certificateauthority/certificateTemplateIamBinding:CertificateTemplateIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_privateca_certificate_template_iam_member": {
                "current": "gcp:certificateauthority/certificateTemplateIamMember:CertificateTemplateIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_privateca_certificate_template_iam_policy": {
                "current": "gcp:certificateauthority/certificateTemplateIamPolicy:CertificateTemplateIamPolicy",
                "majorVersion": 6
            },
            "google_project": {
                "current": "gcp:organizations/project:Project",
                "majorVersion": 6
            },
            "google_project_access_approval_settings": {
                "current": "gcp:projects/accessApprovalSettings:AccessApprovalSettings",
                "majorVersion": 6,
                "fields": {
                    "enrolled_services": {
                        "maxItemsOne": false
                    },
                    "notification_emails": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_project_default_service_accounts": {
                "current": "gcp:projects/defaultServiceAccounts:DefaultServiceAccounts",
                "majorVersion": 6
            },
            "google_project_iam_audit_config": {
                "current": "gcp:projects/iAMAuditConfig:IAMAuditConfig",
                "majorVersion": 6,
                "fields": {
                    "audit_log_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "exempted_members": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_project_iam_binding": {
                "current": "gcp:projects/iAMBinding:IAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_project_iam_custom_role": {
                "current": "gcp:projects/iAMCustomRole:IAMCustomRole",
                "majorVersion": 6,
                "fields": {
                    "permissions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_project_iam_member": {
                "current": "gcp:projects/iAMMember:IAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_project_iam_policy": {
                "current": "gcp:projects/iAMPolicy:IAMPolicy",
                "majorVersion": 6
            },
            "google_project_organization_policy": {
                "current": "gcp:projects/organizationPolicy:OrganizationPolicy",
                "majorVersion": 6,
                "fields": {
                    "boolean_policy": {
                        "maxItemsOne": true
                    },
                    "list_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allow": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "deny": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "restore_policy": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_project_service": {
                "current": "gcp:projects/service:Service",
                "majorVersion": 6
            },
            "google_project_service_identity": {
                "current": "gcp:projects/serviceIdentity:ServiceIdentity",
                "majorVersion": 6
            },
            "google_project_usage_export_bucket": {
                "current": "gcp:projects/usageExportBucket:UsageExportBucket",
                "majorVersion": 6
            },
            "google_public_ca_external_account_key": {
                "current": "gcp:compute/caExternalAccountKey:CaExternalAccountKey",
                "majorVersion": 6
            },
            "google_pubsub_lite_reservation": {
                "current": "gcp:pubsub/liteReservation:LiteReservation",
                "majorVersion": 6
            },
            "google_pubsub_lite_subscription": {
                "current": "gcp:pubsub/liteSubscription:LiteSubscription",
                "majorVersion": 6,
                "fields": {
                    "delivery_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_pubsub_lite_topic": {
                "current": "gcp:pubsub/liteTopic:LiteTopic",
                "majorVersion": 6,
                "fields": {
                    "partition_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "capacity": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "reservation_config": {
                        "maxItemsOne": true
                    },
                    "retention_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_pubsub_schema": {
                "current": "gcp:pubsub/schema:Schema",
                "majorVersion": 6
            },
            "google_pubsub_subscription": {
                "current": "gcp:pubsub/subscription:Subscription",
                "majorVersion": 6,
                "fields": {
                    "bigquery_config": {
                        "maxItemsOne": true
                    },
                    "dead_letter_policy": {
                        "maxItemsOne": true
                    },
                    "expiration_policy": {
                        "maxItemsOne": true
                    },
                    "push_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "oidc_token": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "retry_policy": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_pubsub_subscription_iam_binding": {
                "current": "gcp:pubsub/subscriptionIAMBinding:SubscriptionIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_pubsub_subscription_iam_member": {
                "current": "gcp:pubsub/subscriptionIAMMember:SubscriptionIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_pubsub_subscription_iam_policy": {
                "current": "gcp:pubsub/subscriptionIAMPolicy:SubscriptionIAMPolicy",
                "majorVersion": 6
            },
            "google_pubsub_topic": {
                "current": "gcp:pubsub/topic:Topic",
                "majorVersion": 6,
                "fields": {
                    "message_storage_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allowed_persistence_regions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "schema_settings": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_pubsub_topic_iam_binding": {
                "current": "gcp:pubsub/topicIAMBinding:TopicIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_pubsub_topic_iam_member": {
                "current": "gcp:pubsub/topicIAMMember:TopicIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_pubsub_topic_iam_policy": {
                "current": "gcp:pubsub/topicIAMPolicy:TopicIAMPolicy",
                "majorVersion": 6
            },
            "google_recaptcha_enterprise_key": {
                "current": "gcp:recaptcha/enterpriseKey:EnterpriseKey",
                "majorVersion": 6,
                "fields": {
                    "android_settings": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allowed_package_names": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "ios_settings": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allowed_bundle_ids": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "testing_options": {
                        "maxItemsOne": true
                    },
                    "web_settings": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "allowed_domains": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_redis_instance": {
                "current": "gcp:redis/instance:Instance",
                "majorVersion": 6,
                "fields": {
                    "maintenance_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "weekly_maintenance_window": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "start_time": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "maintenance_schedule": {
                        "maxItemsOne": true
                    },
                    "nodes": {
                        "maxItemsOne": false
                    },
                    "persistence_config": {
                        "maxItemsOne": true
                    },
                    "server_ca_certs": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_resource_manager_lien": {
                "current": "gcp:resourcemanager/lien:Lien",
                "majorVersion": 6,
                "fields": {
                    "restrictions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_runtimeconfig_config": {
                "current": "gcp:runtimeconfig/config:Config",
                "majorVersion": 6
            },
            "google_runtimeconfig_config_iam_binding": {
                "current": "gcp:runtimeconfig/configIamBinding:ConfigIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_runtimeconfig_config_iam_member": {
                "current": "gcp:runtimeconfig/configIamMember:ConfigIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_runtimeconfig_config_iam_policy": {
                "current": "gcp:runtimeconfig/configIamPolicy:ConfigIamPolicy",
                "majorVersion": 6
            },
            "google_runtimeconfig_variable": {
                "current": "gcp:runtimeconfig/variable:Variable",
                "majorVersion": 6
            },
            "google_scc_mute_config": {
                "current": "gcp:securitycenter/muteConfig:MuteConfig",
                "majorVersion": 6
            },
            "google_scc_notification_config": {
                "current": "gcp:securitycenter/notificationConfig:NotificationConfig",
                "majorVersion": 6,
                "fields": {
                    "streaming_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_scc_source": {
                "current": "gcp:securitycenter/source:Source",
                "majorVersion": 6
            },
            "google_scc_source_iam_binding": {
                "current": "gcp:securitycenter/sourceIamBinding:SourceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_scc_source_iam_member": {
                "current": "gcp:securitycenter/sourceIamMember:SourceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_scc_source_iam_policy": {
                "current": "gcp:securitycenter/sourceIamPolicy:SourceIamPolicy",
                "majorVersion": 6
            },
            "google_secret_manager_secret": {
                "current": "gcp:secretmanager/secret:Secret",
                "majorVersion": 6,
                "fields": {
                    "replication": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "user_managed": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "replicas": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "customer_managed_encryption": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "rotation": {
                        "maxItemsOne": true
                    },
                    "topics": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_secret_manager_secret_iam_binding": {
                "current": "gcp:secretmanager/secretIamBinding:SecretIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_secret_manager_secret_iam_member": {
                "current": "gcp:secretmanager/secretIamMember:SecretIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_secret_manager_secret_iam_policy": {
                "current": "gcp:secretmanager/secretIamPolicy:SecretIamPolicy",
                "majorVersion": 6
            },
            "google_secret_manager_secret_version": {
                "current": "gcp:secretmanager/secretVersion:SecretVersion",
                "majorVersion": 6
            },
            "google_security_scanner_scan_config": {
                "current": "gcp:compute/securityScanConfig:SecurityScanConfig",
                "majorVersion": 6,
                "fields": {
                    "authentication": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "custom_account": {
                                    "maxItemsOne": true
                                },
                                "google_account": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "blacklist_patterns": {
                        "maxItemsOne": false
                    },
                    "schedule": {
                        "maxItemsOne": true
                    },
                    "starting_urls": {
                        "maxItemsOne": false
                    },
                    "target_platforms": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_service_account": {
                "current": "gcp:serviceAccount/account:Account",
                "majorVersion": 6
            },
            "google_service_account_iam_binding": {
                "current": "gcp:serviceAccount/iAMBinding:IAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_service_account_iam_member": {
                "current": "gcp:serviceAccount/iAMMember:IAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_service_account_iam_policy": {
                "current": "gcp:serviceAccount/iAMPolicy:IAMPolicy",
                "majorVersion": 6
            },
            "google_service_account_key": {
                "current": "gcp:serviceAccount/key:Key",
                "majorVersion": 6
            },
            "google_service_directory_endpoint": {
                "current": "gcp:servicedirectory/endpoint:Endpoint",
                "majorVersion": 6
            },
            "google_service_directory_namespace": {
                "current": "gcp:servicedirectory/namespace:Namespace",
                "majorVersion": 6
            },
            "google_service_directory_namespace_iam_binding": {
                "current": "gcp:servicedirectory/namespaceIamBinding:NamespaceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_service_directory_namespace_iam_member": {
                "current": "gcp:servicedirectory/namespaceIamMember:NamespaceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_service_directory_namespace_iam_policy": {
                "current": "gcp:servicedirectory/namespaceIamPolicy:NamespaceIamPolicy",
                "majorVersion": 6
            },
            "google_service_directory_service": {
                "current": "gcp:servicedirectory/service:Service",
                "majorVersion": 6
            },
            "google_service_directory_service_iam_binding": {
                "current": "gcp:servicedirectory/serviceIamBinding:ServiceIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_service_directory_service_iam_member": {
                "current": "gcp:servicedirectory/serviceIamMember:ServiceIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_service_directory_service_iam_policy": {
                "current": "gcp:servicedirectory/serviceIamPolicy:ServiceIamPolicy",
                "majorVersion": 6
            },
            "google_service_networking_connection": {
                "current": "gcp:servicenetworking/connection:Connection",
                "majorVersion": 6,
                "fields": {
                    "reserved_peering_ranges": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_service_networking_peered_dns_domain": {
                "current": "gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain",
                "majorVersion": 6
            },
            "google_service_usage_consumer_quota_override": {
                "current": "gcp:serviceusage/consumerQuotaOverride:ConsumerQuotaOverride",
                "majorVersion": 6
            },
            "google_sourcerepo_repository": {
                "current": "gcp:sourcerepo/repository:Repository",
                "majorVersion": 6,
                "fields": {
                    "pubsub_configs": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_sourcerepo_repository_iam_binding": {
                "current": "gcp:sourcerepo/repositoryIamBinding:RepositoryIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_sourcerepo_repository_iam_member": {
                "current": "gcp:sourcerepo/repositoryIamMember:RepositoryIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_sourcerepo_repository_iam_policy": {
                "current": "gcp:sourcerepo/repositoryIamPolicy:RepositoryIamPolicy",
                "majorVersion": 6
            },
            "google_spanner_database": {
                "current": "gcp:spanner/database:Database",
                "majorVersion": 6,
                "fields": {
                    "ddl": {
                        "maxItemsOne": false
                    },
                    "encryption_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_spanner_database_iam_binding": {
                "current": "gcp:spanner/databaseIAMBinding:DatabaseIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_spanner_database_iam_member": {
                "current": "gcp:spanner/databaseIAMMember:DatabaseIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_spanner_database_iam_policy": {
                "current": "gcp:spanner/databaseIAMPolicy:DatabaseIAMPolicy",
                "majorVersion": 6
            },
            "google_spanner_instance": {
                "current": "gcp:spanner/instance:Instance",
                "majorVersion": 6
            },
            "google_spanner_instance_iam_binding": {
                "current": "gcp:spanner/instanceIAMBinding:InstanceIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_spanner_instance_iam_member": {
                "current": "gcp:spanner/instanceIAMMember:InstanceIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_spanner_instance_iam_policy": {
                "current": "gcp:spanner/instanceIAMPolicy:InstanceIAMPolicy",
                "majorVersion": 6
            },
            "google_sql_database": {
                "current": "gcp:sql/database:Database",
                "majorVersion": 6
            },
            "google_sql_database_instance": {
                "current": "gcp:sql/databaseInstance:DatabaseInstance",
                "majorVersion": 6,
                "fields": {
                    "available_maintenance_versions": {
                        "maxItemsOne": false
                    },
                    "clone": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "database_names": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "ip_address": {
                        "maxItemsOne": false
                    },
                    "replica_configuration": {
                        "maxItemsOne": true
                    },
                    "restore_backup_context": {
                        "maxItemsOne": true
                    },
                    "server_ca_cert": {
                        "maxItemsOne": false
                    },
                    "settings": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "active_directory_config": {
                                    "maxItemsOne": true
                                },
                                "advanced_machine_features": {
                                    "maxItemsOne": true
                                },
                                "backup_configuration": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "backup_retention_settings": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "data_cache_config": {
                                    "maxItemsOne": true
                                },
                                "database_flags": {
                                    "maxItemsOne": false
                                },
                                "deny_maintenance_period": {
                                    "maxItemsOne": true
                                },
                                "insights_config": {
                                    "maxItemsOne": true
                                },
                                "ip_configuration": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "authorized_networks": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "location_preference": {
                                    "maxItemsOne": true
                                },
                                "maintenance_window": {
                                    "maxItemsOne": true
                                },
                                "password_validation_policy": {
                                    "maxItemsOne": true
                                },
                                "sql_server_audit_config": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_sql_source_representation_instance": {
                "current": "gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance",
                "majorVersion": 6
            },
            "google_sql_ssl_cert": {
                "current": "gcp:sql/sslCert:SslCert",
                "majorVersion": 6
            },
            "google_sql_user": {
                "current": "gcp:sql/user:User",
                "majorVersion": 6,
                "fields": {
                    "password_policy": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "status": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "sql_server_user_details": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "server_roles": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_storage_bucket": {
                "current": "gcp:storage/bucket:Bucket",
                "majorVersion": 6,
                "fields": {
                    "autoclass": {
                        "maxItemsOne": true
                    },
                    "cors": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "method": {
                                    "maxItemsOne": false
                                },
                                "origin": {
                                    "maxItemsOne": false
                                },
                                "response_header": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "custom_placement_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "data_locations": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "encryption": {
                        "maxItemsOne": true
                    },
                    "lifecycle_rule": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "action": {
                                    "maxItemsOne": true
                                },
                                "condition": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "matches_prefix": {
                                                "maxItemsOne": false
                                            },
                                            "matches_storage_class": {
                                                "maxItemsOne": false
                                            },
                                            "matches_suffix": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "logging": {
                        "maxItemsOne": true
                    },
                    "retention_policy": {
                        "maxItemsOne": true
                    },
                    "versioning": {
                        "maxItemsOne": true
                    },
                    "website": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_storage_bucket_access_control": {
                "current": "gcp:storage/bucketAccessControl:BucketAccessControl",
                "majorVersion": 6
            },
            "google_storage_bucket_acl": {
                "current": "gcp:storage/bucketACL:BucketACL",
                "majorVersion": 6,
                "fields": {
                    "role_entity": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_storage_bucket_iam_binding": {
                "current": "gcp:storage/bucketIAMBinding:BucketIAMBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_storage_bucket_iam_member": {
                "current": "gcp:storage/bucketIAMMember:BucketIAMMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_storage_bucket_iam_policy": {
                "current": "gcp:storage/bucketIAMPolicy:BucketIAMPolicy",
                "majorVersion": 6
            },
            "google_storage_bucket_object": {
                "current": "gcp:storage/bucketObject:BucketObject",
                "majorVersion": 6,
                "fields": {
                    "customer_encryption": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_storage_default_object_access_control": {
                "current": "gcp:storage/defaultObjectAccessControl:DefaultObjectAccessControl",
                "majorVersion": 6,
                "fields": {
                    "project_team": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_storage_default_object_acl": {
                "current": "gcp:storage/defaultObjectACL:DefaultObjectACL",
                "majorVersion": 6,
                "fields": {
                    "role_entity": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_storage_hmac_key": {
                "current": "gcp:storage/hmacKey:HmacKey",
                "majorVersion": 6
            },
            "google_storage_notification": {
                "current": "gcp:storage/notification:Notification",
                "majorVersion": 6,
                "fields": {
                    "event_types": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_storage_object_access_control": {
                "current": "gcp:storage/objectAccessControl:ObjectAccessControl",
                "majorVersion": 6,
                "fields": {
                    "project_team": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_storage_object_acl": {
                "current": "gcp:storage/objectACL:ObjectACL",
                "majorVersion": 6,
                "fields": {
                    "role_entity": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_storage_transfer_agent_pool": {
                "current": "gcp:storage/transferAgentPool:TransferAgentPool",
                "majorVersion": 6,
                "fields": {
                    "bandwidth_limit": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_storage_transfer_job": {
                "current": "gcp:storage/transferJob:TransferJob",
                "majorVersion": 6,
                "fields": {
                    "notification_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "event_types": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "schedule": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "schedule_end_date": {
                                    "maxItemsOne": true
                                },
                                "schedule_start_date": {
                                    "maxItemsOne": true
                                },
                                "start_time_of_day": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    },
                    "transfer_spec": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "aws_s3_data_source": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "aws_access_key": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "azure_blob_storage_data_source": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "azure_credentials": {
                                                "maxItemsOne": true
                                            }
                                        }
                                    }
                                },
                                "gcs_data_sink": {
                                    "maxItemsOne": true
                                },
                                "gcs_data_source": {
                                    "maxItemsOne": true
                                },
                                "http_data_source": {
                                    "maxItemsOne": true
                                },
                                "object_conditions": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "exclude_prefixes": {
                                                "maxItemsOne": false
                                            },
                                            "include_prefixes": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "posix_data_sink": {
                                    "maxItemsOne": true
                                },
                                "posix_data_source": {
                                    "maxItemsOne": true
                                },
                                "transfer_options": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_tags_location_tag_binding": {
                "current": "gcp:tags/locationTagBinding:LocationTagBinding",
                "majorVersion": 6
            },
            "google_tags_tag_binding": {
                "current": "gcp:tags/tagBinding:TagBinding",
                "majorVersion": 6
            },
            "google_tags_tag_key": {
                "current": "gcp:tags/tagKey:TagKey",
                "majorVersion": 6
            },
            "google_tags_tag_key_iam_binding": {
                "current": "gcp:tags/tagKeyIamBinding:TagKeyIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_tags_tag_key_iam_member": {
                "current": "gcp:tags/tagKeyIamMember:TagKeyIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_tags_tag_key_iam_policy": {
                "current": "gcp:tags/tagKeyIamPolicy:TagKeyIamPolicy",
                "majorVersion": 6
            },
            "google_tags_tag_value": {
                "current": "gcp:tags/tagValue:TagValue",
                "majorVersion": 6
            },
            "google_tags_tag_value_iam_binding": {
                "current": "gcp:tags/tagValueIamBinding:TagValueIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_tags_tag_value_iam_member": {
                "current": "gcp:tags/tagValueIamMember:TagValueIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_tags_tag_value_iam_policy": {
                "current": "gcp:tags/tagValueIamPolicy:TagValueIamPolicy",
                "majorVersion": 6
            },
            "google_tpu_node": {
                "current": "gcp:tpu/node:Node",
                "majorVersion": 6,
                "fields": {
                    "network_endpoints": {
                        "maxItemsOne": false
                    },
                    "scheduling_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_vertex_ai_dataset": {
                "current": "gcp:vertex/aiDataset:AiDataset",
                "majorVersion": 6,
                "fields": {
                    "encryption_spec": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_vertex_ai_endpoint": {
                "current": "gcp:vertex/aiEndpoint:AiEndpoint",
                "majorVersion": 6,
                "fields": {
                    "deployed_models": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "automatic_resources": {
                                    "maxItemsOne": false
                                },
                                "dedicated_resources": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "autoscaling_metric_specs": {
                                                "maxItemsOne": false
                                            },
                                            "machine_spec": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "private_endpoints": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "encryption_spec": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_vertex_ai_featurestore": {
                "current": "gcp:vertex/aiFeatureStore:AiFeatureStore",
                "majorVersion": 6,
                "fields": {
                    "encryption_spec": {
                        "maxItemsOne": true
                    },
                    "online_serving_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "scaling": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_vertex_ai_featurestore_entitytype": {
                "current": "gcp:vertex/aiFeatureStoreEntityType:AiFeatureStoreEntityType",
                "majorVersion": 6,
                "fields": {
                    "monitoring_config": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "categorical_threshold_config": {
                                    "maxItemsOne": true
                                },
                                "import_features_analysis": {
                                    "maxItemsOne": true
                                },
                                "numerical_threshold_config": {
                                    "maxItemsOne": true
                                },
                                "snapshot_analysis": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_vertex_ai_featurestore_entitytype_feature": {
                "current": "gcp:vertex/aiFeatureStoreEntityTypeFeature:AiFeatureStoreEntityTypeFeature",
                "majorVersion": 6
            },
            "google_vertex_ai_featurestore_entitytype_iam_binding": {
                "current": "gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_vertex_ai_featurestore_entitytype_iam_member": {
                "current": "gcp:vertex/aiFeatureStoreEntityTypeIamMember:AiFeatureStoreEntityTypeIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_vertex_ai_featurestore_entitytype_iam_policy": {
                "current": "gcp:vertex/aiFeatureStoreEntityTypeIamPolicy:AiFeatureStoreEntityTypeIamPolicy",
                "majorVersion": 6
            },
            "google_vertex_ai_featurestore_iam_binding": {
                "current": "gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_vertex_ai_featurestore_iam_member": {
                "current": "gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_vertex_ai_featurestore_iam_policy": {
                "current": "gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy",
                "majorVersion": 6
            },
            "google_vertex_ai_index": {
                "current": "gcp:vertex/aiIndex:AiIndex",
                "majorVersion": 6,
                "fields": {
                    "deployed_indexes": {
                        "maxItemsOne": false
                    },
                    "index_stats": {
                        "maxItemsOne": false
                    },
                    "metadata": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "config": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "algorithm_config": {
                                                "maxItemsOne": true,
                                                "elem": {
                                                    "fields": {
                                                        "brute_force_config": {
                                                            "maxItemsOne": true
                                                        },
                                                        "tree_ah_config": {
                                                            "maxItemsOne": true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_vertex_ai_index_endpoint": {
                "current": "gcp:vertex/aiIndexEndpoint:AiIndexEndpoint",
                "majorVersion": 6
            },
            "google_vertex_ai_metadata_store": {
                "current": "gcp:vertex/aiMetadataStore:AiMetadataStore",
                "majorVersion": 6,
                "fields": {
                    "encryption_spec": {
                        "maxItemsOne": true
                    },
                    "state": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_vertex_ai_tensorboard": {
                "current": "gcp:vertex/aiTensorboard:AiTensorboard",
                "majorVersion": 6,
                "fields": {
                    "encryption_spec": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_vmwareengine_cluster": {
                "current": "gcp:vmwareengine/cluster:Cluster",
                "majorVersion": 6,
                "fields": {
                    "node_type_configs": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_vmwareengine_network": {
                "current": "gcp:vmwareengine/network:Network",
                "majorVersion": 6,
                "fields": {
                    "vpc_networks": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_vmwareengine_private_cloud": {
                "current": "gcp:vmwareengine/privateCloud:PrivateCloud",
                "majorVersion": 6,
                "fields": {
                    "hcx": {
                        "maxItemsOne": false
                    },
                    "management_cluster": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "node_type_configs": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_config": {
                        "maxItemsOne": true
                    },
                    "nsx": {
                        "maxItemsOne": false
                    },
                    "vcenter": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_vpc_access_connector": {
                "current": "gcp:vpcaccess/connector:Connector",
                "majorVersion": 6,
                "fields": {
                    "connected_projects": {
                        "maxItemsOne": false
                    },
                    "subnet": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_workflows_workflow": {
                "current": "gcp:workflows/workflow:Workflow",
                "majorVersion": 6
            },
            "google_workstations_workstation": {
                "current": "gcp:workstations/workstation:Workstation",
                "majorVersion": 6
            },
            "google_workstations_workstation_cluster": {
                "current": "gcp:workstations/workstationCluster:WorkstationCluster",
                "majorVersion": 6,
                "fields": {
                    "conditions": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "details": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "private_cluster_config": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_workstations_workstation_config": {
                "current": "gcp:workstations/workstationConfig:WorkstationConfig",
                "majorVersion": 6,
                "fields": {
                    "conditions": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "details": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "container": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "args": {
                                    "maxItemsOne": false
                                },
                                "command": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "encryption_key": {
                        "maxItemsOne": true
                    },
                    "host": {
                        "maxItemsOne": true,
                        "elem": {
                            "fields": {
                                "gce_instance": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "confidential_instance_config": {
                                                "maxItemsOne": true
                                            },
                                            "shielded_instance_config": {
                                                "maxItemsOne": true
                                            },
                                            "tags": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "persistent_directories": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "gce_pd": {
                                    "maxItemsOne": true
                                }
                            }
                        }
                    }
                }
            },
            "google_workstations_workstation_config_iam_binding": {
                "current": "gcp:workstations/workstationConfigIamBinding:WorkstationConfigIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_workstations_workstation_config_iam_member": {
                "current": "gcp:workstations/workstationConfigIamMember:WorkstationConfigIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_workstations_workstation_config_iam_policy": {
                "current": "gcp:workstations/workstationConfigIamPolicy:WorkstationConfigIamPolicy",
                "majorVersion": 6
            },
            "google_workstations_workstation_iam_binding": {
                "current": "gcp:workstations/workstationIamBinding:WorkstationIamBinding",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    },
                    "members": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_workstations_workstation_iam_member": {
                "current": "gcp:workstations/workstationIamMember:WorkstationIamMember",
                "majorVersion": 6,
                "fields": {
                    "condition": {
                        "maxItemsOne": true
                    }
                }
            },
            "google_workstations_workstation_iam_policy": {
                "current": "gcp:workstations/workstationIamPolicy:WorkstationIamPolicy",
                "majorVersion": 6
            }
        },
        "datasources": {
            "google_access_approval_folder_service_account": {
                "current": "gcp:accessapproval/getFolderServiceAccount:getFolderServiceAccount",
                "majorVersion": 6
            },
            "google_access_approval_organization_service_account": {
                "current": "gcp:accessapproval/getOrganizationServiceAccount:getOrganizationServiceAccount",
                "majorVersion": 6
            },
            "google_access_approval_project_service_account": {
                "current": "gcp:accessapproval/getProjectServiceAccount:getProjectServiceAccount",
                "majorVersion": 6
            },
            "google_access_context_manager_access_policy_iam_policy": {
                "current": "gcp:accesscontextmanager/getAccessPolicyIamPolicy:getAccessPolicyIamPolicy",
                "majorVersion": 6
            },
            "google_active_folder": {
                "current": "gcp:organizations/getActiveFolder:getActiveFolder",
                "majorVersion": 6
            },
            "google_alloydb_locations": {
                "current": "gcp:alloydb/getLocations:getLocations",
                "majorVersion": 6,
                "fields": {
                    "locations": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_alloydb_supported_database_flags": {
                "current": "gcp:alloydb/getSupportedDatabaseFlags:getSupportedDatabaseFlags",
                "majorVersion": 6,
                "fields": {
                    "supported_database_flags": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "integer_restrictions": {
                                    "maxItemsOne": true
                                },
                                "string_restrictions": {
                                    "maxItemsOne": true,
                                    "elem": {
                                        "fields": {
                                            "allowed_values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "supported_db_versions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_api_gateway_api_config_iam_policy": {
                "current": "gcp:apigateway/getApiConfigIamPolicy:getApiConfigIamPolicy",
                "majorVersion": 6
            },
            "google_api_gateway_api_iam_policy": {
                "current": "gcp:apigateway/getApiIamPolicy:getApiIamPolicy",
                "majorVersion": 6
            },
            "google_api_gateway_gateway_iam_policy": {
                "current": "gcp:apigateway/getGatewayIamPolicy:getGatewayIamPolicy",
                "majorVersion": 6
            },
            "google_apigee_environment_iam_policy": {
                "current": "gcp:apigee/getEnvironmentIamPolicy:getEnvironmentIamPolicy",
                "majorVersion": 6
            },
            "google_app_engine_default_service_account": {
                "current": "gcp:appengine/getDefaultServiceAccount:getDefaultServiceAccount",
                "majorVersion": 6
            },
            "google_artifact_registry_repository": {
                "current": "gcp:artifactregistry/getRepository:getRepository",
                "majorVersion": 6,
                "fields": {
                    "docker_config": {
                        "maxItemsOne": false
                    },
                    "maven_config": {
                        "maxItemsOne": false
                    },
                    "remote_repository_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "docker_repository": {
                                    "maxItemsOne": false
                                },
                                "maven_repository": {
                                    "maxItemsOne": false
                                },
                                "npm_repository": {
                                    "maxItemsOne": false
                                },
                                "python_repository": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "virtual_repository_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "upstream_policies": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_artifact_registry_repository_iam_policy": {
                "current": "gcp:artifactregistry/getRepositoryIamPolicy:getRepositoryIamPolicy",
                "majorVersion": 6
            },
            "google_beyondcorp_app_connection": {
                "current": "gcp:beyondcorp/getAppConnection:getAppConnection",
                "majorVersion": 6,
                "fields": {
                    "application_endpoint": {
                        "maxItemsOne": false
                    },
                    "connectors": {
                        "maxItemsOne": false
                    },
                    "gateway": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_beyondcorp_app_connector": {
                "current": "gcp:beyondcorp/getAppConnector:getAppConnector",
                "majorVersion": 6,
                "fields": {
                    "principal_info": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "service_account": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_beyondcorp_app_gateway": {
                "current": "gcp:beyondcorp/getAppGateway:getAppGateway",
                "majorVersion": 6,
                "fields": {
                    "allocated_connections": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_bigquery_analytics_hub_data_exchange_iam_policy": {
                "current": "gcp:bigqueryanalyticshub/getDataExchangeIamPolicy:getDataExchangeIamPolicy",
                "majorVersion": 6
            },
            "google_bigquery_analytics_hub_listing_iam_policy": {
                "current": "gcp:bigqueryanalyticshub/getListingIamPolicy:getListingIamPolicy",
                "majorVersion": 6
            },
            "google_bigquery_connection_iam_policy": {
                "current": "gcp:bigquery/getConnectionIamPolicy:getConnectionIamPolicy",
                "majorVersion": 6
            },
            "google_bigquery_datapolicy_data_policy_iam_policy": {
                "current": "gcp:bigquerydatapolicy/getIamPolicy:getIamPolicy",
                "majorVersion": 6
            },
            "google_bigquery_dataset_iam_policy": {
                "current": "gcp:bigquery/getDatasetIamPolicy:getDatasetIamPolicy",
                "majorVersion": 6
            },
            "google_bigquery_default_service_account": {
                "current": "gcp:bigquery/getDefaultServiceAccount:getDefaultServiceAccount",
                "majorVersion": 6
            },
            "google_bigquery_table_iam_policy": {
                "current": "gcp:bigquery/getTableIamPolicy:getTableIamPolicy",
                "majorVersion": 6
            },
            "google_bigtable_instance_iam_policy": {
                "current": "gcp:bigtable/getInstanceIamPolicy:getInstanceIamPolicy",
                "majorVersion": 6
            },
            "google_bigtable_table_iam_policy": {
                "current": "gcp:bigtable/getTableIamPolicy:getTableIamPolicy",
                "majorVersion": 6
            },
            "google_billing_account": {
                "current": "gcp:organizations/getBillingAccount:getBillingAccount",
                "majorVersion": 6,
                "fields": {
                    "project_ids": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_billing_account_iam_policy": {
                "current": "gcp:billing/getAccountIamPolicy:getAccountIamPolicy",
                "majorVersion": 6
            },
            "google_binary_authorization_attestor_iam_policy": {
                "current": "gcp:binaryauthorization/getAttestorIamPolicy:getAttestorIamPolicy",
                "majorVersion": 6
            },
            "google_client_config": {
                "current": "gcp:organizations/getClientConfig:getClientConfig",
                "majorVersion": 6
            },
            "google_client_openid_userinfo": {
                "current": "gcp:organizations/getClientOpenIdUserInfo:getClientOpenIdUserInfo",
                "majorVersion": 6
            },
            "google_cloud_asset_resources_search_all": {
                "current": "gcp:cloudasset/getResourcesSearchAll:getResourcesSearchAll",
                "majorVersion": 6,
                "fields": {
                    "asset_types": {
                        "maxItemsOne": false
                    },
                    "results": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "additional_attributes": {
                                    "maxItemsOne": false
                                },
                                "network_tags": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_cloud_identity_group_memberships": {
                "current": "gcp:cloudidentity/getGroupMemberships:getGroupMemberships",
                "majorVersion": 6,
                "fields": {
                    "memberships": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "member_key": {
                                    "maxItemsOne": false
                                },
                                "preferred_member_key": {
                                    "maxItemsOne": false
                                },
                                "roles": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_cloud_identity_groups": {
                "current": "gcp:cloudidentity/getGroups:getGroups",
                "majorVersion": 6,
                "fields": {
                    "groups": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "group_key": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_cloud_run_locations": {
                "current": "gcp:cloudrun/getLocations:getLocations",
                "majorVersion": 6,
                "fields": {
                    "locations": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloud_run_service": {
                "current": "gcp:cloudrun/getService:getService",
                "majorVersion": 6,
                "fields": {
                    "metadata": {
                        "maxItemsOne": false
                    },
                    "status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "conditions": {
                                    "maxItemsOne": false
                                },
                                "traffic": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "template": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "metadata": {
                                    "maxItemsOne": false
                                },
                                "spec": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "containers": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "args": {
                                                            "maxItemsOne": false
                                                        },
                                                        "command": {
                                                            "maxItemsOne": false
                                                        },
                                                        "env": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "value_from": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "secret_key_ref": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "env_from": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "config_map_ref": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "local_object_reference": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "secret_ref": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "local_object_reference": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "liveness_probe": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "grpc": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "http_get": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "http_headers": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "ports": {
                                                            "maxItemsOne": false
                                                        },
                                                        "resources": {
                                                            "maxItemsOne": false
                                                        },
                                                        "startup_probe": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "grpc": {
                                                                        "maxItemsOne": false
                                                                    },
                                                                    "http_get": {
                                                                        "maxItemsOne": false,
                                                                        "elem": {
                                                                            "fields": {
                                                                                "http_headers": {
                                                                                    "maxItemsOne": false
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "tcp_socket": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "volume_mounts": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "volumes": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "empty_dir": {
                                                            "maxItemsOne": false
                                                        },
                                                        "secret": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "items": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "traffic": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloud_run_service_iam_policy": {
                "current": "gcp:cloudrun/getServiceIamPolicy:getServiceIamPolicy",
                "majorVersion": 6
            },
            "google_cloud_run_v2_job_iam_policy": {
                "current": "gcp:cloudrunv2/getJobIamPolicy:getJobIamPolicy",
                "majorVersion": 6
            },
            "google_cloud_run_v2_service_iam_policy": {
                "current": "gcp:cloudrunv2/getServiceIamPolicy:getServiceIamPolicy",
                "majorVersion": 6
            },
            "google_cloud_tasks_queue_iam_policy": {
                "current": "gcp:cloudtasks/getQueueIamPolicy:getQueueIamPolicy",
                "majorVersion": 6
            },
            "google_cloudbuild_trigger": {
                "current": "gcp:cloudbuild/getTrigger:getTrigger",
                "majorVersion": 6,
                "fields": {
                    "approval_config": {
                        "maxItemsOne": false
                    },
                    "bitbucket_server_trigger_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "pull_request": {
                                    "maxItemsOne": false
                                },
                                "push": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "build": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "artifacts": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "images": {
                                                "maxItemsOne": false
                                            },
                                            "objects": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "paths": {
                                                            "maxItemsOne": false
                                                        },
                                                        "timing": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "available_secrets": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "secret_manager": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "images": {
                                    "maxItemsOne": false
                                },
                                "options": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "env": {
                                                "maxItemsOne": false
                                            },
                                            "secret_env": {
                                                "maxItemsOne": false
                                            },
                                            "source_provenance_hash": {
                                                "maxItemsOne": false
                                            },
                                            "volumes": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "secret": {
                                    "maxItemsOne": false
                                },
                                "source": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "repo_source": {
                                                "maxItemsOne": false
                                            },
                                            "storage_source": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "step": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "allow_exit_codes": {
                                                "maxItemsOne": false
                                            },
                                            "args": {
                                                "maxItemsOne": false
                                            },
                                            "env": {
                                                "maxItemsOne": false
                                            },
                                            "secret_env": {
                                                "maxItemsOne": false
                                            },
                                            "volumes": {
                                                "maxItemsOne": false
                                            },
                                            "wait_for": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "tags": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "git_file_source": {
                        "maxItemsOne": false
                    },
                    "github": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "pull_request": {
                                    "maxItemsOne": false
                                },
                                "push": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "ignored_files": {
                        "maxItemsOne": false
                    },
                    "included_files": {
                        "maxItemsOne": false
                    },
                    "pubsub_config": {
                        "maxItemsOne": false
                    },
                    "repository_event_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "pull_request": {
                                    "maxItemsOne": false
                                },
                                "push": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "source_to_build": {
                        "maxItemsOne": false
                    },
                    "tags": {
                        "maxItemsOne": false
                    },
                    "trigger_template": {
                        "maxItemsOne": false
                    },
                    "webhook_config": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloudbuildv2_connection_iam_policy": {
                "current": "gcp:cloudbuildv2/getConnectionIamPolicy:getConnectionIamPolicy",
                "majorVersion": 6
            },
            "google_cloudfunctions2_function": {
                "current": "gcp:cloudfunctionsv2/getFunction:getFunction",
                "majorVersion": 6,
                "fields": {
                    "build_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "source": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "repo_source": {
                                                "maxItemsOne": false
                                            },
                                            "storage_source": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "event_trigger": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "event_filters": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "service_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "secret_environment_variables": {
                                    "maxItemsOne": false
                                },
                                "secret_volumes": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "versions": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_cloudfunctions2_function_iam_policy": {
                "current": "gcp:cloudfunctionsv2/getFunctionIamPolicy:getFunctionIamPolicy",
                "majorVersion": 6
            },
            "google_cloudfunctions_function": {
                "current": "gcp:cloudfunctions/getFunction:getFunction",
                "majorVersion": 6,
                "fields": {
                    "event_trigger": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "failure_policy": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "secret_environment_variables": {
                        "maxItemsOne": false
                    },
                    "secret_volumes": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "versions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "source_repository": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_cloudfunctions_function_iam_policy": {
                "current": "gcp:cloudfunctions/getFunctionIamPolicy:getFunctionIamPolicy",
                "majorVersion": 6
            },
            "google_cloudiot_registry_iam_policy": {
                "current": "gcp:iot/getRegistryIamPolicy:getRegistryIamPolicy",
                "majorVersion": 6
            },
            "google_composer_environment": {
                "current": "gcp:composer/getEnvironment:getEnvironment",
                "majorVersion": 6,
                "fields": {
                    "config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "database_config": {
                                    "maxItemsOne": false
                                },
                                "encryption_config": {
                                    "maxItemsOne": false
                                },
                                "maintenance_window": {
                                    "maxItemsOne": false
                                },
                                "master_authorized_networks_config": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "cidr_blocks": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "node_config": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ip_allocation_policy": {
                                                "maxItemsOne": false
                                            },
                                            "oauth_scopes": {
                                                "maxItemsOne": false
                                            },
                                            "tags": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "private_environment_config": {
                                    "maxItemsOne": false
                                },
                                "recovery_config": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "scheduled_snapshots_config": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "software_config": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "cloud_data_lineage_integration": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "web_server_config": {
                                    "maxItemsOne": false
                                },
                                "web_server_network_access_control": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "allowed_ip_range": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "workloads_config": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "scheduler": {
                                                "maxItemsOne": false
                                            },
                                            "triggerer": {
                                                "maxItemsOne": false
                                            },
                                            "web_server": {
                                                "maxItemsOne": false
                                            },
                                            "worker": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_composer_image_versions": {
                "current": "gcp:composer/getImageVersions:getImageVersions",
                "majorVersion": 6,
                "fields": {
                    "image_versions": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "supported_python_versions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_address": {
                "current": "gcp:compute/getAddress:getAddress",
                "majorVersion": 6
            },
            "google_compute_addresses": {
                "current": "gcp:compute/getAddresses:getAddresses",
                "majorVersion": 6,
                "fields": {
                    "addresses": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_backend_bucket": {
                "current": "gcp:compute/getBackendBucket:getBackendBucket",
                "majorVersion": 6,
                "fields": {
                    "cdn_policy": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "bypass_cache_on_request_headers": {
                                    "maxItemsOne": false
                                },
                                "cache_key_policy": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "include_http_headers": {
                                                "maxItemsOne": false
                                            },
                                            "query_string_whitelist": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "negative_caching_policy": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "custom_response_headers": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_backend_bucket_iam_policy": {
                "current": "gcp:compute/getBackendBucketIamPolicy:getBackendBucketIamPolicy",
                "majorVersion": 6
            },
            "google_compute_backend_service": {
                "current": "gcp:compute/getBackendService:getBackendService",
                "majorVersion": 6,
                "fields": {
                    "backend": {
                        "maxItemsOne": false
                    },
                    "cdn_policy": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "bypass_cache_on_request_headers": {
                                    "maxItemsOne": false
                                },
                                "cache_key_policy": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "include_http_headers": {
                                                "maxItemsOne": false
                                            },
                                            "include_named_cookies": {
                                                "maxItemsOne": false
                                            },
                                            "query_string_blacklist": {
                                                "maxItemsOne": false
                                            },
                                            "query_string_whitelist": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "negative_caching_policy": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "circuit_breakers": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "connect_timeout": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "consistent_hash": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "http_cookie": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "ttl": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "custom_request_headers": {
                        "maxItemsOne": false
                    },
                    "custom_response_headers": {
                        "maxItemsOne": false
                    },
                    "health_checks": {
                        "maxItemsOne": false
                    },
                    "iap": {
                        "maxItemsOne": false
                    },
                    "locality_lb_policies": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "custom_policy": {
                                    "maxItemsOne": false
                                },
                                "policy": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "log_config": {
                        "maxItemsOne": false
                    },
                    "outlier_detection": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "base_ejection_time": {
                                    "maxItemsOne": false
                                },
                                "interval": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "security_settings": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "subject_alt_names": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_backend_service_iam_policy": {
                "current": "gcp:compute/getBackendServiceIamPolicy:getBackendServiceIamPolicy",
                "majorVersion": 6
            },
            "google_compute_default_service_account": {
                "current": "gcp:compute/getDefaultServiceAccount:getDefaultServiceAccount",
                "majorVersion": 6
            },
            "google_compute_disk": {
                "current": "gcp:compute/getDisk:getDisk",
                "majorVersion": 6,
                "fields": {
                    "async_primary_disk": {
                        "maxItemsOne": false
                    },
                    "disk_encryption_key": {
                        "maxItemsOne": false
                    },
                    "guest_os_features": {
                        "maxItemsOne": false
                    },
                    "licenses": {
                        "maxItemsOne": false
                    },
                    "resource_policies": {
                        "maxItemsOne": false
                    },
                    "source_image_encryption_key": {
                        "maxItemsOne": false
                    },
                    "source_snapshot_encryption_key": {
                        "maxItemsOne": false
                    },
                    "users": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_disk_iam_policy": {
                "current": "gcp:compute/getDiskIamPolicy:getDiskIamPolicy",
                "majorVersion": 6
            },
            "google_compute_forwarding_rule": {
                "current": "gcp:compute/getForwardingRule:getForwardingRule",
                "majorVersion": 6,
                "fields": {
                    "ports": {
                        "maxItemsOne": false
                    },
                    "service_directory_registrations": {
                        "maxItemsOne": false
                    },
                    "source_ip_ranges": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_global_address": {
                "current": "gcp:compute/getGlobalAddress:getGlobalAddress",
                "majorVersion": 6
            },
            "google_compute_global_forwarding_rule": {
                "current": "gcp:compute/getGlobalForwardingRule:getGlobalForwardingRule",
                "majorVersion": 6,
                "fields": {
                    "metadata_filters": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "filter_labels": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "source_ip_ranges": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_ha_vpn_gateway": {
                "current": "gcp:compute/getHcVpnGateway:getHcVpnGateway",
                "majorVersion": 6,
                "fields": {
                    "vpn_interfaces": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_health_check": {
                "current": "gcp:compute/getHealthCheck:getHealthCheck",
                "majorVersion": 6,
                "fields": {
                    "grpc_health_check": {
                        "maxItemsOne": false
                    },
                    "http2_health_check": {
                        "maxItemsOne": false
                    },
                    "http_health_check": {
                        "maxItemsOne": false
                    },
                    "https_health_check": {
                        "maxItemsOne": false
                    },
                    "log_config": {
                        "maxItemsOne": false
                    },
                    "ssl_health_check": {
                        "maxItemsOne": false
                    },
                    "tcp_health_check": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_image": {
                "current": "gcp:compute/getImage:getImage",
                "majorVersion": 6,
                "fields": {
                    "licenses": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_image_iam_policy": {
                "current": "gcp:compute/getImageIamPolicy:getImageIamPolicy",
                "majorVersion": 6
            },
            "google_compute_instance": {
                "current": "gcp:compute/getInstance:getInstance",
                "majorVersion": 6,
                "fields": {
                    "advanced_machine_features": {
                        "maxItemsOne": false
                    },
                    "attached_disk": {
                        "maxItemsOne": false
                    },
                    "boot_disk": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "initialize_params": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "confidential_instance_config": {
                        "maxItemsOne": false
                    },
                    "guest_accelerator": {
                        "maxItemsOne": false
                    },
                    "network_interface": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "access_config": {
                                    "maxItemsOne": false
                                },
                                "alias_ip_range": {
                                    "maxItemsOne": false
                                },
                                "ipv6_access_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_performance_config": {
                        "maxItemsOne": false
                    },
                    "params": {
                        "maxItemsOne": false
                    },
                    "reservation_affinity": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "specific_reservation": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "resource_policies": {
                        "maxItemsOne": false
                    },
                    "scheduling": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "max_run_duration": {
                                    "maxItemsOne": false
                                },
                                "node_affinities": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "scratch_disk": {
                        "maxItemsOne": false
                    },
                    "service_account": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "scopes": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "shielded_instance_config": {
                        "maxItemsOne": false
                    },
                    "tags": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_instance_group": {
                "current": "gcp:compute/getInstanceGroup:getInstanceGroup",
                "majorVersion": 6,
                "fields": {
                    "instances": {
                        "maxItemsOne": false
                    },
                    "named_port": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_instance_group_manager": {
                "current": "gcp:compute/getInstanceGroupManager:getInstanceGroupManager",
                "majorVersion": 6,
                "fields": {
                    "all_instances_config": {
                        "maxItemsOne": false
                    },
                    "auto_healing_policies": {
                        "maxItemsOne": false
                    },
                    "instance_lifecycle_policy": {
                        "maxItemsOne": false
                    },
                    "named_port": {
                        "maxItemsOne": false
                    },
                    "stateful_disk": {
                        "maxItemsOne": false
                    },
                    "stateful_external_ip": {
                        "maxItemsOne": false
                    },
                    "stateful_internal_ip": {
                        "maxItemsOne": false
                    },
                    "status": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "all_instances_config": {
                                    "maxItemsOne": false
                                },
                                "stateful": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "per_instance_configs": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "version_target": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "target_pools": {
                        "maxItemsOne": false
                    },
                    "update_policy": {
                        "maxItemsOne": false
                    },
                    "version": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "target_size": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_instance_iam_policy": {
                "current": "gcp:compute/getInstanceIamPolicy:getInstanceIamPolicy",
                "majorVersion": 6
            },
            "google_compute_instance_serial_port": {
                "current": "gcp:compute/getInstanceSerialPort:getInstanceSerialPort",
                "majorVersion": 6
            },
            "google_compute_instance_template": {
                "current": "gcp:compute/getInstanceTemplate:getInstanceTemplate",
                "majorVersion": 6,
                "fields": {
                    "advanced_machine_features": {
                        "maxItemsOne": false
                    },
                    "confidential_instance_config": {
                        "maxItemsOne": false
                    },
                    "disk": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "disk_encryption_key": {
                                    "maxItemsOne": false
                                },
                                "resource_policies": {
                                    "maxItemsOne": false
                                },
                                "source_image_encryption_key": {
                                    "maxItemsOne": false
                                },
                                "source_snapshot_encryption_key": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "guest_accelerator": {
                        "maxItemsOne": false
                    },
                    "network_interface": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "access_config": {
                                    "maxItemsOne": false
                                },
                                "alias_ip_range": {
                                    "maxItemsOne": false
                                },
                                "ipv6_access_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_performance_config": {
                        "maxItemsOne": false
                    },
                    "reservation_affinity": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "specific_reservation": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "resource_policies": {
                        "maxItemsOne": false
                    },
                    "scheduling": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "max_run_duration": {
                                    "maxItemsOne": false
                                },
                                "node_affinities": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "service_account": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "scopes": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "shielded_instance_config": {
                        "maxItemsOne": false
                    },
                    "tags": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_lb_ip_ranges": {
                "current": "gcp:compute/getLBIPRanges:getLBIPRanges",
                "majorVersion": 6,
                "fields": {
                    "http_ssl_tcp_internal": {
                        "maxItemsOne": false
                    },
                    "network": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_machine_image_iam_policy": {
                "current": "gcp:compute/getMachineImageIamPolicy:getMachineImageIamPolicy",
                "majorVersion": 6
            },
            "google_compute_network": {
                "current": "gcp:compute/getNetwork:getNetwork",
                "majorVersion": 6,
                "fields": {
                    "subnetworks_self_links": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_network_endpoint_group": {
                "current": "gcp:compute/getNetworkEndpointGroup:getNetworkEndpointGroup",
                "majorVersion": 6
            },
            "google_compute_network_peering": {
                "current": "gcp:compute/getNetworkPeering:getNetworkPeering",
                "majorVersion": 6
            },
            "google_compute_node_types": {
                "current": "gcp:compute/getNodeTypes:getNodeTypes",
                "majorVersion": 6,
                "fields": {
                    "names": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_region_backend_service_iam_policy": {
                "current": "gcp:compute/getRegionBackendServiceIamPolicy:getRegionBackendServiceIamPolicy",
                "majorVersion": 6
            },
            "google_compute_region_disk_iam_policy": {
                "current": "gcp:compute/getRegionDiskIamPolicy:getRegionDiskIamPolicy",
                "majorVersion": 6
            },
            "google_compute_region_instance_group": {
                "current": "gcp:compute/getRegionInstanceGroup:getRegionInstanceGroup",
                "majorVersion": 6,
                "fields": {
                    "instances": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "named_ports": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_region_instance_template": {
                "current": "gcp:compute/getRegionInstanceTemplate:getRegionInstanceTemplate",
                "majorVersion": 6,
                "fields": {
                    "advanced_machine_features": {
                        "maxItemsOne": false
                    },
                    "confidential_instance_config": {
                        "maxItemsOne": false
                    },
                    "disk": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "disk_encryption_key": {
                                    "maxItemsOne": false
                                },
                                "resource_policies": {
                                    "maxItemsOne": false
                                },
                                "source_image_encryption_key": {
                                    "maxItemsOne": false
                                },
                                "source_snapshot_encryption_key": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "guest_accelerator": {
                        "maxItemsOne": false
                    },
                    "network_interface": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "access_config": {
                                    "maxItemsOne": false
                                },
                                "alias_ip_range": {
                                    "maxItemsOne": false
                                },
                                "ipv6_access_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_performance_config": {
                        "maxItemsOne": false
                    },
                    "reservation_affinity": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "specific_reservation": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "resource_policies": {
                        "maxItemsOne": false
                    },
                    "scheduling": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "max_run_duration": {
                                    "maxItemsOne": false
                                },
                                "node_affinities": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "service_account": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "scopes": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "shielded_instance_config": {
                        "maxItemsOne": false
                    },
                    "tags": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_region_network_endpoint_group": {
                "current": "gcp:compute/getRegionNetworkEndpointGroup:getRegionNetworkEndpointGroup",
                "majorVersion": 6,
                "fields": {
                    "app_engine": {
                        "maxItemsOne": false
                    },
                    "cloud_function": {
                        "maxItemsOne": false
                    },
                    "cloud_run": {
                        "maxItemsOne": false
                    },
                    "serverless_deployment": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_region_ssl_certificate": {
                "current": "gcp:compute/getRegionSslCertificate:getRegionSslCertificate",
                "majorVersion": 6
            },
            "google_compute_regions": {
                "current": "gcp:compute/getRegions:getRegions",
                "majorVersion": 6,
                "fields": {
                    "names": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_resource_policy": {
                "current": "gcp:compute/getResourcePolicy:getResourcePolicy",
                "majorVersion": 6,
                "fields": {
                    "disk_consistency_group_policy": {
                        "maxItemsOne": false
                    },
                    "group_placement_policy": {
                        "maxItemsOne": false
                    },
                    "instance_schedule_policy": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "vm_start_schedule": {
                                    "maxItemsOne": false
                                },
                                "vm_stop_schedule": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "snapshot_schedule_policy": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "retention_policy": {
                                    "maxItemsOne": false
                                },
                                "schedule": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "daily_schedule": {
                                                "maxItemsOne": false
                                            },
                                            "hourly_schedule": {
                                                "maxItemsOne": false
                                            },
                                            "weekly_schedule": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "day_of_weeks": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "snapshot_properties": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "storage_locations": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_router": {
                "current": "gcp:compute/getRouter:getRouter",
                "majorVersion": 6,
                "fields": {
                    "bgp": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "advertised_groups": {
                                    "maxItemsOne": false
                                },
                                "advertised_ip_ranges": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_router_nat": {
                "current": "gcp:compute/getRouterNat:getRouterNat",
                "majorVersion": 6,
                "fields": {
                    "drain_nat_ips": {
                        "maxItemsOne": false
                    },
                    "log_config": {
                        "maxItemsOne": false
                    },
                    "nat_ips": {
                        "maxItemsOne": false
                    },
                    "rules": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "action": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "source_nat_active_ips": {
                                                "maxItemsOne": false
                                            },
                                            "source_nat_drain_ips": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "subnetwork": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "secondary_ip_range_names": {
                                    "maxItemsOne": false
                                },
                                "source_ip_ranges_to_nat": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_router_status": {
                "current": "gcp:compute/getRouterStatus:getRouterStatus",
                "majorVersion": 6,
                "fields": {
                    "best_routes": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "tags": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "best_routes_for_router": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "tags": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_router_status_legacy": {
                "current": "gcp:compute/routerStatus:RouterStatus",
                "majorVersion": 6,
                "fields": {
                    "best_routes": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "tags": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "best_routes_for_router": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "tags": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_compute_snapshot": {
                "current": "gcp:compute/getSnapshot:getSnapshot",
                "majorVersion": 6,
                "fields": {
                    "licenses": {
                        "maxItemsOne": false
                    },
                    "snapshot_encryption_key": {
                        "maxItemsOne": false
                    },
                    "source_disk_encryption_key": {
                        "maxItemsOne": false
                    },
                    "storage_locations": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_snapshot_iam_policy": {
                "current": "gcp:compute/getSnapshotIamPolicy:getSnapshotIamPolicy",
                "majorVersion": 6
            },
            "google_compute_ssl_certificate": {
                "current": "gcp:compute/getCertificate:getCertificate",
                "majorVersion": 6
            },
            "google_compute_ssl_policy": {
                "current": "gcp:compute/getSSLPolicy:getSSLPolicy",
                "majorVersion": 6,
                "fields": {
                    "custom_features": {
                        "maxItemsOne": false
                    },
                    "enabled_features": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_subnetwork": {
                "current": "gcp:compute/getSubnetwork:getSubnetwork",
                "majorVersion": 6,
                "fields": {
                    "secondary_ip_range": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_compute_subnetwork_iam_policy": {
                "current": "gcp:compute/getSubnetworkIamPolicy:getSubnetworkIamPolicy",
                "majorVersion": 6
            },
            "google_compute_vpn_gateway": {
                "current": "gcp:compute/getVPNGateway:getVPNGateway",
                "majorVersion": 6
            },
            "google_compute_zones": {
                "current": "gcp:compute/getZones:getZones",
                "majorVersion": 6,
                "fields": {
                    "names": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_container_analysis_note_iam_policy": {
                "current": "gcp:containeranalysis/getNoteIamPolicy:getNoteIamPolicy",
                "majorVersion": 6
            },
            "google_container_attached_install_manifest": {
                "current": "gcp:container/getAttachedInstallManifest:getAttachedInstallManifest",
                "majorVersion": 6
            },
            "google_container_attached_versions": {
                "current": "gcp:container/getAttachedVersions:getAttachedVersions",
                "majorVersion": 6,
                "fields": {
                    "valid_versions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_container_aws_versions": {
                "current": "gcp:container/getAwsVersions:getAwsVersions",
                "majorVersion": 6,
                "fields": {
                    "supported_regions": {
                        "maxItemsOne": false
                    },
                    "valid_versions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_container_azure_versions": {
                "current": "gcp:container/getAzureVersions:getAzureVersions",
                "majorVersion": 6,
                "fields": {
                    "supported_regions": {
                        "maxItemsOne": false
                    },
                    "valid_versions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_container_cluster": {
                "current": "gcp:container/getCluster:getCluster",
                "majorVersion": 6,
                "fields": {
                    "addons_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "cloudrun_config": {
                                    "maxItemsOne": false
                                },
                                "config_connector_config": {
                                    "maxItemsOne": false
                                },
                                "dns_cache_config": {
                                    "maxItemsOne": false
                                },
                                "gce_persistent_disk_csi_driver_config": {
                                    "maxItemsOne": false
                                },
                                "gcp_filestore_csi_driver_config": {
                                    "maxItemsOne": false
                                },
                                "gcs_fuse_csi_driver_config": {
                                    "maxItemsOne": false
                                },
                                "gke_backup_agent_config": {
                                    "maxItemsOne": false
                                },
                                "horizontal_pod_autoscaling": {
                                    "maxItemsOne": false
                                },
                                "http_load_balancing": {
                                    "maxItemsOne": false
                                },
                                "istio_config": {
                                    "maxItemsOne": false
                                },
                                "kalm_config": {
                                    "maxItemsOne": false
                                },
                                "network_policy_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "authenticator_groups_config": {
                        "maxItemsOne": false
                    },
                    "binary_authorization": {
                        "maxItemsOne": false
                    },
                    "cluster_autoscaling": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "auto_provisioning_defaults": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "management": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "upgrade_options": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "oauth_scopes": {
                                                "maxItemsOne": false
                                            },
                                            "shielded_instance_config": {
                                                "maxItemsOne": false
                                            },
                                            "upgrade_settings": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "blue_green_settings": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "standard_rollout_policy": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "resource_limits": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "cluster_telemetry": {
                        "maxItemsOne": false
                    },
                    "confidential_nodes": {
                        "maxItemsOne": false
                    },
                    "cost_management_config": {
                        "maxItemsOne": false
                    },
                    "database_encryption": {
                        "maxItemsOne": false
                    },
                    "default_snat_status": {
                        "maxItemsOne": false
                    },
                    "dns_config": {
                        "maxItemsOne": false
                    },
                    "gateway_api_config": {
                        "maxItemsOne": false
                    },
                    "identity_service_config": {
                        "maxItemsOne": false
                    },
                    "ip_allocation_policy": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "pod_cidr_overprovision_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "logging_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "enable_components": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "maintenance_policy": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "daily_maintenance_window": {
                                    "maxItemsOne": false
                                },
                                "maintenance_exclusion": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "exclusion_options": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "recurring_window": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "master_auth": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "client_certificate_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "master_authorized_networks_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "cidr_blocks": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "mesh_certificates": {
                        "maxItemsOne": false
                    },
                    "monitoring_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "enable_components": {
                                    "maxItemsOne": false
                                },
                                "managed_prometheus": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_policy": {
                        "maxItemsOne": false
                    },
                    "node_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "advanced_machine_features": {
                                    "maxItemsOne": false
                                },
                                "ephemeral_storage_config": {
                                    "maxItemsOne": false
                                },
                                "ephemeral_storage_local_ssd_config": {
                                    "maxItemsOne": false
                                },
                                "gcfs_config": {
                                    "maxItemsOne": false
                                },
                                "guest_accelerator": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "gpu_driver_installation_config": {
                                                "maxItemsOne": false
                                            },
                                            "gpu_sharing_config": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "gvnic": {
                                    "maxItemsOne": false
                                },
                                "kubelet_config": {
                                    "maxItemsOne": false
                                },
                                "linux_node_config": {
                                    "maxItemsOne": false
                                },
                                "local_nvme_ssd_block_config": {
                                    "maxItemsOne": false
                                },
                                "oauth_scopes": {
                                    "maxItemsOne": false
                                },
                                "reservation_affinity": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "sandbox_config": {
                                    "maxItemsOne": false
                                },
                                "shielded_instance_config": {
                                    "maxItemsOne": false
                                },
                                "sole_tenant_config": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "node_affinity": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "values": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "tags": {
                                    "maxItemsOne": false
                                },
                                "taint": {
                                    "maxItemsOne": false
                                },
                                "workload_metadata_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "node_locations": {
                        "maxItemsOne": false
                    },
                    "node_pool": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "autoscaling": {
                                    "maxItemsOne": false
                                },
                                "instance_group_urls": {
                                    "maxItemsOne": false
                                },
                                "managed_instance_group_urls": {
                                    "maxItemsOne": false
                                },
                                "management": {
                                    "maxItemsOne": false
                                },
                                "network_config": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "additional_node_network_configs": {
                                                "maxItemsOne": false
                                            },
                                            "additional_pod_network_configs": {
                                                "maxItemsOne": false
                                            },
                                            "pod_cidr_overprovision_config": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "node_config": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "advanced_machine_features": {
                                                "maxItemsOne": false
                                            },
                                            "ephemeral_storage_config": {
                                                "maxItemsOne": false
                                            },
                                            "ephemeral_storage_local_ssd_config": {
                                                "maxItemsOne": false
                                            },
                                            "gcfs_config": {
                                                "maxItemsOne": false
                                            },
                                            "guest_accelerator": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "gpu_driver_installation_config": {
                                                            "maxItemsOne": false
                                                        },
                                                        "gpu_sharing_config": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "gvnic": {
                                                "maxItemsOne": false
                                            },
                                            "kubelet_config": {
                                                "maxItemsOne": false
                                            },
                                            "linux_node_config": {
                                                "maxItemsOne": false
                                            },
                                            "local_nvme_ssd_block_config": {
                                                "maxItemsOne": false
                                            },
                                            "oauth_scopes": {
                                                "maxItemsOne": false
                                            },
                                            "reservation_affinity": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "values": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "sandbox_config": {
                                                "maxItemsOne": false
                                            },
                                            "shielded_instance_config": {
                                                "maxItemsOne": false
                                            },
                                            "sole_tenant_config": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "node_affinity": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "values": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "tags": {
                                                "maxItemsOne": false
                                            },
                                            "taint": {
                                                "maxItemsOne": false
                                            },
                                            "workload_metadata_config": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "node_locations": {
                                    "maxItemsOne": false
                                },
                                "placement_policy": {
                                    "maxItemsOne": false
                                },
                                "upgrade_settings": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "blue_green_settings": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "standard_rollout_policy": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "node_pool_auto_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "network_tags": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "tags": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "node_pool_defaults": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "node_config_defaults": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "gcfs_config": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "notification_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "pubsub": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "filter": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "event_type": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "pod_security_policy_config": {
                        "maxItemsOne": false
                    },
                    "private_cluster_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "master_global_access_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "protect_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "workload_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "release_channel": {
                        "maxItemsOne": false
                    },
                    "resource_usage_export_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "bigquery_destination": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "security_posture_config": {
                        "maxItemsOne": false
                    },
                    "service_external_ips_config": {
                        "maxItemsOne": false
                    },
                    "tpu_config": {
                        "maxItemsOne": false
                    },
                    "vertical_pod_autoscaling": {
                        "maxItemsOne": false
                    },
                    "workload_identity_config": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_container_engine_versions": {
                "current": "gcp:container/getEngineVersions:getEngineVersions",
                "majorVersion": 6,
                "fields": {
                    "valid_master_versions": {
                        "maxItemsOne": false
                    },
                    "valid_node_versions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_container_registry_image": {
                "current": "gcp:container/getRegistryImage:getRegistryImage",
                "majorVersion": 6
            },
            "google_container_registry_repository": {
                "current": "gcp:container/getRegistryRepository:getRegistryRepository",
                "majorVersion": 6
            },
            "google_data_catalog_entry_group_iam_policy": {
                "current": "gcp:datacatalog/getEntryGroupIamPolicy:getEntryGroupIamPolicy",
                "majorVersion": 6
            },
            "google_data_catalog_policy_tag_iam_policy": {
                "current": "gcp:datacatalog/getPolicyTagIamPolicy:getPolicyTagIamPolicy",
                "majorVersion": 6
            },
            "google_data_catalog_tag_template_iam_policy": {
                "current": "gcp:datacatalog/getTagTemplateIamPolicy:getTagTemplateIamPolicy",
                "majorVersion": 6
            },
            "google_data_catalog_taxonomy_iam_policy": {
                "current": "gcp:datacatalog/getTaxonomyIamPolicy:getTaxonomyIamPolicy",
                "majorVersion": 6
            },
            "google_data_fusion_instance_iam_policy": {
                "current": "gcp:datafusion/getInstanceIamPolicy:getInstanceIamPolicy",
                "majorVersion": 6
            },
            "google_dataplex_asset_iam_policy": {
                "current": "gcp:dataplex/getAssetIamPolicy:getAssetIamPolicy",
                "majorVersion": 6
            },
            "google_dataplex_datascan_iam_policy": {
                "current": "gcp:dataplex/getDatascanIamPolicy:getDatascanIamPolicy",
                "majorVersion": 6
            },
            "google_dataplex_lake_iam_policy": {
                "current": "gcp:dataplex/getLakeIamPolicy:getLakeIamPolicy",
                "majorVersion": 6
            },
            "google_dataplex_task_iam_policy": {
                "current": "gcp:dataplex/getTaskIamPolicy:getTaskIamPolicy",
                "majorVersion": 6
            },
            "google_dataplex_zone_iam_policy": {
                "current": "gcp:dataplex/getZoneIamPolicy:getZoneIamPolicy",
                "majorVersion": 6
            },
            "google_dataproc_autoscaling_policy_iam_policy": {
                "current": "gcp:dataproc/getAutoscalingPolicyIamPolicy:getAutoscalingPolicyIamPolicy",
                "majorVersion": 6
            },
            "google_dataproc_cluster_iam_policy": {
                "current": "gcp:dataproc/getClusterIamPolicy:getClusterIamPolicy",
                "majorVersion": 6
            },
            "google_dataproc_job_iam_policy": {
                "current": "gcp:dataproc/getJobIamPolicy:getJobIamPolicy",
                "majorVersion": 6
            },
            "google_dataproc_metastore_federation_iam_policy": {
                "current": "gcp:dataproc/getMetastoreFederationIamPolicy:getMetastoreFederationIamPolicy",
                "majorVersion": 6
            },
            "google_dataproc_metastore_service_iam_policy": {
                "current": "gcp:dataproc/getMetastoreServiceIamPolicy:getMetastoreServiceIamPolicy",
                "majorVersion": 6
            },
            "google_datastream_static_ips": {
                "current": "gcp:datastream/getStaticIps:getStaticIps",
                "majorVersion": 6,
                "fields": {
                    "static_ips": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dns_keys": {
                "current": "gcp:dns/getKeys:getKeys",
                "majorVersion": 6,
                "fields": {
                    "key_signing_keys": {
                        "maxItemsOne": false,
                        "elem": {
                            "elem": {
                                "fields": {
                                    "digests": {
                                        "maxItemsOne": false
                                    }
                                }
                            }
                        }
                    },
                    "zone_signing_keys": {
                        "maxItemsOne": false,
                        "elem": {
                            "elem": {
                                "fields": {
                                    "digests": {
                                        "maxItemsOne": false
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_dns_managed_zone": {
                "current": "gcp:dns/getManagedZone:getManagedZone",
                "majorVersion": 6,
                "fields": {
                    "name_servers": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_dns_managed_zone_iam_policy": {
                "current": "gcp:dns/getManagedZoneIamPolicy:getManagedZoneIamPolicy",
                "majorVersion": 6
            },
            "google_dns_record_set": {
                "current": "gcp:dns/getRecordSet:getRecordSet",
                "majorVersion": 6,
                "fields": {
                    "rrdatas": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_endpoints_service_consumers_iam_policy": {
                "current": "gcp:endpoints/getServiceConsumersIamPolicy:getServiceConsumersIamPolicy",
                "majorVersion": 6
            },
            "google_endpoints_service_iam_policy": {
                "current": "gcp:endpoints/getServiceIamPolicy:getServiceIamPolicy",
                "majorVersion": 6
            },
            "google_firebase_android_app": {
                "current": "gcp:firebase/getAndroidApp:getAndroidApp",
                "majorVersion": 6,
                "fields": {
                    "sha1_hashes": {
                        "maxItemsOne": false
                    },
                    "sha256_hashes": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_firebase_android_app_config": {
                "current": "gcp:firebase/getAndroidAppConfig:getAndroidAppConfig",
                "majorVersion": 6
            },
            "google_firebase_apple_app": {
                "current": "gcp:firebase/getAppleApp:getAppleApp",
                "majorVersion": 6
            },
            "google_firebase_apple_app_config": {
                "current": "gcp:firebase/getAppleAppConfig:getAppleAppConfig",
                "majorVersion": 6
            },
            "google_firebase_hosting_channel": {
                "current": "gcp:firebase/getHostingChannel:getHostingChannel",
                "majorVersion": 6
            },
            "google_firebase_web_app": {
                "current": "gcp:firebase/getWebApp:getWebApp",
                "majorVersion": 6,
                "fields": {
                    "app_urls": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_firebase_web_app_config": {
                "current": "gcp:firebase/getWebAppConfig:getWebAppConfig",
                "majorVersion": 6
            },
            "google_folder": {
                "current": "gcp:organizations/getFolder:getFolder",
                "majorVersion": 6
            },
            "google_folder_iam_policy": {
                "current": "gcp:folder/getIamPolicy:getIamPolicy",
                "majorVersion": 6
            },
            "google_folder_organization_policy": {
                "current": "gcp:folder/getOrganizationPolicy:getOrganizationPolicy",
                "majorVersion": 6,
                "fields": {
                    "boolean_policy": {
                        "maxItemsOne": false
                    },
                    "list_policy": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "allow": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "deny": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "restore_policy": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_folders": {
                "current": "gcp:organizations/getFolders:getFolders",
                "majorVersion": 6,
                "fields": {
                    "folders": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_game_services_game_server_deployment_rollout": {
                "current": "gcp:gameservices/getGameServerDeploymentRollout:getGameServerDeploymentRollout",
                "majorVersion": 6,
                "fields": {
                    "game_server_config_overrides": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "realms_selector": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "realms": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_gke_backup_backup_plan_iam_policy": {
                "current": "gcp:gkebackup/getBackupPlanIamPolicy:getBackupPlanIamPolicy",
                "majorVersion": 6
            },
            "google_gke_hub_feature_iam_policy": {
                "current": "gcp:gkehub/getFeatureIamPolicy:getFeatureIamPolicy",
                "majorVersion": 6
            },
            "google_gke_hub_membership_iam_policy": {
                "current": "gcp:gkehub/getMembershipIamPolicy:getMembershipIamPolicy",
                "majorVersion": 6
            },
            "google_healthcare_consent_store_iam_policy": {
                "current": "gcp:healthcare/getConsentStoreIamPolicy:getConsentStoreIamPolicy",
                "majorVersion": 6
            },
            "google_healthcare_dataset_iam_policy": {
                "current": "gcp:healthcare/getDatasetIamPolicy:getDatasetIamPolicy",
                "majorVersion": 6
            },
            "google_healthcare_dicom_store_iam_policy": {
                "current": "gcp:healthcare/getDicomStoreIamPolicy:getDicomStoreIamPolicy",
                "majorVersion": 6
            },
            "google_healthcare_fhir_store_iam_policy": {
                "current": "gcp:healthcare/getFhirStoreIamPolicy:getFhirStoreIamPolicy",
                "majorVersion": 6
            },
            "google_healthcare_hl7_v2_store_iam_policy": {
                "current": "gcp:healthcare/getHl7V2StoreIamPolicy:getHl7V2StoreIamPolicy",
                "majorVersion": 6
            },
            "google_iam_policy": {
                "current": "gcp:organizations/getIAMPolicy:getIAMPolicy",
                "majorVersion": 6,
                "fields": {
                    "audit_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "audit_log_configs": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "exempted_members": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "binding": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "condition": {
                                    "maxItemsOne": true
                                },
                                "members": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_iam_role": {
                "current": "gcp:iam/getRule:getRule",
                "majorVersion": 6,
                "fields": {
                    "included_permissions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_iam_testable_permissions": {
                "current": "gcp:iam/getTestablePermissions:getTestablePermissions",
                "majorVersion": 6,
                "fields": {
                    "permissions": {
                        "maxItemsOne": false
                    },
                    "stages": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_iam_workload_identity_pool": {
                "current": "gcp:iam/getWorkloadIdentityPool:getWorkloadIdentityPool",
                "majorVersion": 6
            },
            "google_iam_workload_identity_pool_provider": {
                "current": "gcp:iam/getWorkloadIdentityPoolProvider:getWorkloadIdentityPoolProvider",
                "majorVersion": 6,
                "fields": {
                    "aws": {
                        "maxItemsOne": false
                    },
                    "oidc": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "allowed_audiences": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_iap_app_engine_service_iam_policy": {
                "current": "gcp:iap/getAppEngineServiceIamPolicy:getAppEngineServiceIamPolicy",
                "majorVersion": 6
            },
            "google_iap_app_engine_version_iam_policy": {
                "current": "gcp:iap/getAppEngineVersionIamPolicy:getAppEngineVersionIamPolicy",
                "majorVersion": 6
            },
            "google_iap_client": {
                "current": "gcp:iap/getClient:getClient",
                "majorVersion": 6
            },
            "google_iap_tunnel_iam_policy": {
                "current": "gcp:iap/getTunnelIamPolicy:getTunnelIamPolicy",
                "majorVersion": 6
            },
            "google_iap_tunnel_instance_iam_policy": {
                "current": "gcp:iap/getTunnelInstanceIamPolicy:getTunnelInstanceIamPolicy",
                "majorVersion": 6
            },
            "google_iap_web_backend_service_iam_policy": {
                "current": "gcp:iap/getWebBackendServiceIamPolicy:getWebBackendServiceIamPolicy",
                "majorVersion": 6
            },
            "google_iap_web_iam_policy": {
                "current": "gcp:iap/getWebIamPolicy:getWebIamPolicy",
                "majorVersion": 6
            },
            "google_iap_web_region_backend_service_iam_policy": {
                "current": "gcp:iap/getWebRegionBackendServiceIamPolicy:getWebRegionBackendServiceIamPolicy",
                "majorVersion": 6
            },
            "google_iap_web_type_app_engine_iam_policy": {
                "current": "gcp:iap/getWebTypeAppEngineIamPolicy:getWebTypeAppEngineIamPolicy",
                "majorVersion": 6
            },
            "google_iap_web_type_compute_iam_policy": {
                "current": "gcp:iap/getWebTypeComputeIamPolicy:getWebTypeComputeIamPolicy",
                "majorVersion": 6
            },
            "google_kms_crypto_key": {
                "current": "gcp:kms/getKMSCryptoKey:getKMSCryptoKey",
                "majorVersion": 6,
                "fields": {
                    "version_template": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_kms_crypto_key_iam_policy": {
                "current": "gcp:kms/getCryptoKeyIamPolicy:getCryptoKeyIamPolicy",
                "majorVersion": 6
            },
            "google_kms_crypto_key_version": {
                "current": "gcp:kms/getKMSCryptoKeyVersion:getKMSCryptoKeyVersion",
                "majorVersion": 6,
                "fields": {
                    "public_key": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_kms_key_ring": {
                "current": "gcp:kms/getKMSKeyRing:getKMSKeyRing",
                "majorVersion": 6
            },
            "google_kms_key_ring_iam_policy": {
                "current": "gcp:kms/getKeyRingIamPolicy:getKeyRingIamPolicy",
                "majorVersion": 6
            },
            "google_kms_secret": {
                "current": "gcp:kms/getKMSSecret:getKMSSecret",
                "majorVersion": 6
            },
            "google_kms_secret_asymmetric": {
                "current": "gcp:kms/getKMSSecretAsymmetric:getKMSSecretAsymmetric",
                "majorVersion": 6
            },
            "google_kms_secret_ciphertext": {
                "current": "gcp:kms/getKMSSecretCiphertext:getKMSSecretCiphertext",
                "majorVersion": 6
            },
            "google_logging_project_cmek_settings": {
                "current": "gcp:logging/getProjectCmekSettings:getProjectCmekSettings",
                "majorVersion": 6
            },
            "google_logging_sink": {
                "current": "gcp:logging/getSink:getSink",
                "majorVersion": 6,
                "fields": {
                    "bigquery_options": {
                        "maxItemsOne": false
                    },
                    "exclusions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_monitoring_app_engine_service": {
                "current": "gcp:monitoring/getAppEngineService:getAppEngineService",
                "majorVersion": 6,
                "fields": {
                    "telemetry": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_monitoring_cluster_istio_service": {
                "current": "gcp:monitoring/getClusterIstioService:getClusterIstioService",
                "majorVersion": 6,
                "fields": {
                    "telemetry": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_monitoring_istio_canonical_service": {
                "current": "gcp:monitoring/getIstioCanonicalService:getIstioCanonicalService",
                "majorVersion": 6,
                "fields": {
                    "telemetry": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_monitoring_mesh_istio_service": {
                "current": "gcp:monitoring/getMeshIstioService:getMeshIstioService",
                "majorVersion": 6,
                "fields": {
                    "telemetry": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_monitoring_notification_channel": {
                "current": "gcp:monitoring/getNotificationChannel:getNotificationChannel",
                "majorVersion": 6,
                "fields": {
                    "sensitive_labels": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_monitoring_uptime_check_ips": {
                "current": "gcp:monitoring/getUptimeCheckIPs:getUptimeCheckIPs",
                "majorVersion": 6,
                "fields": {
                    "uptime_check_ips": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_netblock_ip_ranges": {
                "current": "gcp:compute/getNetblockIPRanges:getNetblockIPRanges",
                "majorVersion": 6,
                "fields": {
                    "cidr_blocks": {
                        "maxItemsOne": false
                    },
                    "cidr_blocks_ipv4": {
                        "maxItemsOne": false
                    },
                    "cidr_blocks_ipv6": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_notebooks_instance_iam_policy": {
                "current": "gcp:notebooks/getInstanceIamPolicy:getInstanceIamPolicy",
                "majorVersion": 6
            },
            "google_notebooks_runtime_iam_policy": {
                "current": "gcp:notebooks/getRuntimeIamPolicy:getRuntimeIamPolicy",
                "majorVersion": 6
            },
            "google_organization": {
                "current": "gcp:organizations/getOrganization:getOrganization",
                "majorVersion": 6
            },
            "google_organization_iam_policy": {
                "current": "gcp:organizations/getIamPolicy:getIamPolicy"
            },
            "google_privateca_ca_pool_iam_policy": {
                "current": "gcp:certificateauthority/getCaPoolIamPolicy:getCaPoolIamPolicy",
                "majorVersion": 6
            },
            "google_privateca_certificate_authority": {
                "current": "gcp:certificateauthority/getAuthority:getAuthority",
                "majorVersion": 6,
                "fields": {
                    "access_urls": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "crl_access_urls": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "subject_config": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "subject": {
                                                "maxItemsOne": false
                                            },
                                            "subject_alt_name": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "ip_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "uris": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "x509_config": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "additional_extensions": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "object_id": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "object_id_path": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "aia_ocsp_servers": {
                                                "maxItemsOne": false
                                            },
                                            "ca_options": {
                                                "maxItemsOne": false
                                            },
                                            "key_usage": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "base_key_usage": {
                                                            "maxItemsOne": false
                                                        },
                                                        "extended_key_usage": {
                                                            "maxItemsOne": false
                                                        },
                                                        "unknown_extended_key_usages": {
                                                            "maxItemsOne": false,
                                                            "elem": {
                                                                "fields": {
                                                                    "object_id_path": {
                                                                        "maxItemsOne": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "name_constraints": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "excluded_dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_ip_ranges": {
                                                            "maxItemsOne": false
                                                        },
                                                        "excluded_uris": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_dns_names": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_email_addresses": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_ip_ranges": {
                                                            "maxItemsOne": false
                                                        },
                                                        "permitted_uris": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "policy_ids": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "object_id_path": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "key_spec": {
                        "maxItemsOne": false
                    },
                    "pem_ca_certificates": {
                        "maxItemsOne": false
                    },
                    "subordinate_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "pem_issuer_chain": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "pem_certificates": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_privateca_certificate_template_iam_policy": {
                "current": "gcp:certificateauthority/getCertificateTemplateIamPolicy:getCertificateTemplateIamPolicy",
                "majorVersion": 6
            },
            "google_project": {
                "current": "gcp:organizations/getProject:getProject",
                "majorVersion": 6
            },
            "google_project_iam_policy": {
                "current": "gcp:projects/getIamPolicy:getIamPolicy",
                "majorVersion": 6
            },
            "google_project_organization_policy": {
                "current": "gcp:projects/getOrganizationPolicy:getOrganizationPolicy",
                "majorVersion": 6,
                "fields": {
                    "boolean_policy": {
                        "maxItemsOne": false
                    },
                    "list_policy": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "allow": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "deny": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "values": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "restore_policy": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_project_service": {
                "current": "gcp:projects/getProjectService:getProjectService",
                "majorVersion": 6
            },
            "google_projects": {
                "current": "gcp:projects/getProject:getProject",
                "majorVersion": 6,
                "fields": {
                    "projects": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_pubsub_subscription": {
                "current": "gcp:pubsub/getSubscription:getSubscription",
                "majorVersion": 6,
                "fields": {
                    "bigquery_config": {
                        "maxItemsOne": false
                    },
                    "dead_letter_policy": {
                        "maxItemsOne": false
                    },
                    "expiration_policy": {
                        "maxItemsOne": false
                    },
                    "push_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "oidc_token": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "retry_policy": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_pubsub_subscription_iam_policy": {
                "current": "gcp:pubsub/getSubscriptionIamPolicy:getSubscriptionIamPolicy",
                "majorVersion": 6
            },
            "google_pubsub_topic": {
                "current": "gcp:pubsub/getTopic:getTopic",
                "majorVersion": 6,
                "fields": {
                    "message_storage_policy": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "allowed_persistence_regions": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "schema_settings": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_pubsub_topic_iam_policy": {
                "current": "gcp:pubsub/getTopicIamPolicy:getTopicIamPolicy",
                "majorVersion": 6
            },
            "google_redis_instance": {
                "current": "gcp:redis/getInstance:getInstance",
                "majorVersion": 6,
                "fields": {
                    "maintenance_policy": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "weekly_maintenance_window": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "start_time": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "maintenance_schedule": {
                        "maxItemsOne": false
                    },
                    "nodes": {
                        "maxItemsOne": false
                    },
                    "persistence_config": {
                        "maxItemsOne": false
                    },
                    "server_ca_certs": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_runtimeconfig_config": {
                "current": "gcp:runtimeconfig/getConfig:getConfig",
                "majorVersion": 6
            },
            "google_runtimeconfig_config_iam_policy": {
                "current": "gcp:runtimeconfig/getConfigIamPolicy:getConfigIamPolicy",
                "majorVersion": 6
            },
            "google_runtimeconfig_variable": {
                "current": "gcp:runtimeconfig/getVariable:getVariable",
                "majorVersion": 6
            },
            "google_scc_source_iam_policy": {
                "current": "gcp:securitycenter/getSourceIamPolicy:getSourceIamPolicy",
                "majorVersion": 6
            },
            "google_secret_manager_secret": {
                "current": "gcp:secretmanager/getSecret:getSecret",
                "majorVersion": 6,
                "fields": {
                    "replication": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "user_managed": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "replicas": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "customer_managed_encryption": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "rotation": {
                        "maxItemsOne": false
                    },
                    "topics": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_secret_manager_secret_iam_policy": {
                "current": "gcp:secretmanager/getSecretIamPolicy:getSecretIamPolicy",
                "majorVersion": 6
            },
            "google_secret_manager_secret_version": {
                "current": "gcp:secretmanager/getSecretVersion:getSecretVersion",
                "majorVersion": 6
            },
            "google_secret_manager_secret_version_access": {
                "current": "gcp:secretmanager/getSecretVersionAccess:getSecretVersionAccess",
                "majorVersion": 6
            },
            "google_secret_manager_secret_version_legacy": {
                "current": "gcp:monitoring/getSecretVersion:getSecretVersion",
                "majorVersion": 6
            },
            "google_service_account": {
                "current": "gcp:serviceAccount/getAccount:getAccount",
                "majorVersion": 6
            },
            "google_service_account_access_token": {
                "current": "gcp:serviceAccount/getAccountAccessToken:getAccountAccessToken",
                "majorVersion": 6,
                "fields": {
                    "delegates": {
                        "maxItemsOne": false
                    },
                    "scopes": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_service_account_iam_policy": {
                "current": "gcp:serviceAccount/getIamPolicy:getIamPolicy",
                "majorVersion": 6
            },
            "google_service_account_id_token": {
                "current": "gcp:serviceAccount/getAccountIdToken:getAccountIdToken",
                "majorVersion": 6,
                "fields": {
                    "delegates": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_service_account_jwt": {
                "current": "gcp:serviceAccount/getAccountJwt:getAccountJwt",
                "majorVersion": 6,
                "fields": {
                    "delegates": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_service_account_key": {
                "current": "gcp:serviceAccount/getAccountKey:getAccountKey",
                "majorVersion": 6
            },
            "google_service_directory_namespace_iam_policy": {
                "current": "gcp:servicedirectory/getNamespaceIamPolicy:getNamespaceIamPolicy",
                "majorVersion": 6
            },
            "google_service_directory_service_iam_policy": {
                "current": "gcp:servicedirectory/getServiceIamPolicy:getServiceIamPolicy",
                "majorVersion": 6
            },
            "google_service_networking_peered_dns_domain": {
                "current": "gcp:servicenetworking/getPeeredDnsDomain:getPeeredDnsDomain",
                "majorVersion": 6
            },
            "google_sourcerepo_repository": {
                "current": "gcp:sourcerepo/getRepository:getRepository",
                "majorVersion": 6,
                "fields": {
                    "pubsub_configs": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_sourcerepo_repository_iam_policy": {
                "current": "gcp:sourcerepo/getRepositoryIamPolicy:getRepositoryIamPolicy",
                "majorVersion": 6
            },
            "google_spanner_database_iam_policy": {
                "current": "gcp:spanner/getDatabaseIamPolicy:getDatabaseIamPolicy",
                "majorVersion": 6
            },
            "google_spanner_instance": {
                "current": "gcp:spanner/getInstance:getInstance",
                "majorVersion": 6
            },
            "google_spanner_instance_iam_policy": {
                "current": "gcp:spanner/getInstanceIamPolicy:getInstanceIamPolicy",
                "majorVersion": 6
            },
            "google_sql_backup_run": {
                "current": "gcp:sql/getBackupRun:getBackupRun",
                "majorVersion": 6
            },
            "google_sql_ca_certs": {
                "current": "gcp:sql/getCaCerts:getCaCerts",
                "majorVersion": 6,
                "fields": {
                    "certs": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_sql_database": {
                "current": "gcp:sql/getDatabase:getDatabase",
                "majorVersion": 6
            },
            "google_sql_database_instance": {
                "current": "gcp:sql/getDatabaseInstance:getDatabaseInstance",
                "majorVersion": 6,
                "fields": {
                    "available_maintenance_versions": {
                        "maxItemsOne": false
                    },
                    "clone": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "database_names": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "ip_address": {
                        "maxItemsOne": false
                    },
                    "replica_configuration": {
                        "maxItemsOne": false
                    },
                    "restore_backup_context": {
                        "maxItemsOne": false
                    },
                    "server_ca_cert": {
                        "maxItemsOne": false
                    },
                    "settings": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "active_directory_config": {
                                    "maxItemsOne": false
                                },
                                "advanced_machine_features": {
                                    "maxItemsOne": false
                                },
                                "backup_configuration": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "backup_retention_settings": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "data_cache_config": {
                                    "maxItemsOne": false
                                },
                                "database_flags": {
                                    "maxItemsOne": false
                                },
                                "deny_maintenance_period": {
                                    "maxItemsOne": false
                                },
                                "insights_config": {
                                    "maxItemsOne": false
                                },
                                "ip_configuration": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "authorized_networks": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "location_preference": {
                                    "maxItemsOne": false
                                },
                                "maintenance_window": {
                                    "maxItemsOne": false
                                },
                                "password_validation_policy": {
                                    "maxItemsOne": false
                                },
                                "sql_server_audit_config": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_sql_database_instances": {
                "current": "gcp:sql/getDatabaseInstances:getDatabaseInstances",
                "majorVersion": 6,
                "fields": {
                    "instances": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "available_maintenance_versions": {
                                    "maxItemsOne": false
                                },
                                "clone": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "database_names": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                },
                                "ip_address": {
                                    "maxItemsOne": false
                                },
                                "replica_configuration": {
                                    "maxItemsOne": false
                                },
                                "restore_backup_context": {
                                    "maxItemsOne": false
                                },
                                "server_ca_cert": {
                                    "maxItemsOne": false
                                },
                                "settings": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "active_directory_config": {
                                                "maxItemsOne": false
                                            },
                                            "advanced_machine_features": {
                                                "maxItemsOne": false
                                            },
                                            "backup_configuration": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "backup_retention_settings": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "data_cache_config": {
                                                "maxItemsOne": false
                                            },
                                            "database_flags": {
                                                "maxItemsOne": false
                                            },
                                            "deny_maintenance_period": {
                                                "maxItemsOne": false
                                            },
                                            "insights_config": {
                                                "maxItemsOne": false
                                            },
                                            "ip_configuration": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "authorized_networks": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            },
                                            "location_preference": {
                                                "maxItemsOne": false
                                            },
                                            "maintenance_window": {
                                                "maxItemsOne": false
                                            },
                                            "password_validation_policy": {
                                                "maxItemsOne": false
                                            },
                                            "sql_server_audit_config": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_sql_databases": {
                "current": "gcp:sql/getDatabases:getDatabases",
                "majorVersion": 6,
                "fields": {
                    "databases": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_sql_tiers": {
                "current": "gcp:sql/getTiers:getTiers",
                "majorVersion": 6,
                "fields": {
                    "tiers": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "region": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    }
                }
            },
            "google_storage_bucket": {
                "current": "gcp:storage/getBucket:getBucket",
                "majorVersion": 6,
                "fields": {
                    "autoclass": {
                        "maxItemsOne": false
                    },
                    "cors": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "method": {
                                    "maxItemsOne": false
                                },
                                "origin": {
                                    "maxItemsOne": false
                                },
                                "response_header": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "custom_placement_config": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "data_locations": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "encryption": {
                        "maxItemsOne": false
                    },
                    "lifecycle_rule": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "action": {
                                    "maxItemsOne": false
                                },
                                "condition": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "matches_prefix": {
                                                "maxItemsOne": false
                                            },
                                            "matches_storage_class": {
                                                "maxItemsOne": false
                                            },
                                            "matches_suffix": {
                                                "maxItemsOne": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "logging": {
                        "maxItemsOne": false
                    },
                    "retention_policy": {
                        "maxItemsOne": false
                    },
                    "versioning": {
                        "maxItemsOne": false
                    },
                    "website": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_storage_bucket_iam_policy": {
                "current": "gcp:storage/getBucketIamPolicy:getBucketIamPolicy",
                "majorVersion": 6
            },
            "google_storage_bucket_object": {
                "current": "gcp:storage/getBucketObject:getBucketObject",
                "majorVersion": 6,
                "fields": {
                    "customer_encryption": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_storage_bucket_object_content": {
                "current": "gcp:storage/getBucketObjectContent:getBucketObjectContent",
                "majorVersion": 6,
                "fields": {
                    "customer_encryption": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_storage_object_signed_url": {
                "current": "gcp:storage/getObjectSignedUrl:getObjectSignedUrl",
                "majorVersion": 6
            },
            "google_storage_project_service_account": {
                "current": "gcp:storage/getProjectServiceAccount:getProjectServiceAccount",
                "majorVersion": 6
            },
            "google_storage_transfer_project_service_account": {
                "current": "gcp:storage/getTransferProjectServiceAccount:getTransferProjectServiceAccount",
                "majorVersion": 6
            },
            "google_storage_transfer_project_service_account_legacy": {
                "current": "gcp:storage/getTransferProjectServieAccount:getTransferProjectServieAccount",
                "majorVersion": 6
            },
            "google_tags_tag_key": {
                "current": "gcp:tags/getTagKey:getTagKey",
                "majorVersion": 6
            },
            "google_tags_tag_key_iam_policy": {
                "current": "gcp:tags/getTagKeyIamPolicy:getTagKeyIamPolicy",
                "majorVersion": 6
            },
            "google_tags_tag_value": {
                "current": "gcp:tags/getTagValue:getTagValue",
                "majorVersion": 6
            },
            "google_tags_tag_value_iam_policy": {
                "current": "gcp:tags/getTagValueIamPolicy:getTagValueIamPolicy",
                "majorVersion": 6
            },
            "google_tpu_tensorflow_versions": {
                "current": "gcp:tpu/getTensorflowVersions:getTensorflowVersions",
                "majorVersion": 6,
                "fields": {
                    "versions": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_vertex_ai_featurestore_entitytype_iam_policy": {
                "current": "gcp:vertex/getAiFeaturestoreEntitytypeIamPolicy:getAiFeaturestoreEntitytypeIamPolicy",
                "majorVersion": 6
            },
            "google_vertex_ai_featurestore_iam_policy": {
                "current": "gcp:vertex/getAiFeaturestoreIamPolicy:getAiFeaturestoreIamPolicy",
                "majorVersion": 6
            },
            "google_vertex_ai_index": {
                "current": "gcp:vertex/getAiIndex:getAiIndex",
                "majorVersion": 6,
                "fields": {
                    "deployed_indexes": {
                        "maxItemsOne": false
                    },
                    "index_stats": {
                        "maxItemsOne": false
                    },
                    "metadata": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "config": {
                                    "maxItemsOne": false,
                                    "elem": {
                                        "fields": {
                                            "algorithm_config": {
                                                "maxItemsOne": false,
                                                "elem": {
                                                    "fields": {
                                                        "brute_force_config": {
                                                            "maxItemsOne": false
                                                        },
                                                        "tree_ah_config": {
                                                            "maxItemsOne": false
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "google_vmwareengine_cluster": {
                "current": "gcp:vmwareengine/getCluster:getCluster",
                "majorVersion": 6,
                "fields": {
                    "node_type_configs": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_vmwareengine_network": {
                "current": "gcp:vmwareengine/getNetwork:getNetwork",
                "majorVersion": 6,
                "fields": {
                    "vpc_networks": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_vmwareengine_private_cloud": {
                "current": "gcp:vmwareengine/getPrivateCloud:getPrivateCloud",
                "majorVersion": 6,
                "fields": {
                    "hcx": {
                        "maxItemsOne": false
                    },
                    "management_cluster": {
                        "maxItemsOne": false,
                        "elem": {
                            "fields": {
                                "node_type_configs": {
                                    "maxItemsOne": false
                                }
                            }
                        }
                    },
                    "network_config": {
                        "maxItemsOne": false
                    },
                    "nsx": {
                        "maxItemsOne": false
                    },
                    "vcenter": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_vpc_access_connector": {
                "current": "gcp:vpcaccess/getConnector:getConnector",
                "majorVersion": 6,
                "fields": {
                    "connected_projects": {
                        "maxItemsOne": false
                    },
                    "subnet": {
                        "maxItemsOne": false
                    }
                }
            },
            "google_workstations_workstation_config_iam_policy": {
                "current": "gcp:workstations/getWorkstationConfigIamPolicy:getWorkstationConfigIamPolicy",
                "majorVersion": 6
            },
            "google_workstations_workstation_iam_policy": {
                "current": "gcp:workstations/getWorkstationIamPolicy:getWorkstationIamPolicy",
                "majorVersion": 6
            }
        }
    },
    "mux": {
        "resources": {
            "gcp:accesscontextmanager/accessLevel:AccessLevel": 0,
            "gcp:accesscontextmanager/accessLevelCondition:AccessLevelCondition": 0,
            "gcp:accesscontextmanager/accessLevels:AccessLevels": 0,
            "gcp:accesscontextmanager/accessPolicy:AccessPolicy": 0,
            "gcp:accesscontextmanager/accessPolicyIamBinding:AccessPolicyIamBinding": 0,
            "gcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMember": 0,
            "gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy": 0,
            "gcp:accesscontextmanager/authorizedOrgsDesc:AuthorizedOrgsDesc": 0,
            "gcp:accesscontextmanager/egressPolicy:EgressPolicy": 0,
            "gcp:accesscontextmanager/gcpUserAccessBinding:GcpUserAccessBinding": 0,
            "gcp:accesscontextmanager/ingressPolicy:IngressPolicy": 0,
            "gcp:accesscontextmanager/servicePerimeter:ServicePerimeter": 0,
            "gcp:accesscontextmanager/servicePerimeterEgressPolicy:ServicePerimeterEgressPolicy": 0,
            "gcp:accesscontextmanager/servicePerimeterIngressPolicy:ServicePerimeterIngressPolicy": 0,
            "gcp:accesscontextmanager/servicePerimeterResource:ServicePerimeterResource": 0,
            "gcp:accesscontextmanager/servicePerimeters:ServicePerimeters": 0,
            "gcp:activedirectory/domain:Domain": 0,
            "gcp:activedirectory/domainTrust:DomainTrust": 0,
            "gcp:activedirectory/peering:Peering": 0,
            "gcp:alloydb/backup:Backup": 0,
            "gcp:alloydb/cluster:Cluster": 0,
            "gcp:alloydb/instance:Instance": 0,
            "gcp:apigateway/api:Api": 0,
            "gcp:apigateway/apiConfig:ApiConfig": 0,
            "gcp:apigateway/apiConfigIamBinding:ApiConfigIamBinding": 0,
            "gcp:apigateway/apiConfigIamMember:ApiConfigIamMember": 0,
            "gcp:apigateway/apiConfigIamPolicy:ApiConfigIamPolicy": 0,
            "gcp:apigateway/apiIamBinding:ApiIamBinding": 0,
            "gcp:apigateway/apiIamMember:ApiIamMember": 0,
            "gcp:apigateway/apiIamPolicy:ApiIamPolicy": 0,
            "gcp:apigateway/gateway:Gateway": 0,
            "gcp:apigateway/gatewayIamBinding:GatewayIamBinding": 0,
            "gcp:apigateway/gatewayIamMember:GatewayIamMember": 0,
            "gcp:apigateway/gatewayIamPolicy:GatewayIamPolicy": 0,
            "gcp:apigee/addonsConfig:AddonsConfig": 0,
            "gcp:apigee/endpointAttachment:EndpointAttachment": 0,
            "gcp:apigee/envGroup:EnvGroup": 0,
            "gcp:apigee/envGroupAttachment:EnvGroupAttachment": 0,
            "gcp:apigee/envKeystore:EnvKeystore": 0,
            "gcp:apigee/envReferences:EnvReferences": 0,
            "gcp:apigee/environment:Environment": 0,
            "gcp:apigee/environmentIamBinding:EnvironmentIamBinding": 0,
            "gcp:apigee/environmentIamMember:EnvironmentIamMember": 0,
            "gcp:apigee/environmentIamPolicy:EnvironmentIamPolicy": 0,
            "gcp:apigee/flowhook:Flowhook": 0,
            "gcp:apigee/instance:Instance": 0,
            "gcp:apigee/instanceAttachment:InstanceAttachment": 0,
            "gcp:apigee/keystoresAliasesKeyCertFile:KeystoresAliasesKeyCertFile": 0,
            "gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12": 0,
            "gcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCert": 0,
            "gcp:apigee/natAddress:NatAddress": 0,
            "gcp:apigee/organization:Organization": 0,
            "gcp:apigee/sharedflow:Sharedflow": 0,
            "gcp:apigee/sharedflowDeployment:SharedflowDeployment": 0,
            "gcp:apigee/syncAuthorization:SyncAuthorization": 0,
            "gcp:appengine/application:Application": 0,
            "gcp:appengine/applicationUrlDispatchRules:ApplicationUrlDispatchRules": 0,
            "gcp:appengine/domainMapping:DomainMapping": 0,
            "gcp:appengine/engineSplitTraffic:EngineSplitTraffic": 0,
            "gcp:appengine/firewallRule:FirewallRule": 0,
            "gcp:appengine/flexibleAppVersion:FlexibleAppVersion": 0,
            "gcp:appengine/serviceNetworkSettings:ServiceNetworkSettings": 0,
            "gcp:appengine/standardAppVersion:StandardAppVersion": 0,
            "gcp:artifactregistry/repository:Repository": 0,
            "gcp:artifactregistry/repositoryIamBinding:RepositoryIamBinding": 0,
            "gcp:artifactregistry/repositoryIamMember:RepositoryIamMember": 0,
            "gcp:artifactregistry/repositoryIamPolicy:RepositoryIamPolicy": 0,
            "gcp:assuredworkloads/workload:Workload": 0,
            "gcp:beyondcorp/appConnection:AppConnection": 0,
            "gcp:beyondcorp/appConnector:AppConnector": 0,
            "gcp:beyondcorp/appGateway:AppGateway": 0,
            "gcp:bigquery/appProfile:AppProfile": 0,
            "gcp:bigquery/capacityCommitment:CapacityCommitment": 0,
            "gcp:bigquery/connection:Connection": 0,
            "gcp:bigquery/connectionIamBinding:ConnectionIamBinding": 0,
            "gcp:bigquery/connectionIamMember:ConnectionIamMember": 0,
            "gcp:bigquery/connectionIamPolicy:ConnectionIamPolicy": 0,
            "gcp:bigquery/dataTransferConfig:DataTransferConfig": 0,
            "gcp:bigquery/dataset:Dataset": 0,
            "gcp:bigquery/datasetAccess:DatasetAccess": 0,
            "gcp:bigquery/datasetIamBinding:DatasetIamBinding": 0,
            "gcp:bigquery/datasetIamMember:DatasetIamMember": 0,
            "gcp:bigquery/datasetIamPolicy:DatasetIamPolicy": 0,
            "gcp:bigquery/iamBinding:IamBinding": 0,
            "gcp:bigquery/iamMember:IamMember": 0,
            "gcp:bigquery/iamPolicy:IamPolicy": 0,
            "gcp:bigquery/job:Job": 0,
            "gcp:bigquery/reservation:Reservation": 0,
            "gcp:bigquery/reservationAssignment:ReservationAssignment": 0,
            "gcp:bigquery/routine:Routine": 0,
            "gcp:bigquery/table:Table": 0,
            "gcp:bigqueryanalyticshub/dataExchange:DataExchange": 0,
            "gcp:bigqueryanalyticshub/dataExchangeIamBinding:DataExchangeIamBinding": 0,
            "gcp:bigqueryanalyticshub/dataExchangeIamMember:DataExchangeIamMember": 0,
            "gcp:bigqueryanalyticshub/dataExchangeIamPolicy:DataExchangeIamPolicy": 0,
            "gcp:bigqueryanalyticshub/listing:Listing": 0,
            "gcp:bigqueryanalyticshub/listingIamBinding:ListingIamBinding": 0,
            "gcp:bigqueryanalyticshub/listingIamMember:ListingIamMember": 0,
            "gcp:bigqueryanalyticshub/listingIamPolicy:ListingIamPolicy": 0,
            "gcp:bigquerydatapolicy/dataPolicy:DataPolicy": 0,
            "gcp:bigquerydatapolicy/dataPolicyIamBinding:DataPolicyIamBinding": 0,
            "gcp:bigquerydatapolicy/dataPolicyIamMember:DataPolicyIamMember": 0,
            "gcp:bigquerydatapolicy/dataPolicyIamPolicy:DataPolicyIamPolicy": 0,
            "gcp:bigtable/gCPolicy:GCPolicy": 0,
            "gcp:bigtable/instance:Instance": 0,
            "gcp:bigtable/instanceIamBinding:InstanceIamBinding": 0,
            "gcp:bigtable/instanceIamMember:InstanceIamMember": 0,
            "gcp:bigtable/instanceIamPolicy:InstanceIamPolicy": 0,
            "gcp:bigtable/table:Table": 0,
            "gcp:bigtable/tableIamBinding:TableIamBinding": 0,
            "gcp:bigtable/tableIamMember:TableIamMember": 0,
            "gcp:bigtable/tableIamPolicy:TableIamPolicy": 0,
            "gcp:billing/accountIamBinding:AccountIamBinding": 0,
            "gcp:billing/accountIamMember:AccountIamMember": 0,
            "gcp:billing/accountIamPolicy:AccountIamPolicy": 0,
            "gcp:billing/budget:Budget": 0,
            "gcp:billing/subAccount:SubAccount": 0,
            "gcp:binaryauthorization/attestor:Attestor": 0,
            "gcp:binaryauthorization/attestorIamBinding:AttestorIamBinding": 0,
            "gcp:binaryauthorization/attestorIamMember:AttestorIamMember": 0,
            "gcp:binaryauthorization/attestorIamPolicy:AttestorIamPolicy": 0,
            "gcp:binaryauthorization/policy:Policy": 0,
            "gcp:certificateauthority/authority:Authority": 0,
            "gcp:certificateauthority/caPool:CaPool": 0,
            "gcp:certificateauthority/caPoolIamBinding:CaPoolIamBinding": 0,
            "gcp:certificateauthority/caPoolIamMember:CaPoolIamMember": 0,
            "gcp:certificateauthority/caPoolIamPolicy:CaPoolIamPolicy": 0,
            "gcp:certificateauthority/certificate:Certificate": 0,
            "gcp:certificateauthority/certificateTemplate:CertificateTemplate": 0,
            "gcp:certificateauthority/certificateTemplateIamBinding:CertificateTemplateIamBinding": 0,
            "gcp:certificateauthority/certificateTemplateIamMember:CertificateTemplateIamMember": 0,
            "gcp:certificateauthority/certificateTemplateIamPolicy:CertificateTemplateIamPolicy": 0,
            "gcp:certificatemanager/certificate:Certificate": 0,
            "gcp:certificatemanager/certificateIssuanceConfig:CertificateIssuanceConfig": 0,
            "gcp:certificatemanager/certificateMap:CertificateMap": 0,
            "gcp:certificatemanager/certificateMapEntry:CertificateMapEntry": 0,
            "gcp:certificatemanager/dnsAuthorization:DnsAuthorization": 0,
            "gcp:cloudasset/folderFeed:FolderFeed": 0,
            "gcp:cloudasset/organizationFeed:OrganizationFeed": 0,
            "gcp:cloudasset/projectFeed:ProjectFeed": 0,
            "gcp:cloudbuild/bitbucketServerConfig:BitbucketServerConfig": 0,
            "gcp:cloudbuild/trigger:Trigger": 0,
            "gcp:cloudbuild/workerPool:WorkerPool": 0,
            "gcp:cloudbuildv2/connection:Connection": 0,
            "gcp:cloudbuildv2/connectionIAMBinding:ConnectionIAMBinding": 0,
            "gcp:cloudbuildv2/connectionIAMMember:ConnectionIAMMember": 0,
            "gcp:cloudbuildv2/connectionIAMPolicy:ConnectionIAMPolicy": 0,
            "gcp:cloudbuildv2/repository:Repository": 0,
            "gcp:clouddeploy/deliveryPipeline:DeliveryPipeline": 0,
            "gcp:clouddeploy/target:Target": 0,
            "gcp:cloudfunctions/function:Function": 0,
            "gcp:cloudfunctions/functionIamBinding:FunctionIamBinding": 0,
            "gcp:cloudfunctions/functionIamMember:FunctionIamMember": 0,
            "gcp:cloudfunctions/functionIamPolicy:FunctionIamPolicy": 0,
            "gcp:cloudfunctionsv2/function:Function": 0,
            "gcp:cloudfunctionsv2/functionIamBinding:FunctionIamBinding": 0,
            "gcp:cloudfunctionsv2/functionIamMember:FunctionIamMember": 0,
            "gcp:cloudfunctionsv2/functionIamPolicy:FunctionIamPolicy": 0,
            "gcp:cloudidentity/group:Group": 0,
            "gcp:cloudidentity/groupMembership:GroupMembership": 0,
            "gcp:cloudids/endpoint:Endpoint": 0,
            "gcp:cloudrun/domainMapping:DomainMapping": 0,
            "gcp:cloudrun/iamBinding:IamBinding": 0,
            "gcp:cloudrun/iamMember:IamMember": 0,
            "gcp:cloudrun/iamPolicy:IamPolicy": 0,
            "gcp:cloudrun/service:Service": 0,
            "gcp:cloudrunv2/job:Job": 0,
            "gcp:cloudrunv2/jobIamBinding:JobIamBinding": 0,
            "gcp:cloudrunv2/jobIamMember:JobIamMember": 0,
            "gcp:cloudrunv2/jobIamPolicy:JobIamPolicy": 0,
            "gcp:cloudrunv2/service:Service": 0,
            "gcp:cloudrunv2/serviceIamBinding:ServiceIamBinding": 0,
            "gcp:cloudrunv2/serviceIamMember:ServiceIamMember": 0,
            "gcp:cloudrunv2/serviceIamPolicy:ServiceIamPolicy": 0,
            "gcp:cloudscheduler/job:Job": 0,
            "gcp:cloudtasks/queue:Queue": 0,
            "gcp:cloudtasks/queueIamBinding:QueueIamBinding": 0,
            "gcp:cloudtasks/queueIamMember:QueueIamMember": 0,
            "gcp:cloudtasks/queueIamPolicy:QueueIamPolicy": 0,
            "gcp:composer/environment:Environment": 0,
            "gcp:compute/address:Address": 0,
            "gcp:compute/attachedDisk:AttachedDisk": 0,
            "gcp:compute/autoscalar:Autoscalar": 0,
            "gcp:compute/autoscaler:Autoscaler": 0,
            "gcp:compute/backendBucket:BackendBucket": 0,
            "gcp:compute/backendBucketIamBinding:BackendBucketIamBinding": 0,
            "gcp:compute/backendBucketIamMember:BackendBucketIamMember": 0,
            "gcp:compute/backendBucketIamPolicy:BackendBucketIamPolicy": 0,
            "gcp:compute/backendBucketSignedUrlKey:BackendBucketSignedUrlKey": 0,
            "gcp:compute/backendService:BackendService": 0,
            "gcp:compute/backendServiceIamBinding:BackendServiceIamBinding": 0,
            "gcp:compute/backendServiceIamMember:BackendServiceIamMember": 0,
            "gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy": 0,
            "gcp:compute/backendServiceSignedUrlKey:BackendServiceSignedUrlKey": 0,
            "gcp:compute/caExternalAccountKey:CaExternalAccountKey": 0,
            "gcp:compute/disk:Disk": 0,
            "gcp:compute/diskAsyncReplication:DiskAsyncReplication": 0,
            "gcp:compute/diskIamBinding:DiskIamBinding": 0,
            "gcp:compute/diskIamMember:DiskIamMember": 0,
            "gcp:compute/diskIamPolicy:DiskIamPolicy": 0,
            "gcp:compute/diskResourcePolicyAttachment:DiskResourcePolicyAttachment": 0,
            "gcp:compute/externalVpnGateway:ExternalVpnGateway": 0,
            "gcp:compute/firewall:Firewall": 0,
            "gcp:compute/firewallPolicy:FirewallPolicy": 0,
            "gcp:compute/firewallPolicyAssociation:FirewallPolicyAssociation": 0,
            "gcp:compute/firewallPolicyRule:FirewallPolicyRule": 0,
            "gcp:compute/forwardingRule:ForwardingRule": 0,
            "gcp:compute/globalAddress:GlobalAddress": 0,
            "gcp:compute/globalForwardingRule:GlobalForwardingRule": 0,
            "gcp:compute/globalNetworkEndpoint:GlobalNetworkEndpoint": 0,
            "gcp:compute/globalNetworkEndpointGroup:GlobalNetworkEndpointGroup": 0,
            "gcp:compute/haVpnGateway:HaVpnGateway": 0,
            "gcp:compute/healthCheck:HealthCheck": 0,
            "gcp:compute/httpHealthCheck:HttpHealthCheck": 0,
            "gcp:compute/httpsHealthCheck:HttpsHealthCheck": 0,
            "gcp:compute/image:Image": 0,
            "gcp:compute/imageIamBinding:ImageIamBinding": 0,
            "gcp:compute/imageIamMember:ImageIamMember": 0,
            "gcp:compute/imageIamPolicy:ImageIamPolicy": 0,
            "gcp:compute/instance:Instance": 0,
            "gcp:compute/instanceFromMachineImage:InstanceFromMachineImage": 0,
            "gcp:compute/instanceFromTemplate:InstanceFromTemplate": 0,
            "gcp:compute/instanceGroup:InstanceGroup": 0,
            "gcp:compute/instanceGroupManager:InstanceGroupManager": 0,
            "gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort": 0,
            "gcp:compute/instanceIAMBinding:InstanceIAMBinding": 0,
            "gcp:compute/instanceIAMMember:InstanceIAMMember": 0,
            "gcp:compute/instanceIAMPolicy:InstanceIAMPolicy": 0,
            "gcp:compute/instanceTemplate:InstanceTemplate": 0,
            "gcp:compute/interconnectAttachment:InterconnectAttachment": 0,
            "gcp:compute/machineImage:MachineImage": 0,
            "gcp:compute/machineImageIamBinding:MachineImageIamBinding": 0,
            "gcp:compute/machineImageIamMember:MachineImageIamMember": 0,
            "gcp:compute/machineImageIamPolicy:MachineImageIamPolicy": 0,
            "gcp:compute/managedSslCertificate:ManagedSslCertificate": 0,
            "gcp:compute/mangedSslCertificate:MangedSslCertificate": 0,
            "gcp:compute/network:Network": 0,
            "gcp:compute/networkEdgeSecurityService:NetworkEdgeSecurityService": 0,
            "gcp:compute/networkEndpoint:NetworkEndpoint": 0,
            "gcp:compute/networkEndpointGroup:NetworkEndpointGroup": 0,
            "gcp:compute/networkEndpointList:NetworkEndpointList": 0,
            "gcp:compute/networkFirewallPolicy:NetworkFirewallPolicy": 0,
            "gcp:compute/networkFirewallPolicyAssociation:NetworkFirewallPolicyAssociation": 0,
            "gcp:compute/networkFirewallPolicyRule:NetworkFirewallPolicyRule": 0,
            "gcp:compute/networkPeering:NetworkPeering": 0,
            "gcp:compute/networkPeeringRoutesConfig:NetworkPeeringRoutesConfig": 0,
            "gcp:compute/nodeGroup:NodeGroup": 0,
            "gcp:compute/nodeTemplate:NodeTemplate": 0,
            "gcp:compute/organizationSecurityPolicy:OrganizationSecurityPolicy": 0,
            "gcp:compute/organizationSecurityPolicyAssociation:OrganizationSecurityPolicyAssociation": 0,
            "gcp:compute/organizationSecurityPolicyRule:OrganizationSecurityPolicyRule": 0,
            "gcp:compute/packetMirroring:PacketMirroring": 0,
            "gcp:compute/perInstanceConfig:PerInstanceConfig": 0,
            "gcp:compute/projectDefaultNetworkTier:ProjectDefaultNetworkTier": 0,
            "gcp:compute/projectMetadata:ProjectMetadata": 0,
            "gcp:compute/projectMetadataItem:ProjectMetadataItem": 0,
            "gcp:compute/publicAdvertisedPrefix:PublicAdvertisedPrefix": 0,
            "gcp:compute/publicDelegatedPrefix:PublicDelegatedPrefix": 0,
            "gcp:compute/regionAutoscaler:RegionAutoscaler": 0,
            "gcp:compute/regionBackendService:RegionBackendService": 0,
            "gcp:compute/regionBackendServiceIamBinding:RegionBackendServiceIamBinding": 0,
            "gcp:compute/regionBackendServiceIamMember:RegionBackendServiceIamMember": 0,
            "gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy": 0,
            "gcp:compute/regionCommitment:RegionCommitment": 0,
            "gcp:compute/regionDisk:RegionDisk": 0,
            "gcp:compute/regionDiskIamBinding:RegionDiskIamBinding": 0,
            "gcp:compute/regionDiskIamMember:RegionDiskIamMember": 0,
            "gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy": 0,
            "gcp:compute/regionDiskResourcePolicyAttachment:RegionDiskResourcePolicyAttachment": 0,
            "gcp:compute/regionHealthCheck:RegionHealthCheck": 0,
            "gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager": 0,
            "gcp:compute/regionInstanceTemplate:RegionInstanceTemplate": 0,
            "gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup": 0,
            "gcp:compute/regionNetworkFirewallPolicy:RegionNetworkFirewallPolicy": 0,
            "gcp:compute/regionNetworkFirewallPolicyAssociation:RegionNetworkFirewallPolicyAssociation": 0,
            "gcp:compute/regionNetworkFirewallPolicyRule:RegionNetworkFirewallPolicyRule": 0,
            "gcp:compute/regionPerInstanceConfig:RegionPerInstanceConfig": 0,
            "gcp:compute/regionSecurityPolicy:RegionSecurityPolicy": 0,
            "gcp:compute/regionSslCertificate:RegionSslCertificate": 0,
            "gcp:compute/regionSslPolicy:RegionSslPolicy": 0,
            "gcp:compute/regionTargetHttpProxy:RegionTargetHttpProxy": 0,
            "gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy": 0,
            "gcp:compute/regionTargetTcpProxy:RegionTargetTcpProxy": 0,
            "gcp:compute/regionUrlMap:RegionUrlMap": 0,
            "gcp:compute/reservation:Reservation": 0,
            "gcp:compute/resourcePolicy:ResourcePolicy": 0,
            "gcp:compute/route:Route": 0,
            "gcp:compute/router:Router": 0,
            "gcp:compute/routerInterface:RouterInterface": 0,
            "gcp:compute/routerNat:RouterNat": 0,
            "gcp:compute/routerPeer:RouterPeer": 0,
            "gcp:compute/sSLCertificate:SSLCertificate": 0,
            "gcp:compute/sSLPolicy:SSLPolicy": 0,
            "gcp:compute/securityPolicy:SecurityPolicy": 0,
            "gcp:compute/securityScanConfig:SecurityScanConfig": 0,
            "gcp:compute/serviceAttachment:ServiceAttachment": 0,
            "gcp:compute/sharedVPCHostProject:SharedVPCHostProject": 0,
            "gcp:compute/sharedVPCServiceProject:SharedVPCServiceProject": 0,
            "gcp:compute/snapshot:Snapshot": 0,
            "gcp:compute/snapshotIamBinding:SnapshotIamBinding": 0,
            "gcp:compute/snapshotIamMember:SnapshotIamMember": 0,
            "gcp:compute/snapshotIamPolicy:SnapshotIamPolicy": 0,
            "gcp:compute/subnetwork:Subnetwork": 0,
            "gcp:compute/subnetworkIAMBinding:SubnetworkIAMBinding": 0,
            "gcp:compute/subnetworkIAMMember:SubnetworkIAMMember": 0,
            "gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy": 0,
            "gcp:compute/targetGrpcProxy:TargetGrpcProxy": 0,
            "gcp:compute/targetHttpProxy:TargetHttpProxy": 0,
            "gcp:compute/targetHttpsProxy:TargetHttpsProxy": 0,
            "gcp:compute/targetInstance:TargetInstance": 0,
            "gcp:compute/targetPool:TargetPool": 0,
            "gcp:compute/targetSSLProxy:TargetSSLProxy": 0,
            "gcp:compute/targetTCPProxy:TargetTCPProxy": 0,
            "gcp:compute/uRLMap:URLMap": 0,
            "gcp:compute/vPNGateway:VPNGateway": 0,
            "gcp:compute/vPNTunnel:VPNTunnel": 0,
            "gcp:container/attachedCluster:AttachedCluster": 0,
            "gcp:container/awsCluster:AwsCluster": 0,
            "gcp:container/awsNodePool:AwsNodePool": 0,
            "gcp:container/azureClient:AzureClient": 0,
            "gcp:container/azureCluster:AzureCluster": 0,
            "gcp:container/azureNodePool:AzureNodePool": 0,
            "gcp:container/cluster:Cluster": 0,
            "gcp:container/nodePool:NodePool": 0,
            "gcp:container/registry:Registry": 0,
            "gcp:containeranalysis/note:Note": 0,
            "gcp:containeranalysis/noteIamBinding:NoteIamBinding": 0,
            "gcp:containeranalysis/noteIamMember:NoteIamMember": 0,
            "gcp:containeranalysis/noteIamPolicy:NoteIamPolicy": 0,
            "gcp:containeranalysis/occurence:Occurence": 0,
            "gcp:databasemigrationservice/connectionProfile:ConnectionProfile": 0,
            "gcp:datacatalog/entry:Entry": 0,
            "gcp:datacatalog/entryGroup:EntryGroup": 0,
            "gcp:datacatalog/entryGroupIamBinding:EntryGroupIamBinding": 0,
            "gcp:datacatalog/entryGroupIamMember:EntryGroupIamMember": 0,
            "gcp:datacatalog/entryGroupIamPolicy:EntryGroupIamPolicy": 0,
            "gcp:datacatalog/policyTag:PolicyTag": 0,
            "gcp:datacatalog/policyTagIamBinding:PolicyTagIamBinding": 0,
            "gcp:datacatalog/policyTagIamMember:PolicyTagIamMember": 0,
            "gcp:datacatalog/policyTagIamPolicy:PolicyTagIamPolicy": 0,
            "gcp:datacatalog/tag:Tag": 0,
            "gcp:datacatalog/tagTemplate:TagTemplate": 0,
            "gcp:datacatalog/tagTemplateIamBinding:TagTemplateIamBinding": 0,
            "gcp:datacatalog/tagTemplateIamMember:TagTemplateIamMember": 0,
            "gcp:datacatalog/tagTemplateIamPolicy:TagTemplateIamPolicy": 0,
            "gcp:datacatalog/taxonomy:Taxonomy": 0,
            "gcp:datacatalog/taxonomyIamBinding:TaxonomyIamBinding": 0,
            "gcp:datacatalog/taxonomyIamMember:TaxonomyIamMember": 0,
            "gcp:datacatalog/taxonomyIamPolicy:TaxonomyIamPolicy": 0,
            "gcp:dataflow/flexTemplateJob:FlexTemplateJob": 0,
            "gcp:dataflow/job:Job": 0,
            "gcp:dataform/repository:Repository": 0,
            "gcp:datafusion/instance:Instance": 0,
            "gcp:dataloss/preventionDeidentifyTemplate:PreventionDeidentifyTemplate": 0,
            "gcp:dataloss/preventionInspectTemplate:PreventionInspectTemplate": 0,
            "gcp:dataloss/preventionJobTrigger:PreventionJobTrigger": 0,
            "gcp:dataloss/preventionStoredInfoType:PreventionStoredInfoType": 0,
            "gcp:dataplex/asset:Asset": 0,
            "gcp:dataplex/assetIamBinding:AssetIamBinding": 0,
            "gcp:dataplex/assetIamMember:AssetIamMember": 0,
            "gcp:dataplex/assetIamPolicy:AssetIamPolicy": 0,
            "gcp:dataplex/datascan:Datascan": 0,
            "gcp:dataplex/datascanIamBinding:DatascanIamBinding": 0,
            "gcp:dataplex/datascanIamMember:DatascanIamMember": 0,
            "gcp:dataplex/datascanIamPolicy:DatascanIamPolicy": 0,
            "gcp:dataplex/lake:Lake": 0,
            "gcp:dataplex/lakeIamBinding:LakeIamBinding": 0,
            "gcp:dataplex/lakeIamMember:LakeIamMember": 0,
            "gcp:dataplex/lakeIamPolicy:LakeIamPolicy": 0,
            "gcp:dataplex/task:Task": 0,
            "gcp:dataplex/taskIamBinding:TaskIamBinding": 0,
            "gcp:dataplex/taskIamMember:TaskIamMember": 0,
            "gcp:dataplex/taskIamPolicy:TaskIamPolicy": 0,
            "gcp:dataplex/zone:Zone": 0,
            "gcp:dataplex/zoneIamBinding:ZoneIamBinding": 0,
            "gcp:dataplex/zoneIamMember:ZoneIamMember": 0,
            "gcp:dataplex/zoneIamPolicy:ZoneIamPolicy": 0,
            "gcp:dataproc/autoscalingPolicy:AutoscalingPolicy": 0,
            "gcp:dataproc/autoscalingPolicyIamBinding:AutoscalingPolicyIamBinding": 0,
            "gcp:dataproc/autoscalingPolicyIamMember:AutoscalingPolicyIamMember": 0,
            "gcp:dataproc/autoscalingPolicyIamPolicy:AutoscalingPolicyIamPolicy": 0,
            "gcp:dataproc/cluster:Cluster": 0,
            "gcp:dataproc/clusterIAMBinding:ClusterIAMBinding": 0,
            "gcp:dataproc/clusterIAMMember:ClusterIAMMember": 0,
            "gcp:dataproc/clusterIAMPolicy:ClusterIAMPolicy": 0,
            "gcp:dataproc/job:Job": 0,
            "gcp:dataproc/jobIAMBinding:JobIAMBinding": 0,
            "gcp:dataproc/jobIAMMember:JobIAMMember": 0,
            "gcp:dataproc/jobIAMPolicy:JobIAMPolicy": 0,
            "gcp:dataproc/metastoreFederation:MetastoreFederation": 0,
            "gcp:dataproc/metastoreFederationIamBinding:MetastoreFederationIamBinding": 0,
            "gcp:dataproc/metastoreFederationIamMember:MetastoreFederationIamMember": 0,
            "gcp:dataproc/metastoreFederationIamPolicy:MetastoreFederationIamPolicy": 0,
            "gcp:dataproc/metastoreService:MetastoreService": 0,
            "gcp:dataproc/metastoreServiceIamBinding:MetastoreServiceIamBinding": 0,
            "gcp:dataproc/metastoreServiceIamMember:MetastoreServiceIamMember": 0,
            "gcp:dataproc/metastoreServiceIamPolicy:MetastoreServiceIamPolicy": 0,
            "gcp:dataproc/workflowTemplate:WorkflowTemplate": 0,
            "gcp:datastore/dataStoreIndex:DataStoreIndex": 0,
            "gcp:datastream/connectionProfile:ConnectionProfile": 0,
            "gcp:datastream/privateConnection:PrivateConnection": 0,
            "gcp:datastream/stream:Stream": 0,
            "gcp:deploymentmanager/deployment:Deployment": 0,
            "gcp:diagflow/agent:Agent": 0,
            "gcp:diagflow/cxAgent:CxAgent": 0,
            "gcp:diagflow/cxEntityType:CxEntityType": 0,
            "gcp:diagflow/cxEnvironment:CxEnvironment": 0,
            "gcp:diagflow/cxFlow:CxFlow": 0,
            "gcp:diagflow/cxIntent:CxIntent": 0,
            "gcp:diagflow/cxPage:CxPage": 0,
            "gcp:diagflow/cxVersion:CxVersion": 0,
            "gcp:diagflow/cxWebhook:CxWebhook": 0,
            "gcp:diagflow/entityType:EntityType": 0,
            "gcp:diagflow/fulfillment:Fulfillment": 0,
            "gcp:diagflow/intent:Intent": 0,
            "gcp:dns/dnsManagedZoneIamBinding:DnsManagedZoneIamBinding": 0,
            "gcp:dns/dnsManagedZoneIamMember:DnsManagedZoneIamMember": 0,
            "gcp:dns/dnsManagedZoneIamPolicy:DnsManagedZoneIamPolicy": 0,
            "gcp:dns/managedZone:ManagedZone": 0,
            "gcp:dns/policy:Policy": 0,
            "gcp:dns/recordSet:RecordSet": 0,
            "gcp:dns/responsePolicy:ResponsePolicy": 0,
            "gcp:dns/responsePolicyRule:ResponsePolicyRule": 0,
            "gcp:endpoints/consumersIamBinding:ConsumersIamBinding": 0,
            "gcp:endpoints/consumersIamMember:ConsumersIamMember": 0,
            "gcp:endpoints/consumersIamPolicy:ConsumersIamPolicy": 0,
            "gcp:endpoints/service:Service": 0,
            "gcp:endpoints/serviceIamBinding:ServiceIamBinding": 0,
            "gcp:endpoints/serviceIamMember:ServiceIamMember": 0,
            "gcp:endpoints/serviceIamPolicy:ServiceIamPolicy": 0,
            "gcp:essentialcontacts/contact:Contact": 0,
            "gcp:essentialcontacts/documentAiProcessor:DocumentAiProcessor": 0,
            "gcp:essentialcontacts/documentAiProcessorDefaultVersion:DocumentAiProcessorDefaultVersion": 0,
            "gcp:eventarc/channel:Channel": 0,
            "gcp:eventarc/googleChannelConfig:GoogleChannelConfig": 0,
            "gcp:eventarc/trigger:Trigger": 0,
            "gcp:filestore/backup:Backup": 0,
            "gcp:filestore/instance:Instance": 0,
            "gcp:filestore/snapshot:Snapshot": 0,
            "gcp:firebase/androidApp:AndroidApp": 0,
            "gcp:firebase/appleApp:AppleApp": 0,
            "gcp:firebase/databaseInstance:DatabaseInstance": 0,
            "gcp:firebase/extensionsInstance:ExtensionsInstance": 0,
            "gcp:firebase/hostingChannel:HostingChannel": 0,
            "gcp:firebase/hostingRelease:HostingRelease": 0,
            "gcp:firebase/hostingSite:HostingSite": 0,
            "gcp:firebase/hostingVersion:HostingVersion": 0,
            "gcp:firebase/project:Project": 0,
            "gcp:firebase/projectLocation:ProjectLocation": 0,
            "gcp:firebase/storageBucket:StorageBucket": 0,
            "gcp:firebase/webApp:WebApp": 0,
            "gcp:firebaserules/release:Release": 0,
            "gcp:firebaserules/ruleset:Ruleset": 0,
            "gcp:firestore/database:Database": 0,
            "gcp:firestore/document:Document": 0,
            "gcp:firestore/field:Field": 0,
            "gcp:firestore/index:Index": 0,
            "gcp:folder/accessApprovalSettings:AccessApprovalSettings": 0,
            "gcp:folder/iAMBinding:IAMBinding": 0,
            "gcp:folder/iAMMember:IAMMember": 0,
            "gcp:folder/iAMPolicy:IAMPolicy": 0,
            "gcp:folder/iamAuditConfig:IamAuditConfig": 0,
            "gcp:folder/organizationPolicy:OrganizationPolicy": 0,
            "gcp:gameservices/gameServerCluster:GameServerCluster": 0,
            "gcp:gameservices/gameServerConfig:GameServerConfig": 0,
            "gcp:gameservices/gameServerDeployment:GameServerDeployment": 0,
            "gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout": 0,
            "gcp:gameservices/realm:Realm": 0,
            "gcp:gkebackup/backupPlan:BackupPlan": 0,
            "gcp:gkebackup/backupPlanIamBinding:BackupPlanIamBinding": 0,
            "gcp:gkebackup/backupPlanIamMember:BackupPlanIamMember": 0,
            "gcp:gkebackup/backupPlanIamPolicy:BackupPlanIamPolicy": 0,
            "gcp:gkehub/feature:Feature": 0,
            "gcp:gkehub/featureIamBinding:FeatureIamBinding": 0,
            "gcp:gkehub/featureIamMember:FeatureIamMember": 0,
            "gcp:gkehub/featureIamPolicy:FeatureIamPolicy": 0,
            "gcp:gkehub/featureMembership:FeatureMembership": 0,
            "gcp:gkehub/membership:Membership": 0,
            "gcp:gkehub/membershipIamBinding:MembershipIamBinding": 0,
            "gcp:gkehub/membershipIamMember:MembershipIamMember": 0,
            "gcp:gkehub/membershipIamPolicy:MembershipIamPolicy": 0,
            "gcp:gkeonprem/bareMetalAdminCluster:BareMetalAdminCluster": 0,
            "gcp:gkeonprem/bareMetalCluster:BareMetalCluster": 0,
            "gcp:gkeonprem/bareMetalNodePool:BareMetalNodePool": 0,
            "gcp:gkeonprem/vMwareCluster:VMwareCluster": 0,
            "gcp:gkeonprem/vMwareNodePool:VMwareNodePool": 0,
            "gcp:healthcare/consentStore:ConsentStore": 0,
            "gcp:healthcare/consentStoreIamBinding:ConsentStoreIamBinding": 0,
            "gcp:healthcare/consentStoreIamMember:ConsentStoreIamMember": 0,
            "gcp:healthcare/consentStoreIamPolicy:ConsentStoreIamPolicy": 0,
            "gcp:healthcare/dataset:Dataset": 0,
            "gcp:healthcare/datasetIamBinding:DatasetIamBinding": 0,
            "gcp:healthcare/datasetIamMember:DatasetIamMember": 0,
            "gcp:healthcare/datasetIamPolicy:DatasetIamPolicy": 0,
            "gcp:healthcare/dicomStore:DicomStore": 0,
            "gcp:healthcare/dicomStoreIamBinding:DicomStoreIamBinding": 0,
            "gcp:healthcare/dicomStoreIamMember:DicomStoreIamMember": 0,
            "gcp:healthcare/dicomStoreIamPolicy:DicomStoreIamPolicy": 0,
            "gcp:healthcare/fhirStore:FhirStore": 0,
            "gcp:healthcare/fhirStoreIamBinding:FhirStoreIamBinding": 0,
            "gcp:healthcare/fhirStoreIamMember:FhirStoreIamMember": 0,
            "gcp:healthcare/fhirStoreIamPolicy:FhirStoreIamPolicy": 0,
            "gcp:healthcare/hl7Store:Hl7Store": 0,
            "gcp:healthcare/hl7StoreIamBinding:Hl7StoreIamBinding": 0,
            "gcp:healthcare/hl7StoreIamMember:Hl7StoreIamMember": 0,
            "gcp:healthcare/hl7StoreIamPolicy:Hl7StoreIamPolicy": 0,
            "gcp:iam/accessBoundaryPolicy:AccessBoundaryPolicy": 0,
            "gcp:iam/denyPolicy:DenyPolicy": 0,
            "gcp:iam/workforcePool:WorkforcePool": 0,
            "gcp:iam/workforcePoolProvider:WorkforcePoolProvider": 0,
            "gcp:iam/workloadIdentityPool:WorkloadIdentityPool": 0,
            "gcp:iam/workloadIdentityPoolProvider:WorkloadIdentityPoolProvider": 0,
            "gcp:iap/appEngineServiceIamBinding:AppEngineServiceIamBinding": 0,
            "gcp:iap/appEngineServiceIamMember:AppEngineServiceIamMember": 0,
            "gcp:iap/appEngineServiceIamPolicy:AppEngineServiceIamPolicy": 0,
            "gcp:iap/appEngineVersionIamBinding:AppEngineVersionIamBinding": 0,
            "gcp:iap/appEngineVersionIamMember:AppEngineVersionIamMember": 0,
            "gcp:iap/appEngineVersionIamPolicy:AppEngineVersionIamPolicy": 0,
            "gcp:iap/brand:Brand": 0,
            "gcp:iap/client:Client": 0,
            "gcp:iap/tunnelIamBinding:TunnelIamBinding": 0,
            "gcp:iap/tunnelIamMember:TunnelIamMember": 0,
            "gcp:iap/tunnelIamPolicy:TunnelIamPolicy": 0,
            "gcp:iap/tunnelInstanceIAMBinding:TunnelInstanceIAMBinding": 0,
            "gcp:iap/tunnelInstanceIAMMember:TunnelInstanceIAMMember": 0,
            "gcp:iap/tunnelInstanceIAMPolicy:TunnelInstanceIAMPolicy": 0,
            "gcp:iap/webBackendServiceIamBinding:WebBackendServiceIamBinding": 0,
            "gcp:iap/webBackendServiceIamMember:WebBackendServiceIamMember": 0,
            "gcp:iap/webBackendServiceIamPolicy:WebBackendServiceIamPolicy": 0,
            "gcp:iap/webIamBinding:WebIamBinding": 0,
            "gcp:iap/webIamMember:WebIamMember": 0,
            "gcp:iap/webIamPolicy:WebIamPolicy": 0,
            "gcp:iap/webRegionBackendServiceIamBinding:WebRegionBackendServiceIamBinding": 0,
            "gcp:iap/webRegionBackendServiceIamMember:WebRegionBackendServiceIamMember": 0,
            "gcp:iap/webRegionBackendServiceIamPolicy:WebRegionBackendServiceIamPolicy": 0,
            "gcp:iap/webTypeAppEngingIamBinding:WebTypeAppEngingIamBinding": 0,
            "gcp:iap/webTypeAppEngingIamMember:WebTypeAppEngingIamMember": 0,
            "gcp:iap/webTypeAppEngingIamPolicy:WebTypeAppEngingIamPolicy": 0,
            "gcp:iap/webTypeComputeIamBinding:WebTypeComputeIamBinding": 0,
            "gcp:iap/webTypeComputeIamMember:WebTypeComputeIamMember": 0,
            "gcp:iap/webTypeComputeIamPolicy:WebTypeComputeIamPolicy": 0,
            "gcp:identityplatform/config:Config": 0,
            "gcp:identityplatform/defaultSupportedIdpConfig:DefaultSupportedIdpConfig": 0,
            "gcp:identityplatform/inboundSamlConfig:InboundSamlConfig": 0,
            "gcp:identityplatform/oauthIdpConfig:OauthIdpConfig": 0,
            "gcp:identityplatform/projectDefaultConfig:ProjectDefaultConfig": 0,
            "gcp:identityplatform/tenant:Tenant": 0,
            "gcp:identityplatform/tenantDefaultSupportedIdpConfig:TenantDefaultSupportedIdpConfig": 0,
            "gcp:identityplatform/tenantInboundSamlConfig:TenantInboundSamlConfig": 0,
            "gcp:identityplatform/tenantOauthIdpConfig:TenantOauthIdpConfig": 0,
            "gcp:iot/device:Device": 0,
            "gcp:iot/registry:Registry": 0,
            "gcp:iot/registryIamBinding:RegistryIamBinding": 0,
            "gcp:iot/registryIamMember:RegistryIamMember": 0,
            "gcp:iot/registryIamPolicy:RegistryIamPolicy": 0,
            "gcp:kms/cryptoKey:CryptoKey": 0,
            "gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding": 0,
            "gcp:kms/cryptoKeyIAMMember:CryptoKeyIAMMember": 0,
            "gcp:kms/cryptoKeyIAMPolicy:CryptoKeyIAMPolicy": 0,
            "gcp:kms/cryptoKeyVersion:CryptoKeyVersion": 0,
            "gcp:kms/keyRing:KeyRing": 0,
            "gcp:kms/keyRingIAMBinding:KeyRingIAMBinding": 0,
            "gcp:kms/keyRingIAMMember:KeyRingIAMMember": 0,
            "gcp:kms/keyRingIAMPolicy:KeyRingIAMPolicy": 0,
            "gcp:kms/keyRingImportJob:KeyRingImportJob": 0,
            "gcp:kms/registry:Registry": 0,
            "gcp:kms/secretCiphertext:SecretCiphertext": 0,
            "gcp:logging/billingAccountBucketConfig:BillingAccountBucketConfig": 0,
            "gcp:logging/billingAccountExclusion:BillingAccountExclusion": 0,
            "gcp:logging/billingAccountSink:BillingAccountSink": 0,
            "gcp:logging/folderBucketConfig:FolderBucketConfig": 0,
            "gcp:logging/folderExclusion:FolderExclusion": 0,
            "gcp:logging/folderSink:FolderSink": 0,
            "gcp:logging/linkedDataset:LinkedDataset": 0,
            "gcp:logging/logView:LogView": 0,
            "gcp:logging/metric:Metric": 0,
            "gcp:logging/organizationBucketConfig:OrganizationBucketConfig": 0,
            "gcp:logging/organizationExclusion:OrganizationExclusion": 0,
            "gcp:logging/organizationSink:OrganizationSink": 0,
            "gcp:logging/projectBucketConfig:ProjectBucketConfig": 0,
            "gcp:logging/projectExclusion:ProjectExclusion": 0,
            "gcp:logging/projectSink:ProjectSink": 0,
            "gcp:looker/instance:Instance": 0,
            "gcp:memcache/instance:Instance": 0,
            "gcp:ml/engineModel:EngineModel": 0,
            "gcp:monitoring/alertPolicy:AlertPolicy": 0,
            "gcp:monitoring/customService:CustomService": 0,
            "gcp:monitoring/dashboard:Dashboard": 0,
            "gcp:monitoring/genericService:GenericService": 0,
            "gcp:monitoring/group:Group": 0,
            "gcp:monitoring/metricDescriptor:MetricDescriptor": 0,
            "gcp:monitoring/monitoredProject:MonitoredProject": 0,
            "gcp:monitoring/notificationChannel:NotificationChannel": 0,
            "gcp:monitoring/slo:Slo": 0,
            "gcp:monitoring/uptimeCheckConfig:UptimeCheckConfig": 0,
            "gcp:networkconnectivity/hub:Hub": 0,
            "gcp:networkconnectivity/spoke:Spoke": 0,
            "gcp:networkmanagement/connectivityTest:ConnectivityTest": 0,
            "gcp:networksecurity/addressGroup:AddressGroup": 0,
            "gcp:networksecurity/authorizationPolicy:AuthorizationPolicy": 0,
            "gcp:networksecurity/clientTlsPolicy:ClientTlsPolicy": 0,
            "gcp:networksecurity/gatewaySecurityPolicy:GatewaySecurityPolicy": 0,
            "gcp:networksecurity/gatewaySecurityPolicyRule:GatewaySecurityPolicyRule": 0,
            "gcp:networksecurity/serverTlsPolicy:ServerTlsPolicy": 0,
            "gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy": 0,
            "gcp:networksecurity/urlList:UrlList": 0,
            "gcp:networkservices/edgeCacheKeyset:EdgeCacheKeyset": 0,
            "gcp:networkservices/edgeCacheOrigin:EdgeCacheOrigin": 0,
            "gcp:networkservices/edgeCacheService:EdgeCacheService": 0,
            "gcp:networkservices/endpointPolicy:EndpointPolicy": 0,
            "gcp:networkservices/gateway:Gateway": 0,
            "gcp:networkservices/grpcRoute:GrpcRoute": 0,
            "gcp:networkservices/httpRoute:HttpRoute": 0,
            "gcp:networkservices/mesh:Mesh": 0,
            "gcp:networkservices/serviceBinding:ServiceBinding": 0,
            "gcp:networkservices/tcpRoute:TcpRoute": 0,
            "gcp:networkservices/tlsRoute:TlsRoute": 0,
            "gcp:notebooks/environment:Environment": 0,
            "gcp:notebooks/instance:Instance": 0,
            "gcp:notebooks/instanceIamBinding:InstanceIamBinding": 0,
            "gcp:notebooks/instanceIamMember:InstanceIamMember": 0,
            "gcp:notebooks/instanceIamPolicy:InstanceIamPolicy": 0,
            "gcp:notebooks/location:Location": 0,
            "gcp:notebooks/runtime:Runtime": 0,
            "gcp:notebooks/runtimeIamBinding:RuntimeIamBinding": 0,
            "gcp:notebooks/runtimeIamMember:RuntimeIamMember": 0,
            "gcp:notebooks/runtimeIamPolicy:RuntimeIamPolicy": 0,
            "gcp:organizations/accessApprovalSettings:AccessApprovalSettings": 0,
            "gcp:organizations/folder:Folder": 0,
            "gcp:organizations/iAMBinding:IAMBinding": 0,
            "gcp:organizations/iAMCustomRole:IAMCustomRole": 0,
            "gcp:organizations/iAMMember:IAMMember": 0,
            "gcp:organizations/iAMPolicy:IAMPolicy": 0,
            "gcp:organizations/iamAuditConfig:IamAuditConfig": 0,
            "gcp:organizations/policy:Policy": 0,
            "gcp:organizations/project:Project": 0,
            "gcp:orgpolicy/customConstraint:CustomConstraint": 0,
            "gcp:orgpolicy/policy:Policy": 0,
            "gcp:osconfig/guestPolicies:GuestPolicies": 0,
            "gcp:osconfig/osPolicyAssignment:OsPolicyAssignment": 0,
            "gcp:osconfig/patchDeployment:PatchDeployment": 0,
            "gcp:oslogin/sshPublicKey:SshPublicKey": 0,
            "gcp:projects/accessApprovalSettings:AccessApprovalSettings": 0,
            "gcp:projects/apiKey:ApiKey": 0,
            "gcp:projects/defaultServiceAccounts:DefaultServiceAccounts": 0,
            "gcp:projects/iAMAuditConfig:IAMAuditConfig": 0,
            "gcp:projects/iAMBinding:IAMBinding": 0,
            "gcp:projects/iAMCustomRole:IAMCustomRole": 0,
            "gcp:projects/iAMMember:IAMMember": 0,
            "gcp:projects/iAMPolicy:IAMPolicy": 0,
            "gcp:projects/organizationPolicy:OrganizationPolicy": 0,
            "gcp:projects/service:Service": 0,
            "gcp:projects/serviceIdentity:ServiceIdentity": 0,
            "gcp:projects/usageExportBucket:UsageExportBucket": 0,
            "gcp:pubsub/liteReservation:LiteReservation": 0,
            "gcp:pubsub/liteSubscription:LiteSubscription": 0,
            "gcp:pubsub/liteTopic:LiteTopic": 0,
            "gcp:pubsub/schema:Schema": 0,
            "gcp:pubsub/subscription:Subscription": 0,
            "gcp:pubsub/subscriptionIAMBinding:SubscriptionIAMBinding": 0,
            "gcp:pubsub/subscriptionIAMMember:SubscriptionIAMMember": 0,
            "gcp:pubsub/subscriptionIAMPolicy:SubscriptionIAMPolicy": 0,
            "gcp:pubsub/topic:Topic": 0,
            "gcp:pubsub/topicIAMBinding:TopicIAMBinding": 0,
            "gcp:pubsub/topicIAMMember:TopicIAMMember": 0,
            "gcp:pubsub/topicIAMPolicy:TopicIAMPolicy": 0,
            "gcp:recaptcha/enterpriseKey:EnterpriseKey": 0,
            "gcp:redis/instance:Instance": 0,
            "gcp:resourcemanager/lien:Lien": 0,
            "gcp:runtimeconfig/config:Config": 0,
            "gcp:runtimeconfig/configIamBinding:ConfigIamBinding": 0,
            "gcp:runtimeconfig/configIamMember:ConfigIamMember": 0,
            "gcp:runtimeconfig/configIamPolicy:ConfigIamPolicy": 0,
            "gcp:runtimeconfig/variable:Variable": 0,
            "gcp:secretmanager/secret:Secret": 0,
            "gcp:secretmanager/secretIamBinding:SecretIamBinding": 0,
            "gcp:secretmanager/secretIamMember:SecretIamMember": 0,
            "gcp:secretmanager/secretIamPolicy:SecretIamPolicy": 0,
            "gcp:secretmanager/secretVersion:SecretVersion": 0,
            "gcp:securitycenter/instanceIamBinding:InstanceIamBinding": 0,
            "gcp:securitycenter/instanceIamMember:InstanceIamMember": 0,
            "gcp:securitycenter/instanceIamPolicy:InstanceIamPolicy": 0,
            "gcp:securitycenter/muteConfig:MuteConfig": 0,
            "gcp:securitycenter/notificationConfig:NotificationConfig": 0,
            "gcp:securitycenter/source:Source": 0,
            "gcp:securitycenter/sourceIamBinding:SourceIamBinding": 0,
            "gcp:securitycenter/sourceIamMember:SourceIamMember": 0,
            "gcp:securitycenter/sourceIamPolicy:SourceIamPolicy": 0,
            "gcp:serviceAccount/account:Account": 0,
            "gcp:serviceAccount/iAMBinding:IAMBinding": 0,
            "gcp:serviceAccount/iAMMember:IAMMember": 0,
            "gcp:serviceAccount/iAMPolicy:IAMPolicy": 0,
            "gcp:serviceAccount/key:Key": 0,
            "gcp:servicedirectory/endpoint:Endpoint": 0,
            "gcp:servicedirectory/namespace:Namespace": 0,
            "gcp:servicedirectory/namespaceIamBinding:NamespaceIamBinding": 0,
            "gcp:servicedirectory/namespaceIamMember:NamespaceIamMember": 0,
            "gcp:servicedirectory/namespaceIamPolicy:NamespaceIamPolicy": 0,
            "gcp:servicedirectory/service:Service": 0,
            "gcp:servicedirectory/serviceIamBinding:ServiceIamBinding": 0,
            "gcp:servicedirectory/serviceIamMember:ServiceIamMember": 0,
            "gcp:servicedirectory/serviceIamPolicy:ServiceIamPolicy": 0,
            "gcp:servicenetworking/connection:Connection": 0,
            "gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain": 0,
            "gcp:serviceusage/consumerQuotaOverride:ConsumerQuotaOverride": 0,
            "gcp:sourcerepo/repository:Repository": 0,
            "gcp:sourcerepo/repositoryIamBinding:RepositoryIamBinding": 0,
            "gcp:sourcerepo/repositoryIamMember:RepositoryIamMember": 0,
            "gcp:sourcerepo/repositoryIamPolicy:RepositoryIamPolicy": 0,
            "gcp:spanner/database:Database": 0,
            "gcp:spanner/databaseIAMBinding:DatabaseIAMBinding": 0,
            "gcp:spanner/databaseIAMMember:DatabaseIAMMember": 0,
            "gcp:spanner/databaseIAMPolicy:DatabaseIAMPolicy": 0,
            "gcp:spanner/instance:Instance": 0,
            "gcp:spanner/instanceIAMBinding:InstanceIAMBinding": 0,
            "gcp:spanner/instanceIAMMember:InstanceIAMMember": 0,
            "gcp:spanner/instanceIAMPolicy:InstanceIAMPolicy": 0,
            "gcp:sql/database:Database": 0,
            "gcp:sql/databaseInstance:DatabaseInstance": 0,
            "gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance": 0,
            "gcp:sql/sslCert:SslCert": 0,
            "gcp:sql/user:User": 0,
            "gcp:storage/bucket:Bucket": 0,
            "gcp:storage/bucketACL:BucketACL": 0,
            "gcp:storage/bucketAccessControl:BucketAccessControl": 0,
            "gcp:storage/bucketIAMBinding:BucketIAMBinding": 0,
            "gcp:storage/bucketIAMMember:BucketIAMMember": 0,
            "gcp:storage/bucketIAMPolicy:BucketIAMPolicy": 0,
            "gcp:storage/bucketObject:BucketObject": 0,
            "gcp:storage/defaultObjectACL:DefaultObjectACL": 0,
            "gcp:storage/defaultObjectAccessControl:DefaultObjectAccessControl": 0,
            "gcp:storage/hmacKey:HmacKey": 0,
            "gcp:storage/notification:Notification": 0,
            "gcp:storage/objectACL:ObjectACL": 0,
            "gcp:storage/objectAccessControl:ObjectAccessControl": 0,
            "gcp:storage/transferAgentPool:TransferAgentPool": 0,
            "gcp:storage/transferJob:TransferJob": 0,
            "gcp:tags/locationTagBinding:LocationTagBinding": 0,
            "gcp:tags/tagBinding:TagBinding": 0,
            "gcp:tags/tagKey:TagKey": 0,
            "gcp:tags/tagKeyIamBinding:TagKeyIamBinding": 0,
            "gcp:tags/tagKeyIamMember:TagKeyIamMember": 0,
            "gcp:tags/tagKeyIamPolicy:TagKeyIamPolicy": 0,
            "gcp:tags/tagValue:TagValue": 0,
            "gcp:tags/tagValueIamBinding:TagValueIamBinding": 0,
            "gcp:tags/tagValueIamMember:TagValueIamMember": 0,
            "gcp:tags/tagValueIamPolicy:TagValueIamPolicy": 0,
            "gcp:tpu/node:Node": 0,
            "gcp:vertex/aiDataset:AiDataset": 0,
            "gcp:vertex/aiEndpoint:AiEndpoint": 0,
            "gcp:vertex/aiFeatureStore:AiFeatureStore": 0,
            "gcp:vertex/aiFeatureStoreEntityType:AiFeatureStoreEntityType": 0,
            "gcp:vertex/aiFeatureStoreEntityTypeFeature:AiFeatureStoreEntityTypeFeature": 0,
            "gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding": 0,
            "gcp:vertex/aiFeatureStoreEntityTypeIamMember:AiFeatureStoreEntityTypeIamMember": 0,
            "gcp:vertex/aiFeatureStoreEntityTypeIamPolicy:AiFeatureStoreEntityTypeIamPolicy": 0,
            "gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding": 0,
            "gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember": 0,
            "gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy": 0,
            "gcp:vertex/aiIndex:AiIndex": 0,
            "gcp:vertex/aiIndexEndpoint:AiIndexEndpoint": 0,
            "gcp:vertex/aiMetadataStore:AiMetadataStore": 0,
            "gcp:vertex/aiTensorboard:AiTensorboard": 0,
            "gcp:vmwareengine/cluster:Cluster": 0,
            "gcp:vmwareengine/network:Network": 0,
            "gcp:vmwareengine/privateCloud:PrivateCloud": 0,
            "gcp:vpcaccess/connector:Connector": 0,
            "gcp:workflows/workflow:Workflow": 0,
            "gcp:workstations/workstation:Workstation": 0,
            "gcp:workstations/workstationCluster:WorkstationCluster": 0,
            "gcp:workstations/workstationConfig:WorkstationConfig": 0,
            "gcp:workstations/workstationConfigIamBinding:WorkstationConfigIamBinding": 0,
            "gcp:workstations/workstationConfigIamMember:WorkstationConfigIamMember": 0,
            "gcp:workstations/workstationConfigIamPolicy:WorkstationConfigIamPolicy": 0,
            "gcp:workstations/workstationIamBinding:WorkstationIamBinding": 0,
            "gcp:workstations/workstationIamMember:WorkstationIamMember": 0,
            "gcp:workstations/workstationIamPolicy:WorkstationIamPolicy": 0
        },
        "functions": {
            "gcp:accessapproval/getFolderServiceAccount:getFolderServiceAccount": 0,
            "gcp:accessapproval/getOrganizationServiceAccount:getOrganizationServiceAccount": 0,
            "gcp:accessapproval/getProjectServiceAccount:getProjectServiceAccount": 0,
            "gcp:accesscontextmanager/getAccessPolicyIamPolicy:getAccessPolicyIamPolicy": 0,
            "gcp:alloydb/getLocations:getLocations": 0,
            "gcp:alloydb/getSupportedDatabaseFlags:getSupportedDatabaseFlags": 0,
            "gcp:apigateway/getApiConfigIamPolicy:getApiConfigIamPolicy": 0,
            "gcp:apigateway/getApiIamPolicy:getApiIamPolicy": 0,
            "gcp:apigateway/getGatewayIamPolicy:getGatewayIamPolicy": 0,
            "gcp:apigee/getEnvironmentIamPolicy:getEnvironmentIamPolicy": 0,
            "gcp:appengine/getDefaultServiceAccount:getDefaultServiceAccount": 0,
            "gcp:artifactregistry/getRepository:getRepository": 0,
            "gcp:artifactregistry/getRepositoryIamPolicy:getRepositoryIamPolicy": 0,
            "gcp:beyondcorp/getAppConnection:getAppConnection": 0,
            "gcp:beyondcorp/getAppConnector:getAppConnector": 0,
            "gcp:beyondcorp/getAppGateway:getAppGateway": 0,
            "gcp:bigquery/getConnectionIamPolicy:getConnectionIamPolicy": 0,
            "gcp:bigquery/getDatasetIamPolicy:getDatasetIamPolicy": 0,
            "gcp:bigquery/getDefaultServiceAccount:getDefaultServiceAccount": 0,
            "gcp:bigquery/getTableIamPolicy:getTableIamPolicy": 0,
            "gcp:bigqueryanalyticshub/getDataExchangeIamPolicy:getDataExchangeIamPolicy": 0,
            "gcp:bigqueryanalyticshub/getListingIamPolicy:getListingIamPolicy": 0,
            "gcp:bigquerydatapolicy/getIamPolicy:getIamPolicy": 0,
            "gcp:bigtable/getInstanceIamPolicy:getInstanceIamPolicy": 0,
            "gcp:bigtable/getTableIamPolicy:getTableIamPolicy": 0,
            "gcp:billing/getAccountIamPolicy:getAccountIamPolicy": 0,
            "gcp:binaryauthorization/getAttestorIamPolicy:getAttestorIamPolicy": 0,
            "gcp:certificateauthority/getAuthority:getAuthority": 0,
            "gcp:certificateauthority/getCaPoolIamPolicy:getCaPoolIamPolicy": 0,
            "gcp:certificateauthority/getCertificateTemplateIamPolicy:getCertificateTemplateIamPolicy": 0,
            "gcp:cloudasset/getResourcesSearchAll:getResourcesSearchAll": 0,
            "gcp:cloudbuild/getTrigger:getTrigger": 0,
            "gcp:cloudbuildv2/getConnectionIamPolicy:getConnectionIamPolicy": 0,
            "gcp:cloudfunctions/getFunction:getFunction": 0,
            "gcp:cloudfunctions/getFunctionIamPolicy:getFunctionIamPolicy": 0,
            "gcp:cloudfunctionsv2/getFunction:getFunction": 0,
            "gcp:cloudfunctionsv2/getFunctionIamPolicy:getFunctionIamPolicy": 0,
            "gcp:cloudidentity/getGroupMemberships:getGroupMemberships": 0,
            "gcp:cloudidentity/getGroups:getGroups": 0,
            "gcp:cloudrun/getLocations:getLocations": 0,
            "gcp:cloudrun/getService:getService": 0,
            "gcp:cloudrun/getServiceIamPolicy:getServiceIamPolicy": 0,
            "gcp:cloudrunv2/getJobIamPolicy:getJobIamPolicy": 0,
            "gcp:cloudrunv2/getServiceIamPolicy:getServiceIamPolicy": 0,
            "gcp:cloudtasks/getQueueIamPolicy:getQueueIamPolicy": 0,
            "gcp:composer/getEnvironment:getEnvironment": 0,
            "gcp:composer/getImageVersions:getImageVersions": 0,
            "gcp:compute/getAddress:getAddress": 0,
            "gcp:compute/getAddresses:getAddresses": 0,
            "gcp:compute/getBackendBucket:getBackendBucket": 0,
            "gcp:compute/getBackendBucketIamPolicy:getBackendBucketIamPolicy": 0,
            "gcp:compute/getBackendService:getBackendService": 0,
            "gcp:compute/getBackendServiceIamPolicy:getBackendServiceIamPolicy": 0,
            "gcp:compute/getCertificate:getCertificate": 0,
            "gcp:compute/getDefaultServiceAccount:getDefaultServiceAccount": 0,
            "gcp:compute/getDisk:getDisk": 0,
            "gcp:compute/getDiskIamPolicy:getDiskIamPolicy": 0,
            "gcp:compute/getForwardingRule:getForwardingRule": 0,
            "gcp:compute/getGlobalAddress:getGlobalAddress": 0,
            "gcp:compute/getGlobalForwardingRule:getGlobalForwardingRule": 0,
            "gcp:compute/getHcVpnGateway:getHcVpnGateway": 0,
            "gcp:compute/getHealthCheck:getHealthCheck": 0,
            "gcp:compute/getImage:getImage": 0,
            "gcp:compute/getImageIamPolicy:getImageIamPolicy": 0,
            "gcp:compute/getInstance:getInstance": 0,
            "gcp:compute/getInstanceGroup:getInstanceGroup": 0,
            "gcp:compute/getInstanceGroupManager:getInstanceGroupManager": 0,
            "gcp:compute/getInstanceIamPolicy:getInstanceIamPolicy": 0,
            "gcp:compute/getInstanceSerialPort:getInstanceSerialPort": 0,
            "gcp:compute/getInstanceTemplate:getInstanceTemplate": 0,
            "gcp:compute/getLBIPRanges:getLBIPRanges": 0,
            "gcp:compute/getMachineImageIamPolicy:getMachineImageIamPolicy": 0,
            "gcp:compute/getNetblockIPRanges:getNetblockIPRanges": 0,
            "gcp:compute/getNetwork:getNetwork": 0,
            "gcp:compute/getNetworkEndpointGroup:getNetworkEndpointGroup": 0,
            "gcp:compute/getNetworkPeering:getNetworkPeering": 0,
            "gcp:compute/getNodeTypes:getNodeTypes": 0,
            "gcp:compute/getRegionBackendServiceIamPolicy:getRegionBackendServiceIamPolicy": 0,
            "gcp:compute/getRegionDiskIamPolicy:getRegionDiskIamPolicy": 0,
            "gcp:compute/getRegionInstanceGroup:getRegionInstanceGroup": 0,
            "gcp:compute/getRegionInstanceTemplate:getRegionInstanceTemplate": 0,
            "gcp:compute/getRegionNetworkEndpointGroup:getRegionNetworkEndpointGroup": 0,
            "gcp:compute/getRegionSslCertificate:getRegionSslCertificate": 0,
            "gcp:compute/getRegions:getRegions": 0,
            "gcp:compute/getResourcePolicy:getResourcePolicy": 0,
            "gcp:compute/getRouter:getRouter": 0,
            "gcp:compute/getRouterNat:getRouterNat": 0,
            "gcp:compute/getRouterStatus:getRouterStatus": 0,
            "gcp:compute/getSSLPolicy:getSSLPolicy": 0,
            "gcp:compute/getSnapshot:getSnapshot": 0,
            "gcp:compute/getSnapshotIamPolicy:getSnapshotIamPolicy": 0,
            "gcp:compute/getSubnetwork:getSubnetwork": 0,
            "gcp:compute/getSubnetworkIamPolicy:getSubnetworkIamPolicy": 0,
            "gcp:compute/getVPNGateway:getVPNGateway": 0,
            "gcp:compute/getZones:getZones": 0,
            "gcp:compute/routerStatus:RouterStatus": 0,
            "gcp:container/getAttachedInstallManifest:getAttachedInstallManifest": 0,
            "gcp:container/getAttachedVersions:getAttachedVersions": 0,
            "gcp:container/getAwsVersions:getAwsVersions": 0,
            "gcp:container/getAzureVersions:getAzureVersions": 0,
            "gcp:container/getCluster:getCluster": 0,
            "gcp:container/getEngineVersions:getEngineVersions": 0,
            "gcp:container/getRegistryImage:getRegistryImage": 0,
            "gcp:container/getRegistryRepository:getRegistryRepository": 0,
            "gcp:containeranalysis/getNoteIamPolicy:getNoteIamPolicy": 0,
            "gcp:datacatalog/getEntryGroupIamPolicy:getEntryGroupIamPolicy": 0,
            "gcp:datacatalog/getPolicyTagIamPolicy:getPolicyTagIamPolicy": 0,
            "gcp:datacatalog/getTagTemplateIamPolicy:getTagTemplateIamPolicy": 0,
            "gcp:datacatalog/getTaxonomyIamPolicy:getTaxonomyIamPolicy": 0,
            "gcp:datafusion/getInstanceIamPolicy:getInstanceIamPolicy": 0,
            "gcp:dataplex/getAssetIamPolicy:getAssetIamPolicy": 0,
            "gcp:dataplex/getDatascanIamPolicy:getDatascanIamPolicy": 0,
            "gcp:dataplex/getLakeIamPolicy:getLakeIamPolicy": 0,
            "gcp:dataplex/getTaskIamPolicy:getTaskIamPolicy": 0,
            "gcp:dataplex/getZoneIamPolicy:getZoneIamPolicy": 0,
            "gcp:dataproc/getAutoscalingPolicyIamPolicy:getAutoscalingPolicyIamPolicy": 0,
            "gcp:dataproc/getClusterIamPolicy:getClusterIamPolicy": 0,
            "gcp:dataproc/getJobIamPolicy:getJobIamPolicy": 0,
            "gcp:dataproc/getMetastoreFederationIamPolicy:getMetastoreFederationIamPolicy": 0,
            "gcp:dataproc/getMetastoreServiceIamPolicy:getMetastoreServiceIamPolicy": 0,
            "gcp:datastream/getStaticIps:getStaticIps": 0,
            "gcp:dns/getKeys:getKeys": 1,
            "gcp:dns/getManagedZone:getManagedZone": 1,
            "gcp:dns/getManagedZoneIamPolicy:getManagedZoneIamPolicy": 0,
            "gcp:dns/getRecordSet:getRecordSet": 1,
            "gcp:endpoints/getServiceConsumersIamPolicy:getServiceConsumersIamPolicy": 0,
            "gcp:endpoints/getServiceIamPolicy:getServiceIamPolicy": 0,
            "gcp:firebase/getAndroidApp:getAndroidApp": 0,
            "gcp:firebase/getAndroidAppConfig:getAndroidAppConfig": 1,
            "gcp:firebase/getAppleApp:getAppleApp": 0,
            "gcp:firebase/getAppleAppConfig:getAppleAppConfig": 1,
            "gcp:firebase/getHostingChannel:getHostingChannel": 0,
            "gcp:firebase/getWebApp:getWebApp": 0,
            "gcp:firebase/getWebAppConfig:getWebAppConfig": 1,
            "gcp:folder/getIamPolicy:getIamPolicy": 0,
            "gcp:folder/getOrganizationPolicy:getOrganizationPolicy": 0,
            "gcp:gameservices/getGameServerDeploymentRollout:getGameServerDeploymentRollout": 0,
            "gcp:gkebackup/getBackupPlanIamPolicy:getBackupPlanIamPolicy": 0,
            "gcp:gkehub/getFeatureIamPolicy:getFeatureIamPolicy": 0,
            "gcp:gkehub/getMembershipIamPolicy:getMembershipIamPolicy": 0,
            "gcp:healthcare/getConsentStoreIamPolicy:getConsentStoreIamPolicy": 0,
            "gcp:healthcare/getDatasetIamPolicy:getDatasetIamPolicy": 0,
            "gcp:healthcare/getDicomStoreIamPolicy:getDicomStoreIamPolicy": 0,
            "gcp:healthcare/getFhirStoreIamPolicy:getFhirStoreIamPolicy": 0,
            "gcp:healthcare/getHl7V2StoreIamPolicy:getHl7V2StoreIamPolicy": 0,
            "gcp:iam/getRule:getRule": 0,
            "gcp:iam/getTestablePermissions:getTestablePermissions": 0,
            "gcp:iam/getWorkloadIdentityPool:getWorkloadIdentityPool": 0,
            "gcp:iam/getWorkloadIdentityPoolProvider:getWorkloadIdentityPoolProvider": 0,
            "gcp:iap/getAppEngineServiceIamPolicy:getAppEngineServiceIamPolicy": 0,
            "gcp:iap/getAppEngineVersionIamPolicy:getAppEngineVersionIamPolicy": 0,
            "gcp:iap/getClient:getClient": 0,
            "gcp:iap/getTunnelIamPolicy:getTunnelIamPolicy": 0,
            "gcp:iap/getTunnelInstanceIamPolicy:getTunnelInstanceIamPolicy": 0,
            "gcp:iap/getWebBackendServiceIamPolicy:getWebBackendServiceIamPolicy": 0,
            "gcp:iap/getWebIamPolicy:getWebIamPolicy": 0,
            "gcp:iap/getWebRegionBackendServiceIamPolicy:getWebRegionBackendServiceIamPolicy": 0,
            "gcp:iap/getWebTypeAppEngineIamPolicy:getWebTypeAppEngineIamPolicy": 0,
            "gcp:iap/getWebTypeComputeIamPolicy:getWebTypeComputeIamPolicy": 0,
            "gcp:iot/getRegistryIamPolicy:getRegistryIamPolicy": 0,
            "gcp:kms/getCryptoKeyIamPolicy:getCryptoKeyIamPolicy": 0,
            "gcp:kms/getKMSCryptoKey:getKMSCryptoKey": 0,
            "gcp:kms/getKMSCryptoKeyVersion:getKMSCryptoKeyVersion": 0,
            "gcp:kms/getKMSKeyRing:getKMSKeyRing": 0,
            "gcp:kms/getKMSSecret:getKMSSecret": 0,
            "gcp:kms/getKMSSecretAsymmetric:getKMSSecretAsymmetric": 0,
            "gcp:kms/getKMSSecretCiphertext:getKMSSecretCiphertext": 0,
            "gcp:kms/getKeyRingIamPolicy:getKeyRingIamPolicy": 0,
            "gcp:logging/getProjectCmekSettings:getProjectCmekSettings": 0,
            "gcp:logging/getSink:getSink": 0,
            "gcp:monitoring/getAppEngineService:getAppEngineService": 0,
            "gcp:monitoring/getClusterIstioService:getClusterIstioService": 0,
            "gcp:monitoring/getIstioCanonicalService:getIstioCanonicalService": 0,
            "gcp:monitoring/getMeshIstioService:getMeshIstioService": 0,
            "gcp:monitoring/getNotificationChannel:getNotificationChannel": 0,
            "gcp:monitoring/getSecretVersion:getSecretVersion": 0,
            "gcp:monitoring/getUptimeCheckIPs:getUptimeCheckIPs": 0,
            "gcp:notebooks/getInstanceIamPolicy:getInstanceIamPolicy": 0,
            "gcp:notebooks/getRuntimeIamPolicy:getRuntimeIamPolicy": 0,
            "gcp:organizations/getActiveFolder:getActiveFolder": 0,
            "gcp:organizations/getBillingAccount:getBillingAccount": 0,
            "gcp:organizations/getClientConfig:getClientConfig": 1,
            "gcp:organizations/getClientOpenIdUserInfo:getClientOpenIdUserInfo": 1,
            "gcp:organizations/getFolder:getFolder": 0,
            "gcp:organizations/getFolders:getFolders": 0,
            "gcp:organizations/getIAMPolicy:getIAMPolicy": 0,
            "gcp:organizations/getOrganization:getOrganization": 0,
            "gcp:organizations/getProject:getProject": 0,
            "gcp:projects/getIamPolicy:getIamPolicy": 0,
            "gcp:projects/getOrganizationPolicy:getOrganizationPolicy": 0,
            "gcp:projects/getProject:getProject": 0,
            "gcp:projects/getProjectService:getProjectService": 0,
            "gcp:pubsub/getSubscription:getSubscription": 0,
            "gcp:pubsub/getSubscriptionIamPolicy:getSubscriptionIamPolicy": 0,
            "gcp:pubsub/getTopic:getTopic": 0,
            "gcp:pubsub/getTopicIamPolicy:getTopicIamPolicy": 0,
            "gcp:redis/getInstance:getInstance": 0,
            "gcp:runtimeconfig/getConfig:getConfig": 0,
            "gcp:runtimeconfig/getConfigIamPolicy:getConfigIamPolicy": 0,
            "gcp:runtimeconfig/getVariable:getVariable": 0,
            "gcp:secretmanager/getSecret:getSecret": 0,
            "gcp:secretmanager/getSecretIamPolicy:getSecretIamPolicy": 0,
            "gcp:secretmanager/getSecretVersion:getSecretVersion": 0,
            "gcp:secretmanager/getSecretVersionAccess:getSecretVersionAccess": 0,
            "gcp:securitycenter/getSourceIamPolicy:getSourceIamPolicy": 0,
            "gcp:serviceAccount/getAccount:getAccount": 0,
            "gcp:serviceAccount/getAccountAccessToken:getAccountAccessToken": 0,
            "gcp:serviceAccount/getAccountIdToken:getAccountIdToken": 0,
            "gcp:serviceAccount/getAccountJwt:getAccountJwt": 0,
            "gcp:serviceAccount/getAccountKey:getAccountKey": 0,
            "gcp:serviceAccount/getIamPolicy:getIamPolicy": 0,
            "gcp:servicedirectory/getNamespaceIamPolicy:getNamespaceIamPolicy": 0,
            "gcp:servicedirectory/getServiceIamPolicy:getServiceIamPolicy": 0,
            "gcp:servicenetworking/getPeeredDnsDomain:getPeeredDnsDomain": 0,
            "gcp:sourcerepo/getRepository:getRepository": 0,
            "gcp:sourcerepo/getRepositoryIamPolicy:getRepositoryIamPolicy": 0,
            "gcp:spanner/getDatabaseIamPolicy:getDatabaseIamPolicy": 0,
            "gcp:spanner/getInstance:getInstance": 0,
            "gcp:spanner/getInstanceIamPolicy:getInstanceIamPolicy": 0,
            "gcp:sql/getBackupRun:getBackupRun": 0,
            "gcp:sql/getCaCerts:getCaCerts": 0,
            "gcp:sql/getDatabase:getDatabase": 0,
            "gcp:sql/getDatabaseInstance:getDatabaseInstance": 0,
            "gcp:sql/getDatabaseInstances:getDatabaseInstances": 0,
            "gcp:sql/getDatabases:getDatabases": 0,
            "gcp:sql/getTiers:getTiers": 0,
            "gcp:storage/getBucket:getBucket": 0,
            "gcp:storage/getBucketIamPolicy:getBucketIamPolicy": 0,
            "gcp:storage/getBucketObject:getBucketObject": 0,
            "gcp:storage/getBucketObjectContent:getBucketObjectContent": 0,
            "gcp:storage/getObjectSignedUrl:getObjectSignedUrl": 0,
            "gcp:storage/getProjectServiceAccount:getProjectServiceAccount": 0,
            "gcp:storage/getTransferProjectServiceAccount:getTransferProjectServiceAccount": 0,
            "gcp:storage/getTransferProjectServieAccount:getTransferProjectServieAccount": 0,
            "gcp:tags/getTagKey:getTagKey": 0,
            "gcp:tags/getTagKeyIamPolicy:getTagKeyIamPolicy": 0,
            "gcp:tags/getTagValue:getTagValue": 0,
            "gcp:tags/getTagValueIamPolicy:getTagValueIamPolicy": 0,
            "gcp:tpu/getTensorflowVersions:getTensorflowVersions": 0,
            "gcp:vertex/getAiFeaturestoreEntitytypeIamPolicy:getAiFeaturestoreEntitytypeIamPolicy": 0,
            "gcp:vertex/getAiFeaturestoreIamPolicy:getAiFeaturestoreIamPolicy": 0,
            "gcp:vertex/getAiIndex:getAiIndex": 0,
            "gcp:vmwareengine/getCluster:getCluster": 0,
            "gcp:vmwareengine/getNetwork:getNetwork": 0,
            "gcp:vmwareengine/getPrivateCloud:getPrivateCloud": 0,
            "gcp:vpcaccess/getConnector:getConnector": 0,
            "gcp:workstations/getWorkstationConfigIamPolicy:getWorkstationConfigIamPolicy": 0,
            "gcp:workstations/getWorkstationIamPolicy:getWorkstationIamPolicy": 0
        }
    },
    "renames": {
        "resources": {
            "gcp:accesscontextmanager/accessLevel:AccessLevel": "google_access_context_manager_access_level",
            "gcp:accesscontextmanager/accessLevelCondition:AccessLevelCondition": "google_access_context_manager_access_level_condition",
            "gcp:accesscontextmanager/accessLevels:AccessLevels": "google_access_context_manager_access_levels",
            "gcp:accesscontextmanager/accessPolicy:AccessPolicy": "google_access_context_manager_access_policy",
            "gcp:accesscontextmanager/accessPolicyIamBinding:AccessPolicyIamBinding": "google_access_context_manager_access_policy_iam_binding",
            "gcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMember": "google_access_context_manager_access_policy_iam_member",
            "gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy": "google_access_context_manager_access_policy_iam_policy",
            "gcp:accesscontextmanager/authorizedOrgsDesc:AuthorizedOrgsDesc": "google_access_context_manager_authorized_orgs_desc",
            "gcp:accesscontextmanager/egressPolicy:EgressPolicy": "google_access_context_manager_egress_policy",
            "gcp:accesscontextmanager/gcpUserAccessBinding:GcpUserAccessBinding": "google_access_context_manager_gcp_user_access_binding",
            "gcp:accesscontextmanager/ingressPolicy:IngressPolicy": "google_access_context_manager_ingress_policy",
            "gcp:accesscontextmanager/servicePerimeter:ServicePerimeter": "google_access_context_manager_service_perimeter",
            "gcp:accesscontextmanager/servicePerimeterEgressPolicy:ServicePerimeterEgressPolicy": "google_access_context_manager_service_perimeter_egress_policy",
            "gcp:accesscontextmanager/servicePerimeterIngressPolicy:ServicePerimeterIngressPolicy": "google_access_context_manager_service_perimeter_ingress_policy",
            "gcp:accesscontextmanager/servicePerimeterResource:ServicePerimeterResource": "google_access_context_manager_service_perimeter_resource",
            "gcp:accesscontextmanager/servicePerimeters:ServicePerimeters": "google_access_context_manager_service_perimeters",
            "gcp:activedirectory/domain:Domain": "google_active_directory_domain",
            "gcp:activedirectory/domainTrust:DomainTrust": "google_active_directory_domain_trust",
            "gcp:activedirectory/peering:Peering": "google_active_directory_peering",
            "gcp:alloydb/backup:Backup": "google_alloydb_backup",
            "gcp:alloydb/cluster:Cluster": "google_alloydb_cluster",
            "gcp:alloydb/instance:Instance": "google_alloydb_instance",
            "gcp:apigateway/api:Api": "google_api_gateway_api",
            "gcp:apigateway/apiConfig:ApiConfig": "google_api_gateway_api_config",
            "gcp:apigateway/apiConfigIamBinding:ApiConfigIamBinding": "google_api_gateway_api_config_iam_binding",
            "gcp:apigateway/apiConfigIamMember:ApiConfigIamMember": "google_api_gateway_api_config_iam_member",
            "gcp:apigateway/apiConfigIamPolicy:ApiConfigIamPolicy": "google_api_gateway_api_config_iam_policy",
            "gcp:apigateway/apiIamBinding:ApiIamBinding": "google_api_gateway_api_iam_binding",
            "gcp:apigateway/apiIamMember:ApiIamMember": "google_api_gateway_api_iam_member",
            "gcp:apigateway/apiIamPolicy:ApiIamPolicy": "google_api_gateway_api_iam_policy",
            "gcp:apigateway/gateway:Gateway": "google_api_gateway_gateway",
            "gcp:apigateway/gatewayIamBinding:GatewayIamBinding": "google_api_gateway_gateway_iam_binding",
            "gcp:apigateway/gatewayIamMember:GatewayIamMember": "google_api_gateway_gateway_iam_member",
            "gcp:apigateway/gatewayIamPolicy:GatewayIamPolicy": "google_api_gateway_gateway_iam_policy",
            "gcp:apigee/addonsConfig:AddonsConfig": "google_apigee_addons_config",
            "gcp:apigee/endpointAttachment:EndpointAttachment": "google_apigee_endpoint_attachment",
            "gcp:apigee/envGroup:EnvGroup": "google_apigee_envgroup",
            "gcp:apigee/envGroupAttachment:EnvGroupAttachment": "google_apigee_envgroup_attachment",
            "gcp:apigee/envKeystore:EnvKeystore": "google_apigee_env_keystore",
            "gcp:apigee/envReferences:EnvReferences": "google_apigee_env_references",
            "gcp:apigee/environment:Environment": "google_apigee_environment",
            "gcp:apigee/environmentIamBinding:EnvironmentIamBinding": "google_apigee_environment_iam_binding",
            "gcp:apigee/environmentIamMember:EnvironmentIamMember": "google_apigee_environment_iam_member",
            "gcp:apigee/environmentIamPolicy:EnvironmentIamPolicy": "google_apigee_environment_iam_policy",
            "gcp:apigee/flowhook:Flowhook": "google_apigee_flowhook",
            "gcp:apigee/instance:Instance": "google_apigee_instance",
            "gcp:apigee/instanceAttachment:InstanceAttachment": "google_apigee_instance_attachment",
            "gcp:apigee/keystoresAliasesKeyCertFile:KeystoresAliasesKeyCertFile": "google_apigee_keystores_aliases_key_cert_file",
            "gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12": "google_apigee_keystores_aliases_pkcs12",
            "gcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCert": "google_apigee_keystores_aliases_self_signed_cert",
            "gcp:apigee/natAddress:NatAddress": "google_apigee_nat_address",
            "gcp:apigee/organization:Organization": "google_apigee_organization",
            "gcp:apigee/sharedflow:Sharedflow": "google_apigee_sharedflow",
            "gcp:apigee/sharedflowDeployment:SharedflowDeployment": "google_apigee_sharedflow_deployment",
            "gcp:apigee/syncAuthorization:SyncAuthorization": "google_apigee_sync_authorization",
            "gcp:appengine/application:Application": "google_app_engine_application",
            "gcp:appengine/applicationUrlDispatchRules:ApplicationUrlDispatchRules": "google_app_engine_application_url_dispatch_rules",
            "gcp:appengine/domainMapping:DomainMapping": "google_app_engine_domain_mapping",
            "gcp:appengine/engineSplitTraffic:EngineSplitTraffic": "google_app_engine_service_split_traffic",
            "gcp:appengine/firewallRule:FirewallRule": "google_app_engine_firewall_rule",
            "gcp:appengine/flexibleAppVersion:FlexibleAppVersion": "google_app_engine_flexible_app_version",
            "gcp:appengine/serviceNetworkSettings:ServiceNetworkSettings": "google_app_engine_service_network_settings",
            "gcp:appengine/standardAppVersion:StandardAppVersion": "google_app_engine_standard_app_version",
            "gcp:artifactregistry/repository:Repository": "google_artifact_registry_repository",
            "gcp:artifactregistry/repositoryIamBinding:RepositoryIamBinding": "google_artifact_registry_repository_iam_binding",
            "gcp:artifactregistry/repositoryIamMember:RepositoryIamMember": "google_artifact_registry_repository_iam_member",
            "gcp:artifactregistry/repositoryIamPolicy:RepositoryIamPolicy": "google_artifact_registry_repository_iam_policy",
            "gcp:assuredworkloads/workload:Workload": "google_assured_workloads_workload",
            "gcp:beyondcorp/appConnection:AppConnection": "google_beyondcorp_app_connection",
            "gcp:beyondcorp/appConnector:AppConnector": "google_beyondcorp_app_connector",
            "gcp:beyondcorp/appGateway:AppGateway": "google_beyondcorp_app_gateway",
            "gcp:bigquery/appProfile:AppProfile": "google_bigtable_app_profile",
            "gcp:bigquery/capacityCommitment:CapacityCommitment": "google_bigquery_capacity_commitment",
            "gcp:bigquery/connection:Connection": "google_bigquery_connection",
            "gcp:bigquery/connectionIamBinding:ConnectionIamBinding": "google_bigquery_connection_iam_binding",
            "gcp:bigquery/connectionIamMember:ConnectionIamMember": "google_bigquery_connection_iam_member",
            "gcp:bigquery/connectionIamPolicy:ConnectionIamPolicy": "google_bigquery_connection_iam_policy",
            "gcp:bigquery/dataTransferConfig:DataTransferConfig": "google_bigquery_data_transfer_config",
            "gcp:bigquery/dataset:Dataset": "google_bigquery_dataset",
            "gcp:bigquery/datasetAccess:DatasetAccess": "google_bigquery_dataset_access",
            "gcp:bigquery/datasetIamBinding:DatasetIamBinding": "google_bigquery_dataset_iam_binding",
            "gcp:bigquery/datasetIamMember:DatasetIamMember": "google_bigquery_dataset_iam_member",
            "gcp:bigquery/datasetIamPolicy:DatasetIamPolicy": "google_bigquery_dataset_iam_policy",
            "gcp:bigquery/iamBinding:IamBinding": "google_bigquery_table_iam_binding",
            "gcp:bigquery/iamMember:IamMember": "google_bigquery_table_iam_member",
            "gcp:bigquery/iamPolicy:IamPolicy": "google_bigquery_table_iam_policy",
            "gcp:bigquery/job:Job": "google_bigquery_job",
            "gcp:bigquery/reservation:Reservation": "google_bigquery_reservation",
            "gcp:bigquery/reservationAssignment:ReservationAssignment": "google_bigquery_reservation_assignment",
            "gcp:bigquery/routine:Routine": "google_bigquery_routine",
            "gcp:bigquery/table:Table": "google_bigquery_table",
            "gcp:bigqueryanalyticshub/dataExchange:DataExchange": "google_bigquery_analytics_hub_data_exchange",
            "gcp:bigqueryanalyticshub/dataExchangeIamBinding:DataExchangeIamBinding": "google_bigquery_analytics_hub_data_exchange_iam_binding",
            "gcp:bigqueryanalyticshub/dataExchangeIamMember:DataExchangeIamMember": "google_bigquery_analytics_hub_data_exchange_iam_member",
            "gcp:bigqueryanalyticshub/dataExchangeIamPolicy:DataExchangeIamPolicy": "google_bigquery_analytics_hub_data_exchange_iam_policy",
            "gcp:bigqueryanalyticshub/listing:Listing": "google_bigquery_analytics_hub_listing",
            "gcp:bigqueryanalyticshub/listingIamBinding:ListingIamBinding": "google_bigquery_analytics_hub_listing_iam_binding",
            "gcp:bigqueryanalyticshub/listingIamMember:ListingIamMember": "google_bigquery_analytics_hub_listing_iam_member",
            "gcp:bigqueryanalyticshub/listingIamPolicy:ListingIamPolicy": "google_bigquery_analytics_hub_listing_iam_policy",
            "gcp:bigquerydatapolicy/dataPolicy:DataPolicy": "google_bigquery_datapolicy_data_policy",
            "gcp:bigquerydatapolicy/dataPolicyIamBinding:DataPolicyIamBinding": "google_bigquery_datapolicy_data_policy_iam_binding",
            "gcp:bigquerydatapolicy/dataPolicyIamMember:DataPolicyIamMember": "google_bigquery_datapolicy_data_policy_iam_member",
            "gcp:bigquerydatapolicy/dataPolicyIamPolicy:DataPolicyIamPolicy": "google_bigquery_datapolicy_data_policy_iam_policy",
            "gcp:bigtable/gCPolicy:GCPolicy": "google_bigtable_gc_policy",
            "gcp:bigtable/instance:Instance": "google_bigtable_instance",
            "gcp:bigtable/instanceIamBinding:InstanceIamBinding": "google_bigtable_instance_iam_binding",
            "gcp:bigtable/instanceIamMember:InstanceIamMember": "google_bigtable_instance_iam_member",
            "gcp:bigtable/instanceIamPolicy:InstanceIamPolicy": "google_bigtable_instance_iam_policy",
            "gcp:bigtable/table:Table": "google_bigtable_table",
            "gcp:bigtable/tableIamBinding:TableIamBinding": "google_bigtable_table_iam_binding",
            "gcp:bigtable/tableIamMember:TableIamMember": "google_bigtable_table_iam_member",
            "gcp:bigtable/tableIamPolicy:TableIamPolicy": "google_bigtable_table_iam_policy",
            "gcp:billing/accountIamBinding:AccountIamBinding": "google_billing_account_iam_binding",
            "gcp:billing/accountIamMember:AccountIamMember": "google_billing_account_iam_member",
            "gcp:billing/accountIamPolicy:AccountIamPolicy": "google_billing_account_iam_policy",
            "gcp:billing/budget:Budget": "google_billing_budget",
            "gcp:billing/subAccount:SubAccount": "google_billing_subaccount",
            "gcp:binaryauthorization/attestor:Attestor": "google_binary_authorization_attestor",
            "gcp:binaryauthorization/attestorIamBinding:AttestorIamBinding": "google_binary_authorization_attestor_iam_binding",
            "gcp:binaryauthorization/attestorIamMember:AttestorIamMember": "google_binary_authorization_attestor_iam_member",
            "gcp:binaryauthorization/attestorIamPolicy:AttestorIamPolicy": "google_binary_authorization_attestor_iam_policy",
            "gcp:binaryauthorization/policy:Policy": "google_binary_authorization_policy",
            "gcp:certificateauthority/authority:Authority": "google_privateca_certificate_authority",
            "gcp:certificateauthority/caPool:CaPool": "google_privateca_ca_pool",
            "gcp:certificateauthority/caPoolIamBinding:CaPoolIamBinding": "google_privateca_ca_pool_iam_binding",
            "gcp:certificateauthority/caPoolIamMember:CaPoolIamMember": "google_privateca_ca_pool_iam_member",
            "gcp:certificateauthority/caPoolIamPolicy:CaPoolIamPolicy": "google_privateca_ca_pool_iam_policy",
            "gcp:certificateauthority/certificate:Certificate": "google_privateca_certificate",
            "gcp:certificateauthority/certificateTemplate:CertificateTemplate": "google_privateca_certificate_template",
            "gcp:certificateauthority/certificateTemplateIamBinding:CertificateTemplateIamBinding": "google_privateca_certificate_template_iam_binding",
            "gcp:certificateauthority/certificateTemplateIamMember:CertificateTemplateIamMember": "google_privateca_certificate_template_iam_member",
            "gcp:certificateauthority/certificateTemplateIamPolicy:CertificateTemplateIamPolicy": "google_privateca_certificate_template_iam_policy",
            "gcp:certificatemanager/certificate:Certificate": "google_certificate_manager_certificate",
            "gcp:certificatemanager/certificateIssuanceConfig:CertificateIssuanceConfig": "google_certificate_manager_certificate_issuance_config",
            "gcp:certificatemanager/certificateMap:CertificateMap": "google_certificate_manager_certificate_map",
            "gcp:certificatemanager/certificateMapEntry:CertificateMapEntry": "google_certificate_manager_certificate_map_entry",
            "gcp:certificatemanager/dnsAuthorization:DnsAuthorization": "google_certificate_manager_dns_authorization",
            "gcp:cloudasset/folderFeed:FolderFeed": "google_cloud_asset_folder_feed",
            "gcp:cloudasset/organizationFeed:OrganizationFeed": "google_cloud_asset_organization_feed",
            "gcp:cloudasset/projectFeed:ProjectFeed": "google_cloud_asset_project_feed",
            "gcp:cloudbuild/bitbucketServerConfig:BitbucketServerConfig": "google_cloudbuild_bitbucket_server_config",
            "gcp:cloudbuild/trigger:Trigger": "google_cloudbuild_trigger",
            "gcp:cloudbuild/workerPool:WorkerPool": "google_cloudbuild_worker_pool",
            "gcp:cloudbuildv2/connection:Connection": "google_cloudbuildv2_connection",
            "gcp:cloudbuildv2/connectionIAMBinding:ConnectionIAMBinding": "google_cloudbuildv2_connection_iam_binding",
            "gcp:cloudbuildv2/connectionIAMMember:ConnectionIAMMember": "google_cloudbuildv2_connection_iam_member",
            "gcp:cloudbuildv2/connectionIAMPolicy:ConnectionIAMPolicy": "google_cloudbuildv2_connection_iam_policy",
            "gcp:cloudbuildv2/repository:Repository": "google_cloudbuildv2_repository",
            "gcp:clouddeploy/deliveryPipeline:DeliveryPipeline": "google_clouddeploy_delivery_pipeline",
            "gcp:clouddeploy/target:Target": "google_clouddeploy_target",
            "gcp:cloudfunctions/function:Function": "google_cloudfunctions_function",
            "gcp:cloudfunctions/functionIamBinding:FunctionIamBinding": "google_cloudfunctions_function_iam_binding",
            "gcp:cloudfunctions/functionIamMember:FunctionIamMember": "google_cloudfunctions_function_iam_member",
            "gcp:cloudfunctions/functionIamPolicy:FunctionIamPolicy": "google_cloudfunctions_function_iam_policy",
            "gcp:cloudfunctionsv2/function:Function": "google_cloudfunctions2_function",
            "gcp:cloudfunctionsv2/functionIamBinding:FunctionIamBinding": "google_cloudfunctions2_function_iam_binding",
            "gcp:cloudfunctionsv2/functionIamMember:FunctionIamMember": "google_cloudfunctions2_function_iam_member",
            "gcp:cloudfunctionsv2/functionIamPolicy:FunctionIamPolicy": "google_cloudfunctions2_function_iam_policy",
            "gcp:cloudidentity/group:Group": "google_cloud_identity_group",
            "gcp:cloudidentity/groupMembership:GroupMembership": "google_cloud_identity_group_membership",
            "gcp:cloudids/endpoint:Endpoint": "google_cloud_ids_endpoint",
            "gcp:cloudrun/domainMapping:DomainMapping": "google_cloud_run_domain_mapping",
            "gcp:cloudrun/iamBinding:IamBinding": "google_cloud_run_service_iam_binding",
            "gcp:cloudrun/iamMember:IamMember": "google_cloud_run_service_iam_member",
            "gcp:cloudrun/iamPolicy:IamPolicy": "google_cloud_run_service_iam_policy",
            "gcp:cloudrun/service:Service": "google_cloud_run_service",
            "gcp:cloudrunv2/job:Job": "google_cloud_run_v2_job",
            "gcp:cloudrunv2/jobIamBinding:JobIamBinding": "google_cloud_run_v2_job_iam_binding",
            "gcp:cloudrunv2/jobIamMember:JobIamMember": "google_cloud_run_v2_job_iam_member",
            "gcp:cloudrunv2/jobIamPolicy:JobIamPolicy": "google_cloud_run_v2_job_iam_policy",
            "gcp:cloudrunv2/service:Service": "google_cloud_run_v2_service",
            "gcp:cloudrunv2/serviceIamBinding:ServiceIamBinding": "google_cloud_run_v2_service_iam_binding",
            "gcp:cloudrunv2/serviceIamMember:ServiceIamMember": "google_cloud_run_v2_service_iam_member",
            "gcp:cloudrunv2/serviceIamPolicy:ServiceIamPolicy": "google_cloud_run_v2_service_iam_policy",
            "gcp:cloudscheduler/job:Job": "google_cloud_scheduler_job",
            "gcp:cloudtasks/queue:Queue": "google_cloud_tasks_queue",
            "gcp:cloudtasks/queueIamBinding:QueueIamBinding": "google_cloud_tasks_queue_iam_binding",
            "gcp:cloudtasks/queueIamMember:QueueIamMember": "google_cloud_tasks_queue_iam_member",
            "gcp:cloudtasks/queueIamPolicy:QueueIamPolicy": "google_cloud_tasks_queue_iam_policy",
            "gcp:composer/environment:Environment": "google_composer_environment",
            "gcp:compute/address:Address": "google_compute_address",
            "gcp:compute/attachedDisk:AttachedDisk": "google_compute_attached_disk",
            "gcp:compute/autoscalar:Autoscalar": "google_compute_autoscaler_legacy",
            "gcp:compute/autoscaler:Autoscaler": "google_compute_autoscaler",
            "gcp:compute/backendBucket:BackendBucket": "google_compute_backend_bucket",
            "gcp:compute/backendBucketIamBinding:BackendBucketIamBinding": "google_compute_backend_bucket_iam_binding",
            "gcp:compute/backendBucketIamMember:BackendBucketIamMember": "google_compute_backend_bucket_iam_member",
            "gcp:compute/backendBucketIamPolicy:BackendBucketIamPolicy": "google_compute_backend_bucket_iam_policy",
            "gcp:compute/backendBucketSignedUrlKey:BackendBucketSignedUrlKey": "google_compute_backend_bucket_signed_url_key",
            "gcp:compute/backendService:BackendService": "google_compute_backend_service",
            "gcp:compute/backendServiceIamBinding:BackendServiceIamBinding": "google_compute_backend_service_iam_binding",
            "gcp:compute/backendServiceIamMember:BackendServiceIamMember": "google_compute_backend_service_iam_member",
            "gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy": "google_compute_backend_service_iam_policy",
            "gcp:compute/backendServiceSignedUrlKey:BackendServiceSignedUrlKey": "google_compute_backend_service_signed_url_key",
            "gcp:compute/caExternalAccountKey:CaExternalAccountKey": "google_public_ca_external_account_key",
            "gcp:compute/disk:Disk": "google_compute_disk",
            "gcp:compute/diskAsyncReplication:DiskAsyncReplication": "google_compute_disk_async_replication",
            "gcp:compute/diskIamBinding:DiskIamBinding": "google_compute_disk_iam_binding",
            "gcp:compute/diskIamMember:DiskIamMember": "google_compute_disk_iam_member",
            "gcp:compute/diskIamPolicy:DiskIamPolicy": "google_compute_disk_iam_policy",
            "gcp:compute/diskResourcePolicyAttachment:DiskResourcePolicyAttachment": "google_compute_disk_resource_policy_attachment",
            "gcp:compute/externalVpnGateway:ExternalVpnGateway": "google_compute_external_vpn_gateway",
            "gcp:compute/firewall:Firewall": "google_compute_firewall",
            "gcp:compute/firewallPolicy:FirewallPolicy": "google_compute_firewall_policy",
            "gcp:compute/firewallPolicyAssociation:FirewallPolicyAssociation": "google_compute_firewall_policy_association",
            "gcp:compute/firewallPolicyRule:FirewallPolicyRule": "google_compute_firewall_policy_rule",
            "gcp:compute/forwardingRule:ForwardingRule": "google_compute_forwarding_rule",
            "gcp:compute/globalAddress:GlobalAddress": "google_compute_global_address",
            "gcp:compute/globalForwardingRule:GlobalForwardingRule": "google_compute_global_forwarding_rule",
            "gcp:compute/globalNetworkEndpoint:GlobalNetworkEndpoint": "google_compute_global_network_endpoint",
            "gcp:compute/globalNetworkEndpointGroup:GlobalNetworkEndpointGroup": "google_compute_global_network_endpoint_group",
            "gcp:compute/haVpnGateway:HaVpnGateway": "google_compute_ha_vpn_gateway",
            "gcp:compute/healthCheck:HealthCheck": "google_compute_health_check",
            "gcp:compute/httpHealthCheck:HttpHealthCheck": "google_compute_http_health_check",
            "gcp:compute/httpsHealthCheck:HttpsHealthCheck": "google_compute_https_health_check",
            "gcp:compute/image:Image": "google_compute_image",
            "gcp:compute/imageIamBinding:ImageIamBinding": "google_compute_image_iam_binding",
            "gcp:compute/imageIamMember:ImageIamMember": "google_compute_image_iam_member",
            "gcp:compute/imageIamPolicy:ImageIamPolicy": "google_compute_image_iam_policy",
            "gcp:compute/instance:Instance": "google_compute_instance",
            "gcp:compute/instanceFromMachineImage:InstanceFromMachineImage": "google_compute_instance_from_machine_image",
            "gcp:compute/instanceFromTemplate:InstanceFromTemplate": "google_compute_instance_from_template",
            "gcp:compute/instanceGroup:InstanceGroup": "google_compute_instance_group",
            "gcp:compute/instanceGroupManager:InstanceGroupManager": "google_compute_instance_group_manager",
            "gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort": "google_compute_instance_group_named_port",
            "gcp:compute/instanceIAMBinding:InstanceIAMBinding": "google_compute_instance_iam_binding",
            "gcp:compute/instanceIAMMember:InstanceIAMMember": "google_compute_instance_iam_member",
            "gcp:compute/instanceIAMPolicy:InstanceIAMPolicy": "google_compute_instance_iam_policy",
            "gcp:compute/instanceTemplate:InstanceTemplate": "google_compute_instance_template",
            "gcp:compute/interconnectAttachment:InterconnectAttachment": "google_compute_interconnect_attachment",
            "gcp:compute/machineImage:MachineImage": "google_compute_machine_image",
            "gcp:compute/machineImageIamBinding:MachineImageIamBinding": "google_compute_machine_image_iam_binding",
            "gcp:compute/machineImageIamMember:MachineImageIamMember": "google_compute_machine_image_iam_member",
            "gcp:compute/machineImageIamPolicy:MachineImageIamPolicy": "google_compute_machine_image_iam_policy",
            "gcp:compute/managedSslCertificate:ManagedSslCertificate": "google_compute_managed_ssl_certificate",
            "gcp:compute/mangedSslCertificate:MangedSslCertificate": "google_compute_managed_ssl_certificate_legacy",
            "gcp:compute/network:Network": "google_compute_network",
            "gcp:compute/networkEdgeSecurityService:NetworkEdgeSecurityService": "google_compute_network_edge_security_service",
            "gcp:compute/networkEndpoint:NetworkEndpoint": "google_compute_network_endpoint",
            "gcp:compute/networkEndpointGroup:NetworkEndpointGroup": "google_compute_network_endpoint_group",
            "gcp:compute/networkEndpointList:NetworkEndpointList": "google_compute_network_endpoints",
            "gcp:compute/networkFirewallPolicy:NetworkFirewallPolicy": "google_compute_network_firewall_policy",
            "gcp:compute/networkFirewallPolicyAssociation:NetworkFirewallPolicyAssociation": "google_compute_network_firewall_policy_association",
            "gcp:compute/networkFirewallPolicyRule:NetworkFirewallPolicyRule": "google_compute_network_firewall_policy_rule",
            "gcp:compute/networkPeering:NetworkPeering": "google_compute_network_peering",
            "gcp:compute/networkPeeringRoutesConfig:NetworkPeeringRoutesConfig": "google_compute_network_peering_routes_config",
            "gcp:compute/nodeGroup:NodeGroup": "google_compute_node_group",
            "gcp:compute/nodeTemplate:NodeTemplate": "google_compute_node_template",
            "gcp:compute/organizationSecurityPolicy:OrganizationSecurityPolicy": "google_compute_organization_security_policy",
            "gcp:compute/organizationSecurityPolicyAssociation:OrganizationSecurityPolicyAssociation": "google_compute_organization_security_policy_association",
            "gcp:compute/organizationSecurityPolicyRule:OrganizationSecurityPolicyRule": "google_compute_organization_security_policy_rule",
            "gcp:compute/packetMirroring:PacketMirroring": "google_compute_packet_mirroring",
            "gcp:compute/perInstanceConfig:PerInstanceConfig": "google_compute_per_instance_config",
            "gcp:compute/projectDefaultNetworkTier:ProjectDefaultNetworkTier": "google_compute_project_default_network_tier",
            "gcp:compute/projectMetadata:ProjectMetadata": "google_compute_project_metadata",
            "gcp:compute/projectMetadataItem:ProjectMetadataItem": "google_compute_project_metadata_item",
            "gcp:compute/publicAdvertisedPrefix:PublicAdvertisedPrefix": "google_compute_public_advertised_prefix",
            "gcp:compute/publicDelegatedPrefix:PublicDelegatedPrefix": "google_compute_public_delegated_prefix",
            "gcp:compute/regionAutoscaler:RegionAutoscaler": "google_compute_region_autoscaler",
            "gcp:compute/regionBackendService:RegionBackendService": "google_compute_region_backend_service",
            "gcp:compute/regionBackendServiceIamBinding:RegionBackendServiceIamBinding": "google_compute_region_backend_service_iam_binding",
            "gcp:compute/regionBackendServiceIamMember:RegionBackendServiceIamMember": "google_compute_region_backend_service_iam_member",
            "gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy": "google_compute_region_backend_service_iam_policy",
            "gcp:compute/regionCommitment:RegionCommitment": "google_compute_region_commitment",
            "gcp:compute/regionDisk:RegionDisk": "google_compute_region_disk",
            "gcp:compute/regionDiskIamBinding:RegionDiskIamBinding": "google_compute_region_disk_iam_binding",
            "gcp:compute/regionDiskIamMember:RegionDiskIamMember": "google_compute_region_disk_iam_member",
            "gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy": "google_compute_region_disk_iam_policy",
            "gcp:compute/regionDiskResourcePolicyAttachment:RegionDiskResourcePolicyAttachment": "google_compute_region_disk_resource_policy_attachment",
            "gcp:compute/regionHealthCheck:RegionHealthCheck": "google_compute_region_health_check",
            "gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager": "google_compute_region_instance_group_manager",
            "gcp:compute/regionInstanceTemplate:RegionInstanceTemplate": "google_compute_region_instance_template",
            "gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup": "google_compute_region_network_endpoint_group",
            "gcp:compute/regionNetworkFirewallPolicy:RegionNetworkFirewallPolicy": "google_compute_region_network_firewall_policy",
            "gcp:compute/regionNetworkFirewallPolicyAssociation:RegionNetworkFirewallPolicyAssociation": "google_compute_region_network_firewall_policy_association",
            "gcp:compute/regionNetworkFirewallPolicyRule:RegionNetworkFirewallPolicyRule": "google_compute_region_network_firewall_policy_rule",
            "gcp:compute/regionPerInstanceConfig:RegionPerInstanceConfig": "google_compute_region_per_instance_config",
            "gcp:compute/regionSecurityPolicy:RegionSecurityPolicy": "google_compute_region_security_policy",
            "gcp:compute/regionSslCertificate:RegionSslCertificate": "google_compute_region_ssl_certificate",
            "gcp:compute/regionSslPolicy:RegionSslPolicy": "google_compute_region_ssl_policy",
            "gcp:compute/regionTargetHttpProxy:RegionTargetHttpProxy": "google_compute_region_target_http_proxy",
            "gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy": "google_compute_region_target_https_proxy",
            "gcp:compute/regionTargetTcpProxy:RegionTargetTcpProxy": "google_compute_region_target_tcp_proxy",
            "gcp:compute/regionUrlMap:RegionUrlMap": "google_compute_region_url_map",
            "gcp:compute/reservation:Reservation": "google_compute_reservation",
            "gcp:compute/resourcePolicy:ResourcePolicy": "google_compute_resource_policy",
            "gcp:compute/route:Route": "google_compute_route",
            "gcp:compute/router:Router": "google_compute_router",
            "gcp:compute/routerInterface:RouterInterface": "google_compute_router_interface",
            "gcp:compute/routerNat:RouterNat": "google_compute_router_nat",
            "gcp:compute/routerPeer:RouterPeer": "google_compute_router_peer",
            "gcp:compute/sSLCertificate:SSLCertificate": "google_compute_ssl_certificate",
            "gcp:compute/sSLPolicy:SSLPolicy": "google_compute_ssl_policy",
            "gcp:compute/securityPolicy:SecurityPolicy": "google_compute_security_policy",
            "gcp:compute/securityScanConfig:SecurityScanConfig": "google_security_scanner_scan_config",
            "gcp:compute/serviceAttachment:ServiceAttachment": "google_compute_service_attachment",
            "gcp:compute/sharedVPCHostProject:SharedVPCHostProject": "google_compute_shared_vpc_host_project",
            "gcp:compute/sharedVPCServiceProject:SharedVPCServiceProject": "google_compute_shared_vpc_service_project",
            "gcp:compute/snapshot:Snapshot": "google_compute_snapshot",
            "gcp:compute/snapshotIamBinding:SnapshotIamBinding": "google_compute_snapshot_iam_binding",
            "gcp:compute/snapshotIamMember:SnapshotIamMember": "google_compute_snapshot_iam_member",
            "gcp:compute/snapshotIamPolicy:SnapshotIamPolicy": "google_compute_snapshot_iam_policy",
            "gcp:compute/subnetwork:Subnetwork": "google_compute_subnetwork",
            "gcp:compute/subnetworkIAMBinding:SubnetworkIAMBinding": "google_compute_subnetwork_iam_binding",
            "gcp:compute/subnetworkIAMMember:SubnetworkIAMMember": "google_compute_subnetwork_iam_member",
            "gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy": "google_compute_subnetwork_iam_policy",
            "gcp:compute/targetGrpcProxy:TargetGrpcProxy": "google_compute_target_grpc_proxy",
            "gcp:compute/targetHttpProxy:TargetHttpProxy": "google_compute_target_http_proxy",
            "gcp:compute/targetHttpsProxy:TargetHttpsProxy": "google_compute_target_https_proxy",
            "gcp:compute/targetInstance:TargetInstance": "google_compute_target_instance",
            "gcp:compute/targetPool:TargetPool": "google_compute_target_pool",
            "gcp:compute/targetSSLProxy:TargetSSLProxy": "google_compute_target_ssl_proxy",
            "gcp:compute/targetTCPProxy:TargetTCPProxy": "google_compute_target_tcp_proxy",
            "gcp:compute/uRLMap:URLMap": "google_compute_url_map",
            "gcp:compute/vPNGateway:VPNGateway": "google_compute_vpn_gateway",
            "gcp:compute/vPNTunnel:VPNTunnel": "google_compute_vpn_tunnel",
            "gcp:container/attachedCluster:AttachedCluster": "google_container_attached_cluster",
            "gcp:container/awsCluster:AwsCluster": "google_container_aws_cluster",
            "gcp:container/awsNodePool:AwsNodePool": "google_container_aws_node_pool",
            "gcp:container/azureClient:AzureClient": "google_container_azure_client",
            "gcp:container/azureCluster:AzureCluster": "google_container_azure_cluster",
            "gcp:container/azureNodePool:AzureNodePool": "google_container_azure_node_pool",
            "gcp:container/cluster:Cluster": "google_container_cluster",
            "gcp:container/nodePool:NodePool": "google_container_node_pool",
            "gcp:container/registry:Registry": "google_container_registry",
            "gcp:containeranalysis/note:Note": "google_container_analysis_note",
            "gcp:containeranalysis/noteIamBinding:NoteIamBinding": "google_container_analysis_note_iam_binding",
            "gcp:containeranalysis/noteIamMember:NoteIamMember": "google_container_analysis_note_iam_member",
            "gcp:containeranalysis/noteIamPolicy:NoteIamPolicy": "google_container_analysis_note_iam_policy",
            "gcp:containeranalysis/occurence:Occurence": "google_container_analysis_occurrence",
            "gcp:databasemigrationservice/connectionProfile:ConnectionProfile": "google_database_migration_service_connection_profile",
            "gcp:datacatalog/entry:Entry": "google_data_catalog_entry",
            "gcp:datacatalog/entryGroup:EntryGroup": "google_data_catalog_entry_group",
            "gcp:datacatalog/entryGroupIamBinding:EntryGroupIamBinding": "google_data_catalog_entry_group_iam_binding",
            "gcp:datacatalog/entryGroupIamMember:EntryGroupIamMember": "google_data_catalog_entry_group_iam_member",
            "gcp:datacatalog/entryGroupIamPolicy:EntryGroupIamPolicy": "google_data_catalog_entry_group_iam_policy",
            "gcp:datacatalog/policyTag:PolicyTag": "google_data_catalog_policy_tag",
            "gcp:datacatalog/policyTagIamBinding:PolicyTagIamBinding": "google_data_catalog_policy_tag_iam_binding",
            "gcp:datacatalog/policyTagIamMember:PolicyTagIamMember": "google_data_catalog_policy_tag_iam_member",
            "gcp:datacatalog/policyTagIamPolicy:PolicyTagIamPolicy": "google_data_catalog_policy_tag_iam_policy",
            "gcp:datacatalog/tag:Tag": "google_data_catalog_tag",
            "gcp:datacatalog/tagTemplate:TagTemplate": "google_data_catalog_tag_template",
            "gcp:datacatalog/tagTemplateIamBinding:TagTemplateIamBinding": "google_data_catalog_tag_template_iam_binding",
            "gcp:datacatalog/tagTemplateIamMember:TagTemplateIamMember": "google_data_catalog_tag_template_iam_member",
            "gcp:datacatalog/tagTemplateIamPolicy:TagTemplateIamPolicy": "google_data_catalog_tag_template_iam_policy",
            "gcp:datacatalog/taxonomy:Taxonomy": "google_data_catalog_taxonomy",
            "gcp:datacatalog/taxonomyIamBinding:TaxonomyIamBinding": "google_data_catalog_taxonomy_iam_binding",
            "gcp:datacatalog/taxonomyIamMember:TaxonomyIamMember": "google_data_catalog_taxonomy_iam_member",
            "gcp:datacatalog/taxonomyIamPolicy:TaxonomyIamPolicy": "google_data_catalog_taxonomy_iam_policy",
            "gcp:dataflow/flexTemplateJob:FlexTemplateJob": "google_dataflow_flex_template_job",
            "gcp:dataflow/job:Job": "google_dataflow_job",
            "gcp:dataform/repository:Repository": "google_dataform_repository",
            "gcp:datafusion/instance:Instance": "google_data_fusion_instance",
            "gcp:dataloss/preventionDeidentifyTemplate:PreventionDeidentifyTemplate": "google_data_loss_prevention_deidentify_template",
            "gcp:dataloss/preventionInspectTemplate:PreventionInspectTemplate": "google_data_loss_prevention_inspect_template",
            "gcp:dataloss/preventionJobTrigger:PreventionJobTrigger": "google_data_loss_prevention_job_trigger",
            "gcp:dataloss/preventionStoredInfoType:PreventionStoredInfoType": "google_data_loss_prevention_stored_info_type",
            "gcp:dataplex/asset:Asset": "google_dataplex_asset",
            "gcp:dataplex/assetIamBinding:AssetIamBinding": "google_dataplex_asset_iam_binding",
            "gcp:dataplex/assetIamMember:AssetIamMember": "google_dataplex_asset_iam_member",
            "gcp:dataplex/assetIamPolicy:AssetIamPolicy": "google_dataplex_asset_iam_policy",
            "gcp:dataplex/datascan:Datascan": "google_dataplex_datascan",
            "gcp:dataplex/datascanIamBinding:DatascanIamBinding": "google_dataplex_datascan_iam_binding",
            "gcp:dataplex/datascanIamMember:DatascanIamMember": "google_dataplex_datascan_iam_member",
            "gcp:dataplex/datascanIamPolicy:DatascanIamPolicy": "google_dataplex_datascan_iam_policy",
            "gcp:dataplex/lake:Lake": "google_dataplex_lake",
            "gcp:dataplex/lakeIamBinding:LakeIamBinding": "google_dataplex_lake_iam_binding",
            "gcp:dataplex/lakeIamMember:LakeIamMember": "google_dataplex_lake_iam_member",
            "gcp:dataplex/lakeIamPolicy:LakeIamPolicy": "google_dataplex_lake_iam_policy",
            "gcp:dataplex/task:Task": "google_dataplex_task",
            "gcp:dataplex/taskIamBinding:TaskIamBinding": "google_dataplex_task_iam_binding",
            "gcp:dataplex/taskIamMember:TaskIamMember": "google_dataplex_task_iam_member",
            "gcp:dataplex/taskIamPolicy:TaskIamPolicy": "google_dataplex_task_iam_policy",
            "gcp:dataplex/zone:Zone": "google_dataplex_zone",
            "gcp:dataplex/zoneIamBinding:ZoneIamBinding": "google_dataplex_zone_iam_binding",
            "gcp:dataplex/zoneIamMember:ZoneIamMember": "google_dataplex_zone_iam_member",
            "gcp:dataplex/zoneIamPolicy:ZoneIamPolicy": "google_dataplex_zone_iam_policy",
            "gcp:dataproc/autoscalingPolicy:AutoscalingPolicy": "google_dataproc_autoscaling_policy",
            "gcp:dataproc/autoscalingPolicyIamBinding:AutoscalingPolicyIamBinding": "google_dataproc_autoscaling_policy_iam_binding",
            "gcp:dataproc/autoscalingPolicyIamMember:AutoscalingPolicyIamMember": "google_dataproc_autoscaling_policy_iam_member",
            "gcp:dataproc/autoscalingPolicyIamPolicy:AutoscalingPolicyIamPolicy": "google_dataproc_autoscaling_policy_iam_policy",
            "gcp:dataproc/cluster:Cluster": "google_dataproc_cluster",
            "gcp:dataproc/clusterIAMBinding:ClusterIAMBinding": "google_dataproc_cluster_iam_binding",
            "gcp:dataproc/clusterIAMMember:ClusterIAMMember": "google_dataproc_cluster_iam_member",
            "gcp:dataproc/clusterIAMPolicy:ClusterIAMPolicy": "google_dataproc_cluster_iam_policy",
            "gcp:dataproc/job:Job": "google_dataproc_job",
            "gcp:dataproc/jobIAMBinding:JobIAMBinding": "google_dataproc_job_iam_binding",
            "gcp:dataproc/jobIAMMember:JobIAMMember": "google_dataproc_job_iam_member",
            "gcp:dataproc/jobIAMPolicy:JobIAMPolicy": "google_dataproc_job_iam_policy",
            "gcp:dataproc/metastoreFederation:MetastoreFederation": "google_dataproc_metastore_federation",
            "gcp:dataproc/metastoreFederationIamBinding:MetastoreFederationIamBinding": "google_dataproc_metastore_federation_iam_binding",
            "gcp:dataproc/metastoreFederationIamMember:MetastoreFederationIamMember": "google_dataproc_metastore_federation_iam_member",
            "gcp:dataproc/metastoreFederationIamPolicy:MetastoreFederationIamPolicy": "google_dataproc_metastore_federation_iam_policy",
            "gcp:dataproc/metastoreService:MetastoreService": "google_dataproc_metastore_service",
            "gcp:dataproc/metastoreServiceIamBinding:MetastoreServiceIamBinding": "google_dataproc_metastore_service_iam_binding",
            "gcp:dataproc/metastoreServiceIamMember:MetastoreServiceIamMember": "google_dataproc_metastore_service_iam_member",
            "gcp:dataproc/metastoreServiceIamPolicy:MetastoreServiceIamPolicy": "google_dataproc_metastore_service_iam_policy",
            "gcp:dataproc/workflowTemplate:WorkflowTemplate": "google_dataproc_workflow_template",
            "gcp:datastore/dataStoreIndex:DataStoreIndex": "google_datastore_index",
            "gcp:datastream/connectionProfile:ConnectionProfile": "google_datastream_connection_profile",
            "gcp:datastream/privateConnection:PrivateConnection": "google_datastream_private_connection",
            "gcp:datastream/stream:Stream": "google_datastream_stream",
            "gcp:deploymentmanager/deployment:Deployment": "google_deployment_manager_deployment",
            "gcp:diagflow/agent:Agent": "google_dialogflow_agent",
            "gcp:diagflow/cxAgent:CxAgent": "google_dialogflow_cx_agent",
            "gcp:diagflow/cxEntityType:CxEntityType": "google_dialogflow_cx_entity_type",
            "gcp:diagflow/cxEnvironment:CxEnvironment": "google_dialogflow_cx_environment",
            "gcp:diagflow/cxFlow:CxFlow": "google_dialogflow_cx_flow",
            "gcp:diagflow/cxIntent:CxIntent": "google_dialogflow_cx_intent",
            "gcp:diagflow/cxPage:CxPage": "google_dialogflow_cx_page",
            "gcp:diagflow/cxVersion:CxVersion": "google_dialogflow_cx_version",
            "gcp:diagflow/cxWebhook:CxWebhook": "google_dialogflow_cx_webhook",
            "gcp:diagflow/entityType:EntityType": "google_dialogflow_entity_type",
            "gcp:diagflow/fulfillment:Fulfillment": "google_dialogflow_fulfillment",
            "gcp:diagflow/intent:Intent": "google_dialogflow_intent",
            "gcp:dns/dnsManagedZoneIamBinding:DnsManagedZoneIamBinding": "google_dns_managed_zone_iam_binding",
            "gcp:dns/dnsManagedZoneIamMember:DnsManagedZoneIamMember": "google_dns_managed_zone_iam_member",
            "gcp:dns/dnsManagedZoneIamPolicy:DnsManagedZoneIamPolicy": "google_dns_managed_zone_iam_policy",
            "gcp:dns/managedZone:ManagedZone": "google_dns_managed_zone",
            "gcp:dns/policy:Policy": "google_dns_policy",
            "gcp:dns/recordSet:RecordSet": "google_dns_record_set",
            "gcp:dns/responsePolicy:ResponsePolicy": "google_dns_response_policy",
            "gcp:dns/responsePolicyRule:ResponsePolicyRule": "google_dns_response_policy_rule",
            "gcp:endpoints/consumersIamBinding:ConsumersIamBinding": "google_endpoints_service_consumers_iam_binding",
            "gcp:endpoints/consumersIamMember:ConsumersIamMember": "google_endpoints_service_consumers_iam_member",
            "gcp:endpoints/consumersIamPolicy:ConsumersIamPolicy": "google_endpoints_service_consumers_iam_policy",
            "gcp:endpoints/service:Service": "google_endpoints_service",
            "gcp:endpoints/serviceIamBinding:ServiceIamBinding": "google_endpoints_service_iam_binding",
            "gcp:endpoints/serviceIamMember:ServiceIamMember": "google_endpoints_service_iam_member",
            "gcp:endpoints/serviceIamPolicy:ServiceIamPolicy": "google_endpoints_service_iam_policy",
            "gcp:essentialcontacts/contact:Contact": "google_essential_contacts_contact",
            "gcp:essentialcontacts/documentAiProcessor:DocumentAiProcessor": "google_document_ai_processor",
            "gcp:essentialcontacts/documentAiProcessorDefaultVersion:DocumentAiProcessorDefaultVersion": "google_document_ai_processor_default_version",
            "gcp:eventarc/channel:Channel": "google_eventarc_channel",
            "gcp:eventarc/googleChannelConfig:GoogleChannelConfig": "google_eventarc_google_channel_config",
            "gcp:eventarc/trigger:Trigger": "google_eventarc_trigger",
            "gcp:filestore/backup:Backup": "google_filestore_backup",
            "gcp:filestore/instance:Instance": "google_filestore_instance",
            "gcp:filestore/snapshot:Snapshot": "google_filestore_snapshot",
            "gcp:firebase/androidApp:AndroidApp": "google_firebase_android_app",
            "gcp:firebase/appleApp:AppleApp": "google_firebase_apple_app",
            "gcp:firebase/databaseInstance:DatabaseInstance": "google_firebase_database_instance",
            "gcp:firebase/extensionsInstance:ExtensionsInstance": "google_firebase_extensions_instance",
            "gcp:firebase/hostingChannel:HostingChannel": "google_firebase_hosting_channel",
            "gcp:firebase/hostingRelease:HostingRelease": "google_firebase_hosting_release",
            "gcp:firebase/hostingSite:HostingSite": "google_firebase_hosting_site",
            "gcp:firebase/hostingVersion:HostingVersion": "google_firebase_hosting_version",
            "gcp:firebase/project:Project": "google_firebase_project",
            "gcp:firebase/projectLocation:ProjectLocation": "google_firebase_project_location",
            "gcp:firebase/storageBucket:StorageBucket": "google_firebase_storage_bucket",
            "gcp:firebase/webApp:WebApp": "google_firebase_web_app",
            "gcp:firebaserules/release:Release": "google_firebaserules_release",
            "gcp:firebaserules/ruleset:Ruleset": "google_firebaserules_ruleset",
            "gcp:firestore/database:Database": "google_firestore_database",
            "gcp:firestore/document:Document": "google_firestore_document",
            "gcp:firestore/field:Field": "google_firestore_field",
            "gcp:firestore/index:Index": "google_firestore_index",
            "gcp:folder/accessApprovalSettings:AccessApprovalSettings": "google_folder_access_approval_settings",
            "gcp:folder/iAMBinding:IAMBinding": "google_folder_iam_binding",
            "gcp:folder/iAMMember:IAMMember": "google_folder_iam_member",
            "gcp:folder/iAMPolicy:IAMPolicy": "google_folder_iam_policy",
            "gcp:folder/iamAuditConfig:IamAuditConfig": "google_folder_iam_audit_config",
            "gcp:folder/organizationPolicy:OrganizationPolicy": "google_folder_organization_policy",
            "gcp:gameservices/gameServerCluster:GameServerCluster": "google_game_services_game_server_cluster",
            "gcp:gameservices/gameServerConfig:GameServerConfig": "google_game_services_game_server_config",
            "gcp:gameservices/gameServerDeployment:GameServerDeployment": "google_game_services_game_server_deployment",
            "gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout": "google_game_services_game_server_deployment_rollout",
            "gcp:gameservices/realm:Realm": "google_game_services_realm",
            "gcp:gkebackup/backupPlan:BackupPlan": "google_gke_backup_backup_plan",
            "gcp:gkebackup/backupPlanIamBinding:BackupPlanIamBinding": "google_gke_backup_backup_plan_iam_binding",
            "gcp:gkebackup/backupPlanIamMember:BackupPlanIamMember": "google_gke_backup_backup_plan_iam_member",
            "gcp:gkebackup/backupPlanIamPolicy:BackupPlanIamPolicy": "google_gke_backup_backup_plan_iam_policy",
            "gcp:gkehub/feature:Feature": "google_gke_hub_feature",
            "gcp:gkehub/featureIamBinding:FeatureIamBinding": "google_gke_hub_feature_iam_binding",
            "gcp:gkehub/featureIamMember:FeatureIamMember": "google_gke_hub_feature_iam_member",
            "gcp:gkehub/featureIamPolicy:FeatureIamPolicy": "google_gke_hub_feature_iam_policy",
            "gcp:gkehub/featureMembership:FeatureMembership": "google_gke_hub_feature_membership",
            "gcp:gkehub/membership:Membership": "google_gke_hub_membership",
            "gcp:gkehub/membershipIamBinding:MembershipIamBinding": "google_gke_hub_membership_iam_binding",
            "gcp:gkehub/membershipIamMember:MembershipIamMember": "google_gke_hub_membership_iam_member",
            "gcp:gkehub/membershipIamPolicy:MembershipIamPolicy": "google_gke_hub_membership_iam_policy",
            "gcp:gkeonprem/bareMetalAdminCluster:BareMetalAdminCluster": "google_gkeonprem_bare_metal_admin_cluster",
            "gcp:gkeonprem/bareMetalCluster:BareMetalCluster": "google_gkeonprem_bare_metal_cluster",
            "gcp:gkeonprem/bareMetalNodePool:BareMetalNodePool": "google_gkeonprem_bare_metal_node_pool",
            "gcp:gkeonprem/vMwareCluster:VMwareCluster": "google_gkeonprem_vmware_cluster",
            "gcp:gkeonprem/vMwareNodePool:VMwareNodePool": "google_gkeonprem_vmware_node_pool",
            "gcp:healthcare/consentStore:ConsentStore": "google_healthcare_consent_store",
            "gcp:healthcare/consentStoreIamBinding:ConsentStoreIamBinding": "google_healthcare_consent_store_iam_binding",
            "gcp:healthcare/consentStoreIamMember:ConsentStoreIamMember": "google_healthcare_consent_store_iam_member",
            "gcp:healthcare/consentStoreIamPolicy:ConsentStoreIamPolicy": "google_healthcare_consent_store_iam_policy",
            "gcp:healthcare/dataset:Dataset": "google_healthcare_dataset",
            "gcp:healthcare/datasetIamBinding:DatasetIamBinding": "google_healthcare_dataset_iam_binding",
            "gcp:healthcare/datasetIamMember:DatasetIamMember": "google_healthcare_dataset_iam_member",
            "gcp:healthcare/datasetIamPolicy:DatasetIamPolicy": "google_healthcare_dataset_iam_policy",
            "gcp:healthcare/dicomStore:DicomStore": "google_healthcare_dicom_store",
            "gcp:healthcare/dicomStoreIamBinding:DicomStoreIamBinding": "google_healthcare_dicom_store_iam_binding",
            "gcp:healthcare/dicomStoreIamMember:DicomStoreIamMember": "google_healthcare_dicom_store_iam_member",
            "gcp:healthcare/dicomStoreIamPolicy:DicomStoreIamPolicy": "google_healthcare_dicom_store_iam_policy",
            "gcp:healthcare/fhirStore:FhirStore": "google_healthcare_fhir_store",
            "gcp:healthcare/fhirStoreIamBinding:FhirStoreIamBinding": "google_healthcare_fhir_store_iam_binding",
            "gcp:healthcare/fhirStoreIamMember:FhirStoreIamMember": "google_healthcare_fhir_store_iam_member",
            "gcp:healthcare/fhirStoreIamPolicy:FhirStoreIamPolicy": "google_healthcare_fhir_store_iam_policy",
            "gcp:healthcare/hl7Store:Hl7Store": "google_healthcare_hl7_v2_store",
            "gcp:healthcare/hl7StoreIamBinding:Hl7StoreIamBinding": "google_healthcare_hl7_v2_store_iam_binding",
            "gcp:healthcare/hl7StoreIamMember:Hl7StoreIamMember": "google_healthcare_hl7_v2_store_iam_member",
            "gcp:healthcare/hl7StoreIamPolicy:Hl7StoreIamPolicy": "google_healthcare_hl7_v2_store_iam_policy",
            "gcp:iam/accessBoundaryPolicy:AccessBoundaryPolicy": "google_iam_access_boundary_policy",
            "gcp:iam/denyPolicy:DenyPolicy": "google_iam_deny_policy",
            "gcp:iam/workforcePool:WorkforcePool": "google_iam_workforce_pool",
            "gcp:iam/workforcePoolProvider:WorkforcePoolProvider": "google_iam_workforce_pool_provider",
            "gcp:iam/workloadIdentityPool:WorkloadIdentityPool": "google_iam_workload_identity_pool",
            "gcp:iam/workloadIdentityPoolProvider:WorkloadIdentityPoolProvider": "google_iam_workload_identity_pool_provider",
            "gcp:iap/appEngineServiceIamBinding:AppEngineServiceIamBinding": "google_iap_app_engine_service_iam_binding",
            "gcp:iap/appEngineServiceIamMember:AppEngineServiceIamMember": "google_iap_app_engine_service_iam_member",
            "gcp:iap/appEngineServiceIamPolicy:AppEngineServiceIamPolicy": "google_iap_app_engine_service_iam_policy",
            "gcp:iap/appEngineVersionIamBinding:AppEngineVersionIamBinding": "google_iap_app_engine_version_iam_binding",
            "gcp:iap/appEngineVersionIamMember:AppEngineVersionIamMember": "google_iap_app_engine_version_iam_member",
            "gcp:iap/appEngineVersionIamPolicy:AppEngineVersionIamPolicy": "google_iap_app_engine_version_iam_policy",
            "gcp:iap/brand:Brand": "google_iap_brand",
            "gcp:iap/client:Client": "google_iap_client",
            "gcp:iap/tunnelIamBinding:TunnelIamBinding": "google_iap_tunnel_iam_binding",
            "gcp:iap/tunnelIamMember:TunnelIamMember": "google_iap_tunnel_iam_member",
            "gcp:iap/tunnelIamPolicy:TunnelIamPolicy": "google_iap_tunnel_iam_policy",
            "gcp:iap/tunnelInstanceIAMBinding:TunnelInstanceIAMBinding": "google_iap_tunnel_instance_iam_binding",
            "gcp:iap/tunnelInstanceIAMMember:TunnelInstanceIAMMember": "google_iap_tunnel_instance_iam_member",
            "gcp:iap/tunnelInstanceIAMPolicy:TunnelInstanceIAMPolicy": "google_iap_tunnel_instance_iam_policy",
            "gcp:iap/webBackendServiceIamBinding:WebBackendServiceIamBinding": "google_iap_web_backend_service_iam_binding",
            "gcp:iap/webBackendServiceIamMember:WebBackendServiceIamMember": "google_iap_web_backend_service_iam_member",
            "gcp:iap/webBackendServiceIamPolicy:WebBackendServiceIamPolicy": "google_iap_web_backend_service_iam_policy",
            "gcp:iap/webIamBinding:WebIamBinding": "google_iap_web_iam_binding",
            "gcp:iap/webIamMember:WebIamMember": "google_iap_web_iam_member",
            "gcp:iap/webIamPolicy:WebIamPolicy": "google_iap_web_iam_policy",
            "gcp:iap/webRegionBackendServiceIamBinding:WebRegionBackendServiceIamBinding": "google_iap_web_region_backend_service_iam_binding",
            "gcp:iap/webRegionBackendServiceIamMember:WebRegionBackendServiceIamMember": "google_iap_web_region_backend_service_iam_member",
            "gcp:iap/webRegionBackendServiceIamPolicy:WebRegionBackendServiceIamPolicy": "google_iap_web_region_backend_service_iam_policy",
            "gcp:iap/webTypeAppEngingIamBinding:WebTypeAppEngingIamBinding": "google_iap_web_type_app_engine_iam_binding",
            "gcp:iap/webTypeAppEngingIamMember:WebTypeAppEngingIamMember": "google_iap_web_type_app_engine_iam_member",
            "gcp:iap/webTypeAppEngingIamPolicy:WebTypeAppEngingIamPolicy": "google_iap_web_type_app_engine_iam_policy",
            "gcp:iap/webTypeComputeIamBinding:WebTypeComputeIamBinding": "google_iap_web_type_compute_iam_binding",
            "gcp:iap/webTypeComputeIamMember:WebTypeComputeIamMember": "google_iap_web_type_compute_iam_member",
            "gcp:iap/webTypeComputeIamPolicy:WebTypeComputeIamPolicy": "google_iap_web_type_compute_iam_policy",
            "gcp:identityplatform/config:Config": "google_identity_platform_config",
            "gcp:identityplatform/defaultSupportedIdpConfig:DefaultSupportedIdpConfig": "google_identity_platform_default_supported_idp_config",
            "gcp:identityplatform/inboundSamlConfig:InboundSamlConfig": "google_identity_platform_inbound_saml_config",
            "gcp:identityplatform/oauthIdpConfig:OauthIdpConfig": "google_identity_platform_oauth_idp_config",
            "gcp:identityplatform/projectDefaultConfig:ProjectDefaultConfig": "google_identity_platform_project_default_config",
            "gcp:identityplatform/tenant:Tenant": "google_identity_platform_tenant",
            "gcp:identityplatform/tenantDefaultSupportedIdpConfig:TenantDefaultSupportedIdpConfig": "google_identity_platform_tenant_default_supported_idp_config",
            "gcp:identityplatform/tenantInboundSamlConfig:TenantInboundSamlConfig": "google_identity_platform_tenant_inbound_saml_config",
            "gcp:identityplatform/tenantOauthIdpConfig:TenantOauthIdpConfig": "google_identity_platform_tenant_oauth_idp_config",
            "gcp:iot/device:Device": "google_cloudiot_device",
            "gcp:iot/registry:Registry": "google_cloudiot_registry",
            "gcp:iot/registryIamBinding:RegistryIamBinding": "google_cloudiot_registry_iam_binding",
            "gcp:iot/registryIamMember:RegistryIamMember": "google_cloudiot_registry_iam_member",
            "gcp:iot/registryIamPolicy:RegistryIamPolicy": "google_cloudiot_registry_iam_policy",
            "gcp:kms/cryptoKey:CryptoKey": "google_kms_crypto_key",
            "gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding": "google_kms_crypto_key_iam_binding",
            "gcp:kms/cryptoKeyIAMMember:CryptoKeyIAMMember": "google_kms_crypto_key_iam_member",
            "gcp:kms/cryptoKeyIAMPolicy:CryptoKeyIAMPolicy": "google_kms_crypto_key_iam_policy",
            "gcp:kms/cryptoKeyVersion:CryptoKeyVersion": "google_kms_crypto_key_version",
            "gcp:kms/keyRing:KeyRing": "google_kms_key_ring",
            "gcp:kms/keyRingIAMBinding:KeyRingIAMBinding": "google_kms_key_ring_iam_binding",
            "gcp:kms/keyRingIAMMember:KeyRingIAMMember": "google_kms_key_ring_iam_member",
            "gcp:kms/keyRingIAMPolicy:KeyRingIAMPolicy": "google_kms_key_ring_iam_policy",
            "gcp:kms/keyRingImportJob:KeyRingImportJob": "google_kms_key_ring_import_job",
            "gcp:kms/registry:Registry": "google_cloudiot_registry_legacy",
            "gcp:kms/secretCiphertext:SecretCiphertext": "google_kms_secret_ciphertext",
            "gcp:logging/billingAccountBucketConfig:BillingAccountBucketConfig": "google_logging_billing_account_bucket_config",
            "gcp:logging/billingAccountExclusion:BillingAccountExclusion": "google_logging_billing_account_exclusion",
            "gcp:logging/billingAccountSink:BillingAccountSink": "google_logging_billing_account_sink",
            "gcp:logging/folderBucketConfig:FolderBucketConfig": "google_logging_folder_bucket_config",
            "gcp:logging/folderExclusion:FolderExclusion": "google_logging_folder_exclusion",
            "gcp:logging/folderSink:FolderSink": "google_logging_folder_sink",
            "gcp:logging/linkedDataset:LinkedDataset": "google_logging_linked_dataset",
            "gcp:logging/logView:LogView": "google_logging_log_view",
            "gcp:logging/metric:Metric": "google_logging_metric",
            "gcp:logging/organizationBucketConfig:OrganizationBucketConfig": "google_logging_organization_bucket_config",
            "gcp:logging/organizationExclusion:OrganizationExclusion": "google_logging_organization_exclusion",
            "gcp:logging/organizationSink:OrganizationSink": "google_logging_organization_sink",
            "gcp:logging/projectBucketConfig:ProjectBucketConfig": "google_logging_project_bucket_config",
            "gcp:logging/projectExclusion:ProjectExclusion": "google_logging_project_exclusion",
            "gcp:logging/projectSink:ProjectSink": "google_logging_project_sink",
            "gcp:looker/instance:Instance": "google_looker_instance",
            "gcp:memcache/instance:Instance": "google_memcache_instance",
            "gcp:ml/engineModel:EngineModel": "google_ml_engine_model",
            "gcp:monitoring/alertPolicy:AlertPolicy": "google_monitoring_alert_policy",
            "gcp:monitoring/customService:CustomService": "google_monitoring_custom_service",
            "gcp:monitoring/dashboard:Dashboard": "google_monitoring_dashboard",
            "gcp:monitoring/genericService:GenericService": "google_monitoring_service",
            "gcp:monitoring/group:Group": "google_monitoring_group",
            "gcp:monitoring/metricDescriptor:MetricDescriptor": "google_monitoring_metric_descriptor",
            "gcp:monitoring/monitoredProject:MonitoredProject": "google_monitoring_monitored_project",
            "gcp:monitoring/notificationChannel:NotificationChannel": "google_monitoring_notification_channel",
            "gcp:monitoring/slo:Slo": "google_monitoring_slo",
            "gcp:monitoring/uptimeCheckConfig:UptimeCheckConfig": "google_monitoring_uptime_check_config",
            "gcp:networkconnectivity/hub:Hub": "google_network_connectivity_hub",
            "gcp:networkconnectivity/spoke:Spoke": "google_network_connectivity_spoke",
            "gcp:networkmanagement/connectivityTest:ConnectivityTest": "google_network_management_connectivity_test",
            "gcp:networksecurity/addressGroup:AddressGroup": "google_network_security_address_group",
            "gcp:networksecurity/authorizationPolicy:AuthorizationPolicy": "google_network_security_authorization_policy",
            "gcp:networksecurity/clientTlsPolicy:ClientTlsPolicy": "google_network_security_client_tls_policy",
            "gcp:networksecurity/gatewaySecurityPolicy:GatewaySecurityPolicy": "google_network_security_gateway_security_policy",
            "gcp:networksecurity/gatewaySecurityPolicyRule:GatewaySecurityPolicyRule": "google_network_security_gateway_security_policy_rule",
            "gcp:networksecurity/serverTlsPolicy:ServerTlsPolicy": "google_network_security_server_tls_policy",
            "gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy": "google_network_security_tls_inspection_policy",
            "gcp:networksecurity/urlList:UrlList": "google_network_security_url_lists",
            "gcp:networkservices/edgeCacheKeyset:EdgeCacheKeyset": "google_network_services_edge_cache_keyset",
            "gcp:networkservices/edgeCacheOrigin:EdgeCacheOrigin": "google_network_services_edge_cache_origin",
            "gcp:networkservices/edgeCacheService:EdgeCacheService": "google_network_services_edge_cache_service",
            "gcp:networkservices/endpointPolicy:EndpointPolicy": "google_network_services_endpoint_policy",
            "gcp:networkservices/gateway:Gateway": "google_network_services_gateway",
            "gcp:networkservices/grpcRoute:GrpcRoute": "google_network_services_grpc_route",
            "gcp:networkservices/httpRoute:HttpRoute": "google_network_services_http_route",
            "gcp:networkservices/mesh:Mesh": "google_network_services_mesh",
            "gcp:networkservices/serviceBinding:ServiceBinding": "google_network_services_service_binding",
            "gcp:networkservices/tcpRoute:TcpRoute": "google_network_services_tcp_route",
            "gcp:networkservices/tlsRoute:TlsRoute": "google_network_services_tls_route",
            "gcp:notebooks/environment:Environment": "google_notebooks_environment",
            "gcp:notebooks/instance:Instance": "google_notebooks_instance",
            "gcp:notebooks/instanceIamBinding:InstanceIamBinding": "google_notebooks_instance_iam_binding",
            "gcp:notebooks/instanceIamMember:InstanceIamMember": "google_notebooks_instance_iam_member",
            "gcp:notebooks/instanceIamPolicy:InstanceIamPolicy": "google_notebooks_instance_iam_policy",
            "gcp:notebooks/location:Location": "google_notebooks_location",
            "gcp:notebooks/runtime:Runtime": "google_notebooks_runtime",
            "gcp:notebooks/runtimeIamBinding:RuntimeIamBinding": "google_notebooks_runtime_iam_binding",
            "gcp:notebooks/runtimeIamMember:RuntimeIamMember": "google_notebooks_runtime_iam_member",
            "gcp:notebooks/runtimeIamPolicy:RuntimeIamPolicy": "google_notebooks_runtime_iam_policy",
            "gcp:organizations/accessApprovalSettings:AccessApprovalSettings": "google_organization_access_approval_settings",
            "gcp:organizations/folder:Folder": "google_folder",
            "gcp:organizations/iAMBinding:IAMBinding": "google_organization_iam_binding",
            "gcp:organizations/iAMCustomRole:IAMCustomRole": "google_organization_iam_custom_role",
            "gcp:organizations/iAMMember:IAMMember": "google_organization_iam_member",
            "gcp:organizations/iAMPolicy:IAMPolicy": "google_organization_iam_policy",
            "gcp:organizations/iamAuditConfig:IamAuditConfig": "google_organization_iam_audit_config",
            "gcp:organizations/policy:Policy": "google_organization_policy",
            "gcp:organizations/project:Project": "google_project",
            "gcp:orgpolicy/customConstraint:CustomConstraint": "google_org_policy_custom_constraint",
            "gcp:orgpolicy/policy:Policy": "google_org_policy_policy",
            "gcp:osconfig/guestPolicies:GuestPolicies": "google_os_config_guest_policies",
            "gcp:osconfig/osPolicyAssignment:OsPolicyAssignment": "google_os_config_os_policy_assignment",
            "gcp:osconfig/patchDeployment:PatchDeployment": "google_os_config_patch_deployment",
            "gcp:oslogin/sshPublicKey:SshPublicKey": "google_os_login_ssh_public_key",
            "gcp:projects/accessApprovalSettings:AccessApprovalSettings": "google_project_access_approval_settings",
            "gcp:projects/apiKey:ApiKey": "google_apikeys_key",
            "gcp:projects/defaultServiceAccounts:DefaultServiceAccounts": "google_project_default_service_accounts",
            "gcp:projects/iAMAuditConfig:IAMAuditConfig": "google_project_iam_audit_config",
            "gcp:projects/iAMBinding:IAMBinding": "google_project_iam_binding",
            "gcp:projects/iAMCustomRole:IAMCustomRole": "google_project_iam_custom_role",
            "gcp:projects/iAMMember:IAMMember": "google_project_iam_member",
            "gcp:projects/iAMPolicy:IAMPolicy": "google_project_iam_policy",
            "gcp:projects/organizationPolicy:OrganizationPolicy": "google_project_organization_policy",
            "gcp:projects/service:Service": "google_project_service",
            "gcp:projects/serviceIdentity:ServiceIdentity": "google_project_service_identity",
            "gcp:projects/usageExportBucket:UsageExportBucket": "google_project_usage_export_bucket",
            "gcp:pubsub/liteReservation:LiteReservation": "google_pubsub_lite_reservation",
            "gcp:pubsub/liteSubscription:LiteSubscription": "google_pubsub_lite_subscription",
            "gcp:pubsub/liteTopic:LiteTopic": "google_pubsub_lite_topic",
            "gcp:pubsub/schema:Schema": "google_pubsub_schema",
            "gcp:pubsub/subscription:Subscription": "google_pubsub_subscription",
            "gcp:pubsub/subscriptionIAMBinding:SubscriptionIAMBinding": "google_pubsub_subscription_iam_binding",
            "gcp:pubsub/subscriptionIAMMember:SubscriptionIAMMember": "google_pubsub_subscription_iam_member",
            "gcp:pubsub/subscriptionIAMPolicy:SubscriptionIAMPolicy": "google_pubsub_subscription_iam_policy",
            "gcp:pubsub/topic:Topic": "google_pubsub_topic",
            "gcp:pubsub/topicIAMBinding:TopicIAMBinding": "google_pubsub_topic_iam_binding",
            "gcp:pubsub/topicIAMMember:TopicIAMMember": "google_pubsub_topic_iam_member",
            "gcp:pubsub/topicIAMPolicy:TopicIAMPolicy": "google_pubsub_topic_iam_policy",
            "gcp:recaptcha/enterpriseKey:EnterpriseKey": "google_recaptcha_enterprise_key",
            "gcp:redis/instance:Instance": "google_redis_instance",
            "gcp:resourcemanager/lien:Lien": "google_resource_manager_lien",
            "gcp:runtimeconfig/config:Config": "google_runtimeconfig_config",
            "gcp:runtimeconfig/configIamBinding:ConfigIamBinding": "google_runtimeconfig_config_iam_binding",
            "gcp:runtimeconfig/configIamMember:ConfigIamMember": "google_runtimeconfig_config_iam_member",
            "gcp:runtimeconfig/configIamPolicy:ConfigIamPolicy": "google_runtimeconfig_config_iam_policy",
            "gcp:runtimeconfig/variable:Variable": "google_runtimeconfig_variable",
            "gcp:secretmanager/secret:Secret": "google_secret_manager_secret",
            "gcp:secretmanager/secretIamBinding:SecretIamBinding": "google_secret_manager_secret_iam_binding",
            "gcp:secretmanager/secretIamMember:SecretIamMember": "google_secret_manager_secret_iam_member",
            "gcp:secretmanager/secretIamPolicy:SecretIamPolicy": "google_secret_manager_secret_iam_policy",
            "gcp:secretmanager/secretVersion:SecretVersion": "google_secret_manager_secret_version",
            "gcp:securitycenter/instanceIamBinding:InstanceIamBinding": "google_data_fusion_instance_iam_binding",
            "gcp:securitycenter/instanceIamMember:InstanceIamMember": "google_data_fusion_instance_iam_member",
            "gcp:securitycenter/instanceIamPolicy:InstanceIamPolicy": "google_data_fusion_instance_iam_policy",
            "gcp:securitycenter/muteConfig:MuteConfig": "google_scc_mute_config",
            "gcp:securitycenter/notificationConfig:NotificationConfig": "google_scc_notification_config",
            "gcp:securitycenter/source:Source": "google_scc_source",
            "gcp:securitycenter/sourceIamBinding:SourceIamBinding": "google_scc_source_iam_binding",
            "gcp:securitycenter/sourceIamMember:SourceIamMember": "google_scc_source_iam_member",
            "gcp:securitycenter/sourceIamPolicy:SourceIamPolicy": "google_scc_source_iam_policy",
            "gcp:serviceAccount/account:Account": "google_service_account",
            "gcp:serviceAccount/iAMBinding:IAMBinding": "google_service_account_iam_binding",
            "gcp:serviceAccount/iAMMember:IAMMember": "google_service_account_iam_member",
            "gcp:serviceAccount/iAMPolicy:IAMPolicy": "google_service_account_iam_policy",
            "gcp:serviceAccount/key:Key": "google_service_account_key",
            "gcp:servicedirectory/endpoint:Endpoint": "google_service_directory_endpoint",
            "gcp:servicedirectory/namespace:Namespace": "google_service_directory_namespace",
            "gcp:servicedirectory/namespaceIamBinding:NamespaceIamBinding": "google_service_directory_namespace_iam_binding",
            "gcp:servicedirectory/namespaceIamMember:NamespaceIamMember": "google_service_directory_namespace_iam_member",
            "gcp:servicedirectory/namespaceIamPolicy:NamespaceIamPolicy": "google_service_directory_namespace_iam_policy",
            "gcp:servicedirectory/service:Service": "google_service_directory_service",
            "gcp:servicedirectory/serviceIamBinding:ServiceIamBinding": "google_service_directory_service_iam_binding",
            "gcp:servicedirectory/serviceIamMember:ServiceIamMember": "google_service_directory_service_iam_member",
            "gcp:servicedirectory/serviceIamPolicy:ServiceIamPolicy": "google_service_directory_service_iam_policy",
            "gcp:servicenetworking/connection:Connection": "google_service_networking_connection",
            "gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain": "google_service_networking_peered_dns_domain",
            "gcp:serviceusage/consumerQuotaOverride:ConsumerQuotaOverride": "google_service_usage_consumer_quota_override",
            "gcp:sourcerepo/repository:Repository": "google_sourcerepo_repository",
            "gcp:sourcerepo/repositoryIamBinding:RepositoryIamBinding": "google_sourcerepo_repository_iam_binding",
            "gcp:sourcerepo/repositoryIamMember:RepositoryIamMember": "google_sourcerepo_repository_iam_member",
            "gcp:sourcerepo/repositoryIamPolicy:RepositoryIamPolicy": "google_sourcerepo_repository_iam_policy",
            "gcp:spanner/database:Database": "google_spanner_database",
            "gcp:spanner/databaseIAMBinding:DatabaseIAMBinding": "google_spanner_database_iam_binding",
            "gcp:spanner/databaseIAMMember:DatabaseIAMMember": "google_spanner_database_iam_member",
            "gcp:spanner/databaseIAMPolicy:DatabaseIAMPolicy": "google_spanner_database_iam_policy",
            "gcp:spanner/instance:Instance": "google_spanner_instance",
            "gcp:spanner/instanceIAMBinding:InstanceIAMBinding": "google_spanner_instance_iam_binding",
            "gcp:spanner/instanceIAMMember:InstanceIAMMember": "google_spanner_instance_iam_member",
            "gcp:spanner/instanceIAMPolicy:InstanceIAMPolicy": "google_spanner_instance_iam_policy",
            "gcp:sql/database:Database": "google_sql_database",
            "gcp:sql/databaseInstance:DatabaseInstance": "google_sql_database_instance",
            "gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance": "google_sql_source_representation_instance",
            "gcp:sql/sslCert:SslCert": "google_sql_ssl_cert",
            "gcp:sql/user:User": "google_sql_user",
            "gcp:storage/bucket:Bucket": "google_storage_bucket",
            "gcp:storage/bucketACL:BucketACL": "google_storage_bucket_acl",
            "gcp:storage/bucketAccessControl:BucketAccessControl": "google_storage_bucket_access_control",
            "gcp:storage/bucketIAMBinding:BucketIAMBinding": "google_storage_bucket_iam_binding",
            "gcp:storage/bucketIAMMember:BucketIAMMember": "google_storage_bucket_iam_member",
            "gcp:storage/bucketIAMPolicy:BucketIAMPolicy": "google_storage_bucket_iam_policy",
            "gcp:storage/bucketObject:BucketObject": "google_storage_bucket_object",
            "gcp:storage/defaultObjectACL:DefaultObjectACL": "google_storage_default_object_acl",
            "gcp:storage/defaultObjectAccessControl:DefaultObjectAccessControl": "google_storage_default_object_access_control",
            "gcp:storage/hmacKey:HmacKey": "google_storage_hmac_key",
            "gcp:storage/notification:Notification": "google_storage_notification",
            "gcp:storage/objectACL:ObjectACL": "google_storage_object_acl",
            "gcp:storage/objectAccessControl:ObjectAccessControl": "google_storage_object_access_control",
            "gcp:storage/transferAgentPool:TransferAgentPool": "google_storage_transfer_agent_pool",
            "gcp:storage/transferJob:TransferJob": "google_storage_transfer_job",
            "gcp:tags/locationTagBinding:LocationTagBinding": "google_tags_location_tag_binding",
            "gcp:tags/tagBinding:TagBinding": "google_tags_tag_binding",
            "gcp:tags/tagKey:TagKey": "google_tags_tag_key",
            "gcp:tags/tagKeyIamBinding:TagKeyIamBinding": "google_tags_tag_key_iam_binding",
            "gcp:tags/tagKeyIamMember:TagKeyIamMember": "google_tags_tag_key_iam_member",
            "gcp:tags/tagKeyIamPolicy:TagKeyIamPolicy": "google_tags_tag_key_iam_policy",
            "gcp:tags/tagValue:TagValue": "google_tags_tag_value",
            "gcp:tags/tagValueIamBinding:TagValueIamBinding": "google_tags_tag_value_iam_binding",
            "gcp:tags/tagValueIamMember:TagValueIamMember": "google_tags_tag_value_iam_member",
            "gcp:tags/tagValueIamPolicy:TagValueIamPolicy": "google_tags_tag_value_iam_policy",
            "gcp:tpu/node:Node": "google_tpu_node",
            "gcp:vertex/aiDataset:AiDataset": "google_vertex_ai_dataset",
            "gcp:vertex/aiEndpoint:AiEndpoint": "google_vertex_ai_endpoint",
            "gcp:vertex/aiFeatureStore:AiFeatureStore": "google_vertex_ai_featurestore",
            "gcp:vertex/aiFeatureStoreEntityType:AiFeatureStoreEntityType": "google_vertex_ai_featurestore_entitytype",
            "gcp:vertex/aiFeatureStoreEntityTypeFeature:AiFeatureStoreEntityTypeFeature": "google_vertex_ai_featurestore_entitytype_feature",
            "gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding": "google_vertex_ai_featurestore_entitytype_iam_binding",
            "gcp:vertex/aiFeatureStoreEntityTypeIamMember:AiFeatureStoreEntityTypeIamMember": "google_vertex_ai_featurestore_entitytype_iam_member",
            "gcp:vertex/aiFeatureStoreEntityTypeIamPolicy:AiFeatureStoreEntityTypeIamPolicy": "google_vertex_ai_featurestore_entitytype_iam_policy",
            "gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding": "google_vertex_ai_featurestore_iam_binding",
            "gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember": "google_vertex_ai_featurestore_iam_member",
            "gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy": "google_vertex_ai_featurestore_iam_policy",
            "gcp:vertex/aiIndex:AiIndex": "google_vertex_ai_index",
            "gcp:vertex/aiIndexEndpoint:AiIndexEndpoint": "google_vertex_ai_index_endpoint",
            "gcp:vertex/aiMetadataStore:AiMetadataStore": "google_vertex_ai_metadata_store",
            "gcp:vertex/aiTensorboard:AiTensorboard": "google_vertex_ai_tensorboard",
            "gcp:vmwareengine/cluster:Cluster": "google_vmwareengine_cluster",
            "gcp:vmwareengine/network:Network": "google_vmwareengine_network",
            "gcp:vmwareengine/privateCloud:PrivateCloud": "google_vmwareengine_private_cloud",
            "gcp:vpcaccess/connector:Connector": "google_vpc_access_connector",
            "gcp:workflows/workflow:Workflow": "google_workflows_workflow",
            "gcp:workstations/workstation:Workstation": "google_workstations_workstation",
            "gcp:workstations/workstationCluster:WorkstationCluster": "google_workstations_workstation_cluster",
            "gcp:workstations/workstationConfig:WorkstationConfig": "google_workstations_workstation_config",
            "gcp:workstations/workstationConfigIamBinding:WorkstationConfigIamBinding": "google_workstations_workstation_config_iam_binding",
            "gcp:workstations/workstationConfigIamMember:WorkstationConfigIamMember": "google_workstations_workstation_config_iam_member",
            "gcp:workstations/workstationConfigIamPolicy:WorkstationConfigIamPolicy": "google_workstations_workstation_config_iam_policy",
            "gcp:workstations/workstationIamBinding:WorkstationIamBinding": "google_workstations_workstation_iam_binding",
            "gcp:workstations/workstationIamMember:WorkstationIamMember": "google_workstations_workstation_iam_member",
            "gcp:workstations/workstationIamPolicy:WorkstationIamPolicy": "google_workstations_workstation_iam_policy"
        },
        "functions": {
            "gcp:accessapproval/getFolderServiceAccount:getFolderServiceAccount": "google_access_approval_folder_service_account",
            "gcp:accessapproval/getOrganizationServiceAccount:getOrganizationServiceAccount": "google_access_approval_organization_service_account",
            "gcp:accessapproval/getProjectServiceAccount:getProjectServiceAccount": "google_access_approval_project_service_account",
            "gcp:accesscontextmanager/getAccessPolicyIamPolicy:getAccessPolicyIamPolicy": "google_access_context_manager_access_policy_iam_policy",
            "gcp:alloydb/getLocations:getLocations": "google_alloydb_locations",
            "gcp:alloydb/getSupportedDatabaseFlags:getSupportedDatabaseFlags": "google_alloydb_supported_database_flags",
            "gcp:apigateway/getApiConfigIamPolicy:getApiConfigIamPolicy": "google_api_gateway_api_config_iam_policy",
            "gcp:apigateway/getApiIamPolicy:getApiIamPolicy": "google_api_gateway_api_iam_policy",
            "gcp:apigateway/getGatewayIamPolicy:getGatewayIamPolicy": "google_api_gateway_gateway_iam_policy",
            "gcp:apigee/getEnvironmentIamPolicy:getEnvironmentIamPolicy": "google_apigee_environment_iam_policy",
            "gcp:appengine/getDefaultServiceAccount:getDefaultServiceAccount": "google_app_engine_default_service_account",
            "gcp:artifactregistry/getRepository:getRepository": "google_artifact_registry_repository",
            "gcp:artifactregistry/getRepositoryIamPolicy:getRepositoryIamPolicy": "google_artifact_registry_repository_iam_policy",
            "gcp:beyondcorp/getAppConnection:getAppConnection": "google_beyondcorp_app_connection",
            "gcp:beyondcorp/getAppConnector:getAppConnector": "google_beyondcorp_app_connector",
            "gcp:beyondcorp/getAppGateway:getAppGateway": "google_beyondcorp_app_gateway",
            "gcp:bigquery/getConnectionIamPolicy:getConnectionIamPolicy": "google_bigquery_connection_iam_policy",
            "gcp:bigquery/getDatasetIamPolicy:getDatasetIamPolicy": "google_bigquery_dataset_iam_policy",
            "gcp:bigquery/getDefaultServiceAccount:getDefaultServiceAccount": "google_bigquery_default_service_account",
            "gcp:bigquery/getTableIamPolicy:getTableIamPolicy": "google_bigquery_table_iam_policy",
            "gcp:bigqueryanalyticshub/getDataExchangeIamPolicy:getDataExchangeIamPolicy": "google_bigquery_analytics_hub_data_exchange_iam_policy",
            "gcp:bigqueryanalyticshub/getListingIamPolicy:getListingIamPolicy": "google_bigquery_analytics_hub_listing_iam_policy",
            "gcp:bigquerydatapolicy/getIamPolicy:getIamPolicy": "google_bigquery_datapolicy_data_policy_iam_policy",
            "gcp:bigtable/getInstanceIamPolicy:getInstanceIamPolicy": "google_bigtable_instance_iam_policy",
            "gcp:bigtable/getTableIamPolicy:getTableIamPolicy": "google_bigtable_table_iam_policy",
            "gcp:billing/getAccountIamPolicy:getAccountIamPolicy": "google_billing_account_iam_policy",
            "gcp:binaryauthorization/getAttestorIamPolicy:getAttestorIamPolicy": "google_binary_authorization_attestor_iam_policy",
            "gcp:certificateauthority/getAuthority:getAuthority": "google_privateca_certificate_authority",
            "gcp:certificateauthority/getCaPoolIamPolicy:getCaPoolIamPolicy": "google_privateca_ca_pool_iam_policy",
            "gcp:certificateauthority/getCertificateTemplateIamPolicy:getCertificateTemplateIamPolicy": "google_privateca_certificate_template_iam_policy",
            "gcp:cloudasset/getResourcesSearchAll:getResourcesSearchAll": "google_cloud_asset_resources_search_all",
            "gcp:cloudbuild/getTrigger:getTrigger": "google_cloudbuild_trigger",
            "gcp:cloudbuildv2/getConnectionIamPolicy:getConnectionIamPolicy": "google_cloudbuildv2_connection_iam_policy",
            "gcp:cloudfunctions/getFunction:getFunction": "google_cloudfunctions_function",
            "gcp:cloudfunctions/getFunctionIamPolicy:getFunctionIamPolicy": "google_cloudfunctions_function_iam_policy",
            "gcp:cloudfunctionsv2/getFunction:getFunction": "google_cloudfunctions2_function",
            "gcp:cloudfunctionsv2/getFunctionIamPolicy:getFunctionIamPolicy": "google_cloudfunctions2_function_iam_policy",
            "gcp:cloudidentity/getGroupMemberships:getGroupMemberships": "google_cloud_identity_group_memberships",
            "gcp:cloudidentity/getGroups:getGroups": "google_cloud_identity_groups",
            "gcp:cloudrun/getLocations:getLocations": "google_cloud_run_locations",
            "gcp:cloudrun/getService:getService": "google_cloud_run_service",
            "gcp:cloudrun/getServiceIamPolicy:getServiceIamPolicy": "google_cloud_run_service_iam_policy",
            "gcp:cloudrunv2/getJobIamPolicy:getJobIamPolicy": "google_cloud_run_v2_job_iam_policy",
            "gcp:cloudrunv2/getServiceIamPolicy:getServiceIamPolicy": "google_cloud_run_v2_service_iam_policy",
            "gcp:cloudtasks/getQueueIamPolicy:getQueueIamPolicy": "google_cloud_tasks_queue_iam_policy",
            "gcp:composer/getEnvironment:getEnvironment": "google_composer_environment",
            "gcp:composer/getImageVersions:getImageVersions": "google_composer_image_versions",
            "gcp:compute/getAddress:getAddress": "google_compute_address",
            "gcp:compute/getAddresses:getAddresses": "google_compute_addresses",
            "gcp:compute/getBackendBucket:getBackendBucket": "google_compute_backend_bucket",
            "gcp:compute/getBackendBucketIamPolicy:getBackendBucketIamPolicy": "google_compute_backend_bucket_iam_policy",
            "gcp:compute/getBackendService:getBackendService": "google_compute_backend_service",
            "gcp:compute/getBackendServiceIamPolicy:getBackendServiceIamPolicy": "google_compute_backend_service_iam_policy",
            "gcp:compute/getCertificate:getCertificate": "google_compute_ssl_certificate",
            "gcp:compute/getDefaultServiceAccount:getDefaultServiceAccount": "google_compute_default_service_account",
            "gcp:compute/getDisk:getDisk": "google_compute_disk",
            "gcp:compute/getDiskIamPolicy:getDiskIamPolicy": "google_compute_disk_iam_policy",
            "gcp:compute/getForwardingRule:getForwardingRule": "google_compute_forwarding_rule",
            "gcp:compute/getGlobalAddress:getGlobalAddress": "google_compute_global_address",
            "gcp:compute/getGlobalForwardingRule:getGlobalForwardingRule": "google_compute_global_forwarding_rule",
            "gcp:compute/getHcVpnGateway:getHcVpnGateway": "google_compute_ha_vpn_gateway",
            "gcp:compute/getHealthCheck:getHealthCheck": "google_compute_health_check",
            "gcp:compute/getImage:getImage": "google_compute_image",
            "gcp:compute/getImageIamPolicy:getImageIamPolicy": "google_compute_image_iam_policy",
            "gcp:compute/getInstance:getInstance": "google_compute_instance",
            "gcp:compute/getInstanceGroup:getInstanceGroup": "google_compute_instance_group",
            "gcp:compute/getInstanceGroupManager:getInstanceGroupManager": "google_compute_instance_group_manager",
            "gcp:compute/getInstanceIamPolicy:getInstanceIamPolicy": "google_compute_instance_iam_policy",
            "gcp:compute/getInstanceSerialPort:getInstanceSerialPort": "google_compute_instance_serial_port",
            "gcp:compute/getInstanceTemplate:getInstanceTemplate": "google_compute_instance_template",
            "gcp:compute/getLBIPRanges:getLBIPRanges": "google_compute_lb_ip_ranges",
            "gcp:compute/getMachineImageIamPolicy:getMachineImageIamPolicy": "google_compute_machine_image_iam_policy",
            "gcp:compute/getNetblockIPRanges:getNetblockIPRanges": "google_netblock_ip_ranges",
            "gcp:compute/getNetwork:getNetwork": "google_compute_network",
            "gcp:compute/getNetworkEndpointGroup:getNetworkEndpointGroup": "google_compute_network_endpoint_group",
            "gcp:compute/getNetworkPeering:getNetworkPeering": "google_compute_network_peering",
            "gcp:compute/getNodeTypes:getNodeTypes": "google_compute_node_types",
            "gcp:compute/getRegionBackendServiceIamPolicy:getRegionBackendServiceIamPolicy": "google_compute_region_backend_service_iam_policy",
            "gcp:compute/getRegionDiskIamPolicy:getRegionDiskIamPolicy": "google_compute_region_disk_iam_policy",
            "gcp:compute/getRegionInstanceGroup:getRegionInstanceGroup": "google_compute_region_instance_group",
            "gcp:compute/getRegionInstanceTemplate:getRegionInstanceTemplate": "google_compute_region_instance_template",
            "gcp:compute/getRegionNetworkEndpointGroup:getRegionNetworkEndpointGroup": "google_compute_region_network_endpoint_group",
            "gcp:compute/getRegionSslCertificate:getRegionSslCertificate": "google_compute_region_ssl_certificate",
            "gcp:compute/getRegions:getRegions": "google_compute_regions",
            "gcp:compute/getResourcePolicy:getResourcePolicy": "google_compute_resource_policy",
            "gcp:compute/getRouter:getRouter": "google_compute_router",
            "gcp:compute/getRouterNat:getRouterNat": "google_compute_router_nat",
            "gcp:compute/getRouterStatus:getRouterStatus": "google_compute_router_status",
            "gcp:compute/getSSLPolicy:getSSLPolicy": "google_compute_ssl_policy",
            "gcp:compute/getSnapshot:getSnapshot": "google_compute_snapshot",
            "gcp:compute/getSnapshotIamPolicy:getSnapshotIamPolicy": "google_compute_snapshot_iam_policy",
            "gcp:compute/getSubnetwork:getSubnetwork": "google_compute_subnetwork",
            "gcp:compute/getSubnetworkIamPolicy:getSubnetworkIamPolicy": "google_compute_subnetwork_iam_policy",
            "gcp:compute/getVPNGateway:getVPNGateway": "google_compute_vpn_gateway",
            "gcp:compute/getZones:getZones": "google_compute_zones",
            "gcp:compute/routerStatus:RouterStatus": "google_compute_router_status_legacy",
            "gcp:container/getAttachedInstallManifest:getAttachedInstallManifest": "google_container_attached_install_manifest",
            "gcp:container/getAttachedVersions:getAttachedVersions": "google_container_attached_versions",
            "gcp:container/getAwsVersions:getAwsVersions": "google_container_aws_versions",
            "gcp:container/getAzureVersions:getAzureVersions": "google_container_azure_versions",
            "gcp:container/getCluster:getCluster": "google_container_cluster",
            "gcp:container/getEngineVersions:getEngineVersions": "google_container_engine_versions",
            "gcp:container/getRegistryImage:getRegistryImage": "google_container_registry_image",
            "gcp:container/getRegistryRepository:getRegistryRepository": "google_container_registry_repository",
            "gcp:containeranalysis/getNoteIamPolicy:getNoteIamPolicy": "google_container_analysis_note_iam_policy",
            "gcp:datacatalog/getEntryGroupIamPolicy:getEntryGroupIamPolicy": "google_data_catalog_entry_group_iam_policy",
            "gcp:datacatalog/getPolicyTagIamPolicy:getPolicyTagIamPolicy": "google_data_catalog_policy_tag_iam_policy",
            "gcp:datacatalog/getTagTemplateIamPolicy:getTagTemplateIamPolicy": "google_data_catalog_tag_template_iam_policy",
            "gcp:datacatalog/getTaxonomyIamPolicy:getTaxonomyIamPolicy": "google_data_catalog_taxonomy_iam_policy",
            "gcp:datafusion/getInstanceIamPolicy:getInstanceIamPolicy": "google_data_fusion_instance_iam_policy",
            "gcp:dataplex/getAssetIamPolicy:getAssetIamPolicy": "google_dataplex_asset_iam_policy",
            "gcp:dataplex/getDatascanIamPolicy:getDatascanIamPolicy": "google_dataplex_datascan_iam_policy",
            "gcp:dataplex/getLakeIamPolicy:getLakeIamPolicy": "google_dataplex_lake_iam_policy",
            "gcp:dataplex/getTaskIamPolicy:getTaskIamPolicy": "google_dataplex_task_iam_policy",
            "gcp:dataplex/getZoneIamPolicy:getZoneIamPolicy": "google_dataplex_zone_iam_policy",
            "gcp:dataproc/getAutoscalingPolicyIamPolicy:getAutoscalingPolicyIamPolicy": "google_dataproc_autoscaling_policy_iam_policy",
            "gcp:dataproc/getClusterIamPolicy:getClusterIamPolicy": "google_dataproc_cluster_iam_policy",
            "gcp:dataproc/getJobIamPolicy:getJobIamPolicy": "google_dataproc_job_iam_policy",
            "gcp:dataproc/getMetastoreFederationIamPolicy:getMetastoreFederationIamPolicy": "google_dataproc_metastore_federation_iam_policy",
            "gcp:dataproc/getMetastoreServiceIamPolicy:getMetastoreServiceIamPolicy": "google_dataproc_metastore_service_iam_policy",
            "gcp:datastream/getStaticIps:getStaticIps": "google_datastream_static_ips",
            "gcp:dns/getKeys:getKeys": "google_dns_keys",
            "gcp:dns/getManagedZone:getManagedZone": "google_dns_managed_zone",
            "gcp:dns/getManagedZoneIamPolicy:getManagedZoneIamPolicy": "google_dns_managed_zone_iam_policy",
            "gcp:dns/getRecordSet:getRecordSet": "google_dns_record_set",
            "gcp:endpoints/getServiceConsumersIamPolicy:getServiceConsumersIamPolicy": "google_endpoints_service_consumers_iam_policy",
            "gcp:endpoints/getServiceIamPolicy:getServiceIamPolicy": "google_endpoints_service_iam_policy",
            "gcp:firebase/getAndroidApp:getAndroidApp": "google_firebase_android_app",
            "gcp:firebase/getAndroidAppConfig:getAndroidAppConfig": "google_firebase_android_app_config",
            "gcp:firebase/getAppleApp:getAppleApp": "google_firebase_apple_app",
            "gcp:firebase/getAppleAppConfig:getAppleAppConfig": "google_firebase_apple_app_config",
            "gcp:firebase/getHostingChannel:getHostingChannel": "google_firebase_hosting_channel",
            "gcp:firebase/getWebApp:getWebApp": "google_firebase_web_app",
            "gcp:firebase/getWebAppConfig:getWebAppConfig": "google_firebase_web_app_config",
            "gcp:folder/getIamPolicy:getIamPolicy": "google_folder_iam_policy",
            "gcp:folder/getOrganizationPolicy:getOrganizationPolicy": "google_folder_organization_policy",
            "gcp:gameservices/getGameServerDeploymentRollout:getGameServerDeploymentRollout": "google_game_services_game_server_deployment_rollout",
            "gcp:gkebackup/getBackupPlanIamPolicy:getBackupPlanIamPolicy": "google_gke_backup_backup_plan_iam_policy",
            "gcp:gkehub/getFeatureIamPolicy:getFeatureIamPolicy": "google_gke_hub_feature_iam_policy",
            "gcp:gkehub/getMembershipIamPolicy:getMembershipIamPolicy": "google_gke_hub_membership_iam_policy",
            "gcp:healthcare/getConsentStoreIamPolicy:getConsentStoreIamPolicy": "google_healthcare_consent_store_iam_policy",
            "gcp:healthcare/getDatasetIamPolicy:getDatasetIamPolicy": "google_healthcare_dataset_iam_policy",
            "gcp:healthcare/getDicomStoreIamPolicy:getDicomStoreIamPolicy": "google_healthcare_dicom_store_iam_policy",
            "gcp:healthcare/getFhirStoreIamPolicy:getFhirStoreIamPolicy": "google_healthcare_fhir_store_iam_policy",
            "gcp:healthcare/getHl7V2StoreIamPolicy:getHl7V2StoreIamPolicy": "google_healthcare_hl7_v2_store_iam_policy",
            "gcp:iam/getRule:getRule": "google_iam_role",
            "gcp:iam/getTestablePermissions:getTestablePermissions": "google_iam_testable_permissions",
            "gcp:iam/getWorkloadIdentityPool:getWorkloadIdentityPool": "google_iam_workload_identity_pool",
            "gcp:iam/getWorkloadIdentityPoolProvider:getWorkloadIdentityPoolProvider": "google_iam_workload_identity_pool_provider",
            "gcp:iap/getAppEngineServiceIamPolicy:getAppEngineServiceIamPolicy": "google_iap_app_engine_service_iam_policy",
            "gcp:iap/getAppEngineVersionIamPolicy:getAppEngineVersionIamPolicy": "google_iap_app_engine_version_iam_policy",
            "gcp:iap/getClient:getClient": "google_iap_client",
            "gcp:iap/getTunnelIamPolicy:getTunnelIamPolicy": "google_iap_tunnel_iam_policy",
            "gcp:iap/getTunnelInstanceIamPolicy:getTunnelInstanceIamPolicy": "google_iap_tunnel_instance_iam_policy",
            "gcp:iap/getWebBackendServiceIamPolicy:getWebBackendServiceIamPolicy": "google_iap_web_backend_service_iam_policy",
            "gcp:iap/getWebIamPolicy:getWebIamPolicy": "google_iap_web_iam_policy",
            "gcp:iap/getWebRegionBackendServiceIamPolicy:getWebRegionBackendServiceIamPolicy": "google_iap_web_region_backend_service_iam_policy",
            "gcp:iap/getWebTypeAppEngineIamPolicy:getWebTypeAppEngineIamPolicy": "google_iap_web_type_app_engine_iam_policy",
            "gcp:iap/getWebTypeComputeIamPolicy:getWebTypeComputeIamPolicy": "google_iap_web_type_compute_iam_policy",
            "gcp:iot/getRegistryIamPolicy:getRegistryIamPolicy": "google_cloudiot_registry_iam_policy",
            "gcp:kms/getCryptoKeyIamPolicy:getCryptoKeyIamPolicy": "google_kms_crypto_key_iam_policy",
            "gcp:kms/getKMSCryptoKey:getKMSCryptoKey": "google_kms_crypto_key",
            "gcp:kms/getKMSCryptoKeyVersion:getKMSCryptoKeyVersion": "google_kms_crypto_key_version",
            "gcp:kms/getKMSKeyRing:getKMSKeyRing": "google_kms_key_ring",
            "gcp:kms/getKMSSecret:getKMSSecret": "google_kms_secret",
            "gcp:kms/getKMSSecretAsymmetric:getKMSSecretAsymmetric": "google_kms_secret_asymmetric",
            "gcp:kms/getKMSSecretCiphertext:getKMSSecretCiphertext": "google_kms_secret_ciphertext",
            "gcp:kms/getKeyRingIamPolicy:getKeyRingIamPolicy": "google_kms_key_ring_iam_policy",
            "gcp:logging/getProjectCmekSettings:getProjectCmekSettings": "google_logging_project_cmek_settings",
            "gcp:logging/getSink:getSink": "google_logging_sink",
            "gcp:monitoring/getAppEngineService:getAppEngineService": "google_monitoring_app_engine_service",
            "gcp:monitoring/getClusterIstioService:getClusterIstioService": "google_monitoring_cluster_istio_service",
            "gcp:monitoring/getIstioCanonicalService:getIstioCanonicalService": "google_monitoring_istio_canonical_service",
            "gcp:monitoring/getMeshIstioService:getMeshIstioService": "google_monitoring_mesh_istio_service",
            "gcp:monitoring/getNotificationChannel:getNotificationChannel": "google_monitoring_notification_channel",
            "gcp:monitoring/getSecretVersion:getSecretVersion": "google_secret_manager_secret_version_legacy",
            "gcp:monitoring/getUptimeCheckIPs:getUptimeCheckIPs": "google_monitoring_uptime_check_ips",
            "gcp:notebooks/getInstanceIamPolicy:getInstanceIamPolicy": "google_notebooks_instance_iam_policy",
            "gcp:notebooks/getRuntimeIamPolicy:getRuntimeIamPolicy": "google_notebooks_runtime_iam_policy",
            "gcp:organizations/getActiveFolder:getActiveFolder": "google_active_folder",
            "gcp:organizations/getBillingAccount:getBillingAccount": "google_billing_account",
            "gcp:organizations/getClientConfig:getClientConfig": "google_client_config",
            "gcp:organizations/getClientOpenIdUserInfo:getClientOpenIdUserInfo": "google_client_openid_userinfo",
            "gcp:organizations/getFolder:getFolder": "google_folder",
            "gcp:organizations/getFolders:getFolders": "google_folders",
            "gcp:organizations/getIAMPolicy:getIAMPolicy": "google_iam_policy",
            "gcp:organizations/getOrganization:getOrganization": "google_organization",
            "gcp:organizations/getProject:getProject": "google_project",
            "gcp:projects/getIamPolicy:getIamPolicy": "google_project_iam_policy",
            "gcp:projects/getOrganizationPolicy:getOrganizationPolicy": "google_project_organization_policy",
            "gcp:projects/getProject:getProject": "google_projects",
            "gcp:projects/getProjectService:getProjectService": "google_project_service",
            "gcp:pubsub/getSubscription:getSubscription": "google_pubsub_subscription",
            "gcp:pubsub/getSubscriptionIamPolicy:getSubscriptionIamPolicy": "google_pubsub_subscription_iam_policy",
            "gcp:pubsub/getTopic:getTopic": "google_pubsub_topic",
            "gcp:pubsub/getTopicIamPolicy:getTopicIamPolicy": "google_pubsub_topic_iam_policy",
            "gcp:redis/getInstance:getInstance": "google_redis_instance",
            "gcp:runtimeconfig/getConfig:getConfig": "google_runtimeconfig_config",
            "gcp:runtimeconfig/getConfigIamPolicy:getConfigIamPolicy": "google_runtimeconfig_config_iam_policy",
            "gcp:runtimeconfig/getVariable:getVariable": "google_runtimeconfig_variable",
            "gcp:secretmanager/getSecret:getSecret": "google_secret_manager_secret",
            "gcp:secretmanager/getSecretIamPolicy:getSecretIamPolicy": "google_secret_manager_secret_iam_policy",
            "gcp:secretmanager/getSecretVersion:getSecretVersion": "google_secret_manager_secret_version",
            "gcp:secretmanager/getSecretVersionAccess:getSecretVersionAccess": "google_secret_manager_secret_version_access",
            "gcp:securitycenter/getSourceIamPolicy:getSourceIamPolicy": "google_scc_source_iam_policy",
            "gcp:serviceAccount/getAccount:getAccount": "google_service_account",
            "gcp:serviceAccount/getAccountAccessToken:getAccountAccessToken": "google_service_account_access_token",
            "gcp:serviceAccount/getAccountIdToken:getAccountIdToken": "google_service_account_id_token",
            "gcp:serviceAccount/getAccountJwt:getAccountJwt": "google_service_account_jwt",
            "gcp:serviceAccount/getAccountKey:getAccountKey": "google_service_account_key",
            "gcp:serviceAccount/getIamPolicy:getIamPolicy": "google_service_account_iam_policy",
            "gcp:servicedirectory/getNamespaceIamPolicy:getNamespaceIamPolicy": "google_service_directory_namespace_iam_policy",
            "gcp:servicedirectory/getServiceIamPolicy:getServiceIamPolicy": "google_service_directory_service_iam_policy",
            "gcp:servicenetworking/getPeeredDnsDomain:getPeeredDnsDomain": "google_service_networking_peered_dns_domain",
            "gcp:sourcerepo/getRepository:getRepository": "google_sourcerepo_repository",
            "gcp:sourcerepo/getRepositoryIamPolicy:getRepositoryIamPolicy": "google_sourcerepo_repository_iam_policy",
            "gcp:spanner/getDatabaseIamPolicy:getDatabaseIamPolicy": "google_spanner_database_iam_policy",
            "gcp:spanner/getInstance:getInstance": "google_spanner_instance",
            "gcp:spanner/getInstanceIamPolicy:getInstanceIamPolicy": "google_spanner_instance_iam_policy",
            "gcp:sql/getBackupRun:getBackupRun": "google_sql_backup_run",
            "gcp:sql/getCaCerts:getCaCerts": "google_sql_ca_certs",
            "gcp:sql/getDatabase:getDatabase": "google_sql_database",
            "gcp:sql/getDatabaseInstance:getDatabaseInstance": "google_sql_database_instance",
            "gcp:sql/getDatabaseInstances:getDatabaseInstances": "google_sql_database_instances",
            "gcp:sql/getDatabases:getDatabases": "google_sql_databases",
            "gcp:sql/getTiers:getTiers": "google_sql_tiers",
            "gcp:storage/getBucket:getBucket": "google_storage_bucket",
            "gcp:storage/getBucketIamPolicy:getBucketIamPolicy": "google_storage_bucket_iam_policy",
            "gcp:storage/getBucketObject:getBucketObject": "google_storage_bucket_object",
            "gcp:storage/getBucketObjectContent:getBucketObjectContent": "google_storage_bucket_object_content",
            "gcp:storage/getObjectSignedUrl:getObjectSignedUrl": "google_storage_object_signed_url",
            "gcp:storage/getProjectServiceAccount:getProjectServiceAccount": "google_storage_project_service_account",
            "gcp:storage/getTransferProjectServiceAccount:getTransferProjectServiceAccount": "google_storage_transfer_project_service_account",
            "gcp:storage/getTransferProjectServieAccount:getTransferProjectServieAccount": "google_storage_transfer_project_service_account_legacy",
            "gcp:tags/getTagKey:getTagKey": "google_tags_tag_key",
            "gcp:tags/getTagKeyIamPolicy:getTagKeyIamPolicy": "google_tags_tag_key_iam_policy",
            "gcp:tags/getTagValue:getTagValue": "google_tags_tag_value",
            "gcp:tags/getTagValueIamPolicy:getTagValueIamPolicy": "google_tags_tag_value_iam_policy",
            "gcp:tpu/getTensorflowVersions:getTensorflowVersions": "google_tpu_tensorflow_versions",
            "gcp:vertex/getAiFeaturestoreEntitytypeIamPolicy:getAiFeaturestoreEntitytypeIamPolicy": "google_vertex_ai_featurestore_entitytype_iam_policy",
            "gcp:vertex/getAiFeaturestoreIamPolicy:getAiFeaturestoreIamPolicy": "google_vertex_ai_featurestore_iam_policy",
            "gcp:vertex/getAiIndex:getAiIndex": "google_vertex_ai_index",
            "gcp:vmwareengine/getCluster:getCluster": "google_vmwareengine_cluster",
            "gcp:vmwareengine/getNetwork:getNetwork": "google_vmwareengine_network",
            "gcp:vmwareengine/getPrivateCloud:getPrivateCloud": "google_vmwareengine_private_cloud",
            "gcp:vpcaccess/getConnector:getConnector": "google_vpc_access_connector",
            "gcp:workstations/getWorkstationConfigIamPolicy:getWorkstationConfigIamPolicy": "google_workstations_workstation_config_iam_policy",
            "gcp:workstations/getWorkstationIamPolicy:getWorkstationIamPolicy": "google_workstations_workstation_iam_policy"
        },
        "renamedProperties": {
            "gcp:accessapproval/getFolderServiceAccount:getFolderServiceAccount": {
                "accountEmail": "account_email",
                "folderId": "folder_id"
            },
            "gcp:accessapproval/getOrganizationServiceAccount:getOrganizationServiceAccount": {
                "accountEmail": "account_email",
                "organizationId": "organization_id"
            },
            "gcp:accessapproval/getProjectServiceAccount:getProjectServiceAccount": {
                "accountEmail": "account_email",
                "projectId": "project_id"
            },
            "gcp:accesscontextmanager/AccessLevelBasic:AccessLevelBasic": {
                "combiningFunction": "combining_function"
            },
            "gcp:accesscontextmanager/AccessLevelBasicCondition:AccessLevelBasicCondition": {
                "devicePolicy": "device_policy",
                "ipSubnetworks": "ip_subnetworks",
                "requiredAccessLevels": "required_access_levels"
            },
            "gcp:accesscontextmanager/AccessLevelBasicConditionDevicePolicy:AccessLevelBasicConditionDevicePolicy": {
                "allowedDeviceManagementLevels": "allowed_device_management_levels",
                "allowedEncryptionStatuses": "allowed_encryption_statuses",
                "osConstraints": "os_constraints",
                "requireAdminApproval": "require_admin_approval",
                "requireCorpOwned": "require_corp_owned",
                "requireScreenLock": "require_screen_lock"
            },
            "gcp:accesscontextmanager/AccessLevelBasicConditionDevicePolicyOsConstraint:AccessLevelBasicConditionDevicePolicyOsConstraint": {
                "minimumVersion": "minimum_version",
                "osType": "os_type",
                "requireVerifiedChromeOs": "require_verified_chrome_os"
            },
            "gcp:accesscontextmanager/AccessLevelConditionDevicePolicy:AccessLevelConditionDevicePolicy": {
                "allowedDeviceManagementLevels": "allowed_device_management_levels",
                "allowedEncryptionStatuses": "allowed_encryption_statuses",
                "osConstraints": "os_constraints",
                "requireAdminApproval": "require_admin_approval",
                "requireCorpOwned": "require_corp_owned",
                "requireScreenLock": "require_screen_lock"
            },
            "gcp:accesscontextmanager/AccessLevelConditionDevicePolicyOsConstraint:AccessLevelConditionDevicePolicyOsConstraint": {
                "minimumVersion": "minimum_version",
                "osType": "os_type"
            },
            "gcp:accesscontextmanager/AccessLevelsAccessLevelBasic:AccessLevelsAccessLevelBasic": {
                "combiningFunction": "combining_function"
            },
            "gcp:accesscontextmanager/AccessLevelsAccessLevelBasicCondition:AccessLevelsAccessLevelBasicCondition": {
                "devicePolicy": "device_policy",
                "ipSubnetworks": "ip_subnetworks",
                "requiredAccessLevels": "required_access_levels"
            },
            "gcp:accesscontextmanager/AccessLevelsAccessLevelBasicConditionDevicePolicy:AccessLevelsAccessLevelBasicConditionDevicePolicy": {
                "allowedDeviceManagementLevels": "allowed_device_management_levels",
                "allowedEncryptionStatuses": "allowed_encryption_statuses",
                "osConstraints": "os_constraints",
                "requireAdminApproval": "require_admin_approval",
                "requireCorpOwned": "require_corp_owned",
                "requireScreenLock": "require_screen_lock"
            },
            "gcp:accesscontextmanager/AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraint:AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraint": {
                "minimumVersion": "minimum_version",
                "osType": "os_type"
            },
            "gcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressFrom:ServicePerimeterEgressPolicyEgressFrom": {
                "identityType": "identity_type"
            },
            "gcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressTo:ServicePerimeterEgressPolicyEgressTo": {
                "externalResources": "external_resources"
            },
            "gcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressToOperation:ServicePerimeterEgressPolicyEgressToOperation": {
                "methodSelectors": "method_selectors",
                "serviceName": "service_name"
            },
            "gcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressFrom:ServicePerimeterIngressPolicyIngressFrom": {
                "identityType": "identity_type"
            },
            "gcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressFromSource:ServicePerimeterIngressPolicyIngressFromSource": {
                "accessLevel": "access_level"
            },
            "gcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressToOperation:ServicePerimeterIngressPolicyIngressToOperation": {
                "methodSelectors": "method_selectors",
                "serviceName": "service_name"
            },
            "gcp:accesscontextmanager/ServicePerimeterSpec:ServicePerimeterSpec": {
                "accessLevels": "access_levels",
                "egressPolicies": "egress_policies",
                "ingressPolicies": "ingress_policies",
                "restrictedServices": "restricted_services",
                "vpcAccessibleServices": "vpc_accessible_services"
            },
            "gcp:accesscontextmanager/ServicePerimeterSpecEgressPolicy:ServicePerimeterSpecEgressPolicy": {
                "egressFrom": "egress_from",
                "egressTo": "egress_to"
            },
            "gcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressFrom:ServicePerimeterSpecEgressPolicyEgressFrom": {
                "identityType": "identity_type"
            },
            "gcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressTo:ServicePerimeterSpecEgressPolicyEgressTo": {
                "externalResources": "external_resources"
            },
            "gcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressToOperation:ServicePerimeterSpecEgressPolicyEgressToOperation": {
                "methodSelectors": "method_selectors",
                "serviceName": "service_name"
            },
            "gcp:accesscontextmanager/ServicePerimeterSpecIngressPolicy:ServicePerimeterSpecIngressPolicy": {
                "ingressFrom": "ingress_from",
                "ingressTo": "ingress_to"
            },
            "gcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressFrom:ServicePerimeterSpecIngressPolicyIngressFrom": {
                "identityType": "identity_type"
            },
            "gcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressFromSource:ServicePerimeterSpecIngressPolicyIngressFromSource": {
                "accessLevel": "access_level"
            },
            "gcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressToOperation:ServicePerimeterSpecIngressPolicyIngressToOperation": {
                "methodSelectors": "method_selectors",
                "serviceName": "service_name"
            },
            "gcp:accesscontextmanager/ServicePerimeterSpecVpcAccessibleServices:ServicePerimeterSpecVpcAccessibleServices": {
                "allowedServices": "allowed_services",
                "enableRestriction": "enable_restriction"
            },
            "gcp:accesscontextmanager/ServicePerimeterStatus:ServicePerimeterStatus": {
                "accessLevels": "access_levels",
                "egressPolicies": "egress_policies",
                "ingressPolicies": "ingress_policies",
                "restrictedServices": "restricted_services",
                "vpcAccessibleServices": "vpc_accessible_services"
            },
            "gcp:accesscontextmanager/ServicePerimeterStatusEgressPolicy:ServicePerimeterStatusEgressPolicy": {
                "egressFrom": "egress_from",
                "egressTo": "egress_to"
            },
            "gcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressFrom:ServicePerimeterStatusEgressPolicyEgressFrom": {
                "identityType": "identity_type"
            },
            "gcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressTo:ServicePerimeterStatusEgressPolicyEgressTo": {
                "externalResources": "external_resources"
            },
            "gcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressToOperation:ServicePerimeterStatusEgressPolicyEgressToOperation": {
                "methodSelectors": "method_selectors",
                "serviceName": "service_name"
            },
            "gcp:accesscontextmanager/ServicePerimeterStatusIngressPolicy:ServicePerimeterStatusIngressPolicy": {
                "ingressFrom": "ingress_from",
                "ingressTo": "ingress_to"
            },
            "gcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressFrom:ServicePerimeterStatusIngressPolicyIngressFrom": {
                "identityType": "identity_type"
            },
            "gcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressFromSource:ServicePerimeterStatusIngressPolicyIngressFromSource": {
                "accessLevel": "access_level"
            },
            "gcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressToOperation:ServicePerimeterStatusIngressPolicyIngressToOperation": {
                "methodSelectors": "method_selectors",
                "serviceName": "service_name"
            },
            "gcp:accesscontextmanager/ServicePerimeterStatusVpcAccessibleServices:ServicePerimeterStatusVpcAccessibleServices": {
                "allowedServices": "allowed_services",
                "enableRestriction": "enable_restriction"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeter:ServicePerimetersServicePerimeter": {
                "createTime": "create_time",
                "perimeterType": "perimeter_type",
                "updateTime": "update_time",
                "useExplicitDryRunSpec": "use_explicit_dry_run_spec"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpec:ServicePerimetersServicePerimeterSpec": {
                "accessLevels": "access_levels",
                "egressPolicies": "egress_policies",
                "ingressPolicies": "ingress_policies",
                "restrictedServices": "restricted_services",
                "vpcAccessibleServices": "vpc_accessible_services"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicy:ServicePerimetersServicePerimeterSpecEgressPolicy": {
                "egressFrom": "egress_from",
                "egressTo": "egress_to"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressFrom:ServicePerimetersServicePerimeterSpecEgressPolicyEgressFrom": {
                "identityType": "identity_type"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressTo:ServicePerimetersServicePerimeterSpecEgressPolicyEgressTo": {
                "externalResources": "external_resources"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperation:ServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperation": {
                "methodSelectors": "method_selectors",
                "serviceName": "service_name"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicy:ServicePerimetersServicePerimeterSpecIngressPolicy": {
                "ingressFrom": "ingress_from",
                "ingressTo": "ingress_to"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressFrom:ServicePerimetersServicePerimeterSpecIngressPolicyIngressFrom": {
                "identityType": "identity_type"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressFromSource:ServicePerimetersServicePerimeterSpecIngressPolicyIngressFromSource": {
                "accessLevel": "access_level"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperation:ServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperation": {
                "methodSelectors": "method_selectors",
                "serviceName": "service_name"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecVpcAccessibleServices:ServicePerimetersServicePerimeterSpecVpcAccessibleServices": {
                "allowedServices": "allowed_services",
                "enableRestriction": "enable_restriction"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatus:ServicePerimetersServicePerimeterStatus": {
                "accessLevels": "access_levels",
                "egressPolicies": "egress_policies",
                "ingressPolicies": "ingress_policies",
                "restrictedServices": "restricted_services",
                "vpcAccessibleServices": "vpc_accessible_services"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicy:ServicePerimetersServicePerimeterStatusEgressPolicy": {
                "egressFrom": "egress_from",
                "egressTo": "egress_to"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressFrom:ServicePerimetersServicePerimeterStatusEgressPolicyEgressFrom": {
                "identityType": "identity_type"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressTo:ServicePerimetersServicePerimeterStatusEgressPolicyEgressTo": {
                "externalResources": "external_resources"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperation:ServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperation": {
                "methodSelectors": "method_selectors",
                "serviceName": "service_name"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicy:ServicePerimetersServicePerimeterStatusIngressPolicy": {
                "ingressFrom": "ingress_from",
                "ingressTo": "ingress_to"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressFrom:ServicePerimetersServicePerimeterStatusIngressPolicyIngressFrom": {
                "identityType": "identity_type"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressFromSource:ServicePerimetersServicePerimeterStatusIngressPolicyIngressFromSource": {
                "accessLevel": "access_level"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperation:ServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperation": {
                "methodSelectors": "method_selectors",
                "serviceName": "service_name"
            },
            "gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusVpcAccessibleServices:ServicePerimetersServicePerimeterStatusVpcAccessibleServices": {
                "allowedServices": "allowed_services",
                "enableRestriction": "enable_restriction"
            },
            "gcp:accesscontextmanager/accessLevelCondition:AccessLevelCondition": {
                "accessLevel": "access_level",
                "devicePolicy": "device_policy",
                "ipSubnetworks": "ip_subnetworks",
                "requiredAccessLevels": "required_access_levels"
            },
            "gcp:accesscontextmanager/accessLevels:AccessLevels": {
                "accessLevels": "access_levels"
            },
            "gcp:accesscontextmanager/accessPolicy:AccessPolicy": {
                "createTime": "create_time",
                "updateTime": "update_time"
            },
            "gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:accesscontextmanager/authorizedOrgsDesc:AuthorizedOrgsDesc": {
                "assetType": "asset_type",
                "authorizationDirection": "authorization_direction",
                "authorizationType": "authorization_type",
                "createTime": "create_time",
                "updateTime": "update_time"
            },
            "gcp:accesscontextmanager/egressPolicy:EgressPolicy": {
                "egressPolicyName": "egress_policy_name"
            },
            "gcp:accesscontextmanager/gcpUserAccessBinding:GcpUserAccessBinding": {
                "accessLevels": "access_levels",
                "groupKey": "group_key",
                "organizationId": "organization_id"
            },
            "gcp:accesscontextmanager/getAccessPolicyIamPolicy:getAccessPolicyIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:accesscontextmanager/ingressPolicy:IngressPolicy": {
                "ingressPolicyName": "ingress_policy_name"
            },
            "gcp:accesscontextmanager/servicePerimeter:ServicePerimeter": {
                "createTime": "create_time",
                "perimeterType": "perimeter_type",
                "updateTime": "update_time",
                "useExplicitDryRunSpec": "use_explicit_dry_run_spec"
            },
            "gcp:accesscontextmanager/servicePerimeterEgressPolicy:ServicePerimeterEgressPolicy": {
                "egressFrom": "egress_from",
                "egressTo": "egress_to"
            },
            "gcp:accesscontextmanager/servicePerimeterIngressPolicy:ServicePerimeterIngressPolicy": {
                "ingressFrom": "ingress_from",
                "ingressTo": "ingress_to"
            },
            "gcp:accesscontextmanager/servicePerimeterResource:ServicePerimeterResource": {
                "perimeterName": "perimeter_name"
            },
            "gcp:accesscontextmanager/servicePerimeters:ServicePerimeters": {
                "servicePerimeters": "service_perimeters"
            },
            "gcp:activedirectory/domain:Domain": {
                "authorizedNetworks": "authorized_networks",
                "domainName": "domain_name",
                "reservedIpRange": "reserved_ip_range"
            },
            "gcp:activedirectory/domainTrust:DomainTrust": {
                "selectiveAuthentication": "selective_authentication",
                "targetDnsIpAddresses": "target_dns_ip_addresses",
                "targetDomainName": "target_domain_name",
                "trustDirection": "trust_direction",
                "trustHandshakeSecret": "trust_handshake_secret",
                "trustType": "trust_type"
            },
            "gcp:activedirectory/peering:Peering": {
                "authorizedNetwork": "authorized_network",
                "domainResource": "domain_resource",
                "peeringId": "peering_id",
                "statusMessage": "status_message"
            },
            "gcp:alloydb/BackupEncryptionConfig:BackupEncryptionConfig": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:alloydb/BackupEncryptionInfo:BackupEncryptionInfo": {
                "encryptionType": "encryption_type",
                "kmsKeyVersions": "kms_key_versions"
            },
            "gcp:alloydb/ClusterAutomatedBackupPolicy:ClusterAutomatedBackupPolicy": {
                "backupWindow": "backup_window",
                "encryptionConfig": "encryption_config",
                "quantityBasedRetention": "quantity_based_retention",
                "timeBasedRetention": "time_based_retention",
                "weeklySchedule": "weekly_schedule"
            },
            "gcp:alloydb/ClusterAutomatedBackupPolicyEncryptionConfig:ClusterAutomatedBackupPolicyEncryptionConfig": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:alloydb/ClusterAutomatedBackupPolicyTimeBasedRetention:ClusterAutomatedBackupPolicyTimeBasedRetention": {
                "retentionPeriod": "retention_period"
            },
            "gcp:alloydb/ClusterAutomatedBackupPolicyWeeklySchedule:ClusterAutomatedBackupPolicyWeeklySchedule": {
                "daysOfWeeks": "days_of_week",
                "startTimes": "start_times"
            },
            "gcp:alloydb/ClusterBackupSource:ClusterBackupSource": {
                "backupName": "backup_name"
            },
            "gcp:alloydb/ClusterEncryptionConfig:ClusterEncryptionConfig": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:alloydb/ClusterEncryptionInfo:ClusterEncryptionInfo": {
                "encryptionType": "encryption_type",
                "kmsKeyVersions": "kms_key_versions"
            },
            "gcp:alloydb/ClusterMigrationSource:ClusterMigrationSource": {
                "hostPort": "host_port",
                "referenceId": "reference_id",
                "sourceType": "source_type"
            },
            "gcp:alloydb/InstanceMachineConfig:InstanceMachineConfig": {
                "cpuCount": "cpu_count"
            },
            "gcp:alloydb/InstanceReadPoolConfig:InstanceReadPoolConfig": {
                "nodeCount": "node_count"
            },
            "gcp:alloydb/backup:Backup": {
                "backupId": "backup_id",
                "clusterName": "cluster_name",
                "createTime": "create_time",
                "encryptionConfig": "encryption_config",
                "encryptionInfos": "encryption_info",
                "updateTime": "update_time"
            },
            "gcp:alloydb/cluster:Cluster": {
                "automatedBackupPolicy": "automated_backup_policy",
                "backupSources": "backup_source",
                "clusterId": "cluster_id",
                "databaseVersion": "database_version",
                "displayName": "display_name",
                "encryptionConfig": "encryption_config",
                "encryptionInfos": "encryption_info",
                "initialUser": "initial_user",
                "migrationSources": "migration_source"
            },
            "gcp:alloydb/getLocationsLocation:getLocationsLocation": {
                "displayName": "display_name",
                "locationId": "location_id"
            },
            "gcp:alloydb/getSupportedDatabaseFlags:getSupportedDatabaseFlags": {
                "supportedDatabaseFlags": "supported_database_flags"
            },
            "gcp:alloydb/getSupportedDatabaseFlagsSupportedDatabaseFlag:getSupportedDatabaseFlagsSupportedDatabaseFlag": {
                "acceptsMultipleValues": "accepts_multiple_values",
                "flagName": "flag_name",
                "integerRestrictions": "integer_restrictions",
                "requiresDbRestart": "requires_db_restart",
                "stringRestrictions": "string_restrictions",
                "supportedDbVersions": "supported_db_versions",
                "valueType": "value_type"
            },
            "gcp:alloydb/getSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictions:getSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictions": {
                "maxValue": "max_value",
                "minValue": "min_value"
            },
            "gcp:alloydb/getSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictions:getSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictions": {
                "allowedValues": "allowed_values"
            },
            "gcp:alloydb/instance:Instance": {
                "availabilityType": "availability_type",
                "createTime": "create_time",
                "databaseFlags": "database_flags",
                "displayName": "display_name",
                "gceZone": "gce_zone",
                "instanceId": "instance_id",
                "instanceType": "instance_type",
                "ipAddress": "ip_address",
                "machineConfig": "machine_config",
                "readPoolConfig": "read_pool_config",
                "updateTime": "update_time"
            },
            "gcp:apigateway/ApiConfigGatewayConfig:ApiConfigGatewayConfig": {
                "backendConfig": "backend_config"
            },
            "gcp:apigateway/ApiConfigGatewayConfigBackendConfig:ApiConfigGatewayConfigBackendConfig": {
                "googleServiceAccount": "google_service_account"
            },
            "gcp:apigateway/ApiConfigGrpcService:ApiConfigGrpcService": {
                "fileDescriptorSet": "file_descriptor_set",
                "sources": "source"
            },
            "gcp:apigateway/api:Api": {
                "apiId": "api_id",
                "createTime": "create_time",
                "displayName": "display_name",
                "managedService": "managed_service"
            },
            "gcp:apigateway/apiConfig:ApiConfig": {
                "apiConfigId": "api_config_id",
                "apiConfigIdPrefix": "api_config_id_prefix",
                "displayName": "display_name",
                "gatewayConfig": "gateway_config",
                "grpcServices": "grpc_services",
                "managedServiceConfigs": "managed_service_configs",
                "openapiDocuments": "openapi_documents",
                "serviceConfigId": "service_config_id"
            },
            "gcp:apigateway/apiConfigIamBinding:ApiConfigIamBinding": {
                "apiConfig": "api_config"
            },
            "gcp:apigateway/apiConfigIamMember:ApiConfigIamMember": {
                "apiConfig": "api_config"
            },
            "gcp:apigateway/apiConfigIamPolicy:ApiConfigIamPolicy": {
                "apiConfig": "api_config",
                "policyData": "policy_data"
            },
            "gcp:apigateway/apiIamPolicy:ApiIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:apigateway/gateway:Gateway": {
                "apiConfig": "api_config",
                "defaultHostname": "default_hostname",
                "displayName": "display_name",
                "gatewayId": "gateway_id"
            },
            "gcp:apigateway/gatewayIamPolicy:GatewayIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:apigateway/getApiConfigIamPolicy:getApiConfigIamPolicy": {
                "apiConfig": "api_config",
                "policyData": "policy_data"
            },
            "gcp:apigateway/getApiIamPolicy:getApiIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:apigateway/getGatewayIamPolicy:getGatewayIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:apigee/AddonsConfigAddonsConfig:AddonsConfigAddonsConfig": {
                "advancedApiOpsConfig": "advanced_api_ops_config",
                "apiSecurityConfig": "api_security_config",
                "connectorsPlatformConfig": "connectors_platform_config",
                "integrationConfig": "integration_config",
                "monetizationConfig": "monetization_config"
            },
            "gcp:apigee/AddonsConfigAddonsConfigApiSecurityConfig:AddonsConfigAddonsConfigApiSecurityConfig": {
                "expiresAt": "expires_at"
            },
            "gcp:apigee/AddonsConfigAddonsConfigConnectorsPlatformConfig:AddonsConfigAddonsConfigConnectorsPlatformConfig": {
                "expiresAt": "expires_at"
            },
            "gcp:apigee/EnvironmentNodeConfig:EnvironmentNodeConfig": {
                "currentAggregateNodeCount": "current_aggregate_node_count",
                "maxNodeCount": "max_node_count",
                "minNodeCount": "min_node_count"
            },
            "gcp:apigee/KeystoresAliasesKeyCertFileCertsInfo:KeystoresAliasesKeyCertFileCertsInfo": {
                "certInfos": "cert_info"
            },
            "gcp:apigee/KeystoresAliasesKeyCertFileCertsInfoCertInfo:KeystoresAliasesKeyCertFileCertsInfoCertInfo": {
                "basicConstraints": "basic_constraints",
                "expiryDate": "expiry_date",
                "isValid": "is_valid",
                "publicKey": "public_key",
                "serialNumber": "serial_number",
                "sigAlgName": "sig_alg_name",
                "subjectAlternativeNames": "subject_alternative_names",
                "validFrom": "valid_from"
            },
            "gcp:apigee/KeystoresAliasesPkcs12CertsInfo:KeystoresAliasesPkcs12CertsInfo": {
                "certInfos": "cert_info"
            },
            "gcp:apigee/KeystoresAliasesPkcs12CertsInfoCertInfo:KeystoresAliasesPkcs12CertsInfoCertInfo": {
                "basicConstraints": "basic_constraints",
                "expiryDate": "expiry_date",
                "isValid": "is_valid",
                "publicKey": "public_key",
                "serialNumber": "serial_number",
                "sigAlgName": "sig_alg_name",
                "subjectAlternativeNames": "subject_alternative_names",
                "validFrom": "valid_from"
            },
            "gcp:apigee/KeystoresAliasesSelfSignedCertCertsInfo:KeystoresAliasesSelfSignedCertCertsInfo": {
                "certInfos": "cert_info"
            },
            "gcp:apigee/KeystoresAliasesSelfSignedCertCertsInfoCertInfo:KeystoresAliasesSelfSignedCertCertsInfoCertInfo": {
                "basicConstraints": "basic_constraints",
                "expiryDate": "expiry_date",
                "isValid": "is_valid",
                "publicKey": "public_key",
                "serialNumber": "serial_number",
                "sigAlgName": "sig_alg_name",
                "subjectAlternativeNames": "subject_alternative_names",
                "validFrom": "valid_from"
            },
            "gcp:apigee/KeystoresAliasesSelfSignedCertSubject:KeystoresAliasesSelfSignedCertSubject": {
                "commonName": "common_name",
                "countryCode": "country_code",
                "orgUnit": "org_unit"
            },
            "gcp:apigee/KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNames:KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNames": {
                "subjectAlternativeName": "subject_alternative_name"
            },
            "gcp:apigee/OrganizationProperties:OrganizationProperties": {
                "properties": "property"
            },
            "gcp:apigee/SharedflowMetaData:SharedflowMetaData": {
                "createdAt": "created_at",
                "lastModifiedAt": "last_modified_at",
                "subType": "sub_type"
            },
            "gcp:apigee/addonsConfig:AddonsConfig": {
                "addonsConfig": "addons_config"
            },
            "gcp:apigee/endpointAttachment:EndpointAttachment": {
                "connectionState": "connection_state",
                "endpointAttachmentId": "endpoint_attachment_id",
                "orgId": "org_id",
                "serviceAttachment": "service_attachment"
            },
            "gcp:apigee/envGroup:EnvGroup": {
                "orgId": "org_id"
            },
            "gcp:apigee/envGroupAttachment:EnvGroupAttachment": {
                "envgroupId": "envgroup_id"
            },
            "gcp:apigee/envKeystore:EnvKeystore": {
                "envId": "env_id"
            },
            "gcp:apigee/envReferences:EnvReferences": {
                "envId": "env_id",
                "resourceType": "resource_type"
            },
            "gcp:apigee/environment:Environment": {
                "apiProxyType": "api_proxy_type",
                "deploymentType": "deployment_type",
                "displayName": "display_name",
                "nodeConfig": "node_config",
                "orgId": "org_id"
            },
            "gcp:apigee/environmentIamBinding:EnvironmentIamBinding": {
                "envId": "env_id",
                "orgId": "org_id"
            },
            "gcp:apigee/environmentIamMember:EnvironmentIamMember": {
                "envId": "env_id",
                "orgId": "org_id"
            },
            "gcp:apigee/environmentIamPolicy:EnvironmentIamPolicy": {
                "envId": "env_id",
                "orgId": "org_id",
                "policyData": "policy_data"
            },
            "gcp:apigee/flowhook:Flowhook": {
                "continueOnError": "continue_on_error",
                "flowHookPoint": "flow_hook_point",
                "orgId": "org_id"
            },
            "gcp:apigee/getEnvironmentIamPolicy:getEnvironmentIamPolicy": {
                "envId": "env_id",
                "orgId": "org_id",
                "policyData": "policy_data"
            },
            "gcp:apigee/instance:Instance": {
                "consumerAcceptLists": "consumer_accept_list",
                "diskEncryptionKeyName": "disk_encryption_key_name",
                "displayName": "display_name",
                "ipRange": "ip_range",
                "orgId": "org_id",
                "peeringCidrRange": "peering_cidr_range",
                "serviceAttachment": "service_attachment"
            },
            "gcp:apigee/instanceAttachment:InstanceAttachment": {
                "instanceId": "instance_id"
            },
            "gcp:apigee/keystoresAliasesKeyCertFile:KeystoresAliasesKeyCertFile": {
                "certsInfo": "certs_info",
                "orgId": "org_id"
            },
            "gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12": {
                "certsInfos": "certs_info",
                "orgId": "org_id"
            },
            "gcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCert": {
                "certValidityInDays": "cert_validity_in_days",
                "certsInfos": "certs_info",
                "keySize": "key_size",
                "orgId": "org_id",
                "sigAlg": "sig_alg",
                "subjectAlternativeDnsNames": "subject_alternative_dns_names"
            },
            "gcp:apigee/natAddress:NatAddress": {
                "instanceId": "instance_id",
                "ipAddress": "ip_address"
            },
            "gcp:apigee/organization:Organization": {
                "analyticsRegion": "analytics_region",
                "apigeeProjectId": "apigee_project_id",
                "authorizedNetwork": "authorized_network",
                "billingType": "billing_type",
                "caCertificate": "ca_certificate",
                "disableVpcPeering": "disable_vpc_peering",
                "displayName": "display_name",
                "projectId": "project_id",
                "runtimeDatabaseEncryptionKeyName": "runtime_database_encryption_key_name",
                "runtimeType": "runtime_type",
                "subscriptionType": "subscription_type"
            },
            "gcp:apigee/sharedflow:Sharedflow": {
                "configBundle": "config_bundle",
                "detectMd5hash": "detect_md5hash",
                "latestRevisionId": "latest_revision_id",
                "metaDatas": "meta_data",
                "orgId": "org_id",
                "revisions": "revision"
            },
            "gcp:apigee/sharedflowDeployment:SharedflowDeployment": {
                "orgId": "org_id",
                "serviceAccount": "service_account",
                "sharedflowId": "sharedflow_id"
            },
            "gcp:appengine/ApplicationFeatureSettings:ApplicationFeatureSettings": {
                "splitHealthChecks": "split_health_checks"
            },
            "gcp:appengine/ApplicationIap:ApplicationIap": {
                "oauth2ClientId": "oauth2_client_id",
                "oauth2ClientSecret": "oauth2_client_secret",
                "oauth2ClientSecretSha256": "oauth2_client_secret_sha256"
            },
            "gcp:appengine/DomainMappingSslSettings:DomainMappingSslSettings": {
                "certificateId": "certificate_id",
                "pendingManagedCertificateId": "pending_managed_certificate_id",
                "sslManagementType": "ssl_management_type"
            },
            "gcp:appengine/EngineSplitTrafficSplit:EngineSplitTrafficSplit": {
                "shardBy": "shard_by"
            },
            "gcp:appengine/FlexibleAppVersionApiConfig:FlexibleAppVersionApiConfig": {
                "authFailAction": "auth_fail_action",
                "securityLevel": "security_level"
            },
            "gcp:appengine/FlexibleAppVersionAutomaticScaling:FlexibleAppVersionAutomaticScaling": {
                "coolDownPeriod": "cool_down_period",
                "cpuUtilization": "cpu_utilization",
                "diskUtilization": "disk_utilization",
                "maxConcurrentRequests": "max_concurrent_requests",
                "maxIdleInstances": "max_idle_instances",
                "maxPendingLatency": "max_pending_latency",
                "maxTotalInstances": "max_total_instances",
                "minIdleInstances": "min_idle_instances",
                "minPendingLatency": "min_pending_latency",
                "minTotalInstances": "min_total_instances",
                "networkUtilization": "network_utilization",
                "requestUtilization": "request_utilization"
            },
            "gcp:appengine/FlexibleAppVersionAutomaticScalingCpuUtilization:FlexibleAppVersionAutomaticScalingCpuUtilization": {
                "aggregationWindowLength": "aggregation_window_length",
                "targetUtilization": "target_utilization"
            },
            "gcp:appengine/FlexibleAppVersionAutomaticScalingDiskUtilization:FlexibleAppVersionAutomaticScalingDiskUtilization": {
                "targetReadBytesPerSecond": "target_read_bytes_per_second",
                "targetReadOpsPerSecond": "target_read_ops_per_second",
                "targetWriteBytesPerSecond": "target_write_bytes_per_second",
                "targetWriteOpsPerSecond": "target_write_ops_per_second"
            },
            "gcp:appengine/FlexibleAppVersionAutomaticScalingNetworkUtilization:FlexibleAppVersionAutomaticScalingNetworkUtilization": {
                "targetReceivedBytesPerSecond": "target_received_bytes_per_second",
                "targetReceivedPacketsPerSecond": "target_received_packets_per_second",
                "targetSentBytesPerSecond": "target_sent_bytes_per_second",
                "targetSentPacketsPerSecond": "target_sent_packets_per_second"
            },
            "gcp:appengine/FlexibleAppVersionAutomaticScalingRequestUtilization:FlexibleAppVersionAutomaticScalingRequestUtilization": {
                "targetConcurrentRequests": "target_concurrent_requests",
                "targetRequestCountPerSecond": "target_request_count_per_second"
            },
            "gcp:appengine/FlexibleAppVersionDeployment:FlexibleAppVersionDeployment": {
                "cloudBuildOptions": "cloud_build_options"
            },
            "gcp:appengine/FlexibleAppVersionDeploymentCloudBuildOptions:FlexibleAppVersionDeploymentCloudBuildOptions": {
                "appYamlPath": "app_yaml_path",
                "cloudBuildTimeout": "cloud_build_timeout"
            },
            "gcp:appengine/FlexibleAppVersionDeploymentFile:FlexibleAppVersionDeploymentFile": {
                "sha1Sum": "sha1_sum",
                "sourceUrl": "source_url"
            },
            "gcp:appengine/FlexibleAppVersionDeploymentZip:FlexibleAppVersionDeploymentZip": {
                "filesCount": "files_count",
                "sourceUrl": "source_url"
            },
            "gcp:appengine/FlexibleAppVersionEndpointsApiService:FlexibleAppVersionEndpointsApiService": {
                "configId": "config_id",
                "disableTraceSampling": "disable_trace_sampling",
                "rolloutStrategy": "rollout_strategy"
            },
            "gcp:appengine/FlexibleAppVersionHandler:FlexibleAppVersionHandler": {
                "authFailAction": "auth_fail_action",
                "redirectHttpResponseCode": "redirect_http_response_code",
                "securityLevel": "security_level",
                "staticFiles": "static_files",
                "urlRegex": "url_regex"
            },
            "gcp:appengine/FlexibleAppVersionHandlerScript:FlexibleAppVersionHandlerScript": {
                "scriptPath": "script_path"
            },
            "gcp:appengine/FlexibleAppVersionHandlerStaticFiles:FlexibleAppVersionHandlerStaticFiles": {
                "applicationReadable": "application_readable",
                "httpHeaders": "http_headers",
                "mimeType": "mime_type",
                "requireMatchingFile": "require_matching_file",
                "uploadPathRegex": "upload_path_regex"
            },
            "gcp:appengine/FlexibleAppVersionLivenessCheck:FlexibleAppVersionLivenessCheck": {
                "checkInterval": "check_interval",
                "failureThreshold": "failure_threshold",
                "initialDelay": "initial_delay",
                "successThreshold": "success_threshold"
            },
            "gcp:appengine/FlexibleAppVersionNetwork:FlexibleAppVersionNetwork": {
                "forwardedPorts": "forwarded_ports",
                "instanceTag": "instance_tag",
                "sessionAffinity": "session_affinity"
            },
            "gcp:appengine/FlexibleAppVersionReadinessCheck:FlexibleAppVersionReadinessCheck": {
                "appStartTimeout": "app_start_timeout",
                "checkInterval": "check_interval",
                "failureThreshold": "failure_threshold",
                "successThreshold": "success_threshold"
            },
            "gcp:appengine/FlexibleAppVersionResources:FlexibleAppVersionResources": {
                "diskGb": "disk_gb",
                "memoryGb": "memory_gb"
            },
            "gcp:appengine/FlexibleAppVersionResourcesVolume:FlexibleAppVersionResourcesVolume": {
                "sizeGb": "size_gb",
                "volumeType": "volume_type"
            },
            "gcp:appengine/ServiceNetworkSettingsNetworkSettings:ServiceNetworkSettingsNetworkSettings": {
                "ingressTrafficAllowed": "ingress_traffic_allowed"
            },
            "gcp:appengine/StandardAppVersionAutomaticScaling:StandardAppVersionAutomaticScaling": {
                "maxConcurrentRequests": "max_concurrent_requests",
                "maxIdleInstances": "max_idle_instances",
                "maxPendingLatency": "max_pending_latency",
                "minIdleInstances": "min_idle_instances",
                "minPendingLatency": "min_pending_latency",
                "standardSchedulerSettings": "standard_scheduler_settings"
            },
            "gcp:appengine/StandardAppVersionAutomaticScalingStandardSchedulerSettings:StandardAppVersionAutomaticScalingStandardSchedulerSettings": {
                "maxInstances": "max_instances",
                "minInstances": "min_instances",
                "targetCpuUtilization": "target_cpu_utilization",
                "targetThroughputUtilization": "target_throughput_utilization"
            },
            "gcp:appengine/StandardAppVersionBasicScaling:StandardAppVersionBasicScaling": {
                "idleTimeout": "idle_timeout",
                "maxInstances": "max_instances"
            },
            "gcp:appengine/StandardAppVersionDeploymentFile:StandardAppVersionDeploymentFile": {
                "sha1Sum": "sha1_sum",
                "sourceUrl": "source_url"
            },
            "gcp:appengine/StandardAppVersionDeploymentZip:StandardAppVersionDeploymentZip": {
                "filesCount": "files_count",
                "sourceUrl": "source_url"
            },
            "gcp:appengine/StandardAppVersionHandler:StandardAppVersionHandler": {
                "authFailAction": "auth_fail_action",
                "redirectHttpResponseCode": "redirect_http_response_code",
                "securityLevel": "security_level",
                "staticFiles": "static_files",
                "urlRegex": "url_regex"
            },
            "gcp:appengine/StandardAppVersionHandlerScript:StandardAppVersionHandlerScript": {
                "scriptPath": "script_path"
            },
            "gcp:appengine/StandardAppVersionHandlerStaticFiles:StandardAppVersionHandlerStaticFiles": {
                "applicationReadable": "application_readable",
                "httpHeaders": "http_headers",
                "mimeType": "mime_type",
                "requireMatchingFile": "require_matching_file",
                "uploadPathRegex": "upload_path_regex"
            },
            "gcp:appengine/StandardAppVersionVpcAccessConnector:StandardAppVersionVpcAccessConnector": {
                "egressSetting": "egress_setting"
            },
            "gcp:appengine/application:Application": {
                "appId": "app_id",
                "authDomain": "auth_domain",
                "codeBucket": "code_bucket",
                "databaseType": "database_type",
                "defaultBucket": "default_bucket",
                "defaultHostname": "default_hostname",
                "featureSettings": "feature_settings",
                "gcrDomain": "gcr_domain",
                "locationId": "location_id",
                "servingStatus": "serving_status",
                "urlDispatchRules": "url_dispatch_rule"
            },
            "gcp:appengine/applicationUrlDispatchRules:ApplicationUrlDispatchRules": {
                "dispatchRules": "dispatch_rules"
            },
            "gcp:appengine/domainMapping:DomainMapping": {
                "domainName": "domain_name",
                "overrideStrategy": "override_strategy",
                "resourceRecords": "resource_records",
                "sslSettings": "ssl_settings"
            },
            "gcp:appengine/engineSplitTraffic:EngineSplitTraffic": {
                "migrateTraffic": "migrate_traffic"
            },
            "gcp:appengine/firewallRule:FirewallRule": {
                "sourceRange": "source_range"
            },
            "gcp:appengine/flexibleAppVersion:FlexibleAppVersion": {
                "apiConfig": "api_config",
                "automaticScaling": "automatic_scaling",
                "betaSettings": "beta_settings",
                "defaultExpiration": "default_expiration",
                "deleteServiceOnDestroy": "delete_service_on_destroy",
                "endpointsApiService": "endpoints_api_service",
                "envVariables": "env_variables",
                "inboundServices": "inbound_services",
                "instanceClass": "instance_class",
                "livenessCheck": "liveness_check",
                "manualScaling": "manual_scaling",
                "nobuildFilesRegex": "nobuild_files_regex",
                "noopOnDestroy": "noop_on_destroy",
                "readinessCheck": "readiness_check",
                "runtimeApiVersion": "runtime_api_version",
                "runtimeChannel": "runtime_channel",
                "runtimeMainExecutablePath": "runtime_main_executable_path",
                "serviceAccount": "service_account",
                "servingStatus": "serving_status",
                "versionId": "version_id",
                "vpcAccessConnector": "vpc_access_connector"
            },
            "gcp:appengine/getDefaultServiceAccount:getDefaultServiceAccount": {
                "displayName": "display_name",
                "uniqueId": "unique_id"
            },
            "gcp:appengine/serviceNetworkSettings:ServiceNetworkSettings": {
                "networkSettings": "network_settings"
            },
            "gcp:appengine/standardAppVersion:StandardAppVersion": {
                "appEngineApis": "app_engine_apis",
                "automaticScaling": "automatic_scaling",
                "basicScaling": "basic_scaling",
                "deleteServiceOnDestroy": "delete_service_on_destroy",
                "envVariables": "env_variables",
                "inboundServices": "inbound_services",
                "instanceClass": "instance_class",
                "manualScaling": "manual_scaling",
                "noopOnDestroy": "noop_on_destroy",
                "runtimeApiVersion": "runtime_api_version",
                "serviceAccount": "service_account",
                "versionId": "version_id",
                "vpcAccessConnector": "vpc_access_connector"
            },
            "gcp:artifactregistry/RepositoryDockerConfig:RepositoryDockerConfig": {
                "immutableTags": "immutable_tags"
            },
            "gcp:artifactregistry/RepositoryMavenConfig:RepositoryMavenConfig": {
                "allowSnapshotOverwrites": "allow_snapshot_overwrites",
                "versionPolicy": "version_policy"
            },
            "gcp:artifactregistry/RepositoryRemoteRepositoryConfig:RepositoryRemoteRepositoryConfig": {
                "dockerRepository": "docker_repository",
                "mavenRepository": "maven_repository",
                "npmRepository": "npm_repository",
                "pythonRepository": "python_repository"
            },
            "gcp:artifactregistry/RepositoryRemoteRepositoryConfigDockerRepository:RepositoryRemoteRepositoryConfigDockerRepository": {
                "publicRepository": "public_repository"
            },
            "gcp:artifactregistry/RepositoryRemoteRepositoryConfigMavenRepository:RepositoryRemoteRepositoryConfigMavenRepository": {
                "publicRepository": "public_repository"
            },
            "gcp:artifactregistry/RepositoryRemoteRepositoryConfigNpmRepository:RepositoryRemoteRepositoryConfigNpmRepository": {
                "publicRepository": "public_repository"
            },
            "gcp:artifactregistry/RepositoryRemoteRepositoryConfigPythonRepository:RepositoryRemoteRepositoryConfigPythonRepository": {
                "publicRepository": "public_repository"
            },
            "gcp:artifactregistry/RepositoryVirtualRepositoryConfig:RepositoryVirtualRepositoryConfig": {
                "upstreamPolicies": "upstream_policies"
            },
            "gcp:artifactregistry/getRepository:getRepository": {
                "createTime": "create_time",
                "dockerConfigs": "docker_config",
                "kmsKeyName": "kms_key_name",
                "mavenConfigs": "maven_config",
                "remoteRepositoryConfigs": "remote_repository_config",
                "repositoryId": "repository_id",
                "updateTime": "update_time",
                "virtualRepositoryConfigs": "virtual_repository_config"
            },
            "gcp:artifactregistry/getRepositoryDockerConfig:getRepositoryDockerConfig": {
                "immutableTags": "immutable_tags"
            },
            "gcp:artifactregistry/getRepositoryIamPolicy:getRepositoryIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:artifactregistry/getRepositoryMavenConfig:getRepositoryMavenConfig": {
                "allowSnapshotOverwrites": "allow_snapshot_overwrites",
                "versionPolicy": "version_policy"
            },
            "gcp:artifactregistry/getRepositoryRemoteRepositoryConfig:getRepositoryRemoteRepositoryConfig": {
                "dockerRepositories": "docker_repository",
                "mavenRepositories": "maven_repository",
                "npmRepositories": "npm_repository",
                "pythonRepositories": "python_repository"
            },
            "gcp:artifactregistry/getRepositoryRemoteRepositoryConfigDockerRepository:getRepositoryRemoteRepositoryConfigDockerRepository": {
                "publicRepository": "public_repository"
            },
            "gcp:artifactregistry/getRepositoryRemoteRepositoryConfigMavenRepository:getRepositoryRemoteRepositoryConfigMavenRepository": {
                "publicRepository": "public_repository"
            },
            "gcp:artifactregistry/getRepositoryRemoteRepositoryConfigNpmRepository:getRepositoryRemoteRepositoryConfigNpmRepository": {
                "publicRepository": "public_repository"
            },
            "gcp:artifactregistry/getRepositoryRemoteRepositoryConfigPythonRepository:getRepositoryRemoteRepositoryConfigPythonRepository": {
                "publicRepository": "public_repository"
            },
            "gcp:artifactregistry/getRepositoryVirtualRepositoryConfig:getRepositoryVirtualRepositoryConfig": {
                "upstreamPolicies": "upstream_policies"
            },
            "gcp:artifactregistry/repository:Repository": {
                "createTime": "create_time",
                "dockerConfig": "docker_config",
                "kmsKeyName": "kms_key_name",
                "mavenConfig": "maven_config",
                "remoteRepositoryConfig": "remote_repository_config",
                "repositoryId": "repository_id",
                "updateTime": "update_time",
                "virtualRepositoryConfig": "virtual_repository_config"
            },
            "gcp:artifactregistry/repositoryIamPolicy:RepositoryIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:assuredworkloads/WorkloadKmsSettings:WorkloadKmsSettings": {
                "nextRotationTime": "next_rotation_time",
                "rotationPeriod": "rotation_period"
            },
            "gcp:assuredworkloads/WorkloadResource:WorkloadResource": {
                "resourceId": "resource_id",
                "resourceType": "resource_type"
            },
            "gcp:assuredworkloads/WorkloadResourceSetting:WorkloadResourceSetting": {
                "resourceId": "resource_id",
                "resourceType": "resource_type"
            },
            "gcp:assuredworkloads/workload:Workload": {
                "billingAccount": "billing_account",
                "complianceRegime": "compliance_regime",
                "createTime": "create_time",
                "displayName": "display_name",
                "kmsSettings": "kms_settings",
                "provisionedResourcesParent": "provisioned_resources_parent",
                "resourceSettings": "resource_settings"
            },
            "gcp:beyondcorp/AppConnectionGateway:AppConnectionGateway": {
                "appGateway": "app_gateway",
                "ingressPort": "ingress_port"
            },
            "gcp:beyondcorp/AppConnectorPrincipalInfo:AppConnectorPrincipalInfo": {
                "serviceAccount": "service_account"
            },
            "gcp:beyondcorp/AppGatewayAllocatedConnection:AppGatewayAllocatedConnection": {
                "ingressPort": "ingress_port",
                "pscUri": "psc_uri"
            },
            "gcp:beyondcorp/appConnection:AppConnection": {
                "applicationEndpoint": "application_endpoint",
                "displayName": "display_name"
            },
            "gcp:beyondcorp/appConnector:AppConnector": {
                "displayName": "display_name",
                "principalInfo": "principal_info"
            },
            "gcp:beyondcorp/appGateway:AppGateway": {
                "allocatedConnections": "allocated_connections",
                "displayName": "display_name",
                "hostType": "host_type"
            },
            "gcp:beyondcorp/getAppConnection:getAppConnection": {
                "applicationEndpoints": "application_endpoint",
                "displayName": "display_name",
                "gateways": "gateway"
            },
            "gcp:beyondcorp/getAppConnectionGateway:getAppConnectionGateway": {
                "appGateway": "app_gateway",
                "ingressPort": "ingress_port"
            },
            "gcp:beyondcorp/getAppConnector:getAppConnector": {
                "displayName": "display_name",
                "principalInfos": "principal_info"
            },
            "gcp:beyondcorp/getAppConnectorPrincipalInfo:getAppConnectorPrincipalInfo": {
                "serviceAccounts": "service_account"
            },
            "gcp:beyondcorp/getAppGateway:getAppGateway": {
                "allocatedConnections": "allocated_connections",
                "displayName": "display_name",
                "hostType": "host_type"
            },
            "gcp:beyondcorp/getAppGatewayAllocatedConnection:getAppGatewayAllocatedConnection": {
                "ingressPort": "ingress_port",
                "pscUri": "psc_uri"
            },
            "gcp:bigquery/AppProfileSingleClusterRouting:AppProfileSingleClusterRouting": {
                "allowTransactionalWrites": "allow_transactional_writes",
                "clusterId": "cluster_id"
            },
            "gcp:bigquery/ConnectionAws:ConnectionAws": {
                "accessRole": "access_role"
            },
            "gcp:bigquery/ConnectionAwsAccessRole:ConnectionAwsAccessRole": {
                "iamRoleId": "iam_role_id"
            },
            "gcp:bigquery/ConnectionAzure:ConnectionAzure": {
                "clientId": "client_id",
                "customerTenantId": "customer_tenant_id",
                "federatedApplicationClientId": "federated_application_client_id",
                "objectId": "object_id",
                "redirectUri": "redirect_uri"
            },
            "gcp:bigquery/ConnectionCloudResource:ConnectionCloudResource": {
                "serviceAccountId": "service_account_id"
            },
            "gcp:bigquery/ConnectionCloudSpanner:ConnectionCloudSpanner": {
                "useParallelism": "use_parallelism",
                "useServerlessAnalytics": "use_serverless_analytics"
            },
            "gcp:bigquery/ConnectionCloudSql:ConnectionCloudSql": {
                "instanceId": "instance_id",
                "serviceAccountId": "service_account_id"
            },
            "gcp:bigquery/DataTransferConfigEmailPreferences:DataTransferConfigEmailPreferences": {
                "enableFailureEmail": "enable_failure_email"
            },
            "gcp:bigquery/DataTransferConfigScheduleOptions:DataTransferConfigScheduleOptions": {
                "disableAutoScheduling": "disable_auto_scheduling",
                "endTime": "end_time",
                "startTime": "start_time"
            },
            "gcp:bigquery/DataTransferConfigSensitiveParams:DataTransferConfigSensitiveParams": {
                "secretAccessKey": "secret_access_key"
            },
            "gcp:bigquery/DatasetAccess:DatasetAccess": {
                "groupByEmail": "group_by_email",
                "specialGroup": "special_group",
                "userByEmail": "user_by_email"
            },
            "gcp:bigquery/DatasetAccessAuthorizedDataset:DatasetAccessAuthorizedDataset": {
                "targetTypes": "target_types"
            },
            "gcp:bigquery/DatasetAccessAuthorizedDatasetDataset:DatasetAccessAuthorizedDatasetDataset": {
                "datasetId": "dataset_id",
                "projectId": "project_id"
            },
            "gcp:bigquery/DatasetAccessDataset:DatasetAccessDataset": {
                "targetTypes": "target_types"
            },
            "gcp:bigquery/DatasetAccessDatasetDataset:DatasetAccessDatasetDataset": {
                "datasetId": "dataset_id",
                "projectId": "project_id"
            },
            "gcp:bigquery/DatasetAccessRoutine:DatasetAccessRoutine": {
                "datasetId": "dataset_id",
                "projectId": "project_id",
                "routineId": "routine_id"
            },
            "gcp:bigquery/DatasetAccessView:DatasetAccessView": {
                "datasetId": "dataset_id",
                "projectId": "project_id",
                "tableId": "table_id"
            },
            "gcp:bigquery/DatasetDefaultEncryptionConfiguration:DatasetDefaultEncryptionConfiguration": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:bigquery/JobCopy:JobCopy": {
                "createDisposition": "create_disposition",
                "destinationEncryptionConfiguration": "destination_encryption_configuration",
                "destinationTable": "destination_table",
                "sourceTables": "source_tables",
                "writeDisposition": "write_disposition"
            },
            "gcp:bigquery/JobCopyDestinationEncryptionConfiguration:JobCopyDestinationEncryptionConfiguration": {
                "kmsKeyName": "kms_key_name",
                "kmsKeyVersion": "kms_key_version"
            },
            "gcp:bigquery/JobCopyDestinationTable:JobCopyDestinationTable": {
                "datasetId": "dataset_id",
                "projectId": "project_id",
                "tableId": "table_id"
            },
            "gcp:bigquery/JobCopySourceTable:JobCopySourceTable": {
                "datasetId": "dataset_id",
                "projectId": "project_id",
                "tableId": "table_id"
            },
            "gcp:bigquery/JobExtract:JobExtract": {
                "destinationFormat": "destination_format",
                "destinationUris": "destination_uris",
                "fieldDelimiter": "field_delimiter",
                "printHeader": "print_header",
                "sourceModel": "source_model",
                "sourceTable": "source_table",
                "useAvroLogicalTypes": "use_avro_logical_types"
            },
            "gcp:bigquery/JobExtractSourceModel:JobExtractSourceModel": {
                "datasetId": "dataset_id",
                "modelId": "model_id",
                "projectId": "project_id"
            },
            "gcp:bigquery/JobExtractSourceTable:JobExtractSourceTable": {
                "datasetId": "dataset_id",
                "projectId": "project_id",
                "tableId": "table_id"
            },
            "gcp:bigquery/JobLoad:JobLoad": {
                "allowJaggedRows": "allow_jagged_rows",
                "allowQuotedNewlines": "allow_quoted_newlines",
                "createDisposition": "create_disposition",
                "destinationEncryptionConfiguration": "destination_encryption_configuration",
                "destinationTable": "destination_table",
                "fieldDelimiter": "field_delimiter",
                "ignoreUnknownValues": "ignore_unknown_values",
                "jsonExtension": "json_extension",
                "maxBadRecords": "max_bad_records",
                "nullMarker": "null_marker",
                "parquetOptions": "parquet_options",
                "projectionFields": "projection_fields",
                "schemaUpdateOptions": "schema_update_options",
                "skipLeadingRows": "skip_leading_rows",
                "sourceFormat": "source_format",
                "sourceUris": "source_uris",
                "timePartitioning": "time_partitioning",
                "writeDisposition": "write_disposition"
            },
            "gcp:bigquery/JobLoadDestinationEncryptionConfiguration:JobLoadDestinationEncryptionConfiguration": {
                "kmsKeyName": "kms_key_name",
                "kmsKeyVersion": "kms_key_version"
            },
            "gcp:bigquery/JobLoadDestinationTable:JobLoadDestinationTable": {
                "datasetId": "dataset_id",
                "projectId": "project_id",
                "tableId": "table_id"
            },
            "gcp:bigquery/JobLoadParquetOptions:JobLoadParquetOptions": {
                "enableListInference": "enable_list_inference",
                "enumAsString": "enum_as_string"
            },
            "gcp:bigquery/JobLoadTimePartitioning:JobLoadTimePartitioning": {
                "expirationMs": "expiration_ms"
            },
            "gcp:bigquery/JobQuery:JobQuery": {
                "allowLargeResults": "allow_large_results",
                "createDisposition": "create_disposition",
                "defaultDataset": "default_dataset",
                "destinationEncryptionConfiguration": "destination_encryption_configuration",
                "destinationTable": "destination_table",
                "flattenResults": "flatten_results",
                "maximumBillingTier": "maximum_billing_tier",
                "maximumBytesBilled": "maximum_bytes_billed",
                "parameterMode": "parameter_mode",
                "schemaUpdateOptions": "schema_update_options",
                "scriptOptions": "script_options",
                "useLegacySql": "use_legacy_sql",
                "useQueryCache": "use_query_cache",
                "userDefinedFunctionResources": "user_defined_function_resources",
                "writeDisposition": "write_disposition"
            },
            "gcp:bigquery/JobQueryDefaultDataset:JobQueryDefaultDataset": {
                "datasetId": "dataset_id",
                "projectId": "project_id"
            },
            "gcp:bigquery/JobQueryDestinationEncryptionConfiguration:JobQueryDestinationEncryptionConfiguration": {
                "kmsKeyName": "kms_key_name",
                "kmsKeyVersion": "kms_key_version"
            },
            "gcp:bigquery/JobQueryDestinationTable:JobQueryDestinationTable": {
                "datasetId": "dataset_id",
                "projectId": "project_id",
                "tableId": "table_id"
            },
            "gcp:bigquery/JobQueryScriptOptions:JobQueryScriptOptions": {
                "keyResultStatement": "key_result_statement",
                "statementByteBudget": "statement_byte_budget",
                "statementTimeoutMs": "statement_timeout_ms"
            },
            "gcp:bigquery/JobQueryUserDefinedFunctionResource:JobQueryUserDefinedFunctionResource": {
                "inlineCode": "inline_code",
                "resourceUri": "resource_uri"
            },
            "gcp:bigquery/JobStatus:JobStatus": {
                "errorResults": "error_result"
            },
            "gcp:bigquery/ReservationAutoscale:ReservationAutoscale": {
                "currentSlots": "current_slots",
                "maxSlots": "max_slots"
            },
            "gcp:bigquery/RoutineArgument:RoutineArgument": {
                "argumentKind": "argument_kind",
                "dataType": "data_type"
            },
            "gcp:bigquery/TableEncryptionConfiguration:TableEncryptionConfiguration": {
                "kmsKeyName": "kms_key_name",
                "kmsKeyVersion": "kms_key_version"
            },
            "gcp:bigquery/TableExternalDataConfiguration:TableExternalDataConfiguration": {
                "avroOptions": "avro_options",
                "connectionId": "connection_id",
                "csvOptions": "csv_options",
                "googleSheetsOptions": "google_sheets_options",
                "hivePartitioningOptions": "hive_partitioning_options",
                "ignoreUnknownValues": "ignore_unknown_values",
                "jsonOptions": "json_options",
                "maxBadRecords": "max_bad_records",
                "metadataCacheMode": "metadata_cache_mode",
                "objectMetadata": "object_metadata",
                "parquetOptions": "parquet_options",
                "referenceFileSchemaUri": "reference_file_schema_uri",
                "sourceFormat": "source_format",
                "sourceUris": "source_uris"
            },
            "gcp:bigquery/TableExternalDataConfigurationAvroOptions:TableExternalDataConfigurationAvroOptions": {
                "useAvroLogicalTypes": "use_avro_logical_types"
            },
            "gcp:bigquery/TableExternalDataConfigurationCsvOptions:TableExternalDataConfigurationCsvOptions": {
                "allowJaggedRows": "allow_jagged_rows",
                "allowQuotedNewlines": "allow_quoted_newlines",
                "fieldDelimiter": "field_delimiter",
                "skipLeadingRows": "skip_leading_rows"
            },
            "gcp:bigquery/TableExternalDataConfigurationGoogleSheetsOptions:TableExternalDataConfigurationGoogleSheetsOptions": {
                "skipLeadingRows": "skip_leading_rows"
            },
            "gcp:bigquery/TableExternalDataConfigurationHivePartitioningOptions:TableExternalDataConfigurationHivePartitioningOptions": {
                "requirePartitionFilter": "require_partition_filter",
                "sourceUriPrefix": "source_uri_prefix"
            },
            "gcp:bigquery/TableExternalDataConfigurationParquetOptions:TableExternalDataConfigurationParquetOptions": {
                "enableListInference": "enable_list_inference",
                "enumAsString": "enum_as_string"
            },
            "gcp:bigquery/TableMaterializedView:TableMaterializedView": {
                "enableRefresh": "enable_refresh",
                "refreshIntervalMs": "refresh_interval_ms"
            },
            "gcp:bigquery/TableTimePartitioning:TableTimePartitioning": {
                "expirationMs": "expiration_ms",
                "requirePartitionFilter": "require_partition_filter"
            },
            "gcp:bigquery/TableView:TableView": {
                "useLegacySql": "use_legacy_sql"
            },
            "gcp:bigquery/appProfile:AppProfile": {
                "appProfileId": "app_profile_id",
                "ignoreWarnings": "ignore_warnings",
                "multiClusterRoutingClusterIds": "multi_cluster_routing_cluster_ids",
                "multiClusterRoutingUseAny": "multi_cluster_routing_use_any",
                "singleClusterRouting": "single_cluster_routing"
            },
            "gcp:bigquery/capacityCommitment:CapacityCommitment": {
                "capacityCommitmentId": "capacity_commitment_id",
                "commitmentEndTime": "commitment_end_time",
                "commitmentStartTime": "commitment_start_time",
                "enforceSingleAdminProjectPerOrg": "enforce_single_admin_project_per_org",
                "renewalPlan": "renewal_plan",
                "slotCount": "slot_count"
            },
            "gcp:bigquery/connection:Connection": {
                "cloudResource": "cloud_resource",
                "cloudSpanner": "cloud_spanner",
                "cloudSql": "cloud_sql",
                "connectionId": "connection_id",
                "friendlyName": "friendly_name",
                "hasCredential": "has_credential"
            },
            "gcp:bigquery/connectionIamBinding:ConnectionIamBinding": {
                "connectionId": "connection_id"
            },
            "gcp:bigquery/connectionIamMember:ConnectionIamMember": {
                "connectionId": "connection_id"
            },
            "gcp:bigquery/connectionIamPolicy:ConnectionIamPolicy": {
                "connectionId": "connection_id",
                "policyData": "policy_data"
            },
            "gcp:bigquery/dataTransferConfig:DataTransferConfig": {
                "dataRefreshWindowDays": "data_refresh_window_days",
                "dataSourceId": "data_source_id",
                "destinationDatasetId": "destination_dataset_id",
                "displayName": "display_name",
                "emailPreferences": "email_preferences",
                "notificationPubsubTopic": "notification_pubsub_topic",
                "scheduleOptions": "schedule_options",
                "sensitiveParams": "sensitive_params",
                "serviceAccountName": "service_account_name"
            },
            "gcp:bigquery/dataset:Dataset": {
                "accesses": "access",
                "creationTime": "creation_time",
                "datasetId": "dataset_id",
                "defaultCollation": "default_collation",
                "defaultEncryptionConfiguration": "default_encryption_configuration",
                "defaultPartitionExpirationMs": "default_partition_expiration_ms",
                "defaultTableExpirationMs": "default_table_expiration_ms",
                "deleteContentsOnDestroy": "delete_contents_on_destroy",
                "friendlyName": "friendly_name",
                "isCaseInsensitive": "is_case_insensitive",
                "lastModifiedTime": "last_modified_time",
                "maxTimeTravelHours": "max_time_travel_hours",
                "selfLink": "self_link",
                "storageBillingModel": "storage_billing_model"
            },
            "gcp:bigquery/datasetAccess:DatasetAccess": {
                "apiUpdatedMember": "api_updated_member",
                "authorizedDataset": "dataset",
                "datasetId": "dataset_id",
                "groupByEmail": "group_by_email",
                "iamMember": "iam_member",
                "specialGroup": "special_group",
                "userByEmail": "user_by_email"
            },
            "gcp:bigquery/datasetIamBinding:DatasetIamBinding": {
                "datasetId": "dataset_id"
            },
            "gcp:bigquery/datasetIamMember:DatasetIamMember": {
                "datasetId": "dataset_id"
            },
            "gcp:bigquery/datasetIamPolicy:DatasetIamPolicy": {
                "datasetId": "dataset_id",
                "policyData": "policy_data"
            },
            "gcp:bigquery/getConnectionIamPolicy:getConnectionIamPolicy": {
                "connectionId": "connection_id",
                "policyData": "policy_data"
            },
            "gcp:bigquery/getDatasetIamPolicy:getDatasetIamPolicy": {
                "datasetId": "dataset_id",
                "policyData": "policy_data"
            },
            "gcp:bigquery/getTableIamPolicy:getTableIamPolicy": {
                "datasetId": "dataset_id",
                "policyData": "policy_data",
                "tableId": "table_id"
            },
            "gcp:bigquery/iamBinding:IamBinding": {
                "datasetId": "dataset_id",
                "tableId": "table_id"
            },
            "gcp:bigquery/iamMember:IamMember": {
                "datasetId": "dataset_id",
                "tableId": "table_id"
            },
            "gcp:bigquery/iamPolicy:IamPolicy": {
                "datasetId": "dataset_id",
                "policyData": "policy_data",
                "tableId": "table_id"
            },
            "gcp:bigquery/job:Job": {
                "jobId": "job_id",
                "jobTimeoutMs": "job_timeout_ms",
                "jobType": "job_type",
                "statuses": "status",
                "userEmail": "user_email"
            },
            "gcp:bigquery/reservation:Reservation": {
                "ignoreIdleSlots": "ignore_idle_slots",
                "multiRegionAuxiliary": "multi_region_auxiliary",
                "slotCapacity": "slot_capacity"
            },
            "gcp:bigquery/reservationAssignment:ReservationAssignment": {
                "jobType": "job_type"
            },
            "gcp:bigquery/routine:Routine": {
                "creationTime": "creation_time",
                "datasetId": "dataset_id",
                "definitionBody": "definition_body",
                "determinismLevel": "determinism_level",
                "importedLibraries": "imported_libraries",
                "lastModifiedTime": "last_modified_time",
                "returnTableType": "return_table_type",
                "returnType": "return_type",
                "routineId": "routine_id",
                "routineType": "routine_type"
            },
            "gcp:bigquery/table:Table": {
                "clusterings": "clustering",
                "creationTime": "creation_time",
                "datasetId": "dataset_id",
                "deletionProtection": "deletion_protection",
                "encryptionConfiguration": "encryption_configuration",
                "expirationTime": "expiration_time",
                "externalDataConfiguration": "external_data_configuration",
                "friendlyName": "friendly_name",
                "lastModifiedTime": "last_modified_time",
                "materializedView": "materialized_view",
                "numBytes": "num_bytes",
                "numLongTermBytes": "num_long_term_bytes",
                "numRows": "num_rows",
                "rangePartitioning": "range_partitioning",
                "selfLink": "self_link",
                "tableId": "table_id",
                "timePartitioning": "time_partitioning"
            },
            "gcp:bigqueryanalyticshub/ListingDataProvider:ListingDataProvider": {
                "primaryContact": "primary_contact"
            },
            "gcp:bigqueryanalyticshub/ListingPublisher:ListingPublisher": {
                "primaryContact": "primary_contact"
            },
            "gcp:bigqueryanalyticshub/dataExchange:DataExchange": {
                "dataExchangeId": "data_exchange_id",
                "displayName": "display_name",
                "listingCount": "listing_count",
                "primaryContact": "primary_contact"
            },
            "gcp:bigqueryanalyticshub/dataExchangeIamBinding:DataExchangeIamBinding": {
                "dataExchangeId": "data_exchange_id"
            },
            "gcp:bigqueryanalyticshub/dataExchangeIamMember:DataExchangeIamMember": {
                "dataExchangeId": "data_exchange_id"
            },
            "gcp:bigqueryanalyticshub/dataExchangeIamPolicy:DataExchangeIamPolicy": {
                "dataExchangeId": "data_exchange_id",
                "policyData": "policy_data"
            },
            "gcp:bigqueryanalyticshub/getDataExchangeIamPolicy:getDataExchangeIamPolicy": {
                "dataExchangeId": "data_exchange_id",
                "policyData": "policy_data"
            },
            "gcp:bigqueryanalyticshub/getListingIamPolicy:getListingIamPolicy": {
                "dataExchangeId": "data_exchange_id",
                "listingId": "listing_id",
                "policyData": "policy_data"
            },
            "gcp:bigqueryanalyticshub/listing:Listing": {
                "bigqueryDataset": "bigquery_dataset",
                "dataExchangeId": "data_exchange_id",
                "dataProvider": "data_provider",
                "displayName": "display_name",
                "listingId": "listing_id",
                "primaryContact": "primary_contact",
                "requestAccess": "request_access"
            },
            "gcp:bigqueryanalyticshub/listingIamBinding:ListingIamBinding": {
                "dataExchangeId": "data_exchange_id",
                "listingId": "listing_id"
            },
            "gcp:bigqueryanalyticshub/listingIamMember:ListingIamMember": {
                "dataExchangeId": "data_exchange_id",
                "listingId": "listing_id"
            },
            "gcp:bigqueryanalyticshub/listingIamPolicy:ListingIamPolicy": {
                "dataExchangeId": "data_exchange_id",
                "listingId": "listing_id",
                "policyData": "policy_data"
            },
            "gcp:bigquerydatapolicy/DataPolicyDataMaskingPolicy:DataPolicyDataMaskingPolicy": {
                "predefinedExpression": "predefined_expression"
            },
            "gcp:bigquerydatapolicy/dataPolicy:DataPolicy": {
                "dataMaskingPolicy": "data_masking_policy",
                "dataPolicyId": "data_policy_id",
                "dataPolicyType": "data_policy_type",
                "policyTag": "policy_tag"
            },
            "gcp:bigquerydatapolicy/dataPolicyIamBinding:DataPolicyIamBinding": {
                "dataPolicyId": "data_policy_id"
            },
            "gcp:bigquerydatapolicy/dataPolicyIamMember:DataPolicyIamMember": {
                "dataPolicyId": "data_policy_id"
            },
            "gcp:bigquerydatapolicy/dataPolicyIamPolicy:DataPolicyIamPolicy": {
                "dataPolicyId": "data_policy_id",
                "policyData": "policy_data"
            },
            "gcp:bigquerydatapolicy/getIamPolicy:getIamPolicy": {
                "dataPolicyId": "data_policy_id",
                "policyData": "policy_data"
            },
            "gcp:bigtable/InstanceCluster:InstanceCluster": {
                "autoscalingConfig": "autoscaling_config",
                "clusterId": "cluster_id",
                "kmsKeyName": "kms_key_name",
                "numNodes": "num_nodes",
                "storageType": "storage_type"
            },
            "gcp:bigtable/InstanceClusterAutoscalingConfig:InstanceClusterAutoscalingConfig": {
                "cpuTarget": "cpu_target",
                "maxNodes": "max_nodes",
                "minNodes": "min_nodes",
                "storageTarget": "storage_target"
            },
            "gcp:bigtable/gCPolicy:GCPolicy": {
                "columnFamily": "column_family",
                "deletionPolicy": "deletion_policy",
                "gcRules": "gc_rules",
                "instanceName": "instance_name",
                "maxAge": "max_age",
                "maxVersions": "max_version"
            },
            "gcp:bigtable/getInstanceIamPolicy:getInstanceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:bigtable/getTableIamPolicy:getTableIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:bigtable/instance:Instance": {
                "clusters": "cluster",
                "deletionProtection": "deletion_protection",
                "displayName": "display_name",
                "instanceType": "instance_type"
            },
            "gcp:bigtable/instanceIamPolicy:InstanceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:bigtable/table:Table": {
                "changeStreamRetention": "change_stream_retention",
                "columnFamilies": "column_family",
                "deletionProtection": "deletion_protection",
                "instanceName": "instance_name",
                "splitKeys": "split_keys"
            },
            "gcp:bigtable/tableIamPolicy:TableIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:billing/BudgetAllUpdatesRule:BudgetAllUpdatesRule": {
                "disableDefaultIamRecipients": "disable_default_iam_recipients",
                "monitoringNotificationChannels": "monitoring_notification_channels",
                "pubsubTopic": "pubsub_topic",
                "schemaVersion": "schema_version"
            },
            "gcp:billing/BudgetAmount:BudgetAmount": {
                "lastPeriodAmount": "last_period_amount",
                "specifiedAmount": "specified_amount"
            },
            "gcp:billing/BudgetAmountSpecifiedAmount:BudgetAmountSpecifiedAmount": {
                "currencyCode": "currency_code"
            },
            "gcp:billing/BudgetBudgetFilter:BudgetBudgetFilter": {
                "calendarPeriod": "calendar_period",
                "creditTypes": "credit_types",
                "creditTypesTreatment": "credit_types_treatment",
                "customPeriod": "custom_period"
            },
            "gcp:billing/BudgetBudgetFilterCustomPeriod:BudgetBudgetFilterCustomPeriod": {
                "endDate": "end_date",
                "startDate": "start_date"
            },
            "gcp:billing/BudgetThresholdRule:BudgetThresholdRule": {
                "spendBasis": "spend_basis",
                "thresholdPercent": "threshold_percent"
            },
            "gcp:billing/accountIamBinding:AccountIamBinding": {
                "billingAccountId": "billing_account_id"
            },
            "gcp:billing/accountIamMember:AccountIamMember": {
                "billingAccountId": "billing_account_id"
            },
            "gcp:billing/accountIamPolicy:AccountIamPolicy": {
                "billingAccountId": "billing_account_id",
                "policyData": "policy_data"
            },
            "gcp:billing/budget:Budget": {
                "allUpdatesRule": "all_updates_rule",
                "billingAccount": "billing_account",
                "budgetFilter": "budget_filter",
                "displayName": "display_name",
                "thresholdRules": "threshold_rules"
            },
            "gcp:billing/getAccountIamPolicy:getAccountIamPolicy": {
                "billingAccountId": "billing_account_id",
                "policyData": "policy_data"
            },
            "gcp:billing/subAccount:SubAccount": {
                "billingAccountId": "billing_account_id",
                "deletionPolicy": "deletion_policy",
                "displayName": "display_name",
                "masterBillingAccount": "master_billing_account"
            },
            "gcp:binaryauthorization/AttestorAttestationAuthorityNote:AttestorAttestationAuthorityNote": {
                "delegationServiceAccountEmail": "delegation_service_account_email",
                "noteReference": "note_reference",
                "publicKeys": "public_keys"
            },
            "gcp:binaryauthorization/AttestorAttestationAuthorityNotePublicKey:AttestorAttestationAuthorityNotePublicKey": {
                "asciiArmoredPgpPublicKey": "ascii_armored_pgp_public_key",
                "pkixPublicKey": "pkix_public_key"
            },
            "gcp:binaryauthorization/AttestorAttestationAuthorityNotePublicKeyPkixPublicKey:AttestorAttestationAuthorityNotePublicKeyPkixPublicKey": {
                "publicKeyPem": "public_key_pem",
                "signatureAlgorithm": "signature_algorithm"
            },
            "gcp:binaryauthorization/PolicyAdmissionWhitelistPattern:PolicyAdmissionWhitelistPattern": {
                "namePattern": "name_pattern"
            },
            "gcp:binaryauthorization/PolicyClusterAdmissionRule:PolicyClusterAdmissionRule": {
                "enforcementMode": "enforcement_mode",
                "evaluationMode": "evaluation_mode",
                "requireAttestationsBies": "require_attestations_by"
            },
            "gcp:binaryauthorization/PolicyDefaultAdmissionRule:PolicyDefaultAdmissionRule": {
                "enforcementMode": "enforcement_mode",
                "evaluationMode": "evaluation_mode",
                "requireAttestationsBies": "require_attestations_by"
            },
            "gcp:binaryauthorization/attestor:Attestor": {
                "attestationAuthorityNote": "attestation_authority_note"
            },
            "gcp:binaryauthorization/attestorIamPolicy:AttestorIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:binaryauthorization/getAttestorIamPolicy:getAttestorIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:binaryauthorization/policy:Policy": {
                "admissionWhitelistPatterns": "admission_whitelist_patterns",
                "clusterAdmissionRules": "cluster_admission_rules",
                "defaultAdmissionRule": "default_admission_rule",
                "globalPolicyEvaluationMode": "global_policy_evaluation_mode"
            },
            "gcp:certificateauthority/AuthorityAccessUrl:AuthorityAccessUrl": {
                "caCertificateAccessUrl": "ca_certificate_access_url",
                "crlAccessUrls": "crl_access_urls"
            },
            "gcp:certificateauthority/AuthorityConfig:AuthorityConfig": {
                "subjectConfig": "subject_config",
                "x509Config": "x509_config"
            },
            "gcp:certificateauthority/AuthorityConfigSubjectConfig:AuthorityConfigSubjectConfig": {
                "subjectAltName": "subject_alt_name"
            },
            "gcp:certificateauthority/AuthorityConfigSubjectConfigSubject:AuthorityConfigSubjectConfigSubject": {
                "commonName": "common_name",
                "countryCode": "country_code",
                "organizationalUnit": "organizational_unit",
                "postalCode": "postal_code",
                "streetAddress": "street_address"
            },
            "gcp:certificateauthority/AuthorityConfigSubjectConfigSubjectAltName:AuthorityConfigSubjectConfigSubjectAltName": {
                "dnsNames": "dns_names",
                "emailAddresses": "email_addresses",
                "ipAddresses": "ip_addresses"
            },
            "gcp:certificateauthority/AuthorityConfigX509Config:AuthorityConfigX509Config": {
                "additionalExtensions": "additional_extensions",
                "aiaOcspServers": "aia_ocsp_servers",
                "caOptions": "ca_options",
                "keyUsage": "key_usage",
                "nameConstraints": "name_constraints",
                "policyIds": "policy_ids"
            },
            "gcp:certificateauthority/AuthorityConfigX509ConfigAdditionalExtension:AuthorityConfigX509ConfigAdditionalExtension": {
                "objectId": "object_id"
            },
            "gcp:certificateauthority/AuthorityConfigX509ConfigAdditionalExtensionObjectId:AuthorityConfigX509ConfigAdditionalExtensionObjectId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/AuthorityConfigX509ConfigCaOptions:AuthorityConfigX509ConfigCaOptions": {
                "isCa": "is_ca",
                "maxIssuerPathLength": "max_issuer_path_length",
                "nonCa": "non_ca",
                "zeroMaxIssuerPathLength": "zero_max_issuer_path_length"
            },
            "gcp:certificateauthority/AuthorityConfigX509ConfigKeyUsage:AuthorityConfigX509ConfigKeyUsage": {
                "baseKeyUsage": "base_key_usage",
                "extendedKeyUsage": "extended_key_usage",
                "unknownExtendedKeyUsages": "unknown_extended_key_usages"
            },
            "gcp:certificateauthority/AuthorityConfigX509ConfigKeyUsageBaseKeyUsage:AuthorityConfigX509ConfigKeyUsageBaseKeyUsage": {
                "certSign": "cert_sign",
                "contentCommitment": "content_commitment",
                "crlSign": "crl_sign",
                "dataEncipherment": "data_encipherment",
                "decipherOnly": "decipher_only",
                "digitalSignature": "digital_signature",
                "encipherOnly": "encipher_only",
                "keyAgreement": "key_agreement",
                "keyEncipherment": "key_encipherment"
            },
            "gcp:certificateauthority/AuthorityConfigX509ConfigKeyUsageExtendedKeyUsage:AuthorityConfigX509ConfigKeyUsageExtendedKeyUsage": {
                "clientAuth": "client_auth",
                "codeSigning": "code_signing",
                "emailProtection": "email_protection",
                "ocspSigning": "ocsp_signing",
                "serverAuth": "server_auth",
                "timeStamping": "time_stamping"
            },
            "gcp:certificateauthority/AuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsage:AuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsage": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/AuthorityConfigX509ConfigNameConstraints:AuthorityConfigX509ConfigNameConstraints": {
                "excludedDnsNames": "excluded_dns_names",
                "excludedEmailAddresses": "excluded_email_addresses",
                "excludedIpRanges": "excluded_ip_ranges",
                "excludedUris": "excluded_uris",
                "permittedDnsNames": "permitted_dns_names",
                "permittedEmailAddresses": "permitted_email_addresses",
                "permittedIpRanges": "permitted_ip_ranges",
                "permittedUris": "permitted_uris"
            },
            "gcp:certificateauthority/AuthorityConfigX509ConfigPolicyId:AuthorityConfigX509ConfigPolicyId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/AuthorityKeySpec:AuthorityKeySpec": {
                "cloudKmsKeyVersion": "cloud_kms_key_version"
            },
            "gcp:certificateauthority/AuthoritySubordinateConfig:AuthoritySubordinateConfig": {
                "certificateAuthority": "certificate_authority",
                "pemIssuerChain": "pem_issuer_chain"
            },
            "gcp:certificateauthority/AuthoritySubordinateConfigPemIssuerChain:AuthoritySubordinateConfigPemIssuerChain": {
                "pemCertificates": "pem_certificates"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicy:CaPoolIssuancePolicy": {
                "allowedIssuanceModes": "allowed_issuance_modes",
                "allowedKeyTypes": "allowed_key_types",
                "baselineValues": "baseline_values",
                "identityConstraints": "identity_constraints",
                "maximumLifetime": "maximum_lifetime"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyAllowedIssuanceModes:CaPoolIssuancePolicyAllowedIssuanceModes": {
                "allowConfigBasedIssuance": "allow_config_based_issuance",
                "allowCsrBasedIssuance": "allow_csr_based_issuance"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyAllowedKeyType:CaPoolIssuancePolicyAllowedKeyType": {
                "ellipticCurve": "elliptic_curve"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyAllowedKeyTypeEllipticCurve:CaPoolIssuancePolicyAllowedKeyTypeEllipticCurve": {
                "signatureAlgorithm": "signature_algorithm"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyAllowedKeyTypeRsa:CaPoolIssuancePolicyAllowedKeyTypeRsa": {
                "maxModulusSize": "max_modulus_size",
                "minModulusSize": "min_modulus_size"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyBaselineValues:CaPoolIssuancePolicyBaselineValues": {
                "additionalExtensions": "additional_extensions",
                "aiaOcspServers": "aia_ocsp_servers",
                "caOptions": "ca_options",
                "keyUsage": "key_usage",
                "nameConstraints": "name_constraints",
                "policyIds": "policy_ids"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyBaselineValuesAdditionalExtension:CaPoolIssuancePolicyBaselineValuesAdditionalExtension": {
                "objectId": "object_id"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyBaselineValuesAdditionalExtensionObjectId:CaPoolIssuancePolicyBaselineValuesAdditionalExtensionObjectId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyBaselineValuesCaOptions:CaPoolIssuancePolicyBaselineValuesCaOptions": {
                "isCa": "is_ca",
                "maxIssuerPathLength": "max_issuer_path_length",
                "nonCa": "non_ca",
                "zeroMaxIssuerPathLength": "zero_max_issuer_path_length"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyBaselineValuesKeyUsage:CaPoolIssuancePolicyBaselineValuesKeyUsage": {
                "baseKeyUsage": "base_key_usage",
                "extendedKeyUsage": "extended_key_usage",
                "unknownExtendedKeyUsages": "unknown_extended_key_usages"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage:CaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage": {
                "certSign": "cert_sign",
                "contentCommitment": "content_commitment",
                "crlSign": "crl_sign",
                "dataEncipherment": "data_encipherment",
                "decipherOnly": "decipher_only",
                "digitalSignature": "digital_signature",
                "encipherOnly": "encipher_only",
                "keyAgreement": "key_agreement",
                "keyEncipherment": "key_encipherment"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage:CaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage": {
                "clientAuth": "client_auth",
                "codeSigning": "code_signing",
                "emailProtection": "email_protection",
                "ocspSigning": "ocsp_signing",
                "serverAuth": "server_auth",
                "timeStamping": "time_stamping"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsage:CaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsage": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyBaselineValuesNameConstraints:CaPoolIssuancePolicyBaselineValuesNameConstraints": {
                "excludedDnsNames": "excluded_dns_names",
                "excludedEmailAddresses": "excluded_email_addresses",
                "excludedIpRanges": "excluded_ip_ranges",
                "excludedUris": "excluded_uris",
                "permittedDnsNames": "permitted_dns_names",
                "permittedEmailAddresses": "permitted_email_addresses",
                "permittedIpRanges": "permitted_ip_ranges",
                "permittedUris": "permitted_uris"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyBaselineValuesPolicyId:CaPoolIssuancePolicyBaselineValuesPolicyId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CaPoolIssuancePolicyIdentityConstraints:CaPoolIssuancePolicyIdentityConstraints": {
                "allowSubjectAltNamesPassthrough": "allow_subject_alt_names_passthrough",
                "allowSubjectPassthrough": "allow_subject_passthrough",
                "celExpression": "cel_expression"
            },
            "gcp:certificateauthority/CaPoolPublishingOptions:CaPoolPublishingOptions": {
                "encodingFormat": "encoding_format",
                "publishCaCert": "publish_ca_cert",
                "publishCrl": "publish_crl"
            },
            "gcp:certificateauthority/CertificateCertificateDescription:CertificateCertificateDescription": {
                "aiaIssuingCertificateUrls": "aia_issuing_certificate_urls",
                "authorityKeyIds": "authority_key_id",
                "certFingerprints": "cert_fingerprint",
                "configValues": "config_values",
                "crlDistributionPoints": "crl_distribution_points",
                "publicKeys": "public_key",
                "subjectDescriptions": "subject_description",
                "subjectKeyIds": "subject_key_id",
                "x509Descriptions": "x509_description"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionAuthorityKeyId:CertificateCertificateDescriptionAuthorityKeyId": {
                "keyId": "key_id"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionCertFingerprint:CertificateCertificateDescriptionCertFingerprint": {
                "sha256Hash": "sha256_hash"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionConfigValue:CertificateCertificateDescriptionConfigValue": {
                "keyUsages": "key_usage"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionConfigValueKeyUsage:CertificateCertificateDescriptionConfigValueKeyUsage": {
                "baseKeyUsages": "base_key_usage",
                "extendedKeyUsages": "extended_key_usage",
                "unknownExtendedKeyUsages": "unknown_extended_key_usages"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionConfigValueKeyUsageBaseKeyUsage:CertificateCertificateDescriptionConfigValueKeyUsageBaseKeyUsage": {
                "keyUsageOptions": "key_usage_options"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionConfigValueKeyUsageBaseKeyUsageKeyUsageOption:CertificateCertificateDescriptionConfigValueKeyUsageBaseKeyUsageKeyUsageOption": {
                "certSign": "cert_sign",
                "contentCommitment": "content_commitment",
                "crlSign": "crl_sign",
                "dataEncipherment": "data_encipherment",
                "decipherOnly": "decipher_only",
                "digitalSignature": "digital_signature",
                "encipherOnly": "encipher_only",
                "keyAgreement": "key_agreement",
                "keyEncipherment": "key_encipherment"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionConfigValueKeyUsageExtendedKeyUsage:CertificateCertificateDescriptionConfigValueKeyUsageExtendedKeyUsage": {
                "clientAuth": "client_auth",
                "codeSigning": "code_signing",
                "emailProtection": "email_protection",
                "ocspSigning": "ocsp_signing",
                "serverAuth": "server_auth",
                "timeStamping": "time_stamping"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionConfigValueKeyUsageUnknownExtendedKeyUsage:CertificateCertificateDescriptionConfigValueKeyUsageUnknownExtendedKeyUsage": {
                "obectIds": "obect_id"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionConfigValueKeyUsageUnknownExtendedKeyUsageObectId:CertificateCertificateDescriptionConfigValueKeyUsageUnknownExtendedKeyUsageObectId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionSubjectDescription:CertificateCertificateDescriptionSubjectDescription": {
                "hexSerialNumber": "hex_serial_number",
                "notAfterTime": "not_after_time",
                "notBeforeTime": "not_before_time",
                "subjectAltNames": "subject_alt_name",
                "subjects": "subject"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionSubjectDescriptionSubject:CertificateCertificateDescriptionSubjectDescriptionSubject": {
                "commonName": "common_name",
                "countryCode": "country_code",
                "organizationalUnit": "organizational_unit",
                "postalCode": "postal_code",
                "streetAddress": "street_address"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionSubjectDescriptionSubjectAltName:CertificateCertificateDescriptionSubjectDescriptionSubjectAltName": {
                "customSans": "custom_sans",
                "dnsNames": "dns_names",
                "emailAddresses": "email_addresses",
                "ipAddresses": "ip_addresses"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSan:CertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSan": {
                "obectIds": "obect_id"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSanObectId:CertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSanObectId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionSubjectKeyId:CertificateCertificateDescriptionSubjectKeyId": {
                "keyId": "key_id"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionX509Description:CertificateCertificateDescriptionX509Description": {
                "additionalExtensions": "additional_extensions",
                "aiaOcspServers": "aia_ocsp_servers",
                "caOptions": "ca_options",
                "keyUsages": "key_usage",
                "nameConstraints": "name_constraints",
                "policyIds": "policy_ids"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionX509DescriptionAdditionalExtension:CertificateCertificateDescriptionX509DescriptionAdditionalExtension": {
                "objectIds": "object_id"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionX509DescriptionAdditionalExtensionObjectId:CertificateCertificateDescriptionX509DescriptionAdditionalExtensionObjectId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionX509DescriptionCaOption:CertificateCertificateDescriptionX509DescriptionCaOption": {
                "isCa": "is_ca",
                "maxIssuerPathLength": "max_issuer_path_length"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionX509DescriptionKeyUsage:CertificateCertificateDescriptionX509DescriptionKeyUsage": {
                "baseKeyUsages": "base_key_usage",
                "extendedKeyUsages": "extended_key_usage",
                "unknownExtendedKeyUsages": "unknown_extended_key_usages"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsage:CertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsage": {
                "certSign": "cert_sign",
                "contentCommitment": "content_commitment",
                "crlSign": "crl_sign",
                "dataEncipherment": "data_encipherment",
                "decipherOnly": "decipher_only",
                "digitalSignature": "digital_signature",
                "encipherOnly": "encipher_only",
                "keyAgreement": "key_agreement",
                "keyEncipherment": "key_encipherment"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsage:CertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsage": {
                "clientAuth": "client_auth",
                "codeSigning": "code_signing",
                "emailProtection": "email_protection",
                "ocspSigning": "ocsp_signing",
                "serverAuth": "server_auth",
                "timeStamping": "time_stamping"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsage:CertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsage": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionX509DescriptionNameConstraint:CertificateCertificateDescriptionX509DescriptionNameConstraint": {
                "excludedDnsNames": "excluded_dns_names",
                "excludedEmailAddresses": "excluded_email_addresses",
                "excludedIpRanges": "excluded_ip_ranges",
                "excludedUris": "excluded_uris",
                "permittedDnsNames": "permitted_dns_names",
                "permittedEmailAddresses": "permitted_email_addresses",
                "permittedIpRanges": "permitted_ip_ranges",
                "permittedUris": "permitted_uris"
            },
            "gcp:certificateauthority/CertificateCertificateDescriptionX509DescriptionPolicyId:CertificateCertificateDescriptionX509DescriptionPolicyId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CertificateConfig:CertificateConfig": {
                "publicKey": "public_key",
                "subjectConfig": "subject_config",
                "x509Config": "x509_config"
            },
            "gcp:certificateauthority/CertificateConfigSubjectConfig:CertificateConfigSubjectConfig": {
                "subjectAltName": "subject_alt_name"
            },
            "gcp:certificateauthority/CertificateConfigSubjectConfigSubject:CertificateConfigSubjectConfigSubject": {
                "commonName": "common_name",
                "countryCode": "country_code",
                "organizationalUnit": "organizational_unit",
                "postalCode": "postal_code",
                "streetAddress": "street_address"
            },
            "gcp:certificateauthority/CertificateConfigSubjectConfigSubjectAltName:CertificateConfigSubjectConfigSubjectAltName": {
                "dnsNames": "dns_names",
                "emailAddresses": "email_addresses",
                "ipAddresses": "ip_addresses"
            },
            "gcp:certificateauthority/CertificateConfigX509Config:CertificateConfigX509Config": {
                "additionalExtensions": "additional_extensions",
                "aiaOcspServers": "aia_ocsp_servers",
                "caOptions": "ca_options",
                "keyUsage": "key_usage",
                "nameConstraints": "name_constraints",
                "policyIds": "policy_ids"
            },
            "gcp:certificateauthority/CertificateConfigX509ConfigAdditionalExtension:CertificateConfigX509ConfigAdditionalExtension": {
                "objectId": "object_id"
            },
            "gcp:certificateauthority/CertificateConfigX509ConfigAdditionalExtensionObjectId:CertificateConfigX509ConfigAdditionalExtensionObjectId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CertificateConfigX509ConfigCaOptions:CertificateConfigX509ConfigCaOptions": {
                "isCa": "is_ca",
                "maxIssuerPathLength": "max_issuer_path_length",
                "nonCa": "non_ca",
                "zeroMaxIssuerPathLength": "zero_max_issuer_path_length"
            },
            "gcp:certificateauthority/CertificateConfigX509ConfigKeyUsage:CertificateConfigX509ConfigKeyUsage": {
                "baseKeyUsage": "base_key_usage",
                "extendedKeyUsage": "extended_key_usage",
                "unknownExtendedKeyUsages": "unknown_extended_key_usages"
            },
            "gcp:certificateauthority/CertificateConfigX509ConfigKeyUsageBaseKeyUsage:CertificateConfigX509ConfigKeyUsageBaseKeyUsage": {
                "certSign": "cert_sign",
                "contentCommitment": "content_commitment",
                "crlSign": "crl_sign",
                "dataEncipherment": "data_encipherment",
                "decipherOnly": "decipher_only",
                "digitalSignature": "digital_signature",
                "encipherOnly": "encipher_only",
                "keyAgreement": "key_agreement",
                "keyEncipherment": "key_encipherment"
            },
            "gcp:certificateauthority/CertificateConfigX509ConfigKeyUsageExtendedKeyUsage:CertificateConfigX509ConfigKeyUsageExtendedKeyUsage": {
                "clientAuth": "client_auth",
                "codeSigning": "code_signing",
                "emailProtection": "email_protection",
                "ocspSigning": "ocsp_signing",
                "serverAuth": "server_auth",
                "timeStamping": "time_stamping"
            },
            "gcp:certificateauthority/CertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsage:CertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsage": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CertificateConfigX509ConfigNameConstraints:CertificateConfigX509ConfigNameConstraints": {
                "excludedDnsNames": "excluded_dns_names",
                "excludedEmailAddresses": "excluded_email_addresses",
                "excludedIpRanges": "excluded_ip_ranges",
                "excludedUris": "excluded_uris",
                "permittedDnsNames": "permitted_dns_names",
                "permittedEmailAddresses": "permitted_email_addresses",
                "permittedIpRanges": "permitted_ip_ranges",
                "permittedUris": "permitted_uris"
            },
            "gcp:certificateauthority/CertificateConfigX509ConfigPolicyId:CertificateConfigX509ConfigPolicyId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CertificateRevocationDetail:CertificateRevocationDetail": {
                "revocationState": "revocation_state",
                "revocationTime": "revocation_time"
            },
            "gcp:certificateauthority/CertificateTemplateIdentityConstraints:CertificateTemplateIdentityConstraints": {
                "allowSubjectAltNamesPassthrough": "allow_subject_alt_names_passthrough",
                "allowSubjectPassthrough": "allow_subject_passthrough",
                "celExpression": "cel_expression"
            },
            "gcp:certificateauthority/CertificateTemplatePassthroughExtensions:CertificateTemplatePassthroughExtensions": {
                "additionalExtensions": "additional_extensions",
                "knownExtensions": "known_extensions"
            },
            "gcp:certificateauthority/CertificateTemplatePassthroughExtensionsAdditionalExtension:CertificateTemplatePassthroughExtensionsAdditionalExtension": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CertificateTemplatePredefinedValues:CertificateTemplatePredefinedValues": {
                "additionalExtensions": "additional_extensions",
                "aiaOcspServers": "aia_ocsp_servers",
                "caOptions": "ca_options",
                "keyUsage": "key_usage",
                "policyIds": "policy_ids"
            },
            "gcp:certificateauthority/CertificateTemplatePredefinedValuesAdditionalExtension:CertificateTemplatePredefinedValuesAdditionalExtension": {
                "objectId": "object_id"
            },
            "gcp:certificateauthority/CertificateTemplatePredefinedValuesAdditionalExtensionObjectId:CertificateTemplatePredefinedValuesAdditionalExtensionObjectId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CertificateTemplatePredefinedValuesCaOptions:CertificateTemplatePredefinedValuesCaOptions": {
                "isCa": "is_ca",
                "maxIssuerPathLength": "max_issuer_path_length"
            },
            "gcp:certificateauthority/CertificateTemplatePredefinedValuesKeyUsage:CertificateTemplatePredefinedValuesKeyUsage": {
                "baseKeyUsage": "base_key_usage",
                "extendedKeyUsage": "extended_key_usage",
                "unknownExtendedKeyUsages": "unknown_extended_key_usages"
            },
            "gcp:certificateauthority/CertificateTemplatePredefinedValuesKeyUsageBaseKeyUsage:CertificateTemplatePredefinedValuesKeyUsageBaseKeyUsage": {
                "certSign": "cert_sign",
                "contentCommitment": "content_commitment",
                "crlSign": "crl_sign",
                "dataEncipherment": "data_encipherment",
                "decipherOnly": "decipher_only",
                "digitalSignature": "digital_signature",
                "encipherOnly": "encipher_only",
                "keyAgreement": "key_agreement",
                "keyEncipherment": "key_encipherment"
            },
            "gcp:certificateauthority/CertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsage:CertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsage": {
                "clientAuth": "client_auth",
                "codeSigning": "code_signing",
                "emailProtection": "email_protection",
                "ocspSigning": "ocsp_signing",
                "serverAuth": "server_auth",
                "timeStamping": "time_stamping"
            },
            "gcp:certificateauthority/CertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsage:CertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsage": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/CertificateTemplatePredefinedValuesPolicyId:CertificateTemplatePredefinedValuesPolicyId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/authority:Authority": {
                "accessUrls": "access_urls",
                "certificateAuthorityId": "certificate_authority_id",
                "createTime": "create_time",
                "deletionProtection": "deletion_protection",
                "desiredState": "desired_state",
                "gcsBucket": "gcs_bucket",
                "ignoreActiveCertificatesOnDeletion": "ignore_active_certificates_on_deletion",
                "keySpec": "key_spec",
                "pemCaCertificate": "pem_ca_certificate",
                "pemCaCertificates": "pem_ca_certificates",
                "skipGracePeriod": "skip_grace_period",
                "subordinateConfig": "subordinate_config",
                "updateTime": "update_time"
            },
            "gcp:certificateauthority/caPool:CaPool": {
                "issuancePolicy": "issuance_policy",
                "publishingOptions": "publishing_options"
            },
            "gcp:certificateauthority/caPoolIamBinding:CaPoolIamBinding": {
                "caPool": "ca_pool"
            },
            "gcp:certificateauthority/caPoolIamMember:CaPoolIamMember": {
                "caPool": "ca_pool"
            },
            "gcp:certificateauthority/caPoolIamPolicy:CaPoolIamPolicy": {
                "caPool": "ca_pool",
                "policyData": "policy_data"
            },
            "gcp:certificateauthority/certificate:Certificate": {
                "certificateAuthority": "certificate_authority",
                "certificateDescriptions": "certificate_description",
                "certificateTemplate": "certificate_template",
                "createTime": "create_time",
                "issuerCertificateAuthority": "issuer_certificate_authority",
                "pemCertificate": "pem_certificate",
                "pemCertificateChains": "pem_certificate_chain",
                "pemCertificates": "pem_certificates",
                "pemCsr": "pem_csr",
                "revocationDetails": "revocation_details",
                "updateTime": "update_time"
            },
            "gcp:certificateauthority/certificateTemplate:CertificateTemplate": {
                "createTime": "create_time",
                "identityConstraints": "identity_constraints",
                "passthroughExtensions": "passthrough_extensions",
                "predefinedValues": "predefined_values",
                "updateTime": "update_time"
            },
            "gcp:certificateauthority/certificateTemplateIamBinding:CertificateTemplateIamBinding": {
                "certificateTemplate": "certificate_template"
            },
            "gcp:certificateauthority/certificateTemplateIamMember:CertificateTemplateIamMember": {
                "certificateTemplate": "certificate_template"
            },
            "gcp:certificateauthority/certificateTemplateIamPolicy:CertificateTemplateIamPolicy": {
                "certificateTemplate": "certificate_template",
                "policyData": "policy_data"
            },
            "gcp:certificateauthority/getAuthority:getAuthority": {
                "accessUrls": "access_urls",
                "certificateAuthorityId": "certificate_authority_id",
                "configs": "config",
                "createTime": "create_time",
                "deletionProtection": "deletion_protection",
                "desiredState": "desired_state",
                "gcsBucket": "gcs_bucket",
                "ignoreActiveCertificatesOnDeletion": "ignore_active_certificates_on_deletion",
                "keySpecs": "key_spec",
                "pemCaCertificate": "pem_ca_certificate",
                "pemCaCertificates": "pem_ca_certificates",
                "pemCsr": "pem_csr",
                "skipGracePeriod": "skip_grace_period",
                "subordinateConfigs": "subordinate_config",
                "updateTime": "update_time"
            },
            "gcp:certificateauthority/getAuthorityAccessUrl:getAuthorityAccessUrl": {
                "caCertificateAccessUrl": "ca_certificate_access_url",
                "crlAccessUrls": "crl_access_urls"
            },
            "gcp:certificateauthority/getAuthorityConfig:getAuthorityConfig": {
                "subjectConfigs": "subject_config",
                "x509Configs": "x509_config"
            },
            "gcp:certificateauthority/getAuthorityConfigSubjectConfig:getAuthorityConfigSubjectConfig": {
                "subjectAltNames": "subject_alt_name",
                "subjects": "subject"
            },
            "gcp:certificateauthority/getAuthorityConfigSubjectConfigSubject:getAuthorityConfigSubjectConfigSubject": {
                "commonName": "common_name",
                "countryCode": "country_code",
                "organizationalUnit": "organizational_unit",
                "postalCode": "postal_code",
                "streetAddress": "street_address"
            },
            "gcp:certificateauthority/getAuthorityConfigSubjectConfigSubjectAltName:getAuthorityConfigSubjectConfigSubjectAltName": {
                "dnsNames": "dns_names",
                "emailAddresses": "email_addresses",
                "ipAddresses": "ip_addresses"
            },
            "gcp:certificateauthority/getAuthorityConfigX509Config:getAuthorityConfigX509Config": {
                "additionalExtensions": "additional_extensions",
                "aiaOcspServers": "aia_ocsp_servers",
                "caOptions": "ca_options",
                "keyUsages": "key_usage",
                "nameConstraints": "name_constraints",
                "policyIds": "policy_ids"
            },
            "gcp:certificateauthority/getAuthorityConfigX509ConfigAdditionalExtension:getAuthorityConfigX509ConfigAdditionalExtension": {
                "objectIds": "object_id"
            },
            "gcp:certificateauthority/getAuthorityConfigX509ConfigAdditionalExtensionObjectId:getAuthorityConfigX509ConfigAdditionalExtensionObjectId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/getAuthorityConfigX509ConfigCaOption:getAuthorityConfigX509ConfigCaOption": {
                "isCa": "is_ca",
                "maxIssuerPathLength": "max_issuer_path_length",
                "nonCa": "non_ca",
                "zeroMaxIssuerPathLength": "zero_max_issuer_path_length"
            },
            "gcp:certificateauthority/getAuthorityConfigX509ConfigKeyUsage:getAuthorityConfigX509ConfigKeyUsage": {
                "baseKeyUsages": "base_key_usage",
                "extendedKeyUsages": "extended_key_usage",
                "unknownExtendedKeyUsages": "unknown_extended_key_usages"
            },
            "gcp:certificateauthority/getAuthorityConfigX509ConfigKeyUsageBaseKeyUsage:getAuthorityConfigX509ConfigKeyUsageBaseKeyUsage": {
                "certSign": "cert_sign",
                "contentCommitment": "content_commitment",
                "crlSign": "crl_sign",
                "dataEncipherment": "data_encipherment",
                "decipherOnly": "decipher_only",
                "digitalSignature": "digital_signature",
                "encipherOnly": "encipher_only",
                "keyAgreement": "key_agreement",
                "keyEncipherment": "key_encipherment"
            },
            "gcp:certificateauthority/getAuthorityConfigX509ConfigKeyUsageExtendedKeyUsage:getAuthorityConfigX509ConfigKeyUsageExtendedKeyUsage": {
                "clientAuth": "client_auth",
                "codeSigning": "code_signing",
                "emailProtection": "email_protection",
                "ocspSigning": "ocsp_signing",
                "serverAuth": "server_auth",
                "timeStamping": "time_stamping"
            },
            "gcp:certificateauthority/getAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsage:getAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsage": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/getAuthorityConfigX509ConfigNameConstraint:getAuthorityConfigX509ConfigNameConstraint": {
                "excludedDnsNames": "excluded_dns_names",
                "excludedEmailAddresses": "excluded_email_addresses",
                "excludedIpRanges": "excluded_ip_ranges",
                "excludedUris": "excluded_uris",
                "permittedDnsNames": "permitted_dns_names",
                "permittedEmailAddresses": "permitted_email_addresses",
                "permittedIpRanges": "permitted_ip_ranges",
                "permittedUris": "permitted_uris"
            },
            "gcp:certificateauthority/getAuthorityConfigX509ConfigPolicyId:getAuthorityConfigX509ConfigPolicyId": {
                "objectIdPaths": "object_id_path"
            },
            "gcp:certificateauthority/getAuthorityKeySpec:getAuthorityKeySpec": {
                "cloudKmsKeyVersion": "cloud_kms_key_version"
            },
            "gcp:certificateauthority/getAuthoritySubordinateConfig:getAuthoritySubordinateConfig": {
                "certificateAuthority": "certificate_authority",
                "pemIssuerChains": "pem_issuer_chain"
            },
            "gcp:certificateauthority/getAuthoritySubordinateConfigPemIssuerChain:getAuthoritySubordinateConfigPemIssuerChain": {
                "pemCertificates": "pem_certificates"
            },
            "gcp:certificateauthority/getCaPoolIamPolicy:getCaPoolIamPolicy": {
                "caPool": "ca_pool",
                "policyData": "policy_data"
            },
            "gcp:certificateauthority/getCertificateTemplateIamPolicy:getCertificateTemplateIamPolicy": {
                "certificateTemplate": "certificate_template",
                "policyData": "policy_data"
            },
            "gcp:certificatemanager/CertificateIssuanceConfigCertificateAuthorityConfig:CertificateIssuanceConfigCertificateAuthorityConfig": {
                "certificateAuthorityServiceConfig": "certificate_authority_service_config"
            },
            "gcp:certificatemanager/CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig:CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig": {
                "caPool": "ca_pool"
            },
            "gcp:certificatemanager/CertificateManaged:CertificateManaged": {
                "authorizationAttemptInfos": "authorization_attempt_info",
                "dnsAuthorizations": "dns_authorizations",
                "issuanceConfig": "issuance_config",
                "provisioningIssues": "provisioning_issue"
            },
            "gcp:certificatemanager/CertificateManagedAuthorizationAttemptInfo:CertificateManagedAuthorizationAttemptInfo": {
                "failureReason": "failure_reason"
            },
            "gcp:certificatemanager/CertificateMapGclbTarget:CertificateMapGclbTarget": {
                "ipConfigs": "ip_configs",
                "targetHttpsProxy": "target_https_proxy",
                "targetSslProxy": "target_ssl_proxy"
            },
            "gcp:certificatemanager/CertificateMapGclbTargetIpConfig:CertificateMapGclbTargetIpConfig": {
                "ipAddress": "ip_address"
            },
            "gcp:certificatemanager/CertificateSelfManaged:CertificateSelfManaged": {
                "certificatePem": "certificate_pem",
                "pemCertificate": "pem_certificate",
                "pemPrivateKey": "pem_private_key",
                "privateKeyPem": "private_key_pem"
            },
            "gcp:certificatemanager/certificate:Certificate": {
                "selfManaged": "self_managed"
            },
            "gcp:certificatemanager/certificateIssuanceConfig:CertificateIssuanceConfig": {
                "certificateAuthorityConfig": "certificate_authority_config",
                "createTime": "create_time",
                "keyAlgorithm": "key_algorithm",
                "rotationWindowPercentage": "rotation_window_percentage",
                "updateTime": "update_time"
            },
            "gcp:certificatemanager/certificateMap:CertificateMap": {
                "createTime": "create_time",
                "gclbTargets": "gclb_targets",
                "updateTime": "update_time"
            },
            "gcp:certificatemanager/certificateMapEntry:CertificateMapEntry": {
                "createTime": "create_time",
                "updateTime": "update_time"
            },
            "gcp:certificatemanager/dnsAuthorization:DnsAuthorization": {
                "dnsResourceRecords": "dns_resource_record"
            },
            "gcp:cloudasset/FolderFeedFeedOutputConfig:FolderFeedFeedOutputConfig": {
                "pubsubDestination": "pubsub_destination"
            },
            "gcp:cloudasset/OrganizationFeedFeedOutputConfig:OrganizationFeedFeedOutputConfig": {
                "pubsubDestination": "pubsub_destination"
            },
            "gcp:cloudasset/ProjectFeedFeedOutputConfig:ProjectFeedFeedOutputConfig": {
                "pubsubDestination": "pubsub_destination"
            },
            "gcp:cloudasset/folderFeed:FolderFeed": {
                "assetNames": "asset_names",
                "assetTypes": "asset_types",
                "billingProject": "billing_project",
                "contentType": "content_type",
                "feedId": "feed_id",
                "feedOutputConfig": "feed_output_config",
                "folderId": "folder_id"
            },
            "gcp:cloudasset/getResourcesSearchAll:getResourcesSearchAll": {
                "assetTypes": "asset_types"
            },
            "gcp:cloudasset/getResourcesSearchAllResult:getResourcesSearchAllResult": {
                "additionalAttributes": "additional_attributes",
                "assetType": "asset_type",
                "displayName": "display_name",
                "networkTags": "network_tags"
            },
            "gcp:cloudasset/organizationFeed:OrganizationFeed": {
                "assetNames": "asset_names",
                "assetTypes": "asset_types",
                "billingProject": "billing_project",
                "contentType": "content_type",
                "feedId": "feed_id",
                "feedOutputConfig": "feed_output_config",
                "orgId": "org_id"
            },
            "gcp:cloudasset/projectFeed:ProjectFeed": {
                "assetNames": "asset_names",
                "assetTypes": "asset_types",
                "billingProject": "billing_project",
                "contentType": "content_type",
                "feedId": "feed_id",
                "feedOutputConfig": "feed_output_config"
            },
            "gcp:cloudbuild/BitbucketServerConfigConnectedRepository:BitbucketServerConfigConnectedRepository": {
                "projectKey": "project_key",
                "repoSlug": "repo_slug"
            },
            "gcp:cloudbuild/BitbucketServerConfigSecrets:BitbucketServerConfigSecrets": {
                "adminAccessTokenVersionName": "admin_access_token_version_name",
                "readAccessTokenVersionName": "read_access_token_version_name",
                "webhookSecretVersionName": "webhook_secret_version_name"
            },
            "gcp:cloudbuild/TriggerApprovalConfig:TriggerApprovalConfig": {
                "approvalRequired": "approval_required"
            },
            "gcp:cloudbuild/TriggerBitbucketServerTriggerConfig:TriggerBitbucketServerTriggerConfig": {
                "bitbucketServerConfigResource": "bitbucket_server_config_resource",
                "projectKey": "project_key",
                "pullRequest": "pull_request",
                "repoSlug": "repo_slug"
            },
            "gcp:cloudbuild/TriggerBitbucketServerTriggerConfigPullRequest:TriggerBitbucketServerTriggerConfigPullRequest": {
                "commentControl": "comment_control",
                "invertRegex": "invert_regex"
            },
            "gcp:cloudbuild/TriggerBitbucketServerTriggerConfigPush:TriggerBitbucketServerTriggerConfigPush": {
                "invertRegex": "invert_regex"
            },
            "gcp:cloudbuild/TriggerBuild:TriggerBuild": {
                "availableSecrets": "available_secrets",
                "logsBucket": "logs_bucket",
                "queueTtl": "queue_ttl",
                "secrets": "secret",
                "steps": "step"
            },
            "gcp:cloudbuild/TriggerBuildArtifactsObjects:TriggerBuildArtifactsObjects": {
                "timings": "timing"
            },
            "gcp:cloudbuild/TriggerBuildArtifactsObjectsTiming:TriggerBuildArtifactsObjectsTiming": {
                "endTime": "end_time",
                "startTime": "start_time"
            },
            "gcp:cloudbuild/TriggerBuildAvailableSecrets:TriggerBuildAvailableSecrets": {
                "secretManagers": "secret_manager"
            },
            "gcp:cloudbuild/TriggerBuildAvailableSecretsSecretManager:TriggerBuildAvailableSecretsSecretManager": {
                "versionName": "version_name"
            },
            "gcp:cloudbuild/TriggerBuildOptions:TriggerBuildOptions": {
                "diskSizeGb": "disk_size_gb",
                "dynamicSubstitutions": "dynamic_substitutions",
                "envs": "env",
                "logStreamingOption": "log_streaming_option",
                "machineType": "machine_type",
                "requestedVerifyOption": "requested_verify_option",
                "secretEnvs": "secret_env",
                "sourceProvenanceHashes": "source_provenance_hash",
                "substitutionOption": "substitution_option",
                "workerPool": "worker_pool"
            },
            "gcp:cloudbuild/TriggerBuildSecret:TriggerBuildSecret": {
                "kmsKeyName": "kms_key_name",
                "secretEnv": "secret_env"
            },
            "gcp:cloudbuild/TriggerBuildSource:TriggerBuildSource": {
                "repoSource": "repo_source",
                "storageSource": "storage_source"
            },
            "gcp:cloudbuild/TriggerBuildSourceRepoSource:TriggerBuildSourceRepoSource": {
                "branchName": "branch_name",
                "commitSha": "commit_sha",
                "invertRegex": "invert_regex",
                "projectId": "project_id",
                "repoName": "repo_name",
                "tagName": "tag_name"
            },
            "gcp:cloudbuild/TriggerBuildStep:TriggerBuildStep": {
                "allowExitCodes": "allow_exit_codes",
                "allowFailure": "allow_failure",
                "envs": "env",
                "secretEnvs": "secret_env",
                "waitFors": "wait_for"
            },
            "gcp:cloudbuild/TriggerGitFileSource:TriggerGitFileSource": {
                "githubEnterpriseConfig": "github_enterprise_config",
                "repoType": "repo_type"
            },
            "gcp:cloudbuild/TriggerGithub:TriggerGithub": {
                "enterpriseConfigResourceName": "enterprise_config_resource_name",
                "pullRequest": "pull_request"
            },
            "gcp:cloudbuild/TriggerGithubPullRequest:TriggerGithubPullRequest": {
                "commentControl": "comment_control",
                "invertRegex": "invert_regex"
            },
            "gcp:cloudbuild/TriggerGithubPush:TriggerGithubPush": {
                "invertRegex": "invert_regex"
            },
            "gcp:cloudbuild/TriggerPubsubConfig:TriggerPubsubConfig": {
                "serviceAccountEmail": "service_account_email"
            },
            "gcp:cloudbuild/TriggerRepositoryEventConfig:TriggerRepositoryEventConfig": {
                "pullRequest": "pull_request"
            },
            "gcp:cloudbuild/TriggerRepositoryEventConfigPullRequest:TriggerRepositoryEventConfigPullRequest": {
                "commentControl": "comment_control",
                "invertRegex": "invert_regex"
            },
            "gcp:cloudbuild/TriggerRepositoryEventConfigPush:TriggerRepositoryEventConfigPush": {
                "invertRegex": "invert_regex"
            },
            "gcp:cloudbuild/TriggerSourceToBuild:TriggerSourceToBuild": {
                "githubEnterpriseConfig": "github_enterprise_config",
                "repoType": "repo_type"
            },
            "gcp:cloudbuild/TriggerTriggerTemplate:TriggerTriggerTemplate": {
                "branchName": "branch_name",
                "commitSha": "commit_sha",
                "invertRegex": "invert_regex",
                "projectId": "project_id",
                "repoName": "repo_name",
                "tagName": "tag_name"
            },
            "gcp:cloudbuild/WorkerPoolNetworkConfig:WorkerPoolNetworkConfig": {
                "peeredNetwork": "peered_network",
                "peeredNetworkIpRange": "peered_network_ip_range"
            },
            "gcp:cloudbuild/WorkerPoolWorkerConfig:WorkerPoolWorkerConfig": {
                "diskSizeGb": "disk_size_gb",
                "machineType": "machine_type",
                "noExternalIp": "no_external_ip"
            },
            "gcp:cloudbuild/bitbucketServerConfig:BitbucketServerConfig": {
                "apiKey": "api_key",
                "configId": "config_id",
                "connectedRepositories": "connected_repositories",
                "hostUri": "host_uri",
                "peeredNetwork": "peered_network",
                "sslCa": "ssl_ca",
                "webhookKey": "webhook_key"
            },
            "gcp:cloudbuild/getTrigger:getTrigger": {
                "approvalConfigs": "approval_config",
                "bitbucketServerTriggerConfigs": "bitbucket_server_trigger_config",
                "builds": "build",
                "createTime": "create_time",
                "gitFileSources": "git_file_source",
                "githubs": "github",
                "ignoredFiles": "ignored_files",
                "includeBuildLogs": "include_build_logs",
                "includedFiles": "included_files",
                "pubsubConfigs": "pubsub_config",
                "repositoryEventConfigs": "repository_event_config",
                "serviceAccount": "service_account",
                "sourceToBuilds": "source_to_build",
                "triggerId": "trigger_id",
                "triggerTemplates": "trigger_template",
                "webhookConfigs": "webhook_config"
            },
            "gcp:cloudbuild/getTriggerApprovalConfig:getTriggerApprovalConfig": {
                "approvalRequired": "approval_required"
            },
            "gcp:cloudbuild/getTriggerBitbucketServerTriggerConfig:getTriggerBitbucketServerTriggerConfig": {
                "bitbucketServerConfigResource": "bitbucket_server_config_resource",
                "projectKey": "project_key",
                "pullRequests": "pull_request",
                "pushes": "push",
                "repoSlug": "repo_slug"
            },
            "gcp:cloudbuild/getTriggerBitbucketServerTriggerConfigPullRequest:getTriggerBitbucketServerTriggerConfigPullRequest": {
                "commentControl": "comment_control",
                "invertRegex": "invert_regex"
            },
            "gcp:cloudbuild/getTriggerBitbucketServerTriggerConfigPush:getTriggerBitbucketServerTriggerConfigPush": {
                "invertRegex": "invert_regex"
            },
            "gcp:cloudbuild/getTriggerBuild:getTriggerBuild": {
                "availableSecrets": "available_secrets",
                "logsBucket": "logs_bucket",
                "queueTtl": "queue_ttl",
                "secrets": "secret",
                "sources": "source",
                "steps": "step"
            },
            "gcp:cloudbuild/getTriggerBuildArtifactObject:getTriggerBuildArtifactObject": {
                "timings": "timing"
            },
            "gcp:cloudbuild/getTriggerBuildArtifactObjectTiming:getTriggerBuildArtifactObjectTiming": {
                "endTime": "end_time",
                "startTime": "start_time"
            },
            "gcp:cloudbuild/getTriggerBuildAvailableSecret:getTriggerBuildAvailableSecret": {
                "secretManagers": "secret_manager"
            },
            "gcp:cloudbuild/getTriggerBuildAvailableSecretSecretManager:getTriggerBuildAvailableSecretSecretManager": {
                "versionName": "version_name"
            },
            "gcp:cloudbuild/getTriggerBuildOption:getTriggerBuildOption": {
                "diskSizeGb": "disk_size_gb",
                "dynamicSubstitutions": "dynamic_substitutions",
                "envs": "env",
                "logStreamingOption": "log_streaming_option",
                "machineType": "machine_type",
                "requestedVerifyOption": "requested_verify_option",
                "secretEnvs": "secret_env",
                "sourceProvenanceHashes": "source_provenance_hash",
                "substitutionOption": "substitution_option",
                "workerPool": "worker_pool"
            },
            "gcp:cloudbuild/getTriggerBuildSecret:getTriggerBuildSecret": {
                "kmsKeyName": "kms_key_name",
                "secretEnv": "secret_env"
            },
            "gcp:cloudbuild/getTriggerBuildSource:getTriggerBuildSource": {
                "repoSources": "repo_source",
                "storageSources": "storage_source"
            },
            "gcp:cloudbuild/getTriggerBuildSourceRepoSource:getTriggerBuildSourceRepoSource": {
                "branchName": "branch_name",
                "commitSha": "commit_sha",
                "invertRegex": "invert_regex",
                "projectId": "project_id",
                "repoName": "repo_name",
                "tagName": "tag_name"
            },
            "gcp:cloudbuild/getTriggerBuildStep:getTriggerBuildStep": {
                "allowExitCodes": "allow_exit_codes",
                "allowFailure": "allow_failure",
                "envs": "env",
                "secretEnvs": "secret_env",
                "waitFors": "wait_for"
            },
            "gcp:cloudbuild/getTriggerGitFileSource:getTriggerGitFileSource": {
                "githubEnterpriseConfig": "github_enterprise_config",
                "repoType": "repo_type"
            },
            "gcp:cloudbuild/getTriggerGithub:getTriggerGithub": {
                "enterpriseConfigResourceName": "enterprise_config_resource_name",
                "pullRequests": "pull_request",
                "pushes": "push"
            },
            "gcp:cloudbuild/getTriggerGithubPullRequest:getTriggerGithubPullRequest": {
                "commentControl": "comment_control",
                "invertRegex": "invert_regex"
            },
            "gcp:cloudbuild/getTriggerGithubPush:getTriggerGithubPush": {
                "invertRegex": "invert_regex"
            },
            "gcp:cloudbuild/getTriggerPubsubConfig:getTriggerPubsubConfig": {
                "serviceAccountEmail": "service_account_email"
            },
            "gcp:cloudbuild/getTriggerRepositoryEventConfig:getTriggerRepositoryEventConfig": {
                "pullRequests": "pull_request",
                "pushes": "push"
            },
            "gcp:cloudbuild/getTriggerRepositoryEventConfigPullRequest:getTriggerRepositoryEventConfigPullRequest": {
                "commentControl": "comment_control",
                "invertRegex": "invert_regex"
            },
            "gcp:cloudbuild/getTriggerRepositoryEventConfigPush:getTriggerRepositoryEventConfigPush": {
                "invertRegex": "invert_regex"
            },
            "gcp:cloudbuild/getTriggerSourceToBuild:getTriggerSourceToBuild": {
                "githubEnterpriseConfig": "github_enterprise_config",
                "repoType": "repo_type"
            },
            "gcp:cloudbuild/getTriggerTriggerTemplate:getTriggerTriggerTemplate": {
                "branchName": "branch_name",
                "commitSha": "commit_sha",
                "invertRegex": "invert_regex",
                "projectId": "project_id",
                "repoName": "repo_name",
                "tagName": "tag_name"
            },
            "gcp:cloudbuild/trigger:Trigger": {
                "approvalConfig": "approval_config",
                "bitbucketServerTriggerConfig": "bitbucket_server_trigger_config",
                "createTime": "create_time",
                "gitFileSource": "git_file_source",
                "ignoredFiles": "ignored_files",
                "includeBuildLogs": "include_build_logs",
                "includedFiles": "included_files",
                "pubsubConfig": "pubsub_config",
                "repositoryEventConfig": "repository_event_config",
                "serviceAccount": "service_account",
                "sourceToBuild": "source_to_build",
                "triggerId": "trigger_id",
                "triggerTemplate": "trigger_template",
                "webhookConfig": "webhook_config"
            },
            "gcp:cloudbuild/workerPool:WorkerPool": {
                "createTime": "create_time",
                "deleteTime": "delete_time",
                "displayName": "display_name",
                "networkConfig": "network_config",
                "updateTime": "update_time",
                "workerConfig": "worker_config"
            },
            "gcp:cloudbuildv2/ConnectionGithubConfig:ConnectionGithubConfig": {
                "appInstallationId": "app_installation_id",
                "authorizerCredential": "authorizer_credential"
            },
            "gcp:cloudbuildv2/ConnectionGithubConfigAuthorizerCredential:ConnectionGithubConfigAuthorizerCredential": {
                "oauthTokenSecretVersion": "oauth_token_secret_version"
            },
            "gcp:cloudbuildv2/ConnectionGithubEnterpriseConfig:ConnectionGithubEnterpriseConfig": {
                "appId": "app_id",
                "appInstallationId": "app_installation_id",
                "appSlug": "app_slug",
                "hostUri": "host_uri",
                "privateKeySecretVersion": "private_key_secret_version",
                "serviceDirectoryConfig": "service_directory_config",
                "sslCa": "ssl_ca",
                "webhookSecretSecretVersion": "webhook_secret_secret_version"
            },
            "gcp:cloudbuildv2/ConnectionGitlabConfig:ConnectionGitlabConfig": {
                "authorizerCredential": "authorizer_credential",
                "hostUri": "host_uri",
                "readAuthorizerCredential": "read_authorizer_credential",
                "serverVersion": "server_version",
                "serviceDirectoryConfig": "service_directory_config",
                "sslCa": "ssl_ca",
                "webhookSecretSecretVersion": "webhook_secret_secret_version"
            },
            "gcp:cloudbuildv2/ConnectionGitlabConfigAuthorizerCredential:ConnectionGitlabConfigAuthorizerCredential": {
                "userTokenSecretVersion": "user_token_secret_version"
            },
            "gcp:cloudbuildv2/ConnectionGitlabConfigReadAuthorizerCredential:ConnectionGitlabConfigReadAuthorizerCredential": {
                "userTokenSecretVersion": "user_token_secret_version"
            },
            "gcp:cloudbuildv2/ConnectionInstallationState:ConnectionInstallationState": {
                "actionUri": "action_uri"
            },
            "gcp:cloudbuildv2/connection:Connection": {
                "createTime": "create_time",
                "githubConfig": "github_config",
                "githubEnterpriseConfig": "github_enterprise_config",
                "gitlabConfig": "gitlab_config",
                "installationStates": "installation_state",
                "updateTime": "update_time"
            },
            "gcp:cloudbuildv2/connectionIAMPolicy:ConnectionIAMPolicy": {
                "policyData": "policy_data"
            },
            "gcp:cloudbuildv2/getConnectionIamPolicy:getConnectionIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:cloudbuildv2/repository:Repository": {
                "createTime": "create_time",
                "parentConnection": "parent_connection",
                "remoteUri": "remote_uri",
                "updateTime": "update_time"
            },
            "gcp:clouddeploy/DeliveryPipelineCondition:DeliveryPipelineCondition": {
                "pipelineReadyConditions": "pipeline_ready_condition",
                "targetsPresentConditions": "targets_present_condition",
                "targetsTypeConditions": "targets_type_condition"
            },
            "gcp:clouddeploy/DeliveryPipelineConditionPipelineReadyCondition:DeliveryPipelineConditionPipelineReadyCondition": {
                "updateTime": "update_time"
            },
            "gcp:clouddeploy/DeliveryPipelineConditionTargetsPresentCondition:DeliveryPipelineConditionTargetsPresentCondition": {
                "missingTargets": "missing_targets",
                "updateTime": "update_time"
            },
            "gcp:clouddeploy/DeliveryPipelineConditionTargetsTypeCondition:DeliveryPipelineConditionTargetsTypeCondition": {
                "errorDetails": "error_details"
            },
            "gcp:clouddeploy/DeliveryPipelineSerialPipelineStage:DeliveryPipelineSerialPipelineStage": {
                "deployParameters": "deploy_parameters",
                "targetId": "target_id"
            },
            "gcp:clouddeploy/DeliveryPipelineSerialPipelineStageDeployParameter:DeliveryPipelineSerialPipelineStageDeployParameter": {
                "matchTargetLabels": "match_target_labels"
            },
            "gcp:clouddeploy/DeliveryPipelineSerialPipelineStageStrategyCanary:DeliveryPipelineSerialPipelineStageStrategyCanary": {
                "canaryDeployment": "canary_deployment",
                "customCanaryDeployment": "custom_canary_deployment",
                "runtimeConfig": "runtime_config"
            },
            "gcp:clouddeploy/DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeployment:DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeployment": {
                "phaseConfigs": "phase_configs"
            },
            "gcp:clouddeploy/DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfig:DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfig": {
                "phaseId": "phase_id"
            },
            "gcp:clouddeploy/DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfig:DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfig": {
                "cloudRun": "cloud_run"
            },
            "gcp:clouddeploy/DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigCloudRun:DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigCloudRun": {
                "automaticTrafficControl": "automatic_traffic_control"
            },
            "gcp:clouddeploy/DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetes:DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetes": {
                "gatewayServiceMesh": "gateway_service_mesh",
                "serviceNetworking": "service_networking"
            },
            "gcp:clouddeploy/DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesGatewayServiceMesh:DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesGatewayServiceMesh": {
                "httpRoute": "http_route"
            },
            "gcp:clouddeploy/DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworking:DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworking": {
                "disablePodOverprovisioning": "disable_pod_overprovisioning"
            },
            "gcp:clouddeploy/TargetExecutionConfig:TargetExecutionConfig": {
                "artifactStorage": "artifact_storage",
                "executionTimeout": "execution_timeout",
                "serviceAccount": "service_account",
                "workerPool": "worker_pool"
            },
            "gcp:clouddeploy/TargetGke:TargetGke": {
                "internalIp": "internal_ip"
            },
            "gcp:clouddeploy/TargetMultiTarget:TargetMultiTarget": {
                "targetIds": "target_ids"
            },
            "gcp:clouddeploy/deliveryPipeline:DeliveryPipeline": {
                "conditions": "condition",
                "createTime": "create_time",
                "serialPipeline": "serial_pipeline",
                "updateTime": "update_time"
            },
            "gcp:clouddeploy/target:Target": {
                "anthosCluster": "anthos_cluster",
                "createTime": "create_time",
                "deployParameters": "deploy_parameters",
                "executionConfigs": "execution_configs",
                "multiTarget": "multi_target",
                "requireApproval": "require_approval",
                "targetId": "target_id",
                "updateTime": "update_time"
            },
            "gcp:cloudfunctions/FunctionEventTrigger:FunctionEventTrigger": {
                "eventType": "event_type",
                "failurePolicy": "failure_policy"
            },
            "gcp:cloudfunctions/FunctionSecretEnvironmentVariable:FunctionSecretEnvironmentVariable": {
                "projectId": "project_id"
            },
            "gcp:cloudfunctions/FunctionSecretVolume:FunctionSecretVolume": {
                "mountPath": "mount_path",
                "projectId": "project_id"
            },
            "gcp:cloudfunctions/FunctionSourceRepository:FunctionSourceRepository": {
                "deployedUrl": "deployed_url"
            },
            "gcp:cloudfunctions/function:Function": {
                "availableMemoryMb": "available_memory_mb",
                "buildEnvironmentVariables": "build_environment_variables",
                "buildWorkerPool": "build_worker_pool",
                "dockerRegistry": "docker_registry",
                "dockerRepository": "docker_repository",
                "entryPoint": "entry_point",
                "environmentVariables": "environment_variables",
                "eventTrigger": "event_trigger",
                "httpsTriggerSecurityLevel": "https_trigger_security_level",
                "httpsTriggerUrl": "https_trigger_url",
                "ingressSettings": "ingress_settings",
                "kmsKeyName": "kms_key_name",
                "maxInstances": "max_instances",
                "minInstances": "min_instances",
                "secretEnvironmentVariables": "secret_environment_variables",
                "secretVolumes": "secret_volumes",
                "serviceAccountEmail": "service_account_email",
                "sourceArchiveBucket": "source_archive_bucket",
                "sourceArchiveObject": "source_archive_object",
                "sourceRepository": "source_repository",
                "triggerHttp": "trigger_http",
                "vpcConnector": "vpc_connector",
                "vpcConnectorEgressSettings": "vpc_connector_egress_settings"
            },
            "gcp:cloudfunctions/functionIamBinding:FunctionIamBinding": {
                "cloudFunction": "cloud_function"
            },
            "gcp:cloudfunctions/functionIamMember:FunctionIamMember": {
                "cloudFunction": "cloud_function"
            },
            "gcp:cloudfunctions/functionIamPolicy:FunctionIamPolicy": {
                "cloudFunction": "cloud_function",
                "policyData": "policy_data"
            },
            "gcp:cloudfunctions/getFunction:getFunction": {
                "availableMemoryMb": "available_memory_mb",
                "buildEnvironmentVariables": "build_environment_variables",
                "buildWorkerPool": "build_worker_pool",
                "dockerRegistry": "docker_registry",
                "dockerRepository": "docker_repository",
                "entryPoint": "entry_point",
                "environmentVariables": "environment_variables",
                "eventTriggers": "event_trigger",
                "httpsTriggerSecurityLevel": "https_trigger_security_level",
                "httpsTriggerUrl": "https_trigger_url",
                "ingressSettings": "ingress_settings",
                "kmsKeyName": "kms_key_name",
                "maxInstances": "max_instances",
                "minInstances": "min_instances",
                "secretEnvironmentVariables": "secret_environment_variables",
                "secretVolumes": "secret_volumes",
                "serviceAccountEmail": "service_account_email",
                "sourceArchiveBucket": "source_archive_bucket",
                "sourceArchiveObject": "source_archive_object",
                "sourceRepositories": "source_repository",
                "triggerHttp": "trigger_http",
                "vpcConnector": "vpc_connector",
                "vpcConnectorEgressSettings": "vpc_connector_egress_settings"
            },
            "gcp:cloudfunctions/getFunctionEventTrigger:getFunctionEventTrigger": {
                "eventType": "event_type",
                "failurePolicies": "failure_policy"
            },
            "gcp:cloudfunctions/getFunctionIamPolicy:getFunctionIamPolicy": {
                "cloudFunction": "cloud_function",
                "policyData": "policy_data"
            },
            "gcp:cloudfunctions/getFunctionSecretEnvironmentVariable:getFunctionSecretEnvironmentVariable": {
                "projectId": "project_id"
            },
            "gcp:cloudfunctions/getFunctionSecretVolume:getFunctionSecretVolume": {
                "mountPath": "mount_path",
                "projectId": "project_id"
            },
            "gcp:cloudfunctions/getFunctionSourceRepository:getFunctionSourceRepository": {
                "deployedUrl": "deployed_url"
            },
            "gcp:cloudfunctionsv2/FunctionBuildConfig:FunctionBuildConfig": {
                "dockerRepository": "docker_repository",
                "entryPoint": "entry_point",
                "environmentVariables": "environment_variables",
                "workerPool": "worker_pool"
            },
            "gcp:cloudfunctionsv2/FunctionBuildConfigSource:FunctionBuildConfigSource": {
                "repoSource": "repo_source",
                "storageSource": "storage_source"
            },
            "gcp:cloudfunctionsv2/FunctionBuildConfigSourceRepoSource:FunctionBuildConfigSourceRepoSource": {
                "branchName": "branch_name",
                "commitSha": "commit_sha",
                "invertRegex": "invert_regex",
                "projectId": "project_id",
                "repoName": "repo_name",
                "tagName": "tag_name"
            },
            "gcp:cloudfunctionsv2/FunctionEventTrigger:FunctionEventTrigger": {
                "eventFilters": "event_filters",
                "eventType": "event_type",
                "pubsubTopic": "pubsub_topic",
                "retryPolicy": "retry_policy",
                "serviceAccountEmail": "service_account_email",
                "triggerRegion": "trigger_region"
            },
            "gcp:cloudfunctionsv2/FunctionServiceConfig:FunctionServiceConfig": {
                "allTrafficOnLatestRevision": "all_traffic_on_latest_revision",
                "availableCpu": "available_cpu",
                "availableMemory": "available_memory",
                "environmentVariables": "environment_variables",
                "gcfUri": "gcf_uri",
                "ingressSettings": "ingress_settings",
                "maxInstanceCount": "max_instance_count",
                "maxInstanceRequestConcurrency": "max_instance_request_concurrency",
                "minInstanceCount": "min_instance_count",
                "secretEnvironmentVariables": "secret_environment_variables",
                "secretVolumes": "secret_volumes",
                "serviceAccountEmail": "service_account_email",
                "timeoutSeconds": "timeout_seconds",
                "vpcConnector": "vpc_connector",
                "vpcConnectorEgressSettings": "vpc_connector_egress_settings"
            },
            "gcp:cloudfunctionsv2/FunctionServiceConfigSecretEnvironmentVariable:FunctionServiceConfigSecretEnvironmentVariable": {
                "projectId": "project_id"
            },
            "gcp:cloudfunctionsv2/FunctionServiceConfigSecretVolume:FunctionServiceConfigSecretVolume": {
                "mountPath": "mount_path",
                "projectId": "project_id"
            },
            "gcp:cloudfunctionsv2/function:Function": {
                "buildConfig": "build_config",
                "eventTrigger": "event_trigger",
                "serviceConfig": "service_config",
                "updateTime": "update_time"
            },
            "gcp:cloudfunctionsv2/functionIamBinding:FunctionIamBinding": {
                "cloudFunction": "cloud_function"
            },
            "gcp:cloudfunctionsv2/functionIamMember:FunctionIamMember": {
                "cloudFunction": "cloud_function"
            },
            "gcp:cloudfunctionsv2/functionIamPolicy:FunctionIamPolicy": {
                "cloudFunction": "cloud_function",
                "policyData": "policy_data"
            },
            "gcp:cloudfunctionsv2/getFunction:getFunction": {
                "buildConfigs": "build_config",
                "eventTriggers": "event_trigger",
                "serviceConfigs": "service_config",
                "updateTime": "update_time"
            },
            "gcp:cloudfunctionsv2/getFunctionBuildConfig:getFunctionBuildConfig": {
                "dockerRepository": "docker_repository",
                "entryPoint": "entry_point",
                "environmentVariables": "environment_variables",
                "sources": "source",
                "workerPool": "worker_pool"
            },
            "gcp:cloudfunctionsv2/getFunctionBuildConfigSource:getFunctionBuildConfigSource": {
                "repoSources": "repo_source",
                "storageSources": "storage_source"
            },
            "gcp:cloudfunctionsv2/getFunctionBuildConfigSourceRepoSource:getFunctionBuildConfigSourceRepoSource": {
                "branchName": "branch_name",
                "commitSha": "commit_sha",
                "invertRegex": "invert_regex",
                "projectId": "project_id",
                "repoName": "repo_name",
                "tagName": "tag_name"
            },
            "gcp:cloudfunctionsv2/getFunctionEventTrigger:getFunctionEventTrigger": {
                "eventFilters": "event_filters",
                "eventType": "event_type",
                "pubsubTopic": "pubsub_topic",
                "retryPolicy": "retry_policy",
                "serviceAccountEmail": "service_account_email",
                "triggerRegion": "trigger_region"
            },
            "gcp:cloudfunctionsv2/getFunctionIamPolicy:getFunctionIamPolicy": {
                "cloudFunction": "cloud_function",
                "policyData": "policy_data"
            },
            "gcp:cloudfunctionsv2/getFunctionServiceConfig:getFunctionServiceConfig": {
                "allTrafficOnLatestRevision": "all_traffic_on_latest_revision",
                "availableCpu": "available_cpu",
                "availableMemory": "available_memory",
                "environmentVariables": "environment_variables",
                "gcfUri": "gcf_uri",
                "ingressSettings": "ingress_settings",
                "maxInstanceCount": "max_instance_count",
                "maxInstanceRequestConcurrency": "max_instance_request_concurrency",
                "minInstanceCount": "min_instance_count",
                "secretEnvironmentVariables": "secret_environment_variables",
                "secretVolumes": "secret_volumes",
                "serviceAccountEmail": "service_account_email",
                "timeoutSeconds": "timeout_seconds",
                "vpcConnector": "vpc_connector",
                "vpcConnectorEgressSettings": "vpc_connector_egress_settings"
            },
            "gcp:cloudfunctionsv2/getFunctionServiceConfigSecretEnvironmentVariable:getFunctionServiceConfigSecretEnvironmentVariable": {
                "projectId": "project_id"
            },
            "gcp:cloudfunctionsv2/getFunctionServiceConfigSecretVolume:getFunctionServiceConfigSecretVolume": {
                "mountPath": "mount_path",
                "projectId": "project_id"
            },
            "gcp:cloudidentity/getGroupMembershipsMembership:getGroupMembershipsMembership": {
                "createTime": "create_time",
                "memberKeys": "member_key",
                "preferredMemberKeys": "preferred_member_key",
                "updateTime": "update_time"
            },
            "gcp:cloudidentity/getGroupsGroup:getGroupsGroup": {
                "createTime": "create_time",
                "displayName": "display_name",
                "groupKeys": "group_key",
                "initialGroupConfig": "initial_group_config",
                "updateTime": "update_time"
            },
            "gcp:cloudidentity/group:Group": {
                "createTime": "create_time",
                "displayName": "display_name",
                "groupKey": "group_key",
                "initialGroupConfig": "initial_group_config",
                "updateTime": "update_time"
            },
            "gcp:cloudidentity/groupMembership:GroupMembership": {
                "createTime": "create_time",
                "memberKey": "member_key",
                "preferredMemberKey": "preferred_member_key",
                "updateTime": "update_time"
            },
            "gcp:cloudids/endpoint:Endpoint": {
                "createTime": "create_time",
                "endpointForwardingRule": "endpoint_forwarding_rule",
                "endpointIp": "endpoint_ip",
                "threatExceptions": "threat_exceptions",
                "updateTime": "update_time"
            },
            "gcp:cloudrun/DomainMappingMetadata:DomainMappingMetadata": {
                "resourceVersion": "resource_version",
                "selfLink": "self_link"
            },
            "gcp:cloudrun/DomainMappingSpec:DomainMappingSpec": {
                "certificateMode": "certificate_mode",
                "forceOverride": "force_override",
                "routeName": "route_name"
            },
            "gcp:cloudrun/DomainMappingStatus:DomainMappingStatus": {
                "mappedRouteName": "mapped_route_name",
                "observedGeneration": "observed_generation",
                "resourceRecords": "resource_records"
            },
            "gcp:cloudrun/ServiceMetadata:ServiceMetadata": {
                "resourceVersion": "resource_version",
                "selfLink": "self_link"
            },
            "gcp:cloudrun/ServiceStatus:ServiceStatus": {
                "latestCreatedRevisionName": "latest_created_revision_name",
                "latestReadyRevisionName": "latest_ready_revision_name",
                "observedGeneration": "observed_generation",
                "traffics": "traffic"
            },
            "gcp:cloudrun/ServiceStatusTraffic:ServiceStatusTraffic": {
                "latestRevision": "latest_revision",
                "revisionName": "revision_name"
            },
            "gcp:cloudrun/ServiceTemplateMetadata:ServiceTemplateMetadata": {
                "resourceVersion": "resource_version",
                "selfLink": "self_link"
            },
            "gcp:cloudrun/ServiceTemplateSpec:ServiceTemplateSpec": {
                "containerConcurrency": "container_concurrency",
                "serviceAccountName": "service_account_name",
                "servingState": "serving_state",
                "timeoutSeconds": "timeout_seconds"
            },
            "gcp:cloudrun/ServiceTemplateSpecContainer:ServiceTemplateSpecContainer": {
                "commands": "command",
                "envFroms": "env_from",
                "envs": "env",
                "livenessProbe": "liveness_probe",
                "startupProbe": "startup_probe",
                "volumeMounts": "volume_mounts",
                "workingDir": "working_dir"
            },
            "gcp:cloudrun/ServiceTemplateSpecContainerEnv:ServiceTemplateSpecContainerEnv": {
                "valueFrom": "value_from"
            },
            "gcp:cloudrun/ServiceTemplateSpecContainerEnvFrom:ServiceTemplateSpecContainerEnvFrom": {
                "configMapRef": "config_map_ref",
                "secretRef": "secret_ref"
            },
            "gcp:cloudrun/ServiceTemplateSpecContainerEnvFromConfigMapRef:ServiceTemplateSpecContainerEnvFromConfigMapRef": {
                "localObjectReference": "local_object_reference"
            },
            "gcp:cloudrun/ServiceTemplateSpecContainerEnvFromSecretRef:ServiceTemplateSpecContainerEnvFromSecretRef": {
                "localObjectReference": "local_object_reference"
            },
            "gcp:cloudrun/ServiceTemplateSpecContainerEnvValueFrom:ServiceTemplateSpecContainerEnvValueFrom": {
                "secretKeyRef": "secret_key_ref"
            },
            "gcp:cloudrun/ServiceTemplateSpecContainerLivenessProbe:ServiceTemplateSpecContainerLivenessProbe": {
                "failureThreshold": "failure_threshold",
                "httpGet": "http_get",
                "initialDelaySeconds": "initial_delay_seconds",
                "periodSeconds": "period_seconds",
                "timeoutSeconds": "timeout_seconds"
            },
            "gcp:cloudrun/ServiceTemplateSpecContainerLivenessProbeHttpGet:ServiceTemplateSpecContainerLivenessProbeHttpGet": {
                "httpHeaders": "http_headers"
            },
            "gcp:cloudrun/ServiceTemplateSpecContainerPort:ServiceTemplateSpecContainerPort": {
                "containerPort": "container_port"
            },
            "gcp:cloudrun/ServiceTemplateSpecContainerStartupProbe:ServiceTemplateSpecContainerStartupProbe": {
                "failureThreshold": "failure_threshold",
                "httpGet": "http_get",
                "initialDelaySeconds": "initial_delay_seconds",
                "periodSeconds": "period_seconds",
                "tcpSocket": "tcp_socket",
                "timeoutSeconds": "timeout_seconds"
            },
            "gcp:cloudrun/ServiceTemplateSpecContainerStartupProbeHttpGet:ServiceTemplateSpecContainerStartupProbeHttpGet": {
                "httpHeaders": "http_headers"
            },
            "gcp:cloudrun/ServiceTemplateSpecContainerVolumeMount:ServiceTemplateSpecContainerVolumeMount": {
                "mountPath": "mount_path"
            },
            "gcp:cloudrun/ServiceTemplateSpecVolume:ServiceTemplateSpecVolume": {
                "emptyDir": "empty_dir"
            },
            "gcp:cloudrun/ServiceTemplateSpecVolumeEmptyDir:ServiceTemplateSpecVolumeEmptyDir": {
                "sizeLimit": "size_limit"
            },
            "gcp:cloudrun/ServiceTemplateSpecVolumeSecret:ServiceTemplateSpecVolumeSecret": {
                "defaultMode": "default_mode",
                "secretName": "secret_name"
            },
            "gcp:cloudrun/ServiceTraffic:ServiceTraffic": {
                "latestRevision": "latest_revision",
                "revisionName": "revision_name"
            },
            "gcp:cloudrun/domainMapping:DomainMapping": {
                "statuses": "status"
            },
            "gcp:cloudrun/getService:getService": {
                "autogenerateRevisionName": "autogenerate_revision_name",
                "metadatas": "metadata",
                "statuses": "status",
                "templates": "template",
                "traffics": "traffic"
            },
            "gcp:cloudrun/getServiceIamPolicy:getServiceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:cloudrun/getServiceMetadata:getServiceMetadata": {
                "resourceVersion": "resource_version",
                "selfLink": "self_link"
            },
            "gcp:cloudrun/getServiceStatus:getServiceStatus": {
                "latestCreatedRevisionName": "latest_created_revision_name",
                "latestReadyRevisionName": "latest_ready_revision_name",
                "observedGeneration": "observed_generation",
                "traffics": "traffic"
            },
            "gcp:cloudrun/getServiceStatusTraffic:getServiceStatusTraffic": {
                "latestRevision": "latest_revision",
                "revisionName": "revision_name"
            },
            "gcp:cloudrun/getServiceTemplate:getServiceTemplate": {
                "metadatas": "metadata",
                "specs": "spec"
            },
            "gcp:cloudrun/getServiceTemplateMetadata:getServiceTemplateMetadata": {
                "resourceVersion": "resource_version",
                "selfLink": "self_link"
            },
            "gcp:cloudrun/getServiceTemplateSpec:getServiceTemplateSpec": {
                "containerConcurrency": "container_concurrency",
                "serviceAccountName": "service_account_name",
                "servingState": "serving_state",
                "timeoutSeconds": "timeout_seconds"
            },
            "gcp:cloudrun/getServiceTemplateSpecContainer:getServiceTemplateSpecContainer": {
                "commands": "command",
                "envFroms": "env_from",
                "envs": "env",
                "livenessProbes": "liveness_probe",
                "startupProbes": "startup_probe",
                "volumeMounts": "volume_mounts",
                "workingDir": "working_dir"
            },
            "gcp:cloudrun/getServiceTemplateSpecContainerEnv:getServiceTemplateSpecContainerEnv": {
                "valueFroms": "value_from"
            },
            "gcp:cloudrun/getServiceTemplateSpecContainerEnvFrom:getServiceTemplateSpecContainerEnvFrom": {
                "configMapReves": "config_map_ref",
                "secretReves": "secret_ref"
            },
            "gcp:cloudrun/getServiceTemplateSpecContainerEnvFromConfigMapRef:getServiceTemplateSpecContainerEnvFromConfigMapRef": {
                "localObjectReferences": "local_object_reference"
            },
            "gcp:cloudrun/getServiceTemplateSpecContainerEnvFromSecretRef:getServiceTemplateSpecContainerEnvFromSecretRef": {
                "localObjectReferences": "local_object_reference"
            },
            "gcp:cloudrun/getServiceTemplateSpecContainerEnvValueFrom:getServiceTemplateSpecContainerEnvValueFrom": {
                "secretKeyReves": "secret_key_ref"
            },
            "gcp:cloudrun/getServiceTemplateSpecContainerLivenessProbe:getServiceTemplateSpecContainerLivenessProbe": {
                "failureThreshold": "failure_threshold",
                "grpcs": "grpc",
                "httpGets": "http_get",
                "initialDelaySeconds": "initial_delay_seconds",
                "periodSeconds": "period_seconds",
                "timeoutSeconds": "timeout_seconds"
            },
            "gcp:cloudrun/getServiceTemplateSpecContainerLivenessProbeHttpGet:getServiceTemplateSpecContainerLivenessProbeHttpGet": {
                "httpHeaders": "http_headers"
            },
            "gcp:cloudrun/getServiceTemplateSpecContainerPort:getServiceTemplateSpecContainerPort": {
                "containerPort": "container_port"
            },
            "gcp:cloudrun/getServiceTemplateSpecContainerStartupProbe:getServiceTemplateSpecContainerStartupProbe": {
                "failureThreshold": "failure_threshold",
                "grpcs": "grpc",
                "httpGets": "http_get",
                "initialDelaySeconds": "initial_delay_seconds",
                "periodSeconds": "period_seconds",
                "tcpSockets": "tcp_socket",
                "timeoutSeconds": "timeout_seconds"
            },
            "gcp:cloudrun/getServiceTemplateSpecContainerStartupProbeHttpGet:getServiceTemplateSpecContainerStartupProbeHttpGet": {
                "httpHeaders": "http_headers"
            },
            "gcp:cloudrun/getServiceTemplateSpecContainerVolumeMount:getServiceTemplateSpecContainerVolumeMount": {
                "mountPath": "mount_path"
            },
            "gcp:cloudrun/getServiceTemplateSpecVolume:getServiceTemplateSpecVolume": {
                "emptyDirs": "empty_dir",
                "secrets": "secret"
            },
            "gcp:cloudrun/getServiceTemplateSpecVolumeEmptyDir:getServiceTemplateSpecVolumeEmptyDir": {
                "sizeLimit": "size_limit"
            },
            "gcp:cloudrun/getServiceTemplateSpecVolumeSecret:getServiceTemplateSpecVolumeSecret": {
                "defaultMode": "default_mode",
                "secretName": "secret_name"
            },
            "gcp:cloudrun/getServiceTraffic:getServiceTraffic": {
                "latestRevision": "latest_revision",
                "revisionName": "revision_name"
            },
            "gcp:cloudrun/iamPolicy:IamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:cloudrun/service:Service": {
                "autogenerateRevisionName": "autogenerate_revision_name",
                "statuses": "status",
                "traffics": "traffic"
            },
            "gcp:cloudrunv2/JobBinaryAuthorization:JobBinaryAuthorization": {
                "breakglassJustification": "breakglass_justification",
                "useDefault": "use_default"
            },
            "gcp:cloudrunv2/JobCondition:JobCondition": {
                "executionReason": "execution_reason",
                "lastTransitionTime": "last_transition_time",
                "revisionReason": "revision_reason"
            },
            "gcp:cloudrunv2/JobLatestCreatedExecution:JobLatestCreatedExecution": {
                "completionTime": "completion_time",
                "createTime": "create_time"
            },
            "gcp:cloudrunv2/JobTemplate:JobTemplate": {
                "taskCount": "task_count"
            },
            "gcp:cloudrunv2/JobTemplateTemplate:JobTemplateTemplate": {
                "encryptionKey": "encryption_key",
                "executionEnvironment": "execution_environment",
                "maxRetries": "max_retries",
                "serviceAccount": "service_account",
                "vpcAccess": "vpc_access"
            },
            "gcp:cloudrunv2/JobTemplateTemplateContainer:JobTemplateTemplateContainer": {
                "commands": "command",
                "envs": "env",
                "livenessProbe": "liveness_probe",
                "startupProbe": "startup_probe",
                "volumeMounts": "volume_mounts",
                "workingDir": "working_dir"
            },
            "gcp:cloudrunv2/JobTemplateTemplateContainerEnv:JobTemplateTemplateContainerEnv": {
                "valueSource": "value_source"
            },
            "gcp:cloudrunv2/JobTemplateTemplateContainerEnvValueSource:JobTemplateTemplateContainerEnvValueSource": {
                "secretKeyRef": "secret_key_ref"
            },
            "gcp:cloudrunv2/JobTemplateTemplateContainerLivenessProbe:JobTemplateTemplateContainerLivenessProbe": {
                "failureThreshold": "failure_threshold",
                "httpGet": "http_get",
                "initialDelaySeconds": "initial_delay_seconds",
                "periodSeconds": "period_seconds",
                "tcpSocket": "tcp_socket",
                "timeoutSeconds": "timeout_seconds"
            },
            "gcp:cloudrunv2/JobTemplateTemplateContainerLivenessProbeHttpGet:JobTemplateTemplateContainerLivenessProbeHttpGet": {
                "httpHeaders": "http_headers"
            },
            "gcp:cloudrunv2/JobTemplateTemplateContainerPort:JobTemplateTemplateContainerPort": {
                "containerPort": "container_port"
            },
            "gcp:cloudrunv2/JobTemplateTemplateContainerStartupProbe:JobTemplateTemplateContainerStartupProbe": {
                "failureThreshold": "failure_threshold",
                "httpGet": "http_get",
                "initialDelaySeconds": "initial_delay_seconds",
                "periodSeconds": "period_seconds",
                "tcpSocket": "tcp_socket",
                "timeoutSeconds": "timeout_seconds"
            },
            "gcp:cloudrunv2/JobTemplateTemplateContainerStartupProbeHttpGet:JobTemplateTemplateContainerStartupProbeHttpGet": {
                "httpHeaders": "http_headers"
            },
            "gcp:cloudrunv2/JobTemplateTemplateContainerVolumeMount:JobTemplateTemplateContainerVolumeMount": {
                "mountPath": "mount_path"
            },
            "gcp:cloudrunv2/JobTemplateTemplateVolume:JobTemplateTemplateVolume": {
                "cloudSqlInstance": "cloud_sql_instance",
                "emptyDir": "empty_dir"
            },
            "gcp:cloudrunv2/JobTemplateTemplateVolumeEmptyDir:JobTemplateTemplateVolumeEmptyDir": {
                "sizeLimit": "size_limit"
            },
            "gcp:cloudrunv2/JobTemplateTemplateVolumeSecret:JobTemplateTemplateVolumeSecret": {
                "defaultMode": "default_mode"
            },
            "gcp:cloudrunv2/JobTerminalCondition:JobTerminalCondition": {
                "executionReason": "execution_reason",
                "lastTransitionTime": "last_transition_time",
                "revisionReason": "revision_reason"
            },
            "gcp:cloudrunv2/ServiceBinaryAuthorization:ServiceBinaryAuthorization": {
                "breakglassJustification": "breakglass_justification",
                "useDefault": "use_default"
            },
            "gcp:cloudrunv2/ServiceCondition:ServiceCondition": {
                "executionReason": "execution_reason",
                "lastTransitionTime": "last_transition_time",
                "revisionReason": "revision_reason"
            },
            "gcp:cloudrunv2/ServiceTemplate:ServiceTemplate": {
                "encryptionKey": "encryption_key",
                "executionEnvironment": "execution_environment",
                "maxInstanceRequestConcurrency": "max_instance_request_concurrency",
                "serviceAccount": "service_account",
                "sessionAffinity": "session_affinity",
                "vpcAccess": "vpc_access"
            },
            "gcp:cloudrunv2/ServiceTemplateContainer:ServiceTemplateContainer": {
                "commands": "command",
                "dependsOns": "depends_on",
                "envs": "env",
                "livenessProbe": "liveness_probe",
                "startupProbe": "startup_probe",
                "volumeMounts": "volume_mounts",
                "workingDir": "working_dir"
            },
            "gcp:cloudrunv2/ServiceTemplateContainerEnv:ServiceTemplateContainerEnv": {
                "valueSource": "value_source"
            },
            "gcp:cloudrunv2/ServiceTemplateContainerEnvValueSource:ServiceTemplateContainerEnvValueSource": {
                "secretKeyRef": "secret_key_ref"
            },
            "gcp:cloudrunv2/ServiceTemplateContainerLivenessProbe:ServiceTemplateContainerLivenessProbe": {
                "failureThreshold": "failure_threshold",
                "httpGet": "http_get",
                "initialDelaySeconds": "initial_delay_seconds",
                "periodSeconds": "period_seconds",
                "tcpSocket": "tcp_socket",
                "timeoutSeconds": "timeout_seconds"
            },
            "gcp:cloudrunv2/ServiceTemplateContainerLivenessProbeHttpGet:ServiceTemplateContainerLivenessProbeHttpGet": {
                "httpHeaders": "http_headers"
            },
            "gcp:cloudrunv2/ServiceTemplateContainerPort:ServiceTemplateContainerPort": {
                "containerPort": "container_port"
            },
            "gcp:cloudrunv2/ServiceTemplateContainerResources:ServiceTemplateContainerResources": {
                "cpuIdle": "cpu_idle",
                "startupCpuBoost": "startup_cpu_boost"
            },
            "gcp:cloudrunv2/ServiceTemplateContainerStartupProbe:ServiceTemplateContainerStartupProbe": {
                "failureThreshold": "failure_threshold",
                "httpGet": "http_get",
                "initialDelaySeconds": "initial_delay_seconds",
                "periodSeconds": "period_seconds",
                "tcpSocket": "tcp_socket",
                "timeoutSeconds": "timeout_seconds"
            },
            "gcp:cloudrunv2/ServiceTemplateContainerStartupProbeHttpGet:ServiceTemplateContainerStartupProbeHttpGet": {
                "httpHeaders": "http_headers"
            },
            "gcp:cloudrunv2/ServiceTemplateContainerVolumeMount:ServiceTemplateContainerVolumeMount": {
                "mountPath": "mount_path"
            },
            "gcp:cloudrunv2/ServiceTemplateScaling:ServiceTemplateScaling": {
                "maxInstanceCount": "max_instance_count",
                "minInstanceCount": "min_instance_count"
            },
            "gcp:cloudrunv2/ServiceTemplateVolume:ServiceTemplateVolume": {
                "cloudSqlInstance": "cloud_sql_instance",
                "emptyDir": "empty_dir"
            },
            "gcp:cloudrunv2/ServiceTemplateVolumeEmptyDir:ServiceTemplateVolumeEmptyDir": {
                "sizeLimit": "size_limit"
            },
            "gcp:cloudrunv2/ServiceTemplateVolumeSecret:ServiceTemplateVolumeSecret": {
                "defaultMode": "default_mode"
            },
            "gcp:cloudrunv2/ServiceTerminalCondition:ServiceTerminalCondition": {
                "executionReason": "execution_reason",
                "lastTransitionTime": "last_transition_time",
                "revisionReason": "revision_reason"
            },
            "gcp:cloudrunv2/getJobIamPolicy:getJobIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:cloudrunv2/getServiceIamPolicy:getServiceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:cloudrunv2/job:Job": {
                "binaryAuthorization": "binary_authorization",
                "clientVersion": "client_version",
                "executionCount": "execution_count",
                "latestCreatedExecutions": "latest_created_execution",
                "launchStage": "launch_stage",
                "observedGeneration": "observed_generation",
                "terminalConditions": "terminal_condition"
            },
            "gcp:cloudrunv2/jobIamPolicy:JobIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:cloudrunv2/service:Service": {
                "binaryAuthorization": "binary_authorization",
                "clientVersion": "client_version",
                "customAudiences": "custom_audiences",
                "latestCreatedRevision": "latest_created_revision",
                "latestReadyRevision": "latest_ready_revision",
                "launchStage": "launch_stage",
                "observedGeneration": "observed_generation",
                "terminalConditions": "terminal_condition",
                "trafficStatuses": "traffic_statuses",
                "traffics": "traffic"
            },
            "gcp:cloudrunv2/serviceIamPolicy:ServiceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:cloudscheduler/JobAppEngineHttpTarget:JobAppEngineHttpTarget": {
                "appEngineRouting": "app_engine_routing",
                "httpMethod": "http_method",
                "relativeUri": "relative_uri"
            },
            "gcp:cloudscheduler/JobHttpTarget:JobHttpTarget": {
                "httpMethod": "http_method",
                "oauthToken": "oauth_token",
                "oidcToken": "oidc_token"
            },
            "gcp:cloudscheduler/JobHttpTargetOauthToken:JobHttpTargetOauthToken": {
                "serviceAccountEmail": "service_account_email"
            },
            "gcp:cloudscheduler/JobHttpTargetOidcToken:JobHttpTargetOidcToken": {
                "serviceAccountEmail": "service_account_email"
            },
            "gcp:cloudscheduler/JobPubsubTarget:JobPubsubTarget": {
                "topicName": "topic_name"
            },
            "gcp:cloudscheduler/JobRetryConfig:JobRetryConfig": {
                "maxBackoffDuration": "max_backoff_duration",
                "maxDoublings": "max_doublings",
                "maxRetryDuration": "max_retry_duration",
                "minBackoffDuration": "min_backoff_duration",
                "retryCount": "retry_count"
            },
            "gcp:cloudscheduler/job:Job": {
                "appEngineHttpTarget": "app_engine_http_target",
                "attemptDeadline": "attempt_deadline",
                "httpTarget": "http_target",
                "pubsubTarget": "pubsub_target",
                "retryConfig": "retry_config",
                "timeZone": "time_zone"
            },
            "gcp:cloudtasks/QueueRateLimits:QueueRateLimits": {
                "maxBurstSize": "max_burst_size",
                "maxConcurrentDispatches": "max_concurrent_dispatches",
                "maxDispatchesPerSecond": "max_dispatches_per_second"
            },
            "gcp:cloudtasks/QueueRetryConfig:QueueRetryConfig": {
                "maxAttempts": "max_attempts",
                "maxBackoff": "max_backoff",
                "maxDoublings": "max_doublings",
                "maxRetryDuration": "max_retry_duration",
                "minBackoff": "min_backoff"
            },
            "gcp:cloudtasks/QueueStackdriverLoggingConfig:QueueStackdriverLoggingConfig": {
                "samplingRatio": "sampling_ratio"
            },
            "gcp:cloudtasks/getQueueIamPolicy:getQueueIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:cloudtasks/queue:Queue": {
                "appEngineRoutingOverride": "app_engine_routing_override",
                "rateLimits": "rate_limits",
                "retryConfig": "retry_config",
                "stackdriverLoggingConfig": "stackdriver_logging_config"
            },
            "gcp:cloudtasks/queueIamPolicy:QueueIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:composer/EnvironmentConfig:EnvironmentConfig": {
                "airflowUri": "airflow_uri",
                "dagGcsPrefix": "dag_gcs_prefix",
                "databaseConfig": "database_config",
                "encryptionConfig": "encryption_config",
                "environmentSize": "environment_size",
                "gkeCluster": "gke_cluster",
                "maintenanceWindow": "maintenance_window",
                "masterAuthorizedNetworksConfig": "master_authorized_networks_config",
                "nodeConfig": "node_config",
                "nodeCount": "node_count",
                "privateEnvironmentConfig": "private_environment_config",
                "recoveryConfig": "recovery_config",
                "resilienceMode": "resilience_mode",
                "softwareConfig": "software_config",
                "webServerConfig": "web_server_config",
                "webServerNetworkAccessControl": "web_server_network_access_control",
                "workloadsConfig": "workloads_config"
            },
            "gcp:composer/EnvironmentConfigDatabaseConfig:EnvironmentConfigDatabaseConfig": {
                "machineType": "machine_type"
            },
            "gcp:composer/EnvironmentConfigEncryptionConfig:EnvironmentConfigEncryptionConfig": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:composer/EnvironmentConfigMaintenanceWindow:EnvironmentConfigMaintenanceWindow": {
                "endTime": "end_time",
                "startTime": "start_time"
            },
            "gcp:composer/EnvironmentConfigMasterAuthorizedNetworksConfig:EnvironmentConfigMasterAuthorizedNetworksConfig": {
                "cidrBlocks": "cidr_blocks"
            },
            "gcp:composer/EnvironmentConfigMasterAuthorizedNetworksConfigCidrBlock:EnvironmentConfigMasterAuthorizedNetworksConfigCidrBlock": {
                "cidrBlock": "cidr_block",
                "displayName": "display_name"
            },
            "gcp:composer/EnvironmentConfigNodeConfig:EnvironmentConfigNodeConfig": {
                "diskSizeGb": "disk_size_gb",
                "enableIpMasqAgent": "enable_ip_masq_agent",
                "ipAllocationPolicy": "ip_allocation_policy",
                "machineType": "machine_type",
                "maxPodsPerNode": "max_pods_per_node",
                "oauthScopes": "oauth_scopes",
                "serviceAccount": "service_account"
            },
            "gcp:composer/EnvironmentConfigNodeConfigIpAllocationPolicy:EnvironmentConfigNodeConfigIpAllocationPolicy": {
                "clusterIpv4CidrBlock": "cluster_ipv4_cidr_block",
                "clusterSecondaryRangeName": "cluster_secondary_range_name",
                "servicesIpv4CidrBlock": "services_ipv4_cidr_block",
                "servicesSecondaryRangeName": "services_secondary_range_name",
                "useIpAliases": "use_ip_aliases"
            },
            "gcp:composer/EnvironmentConfigPrivateEnvironmentConfig:EnvironmentConfigPrivateEnvironmentConfig": {
                "cloudComposerConnectionSubnetwork": "cloud_composer_connection_subnetwork",
                "cloudComposerNetworkIpv4CidrBlock": "cloud_composer_network_ipv4_cidr_block",
                "cloudSqlIpv4CidrBlock": "cloud_sql_ipv4_cidr_block",
                "enablePrivateEndpoint": "enable_private_endpoint",
                "enablePrivatelyUsedPublicIps": "enable_privately_used_public_ips",
                "masterIpv4CidrBlock": "master_ipv4_cidr_block",
                "webServerIpv4CidrBlock": "web_server_ipv4_cidr_block"
            },
            "gcp:composer/EnvironmentConfigRecoveryConfig:EnvironmentConfigRecoveryConfig": {
                "scheduledSnapshotsConfig": "scheduled_snapshots_config"
            },
            "gcp:composer/EnvironmentConfigRecoveryConfigScheduledSnapshotsConfig:EnvironmentConfigRecoveryConfigScheduledSnapshotsConfig": {
                "snapshotCreationSchedule": "snapshot_creation_schedule",
                "snapshotLocation": "snapshot_location",
                "timeZone": "time_zone"
            },
            "gcp:composer/EnvironmentConfigSoftwareConfig:EnvironmentConfigSoftwareConfig": {
                "airflowConfigOverrides": "airflow_config_overrides",
                "cloudDataLineageIntegration": "cloud_data_lineage_integration",
                "envVariables": "env_variables",
                "imageVersion": "image_version",
                "pypiPackages": "pypi_packages",
                "pythonVersion": "python_version",
                "schedulerCount": "scheduler_count"
            },
            "gcp:composer/EnvironmentConfigWebServerConfig:EnvironmentConfigWebServerConfig": {
                "machineType": "machine_type"
            },
            "gcp:composer/EnvironmentConfigWebServerNetworkAccessControl:EnvironmentConfigWebServerNetworkAccessControl": {
                "allowedIpRanges": "allowed_ip_range"
            },
            "gcp:composer/EnvironmentConfigWorkloadsConfig:EnvironmentConfigWorkloadsConfig": {
                "webServer": "web_server"
            },
            "gcp:composer/EnvironmentConfigWorkloadsConfigScheduler:EnvironmentConfigWorkloadsConfigScheduler": {
                "memoryGb": "memory_gb",
                "storageGb": "storage_gb"
            },
            "gcp:composer/EnvironmentConfigWorkloadsConfigTriggerer:EnvironmentConfigWorkloadsConfigTriggerer": {
                "memoryGb": "memory_gb"
            },
            "gcp:composer/EnvironmentConfigWorkloadsConfigWebServer:EnvironmentConfigWorkloadsConfigWebServer": {
                "memoryGb": "memory_gb",
                "storageGb": "storage_gb"
            },
            "gcp:composer/EnvironmentConfigWorkloadsConfigWorker:EnvironmentConfigWorkloadsConfigWorker": {
                "maxCount": "max_count",
                "memoryGb": "memory_gb",
                "minCount": "min_count",
                "storageGb": "storage_gb"
            },
            "gcp:composer/getEnvironment:getEnvironment": {
                "configs": "config"
            },
            "gcp:composer/getEnvironmentConfig:getEnvironmentConfig": {
                "airflowUri": "airflow_uri",
                "dagGcsPrefix": "dag_gcs_prefix",
                "databaseConfigs": "database_config",
                "encryptionConfigs": "encryption_config",
                "environmentSize": "environment_size",
                "gkeCluster": "gke_cluster",
                "maintenanceWindows": "maintenance_window",
                "masterAuthorizedNetworksConfigs": "master_authorized_networks_config",
                "nodeConfigs": "node_config",
                "nodeCount": "node_count",
                "privateEnvironmentConfigs": "private_environment_config",
                "recoveryConfigs": "recovery_config",
                "resilienceMode": "resilience_mode",
                "softwareConfigs": "software_config",
                "webServerConfigs": "web_server_config",
                "webServerNetworkAccessControls": "web_server_network_access_control",
                "workloadsConfigs": "workloads_config"
            },
            "gcp:composer/getEnvironmentConfigDatabaseConfig:getEnvironmentConfigDatabaseConfig": {
                "machineType": "machine_type"
            },
            "gcp:composer/getEnvironmentConfigEncryptionConfig:getEnvironmentConfigEncryptionConfig": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:composer/getEnvironmentConfigMaintenanceWindow:getEnvironmentConfigMaintenanceWindow": {
                "endTime": "end_time",
                "startTime": "start_time"
            },
            "gcp:composer/getEnvironmentConfigMasterAuthorizedNetworksConfig:getEnvironmentConfigMasterAuthorizedNetworksConfig": {
                "cidrBlocks": "cidr_blocks"
            },
            "gcp:composer/getEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlock:getEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlock": {
                "cidrBlock": "cidr_block",
                "displayName": "display_name"
            },
            "gcp:composer/getEnvironmentConfigNodeConfig:getEnvironmentConfigNodeConfig": {
                "diskSizeGb": "disk_size_gb",
                "enableIpMasqAgent": "enable_ip_masq_agent",
                "ipAllocationPolicies": "ip_allocation_policy",
                "machineType": "machine_type",
                "maxPodsPerNode": "max_pods_per_node",
                "oauthScopes": "oauth_scopes",
                "serviceAccount": "service_account"
            },
            "gcp:composer/getEnvironmentConfigNodeConfigIpAllocationPolicy:getEnvironmentConfigNodeConfigIpAllocationPolicy": {
                "clusterIpv4CidrBlock": "cluster_ipv4_cidr_block",
                "clusterSecondaryRangeName": "cluster_secondary_range_name",
                "servicesIpv4CidrBlock": "services_ipv4_cidr_block",
                "servicesSecondaryRangeName": "services_secondary_range_name",
                "useIpAliases": "use_ip_aliases"
            },
            "gcp:composer/getEnvironmentConfigPrivateEnvironmentConfig:getEnvironmentConfigPrivateEnvironmentConfig": {
                "cloudComposerConnectionSubnetwork": "cloud_composer_connection_subnetwork",
                "cloudComposerNetworkIpv4CidrBlock": "cloud_composer_network_ipv4_cidr_block",
                "cloudSqlIpv4CidrBlock": "cloud_sql_ipv4_cidr_block",
                "enablePrivateEndpoint": "enable_private_endpoint",
                "enablePrivatelyUsedPublicIps": "enable_privately_used_public_ips",
                "masterIpv4CidrBlock": "master_ipv4_cidr_block",
                "webServerIpv4CidrBlock": "web_server_ipv4_cidr_block"
            },
            "gcp:composer/getEnvironmentConfigRecoveryConfig:getEnvironmentConfigRecoveryConfig": {
                "scheduledSnapshotsConfigs": "scheduled_snapshots_config"
            },
            "gcp:composer/getEnvironmentConfigRecoveryConfigScheduledSnapshotsConfig:getEnvironmentConfigRecoveryConfigScheduledSnapshotsConfig": {
                "snapshotCreationSchedule": "snapshot_creation_schedule",
                "snapshotLocation": "snapshot_location",
                "timeZone": "time_zone"
            },
            "gcp:composer/getEnvironmentConfigSoftwareConfig:getEnvironmentConfigSoftwareConfig": {
                "airflowConfigOverrides": "airflow_config_overrides",
                "cloudDataLineageIntegrations": "cloud_data_lineage_integration",
                "envVariables": "env_variables",
                "imageVersion": "image_version",
                "pypiPackages": "pypi_packages",
                "pythonVersion": "python_version",
                "schedulerCount": "scheduler_count"
            },
            "gcp:composer/getEnvironmentConfigWebServerConfig:getEnvironmentConfigWebServerConfig": {
                "machineType": "machine_type"
            },
            "gcp:composer/getEnvironmentConfigWebServerNetworkAccessControl:getEnvironmentConfigWebServerNetworkAccessControl": {
                "allowedIpRanges": "allowed_ip_range"
            },
            "gcp:composer/getEnvironmentConfigWorkloadsConfig:getEnvironmentConfigWorkloadsConfig": {
                "schedulers": "scheduler",
                "triggerers": "triggerer",
                "webServers": "web_server",
                "workers": "worker"
            },
            "gcp:composer/getEnvironmentConfigWorkloadsConfigScheduler:getEnvironmentConfigWorkloadsConfigScheduler": {
                "memoryGb": "memory_gb",
                "storageGb": "storage_gb"
            },
            "gcp:composer/getEnvironmentConfigWorkloadsConfigTriggerer:getEnvironmentConfigWorkloadsConfigTriggerer": {
                "memoryGb": "memory_gb"
            },
            "gcp:composer/getEnvironmentConfigWorkloadsConfigWebServer:getEnvironmentConfigWorkloadsConfigWebServer": {
                "memoryGb": "memory_gb",
                "storageGb": "storage_gb"
            },
            "gcp:composer/getEnvironmentConfigWorkloadsConfigWorker:getEnvironmentConfigWorkloadsConfigWorker": {
                "maxCount": "max_count",
                "memoryGb": "memory_gb",
                "minCount": "min_count",
                "storageGb": "storage_gb"
            },
            "gcp:composer/getImageVersions:getImageVersions": {
                "imageVersions": "image_versions"
            },
            "gcp:composer/getImageVersionsImageVersion:getImageVersionsImageVersion": {
                "imageVersionId": "image_version_id",
                "supportedPythonVersions": "supported_python_versions"
            },
            "gcp:compute/AutoscalarAutoscalingPolicy:AutoscalarAutoscalingPolicy": {
                "cooldownPeriod": "cooldown_period",
                "cpuUtilization": "cpu_utilization",
                "loadBalancingUtilization": "load_balancing_utilization",
                "maxReplicas": "max_replicas",
                "metrics": "metric",
                "minReplicas": "min_replicas",
                "scaleDownControl": "scale_down_control",
                "scaleInControl": "scale_in_control",
                "scalingSchedules": "scaling_schedules"
            },
            "gcp:compute/AutoscalarAutoscalingPolicyCpuUtilization:AutoscalarAutoscalingPolicyCpuUtilization": {
                "predictiveMethod": "predictive_method"
            },
            "gcp:compute/AutoscalarAutoscalingPolicyMetric:AutoscalarAutoscalingPolicyMetric": {
                "singleInstanceAssignment": "single_instance_assignment"
            },
            "gcp:compute/AutoscalarAutoscalingPolicyScaleDownControl:AutoscalarAutoscalingPolicyScaleDownControl": {
                "maxScaledDownReplicas": "max_scaled_down_replicas",
                "timeWindowSec": "time_window_sec"
            },
            "gcp:compute/AutoscalarAutoscalingPolicyScaleInControl:AutoscalarAutoscalingPolicyScaleInControl": {
                "maxScaledInReplicas": "max_scaled_in_replicas",
                "timeWindowSec": "time_window_sec"
            },
            "gcp:compute/AutoscalarAutoscalingPolicyScalingSchedule:AutoscalarAutoscalingPolicyScalingSchedule": {
                "durationSec": "duration_sec",
                "minRequiredReplicas": "min_required_replicas",
                "timeZone": "time_zone"
            },
            "gcp:compute/AutoscalerAutoscalingPolicy:AutoscalerAutoscalingPolicy": {
                "cooldownPeriod": "cooldown_period",
                "cpuUtilization": "cpu_utilization",
                "loadBalancingUtilization": "load_balancing_utilization",
                "maxReplicas": "max_replicas",
                "metrics": "metric",
                "minReplicas": "min_replicas",
                "scaleDownControl": "scale_down_control",
                "scaleInControl": "scale_in_control",
                "scalingSchedules": "scaling_schedules"
            },
            "gcp:compute/AutoscalerAutoscalingPolicyCpuUtilization:AutoscalerAutoscalingPolicyCpuUtilization": {
                "predictiveMethod": "predictive_method"
            },
            "gcp:compute/AutoscalerAutoscalingPolicyMetric:AutoscalerAutoscalingPolicyMetric": {
                "singleInstanceAssignment": "single_instance_assignment"
            },
            "gcp:compute/AutoscalerAutoscalingPolicyScaleDownControl:AutoscalerAutoscalingPolicyScaleDownControl": {
                "maxScaledDownReplicas": "max_scaled_down_replicas",
                "timeWindowSec": "time_window_sec"
            },
            "gcp:compute/AutoscalerAutoscalingPolicyScaleInControl:AutoscalerAutoscalingPolicyScaleInControl": {
                "maxScaledInReplicas": "max_scaled_in_replicas",
                "timeWindowSec": "time_window_sec"
            },
            "gcp:compute/AutoscalerAutoscalingPolicyScalingSchedule:AutoscalerAutoscalingPolicyScalingSchedule": {
                "durationSec": "duration_sec",
                "minRequiredReplicas": "min_required_replicas",
                "timeZone": "time_zone"
            },
            "gcp:compute/BackendBucketCdnPolicy:BackendBucketCdnPolicy": {
                "bypassCacheOnRequestHeaders": "bypass_cache_on_request_headers",
                "cacheKeyPolicy": "cache_key_policy",
                "cacheMode": "cache_mode",
                "clientTtl": "client_ttl",
                "defaultTtl": "default_ttl",
                "maxTtl": "max_ttl",
                "negativeCaching": "negative_caching",
                "negativeCachingPolicies": "negative_caching_policy",
                "requestCoalescing": "request_coalescing",
                "serveWhileStale": "serve_while_stale",
                "signedUrlCacheMaxAgeSec": "signed_url_cache_max_age_sec"
            },
            "gcp:compute/BackendBucketCdnPolicyBypassCacheOnRequestHeader:BackendBucketCdnPolicyBypassCacheOnRequestHeader": {
                "headerName": "header_name"
            },
            "gcp:compute/BackendBucketCdnPolicyCacheKeyPolicy:BackendBucketCdnPolicyCacheKeyPolicy": {
                "includeHttpHeaders": "include_http_headers",
                "queryStringWhitelists": "query_string_whitelist"
            },
            "gcp:compute/BackendServiceBackend:BackendServiceBackend": {
                "balancingMode": "balancing_mode",
                "capacityScaler": "capacity_scaler",
                "maxConnections": "max_connections",
                "maxConnectionsPerEndpoint": "max_connections_per_endpoint",
                "maxConnectionsPerInstance": "max_connections_per_instance",
                "maxRate": "max_rate",
                "maxRatePerEndpoint": "max_rate_per_endpoint",
                "maxRatePerInstance": "max_rate_per_instance",
                "maxUtilization": "max_utilization"
            },
            "gcp:compute/BackendServiceCdnPolicy:BackendServiceCdnPolicy": {
                "bypassCacheOnRequestHeaders": "bypass_cache_on_request_headers",
                "cacheKeyPolicy": "cache_key_policy",
                "cacheMode": "cache_mode",
                "clientTtl": "client_ttl",
                "defaultTtl": "default_ttl",
                "maxTtl": "max_ttl",
                "negativeCaching": "negative_caching",
                "negativeCachingPolicies": "negative_caching_policy",
                "serveWhileStale": "serve_while_stale",
                "signedUrlCacheMaxAgeSec": "signed_url_cache_max_age_sec"
            },
            "gcp:compute/BackendServiceCdnPolicyBypassCacheOnRequestHeader:BackendServiceCdnPolicyBypassCacheOnRequestHeader": {
                "headerName": "header_name"
            },
            "gcp:compute/BackendServiceCdnPolicyCacheKeyPolicy:BackendServiceCdnPolicyCacheKeyPolicy": {
                "includeHost": "include_host",
                "includeHttpHeaders": "include_http_headers",
                "includeNamedCookies": "include_named_cookies",
                "includeProtocol": "include_protocol",
                "includeQueryString": "include_query_string",
                "queryStringBlacklists": "query_string_blacklist",
                "queryStringWhitelists": "query_string_whitelist"
            },
            "gcp:compute/BackendServiceCircuitBreakers:BackendServiceCircuitBreakers": {
                "connectTimeout": "connect_timeout",
                "maxConnections": "max_connections",
                "maxPendingRequests": "max_pending_requests",
                "maxRequests": "max_requests",
                "maxRequestsPerConnection": "max_requests_per_connection",
                "maxRetries": "max_retries"
            },
            "gcp:compute/BackendServiceConsistentHash:BackendServiceConsistentHash": {
                "httpCookie": "http_cookie",
                "httpHeaderName": "http_header_name",
                "minimumRingSize": "minimum_ring_size"
            },
            "gcp:compute/BackendServiceIap:BackendServiceIap": {
                "oauth2ClientId": "oauth2_client_id",
                "oauth2ClientSecret": "oauth2_client_secret",
                "oauth2ClientSecretSha256": "oauth2_client_secret_sha256"
            },
            "gcp:compute/BackendServiceLocalityLbPolicy:BackendServiceLocalityLbPolicy": {
                "customPolicy": "custom_policy"
            },
            "gcp:compute/BackendServiceLogConfig:BackendServiceLogConfig": {
                "sampleRate": "sample_rate"
            },
            "gcp:compute/BackendServiceOutlierDetection:BackendServiceOutlierDetection": {
                "baseEjectionTime": "base_ejection_time",
                "consecutiveErrors": "consecutive_errors",
                "consecutiveGatewayFailure": "consecutive_gateway_failure",
                "enforcingConsecutiveErrors": "enforcing_consecutive_errors",
                "enforcingConsecutiveGatewayFailure": "enforcing_consecutive_gateway_failure",
                "enforcingSuccessRate": "enforcing_success_rate",
                "maxEjectionPercent": "max_ejection_percent",
                "successRateMinimumHosts": "success_rate_minimum_hosts",
                "successRateRequestVolume": "success_rate_request_volume",
                "successRateStdevFactor": "success_rate_stdev_factor"
            },
            "gcp:compute/BackendServiceSecuritySettings:BackendServiceSecuritySettings": {
                "clientTlsPolicy": "client_tls_policy",
                "subjectAltNames": "subject_alt_names"
            },
            "gcp:compute/DiskDiskEncryptionKey:DiskDiskEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account",
                "rawKey": "raw_key",
                "rsaEncryptedKey": "rsa_encrypted_key"
            },
            "gcp:compute/DiskSourceImageEncryptionKey:DiskSourceImageEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account",
                "rawKey": "raw_key"
            },
            "gcp:compute/DiskSourceSnapshotEncryptionKey:DiskSourceSnapshotEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account",
                "rawKey": "raw_key"
            },
            "gcp:compute/ExternalVpnGatewayInterface:ExternalVpnGatewayInterface": {
                "ipAddress": "ip_address"
            },
            "gcp:compute/FirewallPolicyRuleMatch:FirewallPolicyRuleMatch": {
                "destAddressGroups": "dest_address_groups",
                "destFqdns": "dest_fqdns",
                "destIpRanges": "dest_ip_ranges",
                "destRegionCodes": "dest_region_codes",
                "destThreatIntelligences": "dest_threat_intelligences",
                "layer4Configs": "layer4_configs",
                "srcAddressGroups": "src_address_groups",
                "srcFqdns": "src_fqdns",
                "srcIpRanges": "src_ip_ranges",
                "srcRegionCodes": "src_region_codes",
                "srcThreatIntelligences": "src_threat_intelligences"
            },
            "gcp:compute/FirewallPolicyRuleMatchLayer4Config:FirewallPolicyRuleMatchLayer4Config": {
                "ipProtocol": "ip_protocol"
            },
            "gcp:compute/GlobalForwardingRuleMetadataFilter:GlobalForwardingRuleMetadataFilter": {
                "filterLabels": "filter_labels",
                "filterMatchCriteria": "filter_match_criteria"
            },
            "gcp:compute/HaVpnGatewayVpnInterface:HaVpnGatewayVpnInterface": {
                "interconnectAttachment": "interconnect_attachment",
                "ipAddress": "ip_address"
            },
            "gcp:compute/HealthCheckGrpcHealthCheck:HealthCheckGrpcHealthCheck": {
                "grpcServiceName": "grpc_service_name",
                "portName": "port_name",
                "portSpecification": "port_specification"
            },
            "gcp:compute/HealthCheckHttp2HealthCheck:HealthCheckHttp2HealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header",
                "requestPath": "request_path"
            },
            "gcp:compute/HealthCheckHttpHealthCheck:HealthCheckHttpHealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header",
                "requestPath": "request_path"
            },
            "gcp:compute/HealthCheckHttpsHealthCheck:HealthCheckHttpsHealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header",
                "requestPath": "request_path"
            },
            "gcp:compute/HealthCheckSslHealthCheck:HealthCheckSslHealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header"
            },
            "gcp:compute/HealthCheckTcpHealthCheck:HealthCheckTcpHealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header"
            },
            "gcp:compute/ImageImageEncryptionKey:ImageImageEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account"
            },
            "gcp:compute/ImageRawDisk:ImageRawDisk": {
                "containerType": "container_type"
            },
            "gcp:compute/InstanceAdvancedMachineFeatures:InstanceAdvancedMachineFeatures": {
                "enableNestedVirtualization": "enable_nested_virtualization",
                "threadsPerCore": "threads_per_core",
                "visibleCoreCount": "visible_core_count"
            },
            "gcp:compute/InstanceAttachedDisk:InstanceAttachedDisk": {
                "deviceName": "device_name",
                "diskEncryptionKeyRaw": "disk_encryption_key_raw",
                "diskEncryptionKeySha256": "disk_encryption_key_sha256",
                "kmsKeySelfLink": "kms_key_self_link"
            },
            "gcp:compute/InstanceBootDisk:InstanceBootDisk": {
                "autoDelete": "auto_delete",
                "deviceName": "device_name",
                "diskEncryptionKeyRaw": "disk_encryption_key_raw",
                "diskEncryptionKeySha256": "disk_encryption_key_sha256",
                "initializeParams": "initialize_params",
                "kmsKeySelfLink": "kms_key_self_link"
            },
            "gcp:compute/InstanceBootDiskInitializeParams:InstanceBootDiskInitializeParams": {
                "resourceManagerTags": "resource_manager_tags"
            },
            "gcp:compute/InstanceConfidentialInstanceConfig:InstanceConfidentialInstanceConfig": {
                "enableConfidentialCompute": "enable_confidential_compute"
            },
            "gcp:compute/InstanceFromMachineImageAdvancedMachineFeatures:InstanceFromMachineImageAdvancedMachineFeatures": {
                "enableNestedVirtualization": "enable_nested_virtualization",
                "threadsPerCore": "threads_per_core",
                "visibleCoreCount": "visible_core_count"
            },
            "gcp:compute/InstanceFromMachineImageAttachedDisk:InstanceFromMachineImageAttachedDisk": {
                "deviceName": "device_name",
                "diskEncryptionKeyRaw": "disk_encryption_key_raw",
                "diskEncryptionKeySha256": "disk_encryption_key_sha256",
                "kmsKeySelfLink": "kms_key_self_link"
            },
            "gcp:compute/InstanceFromMachineImageBootDisk:InstanceFromMachineImageBootDisk": {
                "autoDelete": "auto_delete",
                "deviceName": "device_name",
                "diskEncryptionKeyRaw": "disk_encryption_key_raw",
                "diskEncryptionKeySha256": "disk_encryption_key_sha256",
                "initializeParams": "initialize_params",
                "kmsKeySelfLink": "kms_key_self_link"
            },
            "gcp:compute/InstanceFromMachineImageBootDiskInitializeParams:InstanceFromMachineImageBootDiskInitializeParams": {
                "resourceManagerTags": "resource_manager_tags"
            },
            "gcp:compute/InstanceFromMachineImageConfidentialInstanceConfig:InstanceFromMachineImageConfidentialInstanceConfig": {
                "enableConfidentialCompute": "enable_confidential_compute"
            },
            "gcp:compute/InstanceFromMachineImageNetworkInterface:InstanceFromMachineImageNetworkInterface": {
                "accessConfigs": "access_config",
                "aliasIpRanges": "alias_ip_range",
                "ipv6AccessConfigs": "ipv6_access_config",
                "ipv6AccessType": "ipv6_access_type",
                "networkIp": "network_ip",
                "nicType": "nic_type",
                "queueCount": "queue_count",
                "stackType": "stack_type",
                "subnetworkProject": "subnetwork_project"
            },
            "gcp:compute/InstanceFromMachineImageNetworkInterfaceAccessConfig:InstanceFromMachineImageNetworkInterfaceAccessConfig": {
                "natIp": "nat_ip",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/InstanceFromMachineImageNetworkInterfaceAliasIpRange:InstanceFromMachineImageNetworkInterfaceAliasIpRange": {
                "ipCidrRange": "ip_cidr_range",
                "subnetworkRangeName": "subnetwork_range_name"
            },
            "gcp:compute/InstanceFromMachineImageNetworkInterfaceIpv6AccessConfig:InstanceFromMachineImageNetworkInterfaceIpv6AccessConfig": {
                "externalIpv6": "external_ipv6",
                "externalIpv6PrefixLength": "external_ipv6_prefix_length",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/InstanceFromMachineImageNetworkPerformanceConfig:InstanceFromMachineImageNetworkPerformanceConfig": {
                "totalEgressBandwidthTier": "total_egress_bandwidth_tier"
            },
            "gcp:compute/InstanceFromMachineImageParams:InstanceFromMachineImageParams": {
                "resourceManagerTags": "resource_manager_tags"
            },
            "gcp:compute/InstanceFromMachineImageReservationAffinity:InstanceFromMachineImageReservationAffinity": {
                "specificReservation": "specific_reservation"
            },
            "gcp:compute/InstanceFromMachineImageScheduling:InstanceFromMachineImageScheduling": {
                "automaticRestart": "automatic_restart",
                "instanceTerminationAction": "instance_termination_action",
                "maintenanceInterval": "maintenance_interval",
                "maxRunDuration": "max_run_duration",
                "minNodeCpus": "min_node_cpus",
                "nodeAffinities": "node_affinities",
                "onHostMaintenance": "on_host_maintenance",
                "provisioningModel": "provisioning_model"
            },
            "gcp:compute/InstanceFromMachineImageShieldedInstanceConfig:InstanceFromMachineImageShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:compute/InstanceFromTemplateAdvancedMachineFeatures:InstanceFromTemplateAdvancedMachineFeatures": {
                "enableNestedVirtualization": "enable_nested_virtualization",
                "threadsPerCore": "threads_per_core",
                "visibleCoreCount": "visible_core_count"
            },
            "gcp:compute/InstanceFromTemplateAttachedDisk:InstanceFromTemplateAttachedDisk": {
                "deviceName": "device_name",
                "diskEncryptionKeyRaw": "disk_encryption_key_raw",
                "diskEncryptionKeySha256": "disk_encryption_key_sha256",
                "kmsKeySelfLink": "kms_key_self_link"
            },
            "gcp:compute/InstanceFromTemplateBootDisk:InstanceFromTemplateBootDisk": {
                "autoDelete": "auto_delete",
                "deviceName": "device_name",
                "diskEncryptionKeyRaw": "disk_encryption_key_raw",
                "diskEncryptionKeySha256": "disk_encryption_key_sha256",
                "initializeParams": "initialize_params",
                "kmsKeySelfLink": "kms_key_self_link"
            },
            "gcp:compute/InstanceFromTemplateBootDiskInitializeParams:InstanceFromTemplateBootDiskInitializeParams": {
                "resourceManagerTags": "resource_manager_tags"
            },
            "gcp:compute/InstanceFromTemplateConfidentialInstanceConfig:InstanceFromTemplateConfidentialInstanceConfig": {
                "enableConfidentialCompute": "enable_confidential_compute"
            },
            "gcp:compute/InstanceFromTemplateNetworkInterface:InstanceFromTemplateNetworkInterface": {
                "accessConfigs": "access_config",
                "aliasIpRanges": "alias_ip_range",
                "ipv6AccessConfigs": "ipv6_access_config",
                "ipv6AccessType": "ipv6_access_type",
                "networkIp": "network_ip",
                "nicType": "nic_type",
                "queueCount": "queue_count",
                "stackType": "stack_type",
                "subnetworkProject": "subnetwork_project"
            },
            "gcp:compute/InstanceFromTemplateNetworkInterfaceAccessConfig:InstanceFromTemplateNetworkInterfaceAccessConfig": {
                "natIp": "nat_ip",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/InstanceFromTemplateNetworkInterfaceAliasIpRange:InstanceFromTemplateNetworkInterfaceAliasIpRange": {
                "ipCidrRange": "ip_cidr_range",
                "subnetworkRangeName": "subnetwork_range_name"
            },
            "gcp:compute/InstanceFromTemplateNetworkInterfaceIpv6AccessConfig:InstanceFromTemplateNetworkInterfaceIpv6AccessConfig": {
                "externalIpv6": "external_ipv6",
                "externalIpv6PrefixLength": "external_ipv6_prefix_length",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/InstanceFromTemplateNetworkPerformanceConfig:InstanceFromTemplateNetworkPerformanceConfig": {
                "totalEgressBandwidthTier": "total_egress_bandwidth_tier"
            },
            "gcp:compute/InstanceFromTemplateParams:InstanceFromTemplateParams": {
                "resourceManagerTags": "resource_manager_tags"
            },
            "gcp:compute/InstanceFromTemplateReservationAffinity:InstanceFromTemplateReservationAffinity": {
                "specificReservation": "specific_reservation"
            },
            "gcp:compute/InstanceFromTemplateScheduling:InstanceFromTemplateScheduling": {
                "automaticRestart": "automatic_restart",
                "instanceTerminationAction": "instance_termination_action",
                "maintenanceInterval": "maintenance_interval",
                "maxRunDuration": "max_run_duration",
                "minNodeCpus": "min_node_cpus",
                "nodeAffinities": "node_affinities",
                "onHostMaintenance": "on_host_maintenance",
                "provisioningModel": "provisioning_model"
            },
            "gcp:compute/InstanceFromTemplateShieldedInstanceConfig:InstanceFromTemplateShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:compute/InstanceGroupManagerAutoHealingPolicies:InstanceGroupManagerAutoHealingPolicies": {
                "healthCheck": "health_check",
                "initialDelaySec": "initial_delay_sec"
            },
            "gcp:compute/InstanceGroupManagerInstanceLifecyclePolicy:InstanceGroupManagerInstanceLifecyclePolicy": {
                "forceUpdateOnRepair": "force_update_on_repair"
            },
            "gcp:compute/InstanceGroupManagerStatefulDisk:InstanceGroupManagerStatefulDisk": {
                "deleteRule": "delete_rule",
                "deviceName": "device_name"
            },
            "gcp:compute/InstanceGroupManagerStatefulExternalIp:InstanceGroupManagerStatefulExternalIp": {
                "deleteRule": "delete_rule",
                "interfaceName": "interface_name"
            },
            "gcp:compute/InstanceGroupManagerStatefulInternalIp:InstanceGroupManagerStatefulInternalIp": {
                "deleteRule": "delete_rule",
                "interfaceName": "interface_name"
            },
            "gcp:compute/InstanceGroupManagerStatus:InstanceGroupManagerStatus": {
                "allInstancesConfigs": "all_instances_config",
                "isStable": "is_stable",
                "statefuls": "stateful",
                "versionTargets": "version_target"
            },
            "gcp:compute/InstanceGroupManagerStatusStateful:InstanceGroupManagerStatusStateful": {
                "hasStatefulConfig": "has_stateful_config",
                "perInstanceConfigs": "per_instance_configs"
            },
            "gcp:compute/InstanceGroupManagerStatusStatefulPerInstanceConfig:InstanceGroupManagerStatusStatefulPerInstanceConfig": {
                "allEffective": "all_effective"
            },
            "gcp:compute/InstanceGroupManagerStatusVersionTarget:InstanceGroupManagerStatusVersionTarget": {
                "isReached": "is_reached"
            },
            "gcp:compute/InstanceGroupManagerUpdatePolicy:InstanceGroupManagerUpdatePolicy": {
                "maxSurgeFixed": "max_surge_fixed",
                "maxSurgePercent": "max_surge_percent",
                "maxUnavailableFixed": "max_unavailable_fixed",
                "maxUnavailablePercent": "max_unavailable_percent",
                "minReadySec": "min_ready_sec",
                "minimalAction": "minimal_action",
                "mostDisruptiveAllowedAction": "most_disruptive_allowed_action",
                "replacementMethod": "replacement_method"
            },
            "gcp:compute/InstanceGroupManagerVersion:InstanceGroupManagerVersion": {
                "instanceTemplate": "instance_template",
                "targetSize": "target_size"
            },
            "gcp:compute/InstanceNetworkInterface:InstanceNetworkInterface": {
                "accessConfigs": "access_config",
                "aliasIpRanges": "alias_ip_range",
                "ipv6AccessConfigs": "ipv6_access_config",
                "ipv6AccessType": "ipv6_access_type",
                "networkIp": "network_ip",
                "nicType": "nic_type",
                "queueCount": "queue_count",
                "stackType": "stack_type",
                "subnetworkProject": "subnetwork_project"
            },
            "gcp:compute/InstanceNetworkInterfaceAccessConfig:InstanceNetworkInterfaceAccessConfig": {
                "natIp": "nat_ip",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/InstanceNetworkInterfaceAliasIpRange:InstanceNetworkInterfaceAliasIpRange": {
                "ipCidrRange": "ip_cidr_range",
                "subnetworkRangeName": "subnetwork_range_name"
            },
            "gcp:compute/InstanceNetworkInterfaceIpv6AccessConfig:InstanceNetworkInterfaceIpv6AccessConfig": {
                "externalIpv6": "external_ipv6",
                "externalIpv6PrefixLength": "external_ipv6_prefix_length",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/InstanceNetworkPerformanceConfig:InstanceNetworkPerformanceConfig": {
                "totalEgressBandwidthTier": "total_egress_bandwidth_tier"
            },
            "gcp:compute/InstanceParams:InstanceParams": {
                "resourceManagerTags": "resource_manager_tags"
            },
            "gcp:compute/InstanceReservationAffinity:InstanceReservationAffinity": {
                "specificReservation": "specific_reservation"
            },
            "gcp:compute/InstanceScheduling:InstanceScheduling": {
                "automaticRestart": "automatic_restart",
                "instanceTerminationAction": "instance_termination_action",
                "maintenanceInterval": "maintenance_interval",
                "maxRunDuration": "max_run_duration",
                "minNodeCpus": "min_node_cpus",
                "nodeAffinities": "node_affinities",
                "onHostMaintenance": "on_host_maintenance",
                "provisioningModel": "provisioning_model"
            },
            "gcp:compute/InstanceShieldedInstanceConfig:InstanceShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:compute/InstanceTemplateAdvancedMachineFeatures:InstanceTemplateAdvancedMachineFeatures": {
                "enableNestedVirtualization": "enable_nested_virtualization",
                "threadsPerCore": "threads_per_core",
                "visibleCoreCount": "visible_core_count"
            },
            "gcp:compute/InstanceTemplateConfidentialInstanceConfig:InstanceTemplateConfidentialInstanceConfig": {
                "enableConfidentialCompute": "enable_confidential_compute"
            },
            "gcp:compute/InstanceTemplateDisk:InstanceTemplateDisk": {
                "autoDelete": "auto_delete",
                "deviceName": "device_name",
                "diskEncryptionKey": "disk_encryption_key",
                "diskName": "disk_name",
                "diskSizeGb": "disk_size_gb",
                "diskType": "disk_type",
                "resourcePolicies": "resource_policies",
                "sourceImage": "source_image",
                "sourceImageEncryptionKey": "source_image_encryption_key",
                "sourceSnapshot": "source_snapshot",
                "sourceSnapshotEncryptionKey": "source_snapshot_encryption_key"
            },
            "gcp:compute/InstanceTemplateDiskDiskEncryptionKey:InstanceTemplateDiskDiskEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link"
            },
            "gcp:compute/InstanceTemplateDiskSourceImageEncryptionKey:InstanceTemplateDiskSourceImageEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account"
            },
            "gcp:compute/InstanceTemplateDiskSourceSnapshotEncryptionKey:InstanceTemplateDiskSourceSnapshotEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account"
            },
            "gcp:compute/InstanceTemplateNetworkInterface:InstanceTemplateNetworkInterface": {
                "accessConfigs": "access_config",
                "aliasIpRanges": "alias_ip_range",
                "ipv6AccessConfigs": "ipv6_access_config",
                "ipv6AccessType": "ipv6_access_type",
                "networkAttachment": "network_attachment",
                "networkIp": "network_ip",
                "nicType": "nic_type",
                "queueCount": "queue_count",
                "stackType": "stack_type",
                "subnetworkProject": "subnetwork_project"
            },
            "gcp:compute/InstanceTemplateNetworkInterfaceAccessConfig:InstanceTemplateNetworkInterfaceAccessConfig": {
                "natIp": "nat_ip",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/InstanceTemplateNetworkInterfaceAliasIpRange:InstanceTemplateNetworkInterfaceAliasIpRange": {
                "ipCidrRange": "ip_cidr_range",
                "subnetworkRangeName": "subnetwork_range_name"
            },
            "gcp:compute/InstanceTemplateNetworkInterfaceIpv6AccessConfig:InstanceTemplateNetworkInterfaceIpv6AccessConfig": {
                "externalIpv6": "external_ipv6",
                "externalIpv6PrefixLength": "external_ipv6_prefix_length",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/InstanceTemplateNetworkPerformanceConfig:InstanceTemplateNetworkPerformanceConfig": {
                "totalEgressBandwidthTier": "total_egress_bandwidth_tier"
            },
            "gcp:compute/InstanceTemplateReservationAffinity:InstanceTemplateReservationAffinity": {
                "specificReservation": "specific_reservation"
            },
            "gcp:compute/InstanceTemplateScheduling:InstanceTemplateScheduling": {
                "automaticRestart": "automatic_restart",
                "instanceTerminationAction": "instance_termination_action",
                "maintenanceInterval": "maintenance_interval",
                "maxRunDuration": "max_run_duration",
                "minNodeCpus": "min_node_cpus",
                "nodeAffinities": "node_affinities",
                "onHostMaintenance": "on_host_maintenance",
                "provisioningModel": "provisioning_model"
            },
            "gcp:compute/InstanceTemplateShieldedInstanceConfig:InstanceTemplateShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:compute/MachineImageMachineImageEncryptionKey:MachineImageMachineImageEncryptionKey": {
                "kmsKeyName": "kms_key_name",
                "kmsKeyServiceAccount": "kms_key_service_account",
                "rawKey": "raw_key"
            },
            "gcp:compute/NetworkEndpointListNetworkEndpoint:NetworkEndpointListNetworkEndpoint": {
                "ipAddress": "ip_address"
            },
            "gcp:compute/NetworkFirewallPolicyRuleMatch:NetworkFirewallPolicyRuleMatch": {
                "destAddressGroups": "dest_address_groups",
                "destFqdns": "dest_fqdns",
                "destIpRanges": "dest_ip_ranges",
                "destRegionCodes": "dest_region_codes",
                "destThreatIntelligences": "dest_threat_intelligences",
                "layer4Configs": "layer4_configs",
                "srcAddressGroups": "src_address_groups",
                "srcFqdns": "src_fqdns",
                "srcIpRanges": "src_ip_ranges",
                "srcRegionCodes": "src_region_codes",
                "srcSecureTags": "src_secure_tags",
                "srcThreatIntelligences": "src_threat_intelligences"
            },
            "gcp:compute/NetworkFirewallPolicyRuleMatchLayer4Config:NetworkFirewallPolicyRuleMatchLayer4Config": {
                "ipProtocol": "ip_protocol"
            },
            "gcp:compute/NodeGroupAutoscalingPolicy:NodeGroupAutoscalingPolicy": {
                "maxNodes": "max_nodes",
                "minNodes": "min_nodes"
            },
            "gcp:compute/NodeGroupMaintenanceWindow:NodeGroupMaintenanceWindow": {
                "startTime": "start_time"
            },
            "gcp:compute/NodeGroupShareSettings:NodeGroupShareSettings": {
                "projectMaps": "project_map",
                "shareType": "share_type"
            },
            "gcp:compute/NodeGroupShareSettingsProjectMap:NodeGroupShareSettingsProjectMap": {
                "projectId": "project_id"
            },
            "gcp:compute/NodeTemplateNodeTypeFlexibility:NodeTemplateNodeTypeFlexibility": {
                "localSsd": "local_ssd"
            },
            "gcp:compute/OrganizationSecurityPolicyRuleMatch:OrganizationSecurityPolicyRuleMatch": {
                "versionedExpr": "versioned_expr"
            },
            "gcp:compute/OrganizationSecurityPolicyRuleMatchConfig:OrganizationSecurityPolicyRuleMatchConfig": {
                "destIpRanges": "dest_ip_ranges",
                "layer4Configs": "layer4_config",
                "srcIpRanges": "src_ip_ranges"
            },
            "gcp:compute/OrganizationSecurityPolicyRuleMatchConfigLayer4Config:OrganizationSecurityPolicyRuleMatchConfigLayer4Config": {
                "ipProtocol": "ip_protocol"
            },
            "gcp:compute/PacketMirroringFilter:PacketMirroringFilter": {
                "cidrRanges": "cidr_ranges",
                "ipProtocols": "ip_protocols"
            },
            "gcp:compute/PerInstanceConfigPreservedState:PerInstanceConfigPreservedState": {
                "disks": "disk",
                "externalIps": "external_ip",
                "internalIps": "internal_ip"
            },
            "gcp:compute/PerInstanceConfigPreservedStateDisk:PerInstanceConfigPreservedStateDisk": {
                "deleteRule": "delete_rule",
                "deviceName": "device_name"
            },
            "gcp:compute/PerInstanceConfigPreservedStateExternalIp:PerInstanceConfigPreservedStateExternalIp": {
                "autoDelete": "auto_delete",
                "interfaceName": "interface_name",
                "ipAddress": "ip_address"
            },
            "gcp:compute/PerInstanceConfigPreservedStateInternalIp:PerInstanceConfigPreservedStateInternalIp": {
                "autoDelete": "auto_delete",
                "interfaceName": "interface_name",
                "ipAddress": "ip_address"
            },
            "gcp:compute/RegionAutoscalerAutoscalingPolicy:RegionAutoscalerAutoscalingPolicy": {
                "cooldownPeriod": "cooldown_period",
                "cpuUtilization": "cpu_utilization",
                "loadBalancingUtilization": "load_balancing_utilization",
                "maxReplicas": "max_replicas",
                "metrics": "metric",
                "minReplicas": "min_replicas",
                "scaleDownControl": "scale_down_control",
                "scaleInControl": "scale_in_control",
                "scalingSchedules": "scaling_schedules"
            },
            "gcp:compute/RegionAutoscalerAutoscalingPolicyCpuUtilization:RegionAutoscalerAutoscalingPolicyCpuUtilization": {
                "predictiveMethod": "predictive_method"
            },
            "gcp:compute/RegionAutoscalerAutoscalingPolicyMetric:RegionAutoscalerAutoscalingPolicyMetric": {
                "singleInstanceAssignment": "single_instance_assignment"
            },
            "gcp:compute/RegionAutoscalerAutoscalingPolicyScaleDownControl:RegionAutoscalerAutoscalingPolicyScaleDownControl": {
                "maxScaledDownReplicas": "max_scaled_down_replicas",
                "timeWindowSec": "time_window_sec"
            },
            "gcp:compute/RegionAutoscalerAutoscalingPolicyScaleInControl:RegionAutoscalerAutoscalingPolicyScaleInControl": {
                "maxScaledInReplicas": "max_scaled_in_replicas",
                "timeWindowSec": "time_window_sec"
            },
            "gcp:compute/RegionAutoscalerAutoscalingPolicyScalingSchedule:RegionAutoscalerAutoscalingPolicyScalingSchedule": {
                "durationSec": "duration_sec",
                "minRequiredReplicas": "min_required_replicas",
                "timeZone": "time_zone"
            },
            "gcp:compute/RegionBackendServiceBackend:RegionBackendServiceBackend": {
                "balancingMode": "balancing_mode",
                "capacityScaler": "capacity_scaler",
                "maxConnections": "max_connections",
                "maxConnectionsPerEndpoint": "max_connections_per_endpoint",
                "maxConnectionsPerInstance": "max_connections_per_instance",
                "maxRate": "max_rate",
                "maxRatePerEndpoint": "max_rate_per_endpoint",
                "maxRatePerInstance": "max_rate_per_instance",
                "maxUtilization": "max_utilization"
            },
            "gcp:compute/RegionBackendServiceCdnPolicy:RegionBackendServiceCdnPolicy": {
                "cacheKeyPolicy": "cache_key_policy",
                "cacheMode": "cache_mode",
                "clientTtl": "client_ttl",
                "defaultTtl": "default_ttl",
                "maxTtl": "max_ttl",
                "negativeCaching": "negative_caching",
                "negativeCachingPolicies": "negative_caching_policy",
                "serveWhileStale": "serve_while_stale",
                "signedUrlCacheMaxAgeSec": "signed_url_cache_max_age_sec"
            },
            "gcp:compute/RegionBackendServiceCdnPolicyCacheKeyPolicy:RegionBackendServiceCdnPolicyCacheKeyPolicy": {
                "includeHost": "include_host",
                "includeNamedCookies": "include_named_cookies",
                "includeProtocol": "include_protocol",
                "includeQueryString": "include_query_string",
                "queryStringBlacklists": "query_string_blacklist",
                "queryStringWhitelists": "query_string_whitelist"
            },
            "gcp:compute/RegionBackendServiceCircuitBreakers:RegionBackendServiceCircuitBreakers": {
                "connectTimeout": "connect_timeout",
                "maxConnections": "max_connections",
                "maxPendingRequests": "max_pending_requests",
                "maxRequests": "max_requests",
                "maxRequestsPerConnection": "max_requests_per_connection",
                "maxRetries": "max_retries"
            },
            "gcp:compute/RegionBackendServiceConnectionTrackingPolicy:RegionBackendServiceConnectionTrackingPolicy": {
                "connectionPersistenceOnUnhealthyBackends": "connection_persistence_on_unhealthy_backends",
                "idleTimeoutSec": "idle_timeout_sec",
                "trackingMode": "tracking_mode"
            },
            "gcp:compute/RegionBackendServiceConsistentHash:RegionBackendServiceConsistentHash": {
                "httpCookie": "http_cookie",
                "httpHeaderName": "http_header_name",
                "minimumRingSize": "minimum_ring_size"
            },
            "gcp:compute/RegionBackendServiceFailoverPolicy:RegionBackendServiceFailoverPolicy": {
                "disableConnectionDrainOnFailover": "disable_connection_drain_on_failover",
                "dropTrafficIfUnhealthy": "drop_traffic_if_unhealthy",
                "failoverRatio": "failover_ratio"
            },
            "gcp:compute/RegionBackendServiceIap:RegionBackendServiceIap": {
                "oauth2ClientId": "oauth2_client_id",
                "oauth2ClientSecret": "oauth2_client_secret",
                "oauth2ClientSecretSha256": "oauth2_client_secret_sha256"
            },
            "gcp:compute/RegionBackendServiceLogConfig:RegionBackendServiceLogConfig": {
                "sampleRate": "sample_rate"
            },
            "gcp:compute/RegionBackendServiceOutlierDetection:RegionBackendServiceOutlierDetection": {
                "baseEjectionTime": "base_ejection_time",
                "consecutiveErrors": "consecutive_errors",
                "consecutiveGatewayFailure": "consecutive_gateway_failure",
                "enforcingConsecutiveErrors": "enforcing_consecutive_errors",
                "enforcingConsecutiveGatewayFailure": "enforcing_consecutive_gateway_failure",
                "enforcingSuccessRate": "enforcing_success_rate",
                "maxEjectionPercent": "max_ejection_percent",
                "successRateMinimumHosts": "success_rate_minimum_hosts",
                "successRateRequestVolume": "success_rate_request_volume",
                "successRateStdevFactor": "success_rate_stdev_factor"
            },
            "gcp:compute/RegionCommitmentLicenseResource:RegionCommitmentLicenseResource": {
                "coresPerLicense": "cores_per_license"
            },
            "gcp:compute/RegionCommitmentResource:RegionCommitmentResource": {
                "acceleratorType": "accelerator_type"
            },
            "gcp:compute/RegionDiskDiskEncryptionKey:RegionDiskDiskEncryptionKey": {
                "kmsKeyName": "kms_key_name",
                "rawKey": "raw_key"
            },
            "gcp:compute/RegionDiskSourceSnapshotEncryptionKey:RegionDiskSourceSnapshotEncryptionKey": {
                "kmsKeyName": "kms_key_name",
                "rawKey": "raw_key"
            },
            "gcp:compute/RegionHealthCheckGrpcHealthCheck:RegionHealthCheckGrpcHealthCheck": {
                "grpcServiceName": "grpc_service_name",
                "portName": "port_name",
                "portSpecification": "port_specification"
            },
            "gcp:compute/RegionHealthCheckHttp2HealthCheck:RegionHealthCheckHttp2HealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header",
                "requestPath": "request_path"
            },
            "gcp:compute/RegionHealthCheckHttpHealthCheck:RegionHealthCheckHttpHealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header",
                "requestPath": "request_path"
            },
            "gcp:compute/RegionHealthCheckHttpsHealthCheck:RegionHealthCheckHttpsHealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header",
                "requestPath": "request_path"
            },
            "gcp:compute/RegionHealthCheckSslHealthCheck:RegionHealthCheckSslHealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header"
            },
            "gcp:compute/RegionHealthCheckTcpHealthCheck:RegionHealthCheckTcpHealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header"
            },
            "gcp:compute/RegionInstanceGroupManagerAutoHealingPolicies:RegionInstanceGroupManagerAutoHealingPolicies": {
                "healthCheck": "health_check",
                "initialDelaySec": "initial_delay_sec"
            },
            "gcp:compute/RegionInstanceGroupManagerInstanceLifecyclePolicy:RegionInstanceGroupManagerInstanceLifecyclePolicy": {
                "forceUpdateOnRepair": "force_update_on_repair"
            },
            "gcp:compute/RegionInstanceGroupManagerStatefulDisk:RegionInstanceGroupManagerStatefulDisk": {
                "deleteRule": "delete_rule",
                "deviceName": "device_name"
            },
            "gcp:compute/RegionInstanceGroupManagerStatefulExternalIp:RegionInstanceGroupManagerStatefulExternalIp": {
                "deleteRule": "delete_rule",
                "interfaceName": "interface_name"
            },
            "gcp:compute/RegionInstanceGroupManagerStatefulInternalIp:RegionInstanceGroupManagerStatefulInternalIp": {
                "deleteRule": "delete_rule",
                "interfaceName": "interface_name"
            },
            "gcp:compute/RegionInstanceGroupManagerStatus:RegionInstanceGroupManagerStatus": {
                "allInstancesConfigs": "all_instances_config",
                "isStable": "is_stable",
                "statefuls": "stateful",
                "versionTargets": "version_target"
            },
            "gcp:compute/RegionInstanceGroupManagerStatusStateful:RegionInstanceGroupManagerStatusStateful": {
                "hasStatefulConfig": "has_stateful_config",
                "perInstanceConfigs": "per_instance_configs"
            },
            "gcp:compute/RegionInstanceGroupManagerStatusStatefulPerInstanceConfig:RegionInstanceGroupManagerStatusStatefulPerInstanceConfig": {
                "allEffective": "all_effective"
            },
            "gcp:compute/RegionInstanceGroupManagerStatusVersionTarget:RegionInstanceGroupManagerStatusVersionTarget": {
                "isReached": "is_reached"
            },
            "gcp:compute/RegionInstanceGroupManagerUpdatePolicy:RegionInstanceGroupManagerUpdatePolicy": {
                "instanceRedistributionType": "instance_redistribution_type",
                "maxSurgeFixed": "max_surge_fixed",
                "maxSurgePercent": "max_surge_percent",
                "maxUnavailableFixed": "max_unavailable_fixed",
                "maxUnavailablePercent": "max_unavailable_percent",
                "minReadySec": "min_ready_sec",
                "minimalAction": "minimal_action",
                "mostDisruptiveAllowedAction": "most_disruptive_allowed_action",
                "replacementMethod": "replacement_method"
            },
            "gcp:compute/RegionInstanceGroupManagerVersion:RegionInstanceGroupManagerVersion": {
                "instanceTemplate": "instance_template",
                "targetSize": "target_size"
            },
            "gcp:compute/RegionInstanceTemplateAdvancedMachineFeatures:RegionInstanceTemplateAdvancedMachineFeatures": {
                "enableNestedVirtualization": "enable_nested_virtualization",
                "threadsPerCore": "threads_per_core",
                "visibleCoreCount": "visible_core_count"
            },
            "gcp:compute/RegionInstanceTemplateConfidentialInstanceConfig:RegionInstanceTemplateConfidentialInstanceConfig": {
                "enableConfidentialCompute": "enable_confidential_compute"
            },
            "gcp:compute/RegionInstanceTemplateDisk:RegionInstanceTemplateDisk": {
                "autoDelete": "auto_delete",
                "deviceName": "device_name",
                "diskEncryptionKey": "disk_encryption_key",
                "diskName": "disk_name",
                "diskSizeGb": "disk_size_gb",
                "diskType": "disk_type",
                "resourcePolicies": "resource_policies",
                "sourceImage": "source_image",
                "sourceImageEncryptionKey": "source_image_encryption_key",
                "sourceSnapshot": "source_snapshot",
                "sourceSnapshotEncryptionKey": "source_snapshot_encryption_key"
            },
            "gcp:compute/RegionInstanceTemplateDiskDiskEncryptionKey:RegionInstanceTemplateDiskDiskEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link"
            },
            "gcp:compute/RegionInstanceTemplateDiskSourceImageEncryptionKey:RegionInstanceTemplateDiskSourceImageEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account"
            },
            "gcp:compute/RegionInstanceTemplateDiskSourceSnapshotEncryptionKey:RegionInstanceTemplateDiskSourceSnapshotEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account"
            },
            "gcp:compute/RegionInstanceTemplateNetworkInterface:RegionInstanceTemplateNetworkInterface": {
                "accessConfigs": "access_config",
                "aliasIpRanges": "alias_ip_range",
                "ipv6AccessConfigs": "ipv6_access_config",
                "ipv6AccessType": "ipv6_access_type",
                "networkIp": "network_ip",
                "nicType": "nic_type",
                "queueCount": "queue_count",
                "stackType": "stack_type",
                "subnetworkProject": "subnetwork_project"
            },
            "gcp:compute/RegionInstanceTemplateNetworkInterfaceAccessConfig:RegionInstanceTemplateNetworkInterfaceAccessConfig": {
                "natIp": "nat_ip",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/RegionInstanceTemplateNetworkInterfaceAliasIpRange:RegionInstanceTemplateNetworkInterfaceAliasIpRange": {
                "ipCidrRange": "ip_cidr_range",
                "subnetworkRangeName": "subnetwork_range_name"
            },
            "gcp:compute/RegionInstanceTemplateNetworkInterfaceIpv6AccessConfig:RegionInstanceTemplateNetworkInterfaceIpv6AccessConfig": {
                "externalIpv6": "external_ipv6",
                "externalIpv6PrefixLength": "external_ipv6_prefix_length",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/RegionInstanceTemplateNetworkPerformanceConfig:RegionInstanceTemplateNetworkPerformanceConfig": {
                "totalEgressBandwidthTier": "total_egress_bandwidth_tier"
            },
            "gcp:compute/RegionInstanceTemplateReservationAffinity:RegionInstanceTemplateReservationAffinity": {
                "specificReservation": "specific_reservation"
            },
            "gcp:compute/RegionInstanceTemplateScheduling:RegionInstanceTemplateScheduling": {
                "automaticRestart": "automatic_restart",
                "instanceTerminationAction": "instance_termination_action",
                "maintenanceInterval": "maintenance_interval",
                "maxRunDuration": "max_run_duration",
                "minNodeCpus": "min_node_cpus",
                "nodeAffinities": "node_affinities",
                "onHostMaintenance": "on_host_maintenance",
                "provisioningModel": "provisioning_model"
            },
            "gcp:compute/RegionInstanceTemplateShieldedInstanceConfig:RegionInstanceTemplateShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:compute/RegionNetworkEndpointGroupAppEngine:RegionNetworkEndpointGroupAppEngine": {
                "urlMask": "url_mask"
            },
            "gcp:compute/RegionNetworkEndpointGroupCloudFunction:RegionNetworkEndpointGroupCloudFunction": {
                "urlMask": "url_mask"
            },
            "gcp:compute/RegionNetworkEndpointGroupCloudRun:RegionNetworkEndpointGroupCloudRun": {
                "urlMask": "url_mask"
            },
            "gcp:compute/RegionNetworkEndpointGroupServerlessDeployment:RegionNetworkEndpointGroupServerlessDeployment": {
                "urlMask": "url_mask"
            },
            "gcp:compute/RegionNetworkFirewallPolicyRuleMatch:RegionNetworkFirewallPolicyRuleMatch": {
                "destAddressGroups": "dest_address_groups",
                "destFqdns": "dest_fqdns",
                "destIpRanges": "dest_ip_ranges",
                "destRegionCodes": "dest_region_codes",
                "destThreatIntelligences": "dest_threat_intelligences",
                "layer4Configs": "layer4_configs",
                "srcAddressGroups": "src_address_groups",
                "srcFqdns": "src_fqdns",
                "srcIpRanges": "src_ip_ranges",
                "srcRegionCodes": "src_region_codes",
                "srcSecureTags": "src_secure_tags",
                "srcThreatIntelligences": "src_threat_intelligences"
            },
            "gcp:compute/RegionNetworkFirewallPolicyRuleMatchLayer4Config:RegionNetworkFirewallPolicyRuleMatchLayer4Config": {
                "ipProtocol": "ip_protocol"
            },
            "gcp:compute/RegionPerInstanceConfigPreservedState:RegionPerInstanceConfigPreservedState": {
                "disks": "disk",
                "externalIps": "external_ip",
                "internalIps": "internal_ip"
            },
            "gcp:compute/RegionPerInstanceConfigPreservedStateDisk:RegionPerInstanceConfigPreservedStateDisk": {
                "deleteRule": "delete_rule",
                "deviceName": "device_name"
            },
            "gcp:compute/RegionPerInstanceConfigPreservedStateExternalIp:RegionPerInstanceConfigPreservedStateExternalIp": {
                "autoDelete": "auto_delete",
                "interfaceName": "interface_name",
                "ipAddress": "ip_address"
            },
            "gcp:compute/RegionPerInstanceConfigPreservedStateInternalIp:RegionPerInstanceConfigPreservedStateInternalIp": {
                "autoDelete": "auto_delete",
                "interfaceName": "interface_name",
                "ipAddress": "ip_address"
            },
            "gcp:compute/RegionSecurityPolicyDdosProtectionConfig:RegionSecurityPolicyDdosProtectionConfig": {
                "ddosProtection": "ddos_protection"
            },
            "gcp:compute/RegionUrlMapDefaultRouteAction:RegionUrlMapDefaultRouteAction": {
                "corsPolicy": "cors_policy",
                "faultInjectionPolicy": "fault_injection_policy",
                "requestMirrorPolicy": "request_mirror_policy",
                "retryPolicy": "retry_policy",
                "urlRewrite": "url_rewrite",
                "weightedBackendServices": "weighted_backend_services"
            },
            "gcp:compute/RegionUrlMapDefaultRouteActionCorsPolicy:RegionUrlMapDefaultRouteActionCorsPolicy": {
                "allowCredentials": "allow_credentials",
                "allowHeaders": "allow_headers",
                "allowMethods": "allow_methods",
                "allowOriginRegexes": "allow_origin_regexes",
                "allowOrigins": "allow_origins",
                "exposeHeaders": "expose_headers",
                "maxAge": "max_age"
            },
            "gcp:compute/RegionUrlMapDefaultRouteActionFaultInjectionPolicyAbort:RegionUrlMapDefaultRouteActionFaultInjectionPolicyAbort": {
                "httpStatus": "http_status"
            },
            "gcp:compute/RegionUrlMapDefaultRouteActionFaultInjectionPolicyDelay:RegionUrlMapDefaultRouteActionFaultInjectionPolicyDelay": {
                "fixedDelay": "fixed_delay"
            },
            "gcp:compute/RegionUrlMapDefaultRouteActionRequestMirrorPolicy:RegionUrlMapDefaultRouteActionRequestMirrorPolicy": {
                "backendService": "backend_service"
            },
            "gcp:compute/RegionUrlMapDefaultRouteActionRetryPolicy:RegionUrlMapDefaultRouteActionRetryPolicy": {
                "numRetries": "num_retries",
                "perTryTimeout": "per_try_timeout",
                "retryConditions": "retry_conditions"
            },
            "gcp:compute/RegionUrlMapDefaultRouteActionUrlRewrite:RegionUrlMapDefaultRouteActionUrlRewrite": {
                "hostRewrite": "host_rewrite",
                "pathPrefixRewrite": "path_prefix_rewrite"
            },
            "gcp:compute/RegionUrlMapDefaultRouteActionWeightedBackendService:RegionUrlMapDefaultRouteActionWeightedBackendService": {
                "backendService": "backend_service",
                "headerAction": "header_action"
            },
            "gcp:compute/RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderAction:RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_add",
                "requestHeadersToRemoves": "request_headers_to_remove",
                "responseHeadersToAdds": "response_headers_to_add",
                "responseHeadersToRemoves": "response_headers_to_remove"
            },
            "gcp:compute/RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd:RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd:RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/RegionUrlMapDefaultUrlRedirect:RegionUrlMapDefaultUrlRedirect": {
                "hostRedirect": "host_redirect",
                "httpsRedirect": "https_redirect",
                "pathRedirect": "path_redirect",
                "prefixRedirect": "prefix_redirect",
                "redirectResponseCode": "redirect_response_code",
                "stripQuery": "strip_query"
            },
            "gcp:compute/RegionUrlMapHostRule:RegionUrlMapHostRule": {
                "pathMatcher": "path_matcher"
            },
            "gcp:compute/RegionUrlMapPathMatcher:RegionUrlMapPathMatcher": {
                "defaultService": "default_service",
                "defaultUrlRedirect": "default_url_redirect",
                "pathRules": "path_rule",
                "routeRules": "route_rules"
            },
            "gcp:compute/RegionUrlMapPathMatcherDefaultUrlRedirect:RegionUrlMapPathMatcherDefaultUrlRedirect": {
                "hostRedirect": "host_redirect",
                "httpsRedirect": "https_redirect",
                "pathRedirect": "path_redirect",
                "prefixRedirect": "prefix_redirect",
                "redirectResponseCode": "redirect_response_code",
                "stripQuery": "strip_query"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRule:RegionUrlMapPathMatcherPathRule": {
                "routeAction": "route_action",
                "urlRedirect": "url_redirect"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRuleRouteAction:RegionUrlMapPathMatcherPathRuleRouteAction": {
                "corsPolicy": "cors_policy",
                "faultInjectionPolicy": "fault_injection_policy",
                "requestMirrorPolicy": "request_mirror_policy",
                "retryPolicy": "retry_policy",
                "urlRewrite": "url_rewrite",
                "weightedBackendServices": "weighted_backend_services"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy:RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy": {
                "allowCredentials": "allow_credentials",
                "allowHeaders": "allow_headers",
                "allowMethods": "allow_methods",
                "allowOriginRegexes": "allow_origin_regexes",
                "allowOrigins": "allow_origins",
                "exposeHeaders": "expose_headers",
                "maxAge": "max_age"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort:RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort": {
                "httpStatus": "http_status"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay:RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay": {
                "fixedDelay": "fixed_delay"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy:RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy": {
                "backendService": "backend_service"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy:RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy": {
                "numRetries": "num_retries",
                "perTryTimeout": "per_try_timeout",
                "retryConditions": "retry_conditions"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite:RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite": {
                "hostRewrite": "host_rewrite",
                "pathPrefixRewrite": "path_prefix_rewrite"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService:RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService": {
                "backendService": "backend_service",
                "headerAction": "header_action"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction:RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_add",
                "requestHeadersToRemoves": "request_headers_to_remove",
                "responseHeadersToAdds": "response_headers_to_add",
                "responseHeadersToRemoves": "response_headers_to_remove"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd:RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd:RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/RegionUrlMapPathMatcherPathRuleUrlRedirect:RegionUrlMapPathMatcherPathRuleUrlRedirect": {
                "hostRedirect": "host_redirect",
                "httpsRedirect": "https_redirect",
                "pathRedirect": "path_redirect",
                "prefixRedirect": "prefix_redirect",
                "redirectResponseCode": "redirect_response_code",
                "stripQuery": "strip_query"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRule:RegionUrlMapPathMatcherRouteRule": {
                "headerAction": "header_action",
                "matchRules": "match_rules",
                "routeAction": "route_action",
                "urlRedirect": "url_redirect"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleHeaderAction:RegionUrlMapPathMatcherRouteRuleHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_add",
                "requestHeadersToRemoves": "request_headers_to_remove",
                "responseHeadersToAdds": "response_headers_to_add",
                "responseHeadersToRemoves": "response_headers_to_remove"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd:RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd:RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleMatchRule:RegionUrlMapPathMatcherRouteRuleMatchRule": {
                "fullPathMatch": "full_path_match",
                "headerMatches": "header_matches",
                "ignoreCase": "ignore_case",
                "metadataFilters": "metadata_filters",
                "prefixMatch": "prefix_match",
                "queryParameterMatches": "query_parameter_matches",
                "regexMatch": "regex_match"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch:RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch": {
                "exactMatch": "exact_match",
                "headerName": "header_name",
                "invertMatch": "invert_match",
                "prefixMatch": "prefix_match",
                "presentMatch": "present_match",
                "rangeMatch": "range_match",
                "regexMatch": "regex_match",
                "suffixMatch": "suffix_match"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch:RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch": {
                "rangeEnd": "range_end",
                "rangeStart": "range_start"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter:RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter": {
                "filterLabels": "filter_labels",
                "filterMatchCriteria": "filter_match_criteria"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch:RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch": {
                "exactMatch": "exact_match",
                "presentMatch": "present_match",
                "regexMatch": "regex_match"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleRouteAction:RegionUrlMapPathMatcherRouteRuleRouteAction": {
                "corsPolicy": "cors_policy",
                "faultInjectionPolicy": "fault_injection_policy",
                "requestMirrorPolicy": "request_mirror_policy",
                "retryPolicy": "retry_policy",
                "urlRewrite": "url_rewrite",
                "weightedBackendServices": "weighted_backend_services"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy:RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy": {
                "allowCredentials": "allow_credentials",
                "allowHeaders": "allow_headers",
                "allowMethods": "allow_methods",
                "allowOriginRegexes": "allow_origin_regexes",
                "allowOrigins": "allow_origins",
                "exposeHeaders": "expose_headers",
                "maxAge": "max_age"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort:RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort": {
                "httpStatus": "http_status"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay:RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay": {
                "fixedDelay": "fixed_delay"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy:RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy": {
                "backendService": "backend_service"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy:RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy": {
                "numRetries": "num_retries",
                "perTryTimeout": "per_try_timeout",
                "retryConditions": "retry_conditions"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite:RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite": {
                "hostRewrite": "host_rewrite",
                "pathPrefixRewrite": "path_prefix_rewrite"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService:RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService": {
                "backendService": "backend_service",
                "headerAction": "header_action"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction:RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_add",
                "requestHeadersToRemoves": "request_headers_to_remove",
                "responseHeadersToAdds": "response_headers_to_add",
                "responseHeadersToRemoves": "response_headers_to_remove"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd:RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd:RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/RegionUrlMapPathMatcherRouteRuleUrlRedirect:RegionUrlMapPathMatcherRouteRuleUrlRedirect": {
                "hostRedirect": "host_redirect",
                "httpsRedirect": "https_redirect",
                "pathRedirect": "path_redirect",
                "prefixRedirect": "prefix_redirect",
                "redirectResponseCode": "redirect_response_code",
                "stripQuery": "strip_query"
            },
            "gcp:compute/ReservationShareSettings:ReservationShareSettings": {
                "projectMaps": "project_map",
                "shareType": "share_type"
            },
            "gcp:compute/ReservationShareSettingsProjectMap:ReservationShareSettingsProjectMap": {
                "projectId": "project_id"
            },
            "gcp:compute/ReservationSpecificReservation:ReservationSpecificReservation": {
                "inUseCount": "in_use_count",
                "instanceProperties": "instance_properties"
            },
            "gcp:compute/ReservationSpecificReservationInstanceProperties:ReservationSpecificReservationInstanceProperties": {
                "guestAccelerators": "guest_accelerators",
                "localSsds": "local_ssds",
                "machineType": "machine_type",
                "minCpuPlatform": "min_cpu_platform"
            },
            "gcp:compute/ReservationSpecificReservationInstancePropertiesGuestAccelerator:ReservationSpecificReservationInstancePropertiesGuestAccelerator": {
                "acceleratorCount": "accelerator_count",
                "acceleratorType": "accelerator_type"
            },
            "gcp:compute/ReservationSpecificReservationInstancePropertiesLocalSsd:ReservationSpecificReservationInstancePropertiesLocalSsd": {
                "diskSizeGb": "disk_size_gb"
            },
            "gcp:compute/ResourcePolicyGroupPlacementPolicy:ResourcePolicyGroupPlacementPolicy": {
                "availabilityDomainCount": "availability_domain_count",
                "maxDistance": "max_distance",
                "vmCount": "vm_count"
            },
            "gcp:compute/ResourcePolicyInstanceSchedulePolicy:ResourcePolicyInstanceSchedulePolicy": {
                "expirationTime": "expiration_time",
                "startTime": "start_time",
                "timeZone": "time_zone",
                "vmStartSchedule": "vm_start_schedule",
                "vmStopSchedule": "vm_stop_schedule"
            },
            "gcp:compute/ResourcePolicySnapshotSchedulePolicy:ResourcePolicySnapshotSchedulePolicy": {
                "retentionPolicy": "retention_policy",
                "snapshotProperties": "snapshot_properties"
            },
            "gcp:compute/ResourcePolicySnapshotSchedulePolicyRetentionPolicy:ResourcePolicySnapshotSchedulePolicyRetentionPolicy": {
                "maxRetentionDays": "max_retention_days",
                "onSourceDiskDelete": "on_source_disk_delete"
            },
            "gcp:compute/ResourcePolicySnapshotSchedulePolicySchedule:ResourcePolicySnapshotSchedulePolicySchedule": {
                "dailySchedule": "daily_schedule",
                "hourlySchedule": "hourly_schedule",
                "weeklySchedule": "weekly_schedule"
            },
            "gcp:compute/ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule:ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule": {
                "daysInCycle": "days_in_cycle",
                "startTime": "start_time"
            },
            "gcp:compute/ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule:ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule": {
                "hoursInCycle": "hours_in_cycle",
                "startTime": "start_time"
            },
            "gcp:compute/ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule:ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule": {
                "dayOfWeeks": "day_of_weeks"
            },
            "gcp:compute/ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek:ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek": {
                "startTime": "start_time"
            },
            "gcp:compute/ResourcePolicySnapshotSchedulePolicySnapshotProperties:ResourcePolicySnapshotSchedulePolicySnapshotProperties": {
                "chainName": "chain_name",
                "guestFlush": "guest_flush",
                "storageLocations": "storage_locations"
            },
            "gcp:compute/RouterBgp:RouterBgp": {
                "advertiseMode": "advertise_mode",
                "advertisedGroups": "advertised_groups",
                "advertisedIpRanges": "advertised_ip_ranges",
                "keepaliveInterval": "keepalive_interval"
            },
            "gcp:compute/RouterNatRule:RouterNatRule": {
                "ruleNumber": "rule_number"
            },
            "gcp:compute/RouterNatRuleAction:RouterNatRuleAction": {
                "sourceNatActiveIps": "source_nat_active_ips",
                "sourceNatDrainIps": "source_nat_drain_ips"
            },
            "gcp:compute/RouterNatSubnetwork:RouterNatSubnetwork": {
                "secondaryIpRangeNames": "secondary_ip_range_names",
                "sourceIpRangesToNats": "source_ip_ranges_to_nat"
            },
            "gcp:compute/RouterPeerBfd:RouterPeerBfd": {
                "minReceiveInterval": "min_receive_interval",
                "minTransmitInterval": "min_transmit_interval",
                "sessionInitializationMode": "session_initialization_mode"
            },
            "gcp:compute/RouterStatusBestRoute:RouterStatusBestRoute": {
                "destRange": "dest_range",
                "nextHopGateway": "next_hop_gateway",
                "nextHopIlb": "next_hop_ilb",
                "nextHopInstance": "next_hop_instance",
                "nextHopInstanceZone": "next_hop_instance_zone",
                "nextHopIp": "next_hop_ip",
                "nextHopNetwork": "next_hop_network",
                "nextHopVpnTunnel": "next_hop_vpn_tunnel",
                "selfLink": "self_link"
            },
            "gcp:compute/RouterStatusBestRoutesForRouter:RouterStatusBestRoutesForRouter": {
                "destRange": "dest_range",
                "nextHopGateway": "next_hop_gateway",
                "nextHopIlb": "next_hop_ilb",
                "nextHopInstance": "next_hop_instance",
                "nextHopInstanceZone": "next_hop_instance_zone",
                "nextHopIp": "next_hop_ip",
                "nextHopNetwork": "next_hop_network",
                "nextHopVpnTunnel": "next_hop_vpn_tunnel",
                "selfLink": "self_link"
            },
            "gcp:compute/SecurityPolicyAdaptiveProtectionConfig:SecurityPolicyAdaptiveProtectionConfig": {
                "autoDeployConfig": "auto_deploy_config",
                "layer7DdosDefenseConfig": "layer_7_ddos_defense_config"
            },
            "gcp:compute/SecurityPolicyAdaptiveProtectionConfigAutoDeployConfig:SecurityPolicyAdaptiveProtectionConfigAutoDeployConfig": {
                "confidenceThreshold": "confidence_threshold",
                "expirationSec": "expiration_sec",
                "impactedBaselineThreshold": "impacted_baseline_threshold",
                "loadThreshold": "load_threshold"
            },
            "gcp:compute/SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig:SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig": {
                "ruleVisibility": "rule_visibility"
            },
            "gcp:compute/SecurityPolicyAdvancedOptionsConfig:SecurityPolicyAdvancedOptionsConfig": {
                "jsonCustomConfig": "json_custom_config",
                "jsonParsing": "json_parsing",
                "logLevel": "log_level"
            },
            "gcp:compute/SecurityPolicyAdvancedOptionsConfigJsonCustomConfig:SecurityPolicyAdvancedOptionsConfigJsonCustomConfig": {
                "contentTypes": "content_types"
            },
            "gcp:compute/SecurityPolicyRecaptchaOptionsConfig:SecurityPolicyRecaptchaOptionsConfig": {
                "redirectSiteKey": "redirect_site_key"
            },
            "gcp:compute/SecurityPolicyRule:SecurityPolicyRule": {
                "headerAction": "header_action",
                "preconfiguredWafConfig": "preconfigured_waf_config",
                "rateLimitOptions": "rate_limit_options",
                "redirectOptions": "redirect_options"
            },
            "gcp:compute/SecurityPolicyRuleHeaderAction:SecurityPolicyRuleHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_adds"
            },
            "gcp:compute/SecurityPolicyRuleHeaderActionRequestHeadersToAdd:SecurityPolicyRuleHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/SecurityPolicyRuleMatch:SecurityPolicyRuleMatch": {
                "versionedExpr": "versioned_expr"
            },
            "gcp:compute/SecurityPolicyRuleMatchConfig:SecurityPolicyRuleMatchConfig": {
                "srcIpRanges": "src_ip_ranges"
            },
            "gcp:compute/SecurityPolicyRulePreconfiguredWafConfig:SecurityPolicyRulePreconfiguredWafConfig": {
                "exclusions": "exclusion"
            },
            "gcp:compute/SecurityPolicyRulePreconfiguredWafConfigExclusion:SecurityPolicyRulePreconfiguredWafConfigExclusion": {
                "requestCookies": "request_cookie",
                "requestHeaders": "request_header",
                "requestQueryParams": "request_query_param",
                "requestUris": "request_uri",
                "targetRuleIds": "target_rule_ids",
                "targetRuleSet": "target_rule_set"
            },
            "gcp:compute/SecurityPolicyRuleRateLimitOptions:SecurityPolicyRuleRateLimitOptions": {
                "banDurationSec": "ban_duration_sec",
                "banThreshold": "ban_threshold",
                "conformAction": "conform_action",
                "enforceOnKey": "enforce_on_key",
                "enforceOnKeyConfigs": "enforce_on_key_configs",
                "enforceOnKeyName": "enforce_on_key_name",
                "exceedAction": "exceed_action",
                "exceedRedirectOptions": "exceed_redirect_options",
                "rateLimitThreshold": "rate_limit_threshold"
            },
            "gcp:compute/SecurityPolicyRuleRateLimitOptionsBanThreshold:SecurityPolicyRuleRateLimitOptionsBanThreshold": {
                "intervalSec": "interval_sec"
            },
            "gcp:compute/SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig:SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig": {
                "enforceOnKeyName": "enforce_on_key_name",
                "enforceOnKeyType": "enforce_on_key_type"
            },
            "gcp:compute/SecurityPolicyRuleRateLimitOptionsRateLimitThreshold:SecurityPolicyRuleRateLimitOptionsRateLimitThreshold": {
                "intervalSec": "interval_sec"
            },
            "gcp:compute/SecurityScanConfigAuthentication:SecurityScanConfigAuthentication": {
                "customAccount": "custom_account",
                "googleAccount": "google_account"
            },
            "gcp:compute/SecurityScanConfigAuthenticationCustomAccount:SecurityScanConfigAuthenticationCustomAccount": {
                "loginUrl": "login_url"
            },
            "gcp:compute/SecurityScanConfigSchedule:SecurityScanConfigSchedule": {
                "intervalDurationDays": "interval_duration_days",
                "scheduleTime": "schedule_time"
            },
            "gcp:compute/ServiceAttachmentConsumerAcceptList:ServiceAttachmentConsumerAcceptList": {
                "connectionLimit": "connection_limit",
                "projectIdOrNum": "project_id_or_num"
            },
            "gcp:compute/SnapshotSnapshotEncryptionKey:SnapshotSnapshotEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account",
                "rawKey": "raw_key"
            },
            "gcp:compute/SnapshotSourceDiskEncryptionKey:SnapshotSourceDiskEncryptionKey": {
                "kmsKeyServiceAccount": "kms_key_service_account",
                "rawKey": "raw_key"
            },
            "gcp:compute/SubnetworkLogConfig:SubnetworkLogConfig": {
                "aggregationInterval": "aggregation_interval",
                "filterExpr": "filter_expr",
                "flowSampling": "flow_sampling",
                "metadataFields": "metadata_fields"
            },
            "gcp:compute/SubnetworkSecondaryIpRange:SubnetworkSecondaryIpRange": {
                "ipCidrRange": "ip_cidr_range",
                "rangeName": "range_name"
            },
            "gcp:compute/URLMapDefaultRouteAction:URLMapDefaultRouteAction": {
                "corsPolicy": "cors_policy",
                "faultInjectionPolicy": "fault_injection_policy",
                "requestMirrorPolicy": "request_mirror_policy",
                "retryPolicy": "retry_policy",
                "urlRewrite": "url_rewrite",
                "weightedBackendServices": "weighted_backend_services"
            },
            "gcp:compute/URLMapDefaultRouteActionCorsPolicy:URLMapDefaultRouteActionCorsPolicy": {
                "allowCredentials": "allow_credentials",
                "allowHeaders": "allow_headers",
                "allowMethods": "allow_methods",
                "allowOriginRegexes": "allow_origin_regexes",
                "allowOrigins": "allow_origins",
                "exposeHeaders": "expose_headers",
                "maxAge": "max_age"
            },
            "gcp:compute/URLMapDefaultRouteActionFaultInjectionPolicyAbort:URLMapDefaultRouteActionFaultInjectionPolicyAbort": {
                "httpStatus": "http_status"
            },
            "gcp:compute/URLMapDefaultRouteActionFaultInjectionPolicyDelay:URLMapDefaultRouteActionFaultInjectionPolicyDelay": {
                "fixedDelay": "fixed_delay"
            },
            "gcp:compute/URLMapDefaultRouteActionRequestMirrorPolicy:URLMapDefaultRouteActionRequestMirrorPolicy": {
                "backendService": "backend_service"
            },
            "gcp:compute/URLMapDefaultRouteActionRetryPolicy:URLMapDefaultRouteActionRetryPolicy": {
                "numRetries": "num_retries",
                "perTryTimeout": "per_try_timeout",
                "retryConditions": "retry_conditions"
            },
            "gcp:compute/URLMapDefaultRouteActionUrlRewrite:URLMapDefaultRouteActionUrlRewrite": {
                "hostRewrite": "host_rewrite",
                "pathPrefixRewrite": "path_prefix_rewrite"
            },
            "gcp:compute/URLMapDefaultRouteActionWeightedBackendService:URLMapDefaultRouteActionWeightedBackendService": {
                "backendService": "backend_service",
                "headerAction": "header_action"
            },
            "gcp:compute/URLMapDefaultRouteActionWeightedBackendServiceHeaderAction:URLMapDefaultRouteActionWeightedBackendServiceHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_add",
                "requestHeadersToRemoves": "request_headers_to_remove",
                "responseHeadersToAdds": "response_headers_to_add",
                "responseHeadersToRemoves": "response_headers_to_remove"
            },
            "gcp:compute/URLMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd:URLMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd:URLMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapDefaultUrlRedirect:URLMapDefaultUrlRedirect": {
                "hostRedirect": "host_redirect",
                "httpsRedirect": "https_redirect",
                "pathRedirect": "path_redirect",
                "prefixRedirect": "prefix_redirect",
                "redirectResponseCode": "redirect_response_code",
                "stripQuery": "strip_query"
            },
            "gcp:compute/URLMapHeaderAction:URLMapHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_add",
                "requestHeadersToRemoves": "request_headers_to_remove",
                "responseHeadersToAdds": "response_headers_to_add",
                "responseHeadersToRemoves": "response_headers_to_remove"
            },
            "gcp:compute/URLMapHeaderActionRequestHeadersToAdd:URLMapHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapHeaderActionResponseHeadersToAdd:URLMapHeaderActionResponseHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapHostRule:URLMapHostRule": {
                "pathMatcher": "path_matcher"
            },
            "gcp:compute/URLMapPathMatcher:URLMapPathMatcher": {
                "defaultRouteAction": "default_route_action",
                "defaultService": "default_service",
                "defaultUrlRedirect": "default_url_redirect",
                "headerAction": "header_action",
                "pathRules": "path_rule",
                "routeRules": "route_rules"
            },
            "gcp:compute/URLMapPathMatcherDefaultRouteAction:URLMapPathMatcherDefaultRouteAction": {
                "corsPolicy": "cors_policy",
                "faultInjectionPolicy": "fault_injection_policy",
                "requestMirrorPolicy": "request_mirror_policy",
                "retryPolicy": "retry_policy",
                "urlRewrite": "url_rewrite",
                "weightedBackendServices": "weighted_backend_services"
            },
            "gcp:compute/URLMapPathMatcherDefaultRouteActionCorsPolicy:URLMapPathMatcherDefaultRouteActionCorsPolicy": {
                "allowCredentials": "allow_credentials",
                "allowHeaders": "allow_headers",
                "allowMethods": "allow_methods",
                "allowOriginRegexes": "allow_origin_regexes",
                "allowOrigins": "allow_origins",
                "exposeHeaders": "expose_headers",
                "maxAge": "max_age"
            },
            "gcp:compute/URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbort:URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbort": {
                "httpStatus": "http_status"
            },
            "gcp:compute/URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelay:URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelay": {
                "fixedDelay": "fixed_delay"
            },
            "gcp:compute/URLMapPathMatcherDefaultRouteActionRequestMirrorPolicy:URLMapPathMatcherDefaultRouteActionRequestMirrorPolicy": {
                "backendService": "backend_service"
            },
            "gcp:compute/URLMapPathMatcherDefaultRouteActionRetryPolicy:URLMapPathMatcherDefaultRouteActionRetryPolicy": {
                "numRetries": "num_retries",
                "perTryTimeout": "per_try_timeout",
                "retryConditions": "retry_conditions"
            },
            "gcp:compute/URLMapPathMatcherDefaultRouteActionUrlRewrite:URLMapPathMatcherDefaultRouteActionUrlRewrite": {
                "hostRewrite": "host_rewrite",
                "pathPrefixRewrite": "path_prefix_rewrite"
            },
            "gcp:compute/URLMapPathMatcherDefaultRouteActionWeightedBackendService:URLMapPathMatcherDefaultRouteActionWeightedBackendService": {
                "backendService": "backend_service",
                "headerAction": "header_action"
            },
            "gcp:compute/URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderAction:URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_add",
                "requestHeadersToRemoves": "request_headers_to_remove",
                "responseHeadersToAdds": "response_headers_to_add",
                "responseHeadersToRemoves": "response_headers_to_remove"
            },
            "gcp:compute/URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd:URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd:URLMapPathMatcherDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapPathMatcherDefaultUrlRedirect:URLMapPathMatcherDefaultUrlRedirect": {
                "hostRedirect": "host_redirect",
                "httpsRedirect": "https_redirect",
                "pathRedirect": "path_redirect",
                "prefixRedirect": "prefix_redirect",
                "redirectResponseCode": "redirect_response_code",
                "stripQuery": "strip_query"
            },
            "gcp:compute/URLMapPathMatcherHeaderAction:URLMapPathMatcherHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_add",
                "requestHeadersToRemoves": "request_headers_to_remove",
                "responseHeadersToAdds": "response_headers_to_add",
                "responseHeadersToRemoves": "response_headers_to_remove"
            },
            "gcp:compute/URLMapPathMatcherHeaderActionRequestHeadersToAdd:URLMapPathMatcherHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapPathMatcherHeaderActionResponseHeadersToAdd:URLMapPathMatcherHeaderActionResponseHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapPathMatcherPathRule:URLMapPathMatcherPathRule": {
                "routeAction": "route_action",
                "urlRedirect": "url_redirect"
            },
            "gcp:compute/URLMapPathMatcherPathRuleRouteAction:URLMapPathMatcherPathRuleRouteAction": {
                "corsPolicy": "cors_policy",
                "faultInjectionPolicy": "fault_injection_policy",
                "requestMirrorPolicy": "request_mirror_policy",
                "retryPolicy": "retry_policy",
                "urlRewrite": "url_rewrite",
                "weightedBackendServices": "weighted_backend_services"
            },
            "gcp:compute/URLMapPathMatcherPathRuleRouteActionCorsPolicy:URLMapPathMatcherPathRuleRouteActionCorsPolicy": {
                "allowCredentials": "allow_credentials",
                "allowHeaders": "allow_headers",
                "allowMethods": "allow_methods",
                "allowOriginRegexes": "allow_origin_regexes",
                "allowOrigins": "allow_origins",
                "exposeHeaders": "expose_headers",
                "maxAge": "max_age"
            },
            "gcp:compute/URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort:URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort": {
                "httpStatus": "http_status"
            },
            "gcp:compute/URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay:URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay": {
                "fixedDelay": "fixed_delay"
            },
            "gcp:compute/URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy:URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy": {
                "backendService": "backend_service"
            },
            "gcp:compute/URLMapPathMatcherPathRuleRouteActionRetryPolicy:URLMapPathMatcherPathRuleRouteActionRetryPolicy": {
                "numRetries": "num_retries",
                "perTryTimeout": "per_try_timeout",
                "retryConditions": "retry_conditions"
            },
            "gcp:compute/URLMapPathMatcherPathRuleRouteActionUrlRewrite:URLMapPathMatcherPathRuleRouteActionUrlRewrite": {
                "hostRewrite": "host_rewrite",
                "pathPrefixRewrite": "path_prefix_rewrite"
            },
            "gcp:compute/URLMapPathMatcherPathRuleRouteActionWeightedBackendService:URLMapPathMatcherPathRuleRouteActionWeightedBackendService": {
                "backendService": "backend_service",
                "headerAction": "header_action"
            },
            "gcp:compute/URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction:URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_add",
                "requestHeadersToRemoves": "request_headers_to_remove",
                "responseHeadersToAdds": "response_headers_to_add",
                "responseHeadersToRemoves": "response_headers_to_remove"
            },
            "gcp:compute/URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd:URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd:URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapPathMatcherPathRuleUrlRedirect:URLMapPathMatcherPathRuleUrlRedirect": {
                "hostRedirect": "host_redirect",
                "httpsRedirect": "https_redirect",
                "pathRedirect": "path_redirect",
                "prefixRedirect": "prefix_redirect",
                "redirectResponseCode": "redirect_response_code",
                "stripQuery": "strip_query"
            },
            "gcp:compute/URLMapPathMatcherRouteRule:URLMapPathMatcherRouteRule": {
                "headerAction": "header_action",
                "matchRules": "match_rules",
                "routeAction": "route_action",
                "urlRedirect": "url_redirect"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleHeaderAction:URLMapPathMatcherRouteRuleHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_add",
                "requestHeadersToRemoves": "request_headers_to_remove",
                "responseHeadersToAdds": "response_headers_to_add",
                "responseHeadersToRemoves": "response_headers_to_remove"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd:URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd:URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleMatchRule:URLMapPathMatcherRouteRuleMatchRule": {
                "fullPathMatch": "full_path_match",
                "headerMatches": "header_matches",
                "ignoreCase": "ignore_case",
                "metadataFilters": "metadata_filters",
                "pathTemplateMatch": "path_template_match",
                "prefixMatch": "prefix_match",
                "queryParameterMatches": "query_parameter_matches",
                "regexMatch": "regex_match"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleMatchRuleHeaderMatch:URLMapPathMatcherRouteRuleMatchRuleHeaderMatch": {
                "exactMatch": "exact_match",
                "headerName": "header_name",
                "invertMatch": "invert_match",
                "prefixMatch": "prefix_match",
                "presentMatch": "present_match",
                "rangeMatch": "range_match",
                "regexMatch": "regex_match",
                "suffixMatch": "suffix_match"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch:URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch": {
                "rangeEnd": "range_end",
                "rangeStart": "range_start"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleMatchRuleMetadataFilter:URLMapPathMatcherRouteRuleMatchRuleMetadataFilter": {
                "filterLabels": "filter_labels",
                "filterMatchCriteria": "filter_match_criteria"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch:URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch": {
                "exactMatch": "exact_match",
                "presentMatch": "present_match",
                "regexMatch": "regex_match"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleRouteAction:URLMapPathMatcherRouteRuleRouteAction": {
                "corsPolicy": "cors_policy",
                "faultInjectionPolicy": "fault_injection_policy",
                "requestMirrorPolicy": "request_mirror_policy",
                "retryPolicy": "retry_policy",
                "urlRewrite": "url_rewrite",
                "weightedBackendServices": "weighted_backend_services"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleRouteActionCorsPolicy:URLMapPathMatcherRouteRuleRouteActionCorsPolicy": {
                "allowCredentials": "allow_credentials",
                "allowHeaders": "allow_headers",
                "allowMethods": "allow_methods",
                "allowOriginRegexes": "allow_origin_regexes",
                "allowOrigins": "allow_origins",
                "exposeHeaders": "expose_headers",
                "maxAge": "max_age"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort:URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort": {
                "httpStatus": "http_status"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay:URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay": {
                "fixedDelay": "fixed_delay"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy:URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy": {
                "backendService": "backend_service"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleRouteActionRetryPolicy:URLMapPathMatcherRouteRuleRouteActionRetryPolicy": {
                "numRetries": "num_retries",
                "perTryTimeout": "per_try_timeout",
                "retryConditions": "retry_conditions"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleRouteActionUrlRewrite:URLMapPathMatcherRouteRuleRouteActionUrlRewrite": {
                "hostRewrite": "host_rewrite",
                "pathPrefixRewrite": "path_prefix_rewrite",
                "pathTemplateRewrite": "path_template_rewrite"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleRouteActionWeightedBackendService:URLMapPathMatcherRouteRuleRouteActionWeightedBackendService": {
                "backendService": "backend_service",
                "headerAction": "header_action"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction:URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_add",
                "requestHeadersToRemoves": "request_headers_to_remove",
                "responseHeadersToAdds": "response_headers_to_add",
                "responseHeadersToRemoves": "response_headers_to_remove"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd:URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd:URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:compute/URLMapPathMatcherRouteRuleUrlRedirect:URLMapPathMatcherRouteRuleUrlRedirect": {
                "hostRedirect": "host_redirect",
                "httpsRedirect": "https_redirect",
                "pathRedirect": "path_redirect",
                "prefixRedirect": "prefix_redirect",
                "redirectResponseCode": "redirect_response_code",
                "stripQuery": "strip_query"
            },
            "gcp:compute/address:Address": {
                "addressType": "address_type",
                "creationTimestamp": "creation_timestamp",
                "labelFingerprint": "label_fingerprint",
                "networkTier": "network_tier",
                "prefixLength": "prefix_length",
                "selfLink": "self_link"
            },
            "gcp:compute/attachedDisk:AttachedDisk": {
                "deviceName": "device_name"
            },
            "gcp:compute/autoscalar:Autoscalar": {
                "autoscalingPolicy": "autoscaling_policy",
                "creationTimestamp": "creation_timestamp",
                "selfLink": "self_link"
            },
            "gcp:compute/autoscaler:Autoscaler": {
                "autoscalingPolicy": "autoscaling_policy",
                "creationTimestamp": "creation_timestamp",
                "selfLink": "self_link"
            },
            "gcp:compute/backendBucket:BackendBucket": {
                "bucketName": "bucket_name",
                "cdnPolicy": "cdn_policy",
                "compressionMode": "compression_mode",
                "creationTimestamp": "creation_timestamp",
                "customResponseHeaders": "custom_response_headers",
                "edgeSecurityPolicy": "edge_security_policy",
                "enableCdn": "enable_cdn",
                "selfLink": "self_link"
            },
            "gcp:compute/backendBucketIamPolicy:BackendBucketIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/backendBucketSignedUrlKey:BackendBucketSignedUrlKey": {
                "backendBucket": "backend_bucket",
                "keyValue": "key_value"
            },
            "gcp:compute/backendService:BackendService": {
                "affinityCookieTtlSec": "affinity_cookie_ttl_sec",
                "backends": "backend",
                "cdnPolicy": "cdn_policy",
                "circuitBreakers": "circuit_breakers",
                "compressionMode": "compression_mode",
                "connectionDrainingTimeoutSec": "connection_draining_timeout_sec",
                "consistentHash": "consistent_hash",
                "creationTimestamp": "creation_timestamp",
                "customRequestHeaders": "custom_request_headers",
                "customResponseHeaders": "custom_response_headers",
                "edgeSecurityPolicy": "edge_security_policy",
                "enableCdn": "enable_cdn",
                "generatedId": "generated_id",
                "healthChecks": "health_checks",
                "loadBalancingScheme": "load_balancing_scheme",
                "localityLbPolicies": "locality_lb_policies",
                "localityLbPolicy": "locality_lb_policy",
                "logConfig": "log_config",
                "outlierDetection": "outlier_detection",
                "portName": "port_name",
                "securityPolicy": "security_policy",
                "securitySettings": "security_settings",
                "selfLink": "self_link",
                "sessionAffinity": "session_affinity",
                "timeoutSec": "timeout_sec"
            },
            "gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/backendServiceSignedUrlKey:BackendServiceSignedUrlKey": {
                "backendService": "backend_service",
                "keyValue": "key_value"
            },
            "gcp:compute/caExternalAccountKey:CaExternalAccountKey": {
                "b64MacKey": "b64_mac_key",
                "keyId": "key_id"
            },
            "gcp:compute/disk:Disk": {
                "asyncPrimaryDisk": "async_primary_disk",
                "creationTimestamp": "creation_timestamp",
                "diskEncryptionKey": "disk_encryption_key",
                "enableConfidentialCompute": "enable_confidential_compute",
                "guestOsFeatures": "guest_os_features",
                "labelFingerprint": "label_fingerprint",
                "lastAttachTimestamp": "last_attach_timestamp",
                "lastDetachTimestamp": "last_detach_timestamp",
                "multiWriter": "multi_writer",
                "physicalBlockSizeBytes": "physical_block_size_bytes",
                "provisionedIops": "provisioned_iops",
                "provisionedThroughput": "provisioned_throughput",
                "resourcePolicies": "resource_policies",
                "selfLink": "self_link",
                "sourceDisk": "source_disk",
                "sourceDiskId": "source_disk_id",
                "sourceImageEncryptionKey": "source_image_encryption_key",
                "sourceImageId": "source_image_id",
                "sourceSnapshotEncryptionKey": "source_snapshot_encryption_key",
                "sourceSnapshotId": "source_snapshot_id"
            },
            "gcp:compute/diskAsyncReplication:DiskAsyncReplication": {
                "primaryDisk": "primary_disk",
                "secondaryDisk": "secondary_disk"
            },
            "gcp:compute/diskIamPolicy:DiskIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/externalVpnGateway:ExternalVpnGateway": {
                "interfaces": "interface",
                "labelFingerprint": "label_fingerprint",
                "redundancyType": "redundancy_type",
                "selfLink": "self_link"
            },
            "gcp:compute/firewall:Firewall": {
                "allows": "allow",
                "creationTimestamp": "creation_timestamp",
                "denies": "deny",
                "destinationRanges": "destination_ranges",
                "enableLogging": "enable_logging",
                "logConfig": "log_config",
                "selfLink": "self_link",
                "sourceRanges": "source_ranges",
                "sourceServiceAccounts": "source_service_accounts",
                "sourceTags": "source_tags",
                "targetServiceAccounts": "target_service_accounts",
                "targetTags": "target_tags"
            },
            "gcp:compute/firewallPolicy:FirewallPolicy": {
                "creationTimestamp": "creation_timestamp",
                "firewallPolicyId": "firewall_policy_id",
                "ruleTupleCount": "rule_tuple_count",
                "selfLink": "self_link",
                "selfLinkWithId": "self_link_with_id",
                "shortName": "short_name"
            },
            "gcp:compute/firewallPolicyAssociation:FirewallPolicyAssociation": {
                "attachmentTarget": "attachment_target",
                "firewallPolicy": "firewall_policy",
                "shortName": "short_name"
            },
            "gcp:compute/firewallPolicyRule:FirewallPolicyRule": {
                "enableLogging": "enable_logging",
                "firewallPolicy": "firewall_policy",
                "ruleTupleCount": "rule_tuple_count",
                "targetResources": "target_resources",
                "targetServiceAccounts": "target_service_accounts"
            },
            "gcp:compute/forwardingRule:ForwardingRule": {
                "allPorts": "all_ports",
                "allowGlobalAccess": "allow_global_access",
                "allowPscGlobalAccess": "allow_psc_global_access",
                "backendService": "backend_service",
                "baseForwardingRule": "base_forwarding_rule",
                "creationTimestamp": "creation_timestamp",
                "ipAddress": "ip_address",
                "ipProtocol": "ip_protocol",
                "isMirroringCollector": "is_mirroring_collector",
                "labelFingerprint": "label_fingerprint",
                "loadBalancingScheme": "load_balancing_scheme",
                "networkTier": "network_tier",
                "noAutomateDnsZone": "no_automate_dns_zone",
                "portRange": "port_range",
                "pscConnectionId": "psc_connection_id",
                "pscConnectionStatus": "psc_connection_status",
                "selfLink": "self_link",
                "serviceDirectoryRegistrations": "service_directory_registrations",
                "serviceLabel": "service_label",
                "serviceName": "service_name",
                "sourceIpRanges": "source_ip_ranges"
            },
            "gcp:compute/getAddress:getAddress": {
                "addressType": "address_type",
                "networkTier": "network_tier",
                "prefixLength": "prefix_length",
                "selfLink": "self_link"
            },
            "gcp:compute/getAddressesAddress:getAddressesAddress": {
                "addressType": "address_type",
                "selfLink": "self_link"
            },
            "gcp:compute/getBackendBucket:getBackendBucket": {
                "bucketName": "bucket_name",
                "cdnPolicies": "cdn_policy",
                "compressionMode": "compression_mode",
                "creationTimestamp": "creation_timestamp",
                "customResponseHeaders": "custom_response_headers",
                "edgeSecurityPolicy": "edge_security_policy",
                "enableCdn": "enable_cdn",
                "selfLink": "self_link"
            },
            "gcp:compute/getBackendBucketCdnPolicy:getBackendBucketCdnPolicy": {
                "bypassCacheOnRequestHeaders": "bypass_cache_on_request_headers",
                "cacheKeyPolicies": "cache_key_policy",
                "cacheMode": "cache_mode",
                "clientTtl": "client_ttl",
                "defaultTtl": "default_ttl",
                "maxTtl": "max_ttl",
                "negativeCaching": "negative_caching",
                "negativeCachingPolicies": "negative_caching_policy",
                "requestCoalescing": "request_coalescing",
                "serveWhileStale": "serve_while_stale",
                "signedUrlCacheMaxAgeSec": "signed_url_cache_max_age_sec"
            },
            "gcp:compute/getBackendBucketCdnPolicyBypassCacheOnRequestHeader:getBackendBucketCdnPolicyBypassCacheOnRequestHeader": {
                "headerName": "header_name"
            },
            "gcp:compute/getBackendBucketCdnPolicyCacheKeyPolicy:getBackendBucketCdnPolicyCacheKeyPolicy": {
                "includeHttpHeaders": "include_http_headers",
                "queryStringWhitelists": "query_string_whitelist"
            },
            "gcp:compute/getBackendBucketIamPolicy:getBackendBucketIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/getBackendService:getBackendService": {
                "affinityCookieTtlSec": "affinity_cookie_ttl_sec",
                "backends": "backend",
                "cdnPolicies": "cdn_policy",
                "circuitBreakers": "circuit_breakers",
                "compressionMode": "compression_mode",
                "connectionDrainingTimeoutSec": "connection_draining_timeout_sec",
                "consistentHash": "consistent_hash",
                "creationTimestamp": "creation_timestamp",
                "customRequestHeaders": "custom_request_headers",
                "customResponseHeaders": "custom_response_headers",
                "edgeSecurityPolicy": "edge_security_policy",
                "enableCdn": "enable_cdn",
                "generatedId": "generated_id",
                "healthChecks": "health_checks",
                "iaps": "iap",
                "loadBalancingScheme": "load_balancing_scheme",
                "localityLbPolicies": "locality_lb_policies",
                "localityLbPolicy": "locality_lb_policy",
                "logConfigs": "log_config",
                "outlierDetections": "outlier_detection",
                "portName": "port_name",
                "securityPolicy": "security_policy",
                "securitySettings": "security_settings",
                "selfLink": "self_link",
                "sessionAffinity": "session_affinity",
                "timeoutSec": "timeout_sec"
            },
            "gcp:compute/getBackendServiceBackend:getBackendServiceBackend": {
                "balancingMode": "balancing_mode",
                "capacityScaler": "capacity_scaler",
                "maxConnections": "max_connections",
                "maxConnectionsPerEndpoint": "max_connections_per_endpoint",
                "maxConnectionsPerInstance": "max_connections_per_instance",
                "maxRate": "max_rate",
                "maxRatePerEndpoint": "max_rate_per_endpoint",
                "maxRatePerInstance": "max_rate_per_instance",
                "maxUtilization": "max_utilization"
            },
            "gcp:compute/getBackendServiceCdnPolicy:getBackendServiceCdnPolicy": {
                "bypassCacheOnRequestHeaders": "bypass_cache_on_request_headers",
                "cacheKeyPolicies": "cache_key_policy",
                "cacheMode": "cache_mode",
                "clientTtl": "client_ttl",
                "defaultTtl": "default_ttl",
                "maxTtl": "max_ttl",
                "negativeCaching": "negative_caching",
                "negativeCachingPolicies": "negative_caching_policy",
                "serveWhileStale": "serve_while_stale",
                "signedUrlCacheMaxAgeSec": "signed_url_cache_max_age_sec"
            },
            "gcp:compute/getBackendServiceCdnPolicyBypassCacheOnRequestHeader:getBackendServiceCdnPolicyBypassCacheOnRequestHeader": {
                "headerName": "header_name"
            },
            "gcp:compute/getBackendServiceCdnPolicyCacheKeyPolicy:getBackendServiceCdnPolicyCacheKeyPolicy": {
                "includeHost": "include_host",
                "includeHttpHeaders": "include_http_headers",
                "includeNamedCookies": "include_named_cookies",
                "includeProtocol": "include_protocol",
                "includeQueryString": "include_query_string",
                "queryStringBlacklists": "query_string_blacklist",
                "queryStringWhitelists": "query_string_whitelist"
            },
            "gcp:compute/getBackendServiceCircuitBreaker:getBackendServiceCircuitBreaker": {
                "connectTimeouts": "connect_timeout",
                "maxConnections": "max_connections",
                "maxPendingRequests": "max_pending_requests",
                "maxRequests": "max_requests",
                "maxRequestsPerConnection": "max_requests_per_connection",
                "maxRetries": "max_retries"
            },
            "gcp:compute/getBackendServiceConsistentHash:getBackendServiceConsistentHash": {
                "httpCookies": "http_cookie",
                "httpHeaderName": "http_header_name",
                "minimumRingSize": "minimum_ring_size"
            },
            "gcp:compute/getBackendServiceConsistentHashHttpCooky:getBackendServiceConsistentHashHttpCooky": {
                "ttls": "ttl"
            },
            "gcp:compute/getBackendServiceIamPolicy:getBackendServiceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/getBackendServiceIap:getBackendServiceIap": {
                "oauth2ClientId": "oauth2_client_id",
                "oauth2ClientSecret": "oauth2_client_secret",
                "oauth2ClientSecretSha256": "oauth2_client_secret_sha256"
            },
            "gcp:compute/getBackendServiceLocalityLbPolicy:getBackendServiceLocalityLbPolicy": {
                "customPolicies": "custom_policy",
                "policies": "policy"
            },
            "gcp:compute/getBackendServiceLogConfig:getBackendServiceLogConfig": {
                "sampleRate": "sample_rate"
            },
            "gcp:compute/getBackendServiceOutlierDetection:getBackendServiceOutlierDetection": {
                "baseEjectionTimes": "base_ejection_time",
                "consecutiveErrors": "consecutive_errors",
                "consecutiveGatewayFailure": "consecutive_gateway_failure",
                "enforcingConsecutiveErrors": "enforcing_consecutive_errors",
                "enforcingConsecutiveGatewayFailure": "enforcing_consecutive_gateway_failure",
                "enforcingSuccessRate": "enforcing_success_rate",
                "intervals": "interval",
                "maxEjectionPercent": "max_ejection_percent",
                "successRateMinimumHosts": "success_rate_minimum_hosts",
                "successRateRequestVolume": "success_rate_request_volume",
                "successRateStdevFactor": "success_rate_stdev_factor"
            },
            "gcp:compute/getBackendServiceSecuritySetting:getBackendServiceSecuritySetting": {
                "clientTlsPolicy": "client_tls_policy",
                "subjectAltNames": "subject_alt_names"
            },
            "gcp:compute/getCertificate:getCertificate": {
                "certificateId": "certificate_id",
                "creationTimestamp": "creation_timestamp",
                "expireTime": "expire_time",
                "namePrefix": "name_prefix",
                "privateKey": "private_key",
                "selfLink": "self_link"
            },
            "gcp:compute/getDefaultServiceAccount:getDefaultServiceAccount": {
                "displayName": "display_name",
                "uniqueId": "unique_id"
            },
            "gcp:compute/getDisk:getDisk": {
                "asyncPrimaryDisks": "async_primary_disk",
                "creationTimestamp": "creation_timestamp",
                "diskEncryptionKeys": "disk_encryption_key",
                "enableConfidentialCompute": "enable_confidential_compute",
                "guestOsFeatures": "guest_os_features",
                "labelFingerprint": "label_fingerprint",
                "lastAttachTimestamp": "last_attach_timestamp",
                "lastDetachTimestamp": "last_detach_timestamp",
                "multiWriter": "multi_writer",
                "physicalBlockSizeBytes": "physical_block_size_bytes",
                "provisionedIops": "provisioned_iops",
                "provisionedThroughput": "provisioned_throughput",
                "resourcePolicies": "resource_policies",
                "selfLink": "self_link",
                "sourceDisk": "source_disk",
                "sourceDiskId": "source_disk_id",
                "sourceImageEncryptionKeys": "source_image_encryption_key",
                "sourceImageId": "source_image_id",
                "sourceSnapshotEncryptionKeys": "source_snapshot_encryption_key",
                "sourceSnapshotId": "source_snapshot_id"
            },
            "gcp:compute/getDiskDiskEncryptionKey:getDiskDiskEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account",
                "rawKey": "raw_key",
                "rsaEncryptedKey": "rsa_encrypted_key"
            },
            "gcp:compute/getDiskIamPolicy:getDiskIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/getDiskSourceImageEncryptionKey:getDiskSourceImageEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account",
                "rawKey": "raw_key"
            },
            "gcp:compute/getDiskSourceSnapshotEncryptionKey:getDiskSourceSnapshotEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account",
                "rawKey": "raw_key"
            },
            "gcp:compute/getForwardingRule:getForwardingRule": {
                "allPorts": "all_ports",
                "allowGlobalAccess": "allow_global_access",
                "allowPscGlobalAccess": "allow_psc_global_access",
                "backendService": "backend_service",
                "baseForwardingRule": "base_forwarding_rule",
                "creationTimestamp": "creation_timestamp",
                "ipAddress": "ip_address",
                "ipProtocol": "ip_protocol",
                "isMirroringCollector": "is_mirroring_collector",
                "labelFingerprint": "label_fingerprint",
                "loadBalancingScheme": "load_balancing_scheme",
                "networkTier": "network_tier",
                "noAutomateDnsZone": "no_automate_dns_zone",
                "portRange": "port_range",
                "pscConnectionId": "psc_connection_id",
                "pscConnectionStatus": "psc_connection_status",
                "selfLink": "self_link",
                "serviceDirectoryRegistrations": "service_directory_registrations",
                "serviceLabel": "service_label",
                "serviceName": "service_name",
                "sourceIpRanges": "source_ip_ranges"
            },
            "gcp:compute/getGlobalAddress:getGlobalAddress": {
                "addressType": "address_type",
                "networkTier": "network_tier",
                "prefixLength": "prefix_length",
                "selfLink": "self_link"
            },
            "gcp:compute/getGlobalForwardingRule:getGlobalForwardingRule": {
                "allowPscGlobalAccess": "allow_psc_global_access",
                "baseForwardingRule": "base_forwarding_rule",
                "ipAddress": "ip_address",
                "ipProtocol": "ip_protocol",
                "ipVersion": "ip_version",
                "labelFingerprint": "label_fingerprint",
                "loadBalancingScheme": "load_balancing_scheme",
                "metadataFilters": "metadata_filters",
                "noAutomateDnsZone": "no_automate_dns_zone",
                "portRange": "port_range",
                "pscConnectionId": "psc_connection_id",
                "pscConnectionStatus": "psc_connection_status",
                "selfLink": "self_link",
                "sourceIpRanges": "source_ip_ranges"
            },
            "gcp:compute/getGlobalForwardingRuleMetadataFilter:getGlobalForwardingRuleMetadataFilter": {
                "filterLabels": "filter_labels",
                "filterMatchCriteria": "filter_match_criteria"
            },
            "gcp:compute/getHcVpnGateway:getHcVpnGateway": {
                "selfLink": "self_link",
                "stackType": "stack_type",
                "vpnInterfaces": "vpn_interfaces"
            },
            "gcp:compute/getHcVpnGatewayVpnInterface:getHcVpnGatewayVpnInterface": {
                "interconnectAttachment": "interconnect_attachment",
                "ipAddress": "ip_address"
            },
            "gcp:compute/getHealthCheck:getHealthCheck": {
                "checkIntervalSec": "check_interval_sec",
                "creationTimestamp": "creation_timestamp",
                "grpcHealthChecks": "grpc_health_check",
                "healthyThreshold": "healthy_threshold",
                "http2HealthChecks": "http2_health_check",
                "httpHealthChecks": "http_health_check",
                "httpsHealthChecks": "https_health_check",
                "logConfigs": "log_config",
                "selfLink": "self_link",
                "sslHealthChecks": "ssl_health_check",
                "tcpHealthChecks": "tcp_health_check",
                "timeoutSec": "timeout_sec",
                "unhealthyThreshold": "unhealthy_threshold"
            },
            "gcp:compute/getHealthCheckGrpcHealthCheck:getHealthCheckGrpcHealthCheck": {
                "grpcServiceName": "grpc_service_name",
                "portName": "port_name",
                "portSpecification": "port_specification"
            },
            "gcp:compute/getHealthCheckHttp2HealthCheck:getHealthCheckHttp2HealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header",
                "requestPath": "request_path"
            },
            "gcp:compute/getHealthCheckHttpHealthCheck:getHealthCheckHttpHealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header",
                "requestPath": "request_path"
            },
            "gcp:compute/getHealthCheckHttpsHealthCheck:getHealthCheckHttpsHealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header",
                "requestPath": "request_path"
            },
            "gcp:compute/getHealthCheckSslHealthCheck:getHealthCheckSslHealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header"
            },
            "gcp:compute/getHealthCheckTcpHealthCheck:getHealthCheckTcpHealthCheck": {
                "portName": "port_name",
                "portSpecification": "port_specification",
                "proxyHeader": "proxy_header"
            },
            "gcp:compute/getImage:getImage": {
                "archiveSizeBytes": "archive_size_bytes",
                "creationTimestamp": "creation_timestamp",
                "diskSizeGb": "disk_size_gb",
                "imageEncryptionKeySha256": "image_encryption_key_sha256",
                "imageId": "image_id",
                "labelFingerprint": "label_fingerprint",
                "mostRecent": "most_recent",
                "selfLink": "self_link",
                "sourceDisk": "source_disk",
                "sourceDiskEncryptionKeySha256": "source_disk_encryption_key_sha256",
                "sourceDiskId": "source_disk_id",
                "sourceImageId": "source_image_id"
            },
            "gcp:compute/getImageIamPolicy:getImageIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/getInstance:getInstance": {
                "advancedMachineFeatures": "advanced_machine_features",
                "allowStoppingForUpdate": "allow_stopping_for_update",
                "attachedDisks": "attached_disk",
                "bootDisks": "boot_disk",
                "canIpForward": "can_ip_forward",
                "confidentialInstanceConfigs": "confidential_instance_config",
                "cpuPlatform": "cpu_platform",
                "currentStatus": "current_status",
                "deletionProtection": "deletion_protection",
                "desiredStatus": "desired_status",
                "enableDisplay": "enable_display",
                "guestAccelerators": "guest_accelerator",
                "instanceId": "instance_id",
                "labelFingerprint": "label_fingerprint",
                "machineType": "machine_type",
                "metadataFingerprint": "metadata_fingerprint",
                "metadataStartupScript": "metadata_startup_script",
                "minCpuPlatform": "min_cpu_platform",
                "networkInterfaces": "network_interface",
                "networkPerformanceConfigs": "network_performance_config",
                "reservationAffinities": "reservation_affinity",
                "resourcePolicies": "resource_policies",
                "schedulings": "scheduling",
                "scratchDisks": "scratch_disk",
                "selfLink": "self_link",
                "serviceAccounts": "service_account",
                "shieldedInstanceConfigs": "shielded_instance_config",
                "tagsFingerprint": "tags_fingerprint"
            },
            "gcp:compute/getInstanceAdvancedMachineFeature:getInstanceAdvancedMachineFeature": {
                "enableNestedVirtualization": "enable_nested_virtualization",
                "threadsPerCore": "threads_per_core",
                "visibleCoreCount": "visible_core_count"
            },
            "gcp:compute/getInstanceAttachedDisk:getInstanceAttachedDisk": {
                "deviceName": "device_name",
                "diskEncryptionKeyRaw": "disk_encryption_key_raw",
                "diskEncryptionKeySha256": "disk_encryption_key_sha256",
                "kmsKeySelfLink": "kms_key_self_link"
            },
            "gcp:compute/getInstanceBootDisk:getInstanceBootDisk": {
                "autoDelete": "auto_delete",
                "deviceName": "device_name",
                "diskEncryptionKeyRaw": "disk_encryption_key_raw",
                "diskEncryptionKeySha256": "disk_encryption_key_sha256",
                "initializeParams": "initialize_params",
                "kmsKeySelfLink": "kms_key_self_link"
            },
            "gcp:compute/getInstanceBootDiskInitializeParam:getInstanceBootDiskInitializeParam": {
                "resourceManagerTags": "resource_manager_tags"
            },
            "gcp:compute/getInstanceConfidentialInstanceConfig:getInstanceConfidentialInstanceConfig": {
                "enableConfidentialCompute": "enable_confidential_compute"
            },
            "gcp:compute/getInstanceGroup:getInstanceGroup": {
                "namedPorts": "named_port",
                "selfLink": "self_link"
            },
            "gcp:compute/getInstanceGroupManager:getInstanceGroupManager": {
                "allInstancesConfigs": "all_instances_config",
                "autoHealingPolicies": "auto_healing_policies",
                "baseInstanceName": "base_instance_name",
                "instanceGroup": "instance_group",
                "instanceLifecyclePolicies": "instance_lifecycle_policy",
                "listManagedInstancesResults": "list_managed_instances_results",
                "namedPorts": "named_port",
                "selfLink": "self_link",
                "statefulDisks": "stateful_disk",
                "statefulExternalIps": "stateful_external_ip",
                "statefulInternalIps": "stateful_internal_ip",
                "statuses": "status",
                "targetPools": "target_pools",
                "targetSize": "target_size",
                "updatePolicies": "update_policy",
                "versions": "version",
                "waitForInstances": "wait_for_instances",
                "waitForInstancesStatus": "wait_for_instances_status"
            },
            "gcp:compute/getInstanceGroupManagerAutoHealingPolicy:getInstanceGroupManagerAutoHealingPolicy": {
                "healthCheck": "health_check",
                "initialDelaySec": "initial_delay_sec"
            },
            "gcp:compute/getInstanceGroupManagerInstanceLifecyclePolicy:getInstanceGroupManagerInstanceLifecyclePolicy": {
                "forceUpdateOnRepair": "force_update_on_repair"
            },
            "gcp:compute/getInstanceGroupManagerStatefulDisk:getInstanceGroupManagerStatefulDisk": {
                "deleteRule": "delete_rule",
                "deviceName": "device_name"
            },
            "gcp:compute/getInstanceGroupManagerStatefulExternalIp:getInstanceGroupManagerStatefulExternalIp": {
                "deleteRule": "delete_rule",
                "interfaceName": "interface_name"
            },
            "gcp:compute/getInstanceGroupManagerStatefulInternalIp:getInstanceGroupManagerStatefulInternalIp": {
                "deleteRule": "delete_rule",
                "interfaceName": "interface_name"
            },
            "gcp:compute/getInstanceGroupManagerStatus:getInstanceGroupManagerStatus": {
                "allInstancesConfigs": "all_instances_config",
                "isStable": "is_stable",
                "statefuls": "stateful",
                "versionTargets": "version_target"
            },
            "gcp:compute/getInstanceGroupManagerStatusStateful:getInstanceGroupManagerStatusStateful": {
                "hasStatefulConfig": "has_stateful_config",
                "perInstanceConfigs": "per_instance_configs"
            },
            "gcp:compute/getInstanceGroupManagerStatusStatefulPerInstanceConfig:getInstanceGroupManagerStatusStatefulPerInstanceConfig": {
                "allEffective": "all_effective"
            },
            "gcp:compute/getInstanceGroupManagerStatusVersionTarget:getInstanceGroupManagerStatusVersionTarget": {
                "isReached": "is_reached"
            },
            "gcp:compute/getInstanceGroupManagerUpdatePolicy:getInstanceGroupManagerUpdatePolicy": {
                "maxSurgeFixed": "max_surge_fixed",
                "maxSurgePercent": "max_surge_percent",
                "maxUnavailableFixed": "max_unavailable_fixed",
                "maxUnavailablePercent": "max_unavailable_percent",
                "minReadySec": "min_ready_sec",
                "minimalAction": "minimal_action",
                "mostDisruptiveAllowedAction": "most_disruptive_allowed_action",
                "replacementMethod": "replacement_method"
            },
            "gcp:compute/getInstanceGroupManagerVersion:getInstanceGroupManagerVersion": {
                "instanceTemplate": "instance_template",
                "targetSizes": "target_size"
            },
            "gcp:compute/getInstanceIamPolicy:getInstanceIamPolicy": {
                "instanceName": "instance_name",
                "policyData": "policy_data"
            },
            "gcp:compute/getInstanceNetworkInterface:getInstanceNetworkInterface": {
                "accessConfigs": "access_config",
                "aliasIpRanges": "alias_ip_range",
                "ipv6AccessConfigs": "ipv6_access_config",
                "ipv6AccessType": "ipv6_access_type",
                "networkIp": "network_ip",
                "nicType": "nic_type",
                "queueCount": "queue_count",
                "stackType": "stack_type",
                "subnetworkProject": "subnetwork_project"
            },
            "gcp:compute/getInstanceNetworkInterfaceAccessConfig:getInstanceNetworkInterfaceAccessConfig": {
                "natIp": "nat_ip",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/getInstanceNetworkInterfaceAliasIpRange:getInstanceNetworkInterfaceAliasIpRange": {
                "ipCidrRange": "ip_cidr_range",
                "subnetworkRangeName": "subnetwork_range_name"
            },
            "gcp:compute/getInstanceNetworkInterfaceIpv6AccessConfig:getInstanceNetworkInterfaceIpv6AccessConfig": {
                "externalIpv6": "external_ipv6",
                "externalIpv6PrefixLength": "external_ipv6_prefix_length",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/getInstanceNetworkPerformanceConfig:getInstanceNetworkPerformanceConfig": {
                "totalEgressBandwidthTier": "total_egress_bandwidth_tier"
            },
            "gcp:compute/getInstanceParam:getInstanceParam": {
                "resourceManagerTags": "resource_manager_tags"
            },
            "gcp:compute/getInstanceReservationAffinity:getInstanceReservationAffinity": {
                "specificReservations": "specific_reservation"
            },
            "gcp:compute/getInstanceScheduling:getInstanceScheduling": {
                "automaticRestart": "automatic_restart",
                "instanceTerminationAction": "instance_termination_action",
                "maintenanceInterval": "maintenance_interval",
                "maxRunDurations": "max_run_duration",
                "minNodeCpus": "min_node_cpus",
                "nodeAffinities": "node_affinities",
                "onHostMaintenance": "on_host_maintenance",
                "provisioningModel": "provisioning_model"
            },
            "gcp:compute/getInstanceShieldedInstanceConfig:getInstanceShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:compute/getInstanceTemplate:getInstanceTemplate": {
                "advancedMachineFeatures": "advanced_machine_features",
                "canIpForward": "can_ip_forward",
                "confidentialInstanceConfigs": "confidential_instance_config",
                "disks": "disk",
                "enableDisplay": "enable_display",
                "guestAccelerators": "guest_accelerator",
                "instanceDescription": "instance_description",
                "machineType": "machine_type",
                "metadataFingerprint": "metadata_fingerprint",
                "metadataStartupScript": "metadata_startup_script",
                "minCpuPlatform": "min_cpu_platform",
                "mostRecent": "most_recent",
                "namePrefix": "name_prefix",
                "networkInterfaces": "network_interface",
                "networkPerformanceConfigs": "network_performance_config",
                "reservationAffinities": "reservation_affinity",
                "resourcePolicies": "resource_policies",
                "schedulings": "scheduling",
                "selfLink": "self_link",
                "selfLinkUnique": "self_link_unique",
                "serviceAccounts": "service_account",
                "shieldedInstanceConfigs": "shielded_instance_config",
                "tagsFingerprint": "tags_fingerprint"
            },
            "gcp:compute/getInstanceTemplateAdvancedMachineFeature:getInstanceTemplateAdvancedMachineFeature": {
                "enableNestedVirtualization": "enable_nested_virtualization",
                "threadsPerCore": "threads_per_core",
                "visibleCoreCount": "visible_core_count"
            },
            "gcp:compute/getInstanceTemplateConfidentialInstanceConfig:getInstanceTemplateConfidentialInstanceConfig": {
                "enableConfidentialCompute": "enable_confidential_compute"
            },
            "gcp:compute/getInstanceTemplateDisk:getInstanceTemplateDisk": {
                "autoDelete": "auto_delete",
                "deviceName": "device_name",
                "diskEncryptionKeys": "disk_encryption_key",
                "diskName": "disk_name",
                "diskSizeGb": "disk_size_gb",
                "diskType": "disk_type",
                "resourcePolicies": "resource_policies",
                "sourceImage": "source_image",
                "sourceImageEncryptionKeys": "source_image_encryption_key",
                "sourceSnapshot": "source_snapshot",
                "sourceSnapshotEncryptionKeys": "source_snapshot_encryption_key"
            },
            "gcp:compute/getInstanceTemplateDiskDiskEncryptionKey:getInstanceTemplateDiskDiskEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link"
            },
            "gcp:compute/getInstanceTemplateDiskSourceImageEncryptionKey:getInstanceTemplateDiskSourceImageEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account"
            },
            "gcp:compute/getInstanceTemplateDiskSourceSnapshotEncryptionKey:getInstanceTemplateDiskSourceSnapshotEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account"
            },
            "gcp:compute/getInstanceTemplateNetworkInterface:getInstanceTemplateNetworkInterface": {
                "accessConfigs": "access_config",
                "aliasIpRanges": "alias_ip_range",
                "ipv6AccessConfigs": "ipv6_access_config",
                "ipv6AccessType": "ipv6_access_type",
                "networkAttachment": "network_attachment",
                "networkIp": "network_ip",
                "nicType": "nic_type",
                "queueCount": "queue_count",
                "stackType": "stack_type",
                "subnetworkProject": "subnetwork_project"
            },
            "gcp:compute/getInstanceTemplateNetworkInterfaceAccessConfig:getInstanceTemplateNetworkInterfaceAccessConfig": {
                "natIp": "nat_ip",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/getInstanceTemplateNetworkInterfaceAliasIpRange:getInstanceTemplateNetworkInterfaceAliasIpRange": {
                "ipCidrRange": "ip_cidr_range",
                "subnetworkRangeName": "subnetwork_range_name"
            },
            "gcp:compute/getInstanceTemplateNetworkInterfaceIpv6AccessConfig:getInstanceTemplateNetworkInterfaceIpv6AccessConfig": {
                "externalIpv6": "external_ipv6",
                "externalIpv6PrefixLength": "external_ipv6_prefix_length",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/getInstanceTemplateNetworkPerformanceConfig:getInstanceTemplateNetworkPerformanceConfig": {
                "totalEgressBandwidthTier": "total_egress_bandwidth_tier"
            },
            "gcp:compute/getInstanceTemplateReservationAffinity:getInstanceTemplateReservationAffinity": {
                "specificReservations": "specific_reservation"
            },
            "gcp:compute/getInstanceTemplateScheduling:getInstanceTemplateScheduling": {
                "automaticRestart": "automatic_restart",
                "instanceTerminationAction": "instance_termination_action",
                "maintenanceInterval": "maintenance_interval",
                "maxRunDurations": "max_run_duration",
                "minNodeCpus": "min_node_cpus",
                "nodeAffinities": "node_affinities",
                "onHostMaintenance": "on_host_maintenance",
                "provisioningModel": "provisioning_model"
            },
            "gcp:compute/getInstanceTemplateShieldedInstanceConfig:getInstanceTemplateShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:compute/getLBIPRanges:getLBIPRanges": {
                "httpSslTcpInternals": "http_ssl_tcp_internal",
                "networks": "network"
            },
            "gcp:compute/getMachineImageIamPolicy:getMachineImageIamPolicy": {
                "machineImage": "machine_image",
                "policyData": "policy_data"
            },
            "gcp:compute/getNetblockIPRanges:getNetblockIPRanges": {
                "cidrBlocks": "cidr_blocks",
                "cidrBlocksIpv4s": "cidr_blocks_ipv4",
                "cidrBlocksIpv6s": "cidr_blocks_ipv6",
                "rangeType": "range_type"
            },
            "gcp:compute/getNetwork:getNetwork": {
                "gatewayIpv4": "gateway_ipv4",
                "selfLink": "self_link",
                "subnetworksSelfLinks": "subnetworks_self_links"
            },
            "gcp:compute/getNetworkEndpointGroup:getNetworkEndpointGroup": {
                "defaultPort": "default_port",
                "networkEndpointType": "network_endpoint_type",
                "selfLink": "self_link"
            },
            "gcp:compute/getNetworkPeering:getNetworkPeering": {
                "exportCustomRoutes": "export_custom_routes",
                "exportSubnetRoutesWithPublicIp": "export_subnet_routes_with_public_ip",
                "importCustomRoutes": "import_custom_routes",
                "importSubnetRoutesWithPublicIp": "import_subnet_routes_with_public_ip",
                "peerNetwork": "peer_network",
                "stackType": "stack_type",
                "stateDetails": "state_details"
            },
            "gcp:compute/getRegionBackendServiceIamPolicy:getRegionBackendServiceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/getRegionDiskIamPolicy:getRegionDiskIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/getRegionInstanceGroup:getRegionInstanceGroup": {
                "selfLink": "self_link"
            },
            "gcp:compute/getRegionInstanceGroupInstance:getRegionInstanceGroupInstance": {
                "namedPorts": "named_ports"
            },
            "gcp:compute/getRegionInstanceTemplate:getRegionInstanceTemplate": {
                "advancedMachineFeatures": "advanced_machine_features",
                "canIpForward": "can_ip_forward",
                "confidentialInstanceConfigs": "confidential_instance_config",
                "disks": "disk",
                "enableDisplay": "enable_display",
                "guestAccelerators": "guest_accelerator",
                "instanceDescription": "instance_description",
                "machineType": "machine_type",
                "metadataFingerprint": "metadata_fingerprint",
                "metadataStartupScript": "metadata_startup_script",
                "minCpuPlatform": "min_cpu_platform",
                "mostRecent": "most_recent",
                "namePrefix": "name_prefix",
                "networkInterfaces": "network_interface",
                "networkPerformanceConfigs": "network_performance_config",
                "reservationAffinities": "reservation_affinity",
                "resourcePolicies": "resource_policies",
                "schedulings": "scheduling",
                "selfLink": "self_link",
                "serviceAccounts": "service_account",
                "shieldedInstanceConfigs": "shielded_instance_config",
                "tagsFingerprint": "tags_fingerprint"
            },
            "gcp:compute/getRegionInstanceTemplateAdvancedMachineFeature:getRegionInstanceTemplateAdvancedMachineFeature": {
                "enableNestedVirtualization": "enable_nested_virtualization",
                "threadsPerCore": "threads_per_core",
                "visibleCoreCount": "visible_core_count"
            },
            "gcp:compute/getRegionInstanceTemplateConfidentialInstanceConfig:getRegionInstanceTemplateConfidentialInstanceConfig": {
                "enableConfidentialCompute": "enable_confidential_compute"
            },
            "gcp:compute/getRegionInstanceTemplateDisk:getRegionInstanceTemplateDisk": {
                "autoDelete": "auto_delete",
                "deviceName": "device_name",
                "diskEncryptionKeys": "disk_encryption_key",
                "diskName": "disk_name",
                "diskSizeGb": "disk_size_gb",
                "diskType": "disk_type",
                "resourcePolicies": "resource_policies",
                "sourceImage": "source_image",
                "sourceImageEncryptionKeys": "source_image_encryption_key",
                "sourceSnapshot": "source_snapshot",
                "sourceSnapshotEncryptionKeys": "source_snapshot_encryption_key"
            },
            "gcp:compute/getRegionInstanceTemplateDiskDiskEncryptionKey:getRegionInstanceTemplateDiskDiskEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link"
            },
            "gcp:compute/getRegionInstanceTemplateDiskSourceImageEncryptionKey:getRegionInstanceTemplateDiskSourceImageEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account"
            },
            "gcp:compute/getRegionInstanceTemplateDiskSourceSnapshotEncryptionKey:getRegionInstanceTemplateDiskSourceSnapshotEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account"
            },
            "gcp:compute/getRegionInstanceTemplateNetworkInterface:getRegionInstanceTemplateNetworkInterface": {
                "accessConfigs": "access_config",
                "aliasIpRanges": "alias_ip_range",
                "ipv6AccessConfigs": "ipv6_access_config",
                "ipv6AccessType": "ipv6_access_type",
                "networkIp": "network_ip",
                "nicType": "nic_type",
                "queueCount": "queue_count",
                "stackType": "stack_type",
                "subnetworkProject": "subnetwork_project"
            },
            "gcp:compute/getRegionInstanceTemplateNetworkInterfaceAccessConfig:getRegionInstanceTemplateNetworkInterfaceAccessConfig": {
                "natIp": "nat_ip",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/getRegionInstanceTemplateNetworkInterfaceAliasIpRange:getRegionInstanceTemplateNetworkInterfaceAliasIpRange": {
                "ipCidrRange": "ip_cidr_range",
                "subnetworkRangeName": "subnetwork_range_name"
            },
            "gcp:compute/getRegionInstanceTemplateNetworkInterfaceIpv6AccessConfig:getRegionInstanceTemplateNetworkInterfaceIpv6AccessConfig": {
                "externalIpv6": "external_ipv6",
                "externalIpv6PrefixLength": "external_ipv6_prefix_length",
                "networkTier": "network_tier",
                "publicPtrDomainName": "public_ptr_domain_name"
            },
            "gcp:compute/getRegionInstanceTemplateNetworkPerformanceConfig:getRegionInstanceTemplateNetworkPerformanceConfig": {
                "totalEgressBandwidthTier": "total_egress_bandwidth_tier"
            },
            "gcp:compute/getRegionInstanceTemplateReservationAffinity:getRegionInstanceTemplateReservationAffinity": {
                "specificReservations": "specific_reservation"
            },
            "gcp:compute/getRegionInstanceTemplateScheduling:getRegionInstanceTemplateScheduling": {
                "automaticRestart": "automatic_restart",
                "instanceTerminationAction": "instance_termination_action",
                "maintenanceInterval": "maintenance_interval",
                "maxRunDurations": "max_run_duration",
                "minNodeCpus": "min_node_cpus",
                "nodeAffinities": "node_affinities",
                "onHostMaintenance": "on_host_maintenance",
                "provisioningModel": "provisioning_model"
            },
            "gcp:compute/getRegionInstanceTemplateShieldedInstanceConfig:getRegionInstanceTemplateShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:compute/getRegionNetworkEndpointGroup:getRegionNetworkEndpointGroup": {
                "appEngines": "app_engine",
                "cloudFunctions": "cloud_function",
                "cloudRuns": "cloud_run",
                "networkEndpointType": "network_endpoint_type",
                "pscTargetService": "psc_target_service",
                "selfLink": "self_link",
                "serverlessDeployments": "serverless_deployment"
            },
            "gcp:compute/getRegionNetworkEndpointGroupAppEngine:getRegionNetworkEndpointGroupAppEngine": {
                "urlMask": "url_mask"
            },
            "gcp:compute/getRegionNetworkEndpointGroupCloudFunction:getRegionNetworkEndpointGroupCloudFunction": {
                "urlMask": "url_mask"
            },
            "gcp:compute/getRegionNetworkEndpointGroupCloudRun:getRegionNetworkEndpointGroupCloudRun": {
                "urlMask": "url_mask"
            },
            "gcp:compute/getRegionNetworkEndpointGroupServerlessDeployment:getRegionNetworkEndpointGroupServerlessDeployment": {
                "urlMask": "url_mask"
            },
            "gcp:compute/getRegionSslCertificate:getRegionSslCertificate": {
                "certificateId": "certificate_id",
                "creationTimestamp": "creation_timestamp",
                "expireTime": "expire_time",
                "namePrefix": "name_prefix",
                "privateKey": "private_key",
                "selfLink": "self_link"
            },
            "gcp:compute/getResourcePolicy:getResourcePolicy": {
                "diskConsistencyGroupPolicies": "disk_consistency_group_policy",
                "groupPlacementPolicies": "group_placement_policy",
                "instanceSchedulePolicies": "instance_schedule_policy",
                "selfLink": "self_link",
                "snapshotSchedulePolicies": "snapshot_schedule_policy"
            },
            "gcp:compute/getResourcePolicyGroupPlacementPolicy:getResourcePolicyGroupPlacementPolicy": {
                "availabilityDomainCount": "availability_domain_count",
                "maxDistance": "max_distance",
                "vmCount": "vm_count"
            },
            "gcp:compute/getResourcePolicyInstanceSchedulePolicy:getResourcePolicyInstanceSchedulePolicy": {
                "expirationTime": "expiration_time",
                "startTime": "start_time",
                "timeZone": "time_zone",
                "vmStartSchedules": "vm_start_schedule",
                "vmStopSchedules": "vm_stop_schedule"
            },
            "gcp:compute/getResourcePolicySnapshotSchedulePolicy:getResourcePolicySnapshotSchedulePolicy": {
                "retentionPolicies": "retention_policy",
                "schedules": "schedule",
                "snapshotProperties": "snapshot_properties"
            },
            "gcp:compute/getResourcePolicySnapshotSchedulePolicyRetentionPolicy:getResourcePolicySnapshotSchedulePolicyRetentionPolicy": {
                "maxRetentionDays": "max_retention_days",
                "onSourceDiskDelete": "on_source_disk_delete"
            },
            "gcp:compute/getResourcePolicySnapshotSchedulePolicySchedule:getResourcePolicySnapshotSchedulePolicySchedule": {
                "dailySchedules": "daily_schedule",
                "hourlySchedules": "hourly_schedule",
                "weeklySchedules": "weekly_schedule"
            },
            "gcp:compute/getResourcePolicySnapshotSchedulePolicyScheduleDailySchedule:getResourcePolicySnapshotSchedulePolicyScheduleDailySchedule": {
                "daysInCycle": "days_in_cycle",
                "startTime": "start_time"
            },
            "gcp:compute/getResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule:getResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule": {
                "hoursInCycle": "hours_in_cycle",
                "startTime": "start_time"
            },
            "gcp:compute/getResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule:getResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule": {
                "dayOfWeeks": "day_of_weeks"
            },
            "gcp:compute/getResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek:getResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek": {
                "startTime": "start_time"
            },
            "gcp:compute/getResourcePolicySnapshotSchedulePolicySnapshotProperty:getResourcePolicySnapshotSchedulePolicySnapshotProperty": {
                "chainName": "chain_name",
                "guestFlush": "guest_flush",
                "storageLocations": "storage_locations"
            },
            "gcp:compute/getRouter:getRouter": {
                "bgps": "bgp",
                "creationTimestamp": "creation_timestamp",
                "encryptedInterconnectRouter": "encrypted_interconnect_router",
                "selfLink": "self_link"
            },
            "gcp:compute/getRouterBgp:getRouterBgp": {
                "advertiseMode": "advertise_mode",
                "advertisedGroups": "advertised_groups",
                "advertisedIpRanges": "advertised_ip_ranges",
                "keepaliveInterval": "keepalive_interval"
            },
            "gcp:compute/getRouterNat:getRouterNat": {
                "drainNatIps": "drain_nat_ips",
                "enableDynamicPortAllocation": "enable_dynamic_port_allocation",
                "enableEndpointIndependentMapping": "enable_endpoint_independent_mapping",
                "icmpIdleTimeoutSec": "icmp_idle_timeout_sec",
                "logConfigs": "log_config",
                "maxPortsPerVm": "max_ports_per_vm",
                "minPortsPerVm": "min_ports_per_vm",
                "natIpAllocateOption": "nat_ip_allocate_option",
                "natIps": "nat_ips",
                "sourceSubnetworkIpRangesToNat": "source_subnetwork_ip_ranges_to_nat",
                "subnetworks": "subnetwork",
                "tcpEstablishedIdleTimeoutSec": "tcp_established_idle_timeout_sec",
                "tcpTimeWaitTimeoutSec": "tcp_time_wait_timeout_sec",
                "tcpTransitoryIdleTimeoutSec": "tcp_transitory_idle_timeout_sec",
                "udpIdleTimeoutSec": "udp_idle_timeout_sec"
            },
            "gcp:compute/getRouterNatRule:getRouterNatRule": {
                "actions": "action",
                "ruleNumber": "rule_number"
            },
            "gcp:compute/getRouterNatRuleAction:getRouterNatRuleAction": {
                "sourceNatActiveIps": "source_nat_active_ips",
                "sourceNatDrainIps": "source_nat_drain_ips"
            },
            "gcp:compute/getRouterNatSubnetwork:getRouterNatSubnetwork": {
                "secondaryIpRangeNames": "secondary_ip_range_names",
                "sourceIpRangesToNats": "source_ip_ranges_to_nat"
            },
            "gcp:compute/getRouterStatus:getRouterStatus": {
                "bestRoutes": "best_routes",
                "bestRoutesForRouters": "best_routes_for_router"
            },
            "gcp:compute/getRouterStatusBestRoute:getRouterStatusBestRoute": {
                "destRange": "dest_range",
                "nextHopGateway": "next_hop_gateway",
                "nextHopIlb": "next_hop_ilb",
                "nextHopInstance": "next_hop_instance",
                "nextHopInstanceZone": "next_hop_instance_zone",
                "nextHopIp": "next_hop_ip",
                "nextHopNetwork": "next_hop_network",
                "nextHopVpnTunnel": "next_hop_vpn_tunnel",
                "selfLink": "self_link"
            },
            "gcp:compute/getRouterStatusBestRoutesForRouter:getRouterStatusBestRoutesForRouter": {
                "destRange": "dest_range",
                "nextHopGateway": "next_hop_gateway",
                "nextHopIlb": "next_hop_ilb",
                "nextHopInstance": "next_hop_instance",
                "nextHopInstanceZone": "next_hop_instance_zone",
                "nextHopIp": "next_hop_ip",
                "nextHopNetwork": "next_hop_network",
                "nextHopVpnTunnel": "next_hop_vpn_tunnel",
                "selfLink": "self_link"
            },
            "gcp:compute/getSSLPolicy:getSSLPolicy": {
                "creationTimestamp": "creation_timestamp",
                "customFeatures": "custom_features",
                "enabledFeatures": "enabled_features",
                "minTlsVersion": "min_tls_version",
                "selfLink": "self_link"
            },
            "gcp:compute/getSnapshot:getSnapshot": {
                "chainName": "chain_name",
                "creationTimestamp": "creation_timestamp",
                "diskSizeGb": "disk_size_gb",
                "labelFingerprint": "label_fingerprint",
                "mostRecent": "most_recent",
                "selfLink": "self_link",
                "snapshotEncryptionKeys": "snapshot_encryption_key",
                "snapshotId": "snapshot_id",
                "sourceDisk": "source_disk",
                "sourceDiskEncryptionKeys": "source_disk_encryption_key",
                "storageBytes": "storage_bytes",
                "storageLocations": "storage_locations"
            },
            "gcp:compute/getSnapshotIamPolicy:getSnapshotIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/getSnapshotSnapshotEncryptionKey:getSnapshotSnapshotEncryptionKey": {
                "kmsKeySelfLink": "kms_key_self_link",
                "kmsKeyServiceAccount": "kms_key_service_account",
                "rawKey": "raw_key"
            },
            "gcp:compute/getSnapshotSourceDiskEncryptionKey:getSnapshotSourceDiskEncryptionKey": {
                "kmsKeyServiceAccount": "kms_key_service_account",
                "rawKey": "raw_key"
            },
            "gcp:compute/getSubnetwork:getSubnetwork": {
                "gatewayAddress": "gateway_address",
                "ipCidrRange": "ip_cidr_range",
                "privateIpGoogleAccess": "private_ip_google_access",
                "secondaryIpRanges": "secondary_ip_range",
                "selfLink": "self_link"
            },
            "gcp:compute/getSubnetworkIamPolicy:getSubnetworkIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/getSubnetworkSecondaryIpRange:getSubnetworkSecondaryIpRange": {
                "ipCidrRange": "ip_cidr_range",
                "rangeName": "range_name"
            },
            "gcp:compute/getVPNGateway:getVPNGateway": {
                "selfLink": "self_link"
            },
            "gcp:compute/globalAddress:GlobalAddress": {
                "addressType": "address_type",
                "creationTimestamp": "creation_timestamp",
                "ipVersion": "ip_version",
                "labelFingerprint": "label_fingerprint",
                "prefixLength": "prefix_length",
                "selfLink": "self_link"
            },
            "gcp:compute/globalForwardingRule:GlobalForwardingRule": {
                "allowPscGlobalAccess": "allow_psc_global_access",
                "baseForwardingRule": "base_forwarding_rule",
                "ipAddress": "ip_address",
                "ipProtocol": "ip_protocol",
                "ipVersion": "ip_version",
                "labelFingerprint": "label_fingerprint",
                "loadBalancingScheme": "load_balancing_scheme",
                "metadataFilters": "metadata_filters",
                "noAutomateDnsZone": "no_automate_dns_zone",
                "portRange": "port_range",
                "pscConnectionId": "psc_connection_id",
                "pscConnectionStatus": "psc_connection_status",
                "selfLink": "self_link",
                "sourceIpRanges": "source_ip_ranges"
            },
            "gcp:compute/globalNetworkEndpoint:GlobalNetworkEndpoint": {
                "globalNetworkEndpointGroup": "global_network_endpoint_group",
                "ipAddress": "ip_address"
            },
            "gcp:compute/globalNetworkEndpointGroup:GlobalNetworkEndpointGroup": {
                "defaultPort": "default_port",
                "networkEndpointType": "network_endpoint_type",
                "selfLink": "self_link"
            },
            "gcp:compute/haVpnGateway:HaVpnGateway": {
                "selfLink": "self_link",
                "stackType": "stack_type",
                "vpnInterfaces": "vpn_interfaces"
            },
            "gcp:compute/healthCheck:HealthCheck": {
                "checkIntervalSec": "check_interval_sec",
                "creationTimestamp": "creation_timestamp",
                "grpcHealthCheck": "grpc_health_check",
                "healthyThreshold": "healthy_threshold",
                "http2HealthCheck": "http2_health_check",
                "httpHealthCheck": "http_health_check",
                "httpsHealthCheck": "https_health_check",
                "logConfig": "log_config",
                "selfLink": "self_link",
                "sslHealthCheck": "ssl_health_check",
                "tcpHealthCheck": "tcp_health_check",
                "timeoutSec": "timeout_sec",
                "unhealthyThreshold": "unhealthy_threshold"
            },
            "gcp:compute/httpHealthCheck:HttpHealthCheck": {
                "checkIntervalSec": "check_interval_sec",
                "creationTimestamp": "creation_timestamp",
                "healthyThreshold": "healthy_threshold",
                "requestPath": "request_path",
                "selfLink": "self_link",
                "timeoutSec": "timeout_sec",
                "unhealthyThreshold": "unhealthy_threshold"
            },
            "gcp:compute/httpsHealthCheck:HttpsHealthCheck": {
                "checkIntervalSec": "check_interval_sec",
                "creationTimestamp": "creation_timestamp",
                "healthyThreshold": "healthy_threshold",
                "requestPath": "request_path",
                "selfLink": "self_link",
                "timeoutSec": "timeout_sec",
                "unhealthyThreshold": "unhealthy_threshold"
            },
            "gcp:compute/image:Image": {
                "archiveSizeBytes": "archive_size_bytes",
                "creationTimestamp": "creation_timestamp",
                "diskSizeGb": "disk_size_gb",
                "guestOsFeatures": "guest_os_features",
                "imageEncryptionKey": "image_encryption_key",
                "labelFingerprint": "label_fingerprint",
                "rawDisk": "raw_disk",
                "selfLink": "self_link",
                "sourceDisk": "source_disk",
                "sourceImage": "source_image",
                "sourceSnapshot": "source_snapshot",
                "storageLocations": "storage_locations"
            },
            "gcp:compute/imageIamPolicy:ImageIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/instance:Instance": {
                "advancedMachineFeatures": "advanced_machine_features",
                "allowStoppingForUpdate": "allow_stopping_for_update",
                "attachedDisks": "attached_disk",
                "bootDisk": "boot_disk",
                "canIpForward": "can_ip_forward",
                "confidentialInstanceConfig": "confidential_instance_config",
                "cpuPlatform": "cpu_platform",
                "currentStatus": "current_status",
                "deletionProtection": "deletion_protection",
                "desiredStatus": "desired_status",
                "enableDisplay": "enable_display",
                "guestAccelerators": "guest_accelerator",
                "instanceId": "instance_id",
                "labelFingerprint": "label_fingerprint",
                "machineType": "machine_type",
                "metadataFingerprint": "metadata_fingerprint",
                "metadataStartupScript": "metadata_startup_script",
                "minCpuPlatform": "min_cpu_platform",
                "networkInterfaces": "network_interface",
                "networkPerformanceConfig": "network_performance_config",
                "reservationAffinity": "reservation_affinity",
                "resourcePolicies": "resource_policies",
                "scratchDisks": "scratch_disk",
                "selfLink": "self_link",
                "serviceAccount": "service_account",
                "shieldedInstanceConfig": "shielded_instance_config",
                "tagsFingerprint": "tags_fingerprint"
            },
            "gcp:compute/instanceFromMachineImage:InstanceFromMachineImage": {
                "advancedMachineFeatures": "advanced_machine_features",
                "allowStoppingForUpdate": "allow_stopping_for_update",
                "attachedDisks": "attached_disk",
                "bootDisks": "boot_disk",
                "canIpForward": "can_ip_forward",
                "confidentialInstanceConfig": "confidential_instance_config",
                "cpuPlatform": "cpu_platform",
                "currentStatus": "current_status",
                "deletionProtection": "deletion_protection",
                "desiredStatus": "desired_status",
                "enableDisplay": "enable_display",
                "guestAccelerators": "guest_accelerator",
                "instanceId": "instance_id",
                "labelFingerprint": "label_fingerprint",
                "machineType": "machine_type",
                "metadataFingerprint": "metadata_fingerprint",
                "metadataStartupScript": "metadata_startup_script",
                "minCpuPlatform": "min_cpu_platform",
                "networkInterfaces": "network_interface",
                "networkPerformanceConfig": "network_performance_config",
                "reservationAffinity": "reservation_affinity",
                "resourcePolicies": "resource_policies",
                "scratchDisks": "scratch_disk",
                "selfLink": "self_link",
                "serviceAccount": "service_account",
                "shieldedInstanceConfig": "shielded_instance_config",
                "sourceMachineImage": "source_machine_image",
                "tagsFingerprint": "tags_fingerprint"
            },
            "gcp:compute/instanceFromTemplate:InstanceFromTemplate": {
                "advancedMachineFeatures": "advanced_machine_features",
                "allowStoppingForUpdate": "allow_stopping_for_update",
                "attachedDisks": "attached_disk",
                "bootDisk": "boot_disk",
                "canIpForward": "can_ip_forward",
                "confidentialInstanceConfig": "confidential_instance_config",
                "cpuPlatform": "cpu_platform",
                "currentStatus": "current_status",
                "deletionProtection": "deletion_protection",
                "desiredStatus": "desired_status",
                "enableDisplay": "enable_display",
                "guestAccelerators": "guest_accelerator",
                "instanceId": "instance_id",
                "labelFingerprint": "label_fingerprint",
                "machineType": "machine_type",
                "metadataFingerprint": "metadata_fingerprint",
                "metadataStartupScript": "metadata_startup_script",
                "minCpuPlatform": "min_cpu_platform",
                "networkInterfaces": "network_interface",
                "networkPerformanceConfig": "network_performance_config",
                "reservationAffinity": "reservation_affinity",
                "resourcePolicies": "resource_policies",
                "scratchDisks": "scratch_disk",
                "selfLink": "self_link",
                "serviceAccount": "service_account",
                "shieldedInstanceConfig": "shielded_instance_config",
                "sourceInstanceTemplate": "source_instance_template",
                "tagsFingerprint": "tags_fingerprint"
            },
            "gcp:compute/instanceGroup:InstanceGroup": {
                "namedPorts": "named_port",
                "selfLink": "self_link"
            },
            "gcp:compute/instanceGroupManager:InstanceGroupManager": {
                "allInstancesConfig": "all_instances_config",
                "autoHealingPolicies": "auto_healing_policies",
                "baseInstanceName": "base_instance_name",
                "instanceGroup": "instance_group",
                "instanceLifecyclePolicy": "instance_lifecycle_policy",
                "listManagedInstancesResults": "list_managed_instances_results",
                "namedPorts": "named_port",
                "selfLink": "self_link",
                "statefulDisks": "stateful_disk",
                "statefulExternalIps": "stateful_external_ip",
                "statefulInternalIps": "stateful_internal_ip",
                "statuses": "status",
                "targetPools": "target_pools",
                "targetSize": "target_size",
                "updatePolicy": "update_policy",
                "versions": "version",
                "waitForInstances": "wait_for_instances",
                "waitForInstancesStatus": "wait_for_instances_status"
            },
            "gcp:compute/instanceIAMBinding:InstanceIAMBinding": {
                "instanceName": "instance_name"
            },
            "gcp:compute/instanceIAMMember:InstanceIAMMember": {
                "instanceName": "instance_name"
            },
            "gcp:compute/instanceIAMPolicy:InstanceIAMPolicy": {
                "instanceName": "instance_name",
                "policyData": "policy_data"
            },
            "gcp:compute/instanceTemplate:InstanceTemplate": {
                "advancedMachineFeatures": "advanced_machine_features",
                "canIpForward": "can_ip_forward",
                "confidentialInstanceConfig": "confidential_instance_config",
                "disks": "disk",
                "enableDisplay": "enable_display",
                "guestAccelerators": "guest_accelerator",
                "instanceDescription": "instance_description",
                "machineType": "machine_type",
                "metadataFingerprint": "metadata_fingerprint",
                "metadataStartupScript": "metadata_startup_script",
                "minCpuPlatform": "min_cpu_platform",
                "namePrefix": "name_prefix",
                "networkInterfaces": "network_interface",
                "networkPerformanceConfig": "network_performance_config",
                "reservationAffinity": "reservation_affinity",
                "resourcePolicies": "resource_policies",
                "selfLink": "self_link",
                "selfLinkUnique": "self_link_unique",
                "serviceAccount": "service_account",
                "shieldedInstanceConfig": "shielded_instance_config",
                "tagsFingerprint": "tags_fingerprint"
            },
            "gcp:compute/interconnectAttachment:InterconnectAttachment": {
                "adminEnabled": "admin_enabled",
                "candidateSubnets": "candidate_subnets",
                "cloudRouterIpAddress": "cloud_router_ip_address",
                "creationTimestamp": "creation_timestamp",
                "customerRouterIpAddress": "customer_router_ip_address",
                "edgeAvailabilityDomain": "edge_availability_domain",
                "googleReferenceId": "google_reference_id",
                "ipsecInternalAddresses": "ipsec_internal_addresses",
                "pairingKey": "pairing_key",
                "partnerAsn": "partner_asn",
                "privateInterconnectInfos": "private_interconnect_info",
                "selfLink": "self_link",
                "vlanTag8021q": "vlan_tag8021q"
            },
            "gcp:compute/machineImage:MachineImage": {
                "guestFlush": "guest_flush",
                "machineImageEncryptionKey": "machine_image_encryption_key",
                "selfLink": "self_link",
                "sourceInstance": "source_instance",
                "storageLocations": "storage_locations"
            },
            "gcp:compute/machineImageIamBinding:MachineImageIamBinding": {
                "machineImage": "machine_image"
            },
            "gcp:compute/machineImageIamMember:MachineImageIamMember": {
                "machineImage": "machine_image"
            },
            "gcp:compute/machineImageIamPolicy:MachineImageIamPolicy": {
                "machineImage": "machine_image",
                "policyData": "policy_data"
            },
            "gcp:compute/managedSslCertificate:ManagedSslCertificate": {
                "certificateId": "certificate_id",
                "creationTimestamp": "creation_timestamp",
                "expireTime": "expire_time",
                "selfLink": "self_link",
                "subjectAlternativeNames": "subject_alternative_names"
            },
            "gcp:compute/mangedSslCertificate:MangedSslCertificate": {
                "certificateId": "certificate_id",
                "creationTimestamp": "creation_timestamp",
                "expireTime": "expire_time",
                "selfLink": "self_link",
                "subjectAlternativeNames": "subject_alternative_names"
            },
            "gcp:compute/network:Network": {
                "autoCreateSubnetworks": "auto_create_subnetworks",
                "deleteDefaultRoutesOnCreate": "delete_default_routes_on_create",
                "enableUlaInternalIpv6": "enable_ula_internal_ipv6",
                "gatewayIpv4": "gateway_ipv4",
                "internalIpv6Range": "internal_ipv6_range",
                "networkFirewallPolicyEnforcementOrder": "network_firewall_policy_enforcement_order",
                "routingMode": "routing_mode",
                "selfLink": "self_link"
            },
            "gcp:compute/networkEdgeSecurityService:NetworkEdgeSecurityService": {
                "creationTimestamp": "creation_timestamp",
                "securityPolicy": "security_policy",
                "selfLink": "self_link",
                "selfLinkWithServiceId": "self_link_with_service_id",
                "serviceId": "service_id"
            },
            "gcp:compute/networkEndpoint:NetworkEndpoint": {
                "ipAddress": "ip_address",
                "networkEndpointGroup": "network_endpoint_group"
            },
            "gcp:compute/networkEndpointGroup:NetworkEndpointGroup": {
                "defaultPort": "default_port",
                "networkEndpointType": "network_endpoint_type",
                "selfLink": "self_link"
            },
            "gcp:compute/networkEndpointList:NetworkEndpointList": {
                "networkEndpointGroup": "network_endpoint_group",
                "networkEndpoints": "network_endpoints"
            },
            "gcp:compute/networkFirewallPolicy:NetworkFirewallPolicy": {
                "creationTimestamp": "creation_timestamp",
                "networkFirewallPolicyId": "network_firewall_policy_id",
                "ruleTupleCount": "rule_tuple_count",
                "selfLink": "self_link",
                "selfLinkWithId": "self_link_with_id"
            },
            "gcp:compute/networkFirewallPolicyAssociation:NetworkFirewallPolicyAssociation": {
                "attachmentTarget": "attachment_target",
                "firewallPolicy": "firewall_policy",
                "shortName": "short_name"
            },
            "gcp:compute/networkFirewallPolicyRule:NetworkFirewallPolicyRule": {
                "enableLogging": "enable_logging",
                "firewallPolicy": "firewall_policy",
                "ruleName": "rule_name",
                "ruleTupleCount": "rule_tuple_count",
                "targetSecureTags": "target_secure_tags",
                "targetServiceAccounts": "target_service_accounts"
            },
            "gcp:compute/networkPeering:NetworkPeering": {
                "exportCustomRoutes": "export_custom_routes",
                "exportSubnetRoutesWithPublicIp": "export_subnet_routes_with_public_ip",
                "importCustomRoutes": "import_custom_routes",
                "importSubnetRoutesWithPublicIp": "import_subnet_routes_with_public_ip",
                "peerNetwork": "peer_network",
                "stackType": "stack_type",
                "stateDetails": "state_details"
            },
            "gcp:compute/networkPeeringRoutesConfig:NetworkPeeringRoutesConfig": {
                "exportCustomRoutes": "export_custom_routes",
                "importCustomRoutes": "import_custom_routes"
            },
            "gcp:compute/nodeGroup:NodeGroup": {
                "autoscalingPolicy": "autoscaling_policy",
                "creationTimestamp": "creation_timestamp",
                "initialSize": "initial_size",
                "maintenancePolicy": "maintenance_policy",
                "maintenanceWindow": "maintenance_window",
                "nodeTemplate": "node_template",
                "selfLink": "self_link",
                "shareSettings": "share_settings"
            },
            "gcp:compute/nodeTemplate:NodeTemplate": {
                "cpuOvercommitType": "cpu_overcommit_type",
                "creationTimestamp": "creation_timestamp",
                "nodeAffinityLabels": "node_affinity_labels",
                "nodeType": "node_type",
                "nodeTypeFlexibility": "node_type_flexibility",
                "selfLink": "self_link",
                "serverBinding": "server_binding"
            },
            "gcp:compute/organizationSecurityPolicy:OrganizationSecurityPolicy": {
                "displayName": "display_name",
                "policyId": "policy_id"
            },
            "gcp:compute/organizationSecurityPolicyAssociation:OrganizationSecurityPolicyAssociation": {
                "attachmentId": "attachment_id",
                "displayName": "display_name",
                "policyId": "policy_id"
            },
            "gcp:compute/organizationSecurityPolicyRule:OrganizationSecurityPolicyRule": {
                "enableLogging": "enable_logging",
                "policyId": "policy_id",
                "targetResources": "target_resources",
                "targetServiceAccounts": "target_service_accounts"
            },
            "gcp:compute/packetMirroring:PacketMirroring": {
                "collectorIlb": "collector_ilb",
                "mirroredResources": "mirrored_resources"
            },
            "gcp:compute/perInstanceConfig:PerInstanceConfig": {
                "instanceGroupManager": "instance_group_manager",
                "minimalAction": "minimal_action",
                "mostDisruptiveAllowedAction": "most_disruptive_allowed_action",
                "preservedState": "preserved_state",
                "removeInstanceStateOnDestroy": "remove_instance_state_on_destroy"
            },
            "gcp:compute/projectDefaultNetworkTier:ProjectDefaultNetworkTier": {
                "networkTier": "network_tier"
            },
            "gcp:compute/publicAdvertisedPrefix:PublicAdvertisedPrefix": {
                "dnsVerificationIp": "dns_verification_ip",
                "ipCidrRange": "ip_cidr_range",
                "selfLink": "self_link"
            },
            "gcp:compute/publicDelegatedPrefix:PublicDelegatedPrefix": {
                "ipCidrRange": "ip_cidr_range",
                "isLiveMigration": "is_live_migration",
                "parentPrefix": "parent_prefix",
                "selfLink": "self_link"
            },
            "gcp:compute/regionAutoscaler:RegionAutoscaler": {
                "autoscalingPolicy": "autoscaling_policy",
                "creationTimestamp": "creation_timestamp",
                "selfLink": "self_link"
            },
            "gcp:compute/regionBackendService:RegionBackendService": {
                "affinityCookieTtlSec": "affinity_cookie_ttl_sec",
                "backends": "backend",
                "cdnPolicy": "cdn_policy",
                "circuitBreakers": "circuit_breakers",
                "connectionDrainingTimeoutSec": "connection_draining_timeout_sec",
                "connectionTrackingPolicy": "connection_tracking_policy",
                "consistentHash": "consistent_hash",
                "creationTimestamp": "creation_timestamp",
                "enableCdn": "enable_cdn",
                "failoverPolicy": "failover_policy",
                "healthChecks": "health_checks",
                "loadBalancingScheme": "load_balancing_scheme",
                "localityLbPolicy": "locality_lb_policy",
                "logConfig": "log_config",
                "outlierDetection": "outlier_detection",
                "portName": "port_name",
                "securityPolicy": "security_policy",
                "selfLink": "self_link",
                "sessionAffinity": "session_affinity",
                "timeoutSec": "timeout_sec"
            },
            "gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/regionCommitment:RegionCommitment": {
                "autoRenew": "auto_renew",
                "commitmentId": "commitment_id",
                "creationTimestamp": "creation_timestamp",
                "endTimestamp": "end_timestamp",
                "licenseResource": "license_resource",
                "selfLink": "self_link",
                "startTimestamp": "start_timestamp",
                "statusMessage": "status_message"
            },
            "gcp:compute/regionDisk:RegionDisk": {
                "asyncPrimaryDisk": "async_primary_disk",
                "creationTimestamp": "creation_timestamp",
                "diskEncryptionKey": "disk_encryption_key",
                "guestOsFeatures": "guest_os_features",
                "labelFingerprint": "label_fingerprint",
                "lastAttachTimestamp": "last_attach_timestamp",
                "lastDetachTimestamp": "last_detach_timestamp",
                "physicalBlockSizeBytes": "physical_block_size_bytes",
                "replicaZones": "replica_zones",
                "selfLink": "self_link",
                "sourceDisk": "source_disk",
                "sourceDiskId": "source_disk_id",
                "sourceSnapshotEncryptionKey": "source_snapshot_encryption_key",
                "sourceSnapshotId": "source_snapshot_id"
            },
            "gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/regionHealthCheck:RegionHealthCheck": {
                "checkIntervalSec": "check_interval_sec",
                "creationTimestamp": "creation_timestamp",
                "grpcHealthCheck": "grpc_health_check",
                "healthyThreshold": "healthy_threshold",
                "http2HealthCheck": "http2_health_check",
                "httpHealthCheck": "http_health_check",
                "httpsHealthCheck": "https_health_check",
                "logConfig": "log_config",
                "selfLink": "self_link",
                "sslHealthCheck": "ssl_health_check",
                "tcpHealthCheck": "tcp_health_check",
                "timeoutSec": "timeout_sec",
                "unhealthyThreshold": "unhealthy_threshold"
            },
            "gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager": {
                "allInstancesConfig": "all_instances_config",
                "autoHealingPolicies": "auto_healing_policies",
                "baseInstanceName": "base_instance_name",
                "distributionPolicyTargetShape": "distribution_policy_target_shape",
                "distributionPolicyZones": "distribution_policy_zones",
                "instanceGroup": "instance_group",
                "instanceLifecyclePolicy": "instance_lifecycle_policy",
                "listManagedInstancesResults": "list_managed_instances_results",
                "namedPorts": "named_port",
                "selfLink": "self_link",
                "statefulDisks": "stateful_disk",
                "statefulExternalIps": "stateful_external_ip",
                "statefulInternalIps": "stateful_internal_ip",
                "statuses": "status",
                "targetPools": "target_pools",
                "targetSize": "target_size",
                "updatePolicy": "update_policy",
                "versions": "version",
                "waitForInstances": "wait_for_instances",
                "waitForInstancesStatus": "wait_for_instances_status"
            },
            "gcp:compute/regionInstanceTemplate:RegionInstanceTemplate": {
                "advancedMachineFeatures": "advanced_machine_features",
                "canIpForward": "can_ip_forward",
                "confidentialInstanceConfig": "confidential_instance_config",
                "disks": "disk",
                "enableDisplay": "enable_display",
                "guestAccelerators": "guest_accelerator",
                "instanceDescription": "instance_description",
                "machineType": "machine_type",
                "metadataFingerprint": "metadata_fingerprint",
                "metadataStartupScript": "metadata_startup_script",
                "minCpuPlatform": "min_cpu_platform",
                "namePrefix": "name_prefix",
                "networkInterfaces": "network_interface",
                "networkPerformanceConfig": "network_performance_config",
                "reservationAffinity": "reservation_affinity",
                "resourcePolicies": "resource_policies",
                "selfLink": "self_link",
                "serviceAccount": "service_account",
                "shieldedInstanceConfig": "shielded_instance_config",
                "tagsFingerprint": "tags_fingerprint"
            },
            "gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup": {
                "appEngine": "app_engine",
                "cloudFunction": "cloud_function",
                "cloudRun": "cloud_run",
                "networkEndpointType": "network_endpoint_type",
                "pscTargetService": "psc_target_service",
                "selfLink": "self_link",
                "serverlessDeployment": "serverless_deployment"
            },
            "gcp:compute/regionNetworkFirewallPolicy:RegionNetworkFirewallPolicy": {
                "creationTimestamp": "creation_timestamp",
                "regionNetworkFirewallPolicyId": "region_network_firewall_policy_id",
                "ruleTupleCount": "rule_tuple_count",
                "selfLink": "self_link",
                "selfLinkWithId": "self_link_with_id"
            },
            "gcp:compute/regionNetworkFirewallPolicyAssociation:RegionNetworkFirewallPolicyAssociation": {
                "attachmentTarget": "attachment_target",
                "firewallPolicy": "firewall_policy",
                "shortName": "short_name"
            },
            "gcp:compute/regionNetworkFirewallPolicyRule:RegionNetworkFirewallPolicyRule": {
                "enableLogging": "enable_logging",
                "firewallPolicy": "firewall_policy",
                "ruleName": "rule_name",
                "ruleTupleCount": "rule_tuple_count",
                "targetSecureTags": "target_secure_tags",
                "targetServiceAccounts": "target_service_accounts"
            },
            "gcp:compute/regionPerInstanceConfig:RegionPerInstanceConfig": {
                "minimalAction": "minimal_action",
                "mostDisruptiveAllowedAction": "most_disruptive_allowed_action",
                "preservedState": "preserved_state",
                "regionInstanceGroupManager": "region_instance_group_manager",
                "removeInstanceStateOnDestroy": "remove_instance_state_on_destroy"
            },
            "gcp:compute/regionSecurityPolicy:RegionSecurityPolicy": {
                "ddosProtectionConfig": "ddos_protection_config",
                "policyId": "policy_id",
                "selfLink": "self_link",
                "selfLinkWithPolicyId": "self_link_with_policy_id"
            },
            "gcp:compute/regionSslCertificate:RegionSslCertificate": {
                "certificateId": "certificate_id",
                "creationTimestamp": "creation_timestamp",
                "expireTime": "expire_time",
                "namePrefix": "name_prefix",
                "privateKey": "private_key",
                "selfLink": "self_link"
            },
            "gcp:compute/regionSslPolicy:RegionSslPolicy": {
                "creationTimestamp": "creation_timestamp",
                "customFeatures": "custom_features",
                "enabledFeatures": "enabled_features",
                "minTlsVersion": "min_tls_version",
                "selfLink": "self_link"
            },
            "gcp:compute/regionTargetHttpProxy:RegionTargetHttpProxy": {
                "creationTimestamp": "creation_timestamp",
                "proxyId": "proxy_id",
                "selfLink": "self_link",
                "urlMap": "url_map"
            },
            "gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy": {
                "creationTimestamp": "creation_timestamp",
                "proxyId": "proxy_id",
                "selfLink": "self_link",
                "sslCertificates": "ssl_certificates",
                "sslPolicy": "ssl_policy",
                "urlMap": "url_map"
            },
            "gcp:compute/regionTargetTcpProxy:RegionTargetTcpProxy": {
                "backendService": "backend_service",
                "creationTimestamp": "creation_timestamp",
                "proxyBind": "proxy_bind",
                "proxyHeader": "proxy_header",
                "proxyId": "proxy_id",
                "selfLink": "self_link"
            },
            "gcp:compute/regionUrlMap:RegionUrlMap": {
                "creationTimestamp": "creation_timestamp",
                "defaultRouteAction": "default_route_action",
                "defaultService": "default_service",
                "defaultUrlRedirect": "default_url_redirect",
                "hostRules": "host_rule",
                "mapId": "map_id",
                "pathMatchers": "path_matcher",
                "selfLink": "self_link",
                "tests": "test"
            },
            "gcp:compute/reservation:Reservation": {
                "creationTimestamp": "creation_timestamp",
                "selfLink": "self_link",
                "shareSettings": "share_settings",
                "specificReservation": "specific_reservation",
                "specificReservationRequired": "specific_reservation_required"
            },
            "gcp:compute/resourcePolicy:ResourcePolicy": {
                "diskConsistencyGroupPolicy": "disk_consistency_group_policy",
                "groupPlacementPolicy": "group_placement_policy",
                "instanceSchedulePolicy": "instance_schedule_policy",
                "selfLink": "self_link",
                "snapshotSchedulePolicy": "snapshot_schedule_policy"
            },
            "gcp:compute/route:Route": {
                "destRange": "dest_range",
                "nextHopGateway": "next_hop_gateway",
                "nextHopIlb": "next_hop_ilb",
                "nextHopInstance": "next_hop_instance",
                "nextHopInstanceZone": "next_hop_instance_zone",
                "nextHopIp": "next_hop_ip",
                "nextHopNetwork": "next_hop_network",
                "nextHopVpnTunnel": "next_hop_vpn_tunnel",
                "selfLink": "self_link"
            },
            "gcp:compute/router:Router": {
                "creationTimestamp": "creation_timestamp",
                "encryptedInterconnectRouter": "encrypted_interconnect_router",
                "selfLink": "self_link"
            },
            "gcp:compute/routerInterface:RouterInterface": {
                "interconnectAttachment": "interconnect_attachment",
                "ipRange": "ip_range",
                "privateIpAddress": "private_ip_address",
                "redundantInterface": "redundant_interface",
                "vpnTunnel": "vpn_tunnel"
            },
            "gcp:compute/routerNat:RouterNat": {
                "drainNatIps": "drain_nat_ips",
                "enableDynamicPortAllocation": "enable_dynamic_port_allocation",
                "enableEndpointIndependentMapping": "enable_endpoint_independent_mapping",
                "icmpIdleTimeoutSec": "icmp_idle_timeout_sec",
                "logConfig": "log_config",
                "maxPortsPerVm": "max_ports_per_vm",
                "minPortsPerVm": "min_ports_per_vm",
                "natIpAllocateOption": "nat_ip_allocate_option",
                "natIps": "nat_ips",
                "sourceSubnetworkIpRangesToNat": "source_subnetwork_ip_ranges_to_nat",
                "subnetworks": "subnetwork",
                "tcpEstablishedIdleTimeoutSec": "tcp_established_idle_timeout_sec",
                "tcpTimeWaitTimeoutSec": "tcp_time_wait_timeout_sec",
                "tcpTransitoryIdleTimeoutSec": "tcp_transitory_idle_timeout_sec",
                "udpIdleTimeoutSec": "udp_idle_timeout_sec"
            },
            "gcp:compute/routerPeer:RouterPeer": {
                "advertiseMode": "advertise_mode",
                "advertisedGroups": "advertised_groups",
                "advertisedIpRanges": "advertised_ip_ranges",
                "advertisedRoutePriority": "advertised_route_priority",
                "enableIpv6": "enable_ipv6",
                "ipAddress": "ip_address",
                "ipv6NexthopAddress": "ipv6_nexthop_address",
                "managementType": "management_type",
                "peerAsn": "peer_asn",
                "peerIpAddress": "peer_ip_address",
                "peerIpv6NexthopAddress": "peer_ipv6_nexthop_address",
                "routerApplianceInstance": "router_appliance_instance"
            },
            "gcp:compute/routerStatus:RouterStatus": {
                "bestRoutes": "best_routes",
                "bestRoutesForRouters": "best_routes_for_router"
            },
            "gcp:compute/sSLCertificate:SSLCertificate": {
                "certificateId": "certificate_id",
                "creationTimestamp": "creation_timestamp",
                "expireTime": "expire_time",
                "namePrefix": "name_prefix",
                "privateKey": "private_key",
                "selfLink": "self_link"
            },
            "gcp:compute/sSLPolicy:SSLPolicy": {
                "creationTimestamp": "creation_timestamp",
                "customFeatures": "custom_features",
                "enabledFeatures": "enabled_features",
                "minTlsVersion": "min_tls_version",
                "selfLink": "self_link"
            },
            "gcp:compute/securityPolicy:SecurityPolicy": {
                "adaptiveProtectionConfig": "adaptive_protection_config",
                "advancedOptionsConfig": "advanced_options_config",
                "recaptchaOptionsConfig": "recaptcha_options_config",
                "rules": "rule",
                "selfLink": "self_link"
            },
            "gcp:compute/securityScanConfig:SecurityScanConfig": {
                "blacklistPatterns": "blacklist_patterns",
                "displayName": "display_name",
                "exportToSecurityCommandCenter": "export_to_security_command_center",
                "maxQps": "max_qps",
                "startingUrls": "starting_urls",
                "targetPlatforms": "target_platforms",
                "userAgent": "user_agent"
            },
            "gcp:compute/serviceAttachment:ServiceAttachment": {
                "connectedEndpoints": "connected_endpoints",
                "connectionPreference": "connection_preference",
                "consumerAcceptLists": "consumer_accept_lists",
                "consumerRejectLists": "consumer_reject_lists",
                "domainNames": "domain_names",
                "enableProxyProtocol": "enable_proxy_protocol",
                "natSubnets": "nat_subnets",
                "reconcileConnections": "reconcile_connections",
                "selfLink": "self_link",
                "targetService": "target_service"
            },
            "gcp:compute/sharedVPCServiceProject:SharedVPCServiceProject": {
                "deletionPolicy": "deletion_policy",
                "hostProject": "host_project",
                "serviceProject": "service_project"
            },
            "gcp:compute/snapshot:Snapshot": {
                "chainName": "chain_name",
                "creationTimestamp": "creation_timestamp",
                "diskSizeGb": "disk_size_gb",
                "labelFingerprint": "label_fingerprint",
                "selfLink": "self_link",
                "snapshotEncryptionKey": "snapshot_encryption_key",
                "snapshotId": "snapshot_id",
                "sourceDisk": "source_disk",
                "sourceDiskEncryptionKey": "source_disk_encryption_key",
                "storageBytes": "storage_bytes",
                "storageLocations": "storage_locations"
            },
            "gcp:compute/snapshotIamPolicy:SnapshotIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/subnetwork:Subnetwork": {
                "creationTimestamp": "creation_timestamp",
                "externalIpv6Prefix": "external_ipv6_prefix",
                "gatewayAddress": "gateway_address",
                "ipCidrRange": "ip_cidr_range",
                "ipv6AccessType": "ipv6_access_type",
                "ipv6CidrRange": "ipv6_cidr_range",
                "logConfig": "log_config",
                "privateIpGoogleAccess": "private_ip_google_access",
                "privateIpv6GoogleAccess": "private_ipv6_google_access",
                "secondaryIpRanges": "secondary_ip_range",
                "selfLink": "self_link",
                "stackType": "stack_type"
            },
            "gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy": {
                "policyData": "policy_data"
            },
            "gcp:compute/targetGrpcProxy:TargetGrpcProxy": {
                "creationTimestamp": "creation_timestamp",
                "selfLink": "self_link",
                "selfLinkWithId": "self_link_with_id",
                "urlMap": "url_map",
                "validateForProxyless": "validate_for_proxyless"
            },
            "gcp:compute/targetHttpProxy:TargetHttpProxy": {
                "creationTimestamp": "creation_timestamp",
                "httpKeepAliveTimeoutSec": "http_keep_alive_timeout_sec",
                "proxyBind": "proxy_bind",
                "proxyId": "proxy_id",
                "selfLink": "self_link",
                "urlMap": "url_map"
            },
            "gcp:compute/targetHttpsProxy:TargetHttpsProxy": {
                "certificateMap": "certificate_map",
                "creationTimestamp": "creation_timestamp",
                "httpKeepAliveTimeoutSec": "http_keep_alive_timeout_sec",
                "proxyBind": "proxy_bind",
                "proxyId": "proxy_id",
                "quicOverride": "quic_override",
                "selfLink": "self_link",
                "sslCertificates": "ssl_certificates",
                "sslPolicy": "ssl_policy",
                "urlMap": "url_map"
            },
            "gcp:compute/targetInstance:TargetInstance": {
                "creationTimestamp": "creation_timestamp",
                "natPolicy": "nat_policy",
                "selfLink": "self_link"
            },
            "gcp:compute/targetPool:TargetPool": {
                "backupPool": "backup_pool",
                "failoverRatio": "failover_ratio",
                "healthChecks": "health_checks",
                "selfLink": "self_link",
                "sessionAffinity": "session_affinity"
            },
            "gcp:compute/targetSSLProxy:TargetSSLProxy": {
                "backendService": "backend_service",
                "certificateMap": "certificate_map",
                "creationTimestamp": "creation_timestamp",
                "proxyHeader": "proxy_header",
                "proxyId": "proxy_id",
                "selfLink": "self_link",
                "sslCertificates": "ssl_certificates",
                "sslPolicy": "ssl_policy"
            },
            "gcp:compute/targetTCPProxy:TargetTCPProxy": {
                "backendService": "backend_service",
                "creationTimestamp": "creation_timestamp",
                "proxyBind": "proxy_bind",
                "proxyHeader": "proxy_header",
                "proxyId": "proxy_id",
                "selfLink": "self_link"
            },
            "gcp:compute/uRLMap:URLMap": {
                "creationTimestamp": "creation_timestamp",
                "defaultRouteAction": "default_route_action",
                "defaultService": "default_service",
                "defaultUrlRedirect": "default_url_redirect",
                "headerAction": "header_action",
                "hostRules": "host_rule",
                "mapId": "map_id",
                "pathMatchers": "path_matcher",
                "selfLink": "self_link",
                "tests": "test"
            },
            "gcp:compute/vPNGateway:VPNGateway": {
                "creationTimestamp": "creation_timestamp",
                "gatewayId": "gateway_id",
                "selfLink": "self_link"
            },
            "gcp:compute/vPNTunnel:VPNTunnel": {
                "creationTimestamp": "creation_timestamp",
                "detailedStatus": "detailed_status",
                "ikeVersion": "ike_version",
                "labelFingerprint": "label_fingerprint",
                "localTrafficSelectors": "local_traffic_selector",
                "peerExternalGateway": "peer_external_gateway",
                "peerExternalGatewayInterface": "peer_external_gateway_interface",
                "peerGcpGateway": "peer_gcp_gateway",
                "peerIp": "peer_ip",
                "remoteTrafficSelectors": "remote_traffic_selector",
                "selfLink": "self_link",
                "sharedSecret": "shared_secret",
                "sharedSecretHash": "shared_secret_hash",
                "targetVpnGateway": "target_vpn_gateway",
                "tunnelId": "tunnel_id",
                "vpnGateway": "vpn_gateway",
                "vpnGatewayInterface": "vpn_gateway_interface"
            },
            "gcp:config/batching:batching": {
                "enableBatching": "enable_batching",
                "sendAfter": "send_after"
            },
            "gcp:container/AttachedClusterAuthorization:AttachedClusterAuthorization": {
                "adminUsers": "admin_users"
            },
            "gcp:container/AttachedClusterLoggingConfig:AttachedClusterLoggingConfig": {
                "componentConfig": "component_config"
            },
            "gcp:container/AttachedClusterLoggingConfigComponentConfig:AttachedClusterLoggingConfigComponentConfig": {
                "enableComponents": "enable_components"
            },
            "gcp:container/AttachedClusterMonitoringConfig:AttachedClusterMonitoringConfig": {
                "managedPrometheusConfig": "managed_prometheus_config"
            },
            "gcp:container/AttachedClusterOidcConfig:AttachedClusterOidcConfig": {
                "issuerUrl": "issuer_url"
            },
            "gcp:container/AttachedClusterWorkloadIdentityConfig:AttachedClusterWorkloadIdentityConfig": {
                "identityProvider": "identity_provider",
                "issuerUri": "issuer_uri",
                "workloadPool": "workload_pool"
            },
            "gcp:container/AwsClusterAuthorization:AwsClusterAuthorization": {
                "adminUsers": "admin_users"
            },
            "gcp:container/AwsClusterControlPlane:AwsClusterControlPlane": {
                "awsServicesAuthentication": "aws_services_authentication",
                "configEncryption": "config_encryption",
                "databaseEncryption": "database_encryption",
                "iamInstanceProfile": "iam_instance_profile",
                "instancePlacement": "instance_placement",
                "instanceType": "instance_type",
                "mainVolume": "main_volume",
                "proxyConfig": "proxy_config",
                "rootVolume": "root_volume",
                "securityGroupIds": "security_group_ids",
                "sshConfig": "ssh_config",
                "subnetIds": "subnet_ids"
            },
            "gcp:container/AwsClusterControlPlaneAwsServicesAuthentication:AwsClusterControlPlaneAwsServicesAuthentication": {
                "roleArn": "role_arn",
                "roleSessionName": "role_session_name"
            },
            "gcp:container/AwsClusterControlPlaneConfigEncryption:AwsClusterControlPlaneConfigEncryption": {
                "kmsKeyArn": "kms_key_arn"
            },
            "gcp:container/AwsClusterControlPlaneDatabaseEncryption:AwsClusterControlPlaneDatabaseEncryption": {
                "kmsKeyArn": "kms_key_arn"
            },
            "gcp:container/AwsClusterControlPlaneMainVolume:AwsClusterControlPlaneMainVolume": {
                "kmsKeyArn": "kms_key_arn",
                "sizeGib": "size_gib",
                "volumeType": "volume_type"
            },
            "gcp:container/AwsClusterControlPlaneProxyConfig:AwsClusterControlPlaneProxyConfig": {
                "secretArn": "secret_arn",
                "secretVersion": "secret_version"
            },
            "gcp:container/AwsClusterControlPlaneRootVolume:AwsClusterControlPlaneRootVolume": {
                "kmsKeyArn": "kms_key_arn",
                "sizeGib": "size_gib",
                "volumeType": "volume_type"
            },
            "gcp:container/AwsClusterControlPlaneSshConfig:AwsClusterControlPlaneSshConfig": {
                "ec2KeyPair": "ec2_key_pair"
            },
            "gcp:container/AwsClusterLoggingConfig:AwsClusterLoggingConfig": {
                "componentConfig": "component_config"
            },
            "gcp:container/AwsClusterLoggingConfigComponentConfig:AwsClusterLoggingConfigComponentConfig": {
                "enableComponents": "enable_components"
            },
            "gcp:container/AwsClusterNetworking:AwsClusterNetworking": {
                "perNodePoolSgRulesDisabled": "per_node_pool_sg_rules_disabled",
                "podAddressCidrBlocks": "pod_address_cidr_blocks",
                "serviceAddressCidrBlocks": "service_address_cidr_blocks",
                "vpcId": "vpc_id"
            },
            "gcp:container/AwsClusterWorkloadIdentityConfig:AwsClusterWorkloadIdentityConfig": {
                "identityProvider": "identity_provider",
                "issuerUri": "issuer_uri",
                "workloadPool": "workload_pool"
            },
            "gcp:container/AwsNodePoolAutoscaling:AwsNodePoolAutoscaling": {
                "maxNodeCount": "max_node_count",
                "minNodeCount": "min_node_count"
            },
            "gcp:container/AwsNodePoolConfig:AwsNodePoolConfig": {
                "autoscalingMetricsCollection": "autoscaling_metrics_collection",
                "configEncryption": "config_encryption",
                "iamInstanceProfile": "iam_instance_profile",
                "imageType": "image_type",
                "instancePlacement": "instance_placement",
                "instanceType": "instance_type",
                "proxyConfig": "proxy_config",
                "rootVolume": "root_volume",
                "securityGroupIds": "security_group_ids",
                "spotConfig": "spot_config",
                "sshConfig": "ssh_config"
            },
            "gcp:container/AwsNodePoolConfigConfigEncryption:AwsNodePoolConfigConfigEncryption": {
                "kmsKeyArn": "kms_key_arn"
            },
            "gcp:container/AwsNodePoolConfigProxyConfig:AwsNodePoolConfigProxyConfig": {
                "secretArn": "secret_arn",
                "secretVersion": "secret_version"
            },
            "gcp:container/AwsNodePoolConfigRootVolume:AwsNodePoolConfigRootVolume": {
                "kmsKeyArn": "kms_key_arn",
                "sizeGib": "size_gib",
                "volumeType": "volume_type"
            },
            "gcp:container/AwsNodePoolConfigSpotConfig:AwsNodePoolConfigSpotConfig": {
                "instanceTypes": "instance_types"
            },
            "gcp:container/AwsNodePoolConfigSshConfig:AwsNodePoolConfigSshConfig": {
                "ec2KeyPair": "ec2_key_pair"
            },
            "gcp:container/AwsNodePoolMaxPodsConstraint:AwsNodePoolMaxPodsConstraint": {
                "maxPodsPerNode": "max_pods_per_node"
            },
            "gcp:container/AzureClusterAuthorization:AzureClusterAuthorization": {
                "adminUsers": "admin_users"
            },
            "gcp:container/AzureClusterAzureServicesAuthentication:AzureClusterAzureServicesAuthentication": {
                "applicationId": "application_id",
                "tenantId": "tenant_id"
            },
            "gcp:container/AzureClusterControlPlane:AzureClusterControlPlane": {
                "databaseEncryption": "database_encryption",
                "mainVolume": "main_volume",
                "proxyConfig": "proxy_config",
                "replicaPlacements": "replica_placements",
                "rootVolume": "root_volume",
                "sshConfig": "ssh_config",
                "subnetId": "subnet_id",
                "vmSize": "vm_size"
            },
            "gcp:container/AzureClusterControlPlaneDatabaseEncryption:AzureClusterControlPlaneDatabaseEncryption": {
                "keyId": "key_id"
            },
            "gcp:container/AzureClusterControlPlaneMainVolume:AzureClusterControlPlaneMainVolume": {
                "sizeGib": "size_gib"
            },
            "gcp:container/AzureClusterControlPlaneProxyConfig:AzureClusterControlPlaneProxyConfig": {
                "resourceGroupId": "resource_group_id",
                "secretId": "secret_id"
            },
            "gcp:container/AzureClusterControlPlaneReplicaPlacement:AzureClusterControlPlaneReplicaPlacement": {
                "azureAvailabilityZone": "azure_availability_zone",
                "subnetId": "subnet_id"
            },
            "gcp:container/AzureClusterControlPlaneRootVolume:AzureClusterControlPlaneRootVolume": {
                "sizeGib": "size_gib"
            },
            "gcp:container/AzureClusterControlPlaneSshConfig:AzureClusterControlPlaneSshConfig": {
                "authorizedKey": "authorized_key"
            },
            "gcp:container/AzureClusterLoggingConfig:AzureClusterLoggingConfig": {
                "componentConfig": "component_config"
            },
            "gcp:container/AzureClusterLoggingConfigComponentConfig:AzureClusterLoggingConfigComponentConfig": {
                "enableComponents": "enable_components"
            },
            "gcp:container/AzureClusterNetworking:AzureClusterNetworking": {
                "podAddressCidrBlocks": "pod_address_cidr_blocks",
                "serviceAddressCidrBlocks": "service_address_cidr_blocks",
                "virtualNetworkId": "virtual_network_id"
            },
            "gcp:container/AzureClusterWorkloadIdentityConfig:AzureClusterWorkloadIdentityConfig": {
                "identityProvider": "identity_provider",
                "issuerUri": "issuer_uri",
                "workloadPool": "workload_pool"
            },
            "gcp:container/AzureNodePoolAutoscaling:AzureNodePoolAutoscaling": {
                "maxNodeCount": "max_node_count",
                "minNodeCount": "min_node_count"
            },
            "gcp:container/AzureNodePoolConfig:AzureNodePoolConfig": {
                "imageType": "image_type",
                "proxyConfig": "proxy_config",
                "rootVolume": "root_volume",
                "sshConfig": "ssh_config",
                "vmSize": "vm_size"
            },
            "gcp:container/AzureNodePoolConfigProxyConfig:AzureNodePoolConfigProxyConfig": {
                "resourceGroupId": "resource_group_id",
                "secretId": "secret_id"
            },
            "gcp:container/AzureNodePoolConfigRootVolume:AzureNodePoolConfigRootVolume": {
                "sizeGib": "size_gib"
            },
            "gcp:container/AzureNodePoolConfigSshConfig:AzureNodePoolConfigSshConfig": {
                "authorizedKey": "authorized_key"
            },
            "gcp:container/AzureNodePoolMaxPodsConstraint:AzureNodePoolMaxPodsConstraint": {
                "maxPodsPerNode": "max_pods_per_node"
            },
            "gcp:container/ClusterAddonsConfig:ClusterAddonsConfig": {
                "cloudrunConfig": "cloudrun_config",
                "configConnectorConfig": "config_connector_config",
                "dnsCacheConfig": "dns_cache_config",
                "gcePersistentDiskCsiDriverConfig": "gce_persistent_disk_csi_driver_config",
                "gcpFilestoreCsiDriverConfig": "gcp_filestore_csi_driver_config",
                "gcsFuseCsiDriverConfig": "gcs_fuse_csi_driver_config",
                "gkeBackupAgentConfig": "gke_backup_agent_config",
                "horizontalPodAutoscaling": "horizontal_pod_autoscaling",
                "httpLoadBalancing": "http_load_balancing",
                "istioConfig": "istio_config",
                "kalmConfig": "kalm_config",
                "networkPolicyConfig": "network_policy_config"
            },
            "gcp:container/ClusterAddonsConfigCloudrunConfig:ClusterAddonsConfigCloudrunConfig": {
                "loadBalancerType": "load_balancer_type"
            },
            "gcp:container/ClusterAuthenticatorGroupsConfig:ClusterAuthenticatorGroupsConfig": {
                "securityGroup": "security_group"
            },
            "gcp:container/ClusterBinaryAuthorization:ClusterBinaryAuthorization": {
                "evaluationMode": "evaluation_mode"
            },
            "gcp:container/ClusterClusterAutoscaling:ClusterClusterAutoscaling": {
                "autoProvisioningDefaults": "auto_provisioning_defaults",
                "autoscalingProfile": "autoscaling_profile",
                "resourceLimits": "resource_limits"
            },
            "gcp:container/ClusterClusterAutoscalingAutoProvisioningDefaults:ClusterClusterAutoscalingAutoProvisioningDefaults": {
                "bootDiskKmsKey": "boot_disk_kms_key",
                "diskSize": "disk_size",
                "diskType": "disk_type",
                "imageType": "image_type",
                "minCpuPlatform": "min_cpu_platform",
                "oauthScopes": "oauth_scopes",
                "serviceAccount": "service_account",
                "shieldedInstanceConfig": "shielded_instance_config",
                "upgradeSettings": "upgrade_settings"
            },
            "gcp:container/ClusterClusterAutoscalingAutoProvisioningDefaultsManagement:ClusterClusterAutoscalingAutoProvisioningDefaultsManagement": {
                "autoRepair": "auto_repair",
                "autoUpgrade": "auto_upgrade",
                "upgradeOptions": "upgrade_options"
            },
            "gcp:container/ClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOption:ClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOption": {
                "autoUpgradeStartTime": "auto_upgrade_start_time"
            },
            "gcp:container/ClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig:ClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot"
            },
            "gcp:container/ClusterClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings:ClusterClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings": {
                "blueGreenSettings": "blue_green_settings",
                "maxSurge": "max_surge",
                "maxUnavailable": "max_unavailable"
            },
            "gcp:container/ClusterClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings:ClusterClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings": {
                "nodePoolSoakDuration": "node_pool_soak_duration",
                "standardRolloutPolicy": "standard_rollout_policy"
            },
            "gcp:container/ClusterClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy:ClusterClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy": {
                "batchNodeCount": "batch_node_count",
                "batchPercentage": "batch_percentage",
                "batchSoakDuration": "batch_soak_duration"
            },
            "gcp:container/ClusterClusterAutoscalingResourceLimit:ClusterClusterAutoscalingResourceLimit": {
                "resourceType": "resource_type"
            },
            "gcp:container/ClusterDatabaseEncryption:ClusterDatabaseEncryption": {
                "keyName": "key_name"
            },
            "gcp:container/ClusterDnsConfig:ClusterDnsConfig": {
                "clusterDns": "cluster_dns",
                "clusterDnsDomain": "cluster_dns_domain",
                "clusterDnsScope": "cluster_dns_scope"
            },
            "gcp:container/ClusterIpAllocationPolicy:ClusterIpAllocationPolicy": {
                "clusterIpv4CidrBlock": "cluster_ipv4_cidr_block",
                "clusterSecondaryRangeName": "cluster_secondary_range_name",
                "podCidrOverprovisionConfig": "pod_cidr_overprovision_config",
                "servicesIpv4CidrBlock": "services_ipv4_cidr_block",
                "servicesSecondaryRangeName": "services_secondary_range_name",
                "stackType": "stack_type"
            },
            "gcp:container/ClusterLoggingConfig:ClusterLoggingConfig": {
                "enableComponents": "enable_components"
            },
            "gcp:container/ClusterMaintenancePolicy:ClusterMaintenancePolicy": {
                "dailyMaintenanceWindow": "daily_maintenance_window",
                "maintenanceExclusions": "maintenance_exclusion",
                "recurringWindow": "recurring_window"
            },
            "gcp:container/ClusterMaintenancePolicyDailyMaintenanceWindow:ClusterMaintenancePolicyDailyMaintenanceWindow": {
                "startTime": "start_time"
            },
            "gcp:container/ClusterMaintenancePolicyMaintenanceExclusion:ClusterMaintenancePolicyMaintenanceExclusion": {
                "endTime": "end_time",
                "exclusionName": "exclusion_name",
                "exclusionOptions": "exclusion_options",
                "startTime": "start_time"
            },
            "gcp:container/ClusterMaintenancePolicyRecurringWindow:ClusterMaintenancePolicyRecurringWindow": {
                "endTime": "end_time",
                "startTime": "start_time"
            },
            "gcp:container/ClusterMasterAuth:ClusterMasterAuth": {
                "clientCertificate": "client_certificate",
                "clientCertificateConfig": "client_certificate_config",
                "clientKey": "client_key",
                "clusterCaCertificate": "cluster_ca_certificate"
            },
            "gcp:container/ClusterMasterAuthClientCertificateConfig:ClusterMasterAuthClientCertificateConfig": {
                "issueClientCertificate": "issue_client_certificate"
            },
            "gcp:container/ClusterMasterAuthorizedNetworksConfig:ClusterMasterAuthorizedNetworksConfig": {
                "cidrBlocks": "cidr_blocks",
                "gcpPublicCidrsAccessEnabled": "gcp_public_cidrs_access_enabled"
            },
            "gcp:container/ClusterMasterAuthorizedNetworksConfigCidrBlock:ClusterMasterAuthorizedNetworksConfigCidrBlock": {
                "cidrBlock": "cidr_block",
                "displayName": "display_name"
            },
            "gcp:container/ClusterMeshCertificates:ClusterMeshCertificates": {
                "enableCertificates": "enable_certificates"
            },
            "gcp:container/ClusterMonitoringConfig:ClusterMonitoringConfig": {
                "enableComponents": "enable_components",
                "managedPrometheus": "managed_prometheus"
            },
            "gcp:container/ClusterNodeConfig:ClusterNodeConfig": {
                "advancedMachineFeatures": "advanced_machine_features",
                "bootDiskKmsKey": "boot_disk_kms_key",
                "diskSizeGb": "disk_size_gb",
                "diskType": "disk_type",
                "ephemeralStorageConfig": "ephemeral_storage_config",
                "ephemeralStorageLocalSsdConfig": "ephemeral_storage_local_ssd_config",
                "gcfsConfig": "gcfs_config",
                "guestAccelerators": "guest_accelerator",
                "imageType": "image_type",
                "kubeletConfig": "kubelet_config",
                "linuxNodeConfig": "linux_node_config",
                "localNvmeSsdBlockConfig": "local_nvme_ssd_block_config",
                "localSsdCount": "local_ssd_count",
                "loggingVariant": "logging_variant",
                "machineType": "machine_type",
                "minCpuPlatform": "min_cpu_platform",
                "nodeGroup": "node_group",
                "oauthScopes": "oauth_scopes",
                "reservationAffinity": "reservation_affinity",
                "resourceLabels": "resource_labels",
                "sandboxConfig": "sandbox_config",
                "serviceAccount": "service_account",
                "shieldedInstanceConfig": "shielded_instance_config",
                "soleTenantConfig": "sole_tenant_config",
                "taints": "taint",
                "workloadMetadataConfig": "workload_metadata_config"
            },
            "gcp:container/ClusterNodeConfigAdvancedMachineFeatures:ClusterNodeConfigAdvancedMachineFeatures": {
                "threadsPerCore": "threads_per_core"
            },
            "gcp:container/ClusterNodeConfigEphemeralStorageConfig:ClusterNodeConfigEphemeralStorageConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/ClusterNodeConfigEphemeralStorageLocalSsdConfig:ClusterNodeConfigEphemeralStorageLocalSsdConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/ClusterNodeConfigGuestAccelerator:ClusterNodeConfigGuestAccelerator": {
                "gpuDriverInstallationConfig": "gpu_driver_installation_config",
                "gpuPartitionSize": "gpu_partition_size",
                "gpuSharingConfig": "gpu_sharing_config"
            },
            "gcp:container/ClusterNodeConfigGuestAcceleratorGpuDriverInstallationConfig:ClusterNodeConfigGuestAcceleratorGpuDriverInstallationConfig": {
                "gpuDriverVersion": "gpu_driver_version"
            },
            "gcp:container/ClusterNodeConfigGuestAcceleratorGpuSharingConfig:ClusterNodeConfigGuestAcceleratorGpuSharingConfig": {
                "gpuSharingStrategy": "gpu_sharing_strategy",
                "maxSharedClientsPerGpu": "max_shared_clients_per_gpu"
            },
            "gcp:container/ClusterNodeConfigKubeletConfig:ClusterNodeConfigKubeletConfig": {
                "cpuCfsQuota": "cpu_cfs_quota",
                "cpuCfsQuotaPeriod": "cpu_cfs_quota_period",
                "cpuManagerPolicy": "cpu_manager_policy",
                "podPidsLimit": "pod_pids_limit"
            },
            "gcp:container/ClusterNodeConfigLocalNvmeSsdBlockConfig:ClusterNodeConfigLocalNvmeSsdBlockConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/ClusterNodeConfigReservationAffinity:ClusterNodeConfigReservationAffinity": {
                "consumeReservationType": "consume_reservation_type"
            },
            "gcp:container/ClusterNodeConfigSandboxConfig:ClusterNodeConfigSandboxConfig": {
                "sandboxType": "sandbox_type"
            },
            "gcp:container/ClusterNodeConfigShieldedInstanceConfig:ClusterNodeConfigShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot"
            },
            "gcp:container/ClusterNodeConfigSoleTenantConfig:ClusterNodeConfigSoleTenantConfig": {
                "nodeAffinities": "node_affinity"
            },
            "gcp:container/ClusterNodePool:ClusterNodePool": {
                "initialNodeCount": "initial_node_count",
                "instanceGroupUrls": "instance_group_urls",
                "managedInstanceGroupUrls": "managed_instance_group_urls",
                "maxPodsPerNode": "max_pods_per_node",
                "namePrefix": "name_prefix",
                "networkConfig": "network_config",
                "nodeConfig": "node_config",
                "nodeCount": "node_count",
                "nodeLocations": "node_locations",
                "placementPolicy": "placement_policy",
                "upgradeSettings": "upgrade_settings"
            },
            "gcp:container/ClusterNodePoolAutoConfig:ClusterNodePoolAutoConfig": {
                "networkTags": "network_tags"
            },
            "gcp:container/ClusterNodePoolAutoscaling:ClusterNodePoolAutoscaling": {
                "locationPolicy": "location_policy",
                "maxNodeCount": "max_node_count",
                "minNodeCount": "min_node_count",
                "totalMaxNodeCount": "total_max_node_count",
                "totalMinNodeCount": "total_min_node_count"
            },
            "gcp:container/ClusterNodePoolDefaults:ClusterNodePoolDefaults": {
                "nodeConfigDefaults": "node_config_defaults"
            },
            "gcp:container/ClusterNodePoolDefaultsNodeConfigDefaults:ClusterNodePoolDefaultsNodeConfigDefaults": {
                "gcfsConfig": "gcfs_config",
                "loggingVariant": "logging_variant"
            },
            "gcp:container/ClusterNodePoolManagement:ClusterNodePoolManagement": {
                "autoRepair": "auto_repair",
                "autoUpgrade": "auto_upgrade"
            },
            "gcp:container/ClusterNodePoolNetworkConfig:ClusterNodePoolNetworkConfig": {
                "additionalNodeNetworkConfigs": "additional_node_network_configs",
                "additionalPodNetworkConfigs": "additional_pod_network_configs",
                "createPodRange": "create_pod_range",
                "enablePrivateNodes": "enable_private_nodes",
                "podCidrOverprovisionConfig": "pod_cidr_overprovision_config",
                "podIpv4CidrBlock": "pod_ipv4_cidr_block",
                "podRange": "pod_range"
            },
            "gcp:container/ClusterNodePoolNetworkConfigAdditionalPodNetworkConfig:ClusterNodePoolNetworkConfigAdditionalPodNetworkConfig": {
                "maxPodsPerNode": "max_pods_per_node",
                "secondaryPodRange": "secondary_pod_range"
            },
            "gcp:container/ClusterNodePoolNodeConfig:ClusterNodePoolNodeConfig": {
                "advancedMachineFeatures": "advanced_machine_features",
                "bootDiskKmsKey": "boot_disk_kms_key",
                "diskSizeGb": "disk_size_gb",
                "diskType": "disk_type",
                "ephemeralStorageConfig": "ephemeral_storage_config",
                "ephemeralStorageLocalSsdConfig": "ephemeral_storage_local_ssd_config",
                "gcfsConfig": "gcfs_config",
                "guestAccelerators": "guest_accelerator",
                "imageType": "image_type",
                "kubeletConfig": "kubelet_config",
                "linuxNodeConfig": "linux_node_config",
                "localNvmeSsdBlockConfig": "local_nvme_ssd_block_config",
                "localSsdCount": "local_ssd_count",
                "loggingVariant": "logging_variant",
                "machineType": "machine_type",
                "minCpuPlatform": "min_cpu_platform",
                "nodeGroup": "node_group",
                "oauthScopes": "oauth_scopes",
                "reservationAffinity": "reservation_affinity",
                "resourceLabels": "resource_labels",
                "sandboxConfig": "sandbox_config",
                "serviceAccount": "service_account",
                "shieldedInstanceConfig": "shielded_instance_config",
                "soleTenantConfig": "sole_tenant_config",
                "taints": "taint",
                "workloadMetadataConfig": "workload_metadata_config"
            },
            "gcp:container/ClusterNodePoolNodeConfigAdvancedMachineFeatures:ClusterNodePoolNodeConfigAdvancedMachineFeatures": {
                "threadsPerCore": "threads_per_core"
            },
            "gcp:container/ClusterNodePoolNodeConfigEphemeralStorageConfig:ClusterNodePoolNodeConfigEphemeralStorageConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/ClusterNodePoolNodeConfigEphemeralStorageLocalSsdConfig:ClusterNodePoolNodeConfigEphemeralStorageLocalSsdConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/ClusterNodePoolNodeConfigGuestAccelerator:ClusterNodePoolNodeConfigGuestAccelerator": {
                "gpuDriverInstallationConfig": "gpu_driver_installation_config",
                "gpuPartitionSize": "gpu_partition_size",
                "gpuSharingConfig": "gpu_sharing_config"
            },
            "gcp:container/ClusterNodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig:ClusterNodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig": {
                "gpuDriverVersion": "gpu_driver_version"
            },
            "gcp:container/ClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfig:ClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfig": {
                "gpuSharingStrategy": "gpu_sharing_strategy",
                "maxSharedClientsPerGpu": "max_shared_clients_per_gpu"
            },
            "gcp:container/ClusterNodePoolNodeConfigKubeletConfig:ClusterNodePoolNodeConfigKubeletConfig": {
                "cpuCfsQuota": "cpu_cfs_quota",
                "cpuCfsQuotaPeriod": "cpu_cfs_quota_period",
                "cpuManagerPolicy": "cpu_manager_policy",
                "podPidsLimit": "pod_pids_limit"
            },
            "gcp:container/ClusterNodePoolNodeConfigLocalNvmeSsdBlockConfig:ClusterNodePoolNodeConfigLocalNvmeSsdBlockConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/ClusterNodePoolNodeConfigReservationAffinity:ClusterNodePoolNodeConfigReservationAffinity": {
                "consumeReservationType": "consume_reservation_type"
            },
            "gcp:container/ClusterNodePoolNodeConfigSandboxConfig:ClusterNodePoolNodeConfigSandboxConfig": {
                "sandboxType": "sandbox_type"
            },
            "gcp:container/ClusterNodePoolNodeConfigShieldedInstanceConfig:ClusterNodePoolNodeConfigShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot"
            },
            "gcp:container/ClusterNodePoolNodeConfigSoleTenantConfig:ClusterNodePoolNodeConfigSoleTenantConfig": {
                "nodeAffinities": "node_affinity"
            },
            "gcp:container/ClusterNodePoolPlacementPolicy:ClusterNodePoolPlacementPolicy": {
                "tpuTopology": "tpu_topology"
            },
            "gcp:container/ClusterNodePoolUpgradeSettings:ClusterNodePoolUpgradeSettings": {
                "blueGreenSettings": "blue_green_settings",
                "maxSurge": "max_surge",
                "maxUnavailable": "max_unavailable"
            },
            "gcp:container/ClusterNodePoolUpgradeSettingsBlueGreenSettings:ClusterNodePoolUpgradeSettingsBlueGreenSettings": {
                "nodePoolSoakDuration": "node_pool_soak_duration",
                "standardRolloutPolicy": "standard_rollout_policy"
            },
            "gcp:container/ClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy:ClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy": {
                "batchNodeCount": "batch_node_count",
                "batchPercentage": "batch_percentage",
                "batchSoakDuration": "batch_soak_duration"
            },
            "gcp:container/ClusterNotificationConfigPubsubFilter:ClusterNotificationConfigPubsubFilter": {
                "eventTypes": "event_type"
            },
            "gcp:container/ClusterPrivateClusterConfig:ClusterPrivateClusterConfig": {
                "enablePrivateEndpoint": "enable_private_endpoint",
                "enablePrivateNodes": "enable_private_nodes",
                "masterGlobalAccessConfig": "master_global_access_config",
                "masterIpv4CidrBlock": "master_ipv4_cidr_block",
                "peeringName": "peering_name",
                "privateEndpoint": "private_endpoint",
                "privateEndpointSubnetwork": "private_endpoint_subnetwork",
                "publicEndpoint": "public_endpoint"
            },
            "gcp:container/ClusterProtectConfig:ClusterProtectConfig": {
                "workloadConfig": "workload_config",
                "workloadVulnerabilityMode": "workload_vulnerability_mode"
            },
            "gcp:container/ClusterProtectConfigWorkloadConfig:ClusterProtectConfigWorkloadConfig": {
                "auditMode": "audit_mode"
            },
            "gcp:container/ClusterResourceUsageExportConfig:ClusterResourceUsageExportConfig": {
                "bigqueryDestination": "bigquery_destination",
                "enableNetworkEgressMetering": "enable_network_egress_metering",
                "enableResourceConsumptionMetering": "enable_resource_consumption_metering"
            },
            "gcp:container/ClusterResourceUsageExportConfigBigqueryDestination:ClusterResourceUsageExportConfigBigqueryDestination": {
                "datasetId": "dataset_id"
            },
            "gcp:container/ClusterSecurityPostureConfig:ClusterSecurityPostureConfig": {
                "vulnerabilityMode": "vulnerability_mode"
            },
            "gcp:container/ClusterTpuConfig:ClusterTpuConfig": {
                "ipv4CidrBlock": "ipv4_cidr_block",
                "useServiceNetworking": "use_service_networking"
            },
            "gcp:container/ClusterWorkloadIdentityConfig:ClusterWorkloadIdentityConfig": {
                "workloadPool": "workload_pool"
            },
            "gcp:container/NodePoolAutoscaling:NodePoolAutoscaling": {
                "locationPolicy": "location_policy",
                "maxNodeCount": "max_node_count",
                "minNodeCount": "min_node_count",
                "totalMaxNodeCount": "total_max_node_count",
                "totalMinNodeCount": "total_min_node_count"
            },
            "gcp:container/NodePoolManagement:NodePoolManagement": {
                "autoRepair": "auto_repair",
                "autoUpgrade": "auto_upgrade"
            },
            "gcp:container/NodePoolNetworkConfig:NodePoolNetworkConfig": {
                "additionalNodeNetworkConfigs": "additional_node_network_configs",
                "additionalPodNetworkConfigs": "additional_pod_network_configs",
                "createPodRange": "create_pod_range",
                "enablePrivateNodes": "enable_private_nodes",
                "podCidrOverprovisionConfig": "pod_cidr_overprovision_config",
                "podIpv4CidrBlock": "pod_ipv4_cidr_block",
                "podRange": "pod_range"
            },
            "gcp:container/NodePoolNetworkConfigAdditionalPodNetworkConfig:NodePoolNetworkConfigAdditionalPodNetworkConfig": {
                "maxPodsPerNode": "max_pods_per_node",
                "secondaryPodRange": "secondary_pod_range"
            },
            "gcp:container/NodePoolNodeConfig:NodePoolNodeConfig": {
                "advancedMachineFeatures": "advanced_machine_features",
                "bootDiskKmsKey": "boot_disk_kms_key",
                "diskSizeGb": "disk_size_gb",
                "diskType": "disk_type",
                "ephemeralStorageConfig": "ephemeral_storage_config",
                "ephemeralStorageLocalSsdConfig": "ephemeral_storage_local_ssd_config",
                "gcfsConfig": "gcfs_config",
                "guestAccelerators": "guest_accelerator",
                "imageType": "image_type",
                "kubeletConfig": "kubelet_config",
                "linuxNodeConfig": "linux_node_config",
                "localNvmeSsdBlockConfig": "local_nvme_ssd_block_config",
                "localSsdCount": "local_ssd_count",
                "loggingVariant": "logging_variant",
                "machineType": "machine_type",
                "minCpuPlatform": "min_cpu_platform",
                "nodeGroup": "node_group",
                "oauthScopes": "oauth_scopes",
                "reservationAffinity": "reservation_affinity",
                "resourceLabels": "resource_labels",
                "sandboxConfig": "sandbox_config",
                "serviceAccount": "service_account",
                "shieldedInstanceConfig": "shielded_instance_config",
                "soleTenantConfig": "sole_tenant_config",
                "taints": "taint",
                "workloadMetadataConfig": "workload_metadata_config"
            },
            "gcp:container/NodePoolNodeConfigAdvancedMachineFeatures:NodePoolNodeConfigAdvancedMachineFeatures": {
                "threadsPerCore": "threads_per_core"
            },
            "gcp:container/NodePoolNodeConfigEphemeralStorageConfig:NodePoolNodeConfigEphemeralStorageConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/NodePoolNodeConfigEphemeralStorageLocalSsdConfig:NodePoolNodeConfigEphemeralStorageLocalSsdConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/NodePoolNodeConfigGuestAccelerator:NodePoolNodeConfigGuestAccelerator": {
                "gpuDriverInstallationConfig": "gpu_driver_installation_config",
                "gpuPartitionSize": "gpu_partition_size",
                "gpuSharingConfig": "gpu_sharing_config"
            },
            "gcp:container/NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig:NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig": {
                "gpuDriverVersion": "gpu_driver_version"
            },
            "gcp:container/NodePoolNodeConfigGuestAcceleratorGpuSharingConfig:NodePoolNodeConfigGuestAcceleratorGpuSharingConfig": {
                "gpuSharingStrategy": "gpu_sharing_strategy",
                "maxSharedClientsPerGpu": "max_shared_clients_per_gpu"
            },
            "gcp:container/NodePoolNodeConfigKubeletConfig:NodePoolNodeConfigKubeletConfig": {
                "cpuCfsQuota": "cpu_cfs_quota",
                "cpuCfsQuotaPeriod": "cpu_cfs_quota_period",
                "cpuManagerPolicy": "cpu_manager_policy",
                "podPidsLimit": "pod_pids_limit"
            },
            "gcp:container/NodePoolNodeConfigLocalNvmeSsdBlockConfig:NodePoolNodeConfigLocalNvmeSsdBlockConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/NodePoolNodeConfigReservationAffinity:NodePoolNodeConfigReservationAffinity": {
                "consumeReservationType": "consume_reservation_type"
            },
            "gcp:container/NodePoolNodeConfigSandboxConfig:NodePoolNodeConfigSandboxConfig": {
                "sandboxType": "sandbox_type"
            },
            "gcp:container/NodePoolNodeConfigShieldedInstanceConfig:NodePoolNodeConfigShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot"
            },
            "gcp:container/NodePoolNodeConfigSoleTenantConfig:NodePoolNodeConfigSoleTenantConfig": {
                "nodeAffinities": "node_affinity"
            },
            "gcp:container/NodePoolPlacementPolicy:NodePoolPlacementPolicy": {
                "tpuTopology": "tpu_topology"
            },
            "gcp:container/NodePoolUpgradeSettings:NodePoolUpgradeSettings": {
                "blueGreenSettings": "blue_green_settings",
                "maxSurge": "max_surge",
                "maxUnavailable": "max_unavailable"
            },
            "gcp:container/NodePoolUpgradeSettingsBlueGreenSettings:NodePoolUpgradeSettingsBlueGreenSettings": {
                "nodePoolSoakDuration": "node_pool_soak_duration",
                "standardRolloutPolicy": "standard_rollout_policy"
            },
            "gcp:container/NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy:NodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy": {
                "batchNodeCount": "batch_node_count",
                "batchPercentage": "batch_percentage",
                "batchSoakDuration": "batch_soak_duration"
            },
            "gcp:container/attachedCluster:AttachedCluster": {
                "clusterRegion": "cluster_region",
                "createTime": "create_time",
                "deletionPolicy": "deletion_policy",
                "kubernetesVersion": "kubernetes_version",
                "loggingConfig": "logging_config",
                "monitoringConfig": "monitoring_config",
                "oidcConfig": "oidc_config",
                "platformVersion": "platform_version",
                "updateTime": "update_time",
                "workloadIdentityConfigs": "workload_identity_config"
            },
            "gcp:container/awsCluster:AwsCluster": {
                "awsRegion": "aws_region",
                "controlPlane": "control_plane",
                "createTime": "create_time",
                "loggingConfig": "logging_config",
                "updateTime": "update_time",
                "workloadIdentityConfigs": "workload_identity_config"
            },
            "gcp:container/awsNodePool:AwsNodePool": {
                "createTime": "create_time",
                "maxPodsConstraint": "max_pods_constraint",
                "subnetId": "subnet_id",
                "updateTime": "update_time"
            },
            "gcp:container/azureClient:AzureClient": {
                "applicationId": "application_id",
                "createTime": "create_time",
                "tenantId": "tenant_id"
            },
            "gcp:container/azureCluster:AzureCluster": {
                "azureRegion": "azure_region",
                "azureServicesAuthentication": "azure_services_authentication",
                "controlPlane": "control_plane",
                "createTime": "create_time",
                "loggingConfig": "logging_config",
                "resourceGroupId": "resource_group_id",
                "updateTime": "update_time",
                "workloadIdentityConfigs": "workload_identity_config"
            },
            "gcp:container/azureNodePool:AzureNodePool": {
                "azureAvailabilityZone": "azure_availability_zone",
                "createTime": "create_time",
                "maxPodsConstraint": "max_pods_constraint",
                "subnetId": "subnet_id",
                "updateTime": "update_time"
            },
            "gcp:container/cluster:Cluster": {
                "addonsConfig": "addons_config",
                "allowNetAdmin": "allow_net_admin",
                "authenticatorGroupsConfig": "authenticator_groups_config",
                "binaryAuthorization": "binary_authorization",
                "clusterAutoscaling": "cluster_autoscaling",
                "clusterIpv4Cidr": "cluster_ipv4_cidr",
                "clusterTelemetry": "cluster_telemetry",
                "confidentialNodes": "confidential_nodes",
                "costManagementConfig": "cost_management_config",
                "databaseEncryption": "database_encryption",
                "datapathProvider": "datapath_provider",
                "defaultMaxPodsPerNode": "default_max_pods_per_node",
                "defaultSnatStatus": "default_snat_status",
                "dnsConfig": "dns_config",
                "enableAutopilot": "enable_autopilot",
                "enableBinaryAuthorization": "enable_binary_authorization",
                "enableIntranodeVisibility": "enable_intranode_visibility",
                "enableKubernetesAlpha": "enable_kubernetes_alpha",
                "enableL4IlbSubsetting": "enable_l4_ilb_subsetting",
                "enableLegacyAbac": "enable_legacy_abac",
                "enableMultiNetworking": "enable_multi_networking",
                "enableShieldedNodes": "enable_shielded_nodes",
                "enableTpu": "enable_tpu",
                "gatewayApiConfig": "gateway_api_config",
                "identityServiceConfig": "identity_service_config",
                "initialNodeCount": "initial_node_count",
                "ipAllocationPolicy": "ip_allocation_policy",
                "labelFingerprint": "label_fingerprint",
                "loggingConfig": "logging_config",
                "loggingService": "logging_service",
                "maintenancePolicy": "maintenance_policy",
                "masterAuth": "master_auth",
                "masterAuthorizedNetworksConfig": "master_authorized_networks_config",
                "masterVersion": "master_version",
                "meshCertificates": "mesh_certificates",
                "minMasterVersion": "min_master_version",
                "monitoringConfig": "monitoring_config",
                "monitoringService": "monitoring_service",
                "networkPolicy": "network_policy",
                "networkingMode": "networking_mode",
                "nodeConfig": "node_config",
                "nodeLocations": "node_locations",
                "nodePoolAutoConfig": "node_pool_auto_config",
                "nodePoolDefaults": "node_pool_defaults",
                "nodePools": "node_pool",
                "nodeVersion": "node_version",
                "notificationConfig": "notification_config",
                "podSecurityPolicyConfig": "pod_security_policy_config",
                "privateClusterConfig": "private_cluster_config",
                "privateIpv6GoogleAccess": "private_ipv6_google_access",
                "protectConfig": "protect_config",
                "releaseChannel": "release_channel",
                "removeDefaultNodePool": "remove_default_node_pool",
                "resourceLabels": "resource_labels",
                "resourceUsageExportConfig": "resource_usage_export_config",
                "securityPostureConfig": "security_posture_config",
                "selfLink": "self_link",
                "serviceExternalIpsConfig": "service_external_ips_config",
                "servicesIpv4Cidr": "services_ipv4_cidr",
                "tpuConfig": "tpu_config",
                "tpuIpv4CidrBlock": "tpu_ipv4_cidr_block",
                "verticalPodAutoscaling": "vertical_pod_autoscaling",
                "workloadIdentityConfig": "workload_identity_config"
            },
            "gcp:container/getAttachedInstallManifest:getAttachedInstallManifest": {
                "clusterId": "cluster_id",
                "platformVersion": "platform_version"
            },
            "gcp:container/getAttachedVersions:getAttachedVersions": {
                "validVersions": "valid_versions"
            },
            "gcp:container/getAwsVersions:getAwsVersions": {
                "supportedRegions": "supported_regions",
                "validVersions": "valid_versions"
            },
            "gcp:container/getAzureVersions:getAzureVersions": {
                "supportedRegions": "supported_regions",
                "validVersions": "valid_versions"
            },
            "gcp:container/getCluster:getCluster": {
                "addonsConfigs": "addons_config",
                "allowNetAdmin": "allow_net_admin",
                "authenticatorGroupsConfigs": "authenticator_groups_config",
                "binaryAuthorizations": "binary_authorization",
                "clusterAutoscalings": "cluster_autoscaling",
                "clusterIpv4Cidr": "cluster_ipv4_cidr",
                "clusterTelemetries": "cluster_telemetry",
                "confidentialNodes": "confidential_nodes",
                "costManagementConfigs": "cost_management_config",
                "databaseEncryptions": "database_encryption",
                "datapathProvider": "datapath_provider",
                "defaultMaxPodsPerNode": "default_max_pods_per_node",
                "defaultSnatStatuses": "default_snat_status",
                "dnsConfigs": "dns_config",
                "enableAutopilot": "enable_autopilot",
                "enableBinaryAuthorization": "enable_binary_authorization",
                "enableIntranodeVisibility": "enable_intranode_visibility",
                "enableKubernetesAlpha": "enable_kubernetes_alpha",
                "enableL4IlbSubsetting": "enable_l4_ilb_subsetting",
                "enableLegacyAbac": "enable_legacy_abac",
                "enableMultiNetworking": "enable_multi_networking",
                "enableShieldedNodes": "enable_shielded_nodes",
                "enableTpu": "enable_tpu",
                "gatewayApiConfigs": "gateway_api_config",
                "identityServiceConfigs": "identity_service_config",
                "initialNodeCount": "initial_node_count",
                "ipAllocationPolicies": "ip_allocation_policy",
                "labelFingerprint": "label_fingerprint",
                "loggingConfigs": "logging_config",
                "loggingService": "logging_service",
                "maintenancePolicies": "maintenance_policy",
                "masterAuthorizedNetworksConfigs": "master_authorized_networks_config",
                "masterAuths": "master_auth",
                "masterVersion": "master_version",
                "meshCertificates": "mesh_certificates",
                "minMasterVersion": "min_master_version",
                "monitoringConfigs": "monitoring_config",
                "monitoringService": "monitoring_service",
                "networkPolicies": "network_policy",
                "networkingMode": "networking_mode",
                "nodeConfigs": "node_config",
                "nodeLocations": "node_locations",
                "nodePoolAutoConfigs": "node_pool_auto_config",
                "nodePoolDefaults": "node_pool_defaults",
                "nodePools": "node_pool",
                "nodeVersion": "node_version",
                "notificationConfigs": "notification_config",
                "podSecurityPolicyConfigs": "pod_security_policy_config",
                "privateClusterConfigs": "private_cluster_config",
                "privateIpv6GoogleAccess": "private_ipv6_google_access",
                "protectConfigs": "protect_config",
                "releaseChannels": "release_channel",
                "removeDefaultNodePool": "remove_default_node_pool",
                "resourceLabels": "resource_labels",
                "resourceUsageExportConfigs": "resource_usage_export_config",
                "securityPostureConfigs": "security_posture_config",
                "selfLink": "self_link",
                "serviceExternalIpsConfigs": "service_external_ips_config",
                "servicesIpv4Cidr": "services_ipv4_cidr",
                "tpuConfigs": "tpu_config",
                "tpuIpv4CidrBlock": "tpu_ipv4_cidr_block",
                "verticalPodAutoscalings": "vertical_pod_autoscaling",
                "workloadIdentityConfigs": "workload_identity_config"
            },
            "gcp:container/getClusterAddonsConfig:getClusterAddonsConfig": {
                "cloudrunConfigs": "cloudrun_config",
                "configConnectorConfigs": "config_connector_config",
                "dnsCacheConfigs": "dns_cache_config",
                "gcePersistentDiskCsiDriverConfigs": "gce_persistent_disk_csi_driver_config",
                "gcpFilestoreCsiDriverConfigs": "gcp_filestore_csi_driver_config",
                "gcsFuseCsiDriverConfigs": "gcs_fuse_csi_driver_config",
                "gkeBackupAgentConfigs": "gke_backup_agent_config",
                "horizontalPodAutoscalings": "horizontal_pod_autoscaling",
                "httpLoadBalancings": "http_load_balancing",
                "istioConfigs": "istio_config",
                "kalmConfigs": "kalm_config",
                "networkPolicyConfigs": "network_policy_config"
            },
            "gcp:container/getClusterAddonsConfigCloudrunConfig:getClusterAddonsConfigCloudrunConfig": {
                "loadBalancerType": "load_balancer_type"
            },
            "gcp:container/getClusterAuthenticatorGroupsConfig:getClusterAuthenticatorGroupsConfig": {
                "securityGroup": "security_group"
            },
            "gcp:container/getClusterBinaryAuthorization:getClusterBinaryAuthorization": {
                "evaluationMode": "evaluation_mode"
            },
            "gcp:container/getClusterClusterAutoscaling:getClusterClusterAutoscaling": {
                "autoProvisioningDefaults": "auto_provisioning_defaults",
                "autoscalingProfile": "autoscaling_profile",
                "resourceLimits": "resource_limits"
            },
            "gcp:container/getClusterClusterAutoscalingAutoProvisioningDefault:getClusterClusterAutoscalingAutoProvisioningDefault": {
                "bootDiskKmsKey": "boot_disk_kms_key",
                "diskSize": "disk_size",
                "diskType": "disk_type",
                "imageType": "image_type",
                "managements": "management",
                "minCpuPlatform": "min_cpu_platform",
                "oauthScopes": "oauth_scopes",
                "serviceAccount": "service_account",
                "shieldedInstanceConfigs": "shielded_instance_config",
                "upgradeSettings": "upgrade_settings"
            },
            "gcp:container/getClusterClusterAutoscalingAutoProvisioningDefaultManagement:getClusterClusterAutoscalingAutoProvisioningDefaultManagement": {
                "autoRepair": "auto_repair",
                "autoUpgrade": "auto_upgrade",
                "upgradeOptions": "upgrade_options"
            },
            "gcp:container/getClusterClusterAutoscalingAutoProvisioningDefaultManagementUpgradeOption:getClusterClusterAutoscalingAutoProvisioningDefaultManagementUpgradeOption": {
                "autoUpgradeStartTime": "auto_upgrade_start_time"
            },
            "gcp:container/getClusterClusterAutoscalingAutoProvisioningDefaultShieldedInstanceConfig:getClusterClusterAutoscalingAutoProvisioningDefaultShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot"
            },
            "gcp:container/getClusterClusterAutoscalingAutoProvisioningDefaultUpgradeSetting:getClusterClusterAutoscalingAutoProvisioningDefaultUpgradeSetting": {
                "blueGreenSettings": "blue_green_settings",
                "maxSurge": "max_surge",
                "maxUnavailable": "max_unavailable"
            },
            "gcp:container/getClusterClusterAutoscalingAutoProvisioningDefaultUpgradeSettingBlueGreenSetting:getClusterClusterAutoscalingAutoProvisioningDefaultUpgradeSettingBlueGreenSetting": {
                "nodePoolSoakDuration": "node_pool_soak_duration",
                "standardRolloutPolicies": "standard_rollout_policy"
            },
            "gcp:container/getClusterClusterAutoscalingAutoProvisioningDefaultUpgradeSettingBlueGreenSettingStandardRolloutPolicy:getClusterClusterAutoscalingAutoProvisioningDefaultUpgradeSettingBlueGreenSettingStandardRolloutPolicy": {
                "batchNodeCount": "batch_node_count",
                "batchPercentage": "batch_percentage",
                "batchSoakDuration": "batch_soak_duration"
            },
            "gcp:container/getClusterClusterAutoscalingResourceLimit:getClusterClusterAutoscalingResourceLimit": {
                "resourceType": "resource_type"
            },
            "gcp:container/getClusterDatabaseEncryption:getClusterDatabaseEncryption": {
                "keyName": "key_name"
            },
            "gcp:container/getClusterDnsConfig:getClusterDnsConfig": {
                "clusterDns": "cluster_dns",
                "clusterDnsDomain": "cluster_dns_domain",
                "clusterDnsScope": "cluster_dns_scope"
            },
            "gcp:container/getClusterIpAllocationPolicy:getClusterIpAllocationPolicy": {
                "clusterIpv4CidrBlock": "cluster_ipv4_cidr_block",
                "clusterSecondaryRangeName": "cluster_secondary_range_name",
                "podCidrOverprovisionConfigs": "pod_cidr_overprovision_config",
                "servicesIpv4CidrBlock": "services_ipv4_cidr_block",
                "servicesSecondaryRangeName": "services_secondary_range_name",
                "stackType": "stack_type"
            },
            "gcp:container/getClusterLoggingConfig:getClusterLoggingConfig": {
                "enableComponents": "enable_components"
            },
            "gcp:container/getClusterMaintenancePolicy:getClusterMaintenancePolicy": {
                "dailyMaintenanceWindows": "daily_maintenance_window",
                "maintenanceExclusions": "maintenance_exclusion",
                "recurringWindows": "recurring_window"
            },
            "gcp:container/getClusterMaintenancePolicyDailyMaintenanceWindow:getClusterMaintenancePolicyDailyMaintenanceWindow": {
                "startTime": "start_time"
            },
            "gcp:container/getClusterMaintenancePolicyMaintenanceExclusion:getClusterMaintenancePolicyMaintenanceExclusion": {
                "endTime": "end_time",
                "exclusionName": "exclusion_name",
                "exclusionOptions": "exclusion_options",
                "startTime": "start_time"
            },
            "gcp:container/getClusterMaintenancePolicyRecurringWindow:getClusterMaintenancePolicyRecurringWindow": {
                "endTime": "end_time",
                "startTime": "start_time"
            },
            "gcp:container/getClusterMasterAuth:getClusterMasterAuth": {
                "clientCertificate": "client_certificate",
                "clientCertificateConfigs": "client_certificate_config",
                "clientKey": "client_key",
                "clusterCaCertificate": "cluster_ca_certificate"
            },
            "gcp:container/getClusterMasterAuthClientCertificateConfig:getClusterMasterAuthClientCertificateConfig": {
                "issueClientCertificate": "issue_client_certificate"
            },
            "gcp:container/getClusterMasterAuthorizedNetworksConfig:getClusterMasterAuthorizedNetworksConfig": {
                "cidrBlocks": "cidr_blocks",
                "gcpPublicCidrsAccessEnabled": "gcp_public_cidrs_access_enabled"
            },
            "gcp:container/getClusterMasterAuthorizedNetworksConfigCidrBlock:getClusterMasterAuthorizedNetworksConfigCidrBlock": {
                "cidrBlock": "cidr_block",
                "displayName": "display_name"
            },
            "gcp:container/getClusterMeshCertificate:getClusterMeshCertificate": {
                "enableCertificates": "enable_certificates"
            },
            "gcp:container/getClusterMonitoringConfig:getClusterMonitoringConfig": {
                "enableComponents": "enable_components",
                "managedPrometheuses": "managed_prometheus"
            },
            "gcp:container/getClusterNodeConfig:getClusterNodeConfig": {
                "advancedMachineFeatures": "advanced_machine_features",
                "bootDiskKmsKey": "boot_disk_kms_key",
                "diskSizeGb": "disk_size_gb",
                "diskType": "disk_type",
                "ephemeralStorageConfigs": "ephemeral_storage_config",
                "ephemeralStorageLocalSsdConfigs": "ephemeral_storage_local_ssd_config",
                "gcfsConfigs": "gcfs_config",
                "guestAccelerators": "guest_accelerator",
                "gvnics": "gvnic",
                "imageType": "image_type",
                "kubeletConfigs": "kubelet_config",
                "linuxNodeConfigs": "linux_node_config",
                "localNvmeSsdBlockConfigs": "local_nvme_ssd_block_config",
                "localSsdCount": "local_ssd_count",
                "loggingVariant": "logging_variant",
                "machineType": "machine_type",
                "minCpuPlatform": "min_cpu_platform",
                "nodeGroup": "node_group",
                "oauthScopes": "oauth_scopes",
                "reservationAffinities": "reservation_affinity",
                "resourceLabels": "resource_labels",
                "sandboxConfigs": "sandbox_config",
                "serviceAccount": "service_account",
                "shieldedInstanceConfigs": "shielded_instance_config",
                "soleTenantConfigs": "sole_tenant_config",
                "taints": "taint",
                "workloadMetadataConfigs": "workload_metadata_config"
            },
            "gcp:container/getClusterNodeConfigAdvancedMachineFeature:getClusterNodeConfigAdvancedMachineFeature": {
                "threadsPerCore": "threads_per_core"
            },
            "gcp:container/getClusterNodeConfigEphemeralStorageConfig:getClusterNodeConfigEphemeralStorageConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/getClusterNodeConfigEphemeralStorageLocalSsdConfig:getClusterNodeConfigEphemeralStorageLocalSsdConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/getClusterNodeConfigGuestAccelerator:getClusterNodeConfigGuestAccelerator": {
                "gpuDriverInstallationConfigs": "gpu_driver_installation_config",
                "gpuPartitionSize": "gpu_partition_size",
                "gpuSharingConfigs": "gpu_sharing_config"
            },
            "gcp:container/getClusterNodeConfigGuestAcceleratorGpuDriverInstallationConfig:getClusterNodeConfigGuestAcceleratorGpuDriverInstallationConfig": {
                "gpuDriverVersion": "gpu_driver_version"
            },
            "gcp:container/getClusterNodeConfigGuestAcceleratorGpuSharingConfig:getClusterNodeConfigGuestAcceleratorGpuSharingConfig": {
                "gpuSharingStrategy": "gpu_sharing_strategy",
                "maxSharedClientsPerGpu": "max_shared_clients_per_gpu"
            },
            "gcp:container/getClusterNodeConfigKubeletConfig:getClusterNodeConfigKubeletConfig": {
                "cpuCfsQuota": "cpu_cfs_quota",
                "cpuCfsQuotaPeriod": "cpu_cfs_quota_period",
                "cpuManagerPolicy": "cpu_manager_policy",
                "podPidsLimit": "pod_pids_limit"
            },
            "gcp:container/getClusterNodeConfigLocalNvmeSsdBlockConfig:getClusterNodeConfigLocalNvmeSsdBlockConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/getClusterNodeConfigReservationAffinity:getClusterNodeConfigReservationAffinity": {
                "consumeReservationType": "consume_reservation_type"
            },
            "gcp:container/getClusterNodeConfigSandboxConfig:getClusterNodeConfigSandboxConfig": {
                "sandboxType": "sandbox_type"
            },
            "gcp:container/getClusterNodeConfigShieldedInstanceConfig:getClusterNodeConfigShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot"
            },
            "gcp:container/getClusterNodeConfigSoleTenantConfig:getClusterNodeConfigSoleTenantConfig": {
                "nodeAffinities": "node_affinity"
            },
            "gcp:container/getClusterNodePool:getClusterNodePool": {
                "autoscalings": "autoscaling",
                "initialNodeCount": "initial_node_count",
                "instanceGroupUrls": "instance_group_urls",
                "managedInstanceGroupUrls": "managed_instance_group_urls",
                "managements": "management",
                "maxPodsPerNode": "max_pods_per_node",
                "namePrefix": "name_prefix",
                "networkConfigs": "network_config",
                "nodeConfigs": "node_config",
                "nodeCount": "node_count",
                "nodeLocations": "node_locations",
                "placementPolicies": "placement_policy",
                "upgradeSettings": "upgrade_settings"
            },
            "gcp:container/getClusterNodePoolAutoConfig:getClusterNodePoolAutoConfig": {
                "networkTags": "network_tags"
            },
            "gcp:container/getClusterNodePoolAutoscaling:getClusterNodePoolAutoscaling": {
                "locationPolicy": "location_policy",
                "maxNodeCount": "max_node_count",
                "minNodeCount": "min_node_count",
                "totalMaxNodeCount": "total_max_node_count",
                "totalMinNodeCount": "total_min_node_count"
            },
            "gcp:container/getClusterNodePoolDefault:getClusterNodePoolDefault": {
                "nodeConfigDefaults": "node_config_defaults"
            },
            "gcp:container/getClusterNodePoolDefaultNodeConfigDefault:getClusterNodePoolDefaultNodeConfigDefault": {
                "gcfsConfigs": "gcfs_config",
                "loggingVariant": "logging_variant"
            },
            "gcp:container/getClusterNodePoolManagement:getClusterNodePoolManagement": {
                "autoRepair": "auto_repair",
                "autoUpgrade": "auto_upgrade"
            },
            "gcp:container/getClusterNodePoolNetworkConfig:getClusterNodePoolNetworkConfig": {
                "additionalNodeNetworkConfigs": "additional_node_network_configs",
                "additionalPodNetworkConfigs": "additional_pod_network_configs",
                "createPodRange": "create_pod_range",
                "enablePrivateNodes": "enable_private_nodes",
                "podCidrOverprovisionConfigs": "pod_cidr_overprovision_config",
                "podIpv4CidrBlock": "pod_ipv4_cidr_block",
                "podRange": "pod_range"
            },
            "gcp:container/getClusterNodePoolNetworkConfigAdditionalPodNetworkConfig:getClusterNodePoolNetworkConfigAdditionalPodNetworkConfig": {
                "maxPodsPerNode": "max_pods_per_node",
                "secondaryPodRange": "secondary_pod_range"
            },
            "gcp:container/getClusterNodePoolNodeConfig:getClusterNodePoolNodeConfig": {
                "advancedMachineFeatures": "advanced_machine_features",
                "bootDiskKmsKey": "boot_disk_kms_key",
                "diskSizeGb": "disk_size_gb",
                "diskType": "disk_type",
                "ephemeralStorageConfigs": "ephemeral_storage_config",
                "ephemeralStorageLocalSsdConfigs": "ephemeral_storage_local_ssd_config",
                "gcfsConfigs": "gcfs_config",
                "guestAccelerators": "guest_accelerator",
                "gvnics": "gvnic",
                "imageType": "image_type",
                "kubeletConfigs": "kubelet_config",
                "linuxNodeConfigs": "linux_node_config",
                "localNvmeSsdBlockConfigs": "local_nvme_ssd_block_config",
                "localSsdCount": "local_ssd_count",
                "loggingVariant": "logging_variant",
                "machineType": "machine_type",
                "minCpuPlatform": "min_cpu_platform",
                "nodeGroup": "node_group",
                "oauthScopes": "oauth_scopes",
                "reservationAffinities": "reservation_affinity",
                "resourceLabels": "resource_labels",
                "sandboxConfigs": "sandbox_config",
                "serviceAccount": "service_account",
                "shieldedInstanceConfigs": "shielded_instance_config",
                "soleTenantConfigs": "sole_tenant_config",
                "taints": "taint",
                "workloadMetadataConfigs": "workload_metadata_config"
            },
            "gcp:container/getClusterNodePoolNodeConfigAdvancedMachineFeature:getClusterNodePoolNodeConfigAdvancedMachineFeature": {
                "threadsPerCore": "threads_per_core"
            },
            "gcp:container/getClusterNodePoolNodeConfigEphemeralStorageConfig:getClusterNodePoolNodeConfigEphemeralStorageConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/getClusterNodePoolNodeConfigEphemeralStorageLocalSsdConfig:getClusterNodePoolNodeConfigEphemeralStorageLocalSsdConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/getClusterNodePoolNodeConfigGuestAccelerator:getClusterNodePoolNodeConfigGuestAccelerator": {
                "gpuDriverInstallationConfigs": "gpu_driver_installation_config",
                "gpuPartitionSize": "gpu_partition_size",
                "gpuSharingConfigs": "gpu_sharing_config"
            },
            "gcp:container/getClusterNodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig:getClusterNodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig": {
                "gpuDriverVersion": "gpu_driver_version"
            },
            "gcp:container/getClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfig:getClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfig": {
                "gpuSharingStrategy": "gpu_sharing_strategy",
                "maxSharedClientsPerGpu": "max_shared_clients_per_gpu"
            },
            "gcp:container/getClusterNodePoolNodeConfigKubeletConfig:getClusterNodePoolNodeConfigKubeletConfig": {
                "cpuCfsQuota": "cpu_cfs_quota",
                "cpuCfsQuotaPeriod": "cpu_cfs_quota_period",
                "cpuManagerPolicy": "cpu_manager_policy",
                "podPidsLimit": "pod_pids_limit"
            },
            "gcp:container/getClusterNodePoolNodeConfigLocalNvmeSsdBlockConfig:getClusterNodePoolNodeConfigLocalNvmeSsdBlockConfig": {
                "localSsdCount": "local_ssd_count"
            },
            "gcp:container/getClusterNodePoolNodeConfigReservationAffinity:getClusterNodePoolNodeConfigReservationAffinity": {
                "consumeReservationType": "consume_reservation_type"
            },
            "gcp:container/getClusterNodePoolNodeConfigSandboxConfig:getClusterNodePoolNodeConfigSandboxConfig": {
                "sandboxType": "sandbox_type"
            },
            "gcp:container/getClusterNodePoolNodeConfigShieldedInstanceConfig:getClusterNodePoolNodeConfigShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot"
            },
            "gcp:container/getClusterNodePoolNodeConfigSoleTenantConfig:getClusterNodePoolNodeConfigSoleTenantConfig": {
                "nodeAffinities": "node_affinity"
            },
            "gcp:container/getClusterNodePoolPlacementPolicy:getClusterNodePoolPlacementPolicy": {
                "tpuTopology": "tpu_topology"
            },
            "gcp:container/getClusterNodePoolUpgradeSetting:getClusterNodePoolUpgradeSetting": {
                "blueGreenSettings": "blue_green_settings",
                "maxSurge": "max_surge",
                "maxUnavailable": "max_unavailable"
            },
            "gcp:container/getClusterNodePoolUpgradeSettingBlueGreenSetting:getClusterNodePoolUpgradeSettingBlueGreenSetting": {
                "nodePoolSoakDuration": "node_pool_soak_duration",
                "standardRolloutPolicies": "standard_rollout_policy"
            },
            "gcp:container/getClusterNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy:getClusterNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicy": {
                "batchNodeCount": "batch_node_count",
                "batchPercentage": "batch_percentage",
                "batchSoakDuration": "batch_soak_duration"
            },
            "gcp:container/getClusterNotificationConfig:getClusterNotificationConfig": {
                "pubsubs": "pubsub"
            },
            "gcp:container/getClusterNotificationConfigPubsub:getClusterNotificationConfigPubsub": {
                "filters": "filter"
            },
            "gcp:container/getClusterNotificationConfigPubsubFilter:getClusterNotificationConfigPubsubFilter": {
                "eventTypes": "event_type"
            },
            "gcp:container/getClusterPrivateClusterConfig:getClusterPrivateClusterConfig": {
                "enablePrivateEndpoint": "enable_private_endpoint",
                "enablePrivateNodes": "enable_private_nodes",
                "masterGlobalAccessConfigs": "master_global_access_config",
                "masterIpv4CidrBlock": "master_ipv4_cidr_block",
                "peeringName": "peering_name",
                "privateEndpoint": "private_endpoint",
                "privateEndpointSubnetwork": "private_endpoint_subnetwork",
                "publicEndpoint": "public_endpoint"
            },
            "gcp:container/getClusterProtectConfig:getClusterProtectConfig": {
                "workloadConfigs": "workload_config",
                "workloadVulnerabilityMode": "workload_vulnerability_mode"
            },
            "gcp:container/getClusterProtectConfigWorkloadConfig:getClusterProtectConfigWorkloadConfig": {
                "auditMode": "audit_mode"
            },
            "gcp:container/getClusterResourceUsageExportConfig:getClusterResourceUsageExportConfig": {
                "bigqueryDestinations": "bigquery_destination",
                "enableNetworkEgressMetering": "enable_network_egress_metering",
                "enableResourceConsumptionMetering": "enable_resource_consumption_metering"
            },
            "gcp:container/getClusterResourceUsageExportConfigBigqueryDestination:getClusterResourceUsageExportConfigBigqueryDestination": {
                "datasetId": "dataset_id"
            },
            "gcp:container/getClusterSecurityPostureConfig:getClusterSecurityPostureConfig": {
                "vulnerabilityMode": "vulnerability_mode"
            },
            "gcp:container/getClusterTpuConfig:getClusterTpuConfig": {
                "ipv4CidrBlock": "ipv4_cidr_block",
                "useServiceNetworking": "use_service_networking"
            },
            "gcp:container/getClusterWorkloadIdentityConfig:getClusterWorkloadIdentityConfig": {
                "workloadPool": "workload_pool"
            },
            "gcp:container/getEngineVersions:getEngineVersions": {
                "defaultClusterVersion": "default_cluster_version",
                "latestMasterVersion": "latest_master_version",
                "latestNodeVersion": "latest_node_version",
                "releaseChannelDefaultVersion": "release_channel_default_version",
                "releaseChannelLatestVersion": "release_channel_latest_version",
                "validMasterVersions": "valid_master_versions",
                "validNodeVersions": "valid_node_versions",
                "versionPrefix": "version_prefix"
            },
            "gcp:container/getRegistryImage:getRegistryImage": {
                "imageUrl": "image_url"
            },
            "gcp:container/getRegistryRepository:getRegistryRepository": {
                "repositoryUrl": "repository_url"
            },
            "gcp:container/nodePool:NodePool": {
                "initialNodeCount": "initial_node_count",
                "instanceGroupUrls": "instance_group_urls",
                "managedInstanceGroupUrls": "managed_instance_group_urls",
                "maxPodsPerNode": "max_pods_per_node",
                "namePrefix": "name_prefix",
                "networkConfig": "network_config",
                "nodeConfig": "node_config",
                "nodeCount": "node_count",
                "nodeLocations": "node_locations",
                "placementPolicy": "placement_policy",
                "upgradeSettings": "upgrade_settings"
            },
            "gcp:container/registry:Registry": {
                "bucketSelfLink": "bucket_self_link"
            },
            "gcp:containeranalysis/NoteAttestationAuthorityHint:NoteAttestationAuthorityHint": {
                "humanReadableName": "human_readable_name"
            },
            "gcp:containeranalysis/OccurenceAttestation:OccurenceAttestation": {
                "serializedPayload": "serialized_payload"
            },
            "gcp:containeranalysis/OccurenceAttestationSignature:OccurenceAttestationSignature": {
                "publicKeyId": "public_key_id"
            },
            "gcp:containeranalysis/getNoteIamPolicy:getNoteIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:containeranalysis/note:Note": {
                "attestationAuthority": "attestation_authority",
                "createTime": "create_time",
                "expirationTime": "expiration_time",
                "longDescription": "long_description",
                "relatedNoteNames": "related_note_names",
                "relatedUrls": "related_url",
                "shortDescription": "short_description",
                "updateTime": "update_time"
            },
            "gcp:containeranalysis/noteIamPolicy:NoteIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:containeranalysis/occurence:Occurence": {
                "createTime": "create_time",
                "noteName": "note_name",
                "resourceUri": "resource_uri",
                "updateTime": "update_time"
            },
            "gcp:databasemigrationservice/ConnectionProfileAlloydb:ConnectionProfileAlloydb": {
                "clusterId": "cluster_id"
            },
            "gcp:databasemigrationservice/ConnectionProfileAlloydbSettings:ConnectionProfileAlloydbSettings": {
                "initialUser": "initial_user",
                "primaryInstanceSettings": "primary_instance_settings",
                "vpcNetwork": "vpc_network"
            },
            "gcp:databasemigrationservice/ConnectionProfileAlloydbSettingsInitialUser:ConnectionProfileAlloydbSettingsInitialUser": {
                "passwordSet": "password_set"
            },
            "gcp:databasemigrationservice/ConnectionProfileAlloydbSettingsPrimaryInstanceSettings:ConnectionProfileAlloydbSettingsPrimaryInstanceSettings": {
                "databaseFlags": "database_flags",
                "machineConfig": "machine_config",
                "privateIp": "private_ip"
            },
            "gcp:databasemigrationservice/ConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfig:ConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfig": {
                "cpuCount": "cpu_count"
            },
            "gcp:databasemigrationservice/ConnectionProfileCloudsql:ConnectionProfileCloudsql": {
                "cloudSqlId": "cloud_sql_id",
                "privateIp": "private_ip",
                "publicIp": "public_ip"
            },
            "gcp:databasemigrationservice/ConnectionProfileCloudsqlSettings:ConnectionProfileCloudsqlSettings": {
                "activationPolicy": "activation_policy",
                "autoStorageIncrease": "auto_storage_increase",
                "cmekKeyName": "cmek_key_name",
                "dataDiskSizeGb": "data_disk_size_gb",
                "dataDiskType": "data_disk_type",
                "databaseFlags": "database_flags",
                "databaseVersion": "database_version",
                "ipConfig": "ip_config",
                "rootPassword": "root_password",
                "rootPasswordSet": "root_password_set",
                "sourceId": "source_id",
                "storageAutoResizeLimit": "storage_auto_resize_limit",
                "userLabels": "user_labels"
            },
            "gcp:databasemigrationservice/ConnectionProfileCloudsqlSettingsIpConfig:ConnectionProfileCloudsqlSettingsIpConfig": {
                "authorizedNetworks": "authorized_networks",
                "enableIpv4": "enable_ipv4",
                "privateNetwork": "private_network",
                "requireSsl": "require_ssl"
            },
            "gcp:databasemigrationservice/ConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetwork:ConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetwork": {
                "expireTime": "expire_time"
            },
            "gcp:databasemigrationservice/ConnectionProfileMysql:ConnectionProfileMysql": {
                "cloudSqlId": "cloud_sql_id",
                "passwordSet": "password_set"
            },
            "gcp:databasemigrationservice/ConnectionProfileMysqlSsl:ConnectionProfileMysqlSsl": {
                "caCertificate": "ca_certificate",
                "clientCertificate": "client_certificate",
                "clientKey": "client_key"
            },
            "gcp:databasemigrationservice/ConnectionProfilePostgresql:ConnectionProfilePostgresql": {
                "cloudSqlId": "cloud_sql_id",
                "networkArchitecture": "network_architecture",
                "passwordSet": "password_set"
            },
            "gcp:databasemigrationservice/ConnectionProfilePostgresqlSsl:ConnectionProfilePostgresqlSsl": {
                "caCertificate": "ca_certificate",
                "clientCertificate": "client_certificate",
                "clientKey": "client_key"
            },
            "gcp:databasemigrationservice/connectionProfile:ConnectionProfile": {
                "connectionProfileId": "connection_profile_id",
                "createTime": "create_time",
                "displayName": "display_name",
                "errors": "error"
            },
            "gcp:datacatalog/EntryBigqueryDateShardedSpec:EntryBigqueryDateShardedSpec": {
                "shardCount": "shard_count",
                "tablePrefix": "table_prefix"
            },
            "gcp:datacatalog/EntryBigqueryTableSpec:EntryBigqueryTableSpec": {
                "tableSourceType": "table_source_type",
                "tableSpecs": "table_spec",
                "viewSpecs": "view_spec"
            },
            "gcp:datacatalog/EntryBigqueryTableSpecTableSpec:EntryBigqueryTableSpecTableSpec": {
                "groupedEntry": "grouped_entry"
            },
            "gcp:datacatalog/EntryBigqueryTableSpecViewSpec:EntryBigqueryTableSpecViewSpec": {
                "viewQuery": "view_query"
            },
            "gcp:datacatalog/EntryGcsFilesetSpec:EntryGcsFilesetSpec": {
                "filePatterns": "file_patterns",
                "sampleGcsFileSpecs": "sample_gcs_file_specs"
            },
            "gcp:datacatalog/EntryGcsFilesetSpecSampleGcsFileSpec:EntryGcsFilesetSpecSampleGcsFileSpec": {
                "filePath": "file_path",
                "sizeBytes": "size_bytes"
            },
            "gcp:datacatalog/TagField:TagField": {
                "boolValue": "bool_value",
                "displayName": "display_name",
                "doubleValue": "double_value",
                "enumValue": "enum_value",
                "fieldName": "field_name",
                "stringValue": "string_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:datacatalog/TagTemplateField:TagTemplateField": {
                "displayName": "display_name",
                "fieldId": "field_id",
                "isRequired": "is_required"
            },
            "gcp:datacatalog/TagTemplateFieldType:TagTemplateFieldType": {
                "enumType": "enum_type",
                "primitiveType": "primitive_type"
            },
            "gcp:datacatalog/TagTemplateFieldTypeEnumType:TagTemplateFieldTypeEnumType": {
                "allowedValues": "allowed_values"
            },
            "gcp:datacatalog/TagTemplateFieldTypeEnumTypeAllowedValue:TagTemplateFieldTypeEnumTypeAllowedValue": {
                "displayName": "display_name"
            },
            "gcp:datacatalog/entry:Entry": {
                "bigqueryDateShardedSpecs": "bigquery_date_sharded_spec",
                "bigqueryTableSpecs": "bigquery_table_spec",
                "displayName": "display_name",
                "entryGroup": "entry_group",
                "entryId": "entry_id",
                "gcsFilesetSpec": "gcs_fileset_spec",
                "integratedSystem": "integrated_system",
                "linkedResource": "linked_resource",
                "userSpecifiedSystem": "user_specified_system",
                "userSpecifiedType": "user_specified_type"
            },
            "gcp:datacatalog/entryGroup:EntryGroup": {
                "displayName": "display_name",
                "entryGroupId": "entry_group_id"
            },
            "gcp:datacatalog/entryGroupIamBinding:EntryGroupIamBinding": {
                "entryGroup": "entry_group"
            },
            "gcp:datacatalog/entryGroupIamMember:EntryGroupIamMember": {
                "entryGroup": "entry_group"
            },
            "gcp:datacatalog/entryGroupIamPolicy:EntryGroupIamPolicy": {
                "entryGroup": "entry_group",
                "policyData": "policy_data"
            },
            "gcp:datacatalog/getEntryGroupIamPolicy:getEntryGroupIamPolicy": {
                "entryGroup": "entry_group",
                "policyData": "policy_data"
            },
            "gcp:datacatalog/getPolicyTagIamPolicy:getPolicyTagIamPolicy": {
                "policyData": "policy_data",
                "policyTag": "policy_tag"
            },
            "gcp:datacatalog/getTagTemplateIamPolicy:getTagTemplateIamPolicy": {
                "policyData": "policy_data",
                "tagTemplate": "tag_template"
            },
            "gcp:datacatalog/getTaxonomyIamPolicy:getTaxonomyIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:datacatalog/policyTag:PolicyTag": {
                "childPolicyTags": "child_policy_tags",
                "displayName": "display_name",
                "parentPolicyTag": "parent_policy_tag"
            },
            "gcp:datacatalog/policyTagIamBinding:PolicyTagIamBinding": {
                "policyTag": "policy_tag"
            },
            "gcp:datacatalog/policyTagIamMember:PolicyTagIamMember": {
                "policyTag": "policy_tag"
            },
            "gcp:datacatalog/policyTagIamPolicy:PolicyTagIamPolicy": {
                "policyData": "policy_data",
                "policyTag": "policy_tag"
            },
            "gcp:datacatalog/tag:Tag": {
                "templateDisplayname": "template_displayname"
            },
            "gcp:datacatalog/tagTemplate:TagTemplate": {
                "displayName": "display_name",
                "forceDelete": "force_delete",
                "tagTemplateId": "tag_template_id"
            },
            "gcp:datacatalog/tagTemplateIamBinding:TagTemplateIamBinding": {
                "tagTemplate": "tag_template"
            },
            "gcp:datacatalog/tagTemplateIamMember:TagTemplateIamMember": {
                "tagTemplate": "tag_template"
            },
            "gcp:datacatalog/tagTemplateIamPolicy:TagTemplateIamPolicy": {
                "policyData": "policy_data",
                "tagTemplate": "tag_template"
            },
            "gcp:datacatalog/taxonomy:Taxonomy": {
                "activatedPolicyTypes": "activated_policy_types",
                "displayName": "display_name"
            },
            "gcp:datacatalog/taxonomyIamPolicy:TaxonomyIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:dataflow/flexTemplateJob:FlexTemplateJob": {
                "additionalExperiments": "additional_experiments",
                "autoscalingAlgorithm": "autoscaling_algorithm",
                "containerSpecGcsPath": "container_spec_gcs_path",
                "enableStreamingEngine": "enable_streaming_engine",
                "ipConfiguration": "ip_configuration",
                "jobId": "job_id",
                "kmsKeyName": "kms_key_name",
                "launcherMachineType": "launcher_machine_type",
                "machineType": "machine_type",
                "maxWorkers": "max_workers",
                "numWorkers": "num_workers",
                "onDelete": "on_delete",
                "sdkContainerImage": "sdk_container_image",
                "serviceAccountEmail": "service_account_email",
                "skipWaitOnJobTermination": "skip_wait_on_job_termination",
                "stagingLocation": "staging_location",
                "tempLocation": "temp_location",
                "transformNameMapping": "transform_name_mapping"
            },
            "gcp:dataflow/job:Job": {
                "additionalExperiments": "additional_experiments",
                "enableStreamingEngine": "enable_streaming_engine",
                "ipConfiguration": "ip_configuration",
                "jobId": "job_id",
                "kmsKeyName": "kms_key_name",
                "machineType": "machine_type",
                "maxWorkers": "max_workers",
                "onDelete": "on_delete",
                "serviceAccountEmail": "service_account_email",
                "skipWaitOnJobTermination": "skip_wait_on_job_termination",
                "tempGcsLocation": "temp_gcs_location",
                "templateGcsPath": "template_gcs_path",
                "transformNameMapping": "transform_name_mapping"
            },
            "gcp:dataform/RepositoryGitRemoteSettings:RepositoryGitRemoteSettings": {
                "authenticationTokenSecretVersion": "authentication_token_secret_version",
                "defaultBranch": "default_branch",
                "tokenStatus": "token_status"
            },
            "gcp:dataform/RepositoryWorkspaceCompilationOverrides:RepositoryWorkspaceCompilationOverrides": {
                "defaultDatabase": "default_database",
                "schemaSuffix": "schema_suffix",
                "tablePrefix": "table_prefix"
            },
            "gcp:dataform/repository:Repository": {
                "gitRemoteSettings": "git_remote_settings",
                "workspaceCompilationOverrides": "workspace_compilation_overrides"
            },
            "gcp:datafusion/InstanceAccelerator:InstanceAccelerator": {
                "acceleratorType": "accelerator_type"
            },
            "gcp:datafusion/InstanceCryptoKeyConfig:InstanceCryptoKeyConfig": {
                "keyReference": "key_reference"
            },
            "gcp:datafusion/InstanceNetworkConfig:InstanceNetworkConfig": {
                "ipAllocation": "ip_allocation"
            },
            "gcp:datafusion/getInstanceIamPolicy:getInstanceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:datafusion/instance:Instance": {
                "apiEndpoint": "api_endpoint",
                "createTime": "create_time",
                "cryptoKeyConfig": "crypto_key_config",
                "dataprocServiceAccount": "dataproc_service_account",
                "displayName": "display_name",
                "enableRbac": "enable_rbac",
                "enableStackdriverLogging": "enable_stackdriver_logging",
                "enableStackdriverMonitoring": "enable_stackdriver_monitoring",
                "eventPublishConfig": "event_publish_config",
                "gcsBucket": "gcs_bucket",
                "networkConfig": "network_config",
                "p4ServiceAccount": "p4_service_account",
                "privateInstance": "private_instance",
                "serviceAccount": "service_account",
                "serviceEndpoint": "service_endpoint",
                "stateMessage": "state_message",
                "tenantProjectId": "tenant_project_id",
                "updateTime": "update_time"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfig:PreventionDeidentifyTemplateDeidentifyConfig": {
                "imageTransformations": "image_transformations",
                "infoTypeTransformations": "info_type_transformations",
                "recordTransformations": "record_transformations"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransform:PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransform": {
                "allInfoTypes": "all_info_types",
                "allText": "all_text",
                "redactionColor": "redaction_color",
                "selectedInfoTypes": "selected_info_types"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypes:PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypes": {
                "infoTypes": "info_types"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesInfoType:PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformation:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformation": {
                "infoTypes": "info_types",
                "primitiveTransformation": "primitive_transformation"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationInfoType:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformation:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformation": {
                "bucketingConfig": "bucketing_config",
                "characterMaskConfig": "character_mask_config",
                "cryptoDeterministicConfig": "crypto_deterministic_config",
                "cryptoHashConfig": "crypto_hash_config",
                "cryptoReplaceFfxFpeConfig": "crypto_replace_ffx_fpe_config",
                "dateShiftConfig": "date_shift_config",
                "fixedSizeBucketingConfig": "fixed_size_bucketing_config",
                "redactConfig": "redact_config",
                "replaceConfig": "replace_config",
                "replaceDictionaryConfig": "replace_dictionary_config",
                "replaceWithInfoTypeConfig": "replace_with_info_type_config",
                "timePartConfig": "time_part_config"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucket:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucket": {
                "replacementValue": "replacement_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucketMax:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucketMax": {
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucketMin:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucketMin": {
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucketReplacementValue:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucketReplacementValue": {
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfig:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfig": {
                "charactersToIgnores": "characters_to_ignore",
                "maskingCharacter": "masking_character",
                "numberToMask": "number_to_mask",
                "reverseOrder": "reverse_order"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigCharactersToIgnore:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigCharactersToIgnore": {
                "charactersToSkip": "characters_to_skip",
                "commonCharactersToIgnore": "common_characters_to_ignore"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfig:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfig": {
                "cryptoKey": "crypto_key",
                "surrogateInfoType": "surrogate_info_type"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfigCryptoKey:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfigCryptoKey": {
                "kmsWrapped": "kms_wrapped"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrapped:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrapped": {
                "cryptoKeyName": "crypto_key_name",
                "wrappedKey": "wrapped_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoType:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoHashConfig:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoHashConfig": {
                "cryptoKey": "crypto_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoHashConfigCryptoKey:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoHashConfigCryptoKey": {
                "kmsWrapped": "kms_wrapped"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrapped:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrapped": {
                "cryptoKeyName": "crypto_key_name",
                "wrappedKey": "wrapped_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfig:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfig": {
                "commonAlphabet": "common_alphabet",
                "cryptoKey": "crypto_key",
                "customAlphabet": "custom_alphabet",
                "surrogateInfoType": "surrogate_info_type"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKey:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKey": {
                "kmsWrapped": "kms_wrapped"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrapped:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrapped": {
                "cryptoKeyName": "crypto_key_name",
                "wrappedKey": "wrapped_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoType:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationDateShiftConfig:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationDateShiftConfig": {
                "cryptoKey": "crypto_key",
                "lowerBoundDays": "lower_bound_days",
                "upperBoundDays": "upper_bound_days"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationDateShiftConfigCryptoKey:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationDateShiftConfigCryptoKey": {
                "kmsWrapped": "kms_wrapped"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrapped:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrapped": {
                "cryptoKeyName": "crypto_key_name",
                "wrappedKey": "wrapped_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationFixedSizeBucketingConfig:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationFixedSizeBucketingConfig": {
                "bucketSize": "bucket_size",
                "lowerBound": "lower_bound",
                "upperBound": "upper_bound"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationFixedSizeBucketingConfigLowerBound:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationFixedSizeBucketingConfigLowerBound": {
                "floatValue": "float_value",
                "integerValue": "integer_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationFixedSizeBucketingConfigUpperBound:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationFixedSizeBucketingConfigUpperBound": {
                "floatValue": "float_value",
                "integerValue": "integer_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationReplaceConfig:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationReplaceConfig": {
                "newValue": "new_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationReplaceConfigNewValue:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationReplaceConfigNewValue": {
                "booleanValue": "boolean_value",
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationReplaceDictionaryConfig:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationReplaceDictionaryConfig": {
                "wordList": "word_list"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationTimePartConfig:PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationTimePartConfig": {
                "partToExtract": "part_to_extract"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformations:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformations": {
                "fieldTransformations": "field_transformations",
                "recordSuppressions": "record_suppressions"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformation:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformation": {
                "infoTypeTransformations": "info_type_transformations",
                "primitiveTransformation": "primitive_transformation"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationConditionExpressions:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationConditionExpressions": {
                "logicalOperator": "logical_operator"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationConditionExpressionsConditionsConditionValue:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationConditionExpressionsConditionsConditionValue": {
                "booleanValue": "boolean_value",
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformation:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformation": {
                "infoTypes": "info_types",
                "primitiveTransformation": "primitive_transformation"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationInfoType:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformation:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformation": {
                "bucketingConfig": "bucketing_config",
                "characterMaskConfig": "character_mask_config",
                "cryptoDeterministicConfig": "crypto_deterministic_config",
                "cryptoHashConfig": "crypto_hash_config",
                "cryptoReplaceFfxFpeConfig": "crypto_replace_ffx_fpe_config",
                "dateShiftConfig": "date_shift_config",
                "fixedSizeBucketingConfig": "fixed_size_bucketing_config",
                "redactConfig": "redact_config",
                "replaceConfig": "replace_config",
                "replaceDictionaryConfig": "replace_dictionary_config",
                "replaceWithInfoTypeConfig": "replace_with_info_type_config",
                "timePartConfig": "time_part_config"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucket:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucket": {
                "replacementValue": "replacement_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucketMax:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucketMax": {
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucketMin:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucketMin": {
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucketReplacementValue:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationBucketingConfigBucketReplacementValue": {
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfig": {
                "charactersToIgnores": "characters_to_ignore",
                "maskingCharacter": "masking_character",
                "numberToMask": "number_to_mask",
                "reverseOrder": "reverse_order"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigCharactersToIgnore:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigCharactersToIgnore": {
                "charactersToSkip": "characters_to_skip",
                "commonCharactersToIgnore": "common_characters_to_ignore"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfig": {
                "cryptoKey": "crypto_key",
                "surrogateInfoType": "surrogate_info_type"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfigCryptoKey:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfigCryptoKey": {
                "kmsWrapped": "kms_wrapped"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrapped:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrapped": {
                "cryptoKeyName": "crypto_key_name",
                "wrappedKey": "wrapped_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoType:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoHashConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoHashConfig": {
                "cryptoKey": "crypto_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoHashConfigCryptoKey:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoHashConfigCryptoKey": {
                "kmsWrapped": "kms_wrapped"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrapped:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrapped": {
                "cryptoKeyName": "crypto_key_name",
                "wrappedKey": "wrapped_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfig": {
                "commonAlphabet": "common_alphabet",
                "cryptoKey": "crypto_key",
                "customAlphabet": "custom_alphabet",
                "surrogateInfoType": "surrogate_info_type"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKey:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKey": {
                "kmsWrapped": "kms_wrapped"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrapped:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrapped": {
                "cryptoKeyName": "crypto_key_name",
                "wrappedKey": "wrapped_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoType:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationDateShiftConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationDateShiftConfig": {
                "cryptoKey": "crypto_key",
                "lowerBoundDays": "lower_bound_days",
                "upperBoundDays": "upper_bound_days"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationDateShiftConfigCryptoKey:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationDateShiftConfigCryptoKey": {
                "kmsWrapped": "kms_wrapped"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrapped:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrapped": {
                "cryptoKeyName": "crypto_key_name",
                "wrappedKey": "wrapped_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationFixedSizeBucketingConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationFixedSizeBucketingConfig": {
                "bucketSize": "bucket_size",
                "lowerBound": "lower_bound",
                "upperBound": "upper_bound"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationFixedSizeBucketingConfigLowerBound:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationFixedSizeBucketingConfigLowerBound": {
                "floatValue": "float_value",
                "integerValue": "integer_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationFixedSizeBucketingConfigUpperBound:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationFixedSizeBucketingConfigUpperBound": {
                "floatValue": "float_value",
                "integerValue": "integer_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationReplaceConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationReplaceConfig": {
                "newValue": "new_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationReplaceConfigNewValue:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationReplaceConfigNewValue": {
                "booleanValue": "boolean_value",
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationReplaceDictionaryConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationReplaceDictionaryConfig": {
                "wordList": "word_list"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationTimePartConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsTransformationPrimitiveTransformationTimePartConfig": {
                "partToExtract": "part_to_extract"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformation:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformation": {
                "bucketingConfig": "bucketing_config",
                "characterMaskConfig": "character_mask_config",
                "cryptoDeterministicConfig": "crypto_deterministic_config",
                "cryptoHashConfig": "crypto_hash_config",
                "cryptoReplaceFfxFpeConfig": "crypto_replace_ffx_fpe_config",
                "dateShiftConfig": "date_shift_config",
                "fixedSizeBucketingConfig": "fixed_size_bucketing_config",
                "redactConfig": "redact_config",
                "replaceConfig": "replace_config",
                "replaceDictionaryConfig": "replace_dictionary_config",
                "timePartConfig": "time_part_config"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucket:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucket": {
                "replacementValue": "replacement_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMax:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMax": {
                "booleanValue": "boolean_value",
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMin:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMin": {
                "booleanValue": "boolean_value",
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketReplacementValue:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketReplacementValue": {
                "booleanValue": "boolean_value",
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCharacterMaskConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCharacterMaskConfig": {
                "charactersToIgnores": "characters_to_ignore",
                "maskingCharacter": "masking_character",
                "numberToMask": "number_to_mask",
                "reverseOrder": "reverse_order"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCharacterMaskConfigCharactersToIgnore:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCharacterMaskConfigCharactersToIgnore": {
                "charactersToSkip": "characters_to_skip",
                "commonCharactersToIgnore": "common_characters_to_ignore"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoDeterministicConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoDeterministicConfig": {
                "cryptoKey": "crypto_key",
                "surrogateInfoType": "surrogate_info_type"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoDeterministicConfigCryptoKey:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoDeterministicConfigCryptoKey": {
                "kmsWrapped": "kms_wrapped"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrapped:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrapped": {
                "cryptoKeyName": "crypto_key_name",
                "wrappedKey": "wrapped_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoType:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoHashConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoHashConfig": {
                "cryptoKey": "crypto_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoHashConfigCryptoKey:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoHashConfigCryptoKey": {
                "kmsWrapped": "kms_wrapped"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrapped:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrapped": {
                "cryptoKeyName": "crypto_key_name",
                "wrappedKey": "wrapped_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfig": {
                "commonAlphabet": "common_alphabet",
                "cryptoKey": "crypto_key",
                "customAlphabet": "custom_alphabet",
                "surrogateInfoType": "surrogate_info_type"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKey:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKey": {
                "kmsWrapped": "kms_wrapped"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrapped:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrapped": {
                "cryptoKeyName": "crypto_key_name",
                "wrappedKey": "wrapped_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoType:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationDateShiftConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationDateShiftConfig": {
                "cryptoKey": "crypto_key",
                "lowerBoundDays": "lower_bound_days",
                "upperBoundDays": "upper_bound_days"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationDateShiftConfigCryptoKey:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationDateShiftConfigCryptoKey": {
                "kmsWrapped": "kms_wrapped"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrapped:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrapped": {
                "cryptoKeyName": "crypto_key_name",
                "wrappedKey": "wrapped_key"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationFixedSizeBucketingConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationFixedSizeBucketingConfig": {
                "bucketSize": "bucket_size",
                "lowerBound": "lower_bound",
                "upperBound": "upper_bound"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationFixedSizeBucketingConfigLowerBound:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationFixedSizeBucketingConfigLowerBound": {
                "booleanValue": "boolean_value",
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationFixedSizeBucketingConfigUpperBound:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationFixedSizeBucketingConfigUpperBound": {
                "booleanValue": "boolean_value",
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationReplaceConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationReplaceConfig": {
                "newValue": "new_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationReplaceConfigNewValue:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationReplaceConfigNewValue": {
                "booleanValue": "boolean_value",
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationReplaceDictionaryConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationReplaceDictionaryConfig": {
                "wordList": "word_list"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationTimePartConfig:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationTimePartConfig": {
                "partToExtract": "part_to_extract"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionConditionExpressions:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionConditionExpressions": {
                "logicalOperator": "logical_operator"
            },
            "gcp:dataloss/PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionConditionExpressionsConditionsConditionValue:PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionConditionExpressionsConditionsConditionValue": {
                "booleanValue": "boolean_value",
                "dateValue": "date_value",
                "dayOfWeekValue": "day_of_week_value",
                "floatValue": "float_value",
                "integerValue": "integer_value",
                "stringValue": "string_value",
                "timeValue": "time_value",
                "timestampValue": "timestamp_value"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfig:PreventionInspectTemplateInspectConfig": {
                "contentOptions": "content_options",
                "customInfoTypes": "custom_info_types",
                "excludeInfoTypes": "exclude_info_types",
                "includeQuote": "include_quote",
                "infoTypes": "info_types",
                "minLikelihood": "min_likelihood",
                "ruleSets": "rule_set"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigCustomInfoType:PreventionInspectTemplateInspectConfigCustomInfoType": {
                "exclusionType": "exclusion_type",
                "infoType": "info_type",
                "sensitivityScore": "sensitivity_score",
                "storedType": "stored_type",
                "surrogateType": "surrogate_type"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigCustomInfoTypeDictionary:PreventionInspectTemplateInspectConfigCustomInfoTypeDictionary": {
                "cloudStoragePath": "cloud_storage_path",
                "wordList": "word_list"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigCustomInfoTypeInfoType:PreventionInspectTemplateInspectConfigCustomInfoTypeInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigCustomInfoTypeRegex:PreventionInspectTemplateInspectConfigCustomInfoTypeRegex": {
                "groupIndexes": "group_indexes"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigInfoType:PreventionInspectTemplateInspectConfigInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigLimits:PreventionInspectTemplateInspectConfigLimits": {
                "maxFindingsPerInfoTypes": "max_findings_per_info_type",
                "maxFindingsPerItem": "max_findings_per_item",
                "maxFindingsPerRequest": "max_findings_per_request"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType:PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType": {
                "infoType": "info_type",
                "maxFindings": "max_findings"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoType:PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSet:PreventionInspectTemplateInspectConfigRuleSet": {
                "infoTypes": "info_types"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetInfoType:PreventionInspectTemplateInspectConfigRuleSetInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRule:PreventionInspectTemplateInspectConfigRuleSetRule": {
                "exclusionRule": "exclusion_rule",
                "hotwordRule": "hotword_rule"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRule:PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRule": {
                "excludeByHotword": "exclude_by_hotword",
                "excludeInfoTypes": "exclude_info_types",
                "matchingType": "matching_type"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionary:PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleDictionary": {
                "cloudStoragePath": "cloud_storage_path",
                "wordList": "word_list"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeByHotword:PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeByHotword": {
                "hotwordRegex": "hotword_regex"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeByHotwordHotwordRegex:PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeByHotwordHotwordRegex": {
                "groupIndexes": "group_indexes"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeByHotwordProximity:PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeByHotwordProximity": {
                "windowAfter": "window_after",
                "windowBefore": "window_before"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypes:PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypes": {
                "infoTypes": "info_types"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypesInfoType:PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypesInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleRegex:PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleRegex": {
                "groupIndexes": "group_indexes"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRule:PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRule": {
                "hotwordRegex": "hotword_regex",
                "likelihoodAdjustment": "likelihood_adjustment"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegex:PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegex": {
                "groupIndexes": "group_indexes"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment:PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment": {
                "fixedLikelihood": "fixed_likelihood",
                "relativeLikelihood": "relative_likelihood"
            },
            "gcp:dataloss/PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximity:PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximity": {
                "windowAfter": "window_after",
                "windowBefore": "window_before"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJob:PreventionJobTriggerInspectJob": {
                "inspectConfig": "inspect_config",
                "inspectTemplateName": "inspect_template_name",
                "storageConfig": "storage_config"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobAction:PreventionJobTriggerInspectJobAction": {
                "jobNotificationEmails": "job_notification_emails",
                "pubSub": "pub_sub",
                "publishFindingsToCloudDataCatalog": "publish_findings_to_cloud_data_catalog",
                "publishSummaryToCscc": "publish_summary_to_cscc",
                "publishToStackdriver": "publish_to_stackdriver",
                "saveFindings": "save_findings"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobActionDeidentify:PreventionJobTriggerInspectJobActionDeidentify": {
                "cloudStorageOutput": "cloud_storage_output",
                "fileTypesToTransforms": "file_types_to_transform",
                "transformationConfig": "transformation_config",
                "transformationDetailsStorageConfig": "transformation_details_storage_config"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobActionDeidentifyTransformationConfig:PreventionJobTriggerInspectJobActionDeidentifyTransformationConfig": {
                "deidentifyTemplate": "deidentify_template",
                "imageRedactTemplate": "image_redact_template",
                "structuredDeidentifyTemplate": "structured_deidentify_template"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobActionDeidentifyTransformationDetailsStorageConfigTable:PreventionJobTriggerInspectJobActionDeidentifyTransformationDetailsStorageConfigTable": {
                "datasetId": "dataset_id",
                "projectId": "project_id",
                "tableId": "table_id"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobActionSaveFindings:PreventionJobTriggerInspectJobActionSaveFindings": {
                "outputConfig": "output_config"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobActionSaveFindingsOutputConfig:PreventionJobTriggerInspectJobActionSaveFindingsOutputConfig": {
                "outputSchema": "output_schema"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigTable:PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigTable": {
                "datasetId": "dataset_id",
                "projectId": "project_id",
                "tableId": "table_id"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfig:PreventionJobTriggerInspectJobInspectConfig": {
                "customInfoTypes": "custom_info_types",
                "excludeInfoTypes": "exclude_info_types",
                "includeQuote": "include_quote",
                "infoTypes": "info_types",
                "minLikelihood": "min_likelihood",
                "ruleSets": "rule_set"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigCustomInfoType:PreventionJobTriggerInspectJobInspectConfigCustomInfoType": {
                "exclusionType": "exclusion_type",
                "infoType": "info_type",
                "sensitivityScore": "sensitivity_score",
                "storedType": "stored_type",
                "surrogateType": "surrogate_type"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigCustomInfoTypeDictionary:PreventionJobTriggerInspectJobInspectConfigCustomInfoTypeDictionary": {
                "cloudStoragePath": "cloud_storage_path",
                "wordList": "word_list"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigCustomInfoTypeInfoType:PreventionJobTriggerInspectJobInspectConfigCustomInfoTypeInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigCustomInfoTypeRegex:PreventionJobTriggerInspectJobInspectConfigCustomInfoTypeRegex": {
                "groupIndexes": "group_indexes"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigCustomInfoTypeStoredType:PreventionJobTriggerInspectJobInspectConfigCustomInfoTypeStoredType": {
                "createTime": "create_time"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigInfoType:PreventionJobTriggerInspectJobInspectConfigInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigLimits:PreventionJobTriggerInspectJobInspectConfigLimits": {
                "maxFindingsPerInfoTypes": "max_findings_per_info_type",
                "maxFindingsPerItem": "max_findings_per_item",
                "maxFindingsPerRequest": "max_findings_per_request"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoType:PreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoType": {
                "infoType": "info_type",
                "maxFindings": "max_findings"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoType:PreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSet:PreventionJobTriggerInspectJobInspectConfigRuleSet": {
                "infoTypes": "info_types"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetInfoType:PreventionJobTriggerInspectJobInspectConfigRuleSetInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRule:PreventionJobTriggerInspectJobInspectConfigRuleSetRule": {
                "exclusionRule": "exclusion_rule",
                "hotwordRule": "hotword_rule"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRule:PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRule": {
                "excludeByHotword": "exclude_by_hotword",
                "excludeInfoTypes": "exclude_info_types",
                "matchingType": "matching_type"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleDictionary:PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleDictionary": {
                "cloudStoragePath": "cloud_storage_path",
                "wordList": "word_list"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleExcludeByHotword:PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleExcludeByHotword": {
                "hotwordRegex": "hotword_regex"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleExcludeByHotwordHotwordRegex:PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleExcludeByHotwordHotwordRegex": {
                "groupIndexes": "group_indexes"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleExcludeByHotwordProximity:PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleExcludeByHotwordProximity": {
                "windowAfter": "window_after",
                "windowBefore": "window_before"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypes:PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypes": {
                "infoTypes": "info_types"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypesInfoType:PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleExcludeInfoTypesInfoType": {
                "sensitivityScore": "sensitivity_score"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleRegex:PreventionJobTriggerInspectJobInspectConfigRuleSetRuleExclusionRuleRegex": {
                "groupIndexes": "group_indexes"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRuleHotwordRule:PreventionJobTriggerInspectJobInspectConfigRuleSetRuleHotwordRule": {
                "hotwordRegex": "hotword_regex",
                "likelihoodAdjustment": "likelihood_adjustment"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRuleHotwordRuleHotwordRegex:PreventionJobTriggerInspectJobInspectConfigRuleSetRuleHotwordRuleHotwordRegex": {
                "groupIndexes": "group_indexes"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment:PreventionJobTriggerInspectJobInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment": {
                "fixedLikelihood": "fixed_likelihood",
                "relativeLikelihood": "relative_likelihood"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobInspectConfigRuleSetRuleHotwordRuleProximity:PreventionJobTriggerInspectJobInspectConfigRuleSetRuleHotwordRuleProximity": {
                "windowAfter": "window_after",
                "windowBefore": "window_before"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobStorageConfig:PreventionJobTriggerInspectJobStorageConfig": {
                "bigQueryOptions": "big_query_options",
                "cloudStorageOptions": "cloud_storage_options",
                "datastoreOptions": "datastore_options",
                "hybridOptions": "hybrid_options",
                "timespanConfig": "timespan_config"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobStorageConfigBigQueryOptions:PreventionJobTriggerInspectJobStorageConfigBigQueryOptions": {
                "excludedFields": "excluded_fields",
                "identifyingFields": "identifying_fields",
                "includedFields": "included_fields",
                "rowsLimit": "rows_limit",
                "rowsLimitPercent": "rows_limit_percent",
                "sampleMethod": "sample_method",
                "tableReference": "table_reference"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReference:PreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReference": {
                "datasetId": "dataset_id",
                "projectId": "project_id",
                "tableId": "table_id"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobStorageConfigCloudStorageOptions:PreventionJobTriggerInspectJobStorageConfigCloudStorageOptions": {
                "bytesLimitPerFile": "bytes_limit_per_file",
                "bytesLimitPerFilePercent": "bytes_limit_per_file_percent",
                "fileSet": "file_set",
                "fileTypes": "file_types",
                "filesLimitPercent": "files_limit_percent",
                "sampleMethod": "sample_method"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSet:PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSet": {
                "regexFileSet": "regex_file_set"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSet:PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSet": {
                "bucketName": "bucket_name",
                "excludeRegexes": "exclude_regex",
                "includeRegexes": "include_regex"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobStorageConfigDatastoreOptions:PreventionJobTriggerInspectJobStorageConfigDatastoreOptions": {
                "partitionId": "partition_id"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionId:PreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionId": {
                "namespaceId": "namespace_id",
                "projectId": "project_id"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobStorageConfigHybridOptions:PreventionJobTriggerInspectJobStorageConfigHybridOptions": {
                "requiredFindingLabelKeys": "required_finding_label_keys",
                "tableOptions": "table_options"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptions:PreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptions": {
                "identifyingFields": "identifying_fields"
            },
            "gcp:dataloss/PreventionJobTriggerInspectJobStorageConfigTimespanConfig:PreventionJobTriggerInspectJobStorageConfigTimespanConfig": {
                "enableAutoPopulationOfTimespanConfig": "enable_auto_population_of_timespan_config",
                "endTime": "end_time",
                "startTime": "start_time",
                "timestampField": "timestamp_field"
            },
            "gcp:dataloss/PreventionJobTriggerTriggerSchedule:PreventionJobTriggerTriggerSchedule": {
                "recurrencePeriodDuration": "recurrence_period_duration"
            },
            "gcp:dataloss/PreventionStoredInfoTypeDictionary:PreventionStoredInfoTypeDictionary": {
                "cloudStoragePath": "cloud_storage_path",
                "wordList": "word_list"
            },
            "gcp:dataloss/PreventionStoredInfoTypeLargeCustomDictionary:PreventionStoredInfoTypeLargeCustomDictionary": {
                "bigQueryField": "big_query_field",
                "cloudStorageFileSet": "cloud_storage_file_set",
                "outputPath": "output_path"
            },
            "gcp:dataloss/PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldTable:PreventionStoredInfoTypeLargeCustomDictionaryBigQueryFieldTable": {
                "datasetId": "dataset_id",
                "projectId": "project_id",
                "tableId": "table_id"
            },
            "gcp:dataloss/PreventionStoredInfoTypeRegex:PreventionStoredInfoTypeRegex": {
                "groupIndexes": "group_indexes"
            },
            "gcp:dataloss/preventionDeidentifyTemplate:PreventionDeidentifyTemplate": {
                "createTime": "create_time",
                "deidentifyConfig": "deidentify_config",
                "displayName": "display_name",
                "templateId": "template_id",
                "updateTime": "update_time"
            },
            "gcp:dataloss/preventionInspectTemplate:PreventionInspectTemplate": {
                "displayName": "display_name",
                "inspectConfig": "inspect_config",
                "templateId": "template_id"
            },
            "gcp:dataloss/preventionJobTrigger:PreventionJobTrigger": {
                "createTime": "create_time",
                "displayName": "display_name",
                "inspectJob": "inspect_job",
                "lastRunTime": "last_run_time",
                "triggerId": "trigger_id",
                "updateTime": "update_time"
            },
            "gcp:dataloss/preventionStoredInfoType:PreventionStoredInfoType": {
                "displayName": "display_name",
                "largeCustomDictionary": "large_custom_dictionary",
                "storedInfoTypeId": "stored_info_type_id"
            },
            "gcp:dataplex/AssetDiscoverySpec:AssetDiscoverySpec": {
                "csvOptions": "csv_options",
                "excludePatterns": "exclude_patterns",
                "includePatterns": "include_patterns",
                "jsonOptions": "json_options"
            },
            "gcp:dataplex/AssetDiscoverySpecCsvOptions:AssetDiscoverySpecCsvOptions": {
                "disableTypeInference": "disable_type_inference",
                "headerRows": "header_rows"
            },
            "gcp:dataplex/AssetDiscoverySpecJsonOptions:AssetDiscoverySpecJsonOptions": {
                "disableTypeInference": "disable_type_inference"
            },
            "gcp:dataplex/AssetDiscoveryStatus:AssetDiscoveryStatus": {
                "lastRunDuration": "last_run_duration",
                "lastRunTime": "last_run_time",
                "updateTime": "update_time"
            },
            "gcp:dataplex/AssetDiscoveryStatusStat:AssetDiscoveryStatusStat": {
                "dataItems": "data_items",
                "dataSize": "data_size"
            },
            "gcp:dataplex/AssetResourceStatus:AssetResourceStatus": {
                "updateTime": "update_time"
            },
            "gcp:dataplex/AssetSecurityStatus:AssetSecurityStatus": {
                "updateTime": "update_time"
            },
            "gcp:dataplex/DatascanDataProfileResult:DatascanDataProfileResult": {
                "profiles": "profile",
                "rowCount": "row_count",
                "scannedDatas": "scanned_data"
            },
            "gcp:dataplex/DatascanDataProfileResultProfileFieldProfile:DatascanDataProfileResultProfileFieldProfile": {
                "distinctRatio": "distinct_ratio",
                "doubleProfiles": "double_profile",
                "integerProfiles": "integer_profile",
                "nullRatio": "null_ratio",
                "stringProfiles": "string_profile",
                "topNValues": "top_n_values"
            },
            "gcp:dataplex/DatascanDataProfileResultProfileFieldProfileDoubleProfile:DatascanDataProfileResultProfileFieldProfileDoubleProfile": {
                "standardDeviation": "standard_deviation"
            },
            "gcp:dataplex/DatascanDataProfileResultProfileFieldProfileIntegerProfile:DatascanDataProfileResultProfileFieldProfileIntegerProfile": {
                "standardDeviation": "standard_deviation"
            },
            "gcp:dataplex/DatascanDataProfileResultProfileFieldProfileStringProfile:DatascanDataProfileResultProfileFieldProfileStringProfile": {
                "averageLength": "average_length",
                "maxLength": "max_length",
                "minLength": "min_length"
            },
            "gcp:dataplex/DatascanDataProfileResultScannedData:DatascanDataProfileResultScannedData": {
                "incrementalField": "incremental_field"
            },
            "gcp:dataplex/DatascanDataProfileSpec:DatascanDataProfileSpec": {
                "rowFilter": "row_filter",
                "samplingPercent": "sampling_percent"
            },
            "gcp:dataplex/DatascanDataQualityResult:DatascanDataQualityResult": {
                "rowCount": "row_count",
                "scannedDatas": "scanned_data"
            },
            "gcp:dataplex/DatascanDataQualityResultRule:DatascanDataQualityResultRule": {
                "evaluatedCount": "evaluated_count",
                "failingRowsQuery": "failing_rows_query",
                "nullCount": "null_count",
                "passRatio": "pass_ratio",
                "passedCount": "passed_count",
                "rules": "rule"
            },
            "gcp:dataplex/DatascanDataQualityResultRuleRule:DatascanDataQualityResultRuleRule": {
                "ignoreNull": "ignore_null",
                "nonNullExpectations": "non_null_expectation",
                "rangeExpectations": "range_expectation",
                "regexExpectations": "regex_expectation",
                "rowConditionExpectations": "row_condition_expectation",
                "setExpectations": "set_expectation",
                "statisticRangeExpectations": "statistic_range_expectation",
                "tableConditionExpectations": "table_condition_expectation",
                "uniquenessExpectations": "uniqueness_expectation"
            },
            "gcp:dataplex/DatascanDataQualityResultRuleRuleRangeExpectation:DatascanDataQualityResultRuleRuleRangeExpectation": {
                "maxValue": "max_value",
                "minValue": "min_value",
                "strictMaxEnabled": "strict_max_enabled",
                "strictMinEnabled": "strict_min_enabled"
            },
            "gcp:dataplex/DatascanDataQualityResultRuleRuleRowConditionExpectation:DatascanDataQualityResultRuleRuleRowConditionExpectation": {
                "sqlExpression": "sql_expression"
            },
            "gcp:dataplex/DatascanDataQualityResultRuleRuleStatisticRangeExpectation:DatascanDataQualityResultRuleRuleStatisticRangeExpectation": {
                "maxValue": "max_value",
                "minValue": "min_value",
                "strictMaxEnabled": "strict_max_enabled",
                "strictMinEnabled": "strict_min_enabled"
            },
            "gcp:dataplex/DatascanDataQualityResultRuleRuleTableConditionExpectation:DatascanDataQualityResultRuleRuleTableConditionExpectation": {
                "sqlExpression": "sql_expression"
            },
            "gcp:dataplex/DatascanDataQualityResultScannedData:DatascanDataQualityResultScannedData": {
                "incrementalField": "incremental_field"
            },
            "gcp:dataplex/DatascanDataQualitySpec:DatascanDataQualitySpec": {
                "rowFilter": "row_filter",
                "samplingPercent": "sampling_percent"
            },
            "gcp:dataplex/DatascanDataQualitySpecRule:DatascanDataQualitySpecRule": {
                "ignoreNull": "ignore_null",
                "nonNullExpectation": "non_null_expectation",
                "rangeExpectation": "range_expectation",
                "regexExpectation": "regex_expectation",
                "rowConditionExpectation": "row_condition_expectation",
                "setExpectation": "set_expectation",
                "statisticRangeExpectation": "statistic_range_expectation",
                "tableConditionExpectation": "table_condition_expectation",
                "uniquenessExpectation": "uniqueness_expectation"
            },
            "gcp:dataplex/DatascanDataQualitySpecRuleRangeExpectation:DatascanDataQualitySpecRuleRangeExpectation": {
                "maxValue": "max_value",
                "minValue": "min_value",
                "strictMaxEnabled": "strict_max_enabled",
                "strictMinEnabled": "strict_min_enabled"
            },
            "gcp:dataplex/DatascanDataQualitySpecRuleRowConditionExpectation:DatascanDataQualitySpecRuleRowConditionExpectation": {
                "sqlExpression": "sql_expression"
            },
            "gcp:dataplex/DatascanDataQualitySpecRuleStatisticRangeExpectation:DatascanDataQualitySpecRuleStatisticRangeExpectation": {
                "maxValue": "max_value",
                "minValue": "min_value",
                "strictMaxEnabled": "strict_max_enabled",
                "strictMinEnabled": "strict_min_enabled"
            },
            "gcp:dataplex/DatascanDataQualitySpecRuleTableConditionExpectation:DatascanDataQualitySpecRuleTableConditionExpectation": {
                "sqlExpression": "sql_expression"
            },
            "gcp:dataplex/DatascanExecutionSpecTrigger:DatascanExecutionSpecTrigger": {
                "onDemand": "on_demand"
            },
            "gcp:dataplex/DatascanExecutionStatus:DatascanExecutionStatus": {
                "latestJobEndTime": "latest_job_end_time",
                "latestJobStartTime": "latest_job_start_time"
            },
            "gcp:dataplex/LakeAssetStatus:LakeAssetStatus": {
                "activeAssets": "active_assets",
                "securityPolicyApplyingAssets": "security_policy_applying_assets",
                "updateTime": "update_time"
            },
            "gcp:dataplex/LakeMetastoreStatus:LakeMetastoreStatus": {
                "updateTime": "update_time"
            },
            "gcp:dataplex/TaskExecutionSpec:TaskExecutionSpec": {
                "kmsKey": "kms_key",
                "maxJobExecutionLifetime": "max_job_execution_lifetime",
                "serviceAccount": "service_account"
            },
            "gcp:dataplex/TaskExecutionStatus:TaskExecutionStatus": {
                "latestJobs": "latest_job",
                "updateTime": "update_time"
            },
            "gcp:dataplex/TaskExecutionStatusLatestJob:TaskExecutionStatusLatestJob": {
                "endTime": "end_time",
                "retryCount": "retry_count",
                "serviceJob": "service_job",
                "startTime": "start_time"
            },
            "gcp:dataplex/TaskNotebook:TaskNotebook": {
                "archiveUris": "archive_uris",
                "fileUris": "file_uris",
                "infrastructureSpec": "infrastructure_spec"
            },
            "gcp:dataplex/TaskNotebookInfrastructureSpec:TaskNotebookInfrastructureSpec": {
                "containerImage": "container_image",
                "vpcNetwork": "vpc_network"
            },
            "gcp:dataplex/TaskNotebookInfrastructureSpecBatch:TaskNotebookInfrastructureSpecBatch": {
                "executorsCount": "executors_count",
                "maxExecutorsCount": "max_executors_count"
            },
            "gcp:dataplex/TaskNotebookInfrastructureSpecContainerImage:TaskNotebookInfrastructureSpecContainerImage": {
                "javaJars": "java_jars",
                "pythonPackages": "python_packages"
            },
            "gcp:dataplex/TaskNotebookInfrastructureSpecVpcNetwork:TaskNotebookInfrastructureSpecVpcNetwork": {
                "networkTags": "network_tags",
                "subNetwork": "sub_network"
            },
            "gcp:dataplex/TaskSpark:TaskSpark": {
                "archiveUris": "archive_uris",
                "fileUris": "file_uris",
                "infrastructureSpec": "infrastructure_spec",
                "mainClass": "main_class",
                "mainJarFileUri": "main_jar_file_uri",
                "pythonScriptFile": "python_script_file",
                "sqlScript": "sql_script",
                "sqlScriptFile": "sql_script_file"
            },
            "gcp:dataplex/TaskSparkInfrastructureSpec:TaskSparkInfrastructureSpec": {
                "containerImage": "container_image",
                "vpcNetwork": "vpc_network"
            },
            "gcp:dataplex/TaskSparkInfrastructureSpecBatch:TaskSparkInfrastructureSpecBatch": {
                "executorsCount": "executors_count",
                "maxExecutorsCount": "max_executors_count"
            },
            "gcp:dataplex/TaskSparkInfrastructureSpecContainerImage:TaskSparkInfrastructureSpecContainerImage": {
                "javaJars": "java_jars",
                "pythonPackages": "python_packages"
            },
            "gcp:dataplex/TaskSparkInfrastructureSpecVpcNetwork:TaskSparkInfrastructureSpecVpcNetwork": {
                "networkTags": "network_tags",
                "subNetwork": "sub_network"
            },
            "gcp:dataplex/TaskTriggerSpec:TaskTriggerSpec": {
                "maxRetries": "max_retries",
                "startTime": "start_time"
            },
            "gcp:dataplex/ZoneAssetStatus:ZoneAssetStatus": {
                "activeAssets": "active_assets",
                "securityPolicyApplyingAssets": "security_policy_applying_assets",
                "updateTime": "update_time"
            },
            "gcp:dataplex/ZoneDiscoverySpec:ZoneDiscoverySpec": {
                "csvOptions": "csv_options",
                "excludePatterns": "exclude_patterns",
                "includePatterns": "include_patterns",
                "jsonOptions": "json_options"
            },
            "gcp:dataplex/ZoneDiscoverySpecCsvOptions:ZoneDiscoverySpecCsvOptions": {
                "disableTypeInference": "disable_type_inference",
                "headerRows": "header_rows"
            },
            "gcp:dataplex/ZoneDiscoverySpecJsonOptions:ZoneDiscoverySpecJsonOptions": {
                "disableTypeInference": "disable_type_inference"
            },
            "gcp:dataplex/ZoneResourceSpec:ZoneResourceSpec": {
                "locationType": "location_type"
            },
            "gcp:dataplex/asset:Asset": {
                "createTime": "create_time",
                "dataplexZone": "dataplex_zone",
                "discoverySpec": "discovery_spec",
                "discoveryStatuses": "discovery_status",
                "displayName": "display_name",
                "resourceSpec": "resource_spec",
                "resourceStatuses": "resource_status",
                "securityStatuses": "security_status",
                "updateTime": "update_time"
            },
            "gcp:dataplex/assetIamBinding:AssetIamBinding": {
                "dataplexZone": "dataplex_zone"
            },
            "gcp:dataplex/assetIamMember:AssetIamMember": {
                "dataplexZone": "dataplex_zone"
            },
            "gcp:dataplex/assetIamPolicy:AssetIamPolicy": {
                "dataplexZone": "dataplex_zone",
                "policyData": "policy_data"
            },
            "gcp:dataplex/datascan:Datascan": {
                "createTime": "create_time",
                "dataProfileResults": "data_profile_result",
                "dataProfileSpec": "data_profile_spec",
                "dataQualityResults": "data_quality_result",
                "dataQualitySpec": "data_quality_spec",
                "dataScanId": "data_scan_id",
                "displayName": "display_name",
                "executionSpec": "execution_spec",
                "executionStatuses": "execution_status",
                "updateTime": "update_time"
            },
            "gcp:dataplex/datascanIamBinding:DatascanIamBinding": {
                "dataScanId": "data_scan_id"
            },
            "gcp:dataplex/datascanIamMember:DatascanIamMember": {
                "dataScanId": "data_scan_id"
            },
            "gcp:dataplex/datascanIamPolicy:DatascanIamPolicy": {
                "dataScanId": "data_scan_id",
                "policyData": "policy_data"
            },
            "gcp:dataplex/getAssetIamPolicy:getAssetIamPolicy": {
                "dataplexZone": "dataplex_zone",
                "policyData": "policy_data"
            },
            "gcp:dataplex/getDatascanIamPolicy:getDatascanIamPolicy": {
                "dataScanId": "data_scan_id",
                "policyData": "policy_data"
            },
            "gcp:dataplex/getLakeIamPolicy:getLakeIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:dataplex/getTaskIamPolicy:getTaskIamPolicy": {
                "policyData": "policy_data",
                "taskId": "task_id"
            },
            "gcp:dataplex/getZoneIamPolicy:getZoneIamPolicy": {
                "dataplexZone": "dataplex_zone",
                "policyData": "policy_data"
            },
            "gcp:dataplex/lake:Lake": {
                "assetStatuses": "asset_status",
                "createTime": "create_time",
                "displayName": "display_name",
                "metastoreStatuses": "metastore_status",
                "serviceAccount": "service_account",
                "updateTime": "update_time"
            },
            "gcp:dataplex/lakeIamPolicy:LakeIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:dataplex/task:Task": {
                "createTime": "create_time",
                "displayName": "display_name",
                "executionSpec": "execution_spec",
                "executionStatuses": "execution_status",
                "taskId": "task_id",
                "triggerSpec": "trigger_spec",
                "updateTime": "update_time"
            },
            "gcp:dataplex/taskIamBinding:TaskIamBinding": {
                "taskId": "task_id"
            },
            "gcp:dataplex/taskIamMember:TaskIamMember": {
                "taskId": "task_id"
            },
            "gcp:dataplex/taskIamPolicy:TaskIamPolicy": {
                "policyData": "policy_data",
                "taskId": "task_id"
            },
            "gcp:dataplex/zone:Zone": {
                "assetStatuses": "asset_status",
                "createTime": "create_time",
                "discoverySpec": "discovery_spec",
                "displayName": "display_name",
                "resourceSpec": "resource_spec",
                "updateTime": "update_time"
            },
            "gcp:dataplex/zoneIamBinding:ZoneIamBinding": {
                "dataplexZone": "dataplex_zone"
            },
            "gcp:dataplex/zoneIamMember:ZoneIamMember": {
                "dataplexZone": "dataplex_zone"
            },
            "gcp:dataplex/zoneIamPolicy:ZoneIamPolicy": {
                "dataplexZone": "dataplex_zone",
                "policyData": "policy_data"
            },
            "gcp:dataproc/AutoscalingPolicyBasicAlgorithm:AutoscalingPolicyBasicAlgorithm": {
                "cooldownPeriod": "cooldown_period",
                "yarnConfig": "yarn_config"
            },
            "gcp:dataproc/AutoscalingPolicyBasicAlgorithmYarnConfig:AutoscalingPolicyBasicAlgorithmYarnConfig": {
                "gracefulDecommissionTimeout": "graceful_decommission_timeout",
                "scaleDownFactor": "scale_down_factor",
                "scaleDownMinWorkerFraction": "scale_down_min_worker_fraction",
                "scaleUpFactor": "scale_up_factor",
                "scaleUpMinWorkerFraction": "scale_up_min_worker_fraction"
            },
            "gcp:dataproc/AutoscalingPolicySecondaryWorkerConfig:AutoscalingPolicySecondaryWorkerConfig": {
                "maxInstances": "max_instances",
                "minInstances": "min_instances"
            },
            "gcp:dataproc/AutoscalingPolicyWorkerConfig:AutoscalingPolicyWorkerConfig": {
                "maxInstances": "max_instances",
                "minInstances": "min_instances"
            },
            "gcp:dataproc/ClusterClusterConfig:ClusterClusterConfig": {
                "autoscalingConfig": "autoscaling_config",
                "dataprocMetricConfig": "dataproc_metric_config",
                "encryptionConfig": "encryption_config",
                "endpointConfig": "endpoint_config",
                "gceClusterConfig": "gce_cluster_config",
                "initializationActions": "initialization_action",
                "lifecycleConfig": "lifecycle_config",
                "masterConfig": "master_config",
                "metastoreConfig": "metastore_config",
                "preemptibleWorkerConfig": "preemptible_worker_config",
                "securityConfig": "security_config",
                "softwareConfig": "software_config",
                "stagingBucket": "staging_bucket",
                "tempBucket": "temp_bucket",
                "workerConfig": "worker_config"
            },
            "gcp:dataproc/ClusterClusterConfigAutoscalingConfig:ClusterClusterConfigAutoscalingConfig": {
                "policyUri": "policy_uri"
            },
            "gcp:dataproc/ClusterClusterConfigDataprocMetricConfigMetric:ClusterClusterConfigDataprocMetricConfigMetric": {
                "metricOverrides": "metric_overrides",
                "metricSource": "metric_source"
            },
            "gcp:dataproc/ClusterClusterConfigEncryptionConfig:ClusterClusterConfigEncryptionConfig": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:dataproc/ClusterClusterConfigEndpointConfig:ClusterClusterConfigEndpointConfig": {
                "enableHttpPortAccess": "enable_http_port_access",
                "httpPorts": "http_ports"
            },
            "gcp:dataproc/ClusterClusterConfigGceClusterConfig:ClusterClusterConfigGceClusterConfig": {
                "internalIpOnly": "internal_ip_only",
                "nodeGroupAffinity": "node_group_affinity",
                "reservationAffinity": "reservation_affinity",
                "serviceAccount": "service_account",
                "serviceAccountScopes": "service_account_scopes",
                "shieldedInstanceConfig": "shielded_instance_config"
            },
            "gcp:dataproc/ClusterClusterConfigGceClusterConfigNodeGroupAffinity:ClusterClusterConfigGceClusterConfigNodeGroupAffinity": {
                "nodeGroupUri": "node_group_uri"
            },
            "gcp:dataproc/ClusterClusterConfigGceClusterConfigReservationAffinity:ClusterClusterConfigGceClusterConfigReservationAffinity": {
                "consumeReservationType": "consume_reservation_type"
            },
            "gcp:dataproc/ClusterClusterConfigGceClusterConfigShieldedInstanceConfig:ClusterClusterConfigGceClusterConfigShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:dataproc/ClusterClusterConfigInitializationAction:ClusterClusterConfigInitializationAction": {
                "timeoutSec": "timeout_sec"
            },
            "gcp:dataproc/ClusterClusterConfigLifecycleConfig:ClusterClusterConfigLifecycleConfig": {
                "autoDeleteTime": "auto_delete_time",
                "idleDeleteTtl": "idle_delete_ttl",
                "idleStartTime": "idle_start_time"
            },
            "gcp:dataproc/ClusterClusterConfigMasterConfig:ClusterClusterConfigMasterConfig": {
                "diskConfig": "disk_config",
                "imageUri": "image_uri",
                "instanceNames": "instance_names",
                "machineType": "machine_type",
                "minCpuPlatform": "min_cpu_platform",
                "numInstances": "num_instances"
            },
            "gcp:dataproc/ClusterClusterConfigMasterConfigAccelerator:ClusterClusterConfigMasterConfigAccelerator": {
                "acceleratorCount": "accelerator_count",
                "acceleratorType": "accelerator_type"
            },
            "gcp:dataproc/ClusterClusterConfigMasterConfigDiskConfig:ClusterClusterConfigMasterConfigDiskConfig": {
                "bootDiskSizeGb": "boot_disk_size_gb",
                "bootDiskType": "boot_disk_type",
                "numLocalSsds": "num_local_ssds"
            },
            "gcp:dataproc/ClusterClusterConfigMetastoreConfig:ClusterClusterConfigMetastoreConfig": {
                "dataprocMetastoreService": "dataproc_metastore_service"
            },
            "gcp:dataproc/ClusterClusterConfigPreemptibleWorkerConfig:ClusterClusterConfigPreemptibleWorkerConfig": {
                "diskConfig": "disk_config",
                "instanceNames": "instance_names",
                "numInstances": "num_instances"
            },
            "gcp:dataproc/ClusterClusterConfigPreemptibleWorkerConfigDiskConfig:ClusterClusterConfigPreemptibleWorkerConfigDiskConfig": {
                "bootDiskSizeGb": "boot_disk_size_gb",
                "bootDiskType": "boot_disk_type",
                "numLocalSsds": "num_local_ssds"
            },
            "gcp:dataproc/ClusterClusterConfigSecurityConfig:ClusterClusterConfigSecurityConfig": {
                "kerberosConfig": "kerberos_config"
            },
            "gcp:dataproc/ClusterClusterConfigSecurityConfigKerberosConfig:ClusterClusterConfigSecurityConfigKerberosConfig": {
                "crossRealmTrustAdminServer": "cross_realm_trust_admin_server",
                "crossRealmTrustKdc": "cross_realm_trust_kdc",
                "crossRealmTrustRealm": "cross_realm_trust_realm",
                "crossRealmTrustSharedPasswordUri": "cross_realm_trust_shared_password_uri",
                "enableKerberos": "enable_kerberos",
                "kdcDbKeyUri": "kdc_db_key_uri",
                "keyPasswordUri": "key_password_uri",
                "keystorePasswordUri": "keystore_password_uri",
                "keystoreUri": "keystore_uri",
                "kmsKeyUri": "kms_key_uri",
                "rootPrincipalPasswordUri": "root_principal_password_uri",
                "tgtLifetimeHours": "tgt_lifetime_hours",
                "truststorePasswordUri": "truststore_password_uri",
                "truststoreUri": "truststore_uri"
            },
            "gcp:dataproc/ClusterClusterConfigSoftwareConfig:ClusterClusterConfigSoftwareConfig": {
                "imageVersion": "image_version",
                "optionalComponents": "optional_components",
                "overrideProperties": "override_properties"
            },
            "gcp:dataproc/ClusterClusterConfigWorkerConfig:ClusterClusterConfigWorkerConfig": {
                "diskConfig": "disk_config",
                "imageUri": "image_uri",
                "instanceNames": "instance_names",
                "machineType": "machine_type",
                "minCpuPlatform": "min_cpu_platform",
                "numInstances": "num_instances"
            },
            "gcp:dataproc/ClusterClusterConfigWorkerConfigAccelerator:ClusterClusterConfigWorkerConfigAccelerator": {
                "acceleratorCount": "accelerator_count",
                "acceleratorType": "accelerator_type"
            },
            "gcp:dataproc/ClusterClusterConfigWorkerConfigDiskConfig:ClusterClusterConfigWorkerConfigDiskConfig": {
                "bootDiskSizeGb": "boot_disk_size_gb",
                "bootDiskType": "boot_disk_type",
                "numLocalSsds": "num_local_ssds"
            },
            "gcp:dataproc/ClusterVirtualClusterConfig:ClusterVirtualClusterConfig": {
                "auxiliaryServicesConfig": "auxiliary_services_config",
                "kubernetesClusterConfig": "kubernetes_cluster_config",
                "stagingBucket": "staging_bucket"
            },
            "gcp:dataproc/ClusterVirtualClusterConfigAuxiliaryServicesConfig:ClusterVirtualClusterConfigAuxiliaryServicesConfig": {
                "metastoreConfig": "metastore_config",
                "sparkHistoryServerConfig": "spark_history_server_config"
            },
            "gcp:dataproc/ClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfig:ClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfig": {
                "dataprocMetastoreService": "dataproc_metastore_service"
            },
            "gcp:dataproc/ClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfig:ClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfig": {
                "dataprocCluster": "dataproc_cluster"
            },
            "gcp:dataproc/ClusterVirtualClusterConfigKubernetesClusterConfig:ClusterVirtualClusterConfigKubernetesClusterConfig": {
                "gkeClusterConfig": "gke_cluster_config",
                "kubernetesNamespace": "kubernetes_namespace",
                "kubernetesSoftwareConfig": "kubernetes_software_config"
            },
            "gcp:dataproc/ClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfig:ClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfig": {
                "gkeClusterTarget": "gke_cluster_target",
                "nodePoolTargets": "node_pool_target"
            },
            "gcp:dataproc/ClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTarget:ClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTarget": {
                "nodePool": "node_pool",
                "nodePoolConfig": "node_pool_config"
            },
            "gcp:dataproc/ClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscaling:ClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscaling": {
                "maxNodeCount": "max_node_count",
                "minNodeCount": "min_node_count"
            },
            "gcp:dataproc/ClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfig:ClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfig": {
                "localSsdCount": "local_ssd_count",
                "machineType": "machine_type",
                "minCpuPlatform": "min_cpu_platform"
            },
            "gcp:dataproc/ClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfig:ClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfig": {
                "componentVersion": "component_version"
            },
            "gcp:dataproc/JobHadoopConfig:JobHadoopConfig": {
                "archiveUris": "archive_uris",
                "fileUris": "file_uris",
                "jarFileUris": "jar_file_uris",
                "loggingConfig": "logging_config",
                "mainClass": "main_class",
                "mainJarFileUri": "main_jar_file_uri"
            },
            "gcp:dataproc/JobHadoopConfigLoggingConfig:JobHadoopConfigLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/JobHiveConfig:JobHiveConfig": {
                "continueOnFailure": "continue_on_failure",
                "jarFileUris": "jar_file_uris",
                "queryFileUri": "query_file_uri",
                "queryLists": "query_list",
                "scriptVariables": "script_variables"
            },
            "gcp:dataproc/JobPigConfig:JobPigConfig": {
                "continueOnFailure": "continue_on_failure",
                "jarFileUris": "jar_file_uris",
                "loggingConfig": "logging_config",
                "queryFileUri": "query_file_uri",
                "queryLists": "query_list",
                "scriptVariables": "script_variables"
            },
            "gcp:dataproc/JobPigConfigLoggingConfig:JobPigConfigLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/JobPlacement:JobPlacement": {
                "clusterName": "cluster_name",
                "clusterUuid": "cluster_uuid"
            },
            "gcp:dataproc/JobPrestoConfig:JobPrestoConfig": {
                "clientTags": "client_tags",
                "continueOnFailure": "continue_on_failure",
                "loggingConfig": "logging_config",
                "outputFormat": "output_format",
                "queryFileUri": "query_file_uri",
                "queryLists": "query_list"
            },
            "gcp:dataproc/JobPrestoConfigLoggingConfig:JobPrestoConfigLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/JobPysparkConfig:JobPysparkConfig": {
                "archiveUris": "archive_uris",
                "fileUris": "file_uris",
                "jarFileUris": "jar_file_uris",
                "loggingConfig": "logging_config",
                "mainPythonFileUri": "main_python_file_uri",
                "pythonFileUris": "python_file_uris"
            },
            "gcp:dataproc/JobPysparkConfigLoggingConfig:JobPysparkConfigLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/JobReference:JobReference": {
                "jobId": "job_id"
            },
            "gcp:dataproc/JobScheduling:JobScheduling": {
                "maxFailuresPerHour": "max_failures_per_hour",
                "maxFailuresTotal": "max_failures_total"
            },
            "gcp:dataproc/JobSparkConfig:JobSparkConfig": {
                "archiveUris": "archive_uris",
                "fileUris": "file_uris",
                "jarFileUris": "jar_file_uris",
                "loggingConfig": "logging_config",
                "mainClass": "main_class",
                "mainJarFileUri": "main_jar_file_uri"
            },
            "gcp:dataproc/JobSparkConfigLoggingConfig:JobSparkConfigLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/JobSparksqlConfig:JobSparksqlConfig": {
                "jarFileUris": "jar_file_uris",
                "loggingConfig": "logging_config",
                "queryFileUri": "query_file_uri",
                "queryLists": "query_list",
                "scriptVariables": "script_variables"
            },
            "gcp:dataproc/JobSparksqlConfigLoggingConfig:JobSparksqlConfigLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/JobStatus:JobStatus": {
                "stateStartTime": "state_start_time"
            },
            "gcp:dataproc/MetastoreFederationBackendMetastore:MetastoreFederationBackendMetastore": {
                "metastoreType": "metastore_type"
            },
            "gcp:dataproc/MetastoreServiceEncryptionConfig:MetastoreServiceEncryptionConfig": {
                "kmsKey": "kms_key"
            },
            "gcp:dataproc/MetastoreServiceHiveMetastoreConfig:MetastoreServiceHiveMetastoreConfig": {
                "auxiliaryVersions": "auxiliary_versions",
                "configOverrides": "config_overrides",
                "endpointProtocol": "endpoint_protocol",
                "kerberosConfig": "kerberos_config"
            },
            "gcp:dataproc/MetastoreServiceHiveMetastoreConfigAuxiliaryVersion:MetastoreServiceHiveMetastoreConfigAuxiliaryVersion": {
                "configOverrides": "config_overrides"
            },
            "gcp:dataproc/MetastoreServiceHiveMetastoreConfigKerberosConfig:MetastoreServiceHiveMetastoreConfigKerberosConfig": {
                "krb5ConfigGcsUri": "krb5_config_gcs_uri"
            },
            "gcp:dataproc/MetastoreServiceHiveMetastoreConfigKerberosConfigKeytab:MetastoreServiceHiveMetastoreConfigKerberosConfigKeytab": {
                "cloudSecret": "cloud_secret"
            },
            "gcp:dataproc/MetastoreServiceMaintenanceWindow:MetastoreServiceMaintenanceWindow": {
                "dayOfWeek": "day_of_week",
                "hourOfDay": "hour_of_day"
            },
            "gcp:dataproc/MetastoreServiceMetadataIntegration:MetastoreServiceMetadataIntegration": {
                "dataCatalogConfig": "data_catalog_config"
            },
            "gcp:dataproc/MetastoreServiceNetworkConfigConsumer:MetastoreServiceNetworkConfigConsumer": {
                "endpointUri": "endpoint_uri"
            },
            "gcp:dataproc/MetastoreServiceTelemetryConfig:MetastoreServiceTelemetryConfig": {
                "logFormat": "log_format"
            },
            "gcp:dataproc/WorkflowTemplateJob:WorkflowTemplateJob": {
                "hadoopJob": "hadoop_job",
                "hiveJob": "hive_job",
                "pigJob": "pig_job",
                "prerequisiteStepIds": "prerequisite_step_ids",
                "prestoJob": "presto_job",
                "pysparkJob": "pyspark_job",
                "sparkJob": "spark_job",
                "sparkRJob": "spark_r_job",
                "sparkSqlJob": "spark_sql_job",
                "stepId": "step_id"
            },
            "gcp:dataproc/WorkflowTemplateJobHadoopJob:WorkflowTemplateJobHadoopJob": {
                "archiveUris": "archive_uris",
                "fileUris": "file_uris",
                "jarFileUris": "jar_file_uris",
                "loggingConfig": "logging_config",
                "mainClass": "main_class",
                "mainJarFileUri": "main_jar_file_uri"
            },
            "gcp:dataproc/WorkflowTemplateJobHadoopJobLoggingConfig:WorkflowTemplateJobHadoopJobLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/WorkflowTemplateJobHiveJob:WorkflowTemplateJobHiveJob": {
                "continueOnFailure": "continue_on_failure",
                "jarFileUris": "jar_file_uris",
                "queryFileUri": "query_file_uri",
                "queryList": "query_list",
                "scriptVariables": "script_variables"
            },
            "gcp:dataproc/WorkflowTemplateJobPigJob:WorkflowTemplateJobPigJob": {
                "continueOnFailure": "continue_on_failure",
                "jarFileUris": "jar_file_uris",
                "loggingConfig": "logging_config",
                "queryFileUri": "query_file_uri",
                "queryList": "query_list",
                "scriptVariables": "script_variables"
            },
            "gcp:dataproc/WorkflowTemplateJobPigJobLoggingConfig:WorkflowTemplateJobPigJobLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/WorkflowTemplateJobPrestoJob:WorkflowTemplateJobPrestoJob": {
                "clientTags": "client_tags",
                "continueOnFailure": "continue_on_failure",
                "loggingConfig": "logging_config",
                "outputFormat": "output_format",
                "queryFileUri": "query_file_uri",
                "queryList": "query_list"
            },
            "gcp:dataproc/WorkflowTemplateJobPrestoJobLoggingConfig:WorkflowTemplateJobPrestoJobLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/WorkflowTemplateJobPysparkJob:WorkflowTemplateJobPysparkJob": {
                "archiveUris": "archive_uris",
                "fileUris": "file_uris",
                "jarFileUris": "jar_file_uris",
                "loggingConfig": "logging_config",
                "mainPythonFileUri": "main_python_file_uri",
                "pythonFileUris": "python_file_uris"
            },
            "gcp:dataproc/WorkflowTemplateJobPysparkJobLoggingConfig:WorkflowTemplateJobPysparkJobLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/WorkflowTemplateJobScheduling:WorkflowTemplateJobScheduling": {
                "maxFailuresPerHour": "max_failures_per_hour",
                "maxFailuresTotal": "max_failures_total"
            },
            "gcp:dataproc/WorkflowTemplateJobSparkJob:WorkflowTemplateJobSparkJob": {
                "archiveUris": "archive_uris",
                "fileUris": "file_uris",
                "jarFileUris": "jar_file_uris",
                "loggingConfig": "logging_config",
                "mainClass": "main_class",
                "mainJarFileUri": "main_jar_file_uri"
            },
            "gcp:dataproc/WorkflowTemplateJobSparkJobLoggingConfig:WorkflowTemplateJobSparkJobLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/WorkflowTemplateJobSparkRJob:WorkflowTemplateJobSparkRJob": {
                "archiveUris": "archive_uris",
                "fileUris": "file_uris",
                "loggingConfig": "logging_config",
                "mainRFileUri": "main_r_file_uri"
            },
            "gcp:dataproc/WorkflowTemplateJobSparkRJobLoggingConfig:WorkflowTemplateJobSparkRJobLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/WorkflowTemplateJobSparkSqlJob:WorkflowTemplateJobSparkSqlJob": {
                "jarFileUris": "jar_file_uris",
                "loggingConfig": "logging_config",
                "queryFileUri": "query_file_uri",
                "queryList": "query_list",
                "scriptVariables": "script_variables"
            },
            "gcp:dataproc/WorkflowTemplateJobSparkSqlJobLoggingConfig:WorkflowTemplateJobSparkSqlJobLoggingConfig": {
                "driverLogLevels": "driver_log_levels"
            },
            "gcp:dataproc/WorkflowTemplatePlacement:WorkflowTemplatePlacement": {
                "clusterSelector": "cluster_selector",
                "managedCluster": "managed_cluster"
            },
            "gcp:dataproc/WorkflowTemplatePlacementClusterSelector:WorkflowTemplatePlacementClusterSelector": {
                "clusterLabels": "cluster_labels"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedCluster:WorkflowTemplatePlacementManagedCluster": {
                "clusterName": "cluster_name"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfig:WorkflowTemplatePlacementManagedClusterConfig": {
                "autoscalingConfig": "autoscaling_config",
                "encryptionConfig": "encryption_config",
                "endpointConfig": "endpoint_config",
                "gceClusterConfig": "gce_cluster_config",
                "gkeClusterConfig": "gke_cluster_config",
                "initializationActions": "initialization_actions",
                "lifecycleConfig": "lifecycle_config",
                "masterConfig": "master_config",
                "metastoreConfig": "metastore_config",
                "secondaryWorkerConfig": "secondary_worker_config",
                "securityConfig": "security_config",
                "softwareConfig": "software_config",
                "stagingBucket": "staging_bucket",
                "tempBucket": "temp_bucket",
                "workerConfig": "worker_config"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigEncryptionConfig:WorkflowTemplatePlacementManagedClusterConfigEncryptionConfig": {
                "gcePdKmsKeyName": "gce_pd_kms_key_name"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigEndpointConfig:WorkflowTemplatePlacementManagedClusterConfigEndpointConfig": {
                "enableHttpPortAccess": "enable_http_port_access",
                "httpPorts": "http_ports"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigGceClusterConfig:WorkflowTemplatePlacementManagedClusterConfigGceClusterConfig": {
                "internalIpOnly": "internal_ip_only",
                "nodeGroupAffinity": "node_group_affinity",
                "privateIpv6GoogleAccess": "private_ipv6_google_access",
                "reservationAffinity": "reservation_affinity",
                "serviceAccount": "service_account",
                "serviceAccountScopes": "service_account_scopes",
                "shieldedInstanceConfig": "shielded_instance_config"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinity:WorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinity": {
                "nodeGroup": "node_group"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinity:WorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinity": {
                "consumeReservationType": "consume_reservation_type"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfig:WorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigGkeClusterConfig:WorkflowTemplatePlacementManagedClusterConfigGkeClusterConfig": {
                "namespacedGkeDeploymentTarget": "namespaced_gke_deployment_target"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigGkeClusterConfigNamespacedGkeDeploymentTarget:WorkflowTemplatePlacementManagedClusterConfigGkeClusterConfigNamespacedGkeDeploymentTarget": {
                "clusterNamespace": "cluster_namespace",
                "targetGkeCluster": "target_gke_cluster"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigInitializationAction:WorkflowTemplatePlacementManagedClusterConfigInitializationAction": {
                "executableFile": "executable_file",
                "executionTimeout": "execution_timeout"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigLifecycleConfig:WorkflowTemplatePlacementManagedClusterConfigLifecycleConfig": {
                "autoDeleteTime": "auto_delete_time",
                "autoDeleteTtl": "auto_delete_ttl",
                "idleDeleteTtl": "idle_delete_ttl",
                "idleStartTime": "idle_start_time"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigMasterConfig:WorkflowTemplatePlacementManagedClusterConfigMasterConfig": {
                "diskConfig": "disk_config",
                "instanceNames": "instance_names",
                "isPreemptible": "is_preemptible",
                "machineType": "machine_type",
                "managedGroupConfigs": "managed_group_config",
                "minCpuPlatform": "min_cpu_platform",
                "numInstances": "num_instances"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigMasterConfigAccelerator:WorkflowTemplatePlacementManagedClusterConfigMasterConfigAccelerator": {
                "acceleratorCount": "accelerator_count",
                "acceleratorType": "accelerator_type"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfig:WorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfig": {
                "bootDiskSizeGb": "boot_disk_size_gb",
                "bootDiskType": "boot_disk_type",
                "numLocalSsds": "num_local_ssds"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfig:WorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfig": {
                "instanceGroupManagerName": "instance_group_manager_name",
                "instanceTemplateName": "instance_template_name"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigMetastoreConfig:WorkflowTemplatePlacementManagedClusterConfigMetastoreConfig": {
                "dataprocMetastoreService": "dataproc_metastore_service"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfig:WorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfig": {
                "diskConfig": "disk_config",
                "instanceNames": "instance_names",
                "isPreemptible": "is_preemptible",
                "machineType": "machine_type",
                "managedGroupConfigs": "managed_group_config",
                "minCpuPlatform": "min_cpu_platform",
                "numInstances": "num_instances"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAccelerator:WorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAccelerator": {
                "acceleratorCount": "accelerator_count",
                "acceleratorType": "accelerator_type"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfig:WorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfig": {
                "bootDiskSizeGb": "boot_disk_size_gb",
                "bootDiskType": "boot_disk_type",
                "numLocalSsds": "num_local_ssds"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfig:WorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfig": {
                "instanceGroupManagerName": "instance_group_manager_name",
                "instanceTemplateName": "instance_template_name"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigSecurityConfig:WorkflowTemplatePlacementManagedClusterConfigSecurityConfig": {
                "kerberosConfig": "kerberos_config"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfig:WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfig": {
                "crossRealmTrustAdminServer": "cross_realm_trust_admin_server",
                "crossRealmTrustKdc": "cross_realm_trust_kdc",
                "crossRealmTrustRealm": "cross_realm_trust_realm",
                "crossRealmTrustSharedPassword": "cross_realm_trust_shared_password",
                "enableKerberos": "enable_kerberos",
                "kdcDbKey": "kdc_db_key",
                "keyPassword": "key_password",
                "keystorePassword": "keystore_password",
                "kmsKey": "kms_key",
                "rootPrincipalPassword": "root_principal_password",
                "tgtLifetimeHours": "tgt_lifetime_hours",
                "truststorePassword": "truststore_password"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigSoftwareConfig:WorkflowTemplatePlacementManagedClusterConfigSoftwareConfig": {
                "imageVersion": "image_version",
                "optionalComponents": "optional_components"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigWorkerConfig:WorkflowTemplatePlacementManagedClusterConfigWorkerConfig": {
                "diskConfig": "disk_config",
                "instanceNames": "instance_names",
                "isPreemptible": "is_preemptible",
                "machineType": "machine_type",
                "managedGroupConfigs": "managed_group_config",
                "minCpuPlatform": "min_cpu_platform",
                "numInstances": "num_instances"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigWorkerConfigAccelerator:WorkflowTemplatePlacementManagedClusterConfigWorkerConfigAccelerator": {
                "acceleratorCount": "accelerator_count",
                "acceleratorType": "accelerator_type"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfig:WorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfig": {
                "bootDiskSizeGb": "boot_disk_size_gb",
                "bootDiskType": "boot_disk_type",
                "numLocalSsds": "num_local_ssds"
            },
            "gcp:dataproc/WorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfig:WorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfig": {
                "instanceGroupManagerName": "instance_group_manager_name",
                "instanceTemplateName": "instance_template_name"
            },
            "gcp:dataproc/autoscalingPolicy:AutoscalingPolicy": {
                "basicAlgorithm": "basic_algorithm",
                "policyId": "policy_id",
                "secondaryWorkerConfig": "secondary_worker_config",
                "workerConfig": "worker_config"
            },
            "gcp:dataproc/autoscalingPolicyIamBinding:AutoscalingPolicyIamBinding": {
                "policyId": "policy_id"
            },
            "gcp:dataproc/autoscalingPolicyIamMember:AutoscalingPolicyIamMember": {
                "policyId": "policy_id"
            },
            "gcp:dataproc/autoscalingPolicyIamPolicy:AutoscalingPolicyIamPolicy": {
                "policyData": "policy_data",
                "policyId": "policy_id"
            },
            "gcp:dataproc/cluster:Cluster": {
                "clusterConfig": "cluster_config",
                "gracefulDecommissionTimeout": "graceful_decommission_timeout",
                "virtualClusterConfig": "virtual_cluster_config"
            },
            "gcp:dataproc/clusterIAMPolicy:ClusterIAMPolicy": {
                "policyData": "policy_data"
            },
            "gcp:dataproc/getAutoscalingPolicyIamPolicy:getAutoscalingPolicyIamPolicy": {
                "policyData": "policy_data",
                "policyId": "policy_id"
            },
            "gcp:dataproc/getClusterIamPolicy:getClusterIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:dataproc/getJobIamPolicy:getJobIamPolicy": {
                "jobId": "job_id",
                "policyData": "policy_data"
            },
            "gcp:dataproc/getMetastoreFederationIamPolicy:getMetastoreFederationIamPolicy": {
                "federationId": "federation_id",
                "policyData": "policy_data"
            },
            "gcp:dataproc/getMetastoreServiceIamPolicy:getMetastoreServiceIamPolicy": {
                "policyData": "policy_data",
                "serviceId": "service_id"
            },
            "gcp:dataproc/job:Job": {
                "driverControlsFilesUri": "driver_controls_files_uri",
                "driverOutputResourceUri": "driver_output_resource_uri",
                "forceDelete": "force_delete",
                "hadoopConfig": "hadoop_config",
                "hiveConfig": "hive_config",
                "pigConfig": "pig_config",
                "prestoConfig": "presto_config",
                "pysparkConfig": "pyspark_config",
                "sparkConfig": "spark_config",
                "sparksqlConfig": "sparksql_config",
                "statuses": "status"
            },
            "gcp:dataproc/jobIAMBinding:JobIAMBinding": {
                "jobId": "job_id"
            },
            "gcp:dataproc/jobIAMMember:JobIAMMember": {
                "jobId": "job_id"
            },
            "gcp:dataproc/jobIAMPolicy:JobIAMPolicy": {
                "jobId": "job_id",
                "policyData": "policy_data"
            },
            "gcp:dataproc/metastoreFederation:MetastoreFederation": {
                "backendMetastores": "backend_metastores",
                "endpointUri": "endpoint_uri",
                "federationId": "federation_id",
                "stateMessage": "state_message"
            },
            "gcp:dataproc/metastoreFederationIamBinding:MetastoreFederationIamBinding": {
                "federationId": "federation_id"
            },
            "gcp:dataproc/metastoreFederationIamMember:MetastoreFederationIamMember": {
                "federationId": "federation_id"
            },
            "gcp:dataproc/metastoreFederationIamPolicy:MetastoreFederationIamPolicy": {
                "federationId": "federation_id",
                "policyData": "policy_data"
            },
            "gcp:dataproc/metastoreService:MetastoreService": {
                "artifactGcsUri": "artifact_gcs_uri",
                "databaseType": "database_type",
                "encryptionConfig": "encryption_config",
                "endpointUri": "endpoint_uri",
                "hiveMetastoreConfig": "hive_metastore_config",
                "maintenanceWindow": "maintenance_window",
                "metadataIntegration": "metadata_integration",
                "networkConfig": "network_config",
                "releaseChannel": "release_channel",
                "serviceId": "service_id",
                "stateMessage": "state_message",
                "telemetryConfig": "telemetry_config"
            },
            "gcp:dataproc/metastoreServiceIamBinding:MetastoreServiceIamBinding": {
                "serviceId": "service_id"
            },
            "gcp:dataproc/metastoreServiceIamMember:MetastoreServiceIamMember": {
                "serviceId": "service_id"
            },
            "gcp:dataproc/metastoreServiceIamPolicy:MetastoreServiceIamPolicy": {
                "policyData": "policy_data",
                "serviceId": "service_id"
            },
            "gcp:dataproc/workflowTemplate:WorkflowTemplate": {
                "createTime": "create_time",
                "dagTimeout": "dag_timeout",
                "updateTime": "update_time"
            },
            "gcp:datastore/dataStoreIndex:DataStoreIndex": {
                "indexId": "index_id"
            },
            "gcp:datastream/ConnectionProfileForwardSshConnectivity:ConnectionProfileForwardSshConnectivity": {
                "privateKey": "private_key"
            },
            "gcp:datastream/ConnectionProfileGcsProfile:ConnectionProfileGcsProfile": {
                "rootPath": "root_path"
            },
            "gcp:datastream/ConnectionProfileMysqlProfile:ConnectionProfileMysqlProfile": {
                "sslConfig": "ssl_config"
            },
            "gcp:datastream/ConnectionProfileMysqlProfileSslConfig:ConnectionProfileMysqlProfileSslConfig": {
                "caCertificate": "ca_certificate",
                "caCertificateSet": "ca_certificate_set",
                "clientCertificate": "client_certificate",
                "clientCertificateSet": "client_certificate_set",
                "clientKey": "client_key",
                "clientKeySet": "client_key_set"
            },
            "gcp:datastream/ConnectionProfileOracleProfile:ConnectionProfileOracleProfile": {
                "connectionAttributes": "connection_attributes",
                "databaseService": "database_service"
            },
            "gcp:datastream/ConnectionProfilePrivateConnectivity:ConnectionProfilePrivateConnectivity": {
                "privateConnection": "private_connection"
            },
            "gcp:datastream/StreamBackfillAll:StreamBackfillAll": {
                "mysqlExcludedObjects": "mysql_excluded_objects",
                "oracleExcludedObjects": "oracle_excluded_objects",
                "postgresqlExcludedObjects": "postgresql_excluded_objects"
            },
            "gcp:datastream/StreamBackfillAllMysqlExcludedObjects:StreamBackfillAllMysqlExcludedObjects": {
                "mysqlDatabases": "mysql_databases"
            },
            "gcp:datastream/StreamBackfillAllMysqlExcludedObjectsMysqlDatabase:StreamBackfillAllMysqlExcludedObjectsMysqlDatabase": {
                "mysqlTables": "mysql_tables"
            },
            "gcp:datastream/StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable:StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable": {
                "mysqlColumns": "mysql_columns"
            },
            "gcp:datastream/StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn:StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn": {
                "dataType": "data_type",
                "ordinalPosition": "ordinal_position",
                "primaryKey": "primary_key"
            },
            "gcp:datastream/StreamBackfillAllOracleExcludedObjects:StreamBackfillAllOracleExcludedObjects": {
                "oracleSchemas": "oracle_schemas"
            },
            "gcp:datastream/StreamBackfillAllOracleExcludedObjectsOracleSchema:StreamBackfillAllOracleExcludedObjectsOracleSchema": {
                "oracleTables": "oracle_tables"
            },
            "gcp:datastream/StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable:StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable": {
                "oracleColumns": "oracle_columns"
            },
            "gcp:datastream/StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn:StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn": {
                "dataType": "data_type",
                "ordinalPosition": "ordinal_position",
                "primaryKey": "primary_key"
            },
            "gcp:datastream/StreamBackfillAllPostgresqlExcludedObjects:StreamBackfillAllPostgresqlExcludedObjects": {
                "postgresqlSchemas": "postgresql_schemas"
            },
            "gcp:datastream/StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema:StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema": {
                "postgresqlTables": "postgresql_tables"
            },
            "gcp:datastream/StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable:StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable": {
                "postgresqlColumns": "postgresql_columns"
            },
            "gcp:datastream/StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn:StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn": {
                "dataType": "data_type",
                "ordinalPosition": "ordinal_position",
                "primaryKey": "primary_key"
            },
            "gcp:datastream/StreamDestinationConfig:StreamDestinationConfig": {
                "bigqueryDestinationConfig": "bigquery_destination_config",
                "destinationConnectionProfile": "destination_connection_profile",
                "gcsDestinationConfig": "gcs_destination_config"
            },
            "gcp:datastream/StreamDestinationConfigBigqueryDestinationConfig:StreamDestinationConfigBigqueryDestinationConfig": {
                "dataFreshness": "data_freshness",
                "singleTargetDataset": "single_target_dataset",
                "sourceHierarchyDatasets": "source_hierarchy_datasets"
            },
            "gcp:datastream/StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset:StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset": {
                "datasetId": "dataset_id"
            },
            "gcp:datastream/StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets:StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets": {
                "datasetTemplate": "dataset_template"
            },
            "gcp:datastream/StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate:StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate": {
                "datasetIdPrefix": "dataset_id_prefix",
                "kmsKeyName": "kms_key_name"
            },
            "gcp:datastream/StreamDestinationConfigGcsDestinationConfig:StreamDestinationConfigGcsDestinationConfig": {
                "avroFileFormat": "avro_file_format",
                "fileRotationInterval": "file_rotation_interval",
                "fileRotationMb": "file_rotation_mb",
                "jsonFileFormat": "json_file_format"
            },
            "gcp:datastream/StreamDestinationConfigGcsDestinationConfigJsonFileFormat:StreamDestinationConfigGcsDestinationConfigJsonFileFormat": {
                "schemaFileFormat": "schema_file_format"
            },
            "gcp:datastream/StreamSourceConfig:StreamSourceConfig": {
                "mysqlSourceConfig": "mysql_source_config",
                "oracleSourceConfig": "oracle_source_config",
                "postgresqlSourceConfig": "postgresql_source_config",
                "sourceConnectionProfile": "source_connection_profile"
            },
            "gcp:datastream/StreamSourceConfigMysqlSourceConfig:StreamSourceConfigMysqlSourceConfig": {
                "excludeObjects": "exclude_objects",
                "includeObjects": "include_objects",
                "maxConcurrentBackfillTasks": "max_concurrent_backfill_tasks",
                "maxConcurrentCdcTasks": "max_concurrent_cdc_tasks"
            },
            "gcp:datastream/StreamSourceConfigMysqlSourceConfigExcludeObjects:StreamSourceConfigMysqlSourceConfigExcludeObjects": {
                "mysqlDatabases": "mysql_databases"
            },
            "gcp:datastream/StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase:StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase": {
                "mysqlTables": "mysql_tables"
            },
            "gcp:datastream/StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable:StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable": {
                "mysqlColumns": "mysql_columns"
            },
            "gcp:datastream/StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn:StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn": {
                "dataType": "data_type",
                "ordinalPosition": "ordinal_position",
                "primaryKey": "primary_key"
            },
            "gcp:datastream/StreamSourceConfigMysqlSourceConfigIncludeObjects:StreamSourceConfigMysqlSourceConfigIncludeObjects": {
                "mysqlDatabases": "mysql_databases"
            },
            "gcp:datastream/StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase:StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase": {
                "mysqlTables": "mysql_tables"
            },
            "gcp:datastream/StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable:StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable": {
                "mysqlColumns": "mysql_columns"
            },
            "gcp:datastream/StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn:StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn": {
                "dataType": "data_type",
                "ordinalPosition": "ordinal_position",
                "primaryKey": "primary_key"
            },
            "gcp:datastream/StreamSourceConfigOracleSourceConfig:StreamSourceConfigOracleSourceConfig": {
                "dropLargeObjects": "drop_large_objects",
                "excludeObjects": "exclude_objects",
                "includeObjects": "include_objects",
                "maxConcurrentBackfillTasks": "max_concurrent_backfill_tasks",
                "maxConcurrentCdcTasks": "max_concurrent_cdc_tasks",
                "streamLargeObjects": "stream_large_objects"
            },
            "gcp:datastream/StreamSourceConfigOracleSourceConfigExcludeObjects:StreamSourceConfigOracleSourceConfigExcludeObjects": {
                "oracleSchemas": "oracle_schemas"
            },
            "gcp:datastream/StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema:StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema": {
                "oracleTables": "oracle_tables"
            },
            "gcp:datastream/StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable:StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable": {
                "oracleColumns": "oracle_columns"
            },
            "gcp:datastream/StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn:StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn": {
                "dataType": "data_type",
                "ordinalPosition": "ordinal_position",
                "primaryKey": "primary_key"
            },
            "gcp:datastream/StreamSourceConfigOracleSourceConfigIncludeObjects:StreamSourceConfigOracleSourceConfigIncludeObjects": {
                "oracleSchemas": "oracle_schemas"
            },
            "gcp:datastream/StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema:StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema": {
                "oracleTables": "oracle_tables"
            },
            "gcp:datastream/StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable:StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable": {
                "oracleColumns": "oracle_columns"
            },
            "gcp:datastream/StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn:StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn": {
                "dataType": "data_type",
                "ordinalPosition": "ordinal_position",
                "primaryKey": "primary_key"
            },
            "gcp:datastream/StreamSourceConfigPostgresqlSourceConfig:StreamSourceConfigPostgresqlSourceConfig": {
                "excludeObjects": "exclude_objects",
                "includeObjects": "include_objects",
                "maxConcurrentBackfillTasks": "max_concurrent_backfill_tasks",
                "replicationSlot": "replication_slot"
            },
            "gcp:datastream/StreamSourceConfigPostgresqlSourceConfigExcludeObjects:StreamSourceConfigPostgresqlSourceConfigExcludeObjects": {
                "postgresqlSchemas": "postgresql_schemas"
            },
            "gcp:datastream/StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema:StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema": {
                "postgresqlTables": "postgresql_tables"
            },
            "gcp:datastream/StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable:StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable": {
                "postgresqlColumns": "postgresql_columns"
            },
            "gcp:datastream/StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn:StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn": {
                "dataType": "data_type",
                "ordinalPosition": "ordinal_position",
                "primaryKey": "primary_key"
            },
            "gcp:datastream/StreamSourceConfigPostgresqlSourceConfigIncludeObjects:StreamSourceConfigPostgresqlSourceConfigIncludeObjects": {
                "postgresqlSchemas": "postgresql_schemas"
            },
            "gcp:datastream/StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema:StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema": {
                "postgresqlTables": "postgresql_tables"
            },
            "gcp:datastream/StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable:StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable": {
                "postgresqlColumns": "postgresql_columns"
            },
            "gcp:datastream/StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn:StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn": {
                "dataType": "data_type",
                "ordinalPosition": "ordinal_position",
                "primaryKey": "primary_key"
            },
            "gcp:datastream/connectionProfile:ConnectionProfile": {
                "bigqueryProfile": "bigquery_profile",
                "connectionProfileId": "connection_profile_id",
                "displayName": "display_name",
                "forwardSshConnectivity": "forward_ssh_connectivity",
                "gcsProfile": "gcs_profile",
                "mysqlProfile": "mysql_profile",
                "oracleProfile": "oracle_profile",
                "postgresqlProfile": "postgresql_profile",
                "privateConnectivity": "private_connectivity"
            },
            "gcp:datastream/getStaticIps:getStaticIps": {
                "staticIps": "static_ips"
            },
            "gcp:datastream/privateConnection:PrivateConnection": {
                "displayName": "display_name",
                "errors": "error",
                "privateConnectionId": "private_connection_id",
                "vpcPeeringConfig": "vpc_peering_config"
            },
            "gcp:datastream/stream:Stream": {
                "backfillAll": "backfill_all",
                "backfillNone": "backfill_none",
                "customerManagedEncryptionKey": "customer_managed_encryption_key",
                "desiredState": "desired_state",
                "destinationConfig": "destination_config",
                "displayName": "display_name",
                "sourceConfig": "source_config",
                "streamId": "stream_id"
            },
            "gcp:deploymentmanager/deployment:Deployment": {
                "createPolicy": "create_policy",
                "deletePolicy": "delete_policy",
                "deploymentId": "deployment_id",
                "selfLink": "self_link"
            },
            "gcp:diagflow/CxAgentSpeechToTextSettings:CxAgentSpeechToTextSettings": {
                "enableSpeechAdaptation": "enable_speech_adaptation"
            },
            "gcp:diagflow/CxFlowEventHandler:CxFlowEventHandler": {
                "targetFlow": "target_flow",
                "targetPage": "target_page",
                "triggerFulfillment": "trigger_fulfillment"
            },
            "gcp:diagflow/CxFlowEventHandlerTriggerFulfillment:CxFlowEventHandlerTriggerFulfillment": {
                "returnPartialResponses": "return_partial_responses"
            },
            "gcp:diagflow/CxFlowEventHandlerTriggerFulfillmentMessageText:CxFlowEventHandlerTriggerFulfillmentMessageText": {
                "allowPlaybackInterruption": "allow_playback_interruption",
                "texts": "text"
            },
            "gcp:diagflow/CxFlowNluSettings:CxFlowNluSettings": {
                "classificationThreshold": "classification_threshold",
                "modelTrainingMode": "model_training_mode",
                "modelType": "model_type"
            },
            "gcp:diagflow/CxFlowTransitionRoute:CxFlowTransitionRoute": {
                "targetFlow": "target_flow",
                "targetPage": "target_page",
                "triggerFulfillment": "trigger_fulfillment"
            },
            "gcp:diagflow/CxFlowTransitionRouteTriggerFulfillment:CxFlowTransitionRouteTriggerFulfillment": {
                "returnPartialResponses": "return_partial_responses"
            },
            "gcp:diagflow/CxFlowTransitionRouteTriggerFulfillmentMessageText:CxFlowTransitionRouteTriggerFulfillmentMessageText": {
                "allowPlaybackInterruption": "allow_playback_interruption",
                "texts": "text"
            },
            "gcp:diagflow/CxIntentParameter:CxIntentParameter": {
                "entityType": "entity_type",
                "isList": "is_list"
            },
            "gcp:diagflow/CxIntentTrainingPhrase:CxIntentTrainingPhrase": {
                "repeatCount": "repeat_count"
            },
            "gcp:diagflow/CxIntentTrainingPhrasePart:CxIntentTrainingPhrasePart": {
                "parameterId": "parameter_id"
            },
            "gcp:diagflow/CxPageEntryFulfillment:CxPageEntryFulfillment": {
                "returnPartialResponses": "return_partial_responses"
            },
            "gcp:diagflow/CxPageEntryFulfillmentMessageText:CxPageEntryFulfillmentMessageText": {
                "allowPlaybackInterruption": "allow_playback_interruption",
                "texts": "text"
            },
            "gcp:diagflow/CxPageEventHandler:CxPageEventHandler": {
                "targetFlow": "target_flow",
                "targetPage": "target_page",
                "triggerFulfillment": "trigger_fulfillment"
            },
            "gcp:diagflow/CxPageEventHandlerTriggerFulfillment:CxPageEventHandlerTriggerFulfillment": {
                "returnPartialResponses": "return_partial_responses"
            },
            "gcp:diagflow/CxPageEventHandlerTriggerFulfillmentMessageText:CxPageEventHandlerTriggerFulfillmentMessageText": {
                "allowPlaybackInterruption": "allow_playback_interruption",
                "texts": "text"
            },
            "gcp:diagflow/CxPageFormParameter:CxPageFormParameter": {
                "displayName": "display_name",
                "entityType": "entity_type",
                "fillBehavior": "fill_behavior",
                "isList": "is_list"
            },
            "gcp:diagflow/CxPageFormParameterFillBehavior:CxPageFormParameterFillBehavior": {
                "initialPromptFulfillment": "initial_prompt_fulfillment"
            },
            "gcp:diagflow/CxPageFormParameterFillBehaviorInitialPromptFulfillment:CxPageFormParameterFillBehaviorInitialPromptFulfillment": {
                "returnPartialResponses": "return_partial_responses"
            },
            "gcp:diagflow/CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText:CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageText": {
                "allowPlaybackInterruption": "allow_playback_interruption",
                "texts": "text"
            },
            "gcp:diagflow/CxPageTransitionRoute:CxPageTransitionRoute": {
                "targetFlow": "target_flow",
                "targetPage": "target_page",
                "triggerFulfillment": "trigger_fulfillment"
            },
            "gcp:diagflow/CxPageTransitionRouteTriggerFulfillment:CxPageTransitionRouteTriggerFulfillment": {
                "returnPartialResponses": "return_partial_responses"
            },
            "gcp:diagflow/CxPageTransitionRouteTriggerFulfillmentMessageText:CxPageTransitionRouteTriggerFulfillmentMessageText": {
                "allowPlaybackInterruption": "allow_playback_interruption",
                "texts": "text"
            },
            "gcp:diagflow/CxVersionNluSetting:CxVersionNluSetting": {
                "classificationThreshold": "classification_threshold",
                "modelTrainingMode": "model_training_mode",
                "modelType": "model_type"
            },
            "gcp:diagflow/CxWebhookGenericWebService:CxWebhookGenericWebService": {
                "allowedCaCerts": "allowed_ca_certs",
                "requestHeaders": "request_headers"
            },
            "gcp:diagflow/CxWebhookServiceDirectory:CxWebhookServiceDirectory": {
                "genericWebService": "generic_web_service"
            },
            "gcp:diagflow/CxWebhookServiceDirectoryGenericWebService:CxWebhookServiceDirectoryGenericWebService": {
                "allowedCaCerts": "allowed_ca_certs",
                "requestHeaders": "request_headers"
            },
            "gcp:diagflow/FulfillmentGenericWebService:FulfillmentGenericWebService": {
                "requestHeaders": "request_headers"
            },
            "gcp:diagflow/IntentFollowupIntentInfo:IntentFollowupIntentInfo": {
                "followupIntentName": "followup_intent_name",
                "parentFollowupIntentName": "parent_followup_intent_name"
            },
            "gcp:diagflow/agent:Agent": {
                "apiVersion": "api_version",
                "avatarUri": "avatar_uri",
                "avatarUriBackend": "avatar_uri_backend",
                "classificationThreshold": "classification_threshold",
                "defaultLanguageCode": "default_language_code",
                "displayName": "display_name",
                "enableLogging": "enable_logging",
                "matchMode": "match_mode",
                "supportedLanguageCodes": "supported_language_codes",
                "timeZone": "time_zone"
            },
            "gcp:diagflow/cxAgent:CxAgent": {
                "avatarUri": "avatar_uri",
                "defaultLanguageCode": "default_language_code",
                "displayName": "display_name",
                "enableSpellCorrection": "enable_spell_correction",
                "enableStackdriverLogging": "enable_stackdriver_logging",
                "securitySettings": "security_settings",
                "speechToTextSettings": "speech_to_text_settings",
                "startFlow": "start_flow",
                "supportedLanguageCodes": "supported_language_codes",
                "timeZone": "time_zone"
            },
            "gcp:diagflow/cxEntityType:CxEntityType": {
                "autoExpansionMode": "auto_expansion_mode",
                "displayName": "display_name",
                "enableFuzzyExtraction": "enable_fuzzy_extraction",
                "excludedPhrases": "excluded_phrases",
                "languageCode": "language_code"
            },
            "gcp:diagflow/cxEnvironment:CxEnvironment": {
                "displayName": "display_name",
                "updateTime": "update_time",
                "versionConfigs": "version_configs"
            },
            "gcp:diagflow/cxFlow:CxFlow": {
                "displayName": "display_name",
                "eventHandlers": "event_handlers",
                "languageCode": "language_code",
                "nluSettings": "nlu_settings",
                "transitionRouteGroups": "transition_route_groups",
                "transitionRoutes": "transition_routes"
            },
            "gcp:diagflow/cxIntent:CxIntent": {
                "displayName": "display_name",
                "isFallback": "is_fallback",
                "languageCode": "language_code",
                "trainingPhrases": "training_phrases"
            },
            "gcp:diagflow/cxPage:CxPage": {
                "displayName": "display_name",
                "entryFulfillment": "entry_fulfillment",
                "eventHandlers": "event_handlers",
                "languageCode": "language_code",
                "transitionRouteGroups": "transition_route_groups",
                "transitionRoutes": "transition_routes"
            },
            "gcp:diagflow/cxVersion:CxVersion": {
                "createTime": "create_time",
                "displayName": "display_name",
                "nluSettings": "nlu_settings"
            },
            "gcp:diagflow/cxWebhook:CxWebhook": {
                "displayName": "display_name",
                "enableSpellCorrection": "enable_spell_correction",
                "enableStackdriverLogging": "enable_stackdriver_logging",
                "genericWebService": "generic_web_service",
                "securitySettings": "security_settings",
                "serviceDirectory": "service_directory",
                "startFlow": "start_flow"
            },
            "gcp:diagflow/entityType:EntityType": {
                "displayName": "display_name",
                "enableFuzzyExtraction": "enable_fuzzy_extraction"
            },
            "gcp:diagflow/fulfillment:Fulfillment": {
                "displayName": "display_name",
                "genericWebService": "generic_web_service"
            },
            "gcp:diagflow/intent:Intent": {
                "defaultResponsePlatforms": "default_response_platforms",
                "displayName": "display_name",
                "followupIntentInfos": "followup_intent_info",
                "inputContextNames": "input_context_names",
                "isFallback": "is_fallback",
                "mlDisabled": "ml_disabled",
                "parentFollowupIntentName": "parent_followup_intent_name",
                "resetContexts": "reset_contexts",
                "rootFollowupIntentName": "root_followup_intent_name",
                "webhookState": "webhook_state"
            },
            "gcp:dns/ManagedZoneCloudLoggingConfig:ManagedZoneCloudLoggingConfig": {
                "enableLogging": "enable_logging"
            },
            "gcp:dns/ManagedZoneDnssecConfig:ManagedZoneDnssecConfig": {
                "defaultKeySpecs": "default_key_specs",
                "nonExistence": "non_existence"
            },
            "gcp:dns/ManagedZoneDnssecConfigDefaultKeySpec:ManagedZoneDnssecConfigDefaultKeySpec": {
                "keyLength": "key_length",
                "keyType": "key_type"
            },
            "gcp:dns/ManagedZoneForwardingConfig:ManagedZoneForwardingConfig": {
                "targetNameServers": "target_name_servers"
            },
            "gcp:dns/ManagedZoneForwardingConfigTargetNameServer:ManagedZoneForwardingConfigTargetNameServer": {
                "forwardingPath": "forwarding_path",
                "ipv4Address": "ipv4_address"
            },
            "gcp:dns/ManagedZonePeeringConfig:ManagedZonePeeringConfig": {
                "targetNetwork": "target_network"
            },
            "gcp:dns/ManagedZonePeeringConfigTargetNetwork:ManagedZonePeeringConfigTargetNetwork": {
                "networkUrl": "network_url"
            },
            "gcp:dns/ManagedZonePrivateVisibilityConfig:ManagedZonePrivateVisibilityConfig": {
                "gkeClusters": "gke_clusters"
            },
            "gcp:dns/ManagedZonePrivateVisibilityConfigGkeCluster:ManagedZonePrivateVisibilityConfigGkeCluster": {
                "gkeClusterName": "gke_cluster_name"
            },
            "gcp:dns/ManagedZonePrivateVisibilityConfigNetwork:ManagedZonePrivateVisibilityConfigNetwork": {
                "networkUrl": "network_url"
            },
            "gcp:dns/ManagedZoneServiceDirectoryConfigNamespace:ManagedZoneServiceDirectoryConfigNamespace": {
                "namespaceUrl": "namespace_url"
            },
            "gcp:dns/PolicyAlternativeNameServerConfig:PolicyAlternativeNameServerConfig": {
                "targetNameServers": "target_name_servers"
            },
            "gcp:dns/PolicyAlternativeNameServerConfigTargetNameServer:PolicyAlternativeNameServerConfigTargetNameServer": {
                "forwardingPath": "forwarding_path",
                "ipv4Address": "ipv4_address"
            },
            "gcp:dns/PolicyNetwork:PolicyNetwork": {
                "networkUrl": "network_url"
            },
            "gcp:dns/RecordSetRoutingPolicy:RecordSetRoutingPolicy": {
                "enableGeoFencing": "enable_geo_fencing",
                "geos": "geo",
                "primaryBackup": "primary_backup",
                "wrrs": "wrr"
            },
            "gcp:dns/RecordSetRoutingPolicyGeo:RecordSetRoutingPolicyGeo": {
                "healthCheckedTargets": "health_checked_targets"
            },
            "gcp:dns/RecordSetRoutingPolicyGeoHealthCheckedTargets:RecordSetRoutingPolicyGeoHealthCheckedTargets": {
                "internalLoadBalancers": "internal_load_balancers"
            },
            "gcp:dns/RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancer:RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancer": {
                "ipAddress": "ip_address",
                "ipProtocol": "ip_protocol",
                "loadBalancerType": "load_balancer_type",
                "networkUrl": "network_url"
            },
            "gcp:dns/RecordSetRoutingPolicyPrimaryBackup:RecordSetRoutingPolicyPrimaryBackup": {
                "backupGeos": "backup_geo",
                "enableGeoFencingForBackups": "enable_geo_fencing_for_backups",
                "trickleRatio": "trickle_ratio"
            },
            "gcp:dns/RecordSetRoutingPolicyPrimaryBackupBackupGeo:RecordSetRoutingPolicyPrimaryBackupBackupGeo": {
                "healthCheckedTargets": "health_checked_targets"
            },
            "gcp:dns/RecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargets:RecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargets": {
                "internalLoadBalancers": "internal_load_balancers"
            },
            "gcp:dns/RecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancer:RecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancer": {
                "ipAddress": "ip_address",
                "ipProtocol": "ip_protocol",
                "loadBalancerType": "load_balancer_type",
                "networkUrl": "network_url"
            },
            "gcp:dns/RecordSetRoutingPolicyPrimaryBackupPrimary:RecordSetRoutingPolicyPrimaryBackupPrimary": {
                "internalLoadBalancers": "internal_load_balancers"
            },
            "gcp:dns/RecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancer:RecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancer": {
                "ipAddress": "ip_address",
                "ipProtocol": "ip_protocol",
                "loadBalancerType": "load_balancer_type",
                "networkUrl": "network_url"
            },
            "gcp:dns/RecordSetRoutingPolicyWrr:RecordSetRoutingPolicyWrr": {
                "healthCheckedTargets": "health_checked_targets"
            },
            "gcp:dns/RecordSetRoutingPolicyWrrHealthCheckedTargets:RecordSetRoutingPolicyWrrHealthCheckedTargets": {
                "internalLoadBalancers": "internal_load_balancers"
            },
            "gcp:dns/RecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancer:RecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancer": {
                "ipAddress": "ip_address",
                "ipProtocol": "ip_protocol",
                "loadBalancerType": "load_balancer_type",
                "networkUrl": "network_url"
            },
            "gcp:dns/ResponsePolicyGkeCluster:ResponsePolicyGkeCluster": {
                "gkeClusterName": "gke_cluster_name"
            },
            "gcp:dns/ResponsePolicyNetwork:ResponsePolicyNetwork": {
                "networkUrl": "network_url"
            },
            "gcp:dns/ResponsePolicyRuleLocalData:ResponsePolicyRuleLocalData": {
                "localDatas": "local_datas"
            },
            "gcp:dns/dnsManagedZoneIamBinding:DnsManagedZoneIamBinding": {
                "managedZone": "managed_zone"
            },
            "gcp:dns/dnsManagedZoneIamMember:DnsManagedZoneIamMember": {
                "managedZone": "managed_zone"
            },
            "gcp:dns/dnsManagedZoneIamPolicy:DnsManagedZoneIamPolicy": {
                "managedZone": "managed_zone",
                "policyData": "policy_data"
            },
            "gcp:dns/getKeys:getKeys": {
                "keySigningKeys": "key_signing_keys",
                "managedZone": "managed_zone",
                "zoneSigningKeys": "zone_signing_keys"
            },
            "gcp:dns/getKeysKeySigningKey:getKeysKeySigningKey": {
                "creationTime": "creation_time",
                "dsRecord": "ds_record",
                "isActive": "is_active",
                "keyLength": "key_length",
                "keyTag": "key_tag",
                "publicKey": "public_key"
            },
            "gcp:dns/getKeysZoneSigningKey:getKeysZoneSigningKey": {
                "creationTime": "creation_time",
                "isActive": "is_active",
                "keyLength": "key_length",
                "keyTag": "key_tag",
                "publicKey": "public_key"
            },
            "gcp:dns/getManagedZone:getManagedZone": {
                "dnsName": "dns_name",
                "managedZoneId": "managed_zone_id",
                "nameServers": "name_servers"
            },
            "gcp:dns/getManagedZoneIamPolicy:getManagedZoneIamPolicy": {
                "managedZone": "managed_zone",
                "policyData": "policy_data"
            },
            "gcp:dns/getRecordSet:getRecordSet": {
                "managedZone": "managed_zone"
            },
            "gcp:dns/managedZone:ManagedZone": {
                "cloudLoggingConfig": "cloud_logging_config",
                "creationTime": "creation_time",
                "dnsName": "dns_name",
                "dnssecConfig": "dnssec_config",
                "forceDestroy": "force_destroy",
                "forwardingConfig": "forwarding_config",
                "managedZoneId": "managed_zone_id",
                "nameServers": "name_servers",
                "peeringConfig": "peering_config",
                "privateVisibilityConfig": "private_visibility_config",
                "reverseLookup": "reverse_lookup",
                "serviceDirectoryConfig": "service_directory_config"
            },
            "gcp:dns/policy:Policy": {
                "alternativeNameServerConfig": "alternative_name_server_config",
                "enableInboundForwarding": "enable_inbound_forwarding",
                "enableLogging": "enable_logging"
            },
            "gcp:dns/recordSet:RecordSet": {
                "managedZone": "managed_zone",
                "routingPolicy": "routing_policy"
            },
            "gcp:dns/responsePolicy:ResponsePolicy": {
                "gkeClusters": "gke_clusters",
                "responsePolicyName": "response_policy_name"
            },
            "gcp:dns/responsePolicyRule:ResponsePolicyRule": {
                "dnsName": "dns_name",
                "localData": "local_data",
                "responsePolicy": "response_policy",
                "ruleName": "rule_name"
            },
            "gcp:endpoints/ServiceApiMethod:ServiceApiMethod": {
                "requestType": "request_type",
                "responseType": "response_type"
            },
            "gcp:endpoints/consumersIamBinding:ConsumersIamBinding": {
                "consumerProject": "consumer_project",
                "serviceName": "service_name"
            },
            "gcp:endpoints/consumersIamMember:ConsumersIamMember": {
                "consumerProject": "consumer_project",
                "serviceName": "service_name"
            },
            "gcp:endpoints/consumersIamPolicy:ConsumersIamPolicy": {
                "consumerProject": "consumer_project",
                "policyData": "policy_data",
                "serviceName": "service_name"
            },
            "gcp:endpoints/getServiceConsumersIamPolicy:getServiceConsumersIamPolicy": {
                "consumerProject": "consumer_project",
                "policyData": "policy_data",
                "serviceName": "service_name"
            },
            "gcp:endpoints/getServiceIamPolicy:getServiceIamPolicy": {
                "policyData": "policy_data",
                "serviceName": "service_name"
            },
            "gcp:endpoints/service:Service": {
                "configId": "config_id",
                "dnsAddress": "dns_address",
                "grpcConfig": "grpc_config",
                "openapiConfig": "openapi_config",
                "protocOutputBase64": "protoc_output_base64",
                "serviceName": "service_name"
            },
            "gcp:endpoints/serviceIamBinding:ServiceIamBinding": {
                "serviceName": "service_name"
            },
            "gcp:endpoints/serviceIamMember:ServiceIamMember": {
                "serviceName": "service_name"
            },
            "gcp:endpoints/serviceIamPolicy:ServiceIamPolicy": {
                "policyData": "policy_data",
                "serviceName": "service_name"
            },
            "gcp:essentialcontacts/contact:Contact": {
                "languageTag": "language_tag",
                "notificationCategorySubscriptions": "notification_category_subscriptions"
            },
            "gcp:essentialcontacts/documentAiProcessor:DocumentAiProcessor": {
                "displayName": "display_name",
                "kmsKeyName": "kms_key_name"
            },
            "gcp:eventarc/TriggerDestination:TriggerDestination": {
                "cloudFunction": "cloud_function",
                "cloudRunService": "cloud_run_service"
            },
            "gcp:eventarc/TriggerTransport:TriggerTransport": {
                "pubsubs": "pubsub"
            },
            "gcp:eventarc/channel:Channel": {
                "activationToken": "activation_token",
                "createTime": "create_time",
                "cryptoKeyName": "crypto_key_name",
                "pubsubTopic": "pubsub_topic",
                "thirdPartyProvider": "third_party_provider",
                "updateTime": "update_time"
            },
            "gcp:eventarc/googleChannelConfig:GoogleChannelConfig": {
                "cryptoKeyName": "crypto_key_name",
                "updateTime": "update_time"
            },
            "gcp:eventarc/trigger:Trigger": {
                "createTime": "create_time",
                "matchingCriterias": "matching_criteria",
                "serviceAccount": "service_account",
                "transports": "transport",
                "updateTime": "update_time"
            },
            "gcp:filestore/InstanceFileShares:InstanceFileShares": {
                "capacityGb": "capacity_gb",
                "nfsExportOptions": "nfs_export_options",
                "sourceBackup": "source_backup"
            },
            "gcp:filestore/InstanceFileSharesNfsExportOption:InstanceFileSharesNfsExportOption": {
                "accessMode": "access_mode",
                "anonGid": "anon_gid",
                "anonUid": "anon_uid",
                "ipRanges": "ip_ranges",
                "squashMode": "squash_mode"
            },
            "gcp:filestore/InstanceNetwork:InstanceNetwork": {
                "connectMode": "connect_mode",
                "ipAddresses": "ip_addresses",
                "reservedIpRange": "reserved_ip_range"
            },
            "gcp:filestore/backup:Backup": {
                "capacityGb": "capacity_gb",
                "createTime": "create_time",
                "downloadBytes": "download_bytes",
                "kmsKeyName": "kms_key_name",
                "sourceFileShare": "source_file_share",
                "sourceInstance": "source_instance",
                "sourceInstanceTier": "source_instance_tier",
                "storageBytes": "storage_bytes"
            },
            "gcp:filestore/instance:Instance": {
                "createTime": "create_time",
                "fileShares": "file_shares",
                "kmsKeyName": "kms_key_name"
            },
            "gcp:filestore/snapshot:Snapshot": {
                "createTime": "create_time",
                "filesystemUsedBytes": "filesystem_used_bytes"
            },
            "gcp:firebase/ExtensionsInstanceConfig:ExtensionsInstanceConfig": {
                "allowedEventTypes": "allowed_event_types",
                "createTime": "create_time",
                "eventarcChannel": "eventarc_channel",
                "extensionRef": "extension_ref",
                "extensionVersion": "extension_version",
                "populatedPostinstallContent": "populated_postinstall_content",
                "systemParams": "system_params"
            },
            "gcp:firebase/ExtensionsInstanceRuntimeData:ExtensionsInstanceRuntimeData": {
                "fatalError": "fatal_error",
                "processingState": "processing_state",
                "stateUpdateTime": "state_update_time"
            },
            "gcp:firebase/ExtensionsInstanceRuntimeDataFatalError:ExtensionsInstanceRuntimeDataFatalError": {
                "errorMessage": "error_message"
            },
            "gcp:firebase/ExtensionsInstanceRuntimeDataProcessingState:ExtensionsInstanceRuntimeDataProcessingState": {
                "detailMessage": "detail_message"
            },
            "gcp:firebase/HostingVersionConfigRedirect:HostingVersionConfigRedirect": {
                "statusCode": "status_code"
            },
            "gcp:firebase/HostingVersionConfigRewriteRun:HostingVersionConfigRewriteRun": {
                "serviceId": "service_id"
            },
            "gcp:firebase/androidApp:AndroidApp": {
                "appId": "app_id",
                "deletionPolicy": "deletion_policy",
                "displayName": "display_name",
                "packageName": "package_name",
                "sha1Hashes": "sha1_hashes",
                "sha256Hashes": "sha256_hashes"
            },
            "gcp:firebase/appleApp:AppleApp": {
                "appId": "app_id",
                "appStoreId": "app_store_id",
                "bundleId": "bundle_id",
                "deletionPolicy": "deletion_policy",
                "displayName": "display_name",
                "teamId": "team_id"
            },
            "gcp:firebase/databaseInstance:DatabaseInstance": {
                "databaseUrl": "database_url",
                "desiredState": "desired_state",
                "instanceId": "instance_id"
            },
            "gcp:firebase/extensionsInstance:ExtensionsInstance": {
                "createTime": "create_time",
                "errorStatuses": "error_status",
                "instanceId": "instance_id",
                "lastOperationName": "last_operation_name",
                "lastOperationType": "last_operation_type",
                "runtimeDatas": "runtime_data",
                "serviceAccountEmail": "service_account_email",
                "updateTime": "update_time"
            },
            "gcp:firebase/getAndroidApp:getAndroidApp": {
                "appId": "app_id",
                "deletionPolicy": "deletion_policy",
                "displayName": "display_name",
                "packageName": "package_name",
                "sha1Hashes": "sha1_hashes",
                "sha256Hashes": "sha256_hashes"
            },
            "gcp:firebase/getAndroidAppConfig:getAndroidAppConfig": {
                "appId": "app_id",
                "configFileContents": "config_file_contents",
                "configFilename": "config_filename"
            },
            "gcp:firebase/getAppleApp:getAppleApp": {
                "appId": "app_id",
                "appStoreId": "app_store_id",
                "bundleId": "bundle_id",
                "deletionPolicy": "deletion_policy",
                "displayName": "display_name",
                "teamId": "team_id"
            },
            "gcp:firebase/getAppleAppConfig:getAppleAppConfig": {
                "appId": "app_id",
                "configFileContents": "config_file_contents",
                "configFilename": "config_filename"
            },
            "gcp:firebase/getHostingChannel:getHostingChannel": {
                "channelId": "channel_id",
                "expireTime": "expire_time",
                "retainedReleaseCount": "retained_release_count",
                "siteId": "site_id"
            },
            "gcp:firebase/getWebApp:getWebApp": {
                "appId": "app_id",
                "appUrls": "app_urls",
                "deletionPolicy": "deletion_policy",
                "displayName": "display_name"
            },
            "gcp:firebase/getWebAppConfig:getWebAppConfig": {
                "apiKey": "api_key",
                "authDomain": "auth_domain",
                "databaseUrl": "database_url",
                "locationId": "location_id",
                "measurementId": "measurement_id",
                "messagingSenderId": "messaging_sender_id",
                "storageBucket": "storage_bucket",
                "webAppId": "web_app_id"
            },
            "gcp:firebase/hostingChannel:HostingChannel": {
                "channelId": "channel_id",
                "expireTime": "expire_time",
                "retainedReleaseCount": "retained_release_count",
                "siteId": "site_id"
            },
            "gcp:firebase/hostingRelease:HostingRelease": {
                "channelId": "channel_id",
                "releaseId": "release_id",
                "siteId": "site_id",
                "versionName": "version_name"
            },
            "gcp:firebase/hostingSite:HostingSite": {
                "appId": "app_id",
                "defaultUrl": "default_url",
                "siteId": "site_id"
            },
            "gcp:firebase/hostingVersion:HostingVersion": {
                "siteId": "site_id",
                "versionId": "version_id"
            },
            "gcp:firebase/project:Project": {
                "displayName": "display_name",
                "projectNumber": "project_number"
            },
            "gcp:firebase/projectLocation:ProjectLocation": {
                "locationId": "location_id"
            },
            "gcp:firebase/storageBucket:StorageBucket": {
                "bucketId": "bucket_id"
            },
            "gcp:firebase/webApp:WebApp": {
                "appId": "app_id",
                "appUrls": "app_urls",
                "deletionPolicy": "deletion_policy",
                "displayName": "display_name"
            },
            "gcp:firebaserules/release:Release": {
                "createTime": "create_time",
                "rulesetName": "ruleset_name",
                "updateTime": "update_time"
            },
            "gcp:firebaserules/ruleset:Ruleset": {
                "createTime": "create_time",
                "metadatas": "metadata"
            },
            "gcp:firestore/FieldIndexConfigIndex:FieldIndexConfigIndex": {
                "arrayConfig": "array_config",
                "queryScope": "query_scope"
            },
            "gcp:firestore/IndexField:IndexField": {
                "arrayConfig": "array_config",
                "fieldPath": "field_path"
            },
            "gcp:firestore/database:Database": {
                "appEngineIntegrationMode": "app_engine_integration_mode",
                "concurrencyMode": "concurrency_mode",
                "createTime": "create_time",
                "keyPrefix": "key_prefix",
                "locationId": "location_id"
            },
            "gcp:firestore/document:Document": {
                "createTime": "create_time",
                "documentId": "document_id",
                "updateTime": "update_time"
            },
            "gcp:firestore/field:Field": {
                "indexConfig": "index_config",
                "ttlConfig": "ttl_config"
            },
            "gcp:firestore/index:Index": {
                "queryScope": "query_scope"
            },
            "gcp:folder/AccessApprovalSettingsEnrolledService:AccessApprovalSettingsEnrolledService": {
                "cloudProduct": "cloud_product",
                "enrollmentLevel": "enrollment_level"
            },
            "gcp:folder/IamAuditConfigAuditLogConfig:IamAuditConfigAuditLogConfig": {
                "exemptedMembers": "exempted_members",
                "logType": "log_type"
            },
            "gcp:folder/OrganizationPolicyListPolicy:OrganizationPolicyListPolicy": {
                "inheritFromParent": "inherit_from_parent",
                "suggestedValue": "suggested_value"
            },
            "gcp:folder/accessApprovalSettings:AccessApprovalSettings": {
                "activeKeyVersion": "active_key_version",
                "ancestorHasActiveKeyVersion": "ancestor_has_active_key_version",
                "enrolledAncestor": "enrolled_ancestor",
                "enrolledServices": "enrolled_services",
                "folderId": "folder_id",
                "invalidKeyVersion": "invalid_key_version",
                "notificationEmails": "notification_emails"
            },
            "gcp:folder/getIamPolicy:getIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:folder/getOrganizationPolicy:getOrganizationPolicy": {
                "booleanPolicies": "boolean_policy",
                "listPolicies": "list_policy",
                "restorePolicies": "restore_policy",
                "updateTime": "update_time"
            },
            "gcp:folder/getOrganizationPolicyListPolicy:getOrganizationPolicyListPolicy": {
                "allows": "allow",
                "denies": "deny",
                "inheritFromParent": "inherit_from_parent",
                "suggestedValue": "suggested_value"
            },
            "gcp:folder/iAMPolicy:IAMPolicy": {
                "policyData": "policy_data"
            },
            "gcp:folder/iamAuditConfig:IamAuditConfig": {
                "auditLogConfigs": "audit_log_config"
            },
            "gcp:folder/organizationPolicy:OrganizationPolicy": {
                "booleanPolicy": "boolean_policy",
                "listPolicy": "list_policy",
                "restorePolicy": "restore_policy",
                "updateTime": "update_time"
            },
            "gcp:gameservices/GameServerClusterConnectionInfo:GameServerClusterConnectionInfo": {
                "gkeClusterReference": "gke_cluster_reference"
            },
            "gcp:gameservices/GameServerConfigFleetConfig:GameServerConfigFleetConfig": {
                "fleetSpec": "fleet_spec"
            },
            "gcp:gameservices/GameServerConfigScalingConfig:GameServerConfigScalingConfig": {
                "fleetAutoscalerSpec": "fleet_autoscaler_spec"
            },
            "gcp:gameservices/GameServerConfigScalingConfigSchedule:GameServerConfigScalingConfigSchedule": {
                "cronJobDuration": "cron_job_duration",
                "cronSpec": "cron_spec",
                "endTime": "end_time",
                "startTime": "start_time"
            },
            "gcp:gameservices/GameServerDeploymentRolloutGameServerConfigOverride:GameServerDeploymentRolloutGameServerConfigOverride": {
                "configVersion": "config_version",
                "realmsSelector": "realms_selector"
            },
            "gcp:gameservices/gameServerCluster:GameServerCluster": {
                "clusterId": "cluster_id",
                "connectionInfo": "connection_info",
                "realmId": "realm_id"
            },
            "gcp:gameservices/gameServerConfig:GameServerConfig": {
                "configId": "config_id",
                "deploymentId": "deployment_id",
                "fleetConfigs": "fleet_configs",
                "scalingConfigs": "scaling_configs"
            },
            "gcp:gameservices/gameServerDeployment:GameServerDeployment": {
                "deploymentId": "deployment_id"
            },
            "gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout": {
                "defaultGameServerConfig": "default_game_server_config",
                "deploymentId": "deployment_id",
                "gameServerConfigOverrides": "game_server_config_overrides"
            },
            "gcp:gameservices/getGameServerDeploymentRollout:getGameServerDeploymentRollout": {
                "defaultGameServerConfig": "default_game_server_config",
                "deploymentId": "deployment_id",
                "gameServerConfigOverrides": "game_server_config_overrides"
            },
            "gcp:gameservices/getGameServerDeploymentRolloutGameServerConfigOverride:getGameServerDeploymentRolloutGameServerConfigOverride": {
                "configVersion": "config_version",
                "realmsSelectors": "realms_selector"
            },
            "gcp:gameservices/realm:Realm": {
                "realmId": "realm_id",
                "timeZone": "time_zone"
            },
            "gcp:gkebackup/BackupPlanBackupConfig:BackupPlanBackupConfig": {
                "allNamespaces": "all_namespaces",
                "encryptionKey": "encryption_key",
                "includeSecrets": "include_secrets",
                "includeVolumeData": "include_volume_data",
                "selectedApplications": "selected_applications",
                "selectedNamespaces": "selected_namespaces"
            },
            "gcp:gkebackup/BackupPlanBackupConfigEncryptionKey:BackupPlanBackupConfigEncryptionKey": {
                "gcpKmsEncryptionKey": "gcp_kms_encryption_key"
            },
            "gcp:gkebackup/BackupPlanBackupConfigSelectedApplications:BackupPlanBackupConfigSelectedApplications": {
                "namespacedNames": "namespaced_names"
            },
            "gcp:gkebackup/BackupPlanBackupSchedule:BackupPlanBackupSchedule": {
                "cronSchedule": "cron_schedule"
            },
            "gcp:gkebackup/BackupPlanRetentionPolicy:BackupPlanRetentionPolicy": {
                "backupDeleteLockDays": "backup_delete_lock_days",
                "backupRetainDays": "backup_retain_days"
            },
            "gcp:gkebackup/backupPlan:BackupPlan": {
                "backupConfig": "backup_config",
                "backupSchedule": "backup_schedule",
                "protectedPodCount": "protected_pod_count",
                "retentionPolicy": "retention_policy",
                "stateReason": "state_reason"
            },
            "gcp:gkebackup/backupPlanIamPolicy:BackupPlanIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:gkebackup/getBackupPlanIamPolicy:getBackupPlanIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:gkehub/FeatureMembershipConfigmanagement:FeatureMembershipConfigmanagement": {
                "configSync": "config_sync",
                "hierarchyController": "hierarchy_controller",
                "policyController": "policy_controller"
            },
            "gcp:gkehub/FeatureMembershipConfigmanagementConfigSync:FeatureMembershipConfigmanagementConfigSync": {
                "preventDrift": "prevent_drift",
                "sourceFormat": "source_format"
            },
            "gcp:gkehub/FeatureMembershipConfigmanagementConfigSyncGit:FeatureMembershipConfigmanagementConfigSyncGit": {
                "gcpServiceAccountEmail": "gcp_service_account_email",
                "httpsProxy": "https_proxy",
                "policyDir": "policy_dir",
                "secretType": "secret_type",
                "syncBranch": "sync_branch",
                "syncRepo": "sync_repo",
                "syncRev": "sync_rev",
                "syncWaitSecs": "sync_wait_secs"
            },
            "gcp:gkehub/FeatureMembershipConfigmanagementConfigSyncOci:FeatureMembershipConfigmanagementConfigSyncOci": {
                "gcpServiceAccountEmail": "gcp_service_account_email",
                "policyDir": "policy_dir",
                "secretType": "secret_type",
                "syncRepo": "sync_repo",
                "syncWaitSecs": "sync_wait_secs"
            },
            "gcp:gkehub/FeatureMembershipConfigmanagementHierarchyController:FeatureMembershipConfigmanagementHierarchyController": {
                "enableHierarchicalResourceQuota": "enable_hierarchical_resource_quota",
                "enablePodTreeLabels": "enable_pod_tree_labels"
            },
            "gcp:gkehub/FeatureMembershipConfigmanagementPolicyController:FeatureMembershipConfigmanagementPolicyController": {
                "auditIntervalSeconds": "audit_interval_seconds",
                "exemptableNamespaces": "exemptable_namespaces",
                "logDeniesEnabled": "log_denies_enabled",
                "mutationEnabled": "mutation_enabled",
                "referentialRulesEnabled": "referential_rules_enabled",
                "templateLibraryInstalled": "template_library_installed"
            },
            "gcp:gkehub/FeatureMembershipMesh:FeatureMembershipMesh": {
                "controlPlane": "control_plane"
            },
            "gcp:gkehub/FeatureResourceState:FeatureResourceState": {
                "hasResources": "has_resources"
            },
            "gcp:gkehub/FeatureSpecFleetobservability:FeatureSpecFleetobservability": {
                "loggingConfig": "logging_config"
            },
            "gcp:gkehub/FeatureSpecFleetobservabilityLoggingConfig:FeatureSpecFleetobservabilityLoggingConfig": {
                "defaultConfig": "default_config",
                "fleetScopeLogsConfig": "fleet_scope_logs_config"
            },
            "gcp:gkehub/FeatureSpecMulticlusteringress:FeatureSpecMulticlusteringress": {
                "configMembership": "config_membership"
            },
            "gcp:gkehub/FeatureState:FeatureState": {
                "states": "state"
            },
            "gcp:gkehub/FeatureStateState:FeatureStateState": {
                "updateTime": "update_time"
            },
            "gcp:gkehub/MembershipEndpoint:MembershipEndpoint": {
                "gkeCluster": "gke_cluster"
            },
            "gcp:gkehub/MembershipEndpointGkeCluster:MembershipEndpointGkeCluster": {
                "resourceLink": "resource_link"
            },
            "gcp:gkehub/feature:Feature": {
                "createTime": "create_time",
                "deleteTime": "delete_time",
                "resourceStates": "resource_state",
                "states": "state",
                "updateTime": "update_time"
            },
            "gcp:gkehub/featureIamPolicy:FeatureIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:gkehub/getFeatureIamPolicy:getFeatureIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:gkehub/getMembershipIamPolicy:getMembershipIamPolicy": {
                "membershipId": "membership_id",
                "policyData": "policy_data"
            },
            "gcp:gkehub/membership:Membership": {
                "membershipId": "membership_id"
            },
            "gcp:gkehub/membershipIamBinding:MembershipIamBinding": {
                "membershipId": "membership_id"
            },
            "gcp:gkehub/membershipIamMember:MembershipIamMember": {
                "membershipId": "membership_id"
            },
            "gcp:gkehub/membershipIamPolicy:MembershipIamPolicy": {
                "membershipId": "membership_id",
                "policyData": "policy_data"
            },
            "gcp:gkeonprem/BareMetalAdminClusterClusterOperations:BareMetalAdminClusterClusterOperations": {
                "enableApplicationLogs": "enable_application_logs"
            },
            "gcp:gkeonprem/BareMetalAdminClusterControlPlane:BareMetalAdminClusterControlPlane": {
                "apiServerArgs": "api_server_args",
                "controlPlaneNodePoolConfig": "control_plane_node_pool_config"
            },
            "gcp:gkeonprem/BareMetalAdminClusterControlPlaneControlPlaneNodePoolConfig:BareMetalAdminClusterControlPlaneControlPlaneNodePoolConfig": {
                "nodePoolConfig": "node_pool_config"
            },
            "gcp:gkeonprem/BareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfig:BareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfig": {
                "nodeConfigs": "node_configs",
                "operatingSystem": "operating_system"
            },
            "gcp:gkeonprem/BareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfig:BareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfig": {
                "nodeIp": "node_ip"
            },
            "gcp:gkeonprem/BareMetalAdminClusterLoadBalancer:BareMetalAdminClusterLoadBalancer": {
                "manualLbConfig": "manual_lb_config",
                "portConfig": "port_config",
                "vipConfig": "vip_config"
            },
            "gcp:gkeonprem/BareMetalAdminClusterLoadBalancerPortConfig:BareMetalAdminClusterLoadBalancerPortConfig": {
                "controlPlaneLoadBalancerPort": "control_plane_load_balancer_port"
            },
            "gcp:gkeonprem/BareMetalAdminClusterLoadBalancerVipConfig:BareMetalAdminClusterLoadBalancerVipConfig": {
                "controlPlaneVip": "control_plane_vip"
            },
            "gcp:gkeonprem/BareMetalAdminClusterMaintenanceConfig:BareMetalAdminClusterMaintenanceConfig": {
                "maintenanceAddressCidrBlocks": "maintenance_address_cidr_blocks"
            },
            "gcp:gkeonprem/BareMetalAdminClusterNetworkConfig:BareMetalAdminClusterNetworkConfig": {
                "islandModeCidr": "island_mode_cidr"
            },
            "gcp:gkeonprem/BareMetalAdminClusterNetworkConfigIslandModeCidr:BareMetalAdminClusterNetworkConfigIslandModeCidr": {
                "podAddressCidrBlocks": "pod_address_cidr_blocks",
                "serviceAddressCidrBlocks": "service_address_cidr_blocks"
            },
            "gcp:gkeonprem/BareMetalAdminClusterNodeAccessConfig:BareMetalAdminClusterNodeAccessConfig": {
                "loginUser": "login_user"
            },
            "gcp:gkeonprem/BareMetalAdminClusterNodeConfig:BareMetalAdminClusterNodeConfig": {
                "maxPodsPerNode": "max_pods_per_node"
            },
            "gcp:gkeonprem/BareMetalAdminClusterProxy:BareMetalAdminClusterProxy": {
                "noProxies": "no_proxy"
            },
            "gcp:gkeonprem/BareMetalAdminClusterSecurityConfigAuthorization:BareMetalAdminClusterSecurityConfigAuthorization": {
                "adminUsers": "admin_users"
            },
            "gcp:gkeonprem/BareMetalAdminClusterStatus:BareMetalAdminClusterStatus": {
                "errorMessage": "error_message"
            },
            "gcp:gkeonprem/BareMetalAdminClusterStatusCondition:BareMetalAdminClusterStatusCondition": {
                "lastTransitionTime": "last_transition_time"
            },
            "gcp:gkeonprem/BareMetalAdminClusterStorage:BareMetalAdminClusterStorage": {
                "lvpNodeMountsConfig": "lvp_node_mounts_config",
                "lvpShareConfig": "lvp_share_config"
            },
            "gcp:gkeonprem/BareMetalAdminClusterStorageLvpNodeMountsConfig:BareMetalAdminClusterStorageLvpNodeMountsConfig": {
                "storageClass": "storage_class"
            },
            "gcp:gkeonprem/BareMetalAdminClusterStorageLvpShareConfig:BareMetalAdminClusterStorageLvpShareConfig": {
                "lvpConfig": "lvp_config",
                "sharedPathPvCount": "shared_path_pv_count"
            },
            "gcp:gkeonprem/BareMetalAdminClusterStorageLvpShareConfigLvpConfig:BareMetalAdminClusterStorageLvpShareConfigLvpConfig": {
                "storageClass": "storage_class"
            },
            "gcp:gkeonprem/BareMetalAdminClusterValidationCheck:BareMetalAdminClusterValidationCheck": {
                "statuses": "status"
            },
            "gcp:gkeonprem/BareMetalAdminClusterValidationCheckStatus:BareMetalAdminClusterValidationCheckStatus": {
                "results": "result"
            },
            "gcp:gkeonprem/BareMetalClusterClusterOperations:BareMetalClusterClusterOperations": {
                "enableApplicationLogs": "enable_application_logs"
            },
            "gcp:gkeonprem/BareMetalClusterControlPlane:BareMetalClusterControlPlane": {
                "apiServerArgs": "api_server_args",
                "controlPlaneNodePoolConfig": "control_plane_node_pool_config"
            },
            "gcp:gkeonprem/BareMetalClusterControlPlaneControlPlaneNodePoolConfig:BareMetalClusterControlPlaneControlPlaneNodePoolConfig": {
                "nodePoolConfig": "node_pool_config"
            },
            "gcp:gkeonprem/BareMetalClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfig:BareMetalClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfig": {
                "nodeConfigs": "node_configs",
                "operatingSystem": "operating_system"
            },
            "gcp:gkeonprem/BareMetalClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfig:BareMetalClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfig": {
                "nodeIp": "node_ip"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancer:BareMetalClusterLoadBalancer": {
                "bgpLbConfig": "bgp_lb_config",
                "manualLbConfig": "manual_lb_config",
                "metalLbConfig": "metal_lb_config",
                "portConfig": "port_config",
                "vipConfig": "vip_config"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerBgpLbConfig:BareMetalClusterLoadBalancerBgpLbConfig": {
                "addressPools": "address_pools",
                "bgpPeerConfigs": "bgp_peer_configs",
                "loadBalancerNodePoolConfig": "load_balancer_node_pool_config"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerBgpLbConfigAddressPool:BareMetalClusterLoadBalancerBgpLbConfigAddressPool": {
                "avoidBuggyIps": "avoid_buggy_ips",
                "manualAssign": "manual_assign"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerBgpLbConfigBgpPeerConfig:BareMetalClusterLoadBalancerBgpLbConfigBgpPeerConfig": {
                "controlPlaneNodes": "control_plane_nodes",
                "ipAddress": "ip_address"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfig:BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfig": {
                "nodePoolConfig": "node_pool_config"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfigNodePoolConfig:BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfigNodePoolConfig": {
                "kubeletConfig": "kubelet_config",
                "nodeConfigs": "node_configs",
                "operatingSystem": "operating_system"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigKubeletConfig:BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigKubeletConfig": {
                "registryBurst": "registry_burst",
                "registryPullQps": "registry_pull_qps",
                "serializeImagePullsDisabled": "serialize_image_pulls_disabled"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfig:BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfig": {
                "nodeIp": "node_ip"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerMetalLbConfig:BareMetalClusterLoadBalancerMetalLbConfig": {
                "addressPools": "address_pools",
                "loadBalancerNodePoolConfig": "load_balancer_node_pool_config"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerMetalLbConfigAddressPool:BareMetalClusterLoadBalancerMetalLbConfigAddressPool": {
                "avoidBuggyIps": "avoid_buggy_ips",
                "manualAssign": "manual_assign"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerMetalLbConfigLoadBalancerNodePoolConfig:BareMetalClusterLoadBalancerMetalLbConfigLoadBalancerNodePoolConfig": {
                "nodePoolConfig": "node_pool_config"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerMetalLbConfigLoadBalancerNodePoolConfigNodePoolConfig:BareMetalClusterLoadBalancerMetalLbConfigLoadBalancerNodePoolConfigNodePoolConfig": {
                "nodeConfigs": "node_configs",
                "operatingSystem": "operating_system"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerMetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfig:BareMetalClusterLoadBalancerMetalLbConfigLoadBalancerNodePoolConfigNodePoolConfigNodeConfig": {
                "nodeIp": "node_ip"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerPortConfig:BareMetalClusterLoadBalancerPortConfig": {
                "controlPlaneLoadBalancerPort": "control_plane_load_balancer_port"
            },
            "gcp:gkeonprem/BareMetalClusterLoadBalancerVipConfig:BareMetalClusterLoadBalancerVipConfig": {
                "controlPlaneVip": "control_plane_vip",
                "ingressVip": "ingress_vip"
            },
            "gcp:gkeonprem/BareMetalClusterMaintenanceConfig:BareMetalClusterMaintenanceConfig": {
                "maintenanceAddressCidrBlocks": "maintenance_address_cidr_blocks"
            },
            "gcp:gkeonprem/BareMetalClusterNetworkConfig:BareMetalClusterNetworkConfig": {
                "advancedNetworking": "advanced_networking",
                "islandModeCidr": "island_mode_cidr",
                "multipleNetworkInterfacesConfig": "multiple_network_interfaces_config",
                "srIovConfig": "sr_iov_config"
            },
            "gcp:gkeonprem/BareMetalClusterNetworkConfigIslandModeCidr:BareMetalClusterNetworkConfigIslandModeCidr": {
                "podAddressCidrBlocks": "pod_address_cidr_blocks",
                "serviceAddressCidrBlocks": "service_address_cidr_blocks"
            },
            "gcp:gkeonprem/BareMetalClusterNodeAccessConfig:BareMetalClusterNodeAccessConfig": {
                "loginUser": "login_user"
            },
            "gcp:gkeonprem/BareMetalClusterNodeConfig:BareMetalClusterNodeConfig": {
                "containerRuntime": "container_runtime",
                "maxPodsPerNode": "max_pods_per_node"
            },
            "gcp:gkeonprem/BareMetalClusterOsEnvironmentConfig:BareMetalClusterOsEnvironmentConfig": {
                "packageRepoExcluded": "package_repo_excluded"
            },
            "gcp:gkeonprem/BareMetalClusterProxy:BareMetalClusterProxy": {
                "noProxies": "no_proxy"
            },
            "gcp:gkeonprem/BareMetalClusterSecurityConfigAuthorization:BareMetalClusterSecurityConfigAuthorization": {
                "adminUsers": "admin_users"
            },
            "gcp:gkeonprem/BareMetalClusterStatus:BareMetalClusterStatus": {
                "errorMessage": "error_message"
            },
            "gcp:gkeonprem/BareMetalClusterStatusCondition:BareMetalClusterStatusCondition": {
                "lastTransitionTime": "last_transition_time"
            },
            "gcp:gkeonprem/BareMetalClusterStorage:BareMetalClusterStorage": {
                "lvpNodeMountsConfig": "lvp_node_mounts_config",
                "lvpShareConfig": "lvp_share_config"
            },
            "gcp:gkeonprem/BareMetalClusterStorageLvpNodeMountsConfig:BareMetalClusterStorageLvpNodeMountsConfig": {
                "storageClass": "storage_class"
            },
            "gcp:gkeonprem/BareMetalClusterStorageLvpShareConfig:BareMetalClusterStorageLvpShareConfig": {
                "lvpConfig": "lvp_config",
                "sharedPathPvCount": "shared_path_pv_count"
            },
            "gcp:gkeonprem/BareMetalClusterStorageLvpShareConfigLvpConfig:BareMetalClusterStorageLvpShareConfigLvpConfig": {
                "storageClass": "storage_class"
            },
            "gcp:gkeonprem/BareMetalClusterValidationCheck:BareMetalClusterValidationCheck": {
                "statuses": "status"
            },
            "gcp:gkeonprem/BareMetalClusterValidationCheckStatus:BareMetalClusterValidationCheckStatus": {
                "results": "result"
            },
            "gcp:gkeonprem/BareMetalNodePoolNodePoolConfig:BareMetalNodePoolNodePoolConfig": {
                "nodeConfigs": "node_configs",
                "operatingSystem": "operating_system"
            },
            "gcp:gkeonprem/BareMetalNodePoolNodePoolConfigNodeConfig:BareMetalNodePoolNodePoolConfigNodeConfig": {
                "nodeIp": "node_ip"
            },
            "gcp:gkeonprem/BareMetalNodePoolStatus:BareMetalNodePoolStatus": {
                "errorMessage": "error_message"
            },
            "gcp:gkeonprem/BareMetalNodePoolStatusCondition:BareMetalNodePoolStatusCondition": {
                "lastTransitionTime": "last_transition_time"
            },
            "gcp:gkeonprem/VMwareClusterAntiAffinityGroups:VMwareClusterAntiAffinityGroups": {
                "aagConfigDisabled": "aag_config_disabled"
            },
            "gcp:gkeonprem/VMwareClusterAuthorization:VMwareClusterAuthorization": {
                "adminUsers": "admin_users"
            },
            "gcp:gkeonprem/VMwareClusterControlPlaneNode:VMwareClusterControlPlaneNode": {
                "autoResizeConfig": "auto_resize_config",
                "vsphereConfigs": "vsphere_config"
            },
            "gcp:gkeonprem/VMwareClusterDataplaneV2:VMwareClusterDataplaneV2": {
                "advancedNetworking": "advanced_networking",
                "dataplaneV2Enabled": "dataplane_v2_enabled",
                "windowsDataplaneV2Enabled": "windows_dataplane_v2_enabled"
            },
            "gcp:gkeonprem/VMwareClusterLoadBalancer:VMwareClusterLoadBalancer": {
                "f5Config": "f5_config",
                "manualLbConfig": "manual_lb_config",
                "metalLbConfig": "metal_lb_config",
                "vipConfig": "vip_config"
            },
            "gcp:gkeonprem/VMwareClusterLoadBalancerF5Config:VMwareClusterLoadBalancerF5Config": {
                "snatPool": "snat_pool"
            },
            "gcp:gkeonprem/VMwareClusterLoadBalancerManualLbConfig:VMwareClusterLoadBalancerManualLbConfig": {
                "controlPlaneNodePort": "control_plane_node_port",
                "ingressHttpNodePort": "ingress_http_node_port",
                "ingressHttpsNodePort": "ingress_https_node_port",
                "konnectivityServerNodePort": "konnectivity_server_node_port"
            },
            "gcp:gkeonprem/VMwareClusterLoadBalancerMetalLbConfig:VMwareClusterLoadBalancerMetalLbConfig": {
                "addressPools": "address_pools"
            },
            "gcp:gkeonprem/VMwareClusterLoadBalancerMetalLbConfigAddressPool:VMwareClusterLoadBalancerMetalLbConfigAddressPool": {
                "avoidBuggyIps": "avoid_buggy_ips",
                "manualAssign": "manual_assign"
            },
            "gcp:gkeonprem/VMwareClusterLoadBalancerVipConfig:VMwareClusterLoadBalancerVipConfig": {
                "controlPlaneVip": "control_plane_vip",
                "ingressVip": "ingress_vip"
            },
            "gcp:gkeonprem/VMwareClusterNetworkConfig:VMwareClusterNetworkConfig": {
                "controlPlaneV2Config": "control_plane_v2_config",
                "dhcpIpConfig": "dhcp_ip_config",
                "hostConfig": "host_config",
                "podAddressCidrBlocks": "pod_address_cidr_blocks",
                "serviceAddressCidrBlocks": "service_address_cidr_blocks",
                "staticIpConfig": "static_ip_config",
                "vcenterNetwork": "vcenter_network"
            },
            "gcp:gkeonprem/VMwareClusterNetworkConfigControlPlaneV2Config:VMwareClusterNetworkConfigControlPlaneV2Config": {
                "controlPlaneIpBlock": "control_plane_ip_block"
            },
            "gcp:gkeonprem/VMwareClusterNetworkConfigHostConfig:VMwareClusterNetworkConfigHostConfig": {
                "dnsSearchDomains": "dns_search_domains",
                "dnsServers": "dns_servers",
                "ntpServers": "ntp_servers"
            },
            "gcp:gkeonprem/VMwareClusterNetworkConfigStaticIpConfig:VMwareClusterNetworkConfigStaticIpConfig": {
                "ipBlocks": "ip_blocks"
            },
            "gcp:gkeonprem/VMwareClusterStatus:VMwareClusterStatus": {
                "errorMessage": "error_message"
            },
            "gcp:gkeonprem/VMwareClusterStatusCondition:VMwareClusterStatusCondition": {
                "lastTransitionTime": "last_transition_time"
            },
            "gcp:gkeonprem/VMwareClusterStorage:VMwareClusterStorage": {
                "vsphereCsiDisabled": "vsphere_csi_disabled"
            },
            "gcp:gkeonprem/VMwareClusterValidationCheck:VMwareClusterValidationCheck": {
                "statuses": "status"
            },
            "gcp:gkeonprem/VMwareClusterValidationCheckStatus:VMwareClusterValidationCheckStatus": {
                "results": "result"
            },
            "gcp:gkeonprem/VMwareClusterVcenter:VMwareClusterVcenter": {
                "caCertData": "ca_cert_data",
                "resourcePool": "resource_pool"
            },
            "gcp:gkeonprem/VMwareNodePoolConfig:VMwareNodePoolConfig": {
                "bootDiskSizeGb": "boot_disk_size_gb",
                "enableLoadBalancer": "enable_load_balancer",
                "imageType": "image_type",
                "memoryMb": "memory_mb",
                "vsphereConfigs": "vsphere_config"
            },
            "gcp:gkeonprem/VMwareNodePoolNodePoolAutoscaling:VMwareNodePoolNodePoolAutoscaling": {
                "maxReplicas": "max_replicas",
                "minReplicas": "min_replicas"
            },
            "gcp:gkeonprem/VMwareNodePoolStatus:VMwareNodePoolStatus": {
                "errorMessage": "error_message"
            },
            "gcp:gkeonprem/VMwareNodePoolStatusCondition:VMwareNodePoolStatusCondition": {
                "lastTransitionTime": "last_transition_time"
            },
            "gcp:gkeonprem/bareMetalAdminCluster:BareMetalAdminCluster": {
                "bareMetalVersion": "bare_metal_version",
                "clusterOperations": "cluster_operations",
                "controlPlane": "control_plane",
                "createTime": "create_time",
                "deleteTime": "delete_time",
                "fleets": "fleet",
                "loadBalancer": "load_balancer",
                "localName": "local_name",
                "maintenanceConfig": "maintenance_config",
                "networkConfig": "network_config",
                "nodeAccessConfig": "node_access_config",
                "nodeConfig": "node_config",
                "securityConfig": "security_config",
                "statuses": "status",
                "updateTime": "update_time",
                "validationChecks": "validation_check"
            },
            "gcp:gkeonprem/bareMetalCluster:BareMetalCluster": {
                "adminClusterMembership": "admin_cluster_membership",
                "bareMetalVersion": "bare_metal_version",
                "clusterOperations": "cluster_operations",
                "controlPlane": "control_plane",
                "createTime": "create_time",
                "deleteTime": "delete_time",
                "fleets": "fleet",
                "loadBalancer": "load_balancer",
                "localName": "local_name",
                "maintenanceConfig": "maintenance_config",
                "networkConfig": "network_config",
                "nodeAccessConfig": "node_access_config",
                "nodeConfig": "node_config",
                "osEnvironmentConfig": "os_environment_config",
                "securityConfig": "security_config",
                "statuses": "status",
                "updateTime": "update_time",
                "validationChecks": "validation_check"
            },
            "gcp:gkeonprem/bareMetalNodePool:BareMetalNodePool": {
                "bareMetalCluster": "bare_metal_cluster",
                "createTime": "create_time",
                "deleteTime": "delete_time",
                "displayName": "display_name",
                "nodePoolConfig": "node_pool_config",
                "statuses": "status",
                "updateTime": "update_time"
            },
            "gcp:gkeonprem/vMwareCluster:VMwareCluster": {
                "adminClusterMembership": "admin_cluster_membership",
                "antiAffinityGroups": "anti_affinity_groups",
                "autoRepairConfig": "auto_repair_config",
                "controlPlaneNode": "control_plane_node",
                "createTime": "create_time",
                "dataplaneV2": "dataplane_v2",
                "deleteTime": "delete_time",
                "enableControlPlaneV2": "enable_control_plane_v2",
                "fleets": "fleet",
                "loadBalancer": "load_balancer",
                "localName": "local_name",
                "networkConfig": "network_config",
                "onPremVersion": "on_prem_version",
                "statuses": "status",
                "updateTime": "update_time",
                "validationChecks": "validation_check",
                "vcenters": "vcenter",
                "vmTrackingEnabled": "vm_tracking_enabled"
            },
            "gcp:gkeonprem/vMwareNodePool:VMwareNodePool": {
                "createTime": "create_time",
                "deleteTime": "delete_time",
                "displayName": "display_name",
                "nodePoolAutoscaling": "node_pool_autoscaling",
                "onPremVersion": "on_prem_version",
                "statuses": "status",
                "updateTime": "update_time",
                "vmwareCluster": "vmware_cluster"
            },
            "gcp:healthcare/DicomStoreNotificationConfig:DicomStoreNotificationConfig": {
                "pubsubTopic": "pubsub_topic"
            },
            "gcp:healthcare/DicomStoreStreamConfig:DicomStoreStreamConfig": {
                "bigqueryDestination": "bigquery_destination"
            },
            "gcp:healthcare/DicomStoreStreamConfigBigqueryDestination:DicomStoreStreamConfigBigqueryDestination": {
                "tableUri": "table_uri"
            },
            "gcp:healthcare/FhirStoreNotificationConfig:FhirStoreNotificationConfig": {
                "pubsubTopic": "pubsub_topic",
                "sendFullResource": "send_full_resource"
            },
            "gcp:healthcare/FhirStoreStreamConfig:FhirStoreStreamConfig": {
                "bigqueryDestination": "bigquery_destination",
                "resourceTypes": "resource_types"
            },
            "gcp:healthcare/FhirStoreStreamConfigBigqueryDestination:FhirStoreStreamConfigBigqueryDestination": {
                "datasetUri": "dataset_uri",
                "schemaConfig": "schema_config"
            },
            "gcp:healthcare/FhirStoreStreamConfigBigqueryDestinationSchemaConfig:FhirStoreStreamConfigBigqueryDestinationSchemaConfig": {
                "lastUpdatedPartitionConfig": "last_updated_partition_config",
                "recursiveStructureDepth": "recursive_structure_depth",
                "schemaType": "schema_type"
            },
            "gcp:healthcare/FhirStoreStreamConfigBigqueryDestinationSchemaConfigLastUpdatedPartitionConfig:FhirStoreStreamConfigBigqueryDestinationSchemaConfigLastUpdatedPartitionConfig": {
                "expirationMs": "expiration_ms"
            },
            "gcp:healthcare/Hl7StoreNotificationConfig:Hl7StoreNotificationConfig": {
                "pubsubTopic": "pubsub_topic"
            },
            "gcp:healthcare/Hl7StoreNotificationConfigs:Hl7StoreNotificationConfigs": {
                "pubsubTopic": "pubsub_topic"
            },
            "gcp:healthcare/Hl7StoreParserConfig:Hl7StoreParserConfig": {
                "allowNullHeader": "allow_null_header",
                "segmentTerminator": "segment_terminator"
            },
            "gcp:healthcare/consentStore:ConsentStore": {
                "defaultConsentTtl": "default_consent_ttl",
                "enableConsentCreateOnUpdate": "enable_consent_create_on_update"
            },
            "gcp:healthcare/consentStoreIamBinding:ConsentStoreIamBinding": {
                "consentStoreId": "consent_store_id"
            },
            "gcp:healthcare/consentStoreIamMember:ConsentStoreIamMember": {
                "consentStoreId": "consent_store_id"
            },
            "gcp:healthcare/consentStoreIamPolicy:ConsentStoreIamPolicy": {
                "consentStoreId": "consent_store_id",
                "policyData": "policy_data"
            },
            "gcp:healthcare/dataset:Dataset": {
                "selfLink": "self_link",
                "timeZone": "time_zone"
            },
            "gcp:healthcare/datasetIamBinding:DatasetIamBinding": {
                "datasetId": "dataset_id"
            },
            "gcp:healthcare/datasetIamMember:DatasetIamMember": {
                "datasetId": "dataset_id"
            },
            "gcp:healthcare/datasetIamPolicy:DatasetIamPolicy": {
                "datasetId": "dataset_id",
                "policyData": "policy_data"
            },
            "gcp:healthcare/dicomStore:DicomStore": {
                "notificationConfig": "notification_config",
                "selfLink": "self_link",
                "streamConfigs": "stream_configs"
            },
            "gcp:healthcare/dicomStoreIamBinding:DicomStoreIamBinding": {
                "dicomStoreId": "dicom_store_id"
            },
            "gcp:healthcare/dicomStoreIamMember:DicomStoreIamMember": {
                "dicomStoreId": "dicom_store_id"
            },
            "gcp:healthcare/dicomStoreIamPolicy:DicomStoreIamPolicy": {
                "dicomStoreId": "dicom_store_id",
                "policyData": "policy_data"
            },
            "gcp:healthcare/fhirStore:FhirStore": {
                "complexDataTypeReferenceParsing": "complex_data_type_reference_parsing",
                "disableReferentialIntegrity": "disable_referential_integrity",
                "disableResourceVersioning": "disable_resource_versioning",
                "enableHistoryImport": "enable_history_import",
                "enableUpdateCreate": "enable_update_create",
                "notificationConfig": "notification_config",
                "notificationConfigs": "notification_configs",
                "selfLink": "self_link",
                "streamConfigs": "stream_configs"
            },
            "gcp:healthcare/fhirStoreIamBinding:FhirStoreIamBinding": {
                "fhirStoreId": "fhir_store_id"
            },
            "gcp:healthcare/fhirStoreIamMember:FhirStoreIamMember": {
                "fhirStoreId": "fhir_store_id"
            },
            "gcp:healthcare/fhirStoreIamPolicy:FhirStoreIamPolicy": {
                "fhirStoreId": "fhir_store_id",
                "policyData": "policy_data"
            },
            "gcp:healthcare/getConsentStoreIamPolicy:getConsentStoreIamPolicy": {
                "consentStoreId": "consent_store_id",
                "policyData": "policy_data"
            },
            "gcp:healthcare/getDatasetIamPolicy:getDatasetIamPolicy": {
                "datasetId": "dataset_id",
                "policyData": "policy_data"
            },
            "gcp:healthcare/getDicomStoreIamPolicy:getDicomStoreIamPolicy": {
                "dicomStoreId": "dicom_store_id",
                "policyData": "policy_data"
            },
            "gcp:healthcare/getFhirStoreIamPolicy:getFhirStoreIamPolicy": {
                "fhirStoreId": "fhir_store_id",
                "policyData": "policy_data"
            },
            "gcp:healthcare/getHl7V2StoreIamPolicy:getHl7V2StoreIamPolicy": {
                "hl7V2StoreId": "hl7_v2_store_id",
                "policyData": "policy_data"
            },
            "gcp:healthcare/hl7Store:Hl7Store": {
                "notificationConfig": "notification_config",
                "notificationConfigs": "notification_configs",
                "parserConfig": "parser_config",
                "selfLink": "self_link"
            },
            "gcp:healthcare/hl7StoreIamBinding:Hl7StoreIamBinding": {
                "hl7V2StoreId": "hl7_v2_store_id"
            },
            "gcp:healthcare/hl7StoreIamMember:Hl7StoreIamMember": {
                "hl7V2StoreId": "hl7_v2_store_id"
            },
            "gcp:healthcare/hl7StoreIamPolicy:Hl7StoreIamPolicy": {
                "hl7V2StoreId": "hl7_v2_store_id",
                "policyData": "policy_data"
            },
            "gcp:iam/AccessBoundaryPolicyRule:AccessBoundaryPolicyRule": {
                "accessBoundaryRule": "access_boundary_rule"
            },
            "gcp:iam/AccessBoundaryPolicyRuleAccessBoundaryRule:AccessBoundaryPolicyRuleAccessBoundaryRule": {
                "availabilityCondition": "availability_condition",
                "availablePermissions": "available_permissions",
                "availableResource": "available_resource"
            },
            "gcp:iam/DenyPolicyRule:DenyPolicyRule": {
                "denyRule": "deny_rule"
            },
            "gcp:iam/DenyPolicyRuleDenyRule:DenyPolicyRuleDenyRule": {
                "denialCondition": "denial_condition",
                "deniedPermissions": "denied_permissions",
                "deniedPrincipals": "denied_principals",
                "exceptionPermissions": "exception_permissions",
                "exceptionPrincipals": "exception_principals"
            },
            "gcp:iam/WorkforcePoolProviderOidc:WorkforcePoolProviderOidc": {
                "clientId": "client_id",
                "clientSecret": "client_secret",
                "issuerUri": "issuer_uri",
                "webSsoConfig": "web_sso_config"
            },
            "gcp:iam/WorkforcePoolProviderOidcClientSecretValue:WorkforcePoolProviderOidcClientSecretValue": {
                "plainText": "plain_text"
            },
            "gcp:iam/WorkforcePoolProviderOidcWebSsoConfig:WorkforcePoolProviderOidcWebSsoConfig": {
                "assertionClaimsBehavior": "assertion_claims_behavior",
                "responseType": "response_type"
            },
            "gcp:iam/WorkforcePoolProviderSaml:WorkforcePoolProviderSaml": {
                "idpMetadataXml": "idp_metadata_xml"
            },
            "gcp:iam/WorkloadIdentityPoolProviderAws:WorkloadIdentityPoolProviderAws": {
                "accountId": "account_id"
            },
            "gcp:iam/WorkloadIdentityPoolProviderOidc:WorkloadIdentityPoolProviderOidc": {
                "allowedAudiences": "allowed_audiences",
                "issuerUri": "issuer_uri",
                "jwksJson": "jwks_json"
            },
            "gcp:iam/accessBoundaryPolicy:AccessBoundaryPolicy": {
                "displayName": "display_name"
            },
            "gcp:iam/denyPolicy:DenyPolicy": {
                "displayName": "display_name"
            },
            "gcp:iam/getRule:getRule": {
                "includedPermissions": "included_permissions"
            },
            "gcp:iam/getTestablePermissions:getTestablePermissions": {
                "customSupportLevel": "custom_support_level",
                "fullResourceName": "full_resource_name"
            },
            "gcp:iam/getTestablePermissionsPermission:getTestablePermissionsPermission": {
                "apiDisabled": "api_disabled",
                "customSupportLevel": "custom_support_level"
            },
            "gcp:iam/getWorkloadIdentityPool:getWorkloadIdentityPool": {
                "displayName": "display_name",
                "workloadIdentityPoolId": "workload_identity_pool_id"
            },
            "gcp:iam/getWorkloadIdentityPoolProvider:getWorkloadIdentityPoolProvider": {
                "attributeCondition": "attribute_condition",
                "attributeMapping": "attribute_mapping",
                "displayName": "display_name",
                "oidcs": "oidc",
                "workloadIdentityPoolId": "workload_identity_pool_id",
                "workloadIdentityPoolProviderId": "workload_identity_pool_provider_id"
            },
            "gcp:iam/getWorkloadIdentityPoolProviderAw:getWorkloadIdentityPoolProviderAw": {
                "accountId": "account_id"
            },
            "gcp:iam/getWorkloadIdentityPoolProviderOidc:getWorkloadIdentityPoolProviderOidc": {
                "allowedAudiences": "allowed_audiences",
                "issuerUri": "issuer_uri",
                "jwksJson": "jwks_json"
            },
            "gcp:iam/workforcePool:WorkforcePool": {
                "displayName": "display_name",
                "sessionDuration": "session_duration",
                "workforcePoolId": "workforce_pool_id"
            },
            "gcp:iam/workforcePoolProvider:WorkforcePoolProvider": {
                "attributeCondition": "attribute_condition",
                "attributeMapping": "attribute_mapping",
                "displayName": "display_name",
                "providerId": "provider_id",
                "workforcePoolId": "workforce_pool_id"
            },
            "gcp:iam/workloadIdentityPool:WorkloadIdentityPool": {
                "displayName": "display_name",
                "workloadIdentityPoolId": "workload_identity_pool_id"
            },
            "gcp:iam/workloadIdentityPoolProvider:WorkloadIdentityPoolProvider": {
                "attributeCondition": "attribute_condition",
                "attributeMapping": "attribute_mapping",
                "displayName": "display_name",
                "workloadIdentityPoolId": "workload_identity_pool_id",
                "workloadIdentityPoolProviderId": "workload_identity_pool_provider_id"
            },
            "gcp:iap/appEngineServiceIamBinding:AppEngineServiceIamBinding": {
                "appId": "app_id"
            },
            "gcp:iap/appEngineServiceIamMember:AppEngineServiceIamMember": {
                "appId": "app_id"
            },
            "gcp:iap/appEngineServiceIamPolicy:AppEngineServiceIamPolicy": {
                "appId": "app_id",
                "policyData": "policy_data"
            },
            "gcp:iap/appEngineVersionIamBinding:AppEngineVersionIamBinding": {
                "appId": "app_id",
                "versionId": "version_id"
            },
            "gcp:iap/appEngineVersionIamMember:AppEngineVersionIamMember": {
                "appId": "app_id",
                "versionId": "version_id"
            },
            "gcp:iap/appEngineVersionIamPolicy:AppEngineVersionIamPolicy": {
                "appId": "app_id",
                "policyData": "policy_data",
                "versionId": "version_id"
            },
            "gcp:iap/brand:Brand": {
                "applicationTitle": "application_title",
                "orgInternalOnly": "org_internal_only",
                "supportEmail": "support_email"
            },
            "gcp:iap/client:Client": {
                "clientId": "client_id",
                "displayName": "display_name"
            },
            "gcp:iap/getAppEngineServiceIamPolicy:getAppEngineServiceIamPolicy": {
                "appId": "app_id",
                "policyData": "policy_data"
            },
            "gcp:iap/getAppEngineVersionIamPolicy:getAppEngineVersionIamPolicy": {
                "appId": "app_id",
                "policyData": "policy_data",
                "versionId": "version_id"
            },
            "gcp:iap/getClient:getClient": {
                "clientId": "client_id",
                "displayName": "display_name"
            },
            "gcp:iap/getTunnelIamPolicy:getTunnelIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:iap/getTunnelInstanceIamPolicy:getTunnelInstanceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:iap/getWebBackendServiceIamPolicy:getWebBackendServiceIamPolicy": {
                "policyData": "policy_data",
                "webBackendService": "web_backend_service"
            },
            "gcp:iap/getWebIamPolicy:getWebIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:iap/getWebRegionBackendServiceIamPolicy:getWebRegionBackendServiceIamPolicy": {
                "policyData": "policy_data",
                "webRegionBackendService": "web_region_backend_service"
            },
            "gcp:iap/getWebTypeAppEngineIamPolicy:getWebTypeAppEngineIamPolicy": {
                "appId": "app_id",
                "policyData": "policy_data"
            },
            "gcp:iap/getWebTypeComputeIamPolicy:getWebTypeComputeIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:iap/tunnelIamPolicy:TunnelIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:iap/tunnelInstanceIAMPolicy:TunnelInstanceIAMPolicy": {
                "policyData": "policy_data"
            },
            "gcp:iap/webBackendServiceIamBinding:WebBackendServiceIamBinding": {
                "webBackendService": "web_backend_service"
            },
            "gcp:iap/webBackendServiceIamMember:WebBackendServiceIamMember": {
                "webBackendService": "web_backend_service"
            },
            "gcp:iap/webBackendServiceIamPolicy:WebBackendServiceIamPolicy": {
                "policyData": "policy_data",
                "webBackendService": "web_backend_service"
            },
            "gcp:iap/webIamPolicy:WebIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:iap/webRegionBackendServiceIamBinding:WebRegionBackendServiceIamBinding": {
                "webRegionBackendService": "web_region_backend_service"
            },
            "gcp:iap/webRegionBackendServiceIamMember:WebRegionBackendServiceIamMember": {
                "webRegionBackendService": "web_region_backend_service"
            },
            "gcp:iap/webRegionBackendServiceIamPolicy:WebRegionBackendServiceIamPolicy": {
                "policyData": "policy_data",
                "webRegionBackendService": "web_region_backend_service"
            },
            "gcp:iap/webTypeAppEngingIamBinding:WebTypeAppEngingIamBinding": {
                "appId": "app_id"
            },
            "gcp:iap/webTypeAppEngingIamMember:WebTypeAppEngingIamMember": {
                "appId": "app_id"
            },
            "gcp:iap/webTypeAppEngingIamPolicy:WebTypeAppEngingIamPolicy": {
                "appId": "app_id",
                "policyData": "policy_data"
            },
            "gcp:iap/webTypeComputeIamPolicy:WebTypeComputeIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:identityplatform/InboundSamlConfigIdpConfig:InboundSamlConfigIdpConfig": {
                "idpCertificates": "idp_certificates",
                "idpEntityId": "idp_entity_id",
                "signRequest": "sign_request",
                "ssoUrl": "sso_url"
            },
            "gcp:identityplatform/InboundSamlConfigIdpConfigIdpCertificate:InboundSamlConfigIdpConfigIdpCertificate": {
                "x509Certificate": "x509_certificate"
            },
            "gcp:identityplatform/InboundSamlConfigSpConfig:InboundSamlConfigSpConfig": {
                "callbackUri": "callback_uri",
                "spCertificates": "sp_certificates",
                "spEntityId": "sp_entity_id"
            },
            "gcp:identityplatform/InboundSamlConfigSpConfigSpCertificate:InboundSamlConfigSpConfigSpCertificate": {
                "x509Certificate": "x509_certificate"
            },
            "gcp:identityplatform/ProjectDefaultConfigSignIn:ProjectDefaultConfigSignIn": {
                "allowDuplicateEmails": "allow_duplicate_emails",
                "hashConfigs": "hash_config",
                "phoneNumber": "phone_number"
            },
            "gcp:identityplatform/ProjectDefaultConfigSignInEmail:ProjectDefaultConfigSignInEmail": {
                "passwordRequired": "password_required"
            },
            "gcp:identityplatform/ProjectDefaultConfigSignInHashConfig:ProjectDefaultConfigSignInHashConfig": {
                "memoryCost": "memory_cost",
                "saltSeparator": "salt_separator",
                "signerKey": "signer_key"
            },
            "gcp:identityplatform/ProjectDefaultConfigSignInPhoneNumber:ProjectDefaultConfigSignInPhoneNumber": {
                "testPhoneNumbers": "test_phone_numbers"
            },
            "gcp:identityplatform/TenantInboundSamlConfigIdpConfig:TenantInboundSamlConfigIdpConfig": {
                "idpCertificates": "idp_certificates",
                "idpEntityId": "idp_entity_id",
                "signRequest": "sign_request",
                "ssoUrl": "sso_url"
            },
            "gcp:identityplatform/TenantInboundSamlConfigIdpConfigIdpCertificate:TenantInboundSamlConfigIdpConfigIdpCertificate": {
                "x509Certificate": "x509_certificate"
            },
            "gcp:identityplatform/TenantInboundSamlConfigSpConfig:TenantInboundSamlConfigSpConfig": {
                "callbackUri": "callback_uri",
                "spCertificates": "sp_certificates",
                "spEntityId": "sp_entity_id"
            },
            "gcp:identityplatform/TenantInboundSamlConfigSpConfigSpCertificate:TenantInboundSamlConfigSpConfigSpCertificate": {
                "x509Certificate": "x509_certificate"
            },
            "gcp:identityplatform/config:Config": {
                "autodeleteAnonymousUsers": "autodelete_anonymous_users"
            },
            "gcp:identityplatform/defaultSupportedIdpConfig:DefaultSupportedIdpConfig": {
                "clientId": "client_id",
                "clientSecret": "client_secret",
                "idpId": "idp_id"
            },
            "gcp:identityplatform/inboundSamlConfig:InboundSamlConfig": {
                "displayName": "display_name",
                "idpConfig": "idp_config",
                "spConfig": "sp_config"
            },
            "gcp:identityplatform/oauthIdpConfig:OauthIdpConfig": {
                "clientId": "client_id",
                "clientSecret": "client_secret",
                "displayName": "display_name"
            },
            "gcp:identityplatform/projectDefaultConfig:ProjectDefaultConfig": {
                "signIn": "sign_in"
            },
            "gcp:identityplatform/tenant:Tenant": {
                "allowPasswordSignup": "allow_password_signup",
                "disableAuth": "disable_auth",
                "displayName": "display_name",
                "enableEmailLinkSignin": "enable_email_link_signin"
            },
            "gcp:identityplatform/tenantDefaultSupportedIdpConfig:TenantDefaultSupportedIdpConfig": {
                "clientId": "client_id",
                "clientSecret": "client_secret",
                "idpId": "idp_id"
            },
            "gcp:identityplatform/tenantInboundSamlConfig:TenantInboundSamlConfig": {
                "displayName": "display_name",
                "idpConfig": "idp_config",
                "spConfig": "sp_config"
            },
            "gcp:identityplatform/tenantOauthIdpConfig:TenantOauthIdpConfig": {
                "clientId": "client_id",
                "clientSecret": "client_secret",
                "displayName": "display_name"
            },
            "gcp:index/ProviderBatching:ProviderBatching": {
                "enableBatching": "enable_batching",
                "sendAfter": "send_after"
            },
            "gcp:index:Provider": {
                "accessApprovalCustomEndpoint": "access_approval_custom_endpoint",
                "accessContextManagerCustomEndpoint": "access_context_manager_custom_endpoint",
                "accessToken": "access_token",
                "activeDirectoryCustomEndpoint": "active_directory_custom_endpoint",
                "alloydbCustomEndpoint": "alloydb_custom_endpoint",
                "apiGatewayCustomEndpoint": "api_gateway_custom_endpoint",
                "apigeeCustomEndpoint": "apigee_custom_endpoint",
                "apikeysCustomEndpoint": "apikeys_custom_endpoint",
                "appEngineCustomEndpoint": "app_engine_custom_endpoint",
                "artifactRegistryCustomEndpoint": "artifact_registry_custom_endpoint",
                "assuredWorkloadsCustomEndpoint": "assured_workloads_custom_endpoint",
                "beyondcorpCustomEndpoint": "beyondcorp_custom_endpoint",
                "bigQueryCustomEndpoint": "big_query_custom_endpoint",
                "bigqueryAnalyticsHubCustomEndpoint": "bigquery_analytics_hub_custom_endpoint",
                "bigqueryConnectionCustomEndpoint": "bigquery_connection_custom_endpoint",
                "bigqueryDataTransferCustomEndpoint": "bigquery_data_transfer_custom_endpoint",
                "bigqueryDatapolicyCustomEndpoint": "bigquery_datapolicy_custom_endpoint",
                "bigqueryReservationCustomEndpoint": "bigquery_reservation_custom_endpoint",
                "bigtableCustomEndpoint": "bigtable_custom_endpoint",
                "billingCustomEndpoint": "billing_custom_endpoint",
                "billingProject": "billing_project",
                "binaryAuthorizationCustomEndpoint": "binary_authorization_custom_endpoint",
                "certificateManagerCustomEndpoint": "certificate_manager_custom_endpoint",
                "cloudAssetCustomEndpoint": "cloud_asset_custom_endpoint",
                "cloudBillingCustomEndpoint": "cloud_billing_custom_endpoint",
                "cloudBuildCustomEndpoint": "cloud_build_custom_endpoint",
                "cloudBuildWorkerPoolCustomEndpoint": "cloud_build_worker_pool_custom_endpoint",
                "cloudFunctionsCustomEndpoint": "cloud_functions_custom_endpoint",
                "cloudIdentityCustomEndpoint": "cloud_identity_custom_endpoint",
                "cloudIdsCustomEndpoint": "cloud_ids_custom_endpoint",
                "cloudIotCustomEndpoint": "cloud_iot_custom_endpoint",
                "cloudResourceManagerCustomEndpoint": "cloud_resource_manager_custom_endpoint",
                "cloudRunCustomEndpoint": "cloud_run_custom_endpoint",
                "cloudRunV2CustomEndpoint": "cloud_run_v2_custom_endpoint",
                "cloudSchedulerCustomEndpoint": "cloud_scheduler_custom_endpoint",
                "cloudTasksCustomEndpoint": "cloud_tasks_custom_endpoint",
                "cloudbuildv2CustomEndpoint": "cloudbuildv2_custom_endpoint",
                "clouddeployCustomEndpoint": "clouddeploy_custom_endpoint",
                "cloudfunctions2CustomEndpoint": "cloudfunctions2_custom_endpoint",
                "composerCustomEndpoint": "composer_custom_endpoint",
                "computeCustomEndpoint": "compute_custom_endpoint",
                "containerAnalysisCustomEndpoint": "container_analysis_custom_endpoint",
                "containerAttachedCustomEndpoint": "container_attached_custom_endpoint",
                "containerAwsCustomEndpoint": "container_aws_custom_endpoint",
                "containerAzureCustomEndpoint": "container_azure_custom_endpoint",
                "containerCustomEndpoint": "container_custom_endpoint",
                "dataCatalogCustomEndpoint": "data_catalog_custom_endpoint",
                "dataFusionCustomEndpoint": "data_fusion_custom_endpoint",
                "dataLossPreventionCustomEndpoint": "data_loss_prevention_custom_endpoint",
                "databaseMigrationServiceCustomEndpoint": "database_migration_service_custom_endpoint",
                "dataflowCustomEndpoint": "dataflow_custom_endpoint",
                "dataformCustomEndpoint": "dataform_custom_endpoint",
                "dataplexCustomEndpoint": "dataplex_custom_endpoint",
                "dataprocCustomEndpoint": "dataproc_custom_endpoint",
                "dataprocMetastoreCustomEndpoint": "dataproc_metastore_custom_endpoint",
                "datastoreCustomEndpoint": "datastore_custom_endpoint",
                "datastreamCustomEndpoint": "datastream_custom_endpoint",
                "deploymentManagerCustomEndpoint": "deployment_manager_custom_endpoint",
                "dialogflowCustomEndpoint": "dialogflow_custom_endpoint",
                "dialogflowCxCustomEndpoint": "dialogflow_cx_custom_endpoint",
                "disableGooglePartnerName": "disable_google_partner_name",
                "dnsCustomEndpoint": "dns_custom_endpoint",
                "documentAiCustomEndpoint": "document_ai_custom_endpoint",
                "essentialContactsCustomEndpoint": "essential_contacts_custom_endpoint",
                "eventarcCustomEndpoint": "eventarc_custom_endpoint",
                "filestoreCustomEndpoint": "filestore_custom_endpoint",
                "firebaseCustomEndpoint": "firebase_custom_endpoint",
                "firebaseDatabaseCustomEndpoint": "firebase_database_custom_endpoint",
                "firebaseExtensionsCustomEndpoint": "firebase_extensions_custom_endpoint",
                "firebaseHostingCustomEndpoint": "firebase_hosting_custom_endpoint",
                "firebaseStorageCustomEndpoint": "firebase_storage_custom_endpoint",
                "firebaserulesCustomEndpoint": "firebaserules_custom_endpoint",
                "firestoreCustomEndpoint": "firestore_custom_endpoint",
                "gameServicesCustomEndpoint": "game_services_custom_endpoint",
                "gkeBackupCustomEndpoint": "gke_backup_custom_endpoint",
                "gkeHub2CustomEndpoint": "gke_hub2_custom_endpoint",
                "gkeHubCustomEndpoint": "gke_hub_custom_endpoint",
                "gkehubFeatureCustomEndpoint": "gkehub_feature_custom_endpoint",
                "gkeonpremCustomEndpoint": "gkeonprem_custom_endpoint",
                "googlePartnerName": "google_partner_name",
                "healthcareCustomEndpoint": "healthcare_custom_endpoint",
                "iam2CustomEndpoint": "iam2_custom_endpoint",
                "iamBetaCustomEndpoint": "iam_beta_custom_endpoint",
                "iamCredentialsCustomEndpoint": "iam_credentials_custom_endpoint",
                "iamCustomEndpoint": "iam_custom_endpoint",
                "iamWorkforcePoolCustomEndpoint": "iam_workforce_pool_custom_endpoint",
                "iapCustomEndpoint": "iap_custom_endpoint",
                "identityPlatformCustomEndpoint": "identity_platform_custom_endpoint",
                "impersonateServiceAccount": "impersonate_service_account",
                "impersonateServiceAccountDelegates": "impersonate_service_account_delegates",
                "kmsCustomEndpoint": "kms_custom_endpoint",
                "loggingCustomEndpoint": "logging_custom_endpoint",
                "lookerCustomEndpoint": "looker_custom_endpoint",
                "memcacheCustomEndpoint": "memcache_custom_endpoint",
                "mlEngineCustomEndpoint": "ml_engine_custom_endpoint",
                "monitoringCustomEndpoint": "monitoring_custom_endpoint",
                "networkConnectivityCustomEndpoint": "network_connectivity_custom_endpoint",
                "networkManagementCustomEndpoint": "network_management_custom_endpoint",
                "networkSecurityCustomEndpoint": "network_security_custom_endpoint",
                "networkServicesCustomEndpoint": "network_services_custom_endpoint",
                "notebooksCustomEndpoint": "notebooks_custom_endpoint",
                "orgPolicyCustomEndpoint": "org_policy_custom_endpoint",
                "osConfigCustomEndpoint": "os_config_custom_endpoint",
                "osLoginCustomEndpoint": "os_login_custom_endpoint",
                "privatecaCustomEndpoint": "privateca_custom_endpoint",
                "publicCaCustomEndpoint": "public_ca_custom_endpoint",
                "pubsubCustomEndpoint": "pubsub_custom_endpoint",
                "pubsubLiteCustomEndpoint": "pubsub_lite_custom_endpoint",
                "recaptchaEnterpriseCustomEndpoint": "recaptcha_enterprise_custom_endpoint",
                "redisCustomEndpoint": "redis_custom_endpoint",
                "requestReason": "request_reason",
                "requestTimeout": "request_timeout",
                "resourceManagerCustomEndpoint": "resource_manager_custom_endpoint",
                "resourceManagerV3CustomEndpoint": "resource_manager_v3_custom_endpoint",
                "runtimeConfigCustomEndpoint": "runtime_config_custom_endpoint",
                "runtimeconfigCustomEndpoint": "runtimeconfig_custom_endpoint",
                "secretManagerCustomEndpoint": "secret_manager_custom_endpoint",
                "securityCenterCustomEndpoint": "security_center_custom_endpoint",
                "securityScannerCustomEndpoint": "security_scanner_custom_endpoint",
                "serviceDirectoryCustomEndpoint": "service_directory_custom_endpoint",
                "serviceManagementCustomEndpoint": "service_management_custom_endpoint",
                "serviceNetworkingCustomEndpoint": "service_networking_custom_endpoint",
                "serviceUsageCustomEndpoint": "service_usage_custom_endpoint",
                "sourceRepoCustomEndpoint": "source_repo_custom_endpoint",
                "spannerCustomEndpoint": "spanner_custom_endpoint",
                "sqlCustomEndpoint": "sql_custom_endpoint",
                "storageCustomEndpoint": "storage_custom_endpoint",
                "storageTransferCustomEndpoint": "storage_transfer_custom_endpoint",
                "tagsCustomEndpoint": "tags_custom_endpoint",
                "tagsLocationCustomEndpoint": "tags_location_custom_endpoint",
                "tpuCustomEndpoint": "tpu_custom_endpoint",
                "userProjectOverride": "user_project_override",
                "vertexAiCustomEndpoint": "vertex_ai_custom_endpoint",
                "vmwareengineCustomEndpoint": "vmwareengine_custom_endpoint",
                "vpcAccessCustomEndpoint": "vpc_access_custom_endpoint",
                "workflowsCustomEndpoint": "workflows_custom_endpoint",
                "workstationsCustomEndpoint": "workstations_custom_endpoint"
            },
            "gcp:iot/DeviceConfig:DeviceConfig": {
                "binaryData": "binary_data",
                "cloudUpdateTime": "cloud_update_time",
                "deviceAckTime": "device_ack_time"
            },
            "gcp:iot/DeviceCredential:DeviceCredential": {
                "expirationTime": "expiration_time",
                "publicKey": "public_key"
            },
            "gcp:iot/DeviceGatewayConfig:DeviceGatewayConfig": {
                "gatewayAuthMethod": "gateway_auth_method",
                "gatewayType": "gateway_type",
                "lastAccessedGatewayId": "last_accessed_gateway_id",
                "lastAccessedGatewayTime": "last_accessed_gateway_time"
            },
            "gcp:iot/DeviceState:DeviceState": {
                "binaryData": "binary_data",
                "updateTime": "update_time"
            },
            "gcp:iot/RegistryCredential:RegistryCredential": {
                "publicKeyCertificate": "public_key_certificate"
            },
            "gcp:iot/RegistryEventNotificationConfigItem:RegistryEventNotificationConfigItem": {
                "pubsubTopicName": "pubsub_topic_name",
                "subfolderMatches": "subfolder_matches"
            },
            "gcp:iot/device:Device": {
                "configs": "config",
                "gatewayConfig": "gateway_config",
                "lastConfigAckTime": "last_config_ack_time",
                "lastConfigSendTime": "last_config_send_time",
                "lastErrorStatuses": "last_error_status",
                "lastErrorTime": "last_error_time",
                "lastEventTime": "last_event_time",
                "lastHeartbeatTime": "last_heartbeat_time",
                "lastStateTime": "last_state_time",
                "logLevel": "log_level",
                "numId": "num_id",
                "states": "state"
            },
            "gcp:iot/getRegistryIamPolicy:getRegistryIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:iot/registry:Registry": {
                "eventNotificationConfigs": "event_notification_configs",
                "httpConfig": "http_config",
                "logLevel": "log_level",
                "mqttConfig": "mqtt_config",
                "stateNotificationConfig": "state_notification_config"
            },
            "gcp:iot/registryIamPolicy:RegistryIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:kms/CryptoKeyVersionAttestation:CryptoKeyVersionAttestation": {
                "certChains": "cert_chains",
                "externalProtectionLevelOptions": "external_protection_level_options"
            },
            "gcp:kms/CryptoKeyVersionAttestationCertChains:CryptoKeyVersionAttestationCertChains": {
                "caviumCerts": "cavium_certs",
                "googleCardCerts": "google_card_certs",
                "googlePartitionCerts": "google_partition_certs"
            },
            "gcp:kms/CryptoKeyVersionAttestationExternalProtectionLevelOptions:CryptoKeyVersionAttestationExternalProtectionLevelOptions": {
                "ekmConnectionKeyPath": "ekm_connection_key_path",
                "externalKeyUri": "external_key_uri"
            },
            "gcp:kms/CryptoKeyVersionTemplate:CryptoKeyVersionTemplate": {
                "protectionLevel": "protection_level"
            },
            "gcp:kms/RegistryCredential:RegistryCredential": {
                "publicKeyCertificate": "public_key_certificate"
            },
            "gcp:kms/RegistryEventNotificationConfigItem:RegistryEventNotificationConfigItem": {
                "pubsubTopicName": "pubsub_topic_name",
                "subfolderMatches": "subfolder_matches"
            },
            "gcp:kms/cryptoKey:CryptoKey": {
                "destroyScheduledDuration": "destroy_scheduled_duration",
                "importOnly": "import_only",
                "keyRing": "key_ring",
                "rotationPeriod": "rotation_period",
                "skipInitialVersionCreation": "skip_initial_version_creation",
                "versionTemplate": "version_template"
            },
            "gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding": {
                "cryptoKeyId": "crypto_key_id"
            },
            "gcp:kms/cryptoKeyIAMMember:CryptoKeyIAMMember": {
                "cryptoKeyId": "crypto_key_id"
            },
            "gcp:kms/cryptoKeyIAMPolicy:CryptoKeyIAMPolicy": {
                "cryptoKeyId": "crypto_key_id",
                "policyData": "policy_data"
            },
            "gcp:kms/cryptoKeyVersion:CryptoKeyVersion": {
                "attestations": "attestation",
                "cryptoKey": "crypto_key",
                "generateTime": "generate_time",
                "protectionLevel": "protection_level"
            },
            "gcp:kms/getCryptoKeyIamPolicy:getCryptoKeyIamPolicy": {
                "cryptoKeyId": "crypto_key_id",
                "policyData": "policy_data"
            },
            "gcp:kms/getKMSCryptoKey:getKMSCryptoKey": {
                "destroyScheduledDuration": "destroy_scheduled_duration",
                "importOnly": "import_only",
                "keyRing": "key_ring",
                "rotationPeriod": "rotation_period",
                "skipInitialVersionCreation": "skip_initial_version_creation",
                "versionTemplates": "version_template"
            },
            "gcp:kms/getKMSCryptoKeyVersion:getKMSCryptoKeyVersion": {
                "cryptoKey": "crypto_key",
                "protectionLevel": "protection_level",
                "publicKeys": "public_key"
            },
            "gcp:kms/getKMSCryptoKeyVersionTemplate:getKMSCryptoKeyVersionTemplate": {
                "protectionLevel": "protection_level"
            },
            "gcp:kms/getKMSSecret:getKMSSecret": {
                "additionalAuthenticatedData": "additional_authenticated_data",
                "cryptoKey": "crypto_key"
            },
            "gcp:kms/getKMSSecretAsymmetric:getKMSSecretAsymmetric": {
                "cryptoKeyVersion": "crypto_key_version"
            },
            "gcp:kms/getKMSSecretCiphertext:getKMSSecretCiphertext": {
                "cryptoKey": "crypto_key"
            },
            "gcp:kms/getKeyRingIamPolicy:getKeyRingIamPolicy": {
                "keyRingId": "key_ring_id",
                "policyData": "policy_data"
            },
            "gcp:kms/keyRingIAMBinding:KeyRingIAMBinding": {
                "keyRingId": "key_ring_id"
            },
            "gcp:kms/keyRingIAMMember:KeyRingIAMMember": {
                "keyRingId": "key_ring_id"
            },
            "gcp:kms/keyRingIAMPolicy:KeyRingIAMPolicy": {
                "keyRingId": "key_ring_id",
                "policyData": "policy_data"
            },
            "gcp:kms/keyRingImportJob:KeyRingImportJob": {
                "attestations": "attestation",
                "expireTime": "expire_time",
                "importJobId": "import_job_id",
                "importMethod": "import_method",
                "keyRing": "key_ring",
                "protectionLevel": "protection_level",
                "publicKeys": "public_key"
            },
            "gcp:kms/registry:Registry": {
                "eventNotificationConfigs": "event_notification_configs",
                "httpConfig": "http_config",
                "logLevel": "log_level",
                "mqttConfig": "mqtt_config",
                "stateNotificationConfig": "state_notification_config"
            },
            "gcp:kms/secretCiphertext:SecretCiphertext": {
                "additionalAuthenticatedData": "additional_authenticated_data",
                "cryptoKey": "crypto_key"
            },
            "gcp:logging/BillingAccountBucketConfigCmekSettings:BillingAccountBucketConfigCmekSettings": {
                "kmsKeyName": "kms_key_name",
                "kmsKeyVersionName": "kms_key_version_name",
                "serviceAccountId": "service_account_id"
            },
            "gcp:logging/BillingAccountSinkBigqueryOptions:BillingAccountSinkBigqueryOptions": {
                "usePartitionedTables": "use_partitioned_tables"
            },
            "gcp:logging/FolderBucketConfigCmekSettings:FolderBucketConfigCmekSettings": {
                "kmsKeyName": "kms_key_name",
                "kmsKeyVersionName": "kms_key_version_name",
                "serviceAccountId": "service_account_id"
            },
            "gcp:logging/FolderSinkBigqueryOptions:FolderSinkBigqueryOptions": {
                "usePartitionedTables": "use_partitioned_tables"
            },
            "gcp:logging/LinkedDatasetBigqueryDataset:LinkedDatasetBigqueryDataset": {
                "datasetId": "dataset_id"
            },
            "gcp:logging/MetricBucketOptions:MetricBucketOptions": {
                "explicitBuckets": "explicit_buckets",
                "exponentialBuckets": "exponential_buckets",
                "linearBuckets": "linear_buckets"
            },
            "gcp:logging/MetricBucketOptionsExponentialBuckets:MetricBucketOptionsExponentialBuckets": {
                "growthFactor": "growth_factor",
                "numFiniteBuckets": "num_finite_buckets"
            },
            "gcp:logging/MetricBucketOptionsLinearBuckets:MetricBucketOptionsLinearBuckets": {
                "numFiniteBuckets": "num_finite_buckets"
            },
            "gcp:logging/MetricMetricDescriptor:MetricMetricDescriptor": {
                "displayName": "display_name",
                "metricKind": "metric_kind",
                "valueType": "value_type"
            },
            "gcp:logging/MetricMetricDescriptorLabel:MetricMetricDescriptorLabel": {
                "valueType": "value_type"
            },
            "gcp:logging/OrganizationBucketConfigCmekSettings:OrganizationBucketConfigCmekSettings": {
                "kmsKeyName": "kms_key_name",
                "kmsKeyVersionName": "kms_key_version_name",
                "serviceAccountId": "service_account_id"
            },
            "gcp:logging/OrganizationSinkBigqueryOptions:OrganizationSinkBigqueryOptions": {
                "usePartitionedTables": "use_partitioned_tables"
            },
            "gcp:logging/ProjectBucketConfigCmekSettings:ProjectBucketConfigCmekSettings": {
                "kmsKeyName": "kms_key_name",
                "kmsKeyVersionName": "kms_key_version_name",
                "serviceAccountId": "service_account_id"
            },
            "gcp:logging/ProjectSinkBigqueryOptions:ProjectSinkBigqueryOptions": {
                "usePartitionedTables": "use_partitioned_tables"
            },
            "gcp:logging/billingAccountBucketConfig:BillingAccountBucketConfig": {
                "billingAccount": "billing_account",
                "bucketId": "bucket_id",
                "cmekSettings": "cmek_settings",
                "lifecycleState": "lifecycle_state",
                "retentionDays": "retention_days"
            },
            "gcp:logging/billingAccountExclusion:BillingAccountExclusion": {
                "billingAccount": "billing_account"
            },
            "gcp:logging/billingAccountSink:BillingAccountSink": {
                "bigqueryOptions": "bigquery_options",
                "billingAccount": "billing_account",
                "writerIdentity": "writer_identity"
            },
            "gcp:logging/folderBucketConfig:FolderBucketConfig": {
                "bucketId": "bucket_id",
                "cmekSettings": "cmek_settings",
                "lifecycleState": "lifecycle_state",
                "retentionDays": "retention_days"
            },
            "gcp:logging/folderSink:FolderSink": {
                "bigqueryOptions": "bigquery_options",
                "includeChildren": "include_children",
                "writerIdentity": "writer_identity"
            },
            "gcp:logging/getProjectCmekSettings:getProjectCmekSettings": {
                "kmsKeyName": "kms_key_name",
                "kmsKeyVersionName": "kms_key_version_name",
                "serviceAccountId": "service_account_id"
            },
            "gcp:logging/getSink:getSink": {
                "bigqueryOptions": "bigquery_options",
                "writerIdentity": "writer_identity"
            },
            "gcp:logging/getSinkBigqueryOption:getSinkBigqueryOption": {
                "usePartitionedTables": "use_partitioned_tables"
            },
            "gcp:logging/linkedDataset:LinkedDataset": {
                "bigqueryDatasets": "bigquery_dataset",
                "createTime": "create_time",
                "lifecycleState": "lifecycle_state",
                "linkId": "link_id"
            },
            "gcp:logging/logView:LogView": {
                "createTime": "create_time",
                "updateTime": "update_time"
            },
            "gcp:logging/metric:Metric": {
                "bucketName": "bucket_name",
                "bucketOptions": "bucket_options",
                "labelExtractors": "label_extractors",
                "metricDescriptor": "metric_descriptor",
                "valueExtractor": "value_extractor"
            },
            "gcp:logging/organizationBucketConfig:OrganizationBucketConfig": {
                "bucketId": "bucket_id",
                "cmekSettings": "cmek_settings",
                "lifecycleState": "lifecycle_state",
                "retentionDays": "retention_days"
            },
            "gcp:logging/organizationExclusion:OrganizationExclusion": {
                "orgId": "org_id"
            },
            "gcp:logging/organizationSink:OrganizationSink": {
                "bigqueryOptions": "bigquery_options",
                "includeChildren": "include_children",
                "orgId": "org_id",
                "writerIdentity": "writer_identity"
            },
            "gcp:logging/projectBucketConfig:ProjectBucketConfig": {
                "bucketId": "bucket_id",
                "cmekSettings": "cmek_settings",
                "enableAnalytics": "enable_analytics",
                "lifecycleState": "lifecycle_state",
                "retentionDays": "retention_days"
            },
            "gcp:logging/projectSink:ProjectSink": {
                "bigqueryOptions": "bigquery_options",
                "uniqueWriterIdentity": "unique_writer_identity",
                "writerIdentity": "writer_identity"
            },
            "gcp:looker/InstanceAdminSettings:InstanceAdminSettings": {
                "allowedEmailDomains": "allowed_email_domains"
            },
            "gcp:looker/InstanceDenyMaintenancePeriod:InstanceDenyMaintenancePeriod": {
                "endDate": "end_date",
                "startDate": "start_date"
            },
            "gcp:looker/InstanceEncryptionConfig:InstanceEncryptionConfig": {
                "kmsKeyName": "kms_key_name",
                "kmsKeyNameVersion": "kms_key_name_version",
                "kmsKeyState": "kms_key_state"
            },
            "gcp:looker/InstanceMaintenanceWindow:InstanceMaintenanceWindow": {
                "dayOfWeek": "day_of_week",
                "startTime": "start_time"
            },
            "gcp:looker/InstanceOauthConfig:InstanceOauthConfig": {
                "clientId": "client_id",
                "clientSecret": "client_secret"
            },
            "gcp:looker/InstanceUserMetadata:InstanceUserMetadata": {
                "additionalDeveloperUserCount": "additional_developer_user_count",
                "additionalStandardUserCount": "additional_standard_user_count",
                "additionalViewerUserCount": "additional_viewer_user_count"
            },
            "gcp:looker/instance:Instance": {
                "adminSettings": "admin_settings",
                "consumerNetwork": "consumer_network",
                "createTime": "create_time",
                "denyMaintenancePeriod": "deny_maintenance_period",
                "egressPublicIp": "egress_public_ip",
                "encryptionConfig": "encryption_config",
                "ingressPrivateIp": "ingress_private_ip",
                "ingressPublicIp": "ingress_public_ip",
                "lookerUri": "looker_uri",
                "lookerVersion": "looker_version",
                "maintenanceWindow": "maintenance_window",
                "oauthConfig": "oauth_config",
                "platformEdition": "platform_edition",
                "privateIpEnabled": "private_ip_enabled",
                "publicIpEnabled": "public_ip_enabled",
                "reservedRange": "reserved_range",
                "updateTime": "update_time",
                "userMetadata": "user_metadata"
            },
            "gcp:memcache/InstanceMaintenancePolicy:InstanceMaintenancePolicy": {
                "createTime": "create_time",
                "updateTime": "update_time",
                "weeklyMaintenanceWindows": "weekly_maintenance_window"
            },
            "gcp:memcache/InstanceMaintenancePolicyWeeklyMaintenanceWindow:InstanceMaintenancePolicyWeeklyMaintenanceWindow": {
                "startTime": "start_time"
            },
            "gcp:memcache/InstanceMaintenanceSchedule:InstanceMaintenanceSchedule": {
                "endTime": "end_time",
                "scheduleDeadlineTime": "schedule_deadline_time",
                "startTime": "start_time"
            },
            "gcp:memcache/InstanceMemcacheNode:InstanceMemcacheNode": {
                "nodeId": "node_id"
            },
            "gcp:memcache/InstanceNodeConfig:InstanceNodeConfig": {
                "cpuCount": "cpu_count",
                "memorySizeMb": "memory_size_mb"
            },
            "gcp:memcache/instance:Instance": {
                "authorizedNetwork": "authorized_network",
                "createTime": "create_time",
                "discoveryEndpoint": "discovery_endpoint",
                "displayName": "display_name",
                "maintenancePolicy": "maintenance_policy",
                "maintenanceSchedules": "maintenance_schedule",
                "memcacheFullVersion": "memcache_full_version",
                "memcacheNodes": "memcache_nodes",
                "memcacheParameters": "memcache_parameters",
                "memcacheVersion": "memcache_version",
                "nodeConfig": "node_config",
                "nodeCount": "node_count"
            },
            "gcp:ml/engineModel:EngineModel": {
                "defaultVersion": "default_version",
                "onlinePredictionConsoleLogging": "online_prediction_console_logging",
                "onlinePredictionLogging": "online_prediction_logging"
            },
            "gcp:monitoring/AlertPolicyAlertStrategy:AlertPolicyAlertStrategy": {
                "autoClose": "auto_close",
                "notificationChannelStrategies": "notification_channel_strategy",
                "notificationRateLimit": "notification_rate_limit"
            },
            "gcp:monitoring/AlertPolicyAlertStrategyNotificationChannelStrategy:AlertPolicyAlertStrategyNotificationChannelStrategy": {
                "notificationChannelNames": "notification_channel_names",
                "renotifyInterval": "renotify_interval"
            },
            "gcp:monitoring/AlertPolicyCondition:AlertPolicyCondition": {
                "conditionAbsent": "condition_absent",
                "conditionMatchedLog": "condition_matched_log",
                "conditionMonitoringQueryLanguage": "condition_monitoring_query_language",
                "conditionPrometheusQueryLanguage": "condition_prometheus_query_language",
                "conditionThreshold": "condition_threshold",
                "displayName": "display_name"
            },
            "gcp:monitoring/AlertPolicyConditionConditionAbsentAggregation:AlertPolicyConditionConditionAbsentAggregation": {
                "alignmentPeriod": "alignment_period",
                "crossSeriesReducer": "cross_series_reducer",
                "groupByFields": "group_by_fields",
                "perSeriesAligner": "per_series_aligner"
            },
            "gcp:monitoring/AlertPolicyConditionConditionMatchedLog:AlertPolicyConditionConditionMatchedLog": {
                "labelExtractors": "label_extractors"
            },
            "gcp:monitoring/AlertPolicyConditionConditionMonitoringQueryLanguage:AlertPolicyConditionConditionMonitoringQueryLanguage": {
                "evaluationMissingData": "evaluation_missing_data"
            },
            "gcp:monitoring/AlertPolicyConditionConditionPrometheusQueryLanguage:AlertPolicyConditionConditionPrometheusQueryLanguage": {
                "alertRule": "alert_rule",
                "evaluationInterval": "evaluation_interval",
                "ruleGroup": "rule_group"
            },
            "gcp:monitoring/AlertPolicyConditionConditionThreshold:AlertPolicyConditionConditionThreshold": {
                "denominatorAggregations": "denominator_aggregations",
                "denominatorFilter": "denominator_filter",
                "evaluationMissingData": "evaluation_missing_data",
                "forecastOptions": "forecast_options",
                "thresholdValue": "threshold_value"
            },
            "gcp:monitoring/AlertPolicyConditionConditionThresholdAggregation:AlertPolicyConditionConditionThresholdAggregation": {
                "alignmentPeriod": "alignment_period",
                "crossSeriesReducer": "cross_series_reducer",
                "groupByFields": "group_by_fields",
                "perSeriesAligner": "per_series_aligner"
            },
            "gcp:monitoring/AlertPolicyConditionConditionThresholdDenominatorAggregation:AlertPolicyConditionConditionThresholdDenominatorAggregation": {
                "alignmentPeriod": "alignment_period",
                "crossSeriesReducer": "cross_series_reducer",
                "groupByFields": "group_by_fields",
                "perSeriesAligner": "per_series_aligner"
            },
            "gcp:monitoring/AlertPolicyConditionConditionThresholdForecastOptions:AlertPolicyConditionConditionThresholdForecastOptions": {
                "forecastHorizon": "forecast_horizon"
            },
            "gcp:monitoring/AlertPolicyCreationRecord:AlertPolicyCreationRecord": {
                "mutateTime": "mutate_time",
                "mutatedBy": "mutated_by"
            },
            "gcp:monitoring/AlertPolicyDocumentation:AlertPolicyDocumentation": {
                "mimeType": "mime_type"
            },
            "gcp:monitoring/CustomServiceTelemetry:CustomServiceTelemetry": {
                "resourceName": "resource_name"
            },
            "gcp:monitoring/GenericServiceBasicService:GenericServiceBasicService": {
                "serviceLabels": "service_labels",
                "serviceType": "service_type"
            },
            "gcp:monitoring/GenericServiceTelemetry:GenericServiceTelemetry": {
                "resourceName": "resource_name"
            },
            "gcp:monitoring/MetricDescriptorLabel:MetricDescriptorLabel": {
                "valueType": "value_type"
            },
            "gcp:monitoring/MetricDescriptorMetadata:MetricDescriptorMetadata": {
                "ingestDelay": "ingest_delay",
                "samplePeriod": "sample_period"
            },
            "gcp:monitoring/NotificationChannelSensitiveLabels:NotificationChannelSensitiveLabels": {
                "authToken": "auth_token",
                "serviceKey": "service_key"
            },
            "gcp:monitoring/SloBasicSli:SloBasicSli": {
                "locations": "location",
                "methods": "method",
                "versions": "version"
            },
            "gcp:monitoring/SloRequestBasedSli:SloRequestBasedSli": {
                "distributionCut": "distribution_cut",
                "goodTotalRatio": "good_total_ratio"
            },
            "gcp:monitoring/SloRequestBasedSliDistributionCut:SloRequestBasedSliDistributionCut": {
                "distributionFilter": "distribution_filter"
            },
            "gcp:monitoring/SloRequestBasedSliGoodTotalRatio:SloRequestBasedSliGoodTotalRatio": {
                "badServiceFilter": "bad_service_filter",
                "goodServiceFilter": "good_service_filter",
                "totalServiceFilter": "total_service_filter"
            },
            "gcp:monitoring/SloWindowsBasedSli:SloWindowsBasedSli": {
                "goodBadMetricFilter": "good_bad_metric_filter",
                "goodTotalRatioThreshold": "good_total_ratio_threshold",
                "metricMeanInRange": "metric_mean_in_range",
                "metricSumInRange": "metric_sum_in_range",
                "windowPeriod": "window_period"
            },
            "gcp:monitoring/SloWindowsBasedSliGoodTotalRatioThreshold:SloWindowsBasedSliGoodTotalRatioThreshold": {
                "basicSliPerformance": "basic_sli_performance"
            },
            "gcp:monitoring/SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformance:SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformance": {
                "locations": "location",
                "methods": "method",
                "versions": "version"
            },
            "gcp:monitoring/SloWindowsBasedSliGoodTotalRatioThresholdPerformance:SloWindowsBasedSliGoodTotalRatioThresholdPerformance": {
                "distributionCut": "distribution_cut",
                "goodTotalRatio": "good_total_ratio"
            },
            "gcp:monitoring/SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCut:SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCut": {
                "distributionFilter": "distribution_filter"
            },
            "gcp:monitoring/SloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatio:SloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatio": {
                "badServiceFilter": "bad_service_filter",
                "goodServiceFilter": "good_service_filter",
                "totalServiceFilter": "total_service_filter"
            },
            "gcp:monitoring/SloWindowsBasedSliMetricMeanInRange:SloWindowsBasedSliMetricMeanInRange": {
                "timeSeries": "time_series"
            },
            "gcp:monitoring/SloWindowsBasedSliMetricSumInRange:SloWindowsBasedSliMetricSumInRange": {
                "timeSeries": "time_series"
            },
            "gcp:monitoring/UptimeCheckConfigContentMatcher:UptimeCheckConfigContentMatcher": {
                "jsonPathMatcher": "json_path_matcher"
            },
            "gcp:monitoring/UptimeCheckConfigContentMatcherJsonPathMatcher:UptimeCheckConfigContentMatcherJsonPathMatcher": {
                "jsonMatcher": "json_matcher",
                "jsonPath": "json_path"
            },
            "gcp:monitoring/UptimeCheckConfigHttpCheck:UptimeCheckConfigHttpCheck": {
                "acceptedResponseStatusCodes": "accepted_response_status_codes",
                "authInfo": "auth_info",
                "contentType": "content_type",
                "maskHeaders": "mask_headers",
                "requestMethod": "request_method",
                "useSsl": "use_ssl",
                "validateSsl": "validate_ssl"
            },
            "gcp:monitoring/UptimeCheckConfigHttpCheckAcceptedResponseStatusCode:UptimeCheckConfigHttpCheckAcceptedResponseStatusCode": {
                "statusClass": "status_class",
                "statusValue": "status_value"
            },
            "gcp:monitoring/UptimeCheckConfigResourceGroup:UptimeCheckConfigResourceGroup": {
                "groupId": "group_id",
                "resourceType": "resource_type"
            },
            "gcp:monitoring/alertPolicy:AlertPolicy": {
                "alertStrategy": "alert_strategy",
                "creationRecords": "creation_record",
                "displayName": "display_name",
                "notificationChannels": "notification_channels",
                "userLabels": "user_labels"
            },
            "gcp:monitoring/customService:CustomService": {
                "displayName": "display_name",
                "serviceId": "service_id",
                "userLabels": "user_labels"
            },
            "gcp:monitoring/dashboard:Dashboard": {
                "dashboardJson": "dashboard_json"
            },
            "gcp:monitoring/genericService:GenericService": {
                "basicService": "basic_service",
                "displayName": "display_name",
                "serviceId": "service_id",
                "telemetries": "telemetry",
                "userLabels": "user_labels"
            },
            "gcp:monitoring/getAppEngineService:getAppEngineService": {
                "displayName": "display_name",
                "moduleId": "module_id",
                "serviceId": "service_id",
                "telemetries": "telemetry",
                "userLabels": "user_labels"
            },
            "gcp:monitoring/getAppEngineServiceTelemetry:getAppEngineServiceTelemetry": {
                "resourceName": "resource_name"
            },
            "gcp:monitoring/getClusterIstioService:getClusterIstioService": {
                "clusterName": "cluster_name",
                "displayName": "display_name",
                "serviceId": "service_id",
                "serviceName": "service_name",
                "serviceNamespace": "service_namespace",
                "telemetries": "telemetry",
                "userLabels": "user_labels"
            },
            "gcp:monitoring/getClusterIstioServiceTelemetry:getClusterIstioServiceTelemetry": {
                "resourceName": "resource_name"
            },
            "gcp:monitoring/getIstioCanonicalService:getIstioCanonicalService": {
                "canonicalService": "canonical_service",
                "canonicalServiceNamespace": "canonical_service_namespace",
                "displayName": "display_name",
                "meshUid": "mesh_uid",
                "serviceId": "service_id",
                "telemetries": "telemetry",
                "userLabels": "user_labels"
            },
            "gcp:monitoring/getIstioCanonicalServiceTelemetry:getIstioCanonicalServiceTelemetry": {
                "resourceName": "resource_name"
            },
            "gcp:monitoring/getMeshIstioService:getMeshIstioService": {
                "displayName": "display_name",
                "meshUid": "mesh_uid",
                "serviceId": "service_id",
                "serviceName": "service_name",
                "serviceNamespace": "service_namespace",
                "telemetries": "telemetry",
                "userLabels": "user_labels"
            },
            "gcp:monitoring/getMeshIstioServiceTelemetry:getMeshIstioServiceTelemetry": {
                "resourceName": "resource_name"
            },
            "gcp:monitoring/getNotificationChannel:getNotificationChannel": {
                "displayName": "display_name",
                "forceDelete": "force_delete",
                "sensitiveLabels": "sensitive_labels",
                "userLabels": "user_labels",
                "verificationStatus": "verification_status"
            },
            "gcp:monitoring/getNotificationChannelSensitiveLabel:getNotificationChannelSensitiveLabel": {
                "authToken": "auth_token",
                "serviceKey": "service_key"
            },
            "gcp:monitoring/getSecretVersion:getSecretVersion": {
                "createTime": "create_time",
                "destroyTime": "destroy_time",
                "secretData": "secret_data"
            },
            "gcp:monitoring/getUptimeCheckIPs:getUptimeCheckIPs": {
                "uptimeCheckIps": "uptime_check_ips"
            },
            "gcp:monitoring/getUptimeCheckIPsUptimeCheckIp:getUptimeCheckIPsUptimeCheckIp": {
                "ipAddress": "ip_address"
            },
            "gcp:monitoring/group:Group": {
                "displayName": "display_name",
                "isCluster": "is_cluster",
                "parentName": "parent_name"
            },
            "gcp:monitoring/metricDescriptor:MetricDescriptor": {
                "displayName": "display_name",
                "launchStage": "launch_stage",
                "metricKind": "metric_kind",
                "monitoredResourceTypes": "monitored_resource_types",
                "valueType": "value_type"
            },
            "gcp:monitoring/monitoredProject:MonitoredProject": {
                "createTime": "create_time",
                "metricsScope": "metrics_scope"
            },
            "gcp:monitoring/notificationChannel:NotificationChannel": {
                "displayName": "display_name",
                "forceDelete": "force_delete",
                "sensitiveLabels": "sensitive_labels",
                "userLabels": "user_labels",
                "verificationStatus": "verification_status"
            },
            "gcp:monitoring/slo:Slo": {
                "basicSli": "basic_sli",
                "calendarPeriod": "calendar_period",
                "displayName": "display_name",
                "requestBasedSli": "request_based_sli",
                "rollingPeriodDays": "rolling_period_days",
                "sloId": "slo_id",
                "userLabels": "user_labels",
                "windowsBasedSli": "windows_based_sli"
            },
            "gcp:monitoring/uptimeCheckConfig:UptimeCheckConfig": {
                "checkerType": "checker_type",
                "contentMatchers": "content_matchers",
                "displayName": "display_name",
                "httpCheck": "http_check",
                "monitoredResource": "monitored_resource",
                "resourceGroup": "resource_group",
                "selectedRegions": "selected_regions",
                "tcpCheck": "tcp_check",
                "uptimeCheckId": "uptime_check_id"
            },
            "gcp:networkconnectivity/SpokeLinkedInterconnectAttachments:SpokeLinkedInterconnectAttachments": {
                "siteToSiteDataTransfer": "site_to_site_data_transfer"
            },
            "gcp:networkconnectivity/SpokeLinkedRouterApplianceInstances:SpokeLinkedRouterApplianceInstances": {
                "siteToSiteDataTransfer": "site_to_site_data_transfer"
            },
            "gcp:networkconnectivity/SpokeLinkedRouterApplianceInstancesInstance:SpokeLinkedRouterApplianceInstancesInstance": {
                "ipAddress": "ip_address",
                "virtualMachine": "virtual_machine"
            },
            "gcp:networkconnectivity/SpokeLinkedVpnTunnels:SpokeLinkedVpnTunnels": {
                "siteToSiteDataTransfer": "site_to_site_data_transfer"
            },
            "gcp:networkconnectivity/hub:Hub": {
                "createTime": "create_time",
                "routingVpcs": "routing_vpcs",
                "uniqueId": "unique_id",
                "updateTime": "update_time"
            },
            "gcp:networkconnectivity/spoke:Spoke": {
                "createTime": "create_time",
                "linkedInterconnectAttachments": "linked_interconnect_attachments",
                "linkedRouterApplianceInstances": "linked_router_appliance_instances",
                "linkedVpnTunnels": "linked_vpn_tunnels",
                "uniqueId": "unique_id",
                "updateTime": "update_time"
            },
            "gcp:networkmanagement/ConnectivityTestDestination:ConnectivityTestDestination": {
                "ipAddress": "ip_address",
                "projectId": "project_id"
            },
            "gcp:networkmanagement/ConnectivityTestSource:ConnectivityTestSource": {
                "ipAddress": "ip_address",
                "networkType": "network_type",
                "projectId": "project_id"
            },
            "gcp:networkmanagement/connectivityTest:ConnectivityTest": {
                "relatedProjects": "related_projects"
            },
            "gcp:networksecurity/AuthorizationPolicyRuleDestination:AuthorizationPolicyRuleDestination": {
                "httpHeaderMatch": "http_header_match"
            },
            "gcp:networksecurity/AuthorizationPolicyRuleDestinationHttpHeaderMatch:AuthorizationPolicyRuleDestinationHttpHeaderMatch": {
                "headerName": "header_name",
                "regexMatch": "regex_match"
            },
            "gcp:networksecurity/AuthorizationPolicyRuleSource:AuthorizationPolicyRuleSource": {
                "ipBlocks": "ip_blocks"
            },
            "gcp:networksecurity/ClientTlsPolicyClientCertificate:ClientTlsPolicyClientCertificate": {
                "certificateProviderInstance": "certificate_provider_instance",
                "grpcEndpoint": "grpc_endpoint"
            },
            "gcp:networksecurity/ClientTlsPolicyClientCertificateCertificateProviderInstance:ClientTlsPolicyClientCertificateCertificateProviderInstance": {
                "pluginInstance": "plugin_instance"
            },
            "gcp:networksecurity/ClientTlsPolicyClientCertificateGrpcEndpoint:ClientTlsPolicyClientCertificateGrpcEndpoint": {
                "targetUri": "target_uri"
            },
            "gcp:networksecurity/ClientTlsPolicyServerValidationCa:ClientTlsPolicyServerValidationCa": {
                "certificateProviderInstance": "certificate_provider_instance",
                "grpcEndpoint": "grpc_endpoint"
            },
            "gcp:networksecurity/ClientTlsPolicyServerValidationCaCertificateProviderInstance:ClientTlsPolicyServerValidationCaCertificateProviderInstance": {
                "pluginInstance": "plugin_instance"
            },
            "gcp:networksecurity/ClientTlsPolicyServerValidationCaGrpcEndpoint:ClientTlsPolicyServerValidationCaGrpcEndpoint": {
                "targetUri": "target_uri"
            },
            "gcp:networksecurity/ServerTlsPolicyMtlsPolicy:ServerTlsPolicyMtlsPolicy": {
                "clientValidationCas": "client_validation_ca",
                "clientValidationMode": "client_validation_mode",
                "clientValidationTrustConfig": "client_validation_trust_config"
            },
            "gcp:networksecurity/ServerTlsPolicyMtlsPolicyClientValidationCa:ServerTlsPolicyMtlsPolicyClientValidationCa": {
                "certificateProviderInstance": "certificate_provider_instance",
                "grpcEndpoint": "grpc_endpoint"
            },
            "gcp:networksecurity/ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance:ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance": {
                "pluginInstance": "plugin_instance"
            },
            "gcp:networksecurity/ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint:ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint": {
                "targetUri": "target_uri"
            },
            "gcp:networksecurity/ServerTlsPolicyServerCertificate:ServerTlsPolicyServerCertificate": {
                "certificateProviderInstance": "certificate_provider_instance",
                "grpcEndpoint": "grpc_endpoint"
            },
            "gcp:networksecurity/ServerTlsPolicyServerCertificateCertificateProviderInstance:ServerTlsPolicyServerCertificateCertificateProviderInstance": {
                "pluginInstance": "plugin_instance"
            },
            "gcp:networksecurity/ServerTlsPolicyServerCertificateGrpcEndpoint:ServerTlsPolicyServerCertificateGrpcEndpoint": {
                "targetUri": "target_uri"
            },
            "gcp:networksecurity/addressGroup:AddressGroup": {
                "createTime": "create_time",
                "updateTime": "update_time"
            },
            "gcp:networksecurity/authorizationPolicy:AuthorizationPolicy": {
                "createTime": "create_time",
                "updateTime": "update_time"
            },
            "gcp:networksecurity/clientTlsPolicy:ClientTlsPolicy": {
                "clientCertificate": "client_certificate",
                "createTime": "create_time",
                "serverValidationCas": "server_validation_ca",
                "updateTime": "update_time"
            },
            "gcp:networksecurity/gatewaySecurityPolicy:GatewaySecurityPolicy": {
                "createTime": "create_time",
                "selfLink": "self_link",
                "tlsInspectionPolicy": "tls_inspection_policy",
                "updateTime": "update_time"
            },
            "gcp:networksecurity/gatewaySecurityPolicyRule:GatewaySecurityPolicyRule": {
                "applicationMatcher": "application_matcher",
                "basicProfile": "basic_profile",
                "createTime": "create_time",
                "gatewaySecurityPolicy": "gateway_security_policy",
                "selfLink": "self_link",
                "sessionMatcher": "session_matcher",
                "tlsInspectionEnabled": "tls_inspection_enabled",
                "updateTime": "update_time"
            },
            "gcp:networksecurity/serverTlsPolicy:ServerTlsPolicy": {
                "allowOpen": "allow_open",
                "createTime": "create_time",
                "mtlsPolicy": "mtls_policy",
                "serverCertificate": "server_certificate",
                "updateTime": "update_time"
            },
            "gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy": {
                "caPool": "ca_pool",
                "createTime": "create_time",
                "excludePublicCaSet": "exclude_public_ca_set",
                "updateTime": "update_time"
            },
            "gcp:networksecurity/urlList:UrlList": {
                "createTime": "create_time",
                "updateTime": "update_time"
            },
            "gcp:networkservices/EdgeCacheKeysetValidationSharedKey:EdgeCacheKeysetValidationSharedKey": {
                "secretVersion": "secret_version"
            },
            "gcp:networkservices/EdgeCacheOriginAwsV4Authentication:EdgeCacheOriginAwsV4Authentication": {
                "accessKeyId": "access_key_id",
                "originRegion": "origin_region",
                "secretAccessKeyVersion": "secret_access_key_version"
            },
            "gcp:networkservices/EdgeCacheOriginOriginOverrideAction:EdgeCacheOriginOriginOverrideAction": {
                "headerAction": "header_action",
                "urlRewrite": "url_rewrite"
            },
            "gcp:networkservices/EdgeCacheOriginOriginOverrideActionHeaderAction:EdgeCacheOriginOriginOverrideActionHeaderAction": {
                "requestHeadersToAdds": "request_headers_to_add"
            },
            "gcp:networkservices/EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd:EdgeCacheOriginOriginOverrideActionHeaderActionRequestHeadersToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:networkservices/EdgeCacheOriginOriginOverrideActionUrlRewrite:EdgeCacheOriginOriginOverrideActionUrlRewrite": {
                "hostRewrite": "host_rewrite"
            },
            "gcp:networkservices/EdgeCacheOriginOriginRedirect:EdgeCacheOriginOriginRedirect": {
                "redirectConditions": "redirect_conditions"
            },
            "gcp:networkservices/EdgeCacheOriginTimeout:EdgeCacheOriginTimeout": {
                "connectTimeout": "connect_timeout",
                "maxAttemptsTimeout": "max_attempts_timeout",
                "readTimeout": "read_timeout",
                "responseTimeout": "response_timeout"
            },
            "gcp:networkservices/EdgeCacheServiceLogConfig:EdgeCacheServiceLogConfig": {
                "sampleRate": "sample_rate"
            },
            "gcp:networkservices/EdgeCacheServiceRouting:EdgeCacheServiceRouting": {
                "hostRules": "host_rule",
                "pathMatchers": "path_matcher"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingHostRule:EdgeCacheServiceRoutingHostRule": {
                "pathMatcher": "path_matcher"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcher:EdgeCacheServiceRoutingPathMatcher": {
                "routeRules": "route_rule"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRule:EdgeCacheServiceRoutingPathMatcherRouteRule": {
                "headerAction": "header_action",
                "matchRules": "match_rule",
                "routeAction": "route_action",
                "urlRedirect": "url_redirect"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction:EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderAction": {
                "requestHeaderToAdds": "request_header_to_add",
                "requestHeaderToRemoves": "request_header_to_remove",
                "responseHeaderToAdds": "response_header_to_add",
                "responseHeaderToRemoves": "response_header_to_remove"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd:EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove:EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemove": {
                "headerName": "header_name"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd:EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAdd": {
                "headerName": "header_name",
                "headerValue": "header_value"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove:EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemove": {
                "headerName": "header_name"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule:EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule": {
                "fullPathMatch": "full_path_match",
                "headerMatches": "header_match",
                "ignoreCase": "ignore_case",
                "pathTemplateMatch": "path_template_match",
                "prefixMatch": "prefix_match",
                "queryParameterMatches": "query_parameter_match"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch:EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch": {
                "exactMatch": "exact_match",
                "headerName": "header_name",
                "invertMatch": "invert_match",
                "prefixMatch": "prefix_match",
                "presentMatch": "present_match",
                "suffixMatch": "suffix_match"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch:EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch": {
                "exactMatch": "exact_match",
                "presentMatch": "present_match"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction:EdgeCacheServiceRoutingPathMatcherRouteRuleRouteAction": {
                "cdnPolicy": "cdn_policy",
                "corsPolicy": "cors_policy",
                "urlRewrite": "url_rewrite"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy:EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicy": {
                "addSignatures": "add_signatures",
                "cacheKeyPolicy": "cache_key_policy",
                "cacheMode": "cache_mode",
                "clientTtl": "client_ttl",
                "defaultTtl": "default_ttl",
                "maxTtl": "max_ttl",
                "negativeCaching": "negative_caching",
                "negativeCachingPolicy": "negative_caching_policy",
                "signedRequestKeyset": "signed_request_keyset",
                "signedRequestMaximumExpirationTtl": "signed_request_maximum_expiration_ttl",
                "signedRequestMode": "signed_request_mode",
                "signedTokenOptions": "signed_token_options"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures:EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures": {
                "copiedParameters": "copied_parameters",
                "tokenQueryParameter": "token_query_parameter",
                "tokenTtl": "token_ttl"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy:EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy": {
                "excludeHost": "exclude_host",
                "excludeQueryString": "exclude_query_string",
                "excludedQueryParameters": "excluded_query_parameters",
                "includeProtocol": "include_protocol",
                "includedCookieNames": "included_cookie_names",
                "includedHeaderNames": "included_header_names",
                "includedQueryParameters": "included_query_parameters"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions:EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptions": {
                "allowedSignatureAlgorithms": "allowed_signature_algorithms",
                "tokenQueryParameter": "token_query_parameter"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy:EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicy": {
                "allowCredentials": "allow_credentials",
                "allowHeaders": "allow_headers",
                "allowMethods": "allow_methods",
                "allowOrigins": "allow_origins",
                "exposeHeaders": "expose_headers",
                "maxAge": "max_age"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite:EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewrite": {
                "hostRewrite": "host_rewrite",
                "pathPrefixRewrite": "path_prefix_rewrite",
                "pathTemplateRewrite": "path_template_rewrite"
            },
            "gcp:networkservices/EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect:EdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirect": {
                "hostRedirect": "host_redirect",
                "httpsRedirect": "https_redirect",
                "pathRedirect": "path_redirect",
                "prefixRedirect": "prefix_redirect",
                "redirectResponseCode": "redirect_response_code",
                "stripQuery": "strip_query"
            },
            "gcp:networkservices/EndpointPolicyEndpointMatcher:EndpointPolicyEndpointMatcher": {
                "metadataLabelMatcher": "metadata_label_matcher"
            },
            "gcp:networkservices/EndpointPolicyEndpointMatcherMetadataLabelMatcher:EndpointPolicyEndpointMatcherMetadataLabelMatcher": {
                "metadataLabelMatchCriteria": "metadata_label_match_criteria",
                "metadataLabels": "metadata_labels"
            },
            "gcp:networkservices/EndpointPolicyEndpointMatcherMetadataLabelMatcherMetadataLabel:EndpointPolicyEndpointMatcherMetadataLabelMatcherMetadataLabel": {
                "labelName": "label_name",
                "labelValue": "label_value"
            },
            "gcp:networkservices/GrpcRouteRuleAction:GrpcRouteRuleAction": {
                "faultInjectionPolicy": "fault_injection_policy",
                "retryPolicy": "retry_policy"
            },
            "gcp:networkservices/GrpcRouteRuleActionDestination:GrpcRouteRuleActionDestination": {
                "serviceName": "service_name"
            },
            "gcp:networkservices/GrpcRouteRuleActionFaultInjectionPolicyAbort:GrpcRouteRuleActionFaultInjectionPolicyAbort": {
                "httpStatus": "http_status"
            },
            "gcp:networkservices/GrpcRouteRuleActionFaultInjectionPolicyDelay:GrpcRouteRuleActionFaultInjectionPolicyDelay": {
                "fixedDelay": "fixed_delay"
            },
            "gcp:networkservices/GrpcRouteRuleActionRetryPolicy:GrpcRouteRuleActionRetryPolicy": {
                "numRetries": "num_retries",
                "retryConditions": "retry_conditions"
            },
            "gcp:networkservices/GrpcRouteRuleMatchMethod:GrpcRouteRuleMatchMethod": {
                "caseSensitive": "case_sensitive",
                "grpcMethod": "grpc_method",
                "grpcService": "grpc_service"
            },
            "gcp:networkservices/HttpRouteRuleAction:HttpRouteRuleAction": {
                "corsPolicy": "cors_policy",
                "faultInjectionPolicy": "fault_injection_policy",
                "requestHeaderModifier": "request_header_modifier",
                "requestMirrorPolicy": "request_mirror_policy",
                "responseHeaderModifier": "response_header_modifier",
                "retryPolicy": "retry_policy",
                "urlRewrite": "url_rewrite"
            },
            "gcp:networkservices/HttpRouteRuleActionCorsPolicy:HttpRouteRuleActionCorsPolicy": {
                "allowCredentials": "allow_credentials",
                "allowHeaders": "allow_headers",
                "allowMethods": "allow_methods",
                "allowOriginRegexes": "allow_origin_regexes",
                "allowOrigins": "allow_origins",
                "exposeHeaders": "expose_headers",
                "maxAge": "max_age"
            },
            "gcp:networkservices/HttpRouteRuleActionDestination:HttpRouteRuleActionDestination": {
                "serviceName": "service_name"
            },
            "gcp:networkservices/HttpRouteRuleActionFaultInjectionPolicyAbort:HttpRouteRuleActionFaultInjectionPolicyAbort": {
                "httpStatus": "http_status"
            },
            "gcp:networkservices/HttpRouteRuleActionFaultInjectionPolicyDelay:HttpRouteRuleActionFaultInjectionPolicyDelay": {
                "fixedDelay": "fixed_delay"
            },
            "gcp:networkservices/HttpRouteRuleActionRedirect:HttpRouteRuleActionRedirect": {
                "hostRedirect": "host_redirect",
                "httpsRedirect": "https_redirect",
                "pathRedirect": "path_redirect",
                "portRedirect": "port_redirect",
                "prefixRewrite": "prefix_rewrite",
                "responseCode": "response_code",
                "stripQuery": "strip_query"
            },
            "gcp:networkservices/HttpRouteRuleActionRequestHeaderModifier:HttpRouteRuleActionRequestHeaderModifier": {
                "removes": "remove"
            },
            "gcp:networkservices/HttpRouteRuleActionRequestMirrorPolicyDestination:HttpRouteRuleActionRequestMirrorPolicyDestination": {
                "serviceName": "service_name"
            },
            "gcp:networkservices/HttpRouteRuleActionResponseHeaderModifier:HttpRouteRuleActionResponseHeaderModifier": {
                "removes": "remove"
            },
            "gcp:networkservices/HttpRouteRuleActionRetryPolicy:HttpRouteRuleActionRetryPolicy": {
                "numRetries": "num_retries",
                "perTryTimeout": "per_try_timeout",
                "retryConditions": "retry_conditions"
            },
            "gcp:networkservices/HttpRouteRuleActionUrlRewrite:HttpRouteRuleActionUrlRewrite": {
                "hostRewrite": "host_rewrite",
                "pathPrefixRewrite": "path_prefix_rewrite"
            },
            "gcp:networkservices/HttpRouteRuleMatch:HttpRouteRuleMatch": {
                "fullPathMatch": "full_path_match",
                "ignoreCase": "ignore_case",
                "prefixMatch": "prefix_match",
                "queryParameters": "query_parameters",
                "regexMatch": "regex_match"
            },
            "gcp:networkservices/HttpRouteRuleMatchHeader:HttpRouteRuleMatchHeader": {
                "exactMatch": "exact_match",
                "invertMatch": "invert_match",
                "prefixMatch": "prefix_match",
                "presentMatch": "present_match",
                "rangeMatch": "range_match",
                "regexMatch": "regex_match",
                "suffixMatch": "suffix_match"
            },
            "gcp:networkservices/HttpRouteRuleMatchQueryParameter:HttpRouteRuleMatchQueryParameter": {
                "exactMatch": "exact_match",
                "presentMatch": "present_match",
                "queryParameter": "query_parameter",
                "regexMatch": "regex_match"
            },
            "gcp:networkservices/TcpRouteRuleAction:TcpRouteRuleAction": {
                "originalDestination": "original_destination"
            },
            "gcp:networkservices/TcpRouteRuleActionDestination:TcpRouteRuleActionDestination": {
                "serviceName": "service_name"
            },
            "gcp:networkservices/TlsRouteRuleActionDestination:TlsRouteRuleActionDestination": {
                "serviceName": "service_name"
            },
            "gcp:networkservices/TlsRouteRuleMatch:TlsRouteRuleMatch": {
                "alpns": "alpn",
                "sniHosts": "sni_host"
            },
            "gcp:networkservices/edgeCacheKeyset:EdgeCacheKeyset": {
                "publicKeys": "public_key",
                "validationSharedKeys": "validation_shared_keys"
            },
            "gcp:networkservices/edgeCacheOrigin:EdgeCacheOrigin": {
                "awsV4Authentication": "aws_v4_authentication",
                "failoverOrigin": "failover_origin",
                "maxAttempts": "max_attempts",
                "originAddress": "origin_address",
                "originOverrideAction": "origin_override_action",
                "originRedirect": "origin_redirect",
                "retryConditions": "retry_conditions"
            },
            "gcp:networkservices/edgeCacheService:EdgeCacheService": {
                "disableHttp2": "disable_http2",
                "disableQuic": "disable_quic",
                "edgeSecurityPolicy": "edge_security_policy",
                "edgeSslCertificates": "edge_ssl_certificates",
                "ipv4Addresses": "ipv4_addresses",
                "ipv6Addresses": "ipv6_addresses",
                "logConfig": "log_config",
                "requireTls": "require_tls",
                "sslPolicy": "ssl_policy"
            },
            "gcp:networkservices/endpointPolicy:EndpointPolicy": {
                "authorizationPolicy": "authorization_policy",
                "clientTlsPolicy": "client_tls_policy",
                "createTime": "create_time",
                "endpointMatcher": "endpoint_matcher",
                "serverTlsPolicy": "server_tls_policy",
                "trafficPortSelector": "traffic_port_selector",
                "updateTime": "update_time"
            },
            "gcp:networkservices/gateway:Gateway": {
                "certificateUrls": "certificate_urls",
                "createTime": "create_time",
                "deleteSwgAutogenRouterOnDestroy": "delete_swg_autogen_router_on_destroy",
                "gatewaySecurityPolicy": "gateway_security_policy",
                "selfLink": "self_link",
                "serverTlsPolicy": "server_tls_policy",
                "updateTime": "update_time"
            },
            "gcp:networkservices/grpcRoute:GrpcRoute": {
                "createTime": "create_time",
                "selfLink": "self_link",
                "updateTime": "update_time"
            },
            "gcp:networkservices/httpRoute:HttpRoute": {
                "createTime": "create_time",
                "selfLink": "self_link",
                "updateTime": "update_time"
            },
            "gcp:networkservices/mesh:Mesh": {
                "createTime": "create_time",
                "interceptionPort": "interception_port",
                "selfLink": "self_link",
                "updateTime": "update_time"
            },
            "gcp:networkservices/serviceBinding:ServiceBinding": {
                "createTime": "create_time",
                "updateTime": "update_time"
            },
            "gcp:networkservices/tcpRoute:TcpRoute": {
                "createTime": "create_time",
                "selfLink": "self_link",
                "updateTime": "update_time"
            },
            "gcp:networkservices/tlsRoute:TlsRoute": {
                "createTime": "create_time",
                "selfLink": "self_link",
                "updateTime": "update_time"
            },
            "gcp:notebooks/EnvironmentVmImage:EnvironmentVmImage": {
                "imageFamily": "image_family",
                "imageName": "image_name"
            },
            "gcp:notebooks/InstanceAcceleratorConfig:InstanceAcceleratorConfig": {
                "coreCount": "core_count"
            },
            "gcp:notebooks/InstanceReservationAffinity:InstanceReservationAffinity": {
                "consumeReservationType": "consume_reservation_type"
            },
            "gcp:notebooks/InstanceShieldedInstanceConfig:InstanceShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:notebooks/InstanceVmImage:InstanceVmImage": {
                "imageFamily": "image_family",
                "imageName": "image_name"
            },
            "gcp:notebooks/RuntimeAccessConfig:RuntimeAccessConfig": {
                "accessType": "access_type",
                "proxyUri": "proxy_uri",
                "runtimeOwner": "runtime_owner"
            },
            "gcp:notebooks/RuntimeMetric:RuntimeMetric": {
                "systemMetrics": "system_metrics"
            },
            "gcp:notebooks/RuntimeSoftwareConfig:RuntimeSoftwareConfig": {
                "customGpuDriverPath": "custom_gpu_driver_path",
                "enableHealthMonitoring": "enable_health_monitoring",
                "idleShutdown": "idle_shutdown",
                "idleShutdownTimeout": "idle_shutdown_timeout",
                "installGpuDriver": "install_gpu_driver",
                "notebookUpgradeSchedule": "notebook_upgrade_schedule",
                "postStartupScript": "post_startup_script",
                "postStartupScriptBehavior": "post_startup_script_behavior"
            },
            "gcp:notebooks/RuntimeVirtualMachine:RuntimeVirtualMachine": {
                "instanceId": "instance_id",
                "instanceName": "instance_name",
                "virtualMachineConfig": "virtual_machine_config"
            },
            "gcp:notebooks/RuntimeVirtualMachineVirtualMachineConfig:RuntimeVirtualMachineVirtualMachineConfig": {
                "acceleratorConfig": "accelerator_config",
                "containerImages": "container_images",
                "dataDisk": "data_disk",
                "encryptionConfig": "encryption_config",
                "guestAttributes": "guest_attributes",
                "internalIpOnly": "internal_ip_only",
                "machineType": "machine_type",
                "nicType": "nic_type",
                "reservedIpRange": "reserved_ip_range",
                "shieldedInstanceConfig": "shielded_instance_config"
            },
            "gcp:notebooks/RuntimeVirtualMachineVirtualMachineConfigAcceleratorConfig:RuntimeVirtualMachineVirtualMachineConfigAcceleratorConfig": {
                "coreCount": "core_count"
            },
            "gcp:notebooks/RuntimeVirtualMachineVirtualMachineConfigDataDisk:RuntimeVirtualMachineVirtualMachineConfigDataDisk": {
                "autoDelete": "auto_delete",
                "deviceName": "device_name",
                "guestOsFeatures": "guest_os_features",
                "initializeParams": "initialize_params"
            },
            "gcp:notebooks/RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParams:RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParams": {
                "diskName": "disk_name",
                "diskSizeGb": "disk_size_gb",
                "diskType": "disk_type"
            },
            "gcp:notebooks/RuntimeVirtualMachineVirtualMachineConfigEncryptionConfig:RuntimeVirtualMachineVirtualMachineConfigEncryptionConfig": {
                "kmsKey": "kms_key"
            },
            "gcp:notebooks/RuntimeVirtualMachineVirtualMachineConfigShieldedInstanceConfig:RuntimeVirtualMachineVirtualMachineConfigShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:notebooks/environment:Environment": {
                "containerImage": "container_image",
                "createTime": "create_time",
                "displayName": "display_name",
                "postStartupScript": "post_startup_script",
                "vmImage": "vm_image"
            },
            "gcp:notebooks/getInstanceIamPolicy:getInstanceIamPolicy": {
                "instanceName": "instance_name",
                "policyData": "policy_data"
            },
            "gcp:notebooks/getRuntimeIamPolicy:getRuntimeIamPolicy": {
                "policyData": "policy_data",
                "runtimeName": "runtime_name"
            },
            "gcp:notebooks/instance:Instance": {
                "acceleratorConfig": "accelerator_config",
                "bootDiskSizeGb": "boot_disk_size_gb",
                "bootDiskType": "boot_disk_type",
                "containerImage": "container_image",
                "createTime": "create_time",
                "customGpuDriverPath": "custom_gpu_driver_path",
                "dataDiskSizeGb": "data_disk_size_gb",
                "dataDiskType": "data_disk_type",
                "diskEncryption": "disk_encryption",
                "installGpuDriver": "install_gpu_driver",
                "instanceOwners": "instance_owners",
                "kmsKey": "kms_key",
                "machineType": "machine_type",
                "nicType": "nic_type",
                "noProxyAccess": "no_proxy_access",
                "noPublicIp": "no_public_ip",
                "noRemoveDataDisk": "no_remove_data_disk",
                "postStartupScript": "post_startup_script",
                "proxyUri": "proxy_uri",
                "reservationAffinity": "reservation_affinity",
                "serviceAccount": "service_account",
                "serviceAccountScopes": "service_account_scopes",
                "shieldedInstanceConfig": "shielded_instance_config",
                "updateTime": "update_time",
                "vmImage": "vm_image"
            },
            "gcp:notebooks/instanceIamBinding:InstanceIamBinding": {
                "instanceName": "instance_name"
            },
            "gcp:notebooks/instanceIamMember:InstanceIamMember": {
                "instanceName": "instance_name"
            },
            "gcp:notebooks/instanceIamPolicy:InstanceIamPolicy": {
                "instanceName": "instance_name",
                "policyData": "policy_data"
            },
            "gcp:notebooks/location:Location": {
                "selfLink": "self_link"
            },
            "gcp:notebooks/runtime:Runtime": {
                "accessConfig": "access_config",
                "healthState": "health_state",
                "softwareConfig": "software_config",
                "virtualMachine": "virtual_machine"
            },
            "gcp:notebooks/runtimeIamBinding:RuntimeIamBinding": {
                "runtimeName": "runtime_name"
            },
            "gcp:notebooks/runtimeIamMember:RuntimeIamMember": {
                "runtimeName": "runtime_name"
            },
            "gcp:notebooks/runtimeIamPolicy:RuntimeIamPolicy": {
                "policyData": "policy_data",
                "runtimeName": "runtime_name"
            },
            "gcp:organizations/AccessApprovalSettingsEnrolledService:AccessApprovalSettingsEnrolledService": {
                "cloudProduct": "cloud_product",
                "enrollmentLevel": "enrollment_level"
            },
            "gcp:organizations/IamAuditConfigAuditLogConfig:IamAuditConfigAuditLogConfig": {
                "exemptedMembers": "exempted_members",
                "logType": "log_type"
            },
            "gcp:organizations/PolicyListPolicy:PolicyListPolicy": {
                "inheritFromParent": "inherit_from_parent",
                "suggestedValue": "suggested_value"
            },
            "gcp:organizations/accessApprovalSettings:AccessApprovalSettings": {
                "activeKeyVersion": "active_key_version",
                "ancestorHasActiveKeyVersion": "ancestor_has_active_key_version",
                "enrolledAncestor": "enrolled_ancestor",
                "enrolledServices": "enrolled_services",
                "invalidKeyVersion": "invalid_key_version",
                "notificationEmails": "notification_emails",
                "organizationId": "organization_id"
            },
            "gcp:organizations/folder:Folder": {
                "createTime": "create_time",
                "displayName": "display_name",
                "folderId": "folder_id",
                "lifecycleState": "lifecycle_state"
            },
            "gcp:organizations/getActiveFolder:getActiveFolder": {
                "displayName": "display_name"
            },
            "gcp:organizations/getBillingAccount:getBillingAccount": {
                "billingAccount": "billing_account",
                "displayName": "display_name",
                "lookupProjects": "lookup_projects",
                "projectIds": "project_ids"
            },
            "gcp:organizations/getClientConfig:getClientConfig": {
                "accessToken": "access_token"
            },
            "gcp:organizations/getFolder:getFolder": {
                "createTime": "create_time",
                "displayName": "display_name",
                "folderId": "folder_id",
                "lifecycleState": "lifecycle_state",
                "lookupOrganization": "lookup_organization"
            },
            "gcp:organizations/getFolders:getFolders": {
                "parentId": "parent_id"
            },
            "gcp:organizations/getFoldersFolder:getFoldersFolder": {
                "createTime": "create_time",
                "deleteTime": "delete_time",
                "displayName": "display_name",
                "updateTime": "update_time"
            },
            "gcp:organizations/getIAMPolicy:getIAMPolicy": {
                "auditConfigs": "audit_config",
                "bindings": "binding",
                "policyData": "policy_data"
            },
            "gcp:organizations/getIAMPolicyAuditConfig:getIAMPolicyAuditConfig": {
                "auditLogConfigs": "audit_log_configs"
            },
            "gcp:organizations/getIAMPolicyAuditConfigAuditLogConfig:getIAMPolicyAuditConfigAuditLogConfig": {
                "exemptedMembers": "exempted_members",
                "logType": "log_type"
            },
            "gcp:organizations/getOrganization:getOrganization": {
                "createTime": "create_time",
                "directoryCustomerId": "directory_customer_id",
                "lifecycleState": "lifecycle_state",
                "orgId": "org_id"
            },
            "gcp:organizations/getProject:getProject": {
                "autoCreateNetwork": "auto_create_network",
                "billingAccount": "billing_account",
                "folderId": "folder_id",
                "orgId": "org_id",
                "projectId": "project_id",
                "skipDelete": "skip_delete"
            },
            "gcp:organizations/iAMBinding:IAMBinding": {
                "orgId": "org_id"
            },
            "gcp:organizations/iAMCustomRole:IAMCustomRole": {
                "orgId": "org_id",
                "roleId": "role_id"
            },
            "gcp:organizations/iAMMember:IAMMember": {
                "orgId": "org_id"
            },
            "gcp:organizations/iAMPolicy:IAMPolicy": {
                "orgId": "org_id",
                "policyData": "policy_data"
            },
            "gcp:organizations/iamAuditConfig:IamAuditConfig": {
                "auditLogConfigs": "audit_log_config",
                "orgId": "org_id"
            },
            "gcp:organizations/policy:Policy": {
                "booleanPolicy": "boolean_policy",
                "listPolicy": "list_policy",
                "orgId": "org_id",
                "restorePolicy": "restore_policy",
                "updateTime": "update_time"
            },
            "gcp:organizations/project:Project": {
                "autoCreateNetwork": "auto_create_network",
                "billingAccount": "billing_account",
                "folderId": "folder_id",
                "orgId": "org_id",
                "projectId": "project_id",
                "skipDelete": "skip_delete"
            },
            "gcp:orgpolicy/PolicySpec:PolicySpec": {
                "inheritFromParent": "inherit_from_parent",
                "updateTime": "update_time"
            },
            "gcp:orgpolicy/PolicySpecRule:PolicySpecRule": {
                "allowAll": "allow_all",
                "denyAll": "deny_all"
            },
            "gcp:orgpolicy/PolicySpecRuleValues:PolicySpecRuleValues": {
                "allowedValues": "allowed_values",
                "deniedValues": "denied_values"
            },
            "gcp:orgpolicy/customConstraint:CustomConstraint": {
                "actionType": "action_type",
                "displayName": "display_name",
                "methodTypes": "method_types",
                "resourceTypes": "resource_types",
                "updateTime": "update_time"
            },
            "gcp:osconfig/GuestPoliciesAssignment:GuestPoliciesAssignment": {
                "groupLabels": "group_labels",
                "instanceNamePrefixes": "instance_name_prefixes",
                "osTypes": "os_types"
            },
            "gcp:osconfig/GuestPoliciesAssignmentOsType:GuestPoliciesAssignmentOsType": {
                "osArchitecture": "os_architecture",
                "osShortName": "os_short_name",
                "osVersion": "os_version"
            },
            "gcp:osconfig/GuestPoliciesPackage:GuestPoliciesPackage": {
                "desiredState": "desired_state"
            },
            "gcp:osconfig/GuestPoliciesPackageRepositoryApt:GuestPoliciesPackageRepositoryApt": {
                "archiveType": "archive_type",
                "gpgKey": "gpg_key"
            },
            "gcp:osconfig/GuestPoliciesPackageRepositoryYum:GuestPoliciesPackageRepositoryYum": {
                "baseUrl": "base_url",
                "displayName": "display_name",
                "gpgKeys": "gpg_keys"
            },
            "gcp:osconfig/GuestPoliciesPackageRepositoryZypper:GuestPoliciesPackageRepositoryZypper": {
                "baseUrl": "base_url",
                "displayName": "display_name",
                "gpgKeys": "gpg_keys"
            },
            "gcp:osconfig/GuestPoliciesRecipe:GuestPoliciesRecipe": {
                "desiredState": "desired_state",
                "installSteps": "install_steps",
                "updateSteps": "update_steps"
            },
            "gcp:osconfig/GuestPoliciesRecipeArtifact:GuestPoliciesRecipeArtifact": {
                "allowInsecure": "allow_insecure"
            },
            "gcp:osconfig/GuestPoliciesRecipeArtifactRemote:GuestPoliciesRecipeArtifactRemote": {
                "checkSum": "check_sum"
            },
            "gcp:osconfig/GuestPoliciesRecipeInstallStep:GuestPoliciesRecipeInstallStep": {
                "archiveExtraction": "archive_extraction",
                "dpkgInstallation": "dpkg_installation",
                "fileCopy": "file_copy",
                "fileExec": "file_exec",
                "msiInstallation": "msi_installation",
                "rpmInstallation": "rpm_installation",
                "scriptRun": "script_run"
            },
            "gcp:osconfig/GuestPoliciesRecipeInstallStepArchiveExtraction:GuestPoliciesRecipeInstallStepArchiveExtraction": {
                "artifactId": "artifact_id"
            },
            "gcp:osconfig/GuestPoliciesRecipeInstallStepDpkgInstallation:GuestPoliciesRecipeInstallStepDpkgInstallation": {
                "artifactId": "artifact_id"
            },
            "gcp:osconfig/GuestPoliciesRecipeInstallStepFileCopy:GuestPoliciesRecipeInstallStepFileCopy": {
                "artifactId": "artifact_id"
            },
            "gcp:osconfig/GuestPoliciesRecipeInstallStepFileExec:GuestPoliciesRecipeInstallStepFileExec": {
                "allowedExitCodes": "allowed_exit_codes",
                "artifactId": "artifact_id",
                "localPath": "local_path"
            },
            "gcp:osconfig/GuestPoliciesRecipeInstallStepMsiInstallation:GuestPoliciesRecipeInstallStepMsiInstallation": {
                "allowedExitCodes": "allowed_exit_codes",
                "artifactId": "artifact_id"
            },
            "gcp:osconfig/GuestPoliciesRecipeInstallStepRpmInstallation:GuestPoliciesRecipeInstallStepRpmInstallation": {
                "artifactId": "artifact_id"
            },
            "gcp:osconfig/GuestPoliciesRecipeInstallStepScriptRun:GuestPoliciesRecipeInstallStepScriptRun": {
                "allowedExitCodes": "allowed_exit_codes"
            },
            "gcp:osconfig/GuestPoliciesRecipeUpdateStep:GuestPoliciesRecipeUpdateStep": {
                "archiveExtraction": "archive_extraction",
                "dpkgInstallation": "dpkg_installation",
                "fileCopy": "file_copy",
                "fileExec": "file_exec",
                "msiInstallation": "msi_installation",
                "rpmInstallation": "rpm_installation",
                "scriptRun": "script_run"
            },
            "gcp:osconfig/GuestPoliciesRecipeUpdateStepArchiveExtraction:GuestPoliciesRecipeUpdateStepArchiveExtraction": {
                "artifactId": "artifact_id"
            },
            "gcp:osconfig/GuestPoliciesRecipeUpdateStepDpkgInstallation:GuestPoliciesRecipeUpdateStepDpkgInstallation": {
                "artifactId": "artifact_id"
            },
            "gcp:osconfig/GuestPoliciesRecipeUpdateStepFileCopy:GuestPoliciesRecipeUpdateStepFileCopy": {
                "artifactId": "artifact_id"
            },
            "gcp:osconfig/GuestPoliciesRecipeUpdateStepFileExec:GuestPoliciesRecipeUpdateStepFileExec": {
                "allowedExitCodes": "allowed_exit_codes",
                "artifactId": "artifact_id",
                "localPath": "local_path"
            },
            "gcp:osconfig/GuestPoliciesRecipeUpdateStepMsiInstallation:GuestPoliciesRecipeUpdateStepMsiInstallation": {
                "allowedExitCodes": "allowed_exit_codes",
                "artifactId": "artifact_id"
            },
            "gcp:osconfig/GuestPoliciesRecipeUpdateStepRpmInstallation:GuestPoliciesRecipeUpdateStepRpmInstallation": {
                "artifactId": "artifact_id"
            },
            "gcp:osconfig/GuestPoliciesRecipeUpdateStepScriptRun:GuestPoliciesRecipeUpdateStepScriptRun": {
                "allowedExitCodes": "allowed_exit_codes"
            },
            "gcp:osconfig/OsPolicyAssignmentInstanceFilter:OsPolicyAssignmentInstanceFilter": {
                "exclusionLabels": "exclusion_labels",
                "inclusionLabels": "inclusion_labels"
            },
            "gcp:osconfig/OsPolicyAssignmentInstanceFilterInventory:OsPolicyAssignmentInstanceFilterInventory": {
                "osShortName": "os_short_name",
                "osVersion": "os_version"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicy:OsPolicyAssignmentOsPolicy": {
                "allowNoResourceGroupMatch": "allow_no_resource_group_match",
                "resourceGroups": "resource_groups"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroup:OsPolicyAssignmentOsPolicyResourceGroup": {
                "inventoryFilters": "inventory_filters"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupInventoryFilter:OsPolicyAssignmentOsPolicyResourceGroupInventoryFilter": {
                "osShortName": "os_short_name",
                "osVersion": "os_version"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforce:OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforce": {
                "outputFilePath": "output_file_path"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFile:OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFile": {
                "allowInsecure": "allow_insecure",
                "localPath": "local_path"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFileRemote:OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFileRemote": {
                "sha256Checksum": "sha256_checksum"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidate:OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidate": {
                "outputFilePath": "output_file_path"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFile:OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFile": {
                "allowInsecure": "allow_insecure",
                "localPath": "local_path"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFileRemote:OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFileRemote": {
                "sha256Checksum": "sha256_checksum"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourceFileFile:OsPolicyAssignmentOsPolicyResourceGroupResourceFileFile": {
                "allowInsecure": "allow_insecure",
                "localPath": "local_path"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourceFileFileRemote:OsPolicyAssignmentOsPolicyResourceGroupResourceFileFileRemote": {
                "sha256Checksum": "sha256_checksum"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourcePkg:OsPolicyAssignmentOsPolicyResourceGroupResourcePkg": {
                "desiredState": "desired_state"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDeb:OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDeb": {
                "pullDeps": "pull_deps"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSource:OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSource": {
                "allowInsecure": "allow_insecure",
                "localPath": "local_path"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSourceRemote:OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSourceRemote": {
                "sha256Checksum": "sha256_checksum"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSource:OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSource": {
                "allowInsecure": "allow_insecure",
                "localPath": "local_path"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSourceRemote:OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSourceRemote": {
                "sha256Checksum": "sha256_checksum"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpm:OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpm": {
                "pullDeps": "pull_deps"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSource:OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSource": {
                "allowInsecure": "allow_insecure",
                "localPath": "local_path"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSourceRemote:OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSourceRemote": {
                "sha256Checksum": "sha256_checksum"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryApt:OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryApt": {
                "archiveType": "archive_type",
                "gpgKey": "gpg_key"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryYum:OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryYum": {
                "baseUrl": "base_url",
                "displayName": "display_name",
                "gpgKeys": "gpg_keys"
            },
            "gcp:osconfig/OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryZypper:OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryZypper": {
                "baseUrl": "base_url",
                "displayName": "display_name",
                "gpgKeys": "gpg_keys"
            },
            "gcp:osconfig/OsPolicyAssignmentRollout:OsPolicyAssignmentRollout": {
                "disruptionBudget": "disruption_budget",
                "minWaitDuration": "min_wait_duration"
            },
            "gcp:osconfig/PatchDeploymentInstanceFilter:PatchDeploymentInstanceFilter": {
                "groupLabels": "group_labels",
                "instanceNamePrefixes": "instance_name_prefixes"
            },
            "gcp:osconfig/PatchDeploymentOneTimeSchedule:PatchDeploymentOneTimeSchedule": {
                "executeTime": "execute_time"
            },
            "gcp:osconfig/PatchDeploymentPatchConfig:PatchDeploymentPatchConfig": {
                "migInstancesAllowed": "mig_instances_allowed",
                "postStep": "post_step",
                "preStep": "pre_step",
                "rebootConfig": "reboot_config",
                "windowsUpdate": "windows_update"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigApt:PatchDeploymentPatchConfigApt": {
                "exclusivePackages": "exclusive_packages"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigPostStep:PatchDeploymentPatchConfigPostStep": {
                "linuxExecStepConfig": "linux_exec_step_config",
                "windowsExecStepConfig": "windows_exec_step_config"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigPostStepLinuxExecStepConfig:PatchDeploymentPatchConfigPostStepLinuxExecStepConfig": {
                "allowedSuccessCodes": "allowed_success_codes",
                "gcsObject": "gcs_object",
                "localPath": "local_path"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObject:PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObject": {
                "generationNumber": "generation_number"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigPostStepWindowsExecStepConfig:PatchDeploymentPatchConfigPostStepWindowsExecStepConfig": {
                "allowedSuccessCodes": "allowed_success_codes",
                "gcsObject": "gcs_object",
                "localPath": "local_path"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObject:PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObject": {
                "generationNumber": "generation_number"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigPreStep:PatchDeploymentPatchConfigPreStep": {
                "linuxExecStepConfig": "linux_exec_step_config",
                "windowsExecStepConfig": "windows_exec_step_config"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigPreStepLinuxExecStepConfig:PatchDeploymentPatchConfigPreStepLinuxExecStepConfig": {
                "allowedSuccessCodes": "allowed_success_codes",
                "gcsObject": "gcs_object",
                "localPath": "local_path"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObject:PatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObject": {
                "generationNumber": "generation_number"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigPreStepWindowsExecStepConfig:PatchDeploymentPatchConfigPreStepWindowsExecStepConfig": {
                "allowedSuccessCodes": "allowed_success_codes",
                "gcsObject": "gcs_object",
                "localPath": "local_path"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObject:PatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObject": {
                "generationNumber": "generation_number"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigWindowsUpdate:PatchDeploymentPatchConfigWindowsUpdate": {
                "exclusivePatches": "exclusive_patches"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigYum:PatchDeploymentPatchConfigYum": {
                "exclusivePackages": "exclusive_packages"
            },
            "gcp:osconfig/PatchDeploymentPatchConfigZypper:PatchDeploymentPatchConfigZypper": {
                "exclusivePatches": "exclusive_patches",
                "withOptional": "with_optional",
                "withUpdate": "with_update"
            },
            "gcp:osconfig/PatchDeploymentRecurringSchedule:PatchDeploymentRecurringSchedule": {
                "endTime": "end_time",
                "lastExecuteTime": "last_execute_time",
                "nextExecuteTime": "next_execute_time",
                "startTime": "start_time",
                "timeOfDay": "time_of_day",
                "timeZone": "time_zone"
            },
            "gcp:osconfig/PatchDeploymentRecurringScheduleMonthly:PatchDeploymentRecurringScheduleMonthly": {
                "monthDay": "month_day",
                "weekDayOfMonth": "week_day_of_month"
            },
            "gcp:osconfig/PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonth:PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonth": {
                "dayOfWeek": "day_of_week",
                "weekOrdinal": "week_ordinal"
            },
            "gcp:osconfig/PatchDeploymentRecurringScheduleWeekly:PatchDeploymentRecurringScheduleWeekly": {
                "dayOfWeek": "day_of_week"
            },
            "gcp:osconfig/PatchDeploymentRollout:PatchDeploymentRollout": {
                "disruptionBudget": "disruption_budget"
            },
            "gcp:osconfig/guestPolicies:GuestPolicies": {
                "createTime": "create_time",
                "guestPolicyId": "guest_policy_id",
                "packageRepositories": "package_repositories",
                "updateTime": "update_time"
            },
            "gcp:osconfig/osPolicyAssignment:OsPolicyAssignment": {
                "instanceFilter": "instance_filter",
                "osPolicies": "os_policies",
                "revisionCreateTime": "revision_create_time",
                "revisionId": "revision_id",
                "rolloutState": "rollout_state",
                "skipAwaitRollout": "skip_await_rollout"
            },
            "gcp:osconfig/patchDeployment:PatchDeployment": {
                "createTime": "create_time",
                "instanceFilter": "instance_filter",
                "lastExecuteTime": "last_execute_time",
                "oneTimeSchedule": "one_time_schedule",
                "patchConfig": "patch_config",
                "patchDeploymentId": "patch_deployment_id",
                "recurringSchedule": "recurring_schedule",
                "updateTime": "update_time"
            },
            "gcp:oslogin/sshPublicKey:SshPublicKey": {
                "expirationTimeUsec": "expiration_time_usec"
            },
            "gcp:projects/AccessApprovalSettingsEnrolledService:AccessApprovalSettingsEnrolledService": {
                "cloudProduct": "cloud_product",
                "enrollmentLevel": "enrollment_level"
            },
            "gcp:projects/ApiKeyRestrictions:ApiKeyRestrictions": {
                "androidKeyRestrictions": "android_key_restrictions",
                "apiTargets": "api_targets",
                "browserKeyRestrictions": "browser_key_restrictions",
                "iosKeyRestrictions": "ios_key_restrictions",
                "serverKeyRestrictions": "server_key_restrictions"
            },
            "gcp:projects/ApiKeyRestrictionsAndroidKeyRestrictions:ApiKeyRestrictionsAndroidKeyRestrictions": {
                "allowedApplications": "allowed_applications"
            },
            "gcp:projects/ApiKeyRestrictionsAndroidKeyRestrictionsAllowedApplication:ApiKeyRestrictionsAndroidKeyRestrictionsAllowedApplication": {
                "packageName": "package_name",
                "sha1Fingerprint": "sha1_fingerprint"
            },
            "gcp:projects/ApiKeyRestrictionsBrowserKeyRestrictions:ApiKeyRestrictionsBrowserKeyRestrictions": {
                "allowedReferrers": "allowed_referrers"
            },
            "gcp:projects/ApiKeyRestrictionsIosKeyRestrictions:ApiKeyRestrictionsIosKeyRestrictions": {
                "allowedBundleIds": "allowed_bundle_ids"
            },
            "gcp:projects/ApiKeyRestrictionsServerKeyRestrictions:ApiKeyRestrictionsServerKeyRestrictions": {
                "allowedIps": "allowed_ips"
            },
            "gcp:projects/IAMAuditConfigAuditLogConfig:IAMAuditConfigAuditLogConfig": {
                "exemptedMembers": "exempted_members",
                "logType": "log_type"
            },
            "gcp:projects/OrganizationPolicyListPolicy:OrganizationPolicyListPolicy": {
                "inheritFromParent": "inherit_from_parent",
                "suggestedValue": "suggested_value"
            },
            "gcp:projects/accessApprovalSettings:AccessApprovalSettings": {
                "activeKeyVersion": "active_key_version",
                "ancestorHasActiveKeyVersion": "ancestor_has_active_key_version",
                "enrolledAncestor": "enrolled_ancestor",
                "enrolledServices": "enrolled_services",
                "invalidKeyVersion": "invalid_key_version",
                "notificationEmails": "notification_emails",
                "projectId": "project_id"
            },
            "gcp:projects/apiKey:ApiKey": {
                "displayName": "display_name",
                "keyString": "key_string"
            },
            "gcp:projects/defaultServiceAccounts:DefaultServiceAccounts": {
                "restorePolicy": "restore_policy",
                "serviceAccounts": "service_accounts"
            },
            "gcp:projects/getIamPolicy:getIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:projects/getOrganizationPolicy:getOrganizationPolicy": {
                "booleanPolicies": "boolean_policy",
                "listPolicies": "list_policy",
                "restorePolicies": "restore_policy",
                "updateTime": "update_time"
            },
            "gcp:projects/getOrganizationPolicyListPolicy:getOrganizationPolicyListPolicy": {
                "allows": "allow",
                "denies": "deny",
                "inheritFromParent": "inherit_from_parent",
                "suggestedValue": "suggested_value"
            },
            "gcp:projects/getProjectProject:getProjectProject": {
                "createTime": "create_time",
                "lifecycleState": "lifecycle_state",
                "projectId": "project_id"
            },
            "gcp:projects/getProjectService:getProjectService": {
                "disableDependentServices": "disable_dependent_services",
                "disableOnDestroy": "disable_on_destroy"
            },
            "gcp:projects/iAMAuditConfig:IAMAuditConfig": {
                "auditLogConfigs": "audit_log_config"
            },
            "gcp:projects/iAMCustomRole:IAMCustomRole": {
                "roleId": "role_id"
            },
            "gcp:projects/iAMPolicy:IAMPolicy": {
                "policyData": "policy_data"
            },
            "gcp:projects/organizationPolicy:OrganizationPolicy": {
                "booleanPolicy": "boolean_policy",
                "listPolicy": "list_policy",
                "restorePolicy": "restore_policy",
                "updateTime": "update_time"
            },
            "gcp:projects/service:Service": {
                "disableDependentServices": "disable_dependent_services",
                "disableOnDestroy": "disable_on_destroy"
            },
            "gcp:projects/usageExportBucket:UsageExportBucket": {
                "bucketName": "bucket_name"
            },
            "gcp:pubsub/LiteSubscriptionDeliveryConfig:LiteSubscriptionDeliveryConfig": {
                "deliveryRequirement": "delivery_requirement"
            },
            "gcp:pubsub/LiteTopicPartitionConfigCapacity:LiteTopicPartitionConfigCapacity": {
                "publishMibPerSec": "publish_mib_per_sec",
                "subscribeMibPerSec": "subscribe_mib_per_sec"
            },
            "gcp:pubsub/LiteTopicReservationConfig:LiteTopicReservationConfig": {
                "throughputReservation": "throughput_reservation"
            },
            "gcp:pubsub/LiteTopicRetentionConfig:LiteTopicRetentionConfig": {
                "perPartitionBytes": "per_partition_bytes"
            },
            "gcp:pubsub/SubscriptionBigqueryConfig:SubscriptionBigqueryConfig": {
                "dropUnknownFields": "drop_unknown_fields",
                "useTopicSchema": "use_topic_schema",
                "writeMetadata": "write_metadata"
            },
            "gcp:pubsub/SubscriptionDeadLetterPolicy:SubscriptionDeadLetterPolicy": {
                "deadLetterTopic": "dead_letter_topic",
                "maxDeliveryAttempts": "max_delivery_attempts"
            },
            "gcp:pubsub/SubscriptionPushConfig:SubscriptionPushConfig": {
                "oidcToken": "oidc_token",
                "pushEndpoint": "push_endpoint"
            },
            "gcp:pubsub/SubscriptionPushConfigOidcToken:SubscriptionPushConfigOidcToken": {
                "serviceAccountEmail": "service_account_email"
            },
            "gcp:pubsub/SubscriptionRetryPolicy:SubscriptionRetryPolicy": {
                "maximumBackoff": "maximum_backoff",
                "minimumBackoff": "minimum_backoff"
            },
            "gcp:pubsub/TopicMessageStoragePolicy:TopicMessageStoragePolicy": {
                "allowedPersistenceRegions": "allowed_persistence_regions"
            },
            "gcp:pubsub/getSubscription:getSubscription": {
                "ackDeadlineSeconds": "ack_deadline_seconds",
                "bigqueryConfigs": "bigquery_config",
                "deadLetterPolicies": "dead_letter_policy",
                "enableExactlyOnceDelivery": "enable_exactly_once_delivery",
                "enableMessageOrdering": "enable_message_ordering",
                "expirationPolicies": "expiration_policy",
                "messageRetentionDuration": "message_retention_duration",
                "pushConfigs": "push_config",
                "retainAckedMessages": "retain_acked_messages",
                "retryPolicies": "retry_policy"
            },
            "gcp:pubsub/getSubscriptionBigqueryConfig:getSubscriptionBigqueryConfig": {
                "dropUnknownFields": "drop_unknown_fields",
                "useTopicSchema": "use_topic_schema",
                "writeMetadata": "write_metadata"
            },
            "gcp:pubsub/getSubscriptionDeadLetterPolicy:getSubscriptionDeadLetterPolicy": {
                "deadLetterTopic": "dead_letter_topic",
                "maxDeliveryAttempts": "max_delivery_attempts"
            },
            "gcp:pubsub/getSubscriptionIamPolicy:getSubscriptionIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:pubsub/getSubscriptionPushConfig:getSubscriptionPushConfig": {
                "oidcTokens": "oidc_token",
                "pushEndpoint": "push_endpoint"
            },
            "gcp:pubsub/getSubscriptionPushConfigOidcToken:getSubscriptionPushConfigOidcToken": {
                "serviceAccountEmail": "service_account_email"
            },
            "gcp:pubsub/getSubscriptionRetryPolicy:getSubscriptionRetryPolicy": {
                "maximumBackoff": "maximum_backoff",
                "minimumBackoff": "minimum_backoff"
            },
            "gcp:pubsub/getTopic:getTopic": {
                "kmsKeyName": "kms_key_name",
                "messageRetentionDuration": "message_retention_duration",
                "messageStoragePolicies": "message_storage_policy",
                "schemaSettings": "schema_settings"
            },
            "gcp:pubsub/getTopicIamPolicy:getTopicIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:pubsub/getTopicMessageStoragePolicy:getTopicMessageStoragePolicy": {
                "allowedPersistenceRegions": "allowed_persistence_regions"
            },
            "gcp:pubsub/liteReservation:LiteReservation": {
                "throughputCapacity": "throughput_capacity"
            },
            "gcp:pubsub/liteSubscription:LiteSubscription": {
                "deliveryConfig": "delivery_config"
            },
            "gcp:pubsub/liteTopic:LiteTopic": {
                "partitionConfig": "partition_config",
                "reservationConfig": "reservation_config",
                "retentionConfig": "retention_config"
            },
            "gcp:pubsub/subscription:Subscription": {
                "ackDeadlineSeconds": "ack_deadline_seconds",
                "bigqueryConfig": "bigquery_config",
                "deadLetterPolicy": "dead_letter_policy",
                "enableExactlyOnceDelivery": "enable_exactly_once_delivery",
                "enableMessageOrdering": "enable_message_ordering",
                "expirationPolicy": "expiration_policy",
                "messageRetentionDuration": "message_retention_duration",
                "pushConfig": "push_config",
                "retainAckedMessages": "retain_acked_messages",
                "retryPolicy": "retry_policy"
            },
            "gcp:pubsub/subscriptionIAMPolicy:SubscriptionIAMPolicy": {
                "policyData": "policy_data"
            },
            "gcp:pubsub/topic:Topic": {
                "kmsKeyName": "kms_key_name",
                "messageRetentionDuration": "message_retention_duration",
                "messageStoragePolicy": "message_storage_policy",
                "schemaSettings": "schema_settings"
            },
            "gcp:pubsub/topicIAMPolicy:TopicIAMPolicy": {
                "policyData": "policy_data"
            },
            "gcp:recaptcha/EnterpriseKeyAndroidSettings:EnterpriseKeyAndroidSettings": {
                "allowAllPackageNames": "allow_all_package_names",
                "allowedPackageNames": "allowed_package_names"
            },
            "gcp:recaptcha/EnterpriseKeyIosSettings:EnterpriseKeyIosSettings": {
                "allowAllBundleIds": "allow_all_bundle_ids",
                "allowedBundleIds": "allowed_bundle_ids"
            },
            "gcp:recaptcha/EnterpriseKeyTestingOptions:EnterpriseKeyTestingOptions": {
                "testingChallenge": "testing_challenge",
                "testingScore": "testing_score"
            },
            "gcp:recaptcha/EnterpriseKeyWebSettings:EnterpriseKeyWebSettings": {
                "allowAllDomains": "allow_all_domains",
                "allowAmpTraffic": "allow_amp_traffic",
                "allowedDomains": "allowed_domains",
                "challengeSecurityPreference": "challenge_security_preference",
                "integrationType": "integration_type"
            },
            "gcp:recaptcha/enterpriseKey:EnterpriseKey": {
                "androidSettings": "android_settings",
                "createTime": "create_time",
                "displayName": "display_name",
                "iosSettings": "ios_settings",
                "testingOptions": "testing_options",
                "webSettings": "web_settings"
            },
            "gcp:redis/InstanceMaintenancePolicy:InstanceMaintenancePolicy": {
                "createTime": "create_time",
                "updateTime": "update_time",
                "weeklyMaintenanceWindows": "weekly_maintenance_window"
            },
            "gcp:redis/InstanceMaintenancePolicyWeeklyMaintenanceWindow:InstanceMaintenancePolicyWeeklyMaintenanceWindow": {
                "startTime": "start_time"
            },
            "gcp:redis/InstanceMaintenanceSchedule:InstanceMaintenanceSchedule": {
                "endTime": "end_time",
                "scheduleDeadlineTime": "schedule_deadline_time",
                "startTime": "start_time"
            },
            "gcp:redis/InstancePersistenceConfig:InstancePersistenceConfig": {
                "persistenceMode": "persistence_mode",
                "rdbNextSnapshotTime": "rdb_next_snapshot_time",
                "rdbSnapshotPeriod": "rdb_snapshot_period",
                "rdbSnapshotStartTime": "rdb_snapshot_start_time"
            },
            "gcp:redis/InstanceServerCaCert:InstanceServerCaCert": {
                "createTime": "create_time",
                "expireTime": "expire_time",
                "serialNumber": "serial_number",
                "sha1Fingerprint": "sha1_fingerprint"
            },
            "gcp:redis/getInstance:getInstance": {
                "alternativeLocationId": "alternative_location_id",
                "authEnabled": "auth_enabled",
                "authString": "auth_string",
                "authorizedNetwork": "authorized_network",
                "connectMode": "connect_mode",
                "createTime": "create_time",
                "currentLocationId": "current_location_id",
                "customerManagedKey": "customer_managed_key",
                "displayName": "display_name",
                "locationId": "location_id",
                "maintenancePolicies": "maintenance_policy",
                "maintenanceSchedules": "maintenance_schedule",
                "memorySizeGb": "memory_size_gb",
                "persistenceConfigs": "persistence_config",
                "persistenceIamIdentity": "persistence_iam_identity",
                "readEndpoint": "read_endpoint",
                "readEndpointPort": "read_endpoint_port",
                "readReplicasMode": "read_replicas_mode",
                "redisConfigs": "redis_configs",
                "redisVersion": "redis_version",
                "replicaCount": "replica_count",
                "reservedIpRange": "reserved_ip_range",
                "secondaryIpRange": "secondary_ip_range",
                "serverCaCerts": "server_ca_certs",
                "transitEncryptionMode": "transit_encryption_mode"
            },
            "gcp:redis/getInstanceMaintenancePolicy:getInstanceMaintenancePolicy": {
                "createTime": "create_time",
                "updateTime": "update_time",
                "weeklyMaintenanceWindows": "weekly_maintenance_window"
            },
            "gcp:redis/getInstanceMaintenancePolicyWeeklyMaintenanceWindow:getInstanceMaintenancePolicyWeeklyMaintenanceWindow": {
                "startTimes": "start_time"
            },
            "gcp:redis/getInstanceMaintenanceSchedule:getInstanceMaintenanceSchedule": {
                "endTime": "end_time",
                "scheduleDeadlineTime": "schedule_deadline_time",
                "startTime": "start_time"
            },
            "gcp:redis/getInstancePersistenceConfig:getInstancePersistenceConfig": {
                "persistenceMode": "persistence_mode",
                "rdbNextSnapshotTime": "rdb_next_snapshot_time",
                "rdbSnapshotPeriod": "rdb_snapshot_period",
                "rdbSnapshotStartTime": "rdb_snapshot_start_time"
            },
            "gcp:redis/getInstanceServerCaCert:getInstanceServerCaCert": {
                "createTime": "create_time",
                "expireTime": "expire_time",
                "serialNumber": "serial_number",
                "sha1Fingerprint": "sha1_fingerprint"
            },
            "gcp:redis/instance:Instance": {
                "alternativeLocationId": "alternative_location_id",
                "authEnabled": "auth_enabled",
                "authString": "auth_string",
                "authorizedNetwork": "authorized_network",
                "connectMode": "connect_mode",
                "createTime": "create_time",
                "currentLocationId": "current_location_id",
                "customerManagedKey": "customer_managed_key",
                "displayName": "display_name",
                "locationId": "location_id",
                "maintenancePolicy": "maintenance_policy",
                "maintenanceSchedule": "maintenance_schedule",
                "memorySizeGb": "memory_size_gb",
                "persistenceConfig": "persistence_config",
                "persistenceIamIdentity": "persistence_iam_identity",
                "readEndpoint": "read_endpoint",
                "readEndpointPort": "read_endpoint_port",
                "readReplicasMode": "read_replicas_mode",
                "redisConfigs": "redis_configs",
                "redisVersion": "redis_version",
                "replicaCount": "replica_count",
                "reservedIpRange": "reserved_ip_range",
                "secondaryIpRange": "secondary_ip_range",
                "serverCaCerts": "server_ca_certs",
                "transitEncryptionMode": "transit_encryption_mode"
            },
            "gcp:resourcemanager/lien:Lien": {
                "createTime": "create_time"
            },
            "gcp:runtimeconfig/configIamPolicy:ConfigIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:runtimeconfig/getConfigIamPolicy:getConfigIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:runtimeconfig/getVariable:getVariable": {
                "updateTime": "update_time"
            },
            "gcp:runtimeconfig/variable:Variable": {
                "updateTime": "update_time"
            },
            "gcp:secretmanager/SecretReplication:SecretReplication": {
                "userManaged": "user_managed"
            },
            "gcp:secretmanager/SecretReplicationUserManagedReplica:SecretReplicationUserManagedReplica": {
                "customerManagedEncryption": "customer_managed_encryption"
            },
            "gcp:secretmanager/SecretReplicationUserManagedReplicaCustomerManagedEncryption:SecretReplicationUserManagedReplicaCustomerManagedEncryption": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:secretmanager/SecretRotation:SecretRotation": {
                "nextRotationTime": "next_rotation_time",
                "rotationPeriod": "rotation_period"
            },
            "gcp:secretmanager/getSecret:getSecret": {
                "createTime": "create_time",
                "expireTime": "expire_time",
                "replications": "replication",
                "rotations": "rotation",
                "secretId": "secret_id"
            },
            "gcp:secretmanager/getSecretIamPolicy:getSecretIamPolicy": {
                "policyData": "policy_data",
                "secretId": "secret_id"
            },
            "gcp:secretmanager/getSecretReplication:getSecretReplication": {
                "userManageds": "user_managed"
            },
            "gcp:secretmanager/getSecretReplicationUserManagedReplica:getSecretReplicationUserManagedReplica": {
                "customerManagedEncryptions": "customer_managed_encryption"
            },
            "gcp:secretmanager/getSecretReplicationUserManagedReplicaCustomerManagedEncryption:getSecretReplicationUserManagedReplicaCustomerManagedEncryption": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:secretmanager/getSecretRotation:getSecretRotation": {
                "nextRotationTime": "next_rotation_time",
                "rotationPeriod": "rotation_period"
            },
            "gcp:secretmanager/getSecretVersion:getSecretVersion": {
                "createTime": "create_time",
                "destroyTime": "destroy_time",
                "secretData": "secret_data"
            },
            "gcp:secretmanager/getSecretVersionAccess:getSecretVersionAccess": {
                "secretData": "secret_data"
            },
            "gcp:secretmanager/secret:Secret": {
                "createTime": "create_time",
                "expireTime": "expire_time",
                "secretId": "secret_id"
            },
            "gcp:secretmanager/secretIamBinding:SecretIamBinding": {
                "secretId": "secret_id"
            },
            "gcp:secretmanager/secretIamMember:SecretIamMember": {
                "secretId": "secret_id"
            },
            "gcp:secretmanager/secretIamPolicy:SecretIamPolicy": {
                "policyData": "policy_data",
                "secretId": "secret_id"
            },
            "gcp:secretmanager/secretVersion:SecretVersion": {
                "createTime": "create_time",
                "destroyTime": "destroy_time",
                "secretData": "secret_data"
            },
            "gcp:securitycenter/getSourceIamPolicy:getSourceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:securitycenter/instanceIamPolicy:InstanceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:securitycenter/muteConfig:MuteConfig": {
                "createTime": "create_time",
                "mostRecentEditor": "most_recent_editor",
                "muteConfigId": "mute_config_id",
                "updateTime": "update_time"
            },
            "gcp:securitycenter/notificationConfig:NotificationConfig": {
                "configId": "config_id",
                "pubsubTopic": "pubsub_topic",
                "serviceAccount": "service_account",
                "streamingConfig": "streaming_config"
            },
            "gcp:securitycenter/source:Source": {
                "displayName": "display_name"
            },
            "gcp:securitycenter/sourceIamPolicy:SourceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:serviceAccount/account:Account": {
                "accountId": "account_id",
                "displayName": "display_name",
                "uniqueId": "unique_id"
            },
            "gcp:serviceAccount/getAccount:getAccount": {
                "accountId": "account_id",
                "displayName": "display_name",
                "uniqueId": "unique_id"
            },
            "gcp:serviceAccount/getAccountAccessToken:getAccountAccessToken": {
                "accessToken": "access_token",
                "targetServiceAccount": "target_service_account"
            },
            "gcp:serviceAccount/getAccountIdToken:getAccountIdToken": {
                "idToken": "id_token",
                "includeEmail": "include_email",
                "targetAudience": "target_audience",
                "targetServiceAccount": "target_service_account"
            },
            "gcp:serviceAccount/getAccountJwt:getAccountJwt": {
                "expiresIn": "expires_in",
                "targetServiceAccount": "target_service_account"
            },
            "gcp:serviceAccount/getAccountKey:getAccountKey": {
                "keyAlgorithm": "key_algorithm",
                "publicKey": "public_key",
                "publicKeyType": "public_key_type"
            },
            "gcp:serviceAccount/getIamPolicy:getIamPolicy": {
                "policyData": "policy_data",
                "serviceAccountId": "service_account_id"
            },
            "gcp:serviceAccount/iAMBinding:IAMBinding": {
                "serviceAccountId": "service_account_id"
            },
            "gcp:serviceAccount/iAMMember:IAMMember": {
                "serviceAccountId": "service_account_id"
            },
            "gcp:serviceAccount/iAMPolicy:IAMPolicy": {
                "policyData": "policy_data",
                "serviceAccountId": "service_account_id"
            },
            "gcp:serviceAccount/key:Key": {
                "keyAlgorithm": "key_algorithm",
                "privateKey": "private_key",
                "privateKeyType": "private_key_type",
                "publicKey": "public_key",
                "publicKeyData": "public_key_data",
                "publicKeyType": "public_key_type",
                "serviceAccountId": "service_account_id",
                "validAfter": "valid_after",
                "validBefore": "valid_before"
            },
            "gcp:servicedirectory/endpoint:Endpoint": {
                "endpointId": "endpoint_id"
            },
            "gcp:servicedirectory/getNamespaceIamPolicy:getNamespaceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:servicedirectory/getServiceIamPolicy:getServiceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:servicedirectory/namespace:Namespace": {
                "namespaceId": "namespace_id"
            },
            "gcp:servicedirectory/namespaceIamPolicy:NamespaceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:servicedirectory/service:Service": {
                "serviceId": "service_id"
            },
            "gcp:servicedirectory/serviceIamPolicy:ServiceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:servicenetworking/connection:Connection": {
                "reservedPeeringRanges": "reserved_peering_ranges"
            },
            "gcp:servicenetworking/getPeeredDnsDomain:getPeeredDnsDomain": {
                "dnsSuffix": "dns_suffix"
            },
            "gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain": {
                "dnsSuffix": "dns_suffix"
            },
            "gcp:serviceusage/consumerQuotaOverride:ConsumerQuotaOverride": {
                "overrideValue": "override_value"
            },
            "gcp:sourcerepo/RepositoryPubsubConfig:RepositoryPubsubConfig": {
                "messageFormat": "message_format",
                "serviceAccountEmail": "service_account_email"
            },
            "gcp:sourcerepo/getRepository:getRepository": {
                "pubsubConfigs": "pubsub_configs"
            },
            "gcp:sourcerepo/getRepositoryIamPolicy:getRepositoryIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:sourcerepo/getRepositoryPubsubConfig:getRepositoryPubsubConfig": {
                "messageFormat": "message_format",
                "serviceAccountEmail": "service_account_email"
            },
            "gcp:sourcerepo/repository:Repository": {
                "pubsubConfigs": "pubsub_configs"
            },
            "gcp:sourcerepo/repositoryIamPolicy:RepositoryIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:spanner/DatabaseEncryptionConfig:DatabaseEncryptionConfig": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:spanner/database:Database": {
                "databaseDialect": "database_dialect",
                "ddls": "ddl",
                "deletionProtection": "deletion_protection",
                "enableDropProtection": "enable_drop_protection",
                "encryptionConfig": "encryption_config",
                "versionRetentionPeriod": "version_retention_period"
            },
            "gcp:spanner/databaseIAMPolicy:DatabaseIAMPolicy": {
                "policyData": "policy_data"
            },
            "gcp:spanner/getDatabaseIamPolicy:getDatabaseIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:spanner/getInstance:getInstance": {
                "displayName": "display_name",
                "forceDestroy": "force_destroy",
                "numNodes": "num_nodes",
                "processingUnits": "processing_units"
            },
            "gcp:spanner/getInstanceIamPolicy:getInstanceIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:spanner/instance:Instance": {
                "displayName": "display_name",
                "forceDestroy": "force_destroy",
                "numNodes": "num_nodes",
                "processingUnits": "processing_units"
            },
            "gcp:spanner/instanceIAMPolicy:InstanceIAMPolicy": {
                "policyData": "policy_data"
            },
            "gcp:sql/DatabaseInstanceClone:DatabaseInstanceClone": {
                "allocatedIpRange": "allocated_ip_range",
                "databaseNames": "database_names",
                "pointInTime": "point_in_time",
                "sourceInstanceName": "source_instance_name"
            },
            "gcp:sql/DatabaseInstanceIpAddress:DatabaseInstanceIpAddress": {
                "ipAddress": "ip_address",
                "timeToRetire": "time_to_retire"
            },
            "gcp:sql/DatabaseInstanceReplicaConfiguration:DatabaseInstanceReplicaConfiguration": {
                "caCertificate": "ca_certificate",
                "clientCertificate": "client_certificate",
                "clientKey": "client_key",
                "connectRetryInterval": "connect_retry_interval",
                "dumpFilePath": "dump_file_path",
                "failoverTarget": "failover_target",
                "masterHeartbeatPeriod": "master_heartbeat_period",
                "sslCipher": "ssl_cipher",
                "verifyServerCertificate": "verify_server_certificate"
            },
            "gcp:sql/DatabaseInstanceRestoreBackupContext:DatabaseInstanceRestoreBackupContext": {
                "backupRunId": "backup_run_id",
                "instanceId": "instance_id"
            },
            "gcp:sql/DatabaseInstanceServerCaCert:DatabaseInstanceServerCaCert": {
                "commonName": "common_name",
                "createTime": "create_time",
                "expirationTime": "expiration_time",
                "sha1Fingerprint": "sha1_fingerprint"
            },
            "gcp:sql/DatabaseInstanceSettings:DatabaseInstanceSettings": {
                "activationPolicy": "activation_policy",
                "activeDirectoryConfig": "active_directory_config",
                "advancedMachineFeatures": "advanced_machine_features",
                "availabilityType": "availability_type",
                "backupConfiguration": "backup_configuration",
                "connectorEnforcement": "connector_enforcement",
                "dataCacheConfig": "data_cache_config",
                "databaseFlags": "database_flags",
                "deletionProtectionEnabled": "deletion_protection_enabled",
                "denyMaintenancePeriod": "deny_maintenance_period",
                "diskAutoresize": "disk_autoresize",
                "diskAutoresizeLimit": "disk_autoresize_limit",
                "diskSize": "disk_size",
                "diskType": "disk_type",
                "insightsConfig": "insights_config",
                "ipConfiguration": "ip_configuration",
                "locationPreference": "location_preference",
                "maintenanceWindow": "maintenance_window",
                "passwordValidationPolicy": "password_validation_policy",
                "pricingPlan": "pricing_plan",
                "sqlServerAuditConfig": "sql_server_audit_config",
                "timeZone": "time_zone",
                "userLabels": "user_labels"
            },
            "gcp:sql/DatabaseInstanceSettingsAdvancedMachineFeatures:DatabaseInstanceSettingsAdvancedMachineFeatures": {
                "threadsPerCore": "threads_per_core"
            },
            "gcp:sql/DatabaseInstanceSettingsBackupConfiguration:DatabaseInstanceSettingsBackupConfiguration": {
                "backupRetentionSettings": "backup_retention_settings",
                "binaryLogEnabled": "binary_log_enabled",
                "pointInTimeRecoveryEnabled": "point_in_time_recovery_enabled",
                "startTime": "start_time",
                "transactionLogRetentionDays": "transaction_log_retention_days"
            },
            "gcp:sql/DatabaseInstanceSettingsBackupConfigurationBackupRetentionSettings:DatabaseInstanceSettingsBackupConfigurationBackupRetentionSettings": {
                "retainedBackups": "retained_backups",
                "retentionUnit": "retention_unit"
            },
            "gcp:sql/DatabaseInstanceSettingsDataCacheConfig:DatabaseInstanceSettingsDataCacheConfig": {
                "dataCacheEnabled": "data_cache_enabled"
            },
            "gcp:sql/DatabaseInstanceSettingsDenyMaintenancePeriod:DatabaseInstanceSettingsDenyMaintenancePeriod": {
                "endDate": "end_date",
                "startDate": "start_date"
            },
            "gcp:sql/DatabaseInstanceSettingsInsightsConfig:DatabaseInstanceSettingsInsightsConfig": {
                "queryInsightsEnabled": "query_insights_enabled",
                "queryPlansPerMinute": "query_plans_per_minute",
                "queryStringLength": "query_string_length",
                "recordApplicationTags": "record_application_tags",
                "recordClientAddress": "record_client_address"
            },
            "gcp:sql/DatabaseInstanceSettingsIpConfiguration:DatabaseInstanceSettingsIpConfiguration": {
                "allocatedIpRange": "allocated_ip_range",
                "authorizedNetworks": "authorized_networks",
                "enablePrivatePathForGoogleCloudServices": "enable_private_path_for_google_cloud_services",
                "ipv4Enabled": "ipv4_enabled",
                "privateNetwork": "private_network",
                "requireSsl": "require_ssl"
            },
            "gcp:sql/DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork:DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork": {
                "expirationTime": "expiration_time"
            },
            "gcp:sql/DatabaseInstanceSettingsLocationPreference:DatabaseInstanceSettingsLocationPreference": {
                "followGaeApplication": "follow_gae_application",
                "secondaryZone": "secondary_zone"
            },
            "gcp:sql/DatabaseInstanceSettingsMaintenanceWindow:DatabaseInstanceSettingsMaintenanceWindow": {
                "updateTrack": "update_track"
            },
            "gcp:sql/DatabaseInstanceSettingsPasswordValidationPolicy:DatabaseInstanceSettingsPasswordValidationPolicy": {
                "disallowUsernameSubstring": "disallow_username_substring",
                "enablePasswordPolicy": "enable_password_policy",
                "minLength": "min_length",
                "passwordChangeInterval": "password_change_interval",
                "reuseInterval": "reuse_interval"
            },
            "gcp:sql/DatabaseInstanceSettingsSqlServerAuditConfig:DatabaseInstanceSettingsSqlServerAuditConfig": {
                "retentionInterval": "retention_interval",
                "uploadInterval": "upload_interval"
            },
            "gcp:sql/UserPasswordPolicy:UserPasswordPolicy": {
                "allowedFailedAttempts": "allowed_failed_attempts",
                "enableFailedAttemptsCheck": "enable_failed_attempts_check",
                "enablePasswordVerification": "enable_password_verification",
                "passwordExpirationDuration": "password_expiration_duration",
                "statuses": "status"
            },
            "gcp:sql/UserPasswordPolicyStatus:UserPasswordPolicyStatus": {
                "passwordExpirationTime": "password_expiration_time"
            },
            "gcp:sql/UserSqlServerUserDetail:UserSqlServerUserDetail": {
                "serverRoles": "server_roles"
            },
            "gcp:sql/database:Database": {
                "deletionPolicy": "deletion_policy",
                "selfLink": "self_link"
            },
            "gcp:sql/databaseInstance:DatabaseInstance": {
                "availableMaintenanceVersions": "available_maintenance_versions",
                "connectionName": "connection_name",
                "databaseVersion": "database_version",
                "deletionProtection": "deletion_protection",
                "encryptionKeyName": "encryption_key_name",
                "firstIpAddress": "first_ip_address",
                "instanceType": "instance_type",
                "ipAddresses": "ip_address",
                "maintenanceVersion": "maintenance_version",
                "masterInstanceName": "master_instance_name",
                "privateIpAddress": "private_ip_address",
                "publicIpAddress": "public_ip_address",
                "replicaConfiguration": "replica_configuration",
                "restoreBackupContext": "restore_backup_context",
                "rootPassword": "root_password",
                "selfLink": "self_link",
                "serverCaCerts": "server_ca_cert",
                "serviceAccountEmailAddress": "service_account_email_address"
            },
            "gcp:sql/getBackupRun:getBackupRun": {
                "backupId": "backup_id",
                "mostRecent": "most_recent",
                "startTime": "start_time"
            },
            "gcp:sql/getCaCerts:getCaCerts": {
                "activeVersion": "active_version"
            },
            "gcp:sql/getCaCertsCert:getCaCertsCert": {
                "commonName": "common_name",
                "createTime": "create_time",
                "expirationTime": "expiration_time",
                "sha1Fingerprint": "sha1_fingerprint"
            },
            "gcp:sql/getDatabase:getDatabase": {
                "deletionPolicy": "deletion_policy",
                "selfLink": "self_link"
            },
            "gcp:sql/getDatabaseInstance:getDatabaseInstance": {
                "availableMaintenanceVersions": "available_maintenance_versions",
                "clones": "clone",
                "connectionName": "connection_name",
                "databaseVersion": "database_version",
                "deletionProtection": "deletion_protection",
                "encryptionKeyName": "encryption_key_name",
                "firstIpAddress": "first_ip_address",
                "instanceType": "instance_type",
                "ipAddresses": "ip_address",
                "maintenanceVersion": "maintenance_version",
                "masterInstanceName": "master_instance_name",
                "privateIpAddress": "private_ip_address",
                "publicIpAddress": "public_ip_address",
                "replicaConfigurations": "replica_configuration",
                "restoreBackupContexts": "restore_backup_context",
                "rootPassword": "root_password",
                "selfLink": "self_link",
                "serverCaCerts": "server_ca_cert",
                "serviceAccountEmailAddress": "service_account_email_address"
            },
            "gcp:sql/getDatabaseInstanceClone:getDatabaseInstanceClone": {
                "allocatedIpRange": "allocated_ip_range",
                "databaseNames": "database_names",
                "pointInTime": "point_in_time",
                "sourceInstanceName": "source_instance_name"
            },
            "gcp:sql/getDatabaseInstanceIpAddress:getDatabaseInstanceIpAddress": {
                "ipAddress": "ip_address",
                "timeToRetire": "time_to_retire"
            },
            "gcp:sql/getDatabaseInstanceReplicaConfiguration:getDatabaseInstanceReplicaConfiguration": {
                "caCertificate": "ca_certificate",
                "clientCertificate": "client_certificate",
                "clientKey": "client_key",
                "connectRetryInterval": "connect_retry_interval",
                "dumpFilePath": "dump_file_path",
                "failoverTarget": "failover_target",
                "masterHeartbeatPeriod": "master_heartbeat_period",
                "sslCipher": "ssl_cipher",
                "verifyServerCertificate": "verify_server_certificate"
            },
            "gcp:sql/getDatabaseInstanceRestoreBackupContext:getDatabaseInstanceRestoreBackupContext": {
                "backupRunId": "backup_run_id",
                "instanceId": "instance_id"
            },
            "gcp:sql/getDatabaseInstanceServerCaCert:getDatabaseInstanceServerCaCert": {
                "commonName": "common_name",
                "createTime": "create_time",
                "expirationTime": "expiration_time",
                "sha1Fingerprint": "sha1_fingerprint"
            },
            "gcp:sql/getDatabaseInstanceSetting:getDatabaseInstanceSetting": {
                "activationPolicy": "activation_policy",
                "activeDirectoryConfigs": "active_directory_config",
                "advancedMachineFeatures": "advanced_machine_features",
                "availabilityType": "availability_type",
                "backupConfigurations": "backup_configuration",
                "connectorEnforcement": "connector_enforcement",
                "dataCacheConfigs": "data_cache_config",
                "databaseFlags": "database_flags",
                "deletionProtectionEnabled": "deletion_protection_enabled",
                "denyMaintenancePeriods": "deny_maintenance_period",
                "diskAutoresize": "disk_autoresize",
                "diskAutoresizeLimit": "disk_autoresize_limit",
                "diskSize": "disk_size",
                "diskType": "disk_type",
                "insightsConfigs": "insights_config",
                "ipConfigurations": "ip_configuration",
                "locationPreferences": "location_preference",
                "maintenanceWindows": "maintenance_window",
                "passwordValidationPolicies": "password_validation_policy",
                "pricingPlan": "pricing_plan",
                "sqlServerAuditConfigs": "sql_server_audit_config",
                "timeZone": "time_zone",
                "userLabels": "user_labels"
            },
            "gcp:sql/getDatabaseInstanceSettingAdvancedMachineFeature:getDatabaseInstanceSettingAdvancedMachineFeature": {
                "threadsPerCore": "threads_per_core"
            },
            "gcp:sql/getDatabaseInstanceSettingBackupConfiguration:getDatabaseInstanceSettingBackupConfiguration": {
                "backupRetentionSettings": "backup_retention_settings",
                "binaryLogEnabled": "binary_log_enabled",
                "pointInTimeRecoveryEnabled": "point_in_time_recovery_enabled",
                "startTime": "start_time",
                "transactionLogRetentionDays": "transaction_log_retention_days"
            },
            "gcp:sql/getDatabaseInstanceSettingBackupConfigurationBackupRetentionSetting:getDatabaseInstanceSettingBackupConfigurationBackupRetentionSetting": {
                "retainedBackups": "retained_backups",
                "retentionUnit": "retention_unit"
            },
            "gcp:sql/getDatabaseInstanceSettingDataCacheConfig:getDatabaseInstanceSettingDataCacheConfig": {
                "dataCacheEnabled": "data_cache_enabled"
            },
            "gcp:sql/getDatabaseInstanceSettingDenyMaintenancePeriod:getDatabaseInstanceSettingDenyMaintenancePeriod": {
                "endDate": "end_date",
                "startDate": "start_date"
            },
            "gcp:sql/getDatabaseInstanceSettingInsightsConfig:getDatabaseInstanceSettingInsightsConfig": {
                "queryInsightsEnabled": "query_insights_enabled",
                "queryPlansPerMinute": "query_plans_per_minute",
                "queryStringLength": "query_string_length",
                "recordApplicationTags": "record_application_tags",
                "recordClientAddress": "record_client_address"
            },
            "gcp:sql/getDatabaseInstanceSettingIpConfiguration:getDatabaseInstanceSettingIpConfiguration": {
                "allocatedIpRange": "allocated_ip_range",
                "authorizedNetworks": "authorized_networks",
                "enablePrivatePathForGoogleCloudServices": "enable_private_path_for_google_cloud_services",
                "ipv4Enabled": "ipv4_enabled",
                "privateNetwork": "private_network",
                "requireSsl": "require_ssl"
            },
            "gcp:sql/getDatabaseInstanceSettingIpConfigurationAuthorizedNetwork:getDatabaseInstanceSettingIpConfigurationAuthorizedNetwork": {
                "expirationTime": "expiration_time"
            },
            "gcp:sql/getDatabaseInstanceSettingLocationPreference:getDatabaseInstanceSettingLocationPreference": {
                "followGaeApplication": "follow_gae_application",
                "secondaryZone": "secondary_zone"
            },
            "gcp:sql/getDatabaseInstanceSettingMaintenanceWindow:getDatabaseInstanceSettingMaintenanceWindow": {
                "updateTrack": "update_track"
            },
            "gcp:sql/getDatabaseInstanceSettingPasswordValidationPolicy:getDatabaseInstanceSettingPasswordValidationPolicy": {
                "disallowUsernameSubstring": "disallow_username_substring",
                "enablePasswordPolicy": "enable_password_policy",
                "minLength": "min_length",
                "passwordChangeInterval": "password_change_interval",
                "reuseInterval": "reuse_interval"
            },
            "gcp:sql/getDatabaseInstanceSettingSqlServerAuditConfig:getDatabaseInstanceSettingSqlServerAuditConfig": {
                "retentionInterval": "retention_interval",
                "uploadInterval": "upload_interval"
            },
            "gcp:sql/getDatabaseInstances:getDatabaseInstances": {
                "databaseVersion": "database_version"
            },
            "gcp:sql/getDatabaseInstancesInstance:getDatabaseInstancesInstance": {
                "availableMaintenanceVersions": "available_maintenance_versions",
                "clones": "clone",
                "connectionName": "connection_name",
                "databaseVersion": "database_version",
                "deletionProtection": "deletion_protection",
                "encryptionKeyName": "encryption_key_name",
                "firstIpAddress": "first_ip_address",
                "instanceType": "instance_type",
                "ipAddresses": "ip_address",
                "maintenanceVersion": "maintenance_version",
                "masterInstanceName": "master_instance_name",
                "privateIpAddress": "private_ip_address",
                "publicIpAddress": "public_ip_address",
                "replicaConfigurations": "replica_configuration",
                "restoreBackupContexts": "restore_backup_context",
                "rootPassword": "root_password",
                "selfLink": "self_link",
                "serverCaCerts": "server_ca_cert",
                "serviceAccountEmailAddress": "service_account_email_address"
            },
            "gcp:sql/getDatabaseInstancesInstanceClone:getDatabaseInstancesInstanceClone": {
                "allocatedIpRange": "allocated_ip_range",
                "databaseNames": "database_names",
                "pointInTime": "point_in_time",
                "sourceInstanceName": "source_instance_name"
            },
            "gcp:sql/getDatabaseInstancesInstanceIpAddress:getDatabaseInstancesInstanceIpAddress": {
                "ipAddress": "ip_address",
                "timeToRetire": "time_to_retire"
            },
            "gcp:sql/getDatabaseInstancesInstanceReplicaConfiguration:getDatabaseInstancesInstanceReplicaConfiguration": {
                "caCertificate": "ca_certificate",
                "clientCertificate": "client_certificate",
                "clientKey": "client_key",
                "connectRetryInterval": "connect_retry_interval",
                "dumpFilePath": "dump_file_path",
                "failoverTarget": "failover_target",
                "masterHeartbeatPeriod": "master_heartbeat_period",
                "sslCipher": "ssl_cipher",
                "verifyServerCertificate": "verify_server_certificate"
            },
            "gcp:sql/getDatabaseInstancesInstanceRestoreBackupContext:getDatabaseInstancesInstanceRestoreBackupContext": {
                "backupRunId": "backup_run_id",
                "instanceId": "instance_id"
            },
            "gcp:sql/getDatabaseInstancesInstanceServerCaCert:getDatabaseInstancesInstanceServerCaCert": {
                "commonName": "common_name",
                "createTime": "create_time",
                "expirationTime": "expiration_time",
                "sha1Fingerprint": "sha1_fingerprint"
            },
            "gcp:sql/getDatabaseInstancesInstanceSetting:getDatabaseInstancesInstanceSetting": {
                "activationPolicy": "activation_policy",
                "activeDirectoryConfigs": "active_directory_config",
                "advancedMachineFeatures": "advanced_machine_features",
                "availabilityType": "availability_type",
                "backupConfigurations": "backup_configuration",
                "connectorEnforcement": "connector_enforcement",
                "dataCacheConfigs": "data_cache_config",
                "databaseFlags": "database_flags",
                "deletionProtectionEnabled": "deletion_protection_enabled",
                "denyMaintenancePeriods": "deny_maintenance_period",
                "diskAutoresize": "disk_autoresize",
                "diskAutoresizeLimit": "disk_autoresize_limit",
                "diskSize": "disk_size",
                "diskType": "disk_type",
                "insightsConfigs": "insights_config",
                "ipConfigurations": "ip_configuration",
                "locationPreferences": "location_preference",
                "maintenanceWindows": "maintenance_window",
                "passwordValidationPolicies": "password_validation_policy",
                "pricingPlan": "pricing_plan",
                "sqlServerAuditConfigs": "sql_server_audit_config",
                "timeZone": "time_zone",
                "userLabels": "user_labels"
            },
            "gcp:sql/getDatabaseInstancesInstanceSettingAdvancedMachineFeature:getDatabaseInstancesInstanceSettingAdvancedMachineFeature": {
                "threadsPerCore": "threads_per_core"
            },
            "gcp:sql/getDatabaseInstancesInstanceSettingBackupConfiguration:getDatabaseInstancesInstanceSettingBackupConfiguration": {
                "backupRetentionSettings": "backup_retention_settings",
                "binaryLogEnabled": "binary_log_enabled",
                "pointInTimeRecoveryEnabled": "point_in_time_recovery_enabled",
                "startTime": "start_time",
                "transactionLogRetentionDays": "transaction_log_retention_days"
            },
            "gcp:sql/getDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSetting:getDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSetting": {
                "retainedBackups": "retained_backups",
                "retentionUnit": "retention_unit"
            },
            "gcp:sql/getDatabaseInstancesInstanceSettingDataCacheConfig:getDatabaseInstancesInstanceSettingDataCacheConfig": {
                "dataCacheEnabled": "data_cache_enabled"
            },
            "gcp:sql/getDatabaseInstancesInstanceSettingDenyMaintenancePeriod:getDatabaseInstancesInstanceSettingDenyMaintenancePeriod": {
                "endDate": "end_date",
                "startDate": "start_date"
            },
            "gcp:sql/getDatabaseInstancesInstanceSettingInsightsConfig:getDatabaseInstancesInstanceSettingInsightsConfig": {
                "queryInsightsEnabled": "query_insights_enabled",
                "queryPlansPerMinute": "query_plans_per_minute",
                "queryStringLength": "query_string_length",
                "recordApplicationTags": "record_application_tags",
                "recordClientAddress": "record_client_address"
            },
            "gcp:sql/getDatabaseInstancesInstanceSettingIpConfiguration:getDatabaseInstancesInstanceSettingIpConfiguration": {
                "allocatedIpRange": "allocated_ip_range",
                "authorizedNetworks": "authorized_networks",
                "enablePrivatePathForGoogleCloudServices": "enable_private_path_for_google_cloud_services",
                "ipv4Enabled": "ipv4_enabled",
                "privateNetwork": "private_network",
                "requireSsl": "require_ssl"
            },
            "gcp:sql/getDatabaseInstancesInstanceSettingIpConfigurationAuthorizedNetwork:getDatabaseInstancesInstanceSettingIpConfigurationAuthorizedNetwork": {
                "expirationTime": "expiration_time"
            },
            "gcp:sql/getDatabaseInstancesInstanceSettingLocationPreference:getDatabaseInstancesInstanceSettingLocationPreference": {
                "followGaeApplication": "follow_gae_application",
                "secondaryZone": "secondary_zone"
            },
            "gcp:sql/getDatabaseInstancesInstanceSettingMaintenanceWindow:getDatabaseInstancesInstanceSettingMaintenanceWindow": {
                "updateTrack": "update_track"
            },
            "gcp:sql/getDatabaseInstancesInstanceSettingPasswordValidationPolicy:getDatabaseInstancesInstanceSettingPasswordValidationPolicy": {
                "disallowUsernameSubstring": "disallow_username_substring",
                "enablePasswordPolicy": "enable_password_policy",
                "minLength": "min_length",
                "passwordChangeInterval": "password_change_interval",
                "reuseInterval": "reuse_interval"
            },
            "gcp:sql/getDatabaseInstancesInstanceSettingSqlServerAuditConfig:getDatabaseInstancesInstanceSettingSqlServerAuditConfig": {
                "retentionInterval": "retention_interval",
                "uploadInterval": "upload_interval"
            },
            "gcp:sql/getDatabasesDatabase:getDatabasesDatabase": {
                "deletionPolicy": "deletion_policy",
                "selfLink": "self_link"
            },
            "gcp:sql/getTiersTier:getTiersTier": {
                "diskQuota": "disk_quota",
                "regions": "region"
            },
            "gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance": {
                "caCertificate": "ca_certificate",
                "clientCertificate": "client_certificate",
                "clientKey": "client_key",
                "databaseVersion": "database_version",
                "dumpFilePath": "dump_file_path"
            },
            "gcp:sql/sslCert:SslCert": {
                "certSerialNumber": "cert_serial_number",
                "commonName": "common_name",
                "createTime": "create_time",
                "expirationTime": "expiration_time",
                "privateKey": "private_key",
                "serverCaCert": "server_ca_cert",
                "sha1Fingerprint": "sha1_fingerprint"
            },
            "gcp:sql/user:User": {
                "deletionPolicy": "deletion_policy",
                "passwordPolicy": "password_policy",
                "sqlServerUserDetails": "sql_server_user_details"
            },
            "gcp:storage/BucketCor:BucketCor": {
                "maxAgeSeconds": "max_age_seconds",
                "methods": "method",
                "origins": "origin",
                "responseHeaders": "response_header"
            },
            "gcp:storage/BucketCustomPlacementConfig:BucketCustomPlacementConfig": {
                "dataLocations": "data_locations"
            },
            "gcp:storage/BucketEncryption:BucketEncryption": {
                "defaultKmsKeyName": "default_kms_key_name"
            },
            "gcp:storage/BucketLifecycleRuleAction:BucketLifecycleRuleAction": {
                "storageClass": "storage_class"
            },
            "gcp:storage/BucketLifecycleRuleCondition:BucketLifecycleRuleCondition": {
                "createdBefore": "created_before",
                "customTimeBefore": "custom_time_before",
                "daysSinceCustomTime": "days_since_custom_time",
                "daysSinceNoncurrentTime": "days_since_noncurrent_time",
                "matchesPrefixes": "matches_prefix",
                "matchesStorageClasses": "matches_storage_class",
                "matchesSuffixes": "matches_suffix",
                "noncurrentTimeBefore": "noncurrent_time_before",
                "numNewerVersions": "num_newer_versions",
                "withState": "with_state"
            },
            "gcp:storage/BucketLogging:BucketLogging": {
                "logBucket": "log_bucket",
                "logObjectPrefix": "log_object_prefix"
            },
            "gcp:storage/BucketObjectCustomerEncryption:BucketObjectCustomerEncryption": {
                "encryptionAlgorithm": "encryption_algorithm",
                "encryptionKey": "encryption_key"
            },
            "gcp:storage/BucketRetentionPolicy:BucketRetentionPolicy": {
                "isLocked": "is_locked",
                "retentionPeriod": "retention_period"
            },
            "gcp:storage/BucketWebsite:BucketWebsite": {
                "mainPageSuffix": "main_page_suffix",
                "notFoundPage": "not_found_page"
            },
            "gcp:storage/DefaultObjectAccessControlProjectTeam:DefaultObjectAccessControlProjectTeam": {
                "projectNumber": "project_number"
            },
            "gcp:storage/ObjectAccessControlProjectTeam:ObjectAccessControlProjectTeam": {
                "projectNumber": "project_number"
            },
            "gcp:storage/TransferAgentPoolBandwidthLimit:TransferAgentPoolBandwidthLimit": {
                "limitMbps": "limit_mbps"
            },
            "gcp:storage/TransferJobNotificationConfig:TransferJobNotificationConfig": {
                "eventTypes": "event_types",
                "payloadFormat": "payload_format",
                "pubsubTopic": "pubsub_topic"
            },
            "gcp:storage/TransferJobSchedule:TransferJobSchedule": {
                "repeatInterval": "repeat_interval",
                "scheduleEndDate": "schedule_end_date",
                "scheduleStartDate": "schedule_start_date",
                "startTimeOfDay": "start_time_of_day"
            },
            "gcp:storage/TransferJobTransferSpec:TransferJobTransferSpec": {
                "awsS3DataSource": "aws_s3_data_source",
                "azureBlobStorageDataSource": "azure_blob_storage_data_source",
                "gcsDataSink": "gcs_data_sink",
                "gcsDataSource": "gcs_data_source",
                "httpDataSource": "http_data_source",
                "objectConditions": "object_conditions",
                "posixDataSink": "posix_data_sink",
                "posixDataSource": "posix_data_source",
                "sinkAgentPoolName": "sink_agent_pool_name",
                "sourceAgentPoolName": "source_agent_pool_name",
                "transferOptions": "transfer_options"
            },
            "gcp:storage/TransferJobTransferSpecAwsS3DataSource:TransferJobTransferSpecAwsS3DataSource": {
                "awsAccessKey": "aws_access_key",
                "bucketName": "bucket_name",
                "roleArn": "role_arn"
            },
            "gcp:storage/TransferJobTransferSpecAwsS3DataSourceAwsAccessKey:TransferJobTransferSpecAwsS3DataSourceAwsAccessKey": {
                "accessKeyId": "access_key_id",
                "secretAccessKey": "secret_access_key"
            },
            "gcp:storage/TransferJobTransferSpecAzureBlobStorageDataSource:TransferJobTransferSpecAzureBlobStorageDataSource": {
                "azureCredentials": "azure_credentials",
                "storageAccount": "storage_account"
            },
            "gcp:storage/TransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentials:TransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentials": {
                "sasToken": "sas_token"
            },
            "gcp:storage/TransferJobTransferSpecGcsDataSink:TransferJobTransferSpecGcsDataSink": {
                "bucketName": "bucket_name"
            },
            "gcp:storage/TransferJobTransferSpecGcsDataSource:TransferJobTransferSpecGcsDataSource": {
                "bucketName": "bucket_name"
            },
            "gcp:storage/TransferJobTransferSpecHttpDataSource:TransferJobTransferSpecHttpDataSource": {
                "listUrl": "list_url"
            },
            "gcp:storage/TransferJobTransferSpecObjectConditions:TransferJobTransferSpecObjectConditions": {
                "excludePrefixes": "exclude_prefixes",
                "includePrefixes": "include_prefixes",
                "lastModifiedBefore": "last_modified_before",
                "lastModifiedSince": "last_modified_since",
                "maxTimeElapsedSinceLastModification": "max_time_elapsed_since_last_modification",
                "minTimeElapsedSinceLastModification": "min_time_elapsed_since_last_modification"
            },
            "gcp:storage/TransferJobTransferSpecPosixDataSink:TransferJobTransferSpecPosixDataSink": {
                "rootDirectory": "root_directory"
            },
            "gcp:storage/TransferJobTransferSpecPosixDataSource:TransferJobTransferSpecPosixDataSource": {
                "rootDirectory": "root_directory"
            },
            "gcp:storage/TransferJobTransferSpecTransferOptions:TransferJobTransferSpecTransferOptions": {
                "deleteObjectsFromSourceAfterTransfer": "delete_objects_from_source_after_transfer",
                "deleteObjectsUniqueInSink": "delete_objects_unique_in_sink",
                "overwriteObjectsAlreadyExistingInSink": "overwrite_objects_already_existing_in_sink",
                "overwriteWhen": "overwrite_when"
            },
            "gcp:storage/bucket:Bucket": {
                "customPlacementConfig": "custom_placement_config",
                "defaultEventBasedHold": "default_event_based_hold",
                "forceDestroy": "force_destroy",
                "lifecycleRules": "lifecycle_rule",
                "publicAccessPrevention": "public_access_prevention",
                "requesterPays": "requester_pays",
                "retentionPolicy": "retention_policy",
                "selfLink": "self_link",
                "storageClass": "storage_class",
                "uniformBucketLevelAccess": "uniform_bucket_level_access"
            },
            "gcp:storage/bucketACL:BucketACL": {
                "defaultAcl": "default_acl",
                "predefinedAcl": "predefined_acl",
                "roleEntities": "role_entity"
            },
            "gcp:storage/bucketIAMPolicy:BucketIAMPolicy": {
                "policyData": "policy_data"
            },
            "gcp:storage/bucketObject:BucketObject": {
                "cacheControl": "cache_control",
                "contentDisposition": "content_disposition",
                "contentEncoding": "content_encoding",
                "contentLanguage": "content_language",
                "contentType": "content_type",
                "customerEncryption": "customer_encryption",
                "detectMd5hash": "detect_md5hash",
                "eventBasedHold": "event_based_hold",
                "kmsKeyName": "kms_key_name",
                "mediaLink": "media_link",
                "outputName": "output_name",
                "selfLink": "self_link",
                "storageClass": "storage_class",
                "temporaryHold": "temporary_hold"
            },
            "gcp:storage/defaultObjectACL:DefaultObjectACL": {
                "roleEntities": "role_entity"
            },
            "gcp:storage/defaultObjectAccessControl:DefaultObjectAccessControl": {
                "entityId": "entity_id",
                "projectTeams": "project_team"
            },
            "gcp:storage/getBucket:getBucket": {
                "autoclasses": "autoclass",
                "customPlacementConfigs": "custom_placement_config",
                "defaultEventBasedHold": "default_event_based_hold",
                "encryptions": "encryption",
                "forceDestroy": "force_destroy",
                "lifecycleRules": "lifecycle_rule",
                "loggings": "logging",
                "publicAccessPrevention": "public_access_prevention",
                "requesterPays": "requester_pays",
                "retentionPolicies": "retention_policy",
                "selfLink": "self_link",
                "storageClass": "storage_class",
                "uniformBucketLevelAccess": "uniform_bucket_level_access",
                "versionings": "versioning",
                "websites": "website"
            },
            "gcp:storage/getBucketCor:getBucketCor": {
                "maxAgeSeconds": "max_age_seconds",
                "methods": "method",
                "origins": "origin",
                "responseHeaders": "response_header"
            },
            "gcp:storage/getBucketCustomPlacementConfig:getBucketCustomPlacementConfig": {
                "dataLocations": "data_locations"
            },
            "gcp:storage/getBucketEncryption:getBucketEncryption": {
                "defaultKmsKeyName": "default_kms_key_name"
            },
            "gcp:storage/getBucketIamPolicy:getBucketIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:storage/getBucketLifecycleRule:getBucketLifecycleRule": {
                "actions": "action",
                "conditions": "condition"
            },
            "gcp:storage/getBucketLifecycleRuleAction:getBucketLifecycleRuleAction": {
                "storageClass": "storage_class"
            },
            "gcp:storage/getBucketLifecycleRuleCondition:getBucketLifecycleRuleCondition": {
                "createdBefore": "created_before",
                "customTimeBefore": "custom_time_before",
                "daysSinceCustomTime": "days_since_custom_time",
                "daysSinceNoncurrentTime": "days_since_noncurrent_time",
                "matchesPrefixes": "matches_prefix",
                "matchesStorageClasses": "matches_storage_class",
                "matchesSuffixes": "matches_suffix",
                "noncurrentTimeBefore": "noncurrent_time_before",
                "numNewerVersions": "num_newer_versions",
                "withState": "with_state"
            },
            "gcp:storage/getBucketLogging:getBucketLogging": {
                "logBucket": "log_bucket",
                "logObjectPrefix": "log_object_prefix"
            },
            "gcp:storage/getBucketObject:getBucketObject": {
                "cacheControl": "cache_control",
                "contentDisposition": "content_disposition",
                "contentEncoding": "content_encoding",
                "contentLanguage": "content_language",
                "contentType": "content_type",
                "customerEncryptions": "customer_encryption",
                "detectMd5hash": "detect_md5hash",
                "eventBasedHold": "event_based_hold",
                "kmsKeyName": "kms_key_name",
                "mediaLink": "media_link",
                "outputName": "output_name",
                "selfLink": "self_link",
                "storageClass": "storage_class",
                "temporaryHold": "temporary_hold"
            },
            "gcp:storage/getBucketObjectContent:getBucketObjectContent": {
                "cacheControl": "cache_control",
                "contentDisposition": "content_disposition",
                "contentEncoding": "content_encoding",
                "contentLanguage": "content_language",
                "contentType": "content_type",
                "customerEncryptions": "customer_encryption",
                "detectMd5hash": "detect_md5hash",
                "eventBasedHold": "event_based_hold",
                "kmsKeyName": "kms_key_name",
                "mediaLink": "media_link",
                "outputName": "output_name",
                "selfLink": "self_link",
                "storageClass": "storage_class",
                "temporaryHold": "temporary_hold"
            },
            "gcp:storage/getBucketObjectContentCustomerEncryption:getBucketObjectContentCustomerEncryption": {
                "encryptionAlgorithm": "encryption_algorithm",
                "encryptionKey": "encryption_key"
            },
            "gcp:storage/getBucketObjectCustomerEncryption:getBucketObjectCustomerEncryption": {
                "encryptionAlgorithm": "encryption_algorithm",
                "encryptionKey": "encryption_key"
            },
            "gcp:storage/getBucketRetentionPolicy:getBucketRetentionPolicy": {
                "isLocked": "is_locked",
                "retentionPeriod": "retention_period"
            },
            "gcp:storage/getBucketWebsite:getBucketWebsite": {
                "mainPageSuffix": "main_page_suffix",
                "notFoundPage": "not_found_page"
            },
            "gcp:storage/getObjectSignedUrl:getObjectSignedUrl": {
                "contentMd5": "content_md5",
                "contentType": "content_type",
                "extensionHeaders": "extension_headers",
                "httpMethod": "http_method",
                "signedUrl": "signed_url"
            },
            "gcp:storage/getProjectServiceAccount:getProjectServiceAccount": {
                "emailAddress": "email_address",
                "userProject": "user_project"
            },
            "gcp:storage/getTransferProjectServiceAccount:getTransferProjectServiceAccount": {
                "subjectId": "subject_id"
            },
            "gcp:storage/getTransferProjectServieAccount:getTransferProjectServieAccount": {
                "subjectId": "subject_id"
            },
            "gcp:storage/hmacKey:HmacKey": {
                "accessId": "access_id",
                "serviceAccountEmail": "service_account_email",
                "timeCreated": "time_created"
            },
            "gcp:storage/notification:Notification": {
                "customAttributes": "custom_attributes",
                "eventTypes": "event_types",
                "notificationId": "notification_id",
                "objectNamePrefix": "object_name_prefix",
                "payloadFormat": "payload_format",
                "selfLink": "self_link"
            },
            "gcp:storage/objectACL:ObjectACL": {
                "predefinedAcl": "predefined_acl",
                "roleEntities": "role_entity"
            },
            "gcp:storage/objectAccessControl:ObjectAccessControl": {
                "entityId": "entity_id",
                "projectTeams": "project_team"
            },
            "gcp:storage/transferAgentPool:TransferAgentPool": {
                "bandwidthLimit": "bandwidth_limit",
                "displayName": "display_name"
            },
            "gcp:storage/transferJob:TransferJob": {
                "creationTime": "creation_time",
                "deletionTime": "deletion_time",
                "lastModificationTime": "last_modification_time",
                "notificationConfig": "notification_config",
                "transferSpec": "transfer_spec"
            },
            "gcp:tags/getTagKey:getTagKey": {
                "createTime": "create_time",
                "namespacedName": "namespaced_name",
                "shortName": "short_name",
                "updateTime": "update_time"
            },
            "gcp:tags/getTagKeyIamPolicy:getTagKeyIamPolicy": {
                "policyData": "policy_data",
                "tagKey": "tag_key"
            },
            "gcp:tags/getTagValue:getTagValue": {
                "createTime": "create_time",
                "namespacedName": "namespaced_name",
                "shortName": "short_name",
                "updateTime": "update_time"
            },
            "gcp:tags/getTagValueIamPolicy:getTagValueIamPolicy": {
                "policyData": "policy_data",
                "tagValue": "tag_value"
            },
            "gcp:tags/locationTagBinding:LocationTagBinding": {
                "tagValue": "tag_value"
            },
            "gcp:tags/tagBinding:TagBinding": {
                "tagValue": "tag_value"
            },
            "gcp:tags/tagKey:TagKey": {
                "createTime": "create_time",
                "namespacedName": "namespaced_name",
                "purposeData": "purpose_data",
                "shortName": "short_name",
                "updateTime": "update_time"
            },
            "gcp:tags/tagKeyIamBinding:TagKeyIamBinding": {
                "tagKey": "tag_key"
            },
            "gcp:tags/tagKeyIamMember:TagKeyIamMember": {
                "tagKey": "tag_key"
            },
            "gcp:tags/tagKeyIamPolicy:TagKeyIamPolicy": {
                "policyData": "policy_data",
                "tagKey": "tag_key"
            },
            "gcp:tags/tagValue:TagValue": {
                "createTime": "create_time",
                "namespacedName": "namespaced_name",
                "shortName": "short_name",
                "updateTime": "update_time"
            },
            "gcp:tags/tagValueIamBinding:TagValueIamBinding": {
                "tagValue": "tag_value"
            },
            "gcp:tags/tagValueIamMember:TagValueIamMember": {
                "tagValue": "tag_value"
            },
            "gcp:tags/tagValueIamPolicy:TagValueIamPolicy": {
                "policyData": "policy_data",
                "tagValue": "tag_value"
            },
            "gcp:tpu/NodeNetworkEndpoint:NodeNetworkEndpoint": {
                "ipAddress": "ip_address"
            },
            "gcp:tpu/node:Node": {
                "acceleratorType": "accelerator_type",
                "cidrBlock": "cidr_block",
                "networkEndpoints": "network_endpoints",
                "schedulingConfig": "scheduling_config",
                "serviceAccount": "service_account",
                "tensorflowVersion": "tensorflow_version",
                "useServiceNetworking": "use_service_networking"
            },
            "gcp:vertex/AiDatasetEncryptionSpec:AiDatasetEncryptionSpec": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:vertex/AiEndpointDeployedModel:AiEndpointDeployedModel": {
                "automaticResources": "automatic_resources",
                "createTime": "create_time",
                "dedicatedResources": "dedicated_resources",
                "displayName": "display_name",
                "enableAccessLogging": "enable_access_logging",
                "enableContainerLogging": "enable_container_logging",
                "modelVersionId": "model_version_id",
                "privateEndpoints": "private_endpoints",
                "serviceAccount": "service_account",
                "sharedResources": "shared_resources"
            },
            "gcp:vertex/AiEndpointDeployedModelAutomaticResource:AiEndpointDeployedModelAutomaticResource": {
                "maxReplicaCount": "max_replica_count",
                "minReplicaCount": "min_replica_count"
            },
            "gcp:vertex/AiEndpointDeployedModelDedicatedResource:AiEndpointDeployedModelDedicatedResource": {
                "autoscalingMetricSpecs": "autoscaling_metric_specs",
                "machineSpecs": "machine_spec",
                "maxReplicaCount": "max_replica_count",
                "minReplicaCount": "min_replica_count"
            },
            "gcp:vertex/AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpec:AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpec": {
                "metricName": "metric_name"
            },
            "gcp:vertex/AiEndpointDeployedModelDedicatedResourceMachineSpec:AiEndpointDeployedModelDedicatedResourceMachineSpec": {
                "acceleratorCount": "accelerator_count",
                "acceleratorType": "accelerator_type",
                "machineType": "machine_type"
            },
            "gcp:vertex/AiEndpointDeployedModelPrivateEndpoint:AiEndpointDeployedModelPrivateEndpoint": {
                "explainHttpUri": "explain_http_uri",
                "healthHttpUri": "health_http_uri",
                "predictHttpUri": "predict_http_uri",
                "serviceAttachment": "service_attachment"
            },
            "gcp:vertex/AiEndpointEncryptionSpec:AiEndpointEncryptionSpec": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:vertex/AiFeatureStoreEncryptionSpec:AiFeatureStoreEncryptionSpec": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:vertex/AiFeatureStoreEntityTypeMonitoringConfig:AiFeatureStoreEntityTypeMonitoringConfig": {
                "categoricalThresholdConfig": "categorical_threshold_config",
                "importFeaturesAnalysis": "import_features_analysis",
                "numericalThresholdConfig": "numerical_threshold_config",
                "snapshotAnalysis": "snapshot_analysis"
            },
            "gcp:vertex/AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysis:AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysis": {
                "anomalyDetectionBaseline": "anomaly_detection_baseline"
            },
            "gcp:vertex/AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysis:AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysis": {
                "monitoringInterval": "monitoring_interval",
                "monitoringIntervalDays": "monitoring_interval_days",
                "stalenessDays": "staleness_days"
            },
            "gcp:vertex/AiFeatureStoreOnlineServingConfig:AiFeatureStoreOnlineServingConfig": {
                "fixedNodeCount": "fixed_node_count"
            },
            "gcp:vertex/AiFeatureStoreOnlineServingConfigScaling:AiFeatureStoreOnlineServingConfigScaling": {
                "maxNodeCount": "max_node_count",
                "minNodeCount": "min_node_count"
            },
            "gcp:vertex/AiIndexDeployedIndex:AiIndexDeployedIndex": {
                "deployedIndexId": "deployed_index_id",
                "indexEndpoint": "index_endpoint"
            },
            "gcp:vertex/AiIndexIndexStat:AiIndexIndexStat": {
                "shardsCount": "shards_count",
                "vectorsCount": "vectors_count"
            },
            "gcp:vertex/AiIndexMetadata:AiIndexMetadata": {
                "contentsDeltaUri": "contents_delta_uri",
                "isCompleteOverwrite": "is_complete_overwrite"
            },
            "gcp:vertex/AiIndexMetadataConfig:AiIndexMetadataConfig": {
                "algorithmConfig": "algorithm_config",
                "approximateNeighborsCount": "approximate_neighbors_count",
                "distanceMeasureType": "distance_measure_type",
                "featureNormType": "feature_norm_type",
                "shardSize": "shard_size"
            },
            "gcp:vertex/AiIndexMetadataConfigAlgorithmConfig:AiIndexMetadataConfigAlgorithmConfig": {
                "bruteForceConfig": "brute_force_config",
                "treeAhConfig": "tree_ah_config"
            },
            "gcp:vertex/AiIndexMetadataConfigAlgorithmConfigTreeAhConfig:AiIndexMetadataConfigAlgorithmConfigTreeAhConfig": {
                "leafNodeEmbeddingCount": "leaf_node_embedding_count",
                "leafNodesToSearchPercent": "leaf_nodes_to_search_percent"
            },
            "gcp:vertex/AiMetadataStoreEncryptionSpec:AiMetadataStoreEncryptionSpec": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:vertex/AiMetadataStoreState:AiMetadataStoreState": {
                "diskUtilizationBytes": "disk_utilization_bytes"
            },
            "gcp:vertex/AiTensorboardEncryptionSpec:AiTensorboardEncryptionSpec": {
                "kmsKeyName": "kms_key_name"
            },
            "gcp:vertex/aiDataset:AiDataset": {
                "createTime": "create_time",
                "displayName": "display_name",
                "encryptionSpec": "encryption_spec",
                "metadataSchemaUri": "metadata_schema_uri",
                "updateTime": "update_time"
            },
            "gcp:vertex/aiEndpoint:AiEndpoint": {
                "createTime": "create_time",
                "deployedModels": "deployed_models",
                "displayName": "display_name",
                "encryptionSpec": "encryption_spec",
                "modelDeploymentMonitoringJob": "model_deployment_monitoring_job",
                "updateTime": "update_time"
            },
            "gcp:vertex/aiFeatureStore:AiFeatureStore": {
                "createTime": "create_time",
                "encryptionSpec": "encryption_spec",
                "forceDestroy": "force_destroy",
                "onlineServingConfig": "online_serving_config",
                "onlineStorageTtlDays": "online_storage_ttl_days",
                "updateTime": "update_time"
            },
            "gcp:vertex/aiFeatureStoreEntityType:AiFeatureStoreEntityType": {
                "createTime": "create_time",
                "monitoringConfig": "monitoring_config",
                "offlineStorageTtlDays": "offline_storage_ttl_days",
                "updateTime": "update_time"
            },
            "gcp:vertex/aiFeatureStoreEntityTypeFeature:AiFeatureStoreEntityTypeFeature": {
                "createTime": "create_time",
                "updateTime": "update_time",
                "valueType": "value_type"
            },
            "gcp:vertex/aiFeatureStoreEntityTypeIamPolicy:AiFeatureStoreEntityTypeIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:vertex/aiIndex:AiIndex": {
                "createTime": "create_time",
                "deployedIndexes": "deployed_indexes",
                "displayName": "display_name",
                "indexStats": "index_stats",
                "indexUpdateMethod": "index_update_method",
                "metadataSchemaUri": "metadata_schema_uri",
                "updateTime": "update_time"
            },
            "gcp:vertex/aiIndexEndpoint:AiIndexEndpoint": {
                "createTime": "create_time",
                "displayName": "display_name",
                "updateTime": "update_time"
            },
            "gcp:vertex/aiMetadataStore:AiMetadataStore": {
                "createTime": "create_time",
                "encryptionSpec": "encryption_spec",
                "states": "state",
                "updateTime": "update_time"
            },
            "gcp:vertex/aiTensorboard:AiTensorboard": {
                "blobStoragePathPrefix": "blob_storage_path_prefix",
                "createTime": "create_time",
                "displayName": "display_name",
                "encryptionSpec": "encryption_spec",
                "runCount": "run_count",
                "updateTime": "update_time"
            },
            "gcp:vertex/getAiFeaturestoreEntitytypeIamPolicy:getAiFeaturestoreEntitytypeIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:vertex/getAiFeaturestoreIamPolicy:getAiFeaturestoreIamPolicy": {
                "policyData": "policy_data"
            },
            "gcp:vertex/getAiIndex:getAiIndex": {
                "createTime": "create_time",
                "deployedIndexes": "deployed_indexes",
                "displayName": "display_name",
                "indexStats": "index_stats",
                "indexUpdateMethod": "index_update_method",
                "metadataSchemaUri": "metadata_schema_uri",
                "metadatas": "metadata",
                "updateTime": "update_time"
            },
            "gcp:vertex/getAiIndexDeployedIndex:getAiIndexDeployedIndex": {
                "deployedIndexId": "deployed_index_id",
                "indexEndpoint": "index_endpoint"
            },
            "gcp:vertex/getAiIndexIndexStat:getAiIndexIndexStat": {
                "shardsCount": "shards_count",
                "vectorsCount": "vectors_count"
            },
            "gcp:vertex/getAiIndexMetadata:getAiIndexMetadata": {
                "configs": "config",
                "contentsDeltaUri": "contents_delta_uri",
                "isCompleteOverwrite": "is_complete_overwrite"
            },
            "gcp:vertex/getAiIndexMetadataConfig:getAiIndexMetadataConfig": {
                "algorithmConfigs": "algorithm_config",
                "approximateNeighborsCount": "approximate_neighbors_count",
                "distanceMeasureType": "distance_measure_type",
                "featureNormType": "feature_norm_type",
                "shardSize": "shard_size"
            },
            "gcp:vertex/getAiIndexMetadataConfigAlgorithmConfig:getAiIndexMetadataConfigAlgorithmConfig": {
                "bruteForceConfigs": "brute_force_config",
                "treeAhConfigs": "tree_ah_config"
            },
            "gcp:vertex/getAiIndexMetadataConfigAlgorithmConfigTreeAhConfig:getAiIndexMetadataConfigAlgorithmConfigTreeAhConfig": {
                "leafNodeEmbeddingCount": "leaf_node_embedding_count",
                "leafNodesToSearchPercent": "leaf_nodes_to_search_percent"
            },
            "gcp:vmwareengine/ClusterNodeTypeConfig:ClusterNodeTypeConfig": {
                "customCoreCount": "custom_core_count",
                "nodeCount": "node_count",
                "nodeTypeId": "node_type_id"
            },
            "gcp:vmwareengine/PrivateCloudHcx:PrivateCloudHcx": {
                "internalIp": "internal_ip"
            },
            "gcp:vmwareengine/PrivateCloudManagementCluster:PrivateCloudManagementCluster": {
                "clusterId": "cluster_id",
                "nodeTypeConfigs": "node_type_configs"
            },
            "gcp:vmwareengine/PrivateCloudManagementClusterNodeTypeConfig:PrivateCloudManagementClusterNodeTypeConfig": {
                "customCoreCount": "custom_core_count",
                "nodeCount": "node_count",
                "nodeTypeId": "node_type_id"
            },
            "gcp:vmwareengine/PrivateCloudNetworkConfig:PrivateCloudNetworkConfig": {
                "managementCidr": "management_cidr",
                "managementIpAddressLayoutVersion": "management_ip_address_layout_version",
                "vmwareEngineNetwork": "vmware_engine_network",
                "vmwareEngineNetworkCanonical": "vmware_engine_network_canonical"
            },
            "gcp:vmwareengine/PrivateCloudNsx:PrivateCloudNsx": {
                "internalIp": "internal_ip"
            },
            "gcp:vmwareengine/PrivateCloudVcenter:PrivateCloudVcenter": {
                "internalIp": "internal_ip"
            },
            "gcp:vmwareengine/cluster:Cluster": {
                "nodeTypeConfigs": "node_type_configs"
            },
            "gcp:vmwareengine/getCluster:getCluster": {
                "nodeTypeConfigs": "node_type_configs"
            },
            "gcp:vmwareengine/getClusterNodeTypeConfig:getClusterNodeTypeConfig": {
                "customCoreCount": "custom_core_count",
                "nodeCount": "node_count",
                "nodeTypeId": "node_type_id"
            },
            "gcp:vmwareengine/getNetwork:getNetwork": {
                "vpcNetworks": "vpc_networks"
            },
            "gcp:vmwareengine/getPrivateCloud:getPrivateCloud": {
                "hcxes": "hcx",
                "managementClusters": "management_cluster",
                "networkConfigs": "network_config",
                "nsxes": "nsx",
                "vcenters": "vcenter"
            },
            "gcp:vmwareengine/getPrivateCloudHcx:getPrivateCloudHcx": {
                "internalIp": "internal_ip"
            },
            "gcp:vmwareengine/getPrivateCloudManagementCluster:getPrivateCloudManagementCluster": {
                "clusterId": "cluster_id",
                "nodeTypeConfigs": "node_type_configs"
            },
            "gcp:vmwareengine/getPrivateCloudManagementClusterNodeTypeConfig:getPrivateCloudManagementClusterNodeTypeConfig": {
                "customCoreCount": "custom_core_count",
                "nodeCount": "node_count",
                "nodeTypeId": "node_type_id"
            },
            "gcp:vmwareengine/getPrivateCloudNetworkConfig:getPrivateCloudNetworkConfig": {
                "managementCidr": "management_cidr",
                "managementIpAddressLayoutVersion": "management_ip_address_layout_version",
                "vmwareEngineNetwork": "vmware_engine_network",
                "vmwareEngineNetworkCanonical": "vmware_engine_network_canonical"
            },
            "gcp:vmwareengine/getPrivateCloudNsx:getPrivateCloudNsx": {
                "internalIp": "internal_ip"
            },
            "gcp:vmwareengine/getPrivateCloudVcenter:getPrivateCloudVcenter": {
                "internalIp": "internal_ip"
            },
            "gcp:vmwareengine/network:Network": {
                "vpcNetworks": "vpc_networks"
            },
            "gcp:vmwareengine/privateCloud:PrivateCloud": {
                "hcxes": "hcx",
                "managementCluster": "management_cluster",
                "networkConfig": "network_config",
                "nsxes": "nsx",
                "vcenters": "vcenter"
            },
            "gcp:vpcaccess/ConnectorSubnet:ConnectorSubnet": {
                "projectId": "project_id"
            },
            "gcp:vpcaccess/connector:Connector": {
                "connectedProjects": "connected_projects",
                "ipCidrRange": "ip_cidr_range",
                "machineType": "machine_type",
                "maxInstances": "max_instances",
                "maxThroughput": "max_throughput",
                "minInstances": "min_instances",
                "minThroughput": "min_throughput",
                "selfLink": "self_link"
            },
            "gcp:vpcaccess/getConnector:getConnector": {
                "connectedProjects": "connected_projects",
                "ipCidrRange": "ip_cidr_range",
                "machineType": "machine_type",
                "maxInstances": "max_instances",
                "maxThroughput": "max_throughput",
                "minInstances": "min_instances",
                "minThroughput": "min_throughput",
                "selfLink": "self_link",
                "subnets": "subnet"
            },
            "gcp:vpcaccess/getConnectorSubnet:getConnectorSubnet": {
                "projectId": "project_id"
            },
            "gcp:workflows/workflow:Workflow": {
                "createTime": "create_time",
                "cryptoKeyName": "crypto_key_name",
                "namePrefix": "name_prefix",
                "revisionId": "revision_id",
                "serviceAccount": "service_account",
                "sourceContents": "source_contents",
                "updateTime": "update_time"
            },
            "gcp:workstations/WorkstationClusterPrivateClusterConfig:WorkstationClusterPrivateClusterConfig": {
                "clusterHostname": "cluster_hostname",
                "enablePrivateEndpoint": "enable_private_endpoint",
                "serviceAttachmentUri": "service_attachment_uri"
            },
            "gcp:workstations/WorkstationConfigContainer:WorkstationConfigContainer": {
                "commands": "command",
                "runAsUser": "run_as_user",
                "workingDir": "working_dir"
            },
            "gcp:workstations/WorkstationConfigEncryptionKey:WorkstationConfigEncryptionKey": {
                "kmsKey": "kms_key",
                "kmsKeyServiceAccount": "kms_key_service_account"
            },
            "gcp:workstations/WorkstationConfigHost:WorkstationConfigHost": {
                "gceInstance": "gce_instance"
            },
            "gcp:workstations/WorkstationConfigHostGceInstance:WorkstationConfigHostGceInstance": {
                "bootDiskSizeGb": "boot_disk_size_gb",
                "confidentialInstanceConfig": "confidential_instance_config",
                "disablePublicIpAddresses": "disable_public_ip_addresses",
                "machineType": "machine_type",
                "poolSize": "pool_size",
                "serviceAccount": "service_account",
                "shieldedInstanceConfig": "shielded_instance_config"
            },
            "gcp:workstations/WorkstationConfigHostGceInstanceConfidentialInstanceConfig:WorkstationConfigHostGceInstanceConfidentialInstanceConfig": {
                "enableConfidentialCompute": "enable_confidential_compute"
            },
            "gcp:workstations/WorkstationConfigHostGceInstanceShieldedInstanceConfig:WorkstationConfigHostGceInstanceShieldedInstanceConfig": {
                "enableIntegrityMonitoring": "enable_integrity_monitoring",
                "enableSecureBoot": "enable_secure_boot",
                "enableVtpm": "enable_vtpm"
            },
            "gcp:workstations/WorkstationConfigPersistentDirectory:WorkstationConfigPersistentDirectory": {
                "gcePd": "gce_pd",
                "mountPath": "mount_path"
            },
            "gcp:workstations/WorkstationConfigPersistentDirectoryGcePd:WorkstationConfigPersistentDirectoryGcePd": {
                "diskType": "disk_type",
                "fsType": "fs_type",
                "reclaimPolicy": "reclaim_policy",
                "sizeGb": "size_gb",
                "sourceSnapshot": "source_snapshot"
            },
            "gcp:workstations/getWorkstationConfigIamPolicy:getWorkstationConfigIamPolicy": {
                "policyData": "policy_data",
                "workstationClusterId": "workstation_cluster_id",
                "workstationConfigId": "workstation_config_id"
            },
            "gcp:workstations/getWorkstationIamPolicy:getWorkstationIamPolicy": {
                "policyData": "policy_data",
                "workstationClusterId": "workstation_cluster_id",
                "workstationConfigId": "workstation_config_id",
                "workstationId": "workstation_id"
            },
            "gcp:workstations/workstation:Workstation": {
                "createTime": "create_time",
                "displayName": "display_name",
                "workstationClusterId": "workstation_cluster_id",
                "workstationConfigId": "workstation_config_id",
                "workstationId": "workstation_id"
            },
            "gcp:workstations/workstationCluster:WorkstationCluster": {
                "createTime": "create_time",
                "displayName": "display_name",
                "privateClusterConfig": "private_cluster_config",
                "workstationClusterId": "workstation_cluster_id"
            },
            "gcp:workstations/workstationConfig:WorkstationConfig": {
                "createTime": "create_time",
                "displayName": "display_name",
                "encryptionKey": "encryption_key",
                "idleTimeout": "idle_timeout",
                "persistentDirectories": "persistent_directories",
                "runningTimeout": "running_timeout",
                "workstationClusterId": "workstation_cluster_id",
                "workstationConfigId": "workstation_config_id"
            },
            "gcp:workstations/workstationConfigIamBinding:WorkstationConfigIamBinding": {
                "workstationClusterId": "workstation_cluster_id",
                "workstationConfigId": "workstation_config_id"
            },
            "gcp:workstations/workstationConfigIamMember:WorkstationConfigIamMember": {
                "workstationClusterId": "workstation_cluster_id",
                "workstationConfigId": "workstation_config_id"
            },
            "gcp:workstations/workstationConfigIamPolicy:WorkstationConfigIamPolicy": {
                "policyData": "policy_data",
                "workstationClusterId": "workstation_cluster_id",
                "workstationConfigId": "workstation_config_id"
            },
            "gcp:workstations/workstationIamBinding:WorkstationIamBinding": {
                "workstationClusterId": "workstation_cluster_id",
                "workstationConfigId": "workstation_config_id",
                "workstationId": "workstation_id"
            },
            "gcp:workstations/workstationIamMember:WorkstationIamMember": {
                "workstationClusterId": "workstation_cluster_id",
                "workstationConfigId": "workstation_config_id",
                "workstationId": "workstation_id"
            },
            "gcp:workstations/workstationIamPolicy:WorkstationIamPolicy": {
                "policyData": "policy_data",
                "workstationClusterId": "workstation_cluster_id",
                "workstationConfigId": "workstation_config_id",
                "workstationId": "workstation_id"
            }
        },
        "renamedConfigProperties": {
            "accessApprovalCustomEndpoint": "access_approval_custom_endpoint",
            "accessContextManagerCustomEndpoint": "access_context_manager_custom_endpoint",
            "accessToken": "access_token",
            "activeDirectoryCustomEndpoint": "active_directory_custom_endpoint",
            "alloydbCustomEndpoint": "alloydb_custom_endpoint",
            "apiGatewayCustomEndpoint": "api_gateway_custom_endpoint",
            "apigeeCustomEndpoint": "apigee_custom_endpoint",
            "apikeysCustomEndpoint": "apikeys_custom_endpoint",
            "appEngineCustomEndpoint": "app_engine_custom_endpoint",
            "artifactRegistryCustomEndpoint": "artifact_registry_custom_endpoint",
            "assuredWorkloadsCustomEndpoint": "assured_workloads_custom_endpoint",
            "beyondcorpCustomEndpoint": "beyondcorp_custom_endpoint",
            "bigQueryCustomEndpoint": "big_query_custom_endpoint",
            "bigqueryAnalyticsHubCustomEndpoint": "bigquery_analytics_hub_custom_endpoint",
            "bigqueryConnectionCustomEndpoint": "bigquery_connection_custom_endpoint",
            "bigqueryDataTransferCustomEndpoint": "bigquery_data_transfer_custom_endpoint",
            "bigqueryDatapolicyCustomEndpoint": "bigquery_datapolicy_custom_endpoint",
            "bigqueryReservationCustomEndpoint": "bigquery_reservation_custom_endpoint",
            "bigtableCustomEndpoint": "bigtable_custom_endpoint",
            "billingCustomEndpoint": "billing_custom_endpoint",
            "billingProject": "billing_project",
            "binaryAuthorizationCustomEndpoint": "binary_authorization_custom_endpoint",
            "certificateManagerCustomEndpoint": "certificate_manager_custom_endpoint",
            "cloudAssetCustomEndpoint": "cloud_asset_custom_endpoint",
            "cloudBillingCustomEndpoint": "cloud_billing_custom_endpoint",
            "cloudBuildCustomEndpoint": "cloud_build_custom_endpoint",
            "cloudBuildWorkerPoolCustomEndpoint": "cloud_build_worker_pool_custom_endpoint",
            "cloudFunctionsCustomEndpoint": "cloud_functions_custom_endpoint",
            "cloudIdentityCustomEndpoint": "cloud_identity_custom_endpoint",
            "cloudIdsCustomEndpoint": "cloud_ids_custom_endpoint",
            "cloudIotCustomEndpoint": "cloud_iot_custom_endpoint",
            "cloudResourceManagerCustomEndpoint": "cloud_resource_manager_custom_endpoint",
            "cloudRunCustomEndpoint": "cloud_run_custom_endpoint",
            "cloudRunV2CustomEndpoint": "cloud_run_v2_custom_endpoint",
            "cloudSchedulerCustomEndpoint": "cloud_scheduler_custom_endpoint",
            "cloudTasksCustomEndpoint": "cloud_tasks_custom_endpoint",
            "cloudbuildv2CustomEndpoint": "cloudbuildv2_custom_endpoint",
            "clouddeployCustomEndpoint": "clouddeploy_custom_endpoint",
            "cloudfunctions2CustomEndpoint": "cloudfunctions2_custom_endpoint",
            "composerCustomEndpoint": "composer_custom_endpoint",
            "computeCustomEndpoint": "compute_custom_endpoint",
            "containerAnalysisCustomEndpoint": "container_analysis_custom_endpoint",
            "containerAttachedCustomEndpoint": "container_attached_custom_endpoint",
            "containerAwsCustomEndpoint": "container_aws_custom_endpoint",
            "containerAzureCustomEndpoint": "container_azure_custom_endpoint",
            "containerCustomEndpoint": "container_custom_endpoint",
            "dataCatalogCustomEndpoint": "data_catalog_custom_endpoint",
            "dataFusionCustomEndpoint": "data_fusion_custom_endpoint",
            "dataLossPreventionCustomEndpoint": "data_loss_prevention_custom_endpoint",
            "databaseMigrationServiceCustomEndpoint": "database_migration_service_custom_endpoint",
            "dataflowCustomEndpoint": "dataflow_custom_endpoint",
            "dataformCustomEndpoint": "dataform_custom_endpoint",
            "dataplexCustomEndpoint": "dataplex_custom_endpoint",
            "dataprocCustomEndpoint": "dataproc_custom_endpoint",
            "dataprocMetastoreCustomEndpoint": "dataproc_metastore_custom_endpoint",
            "datastoreCustomEndpoint": "datastore_custom_endpoint",
            "datastreamCustomEndpoint": "datastream_custom_endpoint",
            "deploymentManagerCustomEndpoint": "deployment_manager_custom_endpoint",
            "dialogflowCustomEndpoint": "dialogflow_custom_endpoint",
            "dialogflowCxCustomEndpoint": "dialogflow_cx_custom_endpoint",
            "disableGooglePartnerName": "disable_google_partner_name",
            "dnsCustomEndpoint": "dns_custom_endpoint",
            "documentAiCustomEndpoint": "document_ai_custom_endpoint",
            "essentialContactsCustomEndpoint": "essential_contacts_custom_endpoint",
            "eventarcCustomEndpoint": "eventarc_custom_endpoint",
            "filestoreCustomEndpoint": "filestore_custom_endpoint",
            "firebaseCustomEndpoint": "firebase_custom_endpoint",
            "firebaseDatabaseCustomEndpoint": "firebase_database_custom_endpoint",
            "firebaseExtensionsCustomEndpoint": "firebase_extensions_custom_endpoint",
            "firebaseHostingCustomEndpoint": "firebase_hosting_custom_endpoint",
            "firebaseStorageCustomEndpoint": "firebase_storage_custom_endpoint",
            "firebaserulesCustomEndpoint": "firebaserules_custom_endpoint",
            "firestoreCustomEndpoint": "firestore_custom_endpoint",
            "gameServicesCustomEndpoint": "game_services_custom_endpoint",
            "gkeBackupCustomEndpoint": "gke_backup_custom_endpoint",
            "gkeHub2CustomEndpoint": "gke_hub2_custom_endpoint",
            "gkeHubCustomEndpoint": "gke_hub_custom_endpoint",
            "gkehubFeatureCustomEndpoint": "gkehub_feature_custom_endpoint",
            "gkeonpremCustomEndpoint": "gkeonprem_custom_endpoint",
            "googlePartnerName": "google_partner_name",
            "healthcareCustomEndpoint": "healthcare_custom_endpoint",
            "iam2CustomEndpoint": "iam2_custom_endpoint",
            "iamBetaCustomEndpoint": "iam_beta_custom_endpoint",
            "iamCredentialsCustomEndpoint": "iam_credentials_custom_endpoint",
            "iamCustomEndpoint": "iam_custom_endpoint",
            "iamWorkforcePoolCustomEndpoint": "iam_workforce_pool_custom_endpoint",
            "iapCustomEndpoint": "iap_custom_endpoint",
            "identityPlatformCustomEndpoint": "identity_platform_custom_endpoint",
            "impersonateServiceAccount": "impersonate_service_account",
            "impersonateServiceAccountDelegates": "impersonate_service_account_delegates",
            "kmsCustomEndpoint": "kms_custom_endpoint",
            "loggingCustomEndpoint": "logging_custom_endpoint",
            "lookerCustomEndpoint": "looker_custom_endpoint",
            "memcacheCustomEndpoint": "memcache_custom_endpoint",
            "mlEngineCustomEndpoint": "ml_engine_custom_endpoint",
            "monitoringCustomEndpoint": "monitoring_custom_endpoint",
            "networkConnectivityCustomEndpoint": "network_connectivity_custom_endpoint",
            "networkManagementCustomEndpoint": "network_management_custom_endpoint",
            "networkSecurityCustomEndpoint": "network_security_custom_endpoint",
            "networkServicesCustomEndpoint": "network_services_custom_endpoint",
            "notebooksCustomEndpoint": "notebooks_custom_endpoint",
            "orgPolicyCustomEndpoint": "org_policy_custom_endpoint",
            "osConfigCustomEndpoint": "os_config_custom_endpoint",
            "osLoginCustomEndpoint": "os_login_custom_endpoint",
            "privatecaCustomEndpoint": "privateca_custom_endpoint",
            "publicCaCustomEndpoint": "public_ca_custom_endpoint",
            "pubsubCustomEndpoint": "pubsub_custom_endpoint",
            "pubsubLiteCustomEndpoint": "pubsub_lite_custom_endpoint",
            "recaptchaEnterpriseCustomEndpoint": "recaptcha_enterprise_custom_endpoint",
            "redisCustomEndpoint": "redis_custom_endpoint",
            "requestReason": "request_reason",
            "requestTimeout": "request_timeout",
            "resourceManagerCustomEndpoint": "resource_manager_custom_endpoint",
            "resourceManagerV3CustomEndpoint": "resource_manager_v3_custom_endpoint",
            "runtimeConfigCustomEndpoint": "runtime_config_custom_endpoint",
            "runtimeconfigCustomEndpoint": "runtimeconfig_custom_endpoint",
            "secretManagerCustomEndpoint": "secret_manager_custom_endpoint",
            "securityCenterCustomEndpoint": "security_center_custom_endpoint",
            "securityScannerCustomEndpoint": "security_scanner_custom_endpoint",
            "serviceDirectoryCustomEndpoint": "service_directory_custom_endpoint",
            "serviceManagementCustomEndpoint": "service_management_custom_endpoint",
            "serviceNetworkingCustomEndpoint": "service_networking_custom_endpoint",
            "serviceUsageCustomEndpoint": "service_usage_custom_endpoint",
            "sourceRepoCustomEndpoint": "source_repo_custom_endpoint",
            "spannerCustomEndpoint": "spanner_custom_endpoint",
            "sqlCustomEndpoint": "sql_custom_endpoint",
            "storageCustomEndpoint": "storage_custom_endpoint",
            "storageTransferCustomEndpoint": "storage_transfer_custom_endpoint",
            "tagsCustomEndpoint": "tags_custom_endpoint",
            "tagsLocationCustomEndpoint": "tags_location_custom_endpoint",
            "tpuCustomEndpoint": "tpu_custom_endpoint",
            "userProjectOverride": "user_project_override",
            "vertexAiCustomEndpoint": "vertex_ai_custom_endpoint",
            "vmwareengineCustomEndpoint": "vmwareengine_custom_endpoint",
            "vpcAccessCustomEndpoint": "vpc_access_custom_endpoint",
            "workflowsCustomEndpoint": "workflows_custom_endpoint",
            "workstationsCustomEndpoint": "workstations_custom_endpoint"
        }
    }
}