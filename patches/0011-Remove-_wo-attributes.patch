From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anton Tayanovskyy <anton@pulumi.com>
Date: Fri, 28 Feb 2025 18:18:05 -0500
Subject: [PATCH] Remove _wo attributes


diff --git a/google-beta/services/bigquerydatatransfer/resource_bigquery_data_transfer_config.go b/google-beta/services/bigquerydatatransfer/resource_bigquery_data_transfer_config.go
index d33561cff..0d6e59b00 100644
--- a/google-beta/services/bigquerydatatransfer/resource_bigquery_data_transfer_config.go
+++ b/google-beta/services/bigquerydatatransfer/resource_bigquery_data_transfer_config.go
@@ -29,17 +29,14 @@ import (
 	"strings"
 	"time"
 
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
 
 	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
 	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
 )
 
 var sensitiveParams = []string{"secret_access_key"}
-var sensitiveWoParams = []string{"secret_access_key_wo"}
 
 func sensitiveParamCustomizeDiff(_ context.Context, diff *schema.ResourceDiff, v interface{}) error {
 	for _, sp := range sensitiveParams {
@@ -49,18 +46,6 @@ func sensitiveParamCustomizeDiff(_ context.Context, diff *schema.ResourceDiff, v
 			return fmt.Errorf("Sensitive param [%s] cannot be set in both `params` and the `sensitive_params` block.", sp)
 		}
 	}
-	for _, sp := range sensitiveWoParams {
-		mapLabel := diff.Get("params." + sp[:len(sp)-3]).(string)
-		authLabel, _ := diff.GetRawConfigAt(cty.GetAttrPath("sensitive_params").IndexInt(0).GetAttr(sp))
-		if mapLabel != "" && (!authLabel.IsNull() && authLabel.Type() == cty.String) {
-			return fmt.Errorf("Sensitive param [%s] cannot be set in both `params` and the `sensitive_params` block.", sp)
-		}
-		if !authLabel.IsNull() && authLabel.Type() == cty.String {
-			if _, versionExists := diff.GetOkExists("sensitive_params.0.secret_access_key_wo_version"); !versionExists {
-				return fmt.Errorf("Sensitive param [%s] must be set with %s_version", sp, sp)
-			}
-		}
-	}
 	return nil
 }
 
@@ -135,9 +120,6 @@ func ResourceBigqueryDataTransferConfig() *schema.Resource {
 			paramsCustomizeDiff,
 			tpgresource.DefaultProviderProject,
 		),
-		ValidateRawResourceConfigFuncs: []schema.ValidateRawResourceConfigFunc{
-			validation.PreferWriteOnlyAttribute(cty.GetAttrPath("sensitive_params").IndexInt(0).GetAttr("secret_access_key"), cty.GetAttrPath("sensitive_params").IndexInt(0).GetAttr("secret_access_key_wo")),
-		},
 
 		Schema: map[string]*schema.Schema{
 			"data_source_id": {
@@ -295,22 +277,8 @@ to a different credential configuration in the config will require an apply to u
 							Optional:      true,
 							Description:   `The Secret Access Key of the AWS account transferring data from.`,
 							Sensitive:     true,
-							ConflictsWith: []string{"sensitive_params.0.secret_access_key_wo"},
-							AtLeastOneOf:  []string{"sensitive_params.0.secret_access_key", "sensitive_params.0.secret_access_key_wo"},
-						},
-						"secret_access_key_wo": {
-							Type:          schema.TypeString,
-							Optional:      true,
-							Description:   `The Secret Access Key of the AWS account transferring data from.`,
-							WriteOnly:     true,
-							ConflictsWith: []string{"sensitive_params.0.secret_access_key"},
-							AtLeastOneOf:  []string{"sensitive_params.0.secret_access_key_wo", "sensitive_params.0.secret_access_key"},
-						},
-						"secret_access_key_wo_version": {
-							Type:         schema.TypeInt,
-							Optional:     true,
-							Description:  `The version of the sensitive params - used to trigger updates of the write-only params. For more info see [updating write-only attributes](/docs/providers/google/guides/using_write_only_attributes.html#updating-write-only-attributes)`,
-							RequiredWith: []string{"sensitive_params.0.secret_access_key_wo"},
+							ConflictsWith: []string{},
+							AtLeastOneOf:  []string{"sensitive_params.0.secret_access_key"},
 						},
 					},
 				},
@@ -1105,12 +1073,6 @@ func resourceBigqueryDataTransferConfigEncoder(d *schema.ResourceData, meta inte
 			params[sp] = auth.(string)
 		}
 	}
-	for _, sp := range sensitiveWoParams {
-		if auth, _ := d.GetRawConfigAt(cty.GetAttrPath("sensitive_params").IndexInt(0).GetAttr(sp)); !auth.IsNull() && auth.Type().Equals(cty.String) {
-			sp = sp[:len(sp)-3] // _wo is convention for write-only params and are removed here
-			params[sp] = auth.AsString()
-		}
-	}
 
 	obj["params"] = params
 
@@ -1124,8 +1086,6 @@ func resourceBigqueryDataTransferConfigDecoder(d *schema.ResourceData, meta inte
 			if _, apiOk := params[sp]; apiOk {
 				if _, exists := d.GetOkExists("sensitive_params.0." + sp); exists {
 					delete(params, sp)
-				} else if _, exists := d.GetOkExists("sensitive_params.0.secret_access_key_wo_version"); exists {
-					delete(params, sp)
 				} else {
 					params[sp] = d.Get("params." + sp)
 				}
diff --git a/google-beta/services/bigquerydatatransfer/resource_bigquery_data_transfer_config_generated_meta.yaml b/google-beta/services/bigquerydatatransfer/resource_bigquery_data_transfer_config_generated_meta.yaml
index 5336d0218..827d90369 100644
--- a/google-beta/services/bigquerydatatransfer/resource_bigquery_data_transfer_config_generated_meta.yaml
+++ b/google-beta/services/bigquerydatatransfer/resource_bigquery_data_transfer_config_generated_meta.yaml
@@ -23,9 +23,5 @@ fields:
   - field: 'schedule_options.start_time'
   - field: 'sensitive_params.secret_access_key'
     provider_only: true
-  - field: 'sensitive_params.secret_access_key_wo'
-    provider_only: true
-  - field: 'sensitive_params.secret_access_key_wo_version'
-    provider_only: true
   - field: 'service_account_name'
     provider_only: true
diff --git a/google-beta/services/secretmanager/resource_secret_manager_secret_version.go b/google-beta/services/secretmanager/resource_secret_manager_secret_version.go
index 4598d2305..84fb8d3d8 100644
--- a/google-beta/services/secretmanager/resource_secret_manager_secret_version.go
+++ b/google-beta/services/secretmanager/resource_secret_manager_secret_version.go
@@ -29,9 +29,7 @@ import (
 	"strings"
 	"time"
 
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
 
 	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
 	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
@@ -56,10 +54,6 @@ func ResourceSecretManagerSecretVersion() *schema.Resource {
 			Delete: schema.DefaultTimeout(20 * time.Minute),
 		},
 
-		ValidateRawResourceConfigFuncs: []schema.ValidateRawResourceConfigFunc{
-			validation.PreferWriteOnlyAttribute(cty.GetAttrPath("secret_data"), cty.GetAttrPath("secret_data_wo")),
-		},
-
 		Schema: map[string]*schema.Schema{
 			"secret_data_wo_version": {
 				Type:        schema.TypeInt,
@@ -76,15 +70,6 @@ func ResourceSecretManagerSecretVersion() *schema.Resource {
 				Sensitive:     true,
 				ConflictsWith: []string{},
 			},
-			"secret_data_wo": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				Description:   `The secret data. Must be no larger than 64KiB. For more info see [updating write-only attributes](/docs/providers/google/guides/using_write_only_attributes.html#updating-write-only-attributes)`,
-				WriteOnly:     true,
-				ConflictsWith: []string{"secret_data"},
-				RequiredWith:  []string{},
-			},
-
 			"secret": {
 				Type:             schema.TypeString,
 				Required:         true,
@@ -545,12 +530,6 @@ func expandSecretManagerSecretVersionPayload(v interface{}, d tpgresource.Terraf
 	} else if val := reflect.ValueOf(transformedSecretData); val.IsValid() && !tpgresource.IsEmptyValue(val) {
 		transformed["data"] = transformedSecretData
 	}
-	transformedSecretDataWo, err := expandSecretManagerSecretVersionPayloadSecretDataWo(d.Get("secret_data_wo"), d.(*schema.ResourceData), config)
-	if err != nil {
-		return nil, err
-	} else if val := reflect.ValueOf(transformedSecretDataWo); val.IsValid() && !tpgresource.IsEmptyValue(val) {
-		transformed["data"] = transformedSecretDataWo
-	}
 	return transformed, nil
 }
 
@@ -564,17 +543,6 @@ func expandSecretManagerSecretVersionPayloadSecretData(v interface{}, d tpgresou
 	}
 	return base64.StdEncoding.EncodeToString([]byte(v.(string))), nil
 }
-func expandSecretManagerSecretVersionPayloadSecretDataWo(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) (interface{}, error) {
-	path := cty.GetAttrPath("secret_data_wo")
-	woVal, _ := d.GetRawConfigAt(path)
-	if !woVal.Type().Equals(cty.String) || woVal.IsNull() {
-		return nil, nil
-	}
-	if d.Get("is_secret_data_base64").(bool) {
-		return woVal.AsString(), nil
-	}
-	return base64.StdEncoding.EncodeToString([]byte(woVal.AsString())), nil
-}
 
 func resourceSecretManagerSecretVersionDecoder(d *schema.ResourceData, meta interface{}, res map[string]interface{}) (map[string]interface{}, error) {
 	if v := res["state"]; v == "DESTROYED" {
diff --git a/google-beta/services/sql/resource_sql_user.go b/google-beta/services/sql/resource_sql_user.go
index 58e1ecb2a..bd0084f13 100644
--- a/google-beta/services/sql/resource_sql_user.go
+++ b/google-beta/services/sql/resource_sql_user.go
@@ -8,7 +8,6 @@ import (
 	"strings"
 	"time"
 
-	"github.com/hashicorp/go-cty/cty"
 	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
 	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
 
@@ -64,10 +63,6 @@ func ResourceSqlUser() *schema.Resource {
 			tpgresource.DefaultProviderProject,
 		),
 
-		ValidateRawResourceConfigFuncs: []schema.ValidateRawResourceConfigFunc{
-			validation.PreferWriteOnlyAttribute(cty.GetAttrPath("password"), cty.GetAttrPath("password_wo")),
-		},
-
 		SchemaVersion: 1,
 		MigrateState:  resourceSqlUserMigrateState,
 
@@ -96,30 +91,13 @@ func ResourceSqlUser() *schema.Resource {
 			},
 
 			"password": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				Sensitive:     true,
-				ConflictsWith: []string{"password_wo"},
+				Type:      schema.TypeString,
+				Optional:  true,
+				Sensitive: true,
 				Description: `The password for the user. Can be updated. For Postgres instances this is a Required field, unless type is set to
 				either CLOUD_IAM_USER or CLOUD_IAM_SERVICE_ACCOUNT.`,
 			},
 
-			"password_wo": {
-				Type:          schema.TypeString,
-				Optional:      true,
-				WriteOnly:     true,
-				ConflictsWith: []string{"password"},
-				Description: `The password for the user. Can be updated. For Postgres instances this is a Required field, unless type is set to
-				either CLOUD_IAM_USER or CLOUD_IAM_SERVICE_ACCOUNT.`,
-			},
-
-			"password_wo_version": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				RequiredWith: []string{"password_wo"},
-				Description:  `The version of the password_wo.`,
-			},
-
 			"type": {
 				Type:             schema.TypeString,
 				Optional:         true,
@@ -270,8 +248,6 @@ func resourceSqlUserCreate(d *schema.ResourceData, meta interface{}) error {
 	var password string
 	if pw, ok := d.GetOk("password"); ok {
 		password = pw.(string)
-	} else if pwWo, _ := d.GetRawConfigAt(cty.GetAttrPath("password_wo")); !pwWo.IsNull() {
-		password = pwWo.AsString()
 	}
 
 	user := &sqladmin.User{
@@ -490,8 +466,6 @@ func resourceSqlUserUpdate(d *schema.ResourceData, meta interface{}) error {
 		var password string
 		if pw, ok := d.GetOk("password"); ok {
 			password = pw.(string)
-		} else if pwWo, _ := d.GetRawConfigAt(cty.GetAttrPath("password_wo")); !pwWo.IsNull() {
-			password = pwWo.AsString()
 		}
 
 		user := &sqladmin.User{
