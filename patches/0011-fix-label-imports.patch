From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Venelin <venelin@pulumi.com>
Date: Wed, 24 Apr 2024 12:49:49 +0100
Subject: [PATCH] fix label imports


diff --git a/google-beta/services/storage/resource_storage_bucket.go b/google-beta/services/storage/resource_storage_bucket.go
index 3baddab29..b26de57d9 100644
--- a/google-beta/services/storage/resource_storage_bucket.go
+++ b/google-beta/services/storage/resource_storage_bucket.go
@@ -1778,10 +1778,10 @@ func setStorageBucket(d *schema.ResourceData, config *transport_tpg.Config, res
 	if err := d.Set("lifecycle_rule", flattenBucketLifecycle(d, res.Lifecycle)); err != nil {
 		return fmt.Errorf("Error setting lifecycle_rule: %s", err)
 	}
-	if err := tpgresource.SetLabels(res.Labels, d, "labels"); err != nil {
+	if err := tpgresource.SetLabelsNoDefaults(res.Labels, d, "labels", config.DefaultLabels); err != nil {
 		return fmt.Errorf("Error setting labels: %s", err)
 	}
-	if err := tpgresource.SetLabels(res.Labels, d, "terraform_labels"); err != nil {
+	if err := tpgresource.SetLabelsNoDefaults(res.Labels, d, "terraform_labels", config.DefaultLabels); err != nil {
 		return fmt.Errorf("Error setting terraform_labels: %s", err)
 	}
 	if err := d.Set("effective_labels", res.Labels); err != nil {
diff --git a/google-beta/tpgresource/labels.go b/google-beta/tpgresource/labels.go
index 42bd5647d..d02317610 100644
--- a/google-beta/tpgresource/labels.go
+++ b/google-beta/tpgresource/labels.go
@@ -31,6 +31,30 @@ func SetLabels(labels map[string]string, d *schema.ResourceData, lineage string)
 	return d.Set(lineage, transformed)
 }
 
+// Like SetLabels but also takes defaultLabels and skips them
+// if we are setting the labels field.
+func SetLabelsNoDefaults(labels map[string]string, d *schema.ResourceData, lineage string, defaultLabels map[string]string) error {
+	transformed := make(map[string]interface{})
+
+	if v, ok := d.GetOk(lineage); ok {
+		// We are reading after an update, so populate just the user defined labels.
+		if labels != nil {
+			for k := range v.(map[string]interface{}) {
+				transformed[k] = labels[k]
+			}
+		}
+	} else {
+		// We are reading for an import, so populate all of the labels, except the skipped ones.
+		for k, v := range labels {
+			if _, ok := defaultLabels[k]; !ok || lineage != "labels" {
+				transformed[k] = v
+			}
+		}
+	}
+
+	return d.Set(lineage, transformed)
+}
+
 // Sets the "labels" field and "terraform_labels" with the value of the field "effective_labels" for data sources.
 // When reading data source, as the labels field is unavailable in the configuration of the data source,
 // the "labels" field will be empty. With this funciton, the labels "field" will have all of labels in the resource.
