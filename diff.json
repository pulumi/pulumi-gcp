"description": "An AccessLevel is a label that can be applied to requests to GCP services,\nalong with a list of requirements necessary for the label to be applied.\n\n\nTo get more information about AccessLevel, see:\n\n* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)\n* How-to Guides\n    * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)\n\n\u003e **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,\nyou must specify a `billing_project` and set `user_project_override` to true\nin the provider configuration. Otherwise the ACM API will return a 403 error.\nYour account must have the `serviceusage.services.use` permission on the\n`billing_project` you defined.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Access Context Manager Access Level Basic\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gcp from \"@pulumi/gcp\";\n\nconst access_policy = new gcp.accesscontextmanager.AccessPolicy(\"access-policy\", {\n    parent: \"organizations/123456789\",\n    title: \"my policy\",\n});\nconst access_level = new gcp.accesscontextmanager.AccessLevel(\"access-level\", {\n    basic: {\n        conditions: [{\n            devicePolicy: {\n                osConstraints: [{\n                    osType: \"DESKTOP_CHROME_OS\",\n                }],\n                requireScreenLock: true,\n            },\n            regions: [\n                \"CH\",\n                \"IT\",\n                \"US\",\n            ],\n        }],\n    },\n    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,\n    title: \"chromeos_no_lock\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gcp as gcp\n\naccess_policy = gcp.accesscontextmanager.AccessPolicy(\"access-policy\",\n    parent=\"organizations/123456789\",\n    title=\"my policy\")\naccess_level = gcp.accesscontextmanager.AccessLevel(\"access-level\",\n    basic=gcp.accesscontextmanager.AccessLevelBasicArgs(\n        conditions=[gcp.accesscontextmanager.AccessLevelBasicConditionArgs(\n            device_policy=gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs(\n                os_constraints=[gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs(\n                    os_type=\"DESKTOP_CHROME_OS\",\n                )],\n                require_screen_lock=True,\n            ),\n            regions=[\n                \"CH\",\n                \"IT\",\n                \"US\",\n            ],\n        )],\n    ),\n    parent=access_policy.name.apply(lambda name: f\"accessPolicies/{name}\"),\n    title=\"chromeos_no_lock\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Gcp = Pulumi.Gcp;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var access_policy = new Gcp.AccessContextManager.AccessPolicy(\"access-policy\", new()\n    {\n        Parent = \"organizations/123456789\",\n        Title = \"my policy\",\n    });\n\n    var access_level = new Gcp.AccessContextManager.AccessLevel(\"access-level\", new()\n    {\n        Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs\n        {\n            Conditions = new[]\n            {\n                new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs\n                {\n                    DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs\n                    {\n                        OsConstraints = new[]\n                        {\n                            new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs\n                            {\n                                OsType = \"DESKTOP_CHROME_OS\",\n                            },\n                        },\n                        RequireScreenLock = true,\n                    },\n                    Regions = new[]\n                    {\n                        \"CH\",\n                        \"IT\",\n                        \"US\",\n                    },\n                },\n            },\n        },\n        Parent = access_policy.Name.Apply(name =\u003e $\"accessPolicies/{name}\"),\n        Title = \"chromeos_no_lock\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/accesscontextmanager\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := accesscontextmanager.NewAccessPolicy(ctx, \"access-policy\", \u0026accesscontextmanager.AccessPolicyArgs{\n\t\t\tParent: pulumi.String(\"organizations/123456789\"),\n\t\t\tTitle:  pulumi.String(\"my policy\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = accesscontextmanager.NewAccessLevel(ctx, \"access-level\", \u0026accesscontextmanager.AccessLevelArgs{\n\t\t\tBasic: \u0026accesscontextmanager.AccessLevelBasicArgs{\n\t\t\t\tConditions: accesscontextmanager.AccessLevelBasicConditionArray{\n\t\t\t\t\t\u0026accesscontextmanager.AccessLevelBasicConditionArgs{\n\t\t\t\t\t\tDevicePolicy: \u0026accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{\n\t\t\t\t\t\t\tOsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{\n\t\t\t\t\t\t\t\t\u0026accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{\n\t\t\t\t\t\t\t\t\tOsType: pulumi.String(\"DESKTOP_CHROME_OS\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRequireScreenLock: pulumi.Bool(true),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tRegions: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"CH\"),\n\t\t\t\t\t\t\tpulumi.String(\"IT\"),\n\t\t\t\t\t\t\tpulumi.String(\"US\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tParent: access_policy.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"accessPolicies/%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTitle: pulumi.String(\"chromeos_no_lock\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.gcp.accesscontextmanager.AccessPolicy;\nimport com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;\nimport com.pulumi.gcp.accesscontextmanager.AccessLevel;\nimport com.pulumi.gcp.accesscontextmanager.AccessLevelArgs;\nimport com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var access_policy = new AccessPolicy(\"access-policy\", AccessPolicyArgs.builder()        \n            .parent(\"organizations/123456789\")\n            .title(\"my policy\")\n            .build());\n\n        var access_level = new AccessLevel(\"access-level\", AccessLevelArgs.builder()        \n            .basic(AccessLevelBasicArgs.builder()\n                .conditions(AccessLevelBasicConditionArgs.builder()\n                    .devicePolicy(AccessLevelBasicConditionDevicePolicyArgs.builder()\n                        .osConstraints(AccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()\n                            .osType(\"DESKTOP_CHROME_OS\")\n                            .build())\n                        .requireScreenLock(true)\n                        .build())\n                    .regions(                    \n                        \"CH\",\n                        \"IT\",\n                        \"US\")\n                    .build())\n                .build())\n            .parent(access_policy.name().applyValue(name -\u003e String.format(\"accessPolicies/%s\", name)))\n            .title(\"chromeos_no_lock\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  access-level:\n    type: gcp:accesscontextmanager:AccessLevel\n    properties:\n      basic:\n        conditions:\n          - devicePolicy:\n              osConstraints:\n                - osType: DESKTOP_CHROME_OS\n              requireScreenLock: true\n            regions:\n              - CH\n              - IT\n              - US\n      parent: accessPolicies/${[\"access-policy\"].name}\n      title: chromeos_no_lock\n  access-policy:\n    type: gcp:accesscontextmanager:AccessPolicy\n    properties:\n      parent: organizations/123456789\n      title: my policy\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAccessLevel can be imported using any of these accepted formats* `{{name}}` When using the `pulumi import` command, AccessLevel can be imported using one of the formats above. For example\n\n```sh\n $ pulumi import gcp:accesscontextmanager/accessLevel:AccessLevel default {{name}}\n```\n\n ",
"description": "An AccessLevel is a label that can be applied to requests to GCP services,\nalong with a list of requirements necessary for the label to be applied.\n\n\nTo get more information about AccessLevel, see:\n\n* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)\n* How-to Guides\n    * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)\n\n\u003e **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,\nyou must specify a `billing_project` and set `user_project_override` to true\nin the provider configuration. Otherwise the ACM API will return a 403 error.\nYour account must have the `serviceusage.services.use` permission on the\n`billing_project` you defined.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Access Context Manager Access Level Basic\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gcp from \"@pulumi/gcp\";\n\nconst access_policy = new gcp.accesscontextmanager.AccessPolicy(\"access-policy\", {\n    parent: \"organizations/123456789\",\n    title: \"my policy\",\n});\nconst access_level = new gcp.accesscontextmanager.AccessLevel(\"access-level\", {\n    basic: {\n        conditions: [{\n            devicePolicy: {\n                osConstraints: [{\n                    osType: \"DESKTOP_CHROME_OS\",\n                }],\n                requireScreenLock: true,\n            },\n            regions: [\n                \"CH\",\n                \"IT\",\n                \"US\",\n            ],\n        }],\n    },\n    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,\n    title: \"chromeos_no_lock\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gcp as gcp\n\naccess_policy = gcp.accesscontextmanager.AccessPolicy(\"access-policy\",\n    parent=\"organizations/123456789\",\n    title=\"my policy\")\naccess_level = gcp.accesscontextmanager.AccessLevel(\"access-level\",\n    basic=gcp.accesscontextmanager.AccessLevelBasicArgs(\n        conditions=[gcp.accesscontextmanager.AccessLevelBasicConditionArgs(\n            device_policy=gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs(\n                os_constraints=[gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs(\n                    os_type=\"DESKTOP_CHROME_OS\",\n                )],\n                require_screen_lock=True,\n            ),\n            regions=[\n                \"CH\",\n                \"IT\",\n                \"US\",\n            ],\n        )],\n    ),\n    parent=access_policy.name.apply(lambda name: f\"accessPolicies/{name}\"),\n    title=\"chromeos_no_lock\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Gcp = Pulumi.Gcp;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var access_policy = new Gcp.AccessContextManager.AccessPolicy(\"access-policy\", new()\n    {\n        Parent = \"organizations/123456789\",\n        Title = \"my policy\",\n    });\n\n    var access_level = new Gcp.AccessContextManager.AccessLevel(\"access-level\", new()\n    {\n        Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs\n        {\n            Conditions = new[]\n            {\n                new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs\n                {\n                    DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs\n                    {\n                        OsConstraints = new[]\n                        {\n                            new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs\n                            {\n                                OsType = \"DESKTOP_CHROME_OS\",\n                            },\n                        },\n                        RequireScreenLock = true,\n                    },\n                    Regions = new[]\n                    {\n                        \"CH\",\n                        \"IT\",\n                        \"US\",\n                    },\n                },\n            },\n        },\n        Parent = access_policy.Name.Apply(name =\u003e $\"accessPolicies/{name}\"),\n        Title = \"chromeos_no_lock\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/accesscontextmanager\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := accesscontextmanager.NewAccessPolicy(ctx, \"access-policy\", \u0026accesscontextmanager.AccessPolicyArgs{\n\t\t\tParent: pulumi.String(\"organizations/123456789\"),\n\t\t\tTitle:  pulumi.String(\"my policy\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = accesscontextmanager.NewAccessLevel(ctx, \"access-level\", \u0026accesscontextmanager.AccessLevelArgs{\n\t\t\tBasic: \u0026accesscontextmanager.AccessLevelBasicArgs{\n\t\t\t\tConditions: accesscontextmanager.AccessLevelBasicConditionArray{\n\t\t\t\t\t\u0026accesscontextmanager.AccessLevelBasicConditionArgs{\n\t\t\t\t\t\tDevicePolicy: \u0026accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{\n\t\t\t\t\t\t\tOsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{\n\t\t\t\t\t\t\t\t\u0026accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{\n\t\t\t\t\t\t\t\t\tOsType: pulumi.String(\"DESKTOP_CHROME_OS\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRequireScreenLock: pulumi.Bool(true),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tRegions: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"CH\"),\n\t\t\t\t\t\t\tpulumi.String(\"IT\"),\n\t\t\t\t\t\t\tpulumi.String(\"US\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tParent: access_policy.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"accessPolicies/%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTitle: pulumi.String(\"chromeos_no_lock\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.gcp.accesscontextmanager.AccessPolicy;\nimport com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;\nimport com.pulumi.gcp.accesscontextmanager.AccessLevel;\nimport com.pulumi.gcp.accesscontextmanager.AccessLevelArgs;\nimport com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var access_policy = new AccessPolicy(\"access-policy\", AccessPolicyArgs.builder()        \n            .parent(\"organizations/123456789\")\n            .title(\"my policy\")\n            .build());\n\n        var access_level = new AccessLevel(\"access-level\", AccessLevelArgs.builder()        \n            .basic(AccessLevelBasicArgs.builder()\n                .conditions(AccessLevelBasicConditionArgs.builder()\n                    .devicePolicy(AccessLevelBasicConditionDevicePolicyArgs.builder()\n                        .osConstraints(AccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()\n                            .osType(\"DESKTOP_CHROME_OS\")\n                            .build())\n                        .requireScreenLock(true)\n                        .build())\n                    .regions(                    \n                        \"CH\",\n                        \"IT\",\n                        \"US\")\n                    .build())\n                .build())\n            .parent(access_policy.name().applyValue(name -\u003e String.format(\"accessPolicies/%s\", name)))\n            .title(\"chromeos_no_lock\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  access-level:\n    type: gcp:accesscontextmanager:AccessLevel\n    properties:\n      basic:\n        conditions:\n          - devicePolicy:\n              osConstraints:\n                - osType: DESKTOP_CHROME_OS\n              requireScreenLock: true\n            regions:\n              - CH\n              - IT\n              - US\n      parent: accessPolicies/${[\"access-policy\"].name}\n      title: chromeos_no_lock\n  access-policy:\n    type: gcp:accesscontextmanager:AccessPolicy\n    properties:\n      parent: organizations/123456789\n      title: my policy\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAccessLevel can be imported using any of these accepted formats:\n \t* `{{name}}`\n When using the `pulumi import` command, AccessLevel can be imported using one of the formats above. For example:\n\n```sh\n\n $ pulumi import gcp:accesscontextmanager/accessLevel:AccessLevel default {{name}}\n\n```\n\n ",

This is a tewak of the above change
"description": "An AccessLevel is a label that can be applied to requests to GCP services,\nalong with a list of requirements necessary for the label to be applied.\n\n\nTo get more information about AccessLevel, see:\n\n* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)\n* How-to Guides\n    * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)\n\n\u003e **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,\nyou must specify a `billing_project` and set `user_project_override` to true\nin the provider configuration. Otherwise the ACM API will return a 403 error.\nYour account must have the `serviceusage.services.use` permission on the\n`billing_project` you defined.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Access Context Manager Access Level Basic\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gcp from \"@pulumi/gcp\";\n\nconst access_policy = new gcp.accesscontextmanager.AccessPolicy(\"access-policy\", {\n    parent: \"organizations/123456789\",\n    title: \"my policy\",\n});\nconst access_level = new gcp.accesscontextmanager.AccessLevel(\"access-level\", {\n    basic: {\n        conditions: [{\n            devicePolicy: {\n                osConstraints: [{\n                    osType: \"DESKTOP_CHROME_OS\",\n                }],\n                requireScreenLock: true,\n            },\n            regions: [\n                \"CH\",\n                \"IT\",\n                \"US\",\n            ],\n        }],\n    },\n    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,\n    title: \"chromeos_no_lock\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gcp as gcp\n\naccess_policy = gcp.accesscontextmanager.AccessPolicy(\"access-policy\",\n    parent=\"organizations/123456789\",\n    title=\"my policy\")\naccess_level = gcp.accesscontextmanager.AccessLevel(\"access-level\",\n    basic=gcp.accesscontextmanager.AccessLevelBasicArgs(\n        conditions=[gcp.accesscontextmanager.AccessLevelBasicConditionArgs(\n            device_policy=gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs(\n                os_constraints=[gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs(\n                    os_type=\"DESKTOP_CHROME_OS\",\n                )],\n                require_screen_lock=True,\n            ),\n            regions=[\n                \"CH\",\n                \"IT\",\n                \"US\",\n            ],\n        )],\n    ),\n    parent=access_policy.name.apply(lambda name: f\"accessPolicies/{name}\"),\n    title=\"chromeos_no_lock\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Gcp = Pulumi.Gcp;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var access_policy = new Gcp.AccessContextManager.AccessPolicy(\"access-policy\", new()\n    {\n        Parent = \"organizations/123456789\",\n        Title = \"my policy\",\n    });\n\n    var access_level = new Gcp.AccessContextManager.AccessLevel(\"access-level\", new()\n    {\n        Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs\n        {\n            Conditions = new[]\n            {\n                new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs\n                {\n                    DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs\n                    {\n                        OsConstraints = new[]\n                        {\n                            new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs\n                            {\n                                OsType = \"DESKTOP_CHROME_OS\",\n                            },\n                        },\n                        RequireScreenLock = true,\n                    },\n                    Regions = new[]\n                    {\n                        \"CH\",\n                        \"IT\",\n                        \"US\",\n                    },\n                },\n            },\n        },\n        Parent = access_policy.Name.Apply(name =\u003e $\"accessPolicies/{name}\"),\n        Title = \"chromeos_no_lock\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/accesscontextmanager\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := accesscontextmanager.NewAccessPolicy(ctx, \"access-policy\", \u0026accesscontextmanager.AccessPolicyArgs{\n\t\t\tParent: pulumi.String(\"organizations/123456789\"),\n\t\t\tTitle:  pulumi.String(\"my policy\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = accesscontextmanager.NewAccessLevel(ctx, \"access-level\", \u0026accesscontextmanager.AccessLevelArgs{\n\t\t\tBasic: \u0026accesscontextmanager.AccessLevelBasicArgs{\n\t\t\t\tConditions: accesscontextmanager.AccessLevelBasicConditionArray{\n\t\t\t\t\t\u0026accesscontextmanager.AccessLevelBasicConditionArgs{\n\t\t\t\t\t\tDevicePolicy: \u0026accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{\n\t\t\t\t\t\t\tOsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{\n\t\t\t\t\t\t\t\t\u0026accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{\n\t\t\t\t\t\t\t\t\tOsType: pulumi.String(\"DESKTOP_CHROME_OS\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRequireScreenLock: pulumi.Bool(true),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tRegions: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"CH\"),\n\t\t\t\t\t\t\tpulumi.String(\"IT\"),\n\t\t\t\t\t\t\tpulumi.String(\"US\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tParent: access_policy.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"accessPolicies/%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTitle: pulumi.String(\"chromeos_no_lock\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.gcp.accesscontextmanager.AccessPolicy;\nimport com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;\nimport com.pulumi.gcp.accesscontextmanager.AccessLevel;\nimport com.pulumi.gcp.accesscontextmanager.AccessLevelArgs;\nimport com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var access_policy = new AccessPolicy(\"access-policy\", AccessPolicyArgs.builder()        \n            .parent(\"organizations/123456789\")\n            .title(\"my policy\")\n            .build());\n\n        var access_level = new AccessLevel(\"access-level\", AccessLevelArgs.builder()        \n            .basic(AccessLevelBasicArgs.builder()\n                .conditions(AccessLevelBasicConditionArgs.builder()\n                    .devicePolicy(AccessLevelBasicConditionDevicePolicyArgs.builder()\n                        .osConstraints(AccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()\n                            .osType(\"DESKTOP_CHROME_OS\")\n                            .build())\n                        .requireScreenLock(true)\n                        .build())\n                    .regions(                    \n                        \"CH\",\n                        \"IT\",\n                        \"US\")\n                    .build())\n                .build())\n            .parent(access_policy.name().applyValue(name -\u003e String.format(\"accessPolicies/%s\", name)))\n            .title(\"chromeos_no_lock\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  access-level:\n    type: gcp:accesscontextmanager:AccessLevel\n    properties:\n      basic:\n        conditions:\n          - devicePolicy:\n              osConstraints:\n                - osType: DESKTOP_CHROME_OS\n              requireScreenLock: true\n            regions:\n              - CH\n              - IT\n              - US\n      parent: accessPolicies/${[\"access-policy\"].name}\n      title: chromeos_no_lock\n  access-policy:\n    type: gcp:accesscontextmanager:AccessPolicy\n    properties:\n      parent: organizations/123456789\n      title: my policy\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAccessLevel can be imported using any of these accepted formats:\n \t* `{{name}}`\n When using the `pulumi import` command, AccessLevel can be imported using one of the formats above. For example:\n\n```sh\n\n $ pulumi import gcp:accesscontextmanager/accessLevel:AccessLevel default {{name}}\n\n```\n\n ",
"description": "An AccessLevel is a label that can be applied to requests to GCP services,\nalong with a list of requirements necessary for the label to be applied.\n\n\nTo get more information about AccessLevel, see:\n\n* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)\n* How-to Guides\n    * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)\n\n\u003e **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,\nyou must specify a `billing_project` and set `user_project_override` to true\nin the provider configuration. Otherwise the ACM API will return a 403 error.\nYour account must have the `serviceusage.services.use` permission on the\n`billing_project` you defined.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Access Context Manager Access Level Basic\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gcp from \"@pulumi/gcp\";\n\nconst access_policy = new gcp.accesscontextmanager.AccessPolicy(\"access-policy\", {\n    parent: \"organizations/123456789\",\n    title: \"my policy\",\n});\nconst access_level = new gcp.accesscontextmanager.AccessLevel(\"access-level\", {\n    basic: {\n        conditions: [{\n            devicePolicy: {\n                osConstraints: [{\n                    osType: \"DESKTOP_CHROME_OS\",\n                }],\n                requireScreenLock: true,\n            },\n            regions: [\n                \"CH\",\n                \"IT\",\n                \"US\",\n            ],\n        }],\n    },\n    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,\n    title: \"chromeos_no_lock\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gcp as gcp\n\naccess_policy = gcp.accesscontextmanager.AccessPolicy(\"access-policy\",\n    parent=\"organizations/123456789\",\n    title=\"my policy\")\naccess_level = gcp.accesscontextmanager.AccessLevel(\"access-level\",\n    basic=gcp.accesscontextmanager.AccessLevelBasicArgs(\n        conditions=[gcp.accesscontextmanager.AccessLevelBasicConditionArgs(\n            device_policy=gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs(\n                os_constraints=[gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs(\n                    os_type=\"DESKTOP_CHROME_OS\",\n                )],\n                require_screen_lock=True,\n            ),\n            regions=[\n                \"CH\",\n                \"IT\",\n                \"US\",\n            ],\n        )],\n    ),\n    parent=access_policy.name.apply(lambda name: f\"accessPolicies/{name}\"),\n    title=\"chromeos_no_lock\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Gcp = Pulumi.Gcp;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var access_policy = new Gcp.AccessContextManager.AccessPolicy(\"access-policy\", new()\n    {\n        Parent = \"organizations/123456789\",\n        Title = \"my policy\",\n    });\n\n    var access_level = new Gcp.AccessContextManager.AccessLevel(\"access-level\", new()\n    {\n        Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs\n        {\n            Conditions = new[]\n            {\n                new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs\n                {\n                    DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs\n                    {\n                        OsConstraints = new[]\n                        {\n                            new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs\n                            {\n                                OsType = \"DESKTOP_CHROME_OS\",\n                            },\n                        },\n                        RequireScreenLock = true,\n                    },\n                    Regions = new[]\n                    {\n                        \"CH\",\n                        \"IT\",\n                        \"US\",\n                    },\n                },\n            },\n        },\n        Parent = access_policy.Name.Apply(name =\u003e $\"accessPolicies/{name}\"),\n        Title = \"chromeos_no_lock\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/accesscontextmanager\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := accesscontextmanager.NewAccessPolicy(ctx, \"access-policy\", \u0026accesscontextmanager.AccessPolicyArgs{\n\t\t\tParent: pulumi.String(\"organizations/123456789\"),\n\t\t\tTitle:  pulumi.String(\"my policy\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = accesscontextmanager.NewAccessLevel(ctx, \"access-level\", \u0026accesscontextmanager.AccessLevelArgs{\n\t\t\tBasic: \u0026accesscontextmanager.AccessLevelBasicArgs{\n\t\t\t\tConditions: accesscontextmanager.AccessLevelBasicConditionArray{\n\t\t\t\t\t\u0026accesscontextmanager.AccessLevelBasicConditionArgs{\n\t\t\t\t\t\tDevicePolicy: \u0026accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{\n\t\t\t\t\t\t\tOsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{\n\t\t\t\t\t\t\t\t\u0026accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{\n\t\t\t\t\t\t\t\t\tOsType: pulumi.String(\"DESKTOP_CHROME_OS\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRequireScreenLock: pulumi.Bool(true),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tRegions: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"CH\"),\n\t\t\t\t\t\t\tpulumi.String(\"IT\"),\n\t\t\t\t\t\t\tpulumi.String(\"US\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tParent: access_policy.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"accessPolicies/%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTitle: pulumi.String(\"chromeos_no_lock\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.gcp.accesscontextmanager.AccessPolicy;\nimport com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;\nimport com.pulumi.gcp.accesscontextmanager.AccessLevel;\nimport com.pulumi.gcp.accesscontextmanager.AccessLevelArgs;\nimport com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var access_policy = new AccessPolicy(\"access-policy\", AccessPolicyArgs.builder()        \n            .parent(\"organizations/123456789\")\n            .title(\"my policy\")\n            .build());\n\n        var access_level = new AccessLevel(\"access-level\", AccessLevelArgs.builder()        \n            .basic(AccessLevelBasicArgs.builder()\n                .conditions(AccessLevelBasicConditionArgs.builder()\n                    .devicePolicy(AccessLevelBasicConditionDevicePolicyArgs.builder()\n                        .osConstraints(AccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()\n                            .osType(\"DESKTOP_CHROME_OS\")\n                            .build())\n                        .requireScreenLock(true)\n                        .build())\n                    .regions(                    \n                        \"CH\",\n                        \"IT\",\n                        \"US\")\n                    .build())\n                .build())\n            .parent(access_policy.name().applyValue(name -\u003e String.format(\"accessPolicies/%s\", name)))\n            .title(\"chromeos_no_lock\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  access-level:\n    type: gcp:accesscontextmanager:AccessLevel\n    properties:\n      basic:\n        conditions:\n          - devicePolicy:\n              osConstraints:\n                - osType: DESKTOP_CHROME_OS\n              requireScreenLock: true\n            regions:\n              - CH\n              - IT\n              - US\n      parent: accessPolicies/${[\"access-policy\"].name}\n      title: chromeos_no_lock\n  access-policy:\n    type: gcp:accesscontextmanager:AccessPolicy\n    properties:\n      parent: organizations/123456789\n      title: my policy\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAccessLevel can be imported using any of these accepted formats:\n \t* `{{name}}`\n When using the `pulumi import` command, AccessLevel can be imported using one of the formats above. For example:\n\n```sh\n $ pulumi import gcp:accesscontextmanager/accessLevel:AccessLevel default {{name}}\n```\n\n ",

This is compared to master after tweaks
"description": "An AccessLevel is a label that can be applied to requests to GCP services,\nalong with a list of requirements necessary for the label to be applied.\n\n\nTo get more information about AccessLevel, see:\n\n* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)\n* How-to Guides\n    * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)\n\n\u003e **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,\nyou must specify a `billing_project` and set `user_project_override` to true\nin the provider configuration. Otherwise the ACM API will return a 403 error.\nYour account must have the `serviceusage.services.use` permission on the\n`billing_project` you defined.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Access Context Manager Access Level Basic\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gcp from \"@pulumi/gcp\";\n\nconst access_policy = new gcp.accesscontextmanager.AccessPolicy(\"access-policy\", {\n    parent: \"organizations/123456789\",\n    title: \"my policy\",\n});\nconst access_level = new gcp.accesscontextmanager.AccessLevel(\"access-level\", {\n    basic: {\n        conditions: [{\n            devicePolicy: {\n                osConstraints: [{\n                    osType: \"DESKTOP_CHROME_OS\",\n                }],\n                requireScreenLock: true,\n            },\n            regions: [\n                \"CH\",\n                \"IT\",\n                \"US\",\n            ],\n        }],\n    },\n    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,\n    title: \"chromeos_no_lock\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gcp as gcp\n\naccess_policy = gcp.accesscontextmanager.AccessPolicy(\"access-policy\",\n    parent=\"organizations/123456789\",\n    title=\"my policy\")\naccess_level = gcp.accesscontextmanager.AccessLevel(\"access-level\",\n    basic=gcp.accesscontextmanager.AccessLevelBasicArgs(\n        conditions=[gcp.accesscontextmanager.AccessLevelBasicConditionArgs(\n            device_policy=gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs(\n                os_constraints=[gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs(\n                    os_type=\"DESKTOP_CHROME_OS\",\n                )],\n                require_screen_lock=True,\n            ),\n            regions=[\n                \"CH\",\n                \"IT\",\n                \"US\",\n            ],\n        )],\n    ),\n    parent=access_policy.name.apply(lambda name: f\"accessPolicies/{name}\"),\n    title=\"chromeos_no_lock\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Gcp = Pulumi.Gcp;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var access_policy = new Gcp.AccessContextManager.AccessPolicy(\"access-policy\", new()\n    {\n        Parent = \"organizations/123456789\",\n        Title = \"my policy\",\n    });\n\n    var access_level = new Gcp.AccessContextManager.AccessLevel(\"access-level\", new()\n    {\n        Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs\n        {\n            Conditions = new[]\n            {\n                new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs\n                {\n                    DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs\n                    {\n                        OsConstraints = new[]\n                        {\n                            new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs\n                            {\n                                OsType = \"DESKTOP_CHROME_OS\",\n                            },\n                        },\n                        RequireScreenLock = true,\n                    },\n                    Regions = new[]\n                    {\n                        \"CH\",\n                        \"IT\",\n                        \"US\",\n                    },\n                },\n            },\n        },\n        Parent = access_policy.Name.Apply(name =\u003e $\"accessPolicies/{name}\"),\n        Title = \"chromeos_no_lock\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/accesscontextmanager\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := accesscontextmanager.NewAccessPolicy(ctx, \"access-policy\", \u0026accesscontextmanager.AccessPolicyArgs{\n\t\t\tParent: pulumi.String(\"organizations/123456789\"),\n\t\t\tTitle:  pulumi.String(\"my policy\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = accesscontextmanager.NewAccessLevel(ctx, \"access-level\", \u0026accesscontextmanager.AccessLevelArgs{\n\t\t\tBasic: \u0026accesscontextmanager.AccessLevelBasicArgs{\n\t\t\t\tConditions: accesscontextmanager.AccessLevelBasicConditionArray{\n\t\t\t\t\t\u0026accesscontextmanager.AccessLevelBasicConditionArgs{\n\t\t\t\t\t\tDevicePolicy: \u0026accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{\n\t\t\t\t\t\t\tOsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{\n\t\t\t\t\t\t\t\t\u0026accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{\n\t\t\t\t\t\t\t\t\tOsType: pulumi.String(\"DESKTOP_CHROME_OS\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRequireScreenLock: pulumi.Bool(true),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tRegions: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"CH\"),\n\t\t\t\t\t\t\tpulumi.String(\"IT\"),\n\t\t\t\t\t\t\tpulumi.String(\"US\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tParent: access_policy.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"accessPolicies/%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTitle: pulumi.String(\"chromeos_no_lock\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.gcp.accesscontextmanager.AccessPolicy;\nimport com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;\nimport com.pulumi.gcp.accesscontextmanager.AccessLevel;\nimport com.pulumi.gcp.accesscontextmanager.AccessLevelArgs;\nimport com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var access_policy = new AccessPolicy(\"access-policy\", AccessPolicyArgs.builder()        \n            .parent(\"organizations/123456789\")\n            .title(\"my policy\")\n            .build());\n\n        var access_level = new AccessLevel(\"access-level\", AccessLevelArgs.builder()        \n            .basic(AccessLevelBasicArgs.builder()\n                .conditions(AccessLevelBasicConditionArgs.builder()\n                    .devicePolicy(AccessLevelBasicConditionDevicePolicyArgs.builder()\n                        .osConstraints(AccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()\n                            .osType(\"DESKTOP_CHROME_OS\")\n                            .build())\n                        .requireScreenLock(true)\n                        .build())\n                    .regions(                    \n                        \"CH\",\n                        \"IT\",\n                        \"US\")\n                    .build())\n                .build())\n            .parent(access_policy.name().applyValue(name -\u003e String.format(\"accessPolicies/%s\", name)))\n            .title(\"chromeos_no_lock\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  access-level:\n    type: gcp:accesscontextmanager:AccessLevel\n    properties:\n      basic:\n        conditions:\n          - devicePolicy:\n              osConstraints:\n                - osType: DESKTOP_CHROME_OS\n              requireScreenLock: true\n            regions:\n              - CH\n              - IT\n              - US\n      parent: accessPolicies/${[\"access-policy\"].name}\n      title: chromeos_no_lock\n  access-policy:\n    type: gcp:accesscontextmanager:AccessPolicy\n    properties:\n      parent: organizations/123456789\n      title: my policy\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAccessLevel can be imported using any of these accepted formats* `{{name}}` When using the `pulumi import` command, AccessLevel can be imported using one of the formats above. For example\n\n```sh\n $ pulumi import gcp:accesscontextmanager/accessLevel:AccessLevel default {{name}}\n```\n\n ",
"description": "An AccessLevel is a label that can be applied to requests to GCP services,\nalong with a list of requirements necessary for the label to be applied.\n\n\nTo get more information about AccessLevel, see:\n\n* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)\n* How-to Guides\n    * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)\n\n\u003e **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,\nyou must specify a `billing_project` and set `user_project_override` to true\nin the provider configuration. Otherwise the ACM API will return a 403 error.\nYour account must have the `serviceusage.services.use` permission on the\n`billing_project` you defined.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Access Context Manager Access Level Basic\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gcp from \"@pulumi/gcp\";\n\nconst access_policy = new gcp.accesscontextmanager.AccessPolicy(\"access-policy\", {\n    parent: \"organizations/123456789\",\n    title: \"my policy\",\n});\nconst access_level = new gcp.accesscontextmanager.AccessLevel(\"access-level\", {\n    basic: {\n        conditions: [{\n            devicePolicy: {\n                osConstraints: [{\n                    osType: \"DESKTOP_CHROME_OS\",\n                }],\n                requireScreenLock: true,\n            },\n            regions: [\n                \"CH\",\n                \"IT\",\n                \"US\",\n            ],\n        }],\n    },\n    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,\n    title: \"chromeos_no_lock\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gcp as gcp\n\naccess_policy = gcp.accesscontextmanager.AccessPolicy(\"access-policy\",\n    parent=\"organizations/123456789\",\n    title=\"my policy\")\naccess_level = gcp.accesscontextmanager.AccessLevel(\"access-level\",\n    basic=gcp.accesscontextmanager.AccessLevelBasicArgs(\n        conditions=[gcp.accesscontextmanager.AccessLevelBasicConditionArgs(\n            device_policy=gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs(\n                os_constraints=[gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs(\n                    os_type=\"DESKTOP_CHROME_OS\",\n                )],\n                require_screen_lock=True,\n            ),\n            regions=[\n                \"CH\",\n                \"IT\",\n                \"US\",\n            ],\n        )],\n    ),\n    parent=access_policy.name.apply(lambda name: f\"accessPolicies/{name}\"),\n    title=\"chromeos_no_lock\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Gcp = Pulumi.Gcp;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var access_policy = new Gcp.AccessContextManager.AccessPolicy(\"access-policy\", new()\n    {\n        Parent = \"organizations/123456789\",\n        Title = \"my policy\",\n    });\n\n    var access_level = new Gcp.AccessContextManager.AccessLevel(\"access-level\", new()\n    {\n        Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs\n        {\n            Conditions = new[]\n            {\n                new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs\n                {\n                    DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs\n                    {\n                        OsConstraints = new[]\n                        {\n                            new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs\n                            {\n                                OsType = \"DESKTOP_CHROME_OS\",\n                            },\n                        },\n                        RequireScreenLock = true,\n                    },\n                    Regions = new[]\n                    {\n                        \"CH\",\n                        \"IT\",\n                        \"US\",\n                    },\n                },\n            },\n        },\n        Parent = access_policy.Name.Apply(name =\u003e $\"accessPolicies/{name}\"),\n        Title = \"chromeos_no_lock\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/accesscontextmanager\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := accesscontextmanager.NewAccessPolicy(ctx, \"access-policy\", \u0026accesscontextmanager.AccessPolicyArgs{\n\t\t\tParent: pulumi.String(\"organizations/123456789\"),\n\t\t\tTitle:  pulumi.String(\"my policy\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = accesscontextmanager.NewAccessLevel(ctx, \"access-level\", \u0026accesscontextmanager.AccessLevelArgs{\n\t\t\tBasic: \u0026accesscontextmanager.AccessLevelBasicArgs{\n\t\t\t\tConditions: accesscontextmanager.AccessLevelBasicConditionArray{\n\t\t\t\t\t\u0026accesscontextmanager.AccessLevelBasicConditionArgs{\n\t\t\t\t\t\tDevicePolicy: \u0026accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{\n\t\t\t\t\t\t\tOsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{\n\t\t\t\t\t\t\t\t\u0026accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{\n\t\t\t\t\t\t\t\t\tOsType: pulumi.String(\"DESKTOP_CHROME_OS\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRequireScreenLock: pulumi.Bool(true),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tRegions: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"CH\"),\n\t\t\t\t\t\t\tpulumi.String(\"IT\"),\n\t\t\t\t\t\t\tpulumi.String(\"US\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tParent: access_policy.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"accessPolicies/%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTitle: pulumi.String(\"chromeos_no_lock\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.gcp.accesscontextmanager.AccessPolicy;\nimport com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;\nimport com.pulumi.gcp.accesscontextmanager.AccessLevel;\nimport com.pulumi.gcp.accesscontextmanager.AccessLevelArgs;\nimport com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var access_policy = new AccessPolicy(\"access-policy\", AccessPolicyArgs.builder()        \n            .parent(\"organizations/123456789\")\n            .title(\"my policy\")\n            .build());\n\n        var access_level = new AccessLevel(\"access-level\", AccessLevelArgs.builder()        \n            .basic(AccessLevelBasicArgs.builder()\n                .conditions(AccessLevelBasicConditionArgs.builder()\n                    .devicePolicy(AccessLevelBasicConditionDevicePolicyArgs.builder()\n                        .osConstraints(AccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()\n                            .osType(\"DESKTOP_CHROME_OS\")\n                            .build())\n                        .requireScreenLock(true)\n                        .build())\n                    .regions(                    \n                        \"CH\",\n                        \"IT\",\n                        \"US\")\n                    .build())\n                .build())\n            .parent(access_policy.name().applyValue(name -\u003e String.format(\"accessPolicies/%s\", name)))\n            .title(\"chromeos_no_lock\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  access-level:\n    type: gcp:accesscontextmanager:AccessLevel\n    properties:\n      basic:\n        conditions:\n          - devicePolicy:\n              osConstraints:\n                - osType: DESKTOP_CHROME_OS\n              requireScreenLock: true\n            regions:\n              - CH\n              - IT\n              - US\n      parent: accessPolicies/${[\"access-policy\"].name}\n      title: chromeos_no_lock\n  access-policy:\n    type: gcp:accesscontextmanager:AccessPolicy\n    properties:\n      parent: organizations/123456789\n      title: my policy\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAccessLevel can be imported using any of these accepted formats:\n \t* `{{name}}`\n When using the `pulumi import` command, AccessLevel can be imported using one of the formats above. For example:\n\n```sh\n $ pulumi import gcp:accesscontextmanager/accessLevel:AccessLevel default {{name}}\n```\n\n ",

Yeah, okay, the above looks way better. The tests pass with some whitespace tweaking but could test more.