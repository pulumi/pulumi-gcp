// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ModelArmor
{
    /// <summary>
    /// Model Armor floor settings define rules that dictate minimum requirements for all Model Armor templates created at a specific point in the Google Cloud resource hierarchy (that is, at an organization, folder, or project level). If there are
    /// multiple floor settings that conflict with each other, the settings lower in the resource hierarchy take precedence
    /// For more information, checkout https://cloud.google.com/security-command-center/docs/model_armor_floor_settings
    /// 
    /// ## Example Usage
    /// 
    /// ### Modelarmor Floorsetting Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var floorsetting_basic = new Gcp.ModelArmor.Floorsetting("floorsetting-basic", new()
    ///     {
    ///         Parent = "projects/my-project-name",
    ///         Location = "global",
    ///         FilterConfig = null,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Modelarmor Floorsetting Filter Config
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var floorsetting_filter_config = new Gcp.ModelArmor.Floorsetting("floorsetting-filter-config", new()
    ///     {
    ///         Location = "global",
    ///         Parent = "project/my-project-name",
    ///         FilterConfig = new Gcp.ModelArmor.Inputs.FloorsettingFilterConfigArgs
    ///         {
    ///             RaiSettings = new Gcp.ModelArmor.Inputs.FloorsettingFilterConfigRaiSettingsArgs
    ///             {
    ///                 RaiFilters = new[]
    ///                 {
    ///                     new Gcp.ModelArmor.Inputs.FloorsettingFilterConfigRaiSettingsRaiFilterArgs
    ///                     {
    ///                         FilterType = "DANGEROUS",
    ///                         ConfidenceLevel = "MEDIUM_AND_ABOVE",
    ///                     },
    ///                 },
    ///             },
    ///             SdpSettings = new Gcp.ModelArmor.Inputs.FloorsettingFilterConfigSdpSettingsArgs
    ///             {
    ///                 BasicConfig = new Gcp.ModelArmor.Inputs.FloorsettingFilterConfigSdpSettingsBasicConfigArgs
    ///                 {
    ///                     FilterEnforcement = "ENABLED",
    ///                 },
    ///             },
    ///             PiAndJailbreakFilterSettings = new Gcp.ModelArmor.Inputs.FloorsettingFilterConfigPiAndJailbreakFilterSettingsArgs
    ///             {
    ///                 FilterEnforcement = "ENABLED",
    ///                 ConfidenceLevel = "HIGH",
    ///             },
    ///             MaliciousUriFilterSettings = new Gcp.ModelArmor.Inputs.FloorsettingFilterConfigMaliciousUriFilterSettingsArgs
    ///             {
    ///                 FilterEnforcement = "ENABLED",
    ///             },
    ///         },
    ///         EnableFloorSettingEnforcement = true,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Modelarmor Floorsetting Ai Platform Metadata
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var floorsetting_integrated_metadata = new Gcp.ModelArmor.Floorsetting("floorsetting-integrated-metadata", new()
    ///     {
    ///         Location = "global",
    ///         Parent = "projects/my-project-name",
    ///         FilterConfig = null,
    ///         EnableFloorSettingEnforcement = false,
    ///         AiPlatformFloorSetting = new Gcp.ModelArmor.Inputs.FloorsettingAiPlatformFloorSettingArgs
    ///         {
    ///             InspectOnly = true,
    ///             EnableCloudLogging = true,
    ///         },
    ///         FloorSettingMetadata = new Gcp.ModelArmor.Inputs.FloorsettingFloorSettingMetadataArgs
    ///         {
    ///             MultiLanguageDetection = new Gcp.ModelArmor.Inputs.FloorsettingFloorSettingMetadataMultiLanguageDetectionArgs
    ///             {
    ///                 EnableMultiLanguageDetection = false,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Floorsetting can be imported using any of these accepted formats:
    /// 
    /// * `{{parent}}/locations/{{location}}/floorSetting`
    /// 
    /// * `{{parent}}/{{location}}`
    /// 
    /// When using the `pulumi import` command, Floorsetting can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:modelarmor/floorsetting:Floorsetting default {{parent}}/locations/{{location}}/floorSetting
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:modelarmor/floorsetting:Floorsetting default {{parent}}/{{location}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:modelarmor/floorsetting:Floorsetting")]
    public partial class Floorsetting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AI Platform floor setting.
        /// Structure is documented below.
        /// </summary>
        [Output("aiPlatformFloorSetting")]
        public Output<Outputs.FloorsettingAiPlatformFloorSetting?> AiPlatformFloorSetting { get; private set; } = null!;

        /// <summary>
        /// [Output only] Create timestamp
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Floor Settings enforcement status.
        /// </summary>
        [Output("enableFloorSettingEnforcement")]
        public Output<bool?> EnableFloorSettingEnforcement { get; private set; } = null!;

        /// <summary>
        /// Filters configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("filterConfig")]
        public Output<Outputs.FloorsettingFilterConfig> FilterConfig { get; private set; } = null!;

        /// <summary>
        /// Metadata to enable multi language detection via floor setting.
        /// Structure is documented below.
        /// </summary>
        [Output("floorSettingMetadata")]
        public Output<Outputs.FloorsettingFloorSettingMetadata?> FloorSettingMetadata { get; private set; } = null!;

        /// <summary>
        /// List of integrated services for which the floor setting is applicable.
        /// </summary>
        [Output("integratedServices")]
        public Output<ImmutableArray<string>> IntegratedServices { get; private set; } = null!;

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Identifier. The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Will be any one of these:
        /// * `projects/{project}`
        /// * `folders/{folder}`
        /// * `organizations/{organizationId}`
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// [Output only] Update timestamp
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Floorsetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Floorsetting(string name, FloorsettingArgs args, CustomResourceOptions? options = null)
            : base("gcp:modelarmor/floorsetting:Floorsetting", name, args ?? new FloorsettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Floorsetting(string name, Input<string> id, FloorsettingState? state = null, CustomResourceOptions? options = null)
            : base("gcp:modelarmor/floorsetting:Floorsetting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Floorsetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Floorsetting Get(string name, Input<string> id, FloorsettingState? state = null, CustomResourceOptions? options = null)
        {
            return new Floorsetting(name, id, state, options);
        }
    }

    public sealed class FloorsettingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AI Platform floor setting.
        /// Structure is documented below.
        /// </summary>
        [Input("aiPlatformFloorSetting")]
        public Input<Inputs.FloorsettingAiPlatformFloorSettingArgs>? AiPlatformFloorSetting { get; set; }

        /// <summary>
        /// Floor Settings enforcement status.
        /// </summary>
        [Input("enableFloorSettingEnforcement")]
        public Input<bool>? EnableFloorSettingEnforcement { get; set; }

        /// <summary>
        /// Filters configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("filterConfig", required: true)]
        public Input<Inputs.FloorsettingFilterConfigArgs> FilterConfig { get; set; } = null!;

        /// <summary>
        /// Metadata to enable multi language detection via floor setting.
        /// Structure is documented below.
        /// </summary>
        [Input("floorSettingMetadata")]
        public Input<Inputs.FloorsettingFloorSettingMetadataArgs>? FloorSettingMetadata { get; set; }

        [Input("integratedServices")]
        private InputList<string>? _integratedServices;

        /// <summary>
        /// List of integrated services for which the floor setting is applicable.
        /// </summary>
        public InputList<string> IntegratedServices
        {
            get => _integratedServices ?? (_integratedServices = new InputList<string>());
            set => _integratedServices = value;
        }

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Will be any one of these:
        /// * `projects/{project}`
        /// * `folders/{folder}`
        /// * `organizations/{organizationId}`
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        public FloorsettingArgs()
        {
        }
        public static new FloorsettingArgs Empty => new FloorsettingArgs();
    }

    public sealed class FloorsettingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AI Platform floor setting.
        /// Structure is documented below.
        /// </summary>
        [Input("aiPlatformFloorSetting")]
        public Input<Inputs.FloorsettingAiPlatformFloorSettingGetArgs>? AiPlatformFloorSetting { get; set; }

        /// <summary>
        /// [Output only] Create timestamp
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Floor Settings enforcement status.
        /// </summary>
        [Input("enableFloorSettingEnforcement")]
        public Input<bool>? EnableFloorSettingEnforcement { get; set; }

        /// <summary>
        /// Filters configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("filterConfig")]
        public Input<Inputs.FloorsettingFilterConfigGetArgs>? FilterConfig { get; set; }

        /// <summary>
        /// Metadata to enable multi language detection via floor setting.
        /// Structure is documented below.
        /// </summary>
        [Input("floorSettingMetadata")]
        public Input<Inputs.FloorsettingFloorSettingMetadataGetArgs>? FloorSettingMetadata { get; set; }

        [Input("integratedServices")]
        private InputList<string>? _integratedServices;

        /// <summary>
        /// List of integrated services for which the floor setting is applicable.
        /// </summary>
        public InputList<string> IntegratedServices
        {
            get => _integratedServices ?? (_integratedServices = new InputList<string>());
            set => _integratedServices = value;
        }

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier. The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Will be any one of these:
        /// * `projects/{project}`
        /// * `folders/{folder}`
        /// * `organizations/{organizationId}`
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// [Output only] Update timestamp
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public FloorsettingState()
        {
        }
        public static new FloorsettingState Empty => new FloorsettingState();
    }
}
