// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Redis
{
    public static class GetCluster
    {
        /// <summary>
        /// Use this data source to get information about a Redis Cluster. For more details, see the [API documentation](https://cloud.google.com/memorystore/docs/cluster/reference/rest/v1/projects.locations.clusters).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.Redis.GetCluster.Invoke(new()
        ///     {
        ///         Name = "my-redis-cluster",
        ///         Region = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("gcp:redis/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Redis Cluster. For more details, see the [API documentation](https://cloud.google.com/memorystore/docs/cluster/reference/rest/v1/projects.locations.clusters).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.Redis.GetCluster.Invoke(new()
        ///     {
        ///         Name = "my-redis-cluster",
        ///         Region = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("gcp:redis/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Redis Cluster. For more details, see the [API documentation](https://cloud.google.com/memorystore/docs/cluster/reference/rest/v1/projects.locations.clusters).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.Redis.GetCluster.Invoke(new()
        ///     {
        ///         Name = "my-redis-cluster",
        ///         Region = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("gcp:redis/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Redis cluster.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// (optional)
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The region of the Redis cluster.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Redis cluster.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// (optional)
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the Redis cluster.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        public readonly string AuthorizationMode;
        public readonly ImmutableArray<Outputs.GetClusterAutomatedBackupConfigResult> AutomatedBackupConfigs;
        public readonly string BackupCollection;
        public readonly string CreateTime;
        public readonly ImmutableArray<Outputs.GetClusterCrossClusterReplicationConfigResult> CrossClusterReplicationConfigs;
        public readonly bool DeletionProtectionEnabled;
        public readonly ImmutableArray<Outputs.GetClusterDiscoveryEndpointResult> DiscoveryEndpoints;
        public readonly ImmutableArray<Outputs.GetClusterGcsSourceResult> GcsSources;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KmsKey;
        public readonly ImmutableArray<Outputs.GetClusterMaintenancePolicyResult> MaintenancePolicies;
        public readonly ImmutableArray<Outputs.GetClusterMaintenanceScheduleResult> MaintenanceSchedules;
        public readonly ImmutableArray<Outputs.GetClusterManagedBackupSourceResult> ManagedBackupSources;
        public readonly ImmutableArray<Outputs.GetClusterManagedServerCaResult> ManagedServerCas;
        public readonly string Name;
        public readonly string NodeType;
        public readonly ImmutableArray<Outputs.GetClusterPersistenceConfigResult> PersistenceConfigs;
        public readonly double PreciseSizeGb;
        public readonly string? Project;
        public readonly ImmutableArray<Outputs.GetClusterPscConfigResult> PscConfigs;
        public readonly ImmutableArray<Outputs.GetClusterPscConnectionResult> PscConnections;
        public readonly ImmutableArray<Outputs.GetClusterPscServiceAttachmentResult> PscServiceAttachments;
        public readonly ImmutableDictionary<string, string> RedisConfigs;
        public readonly string? Region;
        public readonly int ReplicaCount;
        public readonly int ShardCount;
        public readonly int SizeGb;
        public readonly string State;
        public readonly ImmutableArray<Outputs.GetClusterStateInfoResult> StateInfos;
        public readonly string TransitEncryptionMode;
        public readonly string Uid;
        public readonly ImmutableArray<Outputs.GetClusterZoneDistributionConfigResult> ZoneDistributionConfigs;

        [OutputConstructor]
        private GetClusterResult(
            string authorizationMode,

            ImmutableArray<Outputs.GetClusterAutomatedBackupConfigResult> automatedBackupConfigs,

            string backupCollection,

            string createTime,

            ImmutableArray<Outputs.GetClusterCrossClusterReplicationConfigResult> crossClusterReplicationConfigs,

            bool deletionProtectionEnabled,

            ImmutableArray<Outputs.GetClusterDiscoveryEndpointResult> discoveryEndpoints,

            ImmutableArray<Outputs.GetClusterGcsSourceResult> gcsSources,

            string id,

            string kmsKey,

            ImmutableArray<Outputs.GetClusterMaintenancePolicyResult> maintenancePolicies,

            ImmutableArray<Outputs.GetClusterMaintenanceScheduleResult> maintenanceSchedules,

            ImmutableArray<Outputs.GetClusterManagedBackupSourceResult> managedBackupSources,

            ImmutableArray<Outputs.GetClusterManagedServerCaResult> managedServerCas,

            string name,

            string nodeType,

            ImmutableArray<Outputs.GetClusterPersistenceConfigResult> persistenceConfigs,

            double preciseSizeGb,

            string? project,

            ImmutableArray<Outputs.GetClusterPscConfigResult> pscConfigs,

            ImmutableArray<Outputs.GetClusterPscConnectionResult> pscConnections,

            ImmutableArray<Outputs.GetClusterPscServiceAttachmentResult> pscServiceAttachments,

            ImmutableDictionary<string, string> redisConfigs,

            string? region,

            int replicaCount,

            int shardCount,

            int sizeGb,

            string state,

            ImmutableArray<Outputs.GetClusterStateInfoResult> stateInfos,

            string transitEncryptionMode,

            string uid,

            ImmutableArray<Outputs.GetClusterZoneDistributionConfigResult> zoneDistributionConfigs)
        {
            AuthorizationMode = authorizationMode;
            AutomatedBackupConfigs = automatedBackupConfigs;
            BackupCollection = backupCollection;
            CreateTime = createTime;
            CrossClusterReplicationConfigs = crossClusterReplicationConfigs;
            DeletionProtectionEnabled = deletionProtectionEnabled;
            DiscoveryEndpoints = discoveryEndpoints;
            GcsSources = gcsSources;
            Id = id;
            KmsKey = kmsKey;
            MaintenancePolicies = maintenancePolicies;
            MaintenanceSchedules = maintenanceSchedules;
            ManagedBackupSources = managedBackupSources;
            ManagedServerCas = managedServerCas;
            Name = name;
            NodeType = nodeType;
            PersistenceConfigs = persistenceConfigs;
            PreciseSizeGb = preciseSizeGb;
            Project = project;
            PscConfigs = pscConfigs;
            PscConnections = pscConnections;
            PscServiceAttachments = pscServiceAttachments;
            RedisConfigs = redisConfigs;
            Region = region;
            ReplicaCount = replicaCount;
            ShardCount = shardCount;
            SizeGb = sizeGb;
            State = state;
            StateInfos = stateInfos;
            TransitEncryptionMode = transitEncryptionMode;
            Uid = uid;
            ZoneDistributionConfigs = zoneDistributionConfigs;
        }
    }
}
