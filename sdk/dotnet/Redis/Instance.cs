// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Redis
{
    /// <summary>
    /// A Google Cloud Redis instance.
    /// 
    /// To get more information about Instance, see:
    /// 
    /// * [API documentation](https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/memorystore/docs/redis/)
    /// 
    /// ## Example Usage
    /// ### Redis Instance Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var cache = new Gcp.Redis.Instance("cache", new Gcp.Redis.InstanceArgs
    ///         {
    ///             MemorySizeGb = 1,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Redis Instance Full
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var redis_network = Output.Create(Gcp.Compute.GetNetwork.InvokeAsync(new Gcp.Compute.GetNetworkArgs
    ///         {
    ///             Name = "redis-test-network",
    ///         }));
    ///         var cache = new Gcp.Redis.Instance("cache", new Gcp.Redis.InstanceArgs
    ///         {
    ///             Tier = "STANDARD_HA",
    ///             MemorySizeGb = 1,
    ///             LocationId = "us-central1-a",
    ///             AlternativeLocationId = "us-central1-f",
    ///             AuthorizedNetwork = redis_network.Apply(redis_network =&gt; redis_network.Id),
    ///             RedisVersion = "REDIS_4_0",
    ///             DisplayName = "Test Instance",
    ///             ReservedIpRange = "192.168.0.0/29",
    ///             Labels = 
    ///             {
    ///                 { "my_key", "my_val" },
    ///                 { "other_key", "other_val" },
    ///             },
    ///             MaintenancePolicy = new Gcp.Redis.Inputs.InstanceMaintenancePolicyArgs
    ///             {
    ///                 WeeklyMaintenanceWindows = 
    ///                 {
    ///                     new Gcp.Redis.Inputs.InstanceMaintenancePolicyWeeklyMaintenanceWindowArgs
    ///                     {
    ///                         Day = "TUESDAY",
    ///                         StartTime = new Gcp.Redis.Inputs.InstanceMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs
    ///                         {
    ///                             Hours = 0,
    ///                             Minutes = 30,
    ///                             Seconds = 0,
    ///                             Nanos = 0,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Redis Instance Private Service
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var redis_network = Output.Create(Gcp.Compute.GetNetwork.InvokeAsync(new Gcp.Compute.GetNetworkArgs
    ///         {
    ///             Name = "redis-test-network",
    ///         }));
    ///         var serviceRange = new Gcp.Compute.GlobalAddress("serviceRange", new Gcp.Compute.GlobalAddressArgs
    ///         {
    ///             Purpose = "VPC_PEERING",
    ///             AddressType = "INTERNAL",
    ///             PrefixLength = 16,
    ///             Network = redis_network.Apply(redis_network =&gt; redis_network.Id),
    ///         });
    ///         var privateServiceConnection = new Gcp.ServiceNetworking.Connection("privateServiceConnection", new Gcp.ServiceNetworking.ConnectionArgs
    ///         {
    ///             Network = redis_network.Apply(redis_network =&gt; redis_network.Id),
    ///             Service = "servicenetworking.googleapis.com",
    ///             ReservedPeeringRanges = 
    ///             {
    ///                 serviceRange.Name,
    ///             },
    ///         });
    ///         var cache = new Gcp.Redis.Instance("cache", new Gcp.Redis.InstanceArgs
    ///         {
    ///             Tier = "STANDARD_HA",
    ///             MemorySizeGb = 1,
    ///             LocationId = "us-central1-a",
    ///             AlternativeLocationId = "us-central1-f",
    ///             AuthorizedNetwork = redis_network.Apply(redis_network =&gt; redis_network.Id),
    ///             ConnectMode = "PRIVATE_SERVICE_ACCESS",
    ///             RedisVersion = "REDIS_4_0",
    ///             DisplayName = "Test Instance",
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 privateServiceConnection,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Redis Instance Mrr
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var redis_network = Output.Create(Gcp.Compute.GetNetwork.InvokeAsync(new Gcp.Compute.GetNetworkArgs
    ///         {
    ///             Name = "redis-test-network",
    ///         }));
    ///         var cache = new Gcp.Redis.Instance("cache", new Gcp.Redis.InstanceArgs
    ///         {
    ///             Tier = "STANDARD_HA",
    ///             MemorySizeGb = 5,
    ///             LocationId = "us-central1-a",
    ///             AlternativeLocationId = "us-central1-f",
    ///             AuthorizedNetwork = redis_network.Apply(redis_network =&gt; redis_network.Id),
    ///             RedisVersion = "REDIS_6_X",
    ///             DisplayName = "Terraform Test Instance",
    ///             ReservedIpRange = "192.168.0.0/28",
    ///             ReplicaCount = 5,
    ///             ReadReplicasMode = "READ_REPLICAS_ENABLED",
    ///             Labels = 
    ///             {
    ///                 { "my_key", "my_val" },
    ///                 { "other_key", "other_val" },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Redis Instance Cmek
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var redisKeyring = new Gcp.Kms.KeyRing("redisKeyring", new Gcp.Kms.KeyRingArgs
    ///         {
    ///             Location = "us-central1",
    ///         });
    ///         var redisKey = new Gcp.Kms.CryptoKey("redisKey", new Gcp.Kms.CryptoKeyArgs
    ///         {
    ///             KeyRing = redisKeyring.Id,
    ///         });
    ///         var redis_network = Output.Create(Gcp.Compute.GetNetwork.InvokeAsync(new Gcp.Compute.GetNetworkArgs
    ///         {
    ///             Name = "redis-test-network",
    ///         }));
    ///         var cache = new Gcp.Redis.Instance("cache", new Gcp.Redis.InstanceArgs
    ///         {
    ///             Tier = "STANDARD_HA",
    ///             MemorySizeGb = 1,
    ///             LocationId = "us-central1-a",
    ///             AlternativeLocationId = "us-central1-f",
    ///             AuthorizedNetwork = redis_network.Apply(redis_network =&gt; redis_network.Id),
    ///             RedisVersion = "REDIS_6_X",
    ///             DisplayName = "Terraform Test Instance",
    ///             ReservedIpRange = "192.168.0.0/29",
    ///             Labels = 
    ///             {
    ///                 { "my_key", "my_val" },
    ///                 { "other_key", "other_val" },
    ///             },
    ///             CustomerManagedKey = redisKey.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Instance can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:redis/instance:Instance default projects/{{project}}/locations/{{region}}/instances/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:redis/instance:Instance default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:redis/instance:Instance default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:redis/instance:Instance default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:redis/instance:Instance")]
    public partial class Instance : Pulumi.CustomResource
    {
        /// <summary>
        /// Only applicable to STANDARD_HA tier which protects the instance
        /// against zonal failures by provisioning it across two zones.
        /// If provided, it must be a different zone from the one provided in
        /// [locationId].
        /// </summary>
        [Output("alternativeLocationId")]
        public Output<string> AlternativeLocationId { get; private set; } = null!;

        /// <summary>
        /// Optional. Indicates whether OSS Redis AUTH is enabled for the
        /// instance. If set to "true" AUTH is enabled on the instance.
        /// Default value is "false" meaning AUTH is disabled.
        /// </summary>
        [Output("authEnabled")]
        public Output<bool?> AuthEnabled { get; private set; } = null!;

        /// <summary>
        /// AUTH String set on the instance. This field will only be populated if auth_enabled is true.
        /// </summary>
        [Output("authString")]
        public Output<string> AuthString { get; private set; } = null!;

        /// <summary>
        /// The full name of the Google Compute Engine network to which the
        /// instance is connected. If left unspecified, the default network
        /// will be used.
        /// </summary>
        [Output("authorizedNetwork")]
        public Output<string> AuthorizedNetwork { get; private set; } = null!;

        /// <summary>
        /// The connection mode of the Redis instance.
        /// Default value is `DIRECT_PEERING`.
        /// Possible values are `DIRECT_PEERING` and `PRIVATE_SERVICE_ACCESS`.
        /// </summary>
        [Output("connectMode")]
        public Output<string?> ConnectMode { get; private set; } = null!;

        /// <summary>
        /// -
        /// Output only. The time when the policy was created.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
        /// resolution and up to nine fractional digits.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The current zone where the Redis endpoint is placed. For Basic Tier instances, this will always be the same as the
        /// [locationId] provided by the user at creation time. For Standard Tier instances, this can be either [locationId] or
        /// [alternativeLocationId] and can change after a failover event.
        /// </summary>
        [Output("currentLocationId")]
        public Output<string> CurrentLocationId { get; private set; } = null!;

        /// <summary>
        /// Optional. The KMS key reference that you want to use to encrypt the data at rest for this Redis
        /// instance. If this is provided, CMEK is enabled.
        /// </summary>
        [Output("customerManagedKey")]
        public Output<string?> CustomerManagedKey { get; private set; } = null!;

        /// <summary>
        /// An arbitrary and optional user-provided name for the instance.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// Resource labels to represent user provided metadata.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The zone where the instance will be provisioned. If not provided,
        /// the service will choose a zone for the instance. For STANDARD_HA tier,
        /// instances will be created across two zones for protection against
        /// zonal failures. If [alternativeLocationId] is also provided, it must
        /// be different from [locationId].
        /// </summary>
        [Output("locationId")]
        public Output<string> LocationId { get; private set; } = null!;

        /// <summary>
        /// Maintenance policy for an instance.
        /// Structure is documented below.
        /// </summary>
        [Output("maintenancePolicy")]
        public Output<Outputs.InstanceMaintenancePolicy?> MaintenancePolicy { get; private set; } = null!;

        /// <summary>
        /// Upcoming maintenance schedule.
        /// Structure is documented below.
        /// </summary>
        [Output("maintenanceSchedule")]
        public Output<Outputs.InstanceMaintenanceSchedule?> MaintenanceSchedule { get; private set; } = null!;

        /// <summary>
        /// Redis memory size in GiB.
        /// </summary>
        [Output("memorySizeGb")]
        public Output<int> MemorySizeGb { get; private set; } = null!;

        /// <summary>
        /// The ID of the instance or a fully qualified identifier for the instance.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Output only. Info per node.
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<Outputs.InstanceNode>> Nodes { get; private set; } = null!;

        /// <summary>
        /// Output only. Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is
        /// "serviceAccount:". The value may change over time for a given instance so should be checked before each import/export
        /// operation.
        /// </summary>
        [Output("persistenceIamIdentity")]
        public Output<string> PersistenceIamIdentity { get; private set; } = null!;

        /// <summary>
        /// The port number of the exposed Redis endpoint.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Output only. Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only. Targets all healthy
        /// replica nodes in instance. Replication is asynchronous and replica nodes will exhibit some lag behind the primary. Write
        /// requests must target 'host'.
        /// </summary>
        [Output("readEndpoint")]
        public Output<string> ReadEndpoint { get; private set; } = null!;

        /// <summary>
        /// Output only. The port number of the exposed readonly redis endpoint. Standard tier only. Write requests should target
        /// 'port'.
        /// </summary>
        [Output("readEndpointPort")]
        public Output<int> ReadEndpointPort { get; private set; } = null!;

        /// <summary>
        /// Optional. Read replica mode. Can only be specified when trying to create the instance.
        /// If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
        /// - READ_REPLICAS_DISABLED: If disabled, read endpoint will not be provided and the
        /// instance cannot scale up or down the number of replicas.
        /// - READ_REPLICAS_ENABLED: If enabled, read endpoint will be provided and the instance
        /// can scale up and down the number of replicas.
        /// Possible values are `READ_REPLICAS_DISABLED` and `READ_REPLICAS_ENABLED`.
        /// </summary>
        [Output("readReplicasMode")]
        public Output<string> ReadReplicasMode { get; private set; } = null!;

        /// <summary>
        /// Redis configuration parameters, according to http://redis.io/topics/config.
        /// Please check Memorystore documentation for the list of supported parameters:
        /// https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
        /// </summary>
        [Output("redisConfigs")]
        public Output<ImmutableDictionary<string, string>?> RedisConfigs { get; private set; } = null!;

        /// <summary>
        /// The version of Redis software. If not provided, latest supported
        /// version will be used. Please check the API documentation linked
        /// at the top for the latest valid values.
        /// </summary>
        [Output("redisVersion")]
        public Output<string> RedisVersion { get; private set; } = null!;

        /// <summary>
        /// The name of the Redis region of the instance.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Optional. The number of replica nodes. The valid range for the Standard Tier with
        /// read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled
        /// for a Standard Tier instance, the only valid value is 1 and the default is 1.
        /// The valid value for basic tier is 0 and the default is also 0.
        /// </summary>
        [Output("replicaCount")]
        public Output<int> ReplicaCount { get; private set; } = null!;

        /// <summary>
        /// The CIDR range of internal addresses that are reserved for this
        /// instance. If not provided, the service will choose an unused /29
        /// block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
        /// unique and non-overlapping with existing subnets in an authorized
        /// network.
        /// </summary>
        [Output("reservedIpRange")]
        public Output<string> ReservedIpRange { get; private set; } = null!;

        /// <summary>
        /// Optional. Additional IP range for node placement. Required when enabling read replicas on
        /// an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or
        /// "auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address
        /// range associated with the private service access connection, or "auto".
        /// </summary>
        [Output("secondaryIpRange")]
        public Output<string> SecondaryIpRange { get; private set; } = null!;

        /// <summary>
        /// List of server CA certificates for the instance.
        /// </summary>
        [Output("serverCaCerts")]
        public Output<ImmutableArray<Outputs.InstanceServerCaCert>> ServerCaCerts { get; private set; } = null!;

        /// <summary>
        /// The service tier of the instance. Must be one of these values:
        /// - BASIC: standalone instance
        /// - STANDARD_HA: highly available primary/replica instances
        /// Default value is `BASIC`.
        /// Possible values are `BASIC` and `STANDARD_HA`.
        /// </summary>
        [Output("tier")]
        public Output<string?> Tier { get; private set; } = null!;

        /// <summary>
        /// The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
        /// - SERVER_AUTHENTICATION: Client to Server traffic encryption enabled with server authentication
        /// Default value is `DISABLED`.
        /// Possible values are `SERVER_AUTHENTICATION` and `DISABLED`.
        /// </summary>
        [Output("transitEncryptionMode")]
        public Output<string?> TransitEncryptionMode { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("gcp:redis/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:redis/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only applicable to STANDARD_HA tier which protects the instance
        /// against zonal failures by provisioning it across two zones.
        /// If provided, it must be a different zone from the one provided in
        /// [locationId].
        /// </summary>
        [Input("alternativeLocationId")]
        public Input<string>? AlternativeLocationId { get; set; }

        /// <summary>
        /// Optional. Indicates whether OSS Redis AUTH is enabled for the
        /// instance. If set to "true" AUTH is enabled on the instance.
        /// Default value is "false" meaning AUTH is disabled.
        /// </summary>
        [Input("authEnabled")]
        public Input<bool>? AuthEnabled { get; set; }

        /// <summary>
        /// The full name of the Google Compute Engine network to which the
        /// instance is connected. If left unspecified, the default network
        /// will be used.
        /// </summary>
        [Input("authorizedNetwork")]
        public Input<string>? AuthorizedNetwork { get; set; }

        /// <summary>
        /// The connection mode of the Redis instance.
        /// Default value is `DIRECT_PEERING`.
        /// Possible values are `DIRECT_PEERING` and `PRIVATE_SERVICE_ACCESS`.
        /// </summary>
        [Input("connectMode")]
        public Input<string>? ConnectMode { get; set; }

        /// <summary>
        /// Optional. The KMS key reference that you want to use to encrypt the data at rest for this Redis
        /// instance. If this is provided, CMEK is enabled.
        /// </summary>
        [Input("customerManagedKey")]
        public Input<string>? CustomerManagedKey { get; set; }

        /// <summary>
        /// An arbitrary and optional user-provided name for the instance.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels to represent user provided metadata.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The zone where the instance will be provisioned. If not provided,
        /// the service will choose a zone for the instance. For STANDARD_HA tier,
        /// instances will be created across two zones for protection against
        /// zonal failures. If [alternativeLocationId] is also provided, it must
        /// be different from [locationId].
        /// </summary>
        [Input("locationId")]
        public Input<string>? LocationId { get; set; }

        /// <summary>
        /// Maintenance policy for an instance.
        /// Structure is documented below.
        /// </summary>
        [Input("maintenancePolicy")]
        public Input<Inputs.InstanceMaintenancePolicyArgs>? MaintenancePolicy { get; set; }

        /// <summary>
        /// Upcoming maintenance schedule.
        /// Structure is documented below.
        /// </summary>
        [Input("maintenanceSchedule")]
        public Input<Inputs.InstanceMaintenanceScheduleArgs>? MaintenanceSchedule { get; set; }

        /// <summary>
        /// Redis memory size in GiB.
        /// </summary>
        [Input("memorySizeGb", required: true)]
        public Input<int> MemorySizeGb { get; set; } = null!;

        /// <summary>
        /// The ID of the instance or a fully qualified identifier for the instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Optional. Read replica mode. Can only be specified when trying to create the instance.
        /// If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
        /// - READ_REPLICAS_DISABLED: If disabled, read endpoint will not be provided and the
        /// instance cannot scale up or down the number of replicas.
        /// - READ_REPLICAS_ENABLED: If enabled, read endpoint will be provided and the instance
        /// can scale up and down the number of replicas.
        /// Possible values are `READ_REPLICAS_DISABLED` and `READ_REPLICAS_ENABLED`.
        /// </summary>
        [Input("readReplicasMode")]
        public Input<string>? ReadReplicasMode { get; set; }

        [Input("redisConfigs")]
        private InputMap<string>? _redisConfigs;

        /// <summary>
        /// Redis configuration parameters, according to http://redis.io/topics/config.
        /// Please check Memorystore documentation for the list of supported parameters:
        /// https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
        /// </summary>
        public InputMap<string> RedisConfigs
        {
            get => _redisConfigs ?? (_redisConfigs = new InputMap<string>());
            set => _redisConfigs = value;
        }

        /// <summary>
        /// The version of Redis software. If not provided, latest supported
        /// version will be used. Please check the API documentation linked
        /// at the top for the latest valid values.
        /// </summary>
        [Input("redisVersion")]
        public Input<string>? RedisVersion { get; set; }

        /// <summary>
        /// The name of the Redis region of the instance.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Optional. The number of replica nodes. The valid range for the Standard Tier with
        /// read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled
        /// for a Standard Tier instance, the only valid value is 1 and the default is 1.
        /// The valid value for basic tier is 0 and the default is also 0.
        /// </summary>
        [Input("replicaCount")]
        public Input<int>? ReplicaCount { get; set; }

        /// <summary>
        /// The CIDR range of internal addresses that are reserved for this
        /// instance. If not provided, the service will choose an unused /29
        /// block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
        /// unique and non-overlapping with existing subnets in an authorized
        /// network.
        /// </summary>
        [Input("reservedIpRange")]
        public Input<string>? ReservedIpRange { get; set; }

        /// <summary>
        /// Optional. Additional IP range for node placement. Required when enabling read replicas on
        /// an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or
        /// "auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address
        /// range associated with the private service access connection, or "auto".
        /// </summary>
        [Input("secondaryIpRange")]
        public Input<string>? SecondaryIpRange { get; set; }

        /// <summary>
        /// The service tier of the instance. Must be one of these values:
        /// - BASIC: standalone instance
        /// - STANDARD_HA: highly available primary/replica instances
        /// Default value is `BASIC`.
        /// Possible values are `BASIC` and `STANDARD_HA`.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
        /// - SERVER_AUTHENTICATION: Client to Server traffic encryption enabled with server authentication
        /// Default value is `DISABLED`.
        /// Possible values are `SERVER_AUTHENTICATION` and `DISABLED`.
        /// </summary>
        [Input("transitEncryptionMode")]
        public Input<string>? TransitEncryptionMode { get; set; }

        public InstanceArgs()
        {
        }
    }

    public sealed class InstanceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only applicable to STANDARD_HA tier which protects the instance
        /// against zonal failures by provisioning it across two zones.
        /// If provided, it must be a different zone from the one provided in
        /// [locationId].
        /// </summary>
        [Input("alternativeLocationId")]
        public Input<string>? AlternativeLocationId { get; set; }

        /// <summary>
        /// Optional. Indicates whether OSS Redis AUTH is enabled for the
        /// instance. If set to "true" AUTH is enabled on the instance.
        /// Default value is "false" meaning AUTH is disabled.
        /// </summary>
        [Input("authEnabled")]
        public Input<bool>? AuthEnabled { get; set; }

        /// <summary>
        /// AUTH String set on the instance. This field will only be populated if auth_enabled is true.
        /// </summary>
        [Input("authString")]
        public Input<string>? AuthString { get; set; }

        /// <summary>
        /// The full name of the Google Compute Engine network to which the
        /// instance is connected. If left unspecified, the default network
        /// will be used.
        /// </summary>
        [Input("authorizedNetwork")]
        public Input<string>? AuthorizedNetwork { get; set; }

        /// <summary>
        /// The connection mode of the Redis instance.
        /// Default value is `DIRECT_PEERING`.
        /// Possible values are `DIRECT_PEERING` and `PRIVATE_SERVICE_ACCESS`.
        /// </summary>
        [Input("connectMode")]
        public Input<string>? ConnectMode { get; set; }

        /// <summary>
        /// -
        /// Output only. The time when the policy was created.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
        /// resolution and up to nine fractional digits.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The current zone where the Redis endpoint is placed. For Basic Tier instances, this will always be the same as the
        /// [locationId] provided by the user at creation time. For Standard Tier instances, this can be either [locationId] or
        /// [alternativeLocationId] and can change after a failover event.
        /// </summary>
        [Input("currentLocationId")]
        public Input<string>? CurrentLocationId { get; set; }

        /// <summary>
        /// Optional. The KMS key reference that you want to use to encrypt the data at rest for this Redis
        /// instance. If this is provided, CMEK is enabled.
        /// </summary>
        [Input("customerManagedKey")]
        public Input<string>? CustomerManagedKey { get; set; }

        /// <summary>
        /// An arbitrary and optional user-provided name for the instance.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels to represent user provided metadata.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The zone where the instance will be provisioned. If not provided,
        /// the service will choose a zone for the instance. For STANDARD_HA tier,
        /// instances will be created across two zones for protection against
        /// zonal failures. If [alternativeLocationId] is also provided, it must
        /// be different from [locationId].
        /// </summary>
        [Input("locationId")]
        public Input<string>? LocationId { get; set; }

        /// <summary>
        /// Maintenance policy for an instance.
        /// Structure is documented below.
        /// </summary>
        [Input("maintenancePolicy")]
        public Input<Inputs.InstanceMaintenancePolicyGetArgs>? MaintenancePolicy { get; set; }

        /// <summary>
        /// Upcoming maintenance schedule.
        /// Structure is documented below.
        /// </summary>
        [Input("maintenanceSchedule")]
        public Input<Inputs.InstanceMaintenanceScheduleGetArgs>? MaintenanceSchedule { get; set; }

        /// <summary>
        /// Redis memory size in GiB.
        /// </summary>
        [Input("memorySizeGb")]
        public Input<int>? MemorySizeGb { get; set; }

        /// <summary>
        /// The ID of the instance or a fully qualified identifier for the instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodes")]
        private InputList<Inputs.InstanceNodeGetArgs>? _nodes;

        /// <summary>
        /// Output only. Info per node.
        /// </summary>
        public InputList<Inputs.InstanceNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.InstanceNodeGetArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// Output only. Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is
        /// "serviceAccount:". The value may change over time for a given instance so should be checked before each import/export
        /// operation.
        /// </summary>
        [Input("persistenceIamIdentity")]
        public Input<string>? PersistenceIamIdentity { get; set; }

        /// <summary>
        /// The port number of the exposed Redis endpoint.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Output only. Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only. Targets all healthy
        /// replica nodes in instance. Replication is asynchronous and replica nodes will exhibit some lag behind the primary. Write
        /// requests must target 'host'.
        /// </summary>
        [Input("readEndpoint")]
        public Input<string>? ReadEndpoint { get; set; }

        /// <summary>
        /// Output only. The port number of the exposed readonly redis endpoint. Standard tier only. Write requests should target
        /// 'port'.
        /// </summary>
        [Input("readEndpointPort")]
        public Input<int>? ReadEndpointPort { get; set; }

        /// <summary>
        /// Optional. Read replica mode. Can only be specified when trying to create the instance.
        /// If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
        /// - READ_REPLICAS_DISABLED: If disabled, read endpoint will not be provided and the
        /// instance cannot scale up or down the number of replicas.
        /// - READ_REPLICAS_ENABLED: If enabled, read endpoint will be provided and the instance
        /// can scale up and down the number of replicas.
        /// Possible values are `READ_REPLICAS_DISABLED` and `READ_REPLICAS_ENABLED`.
        /// </summary>
        [Input("readReplicasMode")]
        public Input<string>? ReadReplicasMode { get; set; }

        [Input("redisConfigs")]
        private InputMap<string>? _redisConfigs;

        /// <summary>
        /// Redis configuration parameters, according to http://redis.io/topics/config.
        /// Please check Memorystore documentation for the list of supported parameters:
        /// https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
        /// </summary>
        public InputMap<string> RedisConfigs
        {
            get => _redisConfigs ?? (_redisConfigs = new InputMap<string>());
            set => _redisConfigs = value;
        }

        /// <summary>
        /// The version of Redis software. If not provided, latest supported
        /// version will be used. Please check the API documentation linked
        /// at the top for the latest valid values.
        /// </summary>
        [Input("redisVersion")]
        public Input<string>? RedisVersion { get; set; }

        /// <summary>
        /// The name of the Redis region of the instance.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Optional. The number of replica nodes. The valid range for the Standard Tier with
        /// read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled
        /// for a Standard Tier instance, the only valid value is 1 and the default is 1.
        /// The valid value for basic tier is 0 and the default is also 0.
        /// </summary>
        [Input("replicaCount")]
        public Input<int>? ReplicaCount { get; set; }

        /// <summary>
        /// The CIDR range of internal addresses that are reserved for this
        /// instance. If not provided, the service will choose an unused /29
        /// block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
        /// unique and non-overlapping with existing subnets in an authorized
        /// network.
        /// </summary>
        [Input("reservedIpRange")]
        public Input<string>? ReservedIpRange { get; set; }

        /// <summary>
        /// Optional. Additional IP range for node placement. Required when enabling read replicas on
        /// an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or
        /// "auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address
        /// range associated with the private service access connection, or "auto".
        /// </summary>
        [Input("secondaryIpRange")]
        public Input<string>? SecondaryIpRange { get; set; }

        [Input("serverCaCerts")]
        private InputList<Inputs.InstanceServerCaCertGetArgs>? _serverCaCerts;

        /// <summary>
        /// List of server CA certificates for the instance.
        /// </summary>
        public InputList<Inputs.InstanceServerCaCertGetArgs> ServerCaCerts
        {
            get => _serverCaCerts ?? (_serverCaCerts = new InputList<Inputs.InstanceServerCaCertGetArgs>());
            set => _serverCaCerts = value;
        }

        /// <summary>
        /// The service tier of the instance. Must be one of these values:
        /// - BASIC: standalone instance
        /// - STANDARD_HA: highly available primary/replica instances
        /// Default value is `BASIC`.
        /// Possible values are `BASIC` and `STANDARD_HA`.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
        /// - SERVER_AUTHENTICATION: Client to Server traffic encryption enabled with server authentication
        /// Default value is `DISABLED`.
        /// Possible values are `SERVER_AUTHENTICATION` and `DISABLED`.
        /// </summary>
        [Input("transitEncryptionMode")]
        public Input<string>? TransitEncryptionMode { get; set; }

        public InstanceState()
        {
        }
    }
}
