// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Redis
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Redis Cluster User Created Connections
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network1 = new Gcp.Compute.Network("network1", new()
    ///     {
    ///         Name = "net1",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnetNetwork1 = new Gcp.Compute.Subnetwork("subnet_network1", new()
    ///     {
    ///         Name = "subnet-net1",
    ///         IpCidrRange = "10.0.0.248/29",
    ///         Region = "us-central1",
    ///         Network = network1.Id,
    ///     });
    /// 
    ///     var ip1Network1 = new Gcp.Compute.Address("ip1_network1", new()
    ///     {
    ///         Name = "ip1-net1",
    ///         Region = "us-central1",
    ///         Subnetwork = subnetNetwork1.Id,
    ///         AddressType = "INTERNAL",
    ///         Purpose = "GCE_ENDPOINT",
    ///     });
    /// 
    ///     // redis cluster without endpoint
    ///     var cluster_user_connCluster = new Gcp.Redis.Cluster("cluster-user-conn", new()
    ///     {
    ///         Name = "cluster-user-conn",
    ///         ShardCount = 3,
    ///         Region = "us-central1",
    ///         ReplicaCount = 0,
    ///         DeletionProtectionEnabled = false,
    ///     });
    /// 
    ///     var forwardingRule1Network1 = new Gcp.Compute.ForwardingRule("forwarding_rule1_network1", new()
    ///     {
    ///         Name = "fwd1-net1",
    ///         Region = "us-central1",
    ///         IpAddress = ip1Network1.Id,
    ///         LoadBalancingScheme = "",
    ///         Network = network1.Id,
    ///         Target = cluster_user_connCluster.PscServiceAttachments.Apply(pscServiceAttachments =&gt; pscServiceAttachments[0].ServiceAttachment),
    ///     });
    /// 
    ///     var ip2Network1 = new Gcp.Compute.Address("ip2_network1", new()
    ///     {
    ///         Name = "ip2-net1",
    ///         Region = "us-central1",
    ///         Subnetwork = subnetNetwork1.Id,
    ///         AddressType = "INTERNAL",
    ///         Purpose = "GCE_ENDPOINT",
    ///     });
    /// 
    ///     var forwardingRule2Network1 = new Gcp.Compute.ForwardingRule("forwarding_rule2_network1", new()
    ///     {
    ///         Name = "fwd2-net1",
    ///         Region = "us-central1",
    ///         IpAddress = ip2Network1.Id,
    ///         LoadBalancingScheme = "",
    ///         Network = network1.Id,
    ///         Target = cluster_user_connCluster.PscServiceAttachments.Apply(pscServiceAttachments =&gt; pscServiceAttachments[1].ServiceAttachment),
    ///     });
    /// 
    ///     var network2 = new Gcp.Compute.Network("network2", new()
    ///     {
    ///         Name = "network2",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnetNetwork2 = new Gcp.Compute.Subnetwork("subnet_network2", new()
    ///     {
    ///         Name = "subnet-net2",
    ///         IpCidrRange = "10.0.0.248/29",
    ///         Region = "us-central1",
    ///         Network = network2.Id,
    ///     });
    /// 
    ///     var ip1Network2 = new Gcp.Compute.Address("ip1_network2", new()
    ///     {
    ///         Name = "ip1-net2",
    ///         Region = "us-central1",
    ///         Subnetwork = subnetNetwork2.Id,
    ///         AddressType = "INTERNAL",
    ///         Purpose = "GCE_ENDPOINT",
    ///     });
    /// 
    ///     var forwardingRule1Network2 = new Gcp.Compute.ForwardingRule("forwarding_rule1_network2", new()
    ///     {
    ///         Name = "fwd1-net2",
    ///         Region = "us-central1",
    ///         IpAddress = ip1Network2.Id,
    ///         LoadBalancingScheme = "",
    ///         Network = network2.Id,
    ///         Target = cluster_user_connCluster.PscServiceAttachments.Apply(pscServiceAttachments =&gt; pscServiceAttachments[0].ServiceAttachment),
    ///     });
    /// 
    ///     var ip2Network2 = new Gcp.Compute.Address("ip2_network2", new()
    ///     {
    ///         Name = "ip2-net2",
    ///         Region = "us-central1",
    ///         Subnetwork = subnetNetwork2.Id,
    ///         AddressType = "INTERNAL",
    ///         Purpose = "GCE_ENDPOINT",
    ///     });
    /// 
    ///     var forwardingRule2Network2 = new Gcp.Compute.ForwardingRule("forwarding_rule2_network2", new()
    ///     {
    ///         Name = "fwd2-net2",
    ///         Region = "us-central1",
    ///         IpAddress = ip2Network2.Id,
    ///         LoadBalancingScheme = "",
    ///         Network = network2.Id,
    ///         Target = cluster_user_connCluster.PscServiceAttachments.Apply(pscServiceAttachments =&gt; pscServiceAttachments[1].ServiceAttachment),
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var cluster_user_conn = new Gcp.Redis.ClusterUserCreatedConnections("cluster-user-conn", new()
    ///     {
    ///         Name = "cluster-user-conn",
    ///         Region = "us-central1",
    ///         ClusterEndpoints = new[]
    ///         {
    ///             new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointArgs
    ///             {
    ///                 Connections = new[]
    ///                 {
    ///                     new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointConnectionArgs
    ///                     {
    ///                         PscConnection = new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointConnectionPscConnectionArgs
    ///                         {
    ///                             PscConnectionId = forwardingRule1Network1.PscConnectionId,
    ///                             Address = ip1Network1.IPAddress,
    ///                             ForwardingRule = forwardingRule1Network1.Id,
    ///                             Network = network1.Id,
    ///                             ProjectId = project.Apply(getProjectResult =&gt; getProjectResult.ProjectId),
    ///                             ServiceAttachment = cluster_user_connCluster.PscServiceAttachments.Apply(pscServiceAttachments =&gt; pscServiceAttachments[0].ServiceAttachment),
    ///                         },
    ///                     },
    ///                     new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointConnectionArgs
    ///                     {
    ///                         PscConnection = new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointConnectionPscConnectionArgs
    ///                         {
    ///                             PscConnectionId = forwardingRule2Network1.PscConnectionId,
    ///                             Address = ip2Network1.IPAddress,
    ///                             ForwardingRule = forwardingRule2Network1.Id,
    ///                             Network = network1.Id,
    ///                             ServiceAttachment = cluster_user_connCluster.PscServiceAttachments.Apply(pscServiceAttachments =&gt; pscServiceAttachments[1].ServiceAttachment),
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointArgs
    ///             {
    ///                 Connections = new[]
    ///                 {
    ///                     new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointConnectionArgs
    ///                     {
    ///                         PscConnection = new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointConnectionPscConnectionArgs
    ///                         {
    ///                             PscConnectionId = forwardingRule1Network2.PscConnectionId,
    ///                             Address = ip1Network2.IPAddress,
    ///                             ForwardingRule = forwardingRule1Network2.Id,
    ///                             Network = network2.Id,
    ///                             ServiceAttachment = cluster_user_connCluster.PscServiceAttachments.Apply(pscServiceAttachments =&gt; pscServiceAttachments[0].ServiceAttachment),
    ///                         },
    ///                     },
    ///                     new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointConnectionArgs
    ///                     {
    ///                         PscConnection = new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointConnectionPscConnectionArgs
    ///                         {
    ///                             PscConnectionId = forwardingRule2Network2.PscConnectionId,
    ///                             Address = ip2Network2.IPAddress,
    ///                             ForwardingRule = forwardingRule2Network2.Id,
    ///                             Network = network2.Id,
    ///                             ServiceAttachment = cluster_user_connCluster.PscServiceAttachments.Apply(pscServiceAttachments =&gt; pscServiceAttachments[1].ServiceAttachment),
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Redis Cluster User And Auto Created Connections
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network2 = new Gcp.Compute.Network("network2", new()
    ///     {
    ///         Name = "network2",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnetNetwork2 = new Gcp.Compute.Subnetwork("subnet_network2", new()
    ///     {
    ///         Name = "subnet-net2",
    ///         IpCidrRange = "10.0.0.248/29",
    ///         Region = "us-central1",
    ///         Network = network2.Id,
    ///     });
    /// 
    ///     var ip1Network2 = new Gcp.Compute.Address("ip1_network2", new()
    ///     {
    ///         Name = "ip1-net2",
    ///         Region = "us-central1",
    ///         Subnetwork = subnetNetwork2.Id,
    ///         AddressType = "INTERNAL",
    ///         Purpose = "GCE_ENDPOINT",
    ///     });
    /// 
    ///     var network1 = new Gcp.Compute.Network("network1", new()
    ///     {
    ///         Name = "net1",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnetNetwork1 = new Gcp.Compute.Subnetwork("subnet_network1", new()
    ///     {
    ///         Name = "subnet-net1",
    ///         IpCidrRange = "10.0.0.248/29",
    ///         Region = "us-central1",
    ///         Network = network1.Id,
    ///     });
    /// 
    ///     var @default = new Gcp.NetworkConnectivity.ServiceConnectionPolicy("default", new()
    ///     {
    ///         Name = "scpolicy",
    ///         Location = "us-central1",
    ///         ServiceClass = "gcp-memorystore-redis",
    ///         Description = "my basic service connection policy",
    ///         Network = network1.Id,
    ///         PscConfig = new Gcp.NetworkConnectivity.Inputs.ServiceConnectionPolicyPscConfigArgs
    ///         {
    ///             Subnetworks = new[]
    ///             {
    ///                 subnetNetwork1.Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // redis cluster without endpoint
    ///     var cluster_user_auto_connCluster = new Gcp.Redis.Cluster("cluster-user-auto-conn", new()
    ///     {
    ///         Name = "cluster-user-auto-conn",
    ///         ShardCount = 3,
    ///         Region = "us-central1",
    ///         ReplicaCount = 0,
    ///         DeletionProtectionEnabled = false,
    ///         PscConfigs = new[]
    ///         {
    ///             new Gcp.Redis.Inputs.ClusterPscConfigArgs
    ///             {
    ///                 Network = network1.Id,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             @default,
    ///         },
    ///     });
    /// 
    ///     var forwardingRule1Network2 = new Gcp.Compute.ForwardingRule("forwarding_rule1_network2", new()
    ///     {
    ///         Name = "fwd1-net2",
    ///         Region = "us-central1",
    ///         IpAddress = ip1Network2.Id,
    ///         LoadBalancingScheme = "",
    ///         Network = network2.Id,
    ///         Target = cluster_user_auto_connCluster.PscServiceAttachments.Apply(pscServiceAttachments =&gt; pscServiceAttachments[0].ServiceAttachment),
    ///     });
    /// 
    ///     var ip2Network2 = new Gcp.Compute.Address("ip2_network2", new()
    ///     {
    ///         Name = "ip2-net2",
    ///         Region = "us-central1",
    ///         Subnetwork = subnetNetwork2.Id,
    ///         AddressType = "INTERNAL",
    ///         Purpose = "GCE_ENDPOINT",
    ///     });
    /// 
    ///     var forwardingRule2Network2 = new Gcp.Compute.ForwardingRule("forwarding_rule2_network2", new()
    ///     {
    ///         Name = "fwd2-net2",
    ///         Region = "us-central1",
    ///         IpAddress = ip2Network2.Id,
    ///         LoadBalancingScheme = "",
    ///         Network = network2.Id,
    ///         Target = cluster_user_auto_connCluster.PscServiceAttachments.Apply(pscServiceAttachments =&gt; pscServiceAttachments[1].ServiceAttachment),
    ///     });
    /// 
    ///     var cluster_user_auto_conn = new Gcp.Redis.ClusterUserCreatedConnections("cluster-user-auto-conn", new()
    ///     {
    ///         Name = "cluster-user-auto-conn",
    ///         Region = "us-central1",
    ///         ClusterEndpoints = new[]
    ///         {
    ///             new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointArgs
    ///             {
    ///                 Connections = new[]
    ///                 {
    ///                     new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointConnectionArgs
    ///                     {
    ///                         PscConnection = new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointConnectionPscConnectionArgs
    ///                         {
    ///                             PscConnectionId = forwardingRule1Network2.PscConnectionId,
    ///                             Address = ip1Network2.IPAddress,
    ///                             ForwardingRule = forwardingRule1Network2.Id,
    ///                             Network = network2.Id,
    ///                             ServiceAttachment = cluster_user_auto_connCluster.PscServiceAttachments.Apply(pscServiceAttachments =&gt; pscServiceAttachments[0].ServiceAttachment),
    ///                         },
    ///                     },
    ///                     new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointConnectionArgs
    ///                     {
    ///                         PscConnection = new Gcp.Redis.Inputs.ClusterUserCreatedConnectionsClusterEndpointConnectionPscConnectionArgs
    ///                         {
    ///                             PscConnectionId = forwardingRule2Network2.PscConnectionId,
    ///                             Address = ip2Network2.IPAddress,
    ///                             ForwardingRule = forwardingRule2Network2.Id,
    ///                             Network = network2.Id,
    ///                             ServiceAttachment = cluster_user_auto_connCluster.PscServiceAttachments.Apply(pscServiceAttachments =&gt; pscServiceAttachments[1].ServiceAttachment),
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ClusterUserCreatedConnections can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{region}}/clusters/{{name}}`
    /// 
    /// * `{{project}}/{{region}}/{{name}}`
    /// 
    /// * `{{region}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, ClusterUserCreatedConnections can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections default projects/{{project}}/locations/{{region}}/clusters/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections")]
    public partial class ClusterUserCreatedConnections : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of cluster endpoints
        /// Structure is documented below.
        /// </summary>
        [Output("clusterEndpoints")]
        public Output<ImmutableArray<Outputs.ClusterUserCreatedConnectionsClusterEndpoint>> ClusterEndpoints { get; private set; } = null!;

        /// <summary>
        /// The name of the Redis cluster these endpoints should be added to.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The name of the region of the Redis cluster these endpoints should be added to.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a ClusterUserCreatedConnections resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ClusterUserCreatedConnections(string name, ClusterUserCreatedConnectionsArgs args, CustomResourceOptions? options = null)
            : base("gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections", name, args ?? new ClusterUserCreatedConnectionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ClusterUserCreatedConnections(string name, Input<string> id, ClusterUserCreatedConnectionsState? state = null, CustomResourceOptions? options = null)
            : base("gcp:redis/clusterUserCreatedConnections:ClusterUserCreatedConnections", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ClusterUserCreatedConnections resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ClusterUserCreatedConnections Get(string name, Input<string> id, ClusterUserCreatedConnectionsState? state = null, CustomResourceOptions? options = null)
        {
            return new ClusterUserCreatedConnections(name, id, state, options);
        }
    }

    public sealed class ClusterUserCreatedConnectionsArgs : global::Pulumi.ResourceArgs
    {
        [Input("clusterEndpoints")]
        private InputList<Inputs.ClusterUserCreatedConnectionsClusterEndpointArgs>? _clusterEndpoints;

        /// <summary>
        /// A list of cluster endpoints
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ClusterUserCreatedConnectionsClusterEndpointArgs> ClusterEndpoints
        {
            get => _clusterEndpoints ?? (_clusterEndpoints = new InputList<Inputs.ClusterUserCreatedConnectionsClusterEndpointArgs>());
            set => _clusterEndpoints = value;
        }

        /// <summary>
        /// The name of the Redis cluster these endpoints should be added to.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The name of the region of the Redis cluster these endpoints should be added to.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public ClusterUserCreatedConnectionsArgs()
        {
        }
        public static new ClusterUserCreatedConnectionsArgs Empty => new ClusterUserCreatedConnectionsArgs();
    }

    public sealed class ClusterUserCreatedConnectionsState : global::Pulumi.ResourceArgs
    {
        [Input("clusterEndpoints")]
        private InputList<Inputs.ClusterUserCreatedConnectionsClusterEndpointGetArgs>? _clusterEndpoints;

        /// <summary>
        /// A list of cluster endpoints
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ClusterUserCreatedConnectionsClusterEndpointGetArgs> ClusterEndpoints
        {
            get => _clusterEndpoints ?? (_clusterEndpoints = new InputList<Inputs.ClusterUserCreatedConnectionsClusterEndpointGetArgs>());
            set => _clusterEndpoints = value;
        }

        /// <summary>
        /// The name of the Redis cluster these endpoints should be added to.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The name of the region of the Redis cluster these endpoints should be added to.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public ClusterUserCreatedConnectionsState()
        {
        }
        public static new ClusterUserCreatedConnectionsState Empty => new ClusterUserCreatedConnectionsState();
    }
}
