// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebaserules
{
    /// <summary>
    /// For more information, see:
    /// * [Get started with Firebase Security Rules](https://firebase.google.com/docs/rules/get-started)
    /// ## Example Usage
    /// ### Firestore_release
    /// Creates a Firebase Rules Release to Cloud Firestore
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var firestore = new Gcp.Firebaserules.Ruleset("firestore", new()
    ///     {
    ///         Source = new Gcp.Firebaserules.Inputs.RulesetSourceArgs
    ///         {
    ///             Files = new[]
    ///             {
    ///                 new Gcp.Firebaserules.Inputs.RulesetSourceFileArgs
    ///                 {
    ///                     Content = "service cloud.firestore {match /databases/{database}/documents { match /{document=**} { allow read, write: if false; } } }",
    ///                     Name = "firestore.rules",
    ///                 },
    ///             },
    ///         },
    ///         Project = "my-project-name",
    ///     });
    /// 
    ///     var primary = new Gcp.Firebaserules.Release("primary", new()
    ///     {
    ///         RulesetName = firestore.Name.Apply(name =&gt; $"projects/my-project-name/rulesets/{name}"),
    ///         Project = "my-project-name",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Storage_release
    /// Creates a Firebase Rules Release for a Storage bucket
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Provision a non-default Cloud Storage bucket.
    ///     var bucketBucket = new Gcp.Storage.Bucket("bucketBucket", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-west1",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     // Make the Storage bucket accessible for Firebase SDKs, authentication, and Firebase Security Rules.
    ///     var bucketStorageBucket = new Gcp.Firebase.StorageBucket("bucketStorageBucket", new()
    ///     {
    ///         Project = "my-project-name",
    ///         BucketId = bucketBucket.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     // Create a ruleset of Firebase Security Rules from a local file.
    ///     var storage = new Gcp.Firebaserules.Ruleset("storage", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Source = new Gcp.Firebaserules.Inputs.RulesetSourceArgs
    ///         {
    ///             Files = new[]
    ///             {
    ///                 new Gcp.Firebaserules.Inputs.RulesetSourceFileArgs
    ///                 {
    ///                     Name = "storage.rules",
    ///                     Content = "service firebase.storage {match /b/{bucket}/o {match /{allPaths=**} {allow read, write: if request.auth != null;}}}",
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///         DependsOn = new[]
    ///         {
    ///             bucketStorageBucket,
    ///         },
    ///     });
    /// 
    ///     var primary = new Gcp.Firebaserules.Release("primary", new()
    ///     {
    ///         RulesetName = storage.Name.Apply(name =&gt; $"projects/my-project-name/rulesets/{name}"),
    ///         Project = "my-project-name",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Release can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firebaserules/release:Release default projects/{{project}}/releases/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebaserules/release:Release")]
    public partial class Release : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Output only. Time the release was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Disable the release to keep it from being served. The response code of NOT_FOUND will be given for executables generated from this Release.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// Format: `projects/{project_id}/releases/{release_id}`\Firestore Rules Releases will **always** have the name 'cloud.firestore'
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The project for the resource
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist for the `Release` to be created.
        /// 
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("rulesetName")]
        public Output<string> RulesetName { get; private set; } = null!;

        /// <summary>
        /// Output only. Time the release was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Release resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Release(string name, ReleaseArgs args, CustomResourceOptions? options = null)
            : base("gcp:firebaserules/release:Release", name, args ?? new ReleaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Release(string name, Input<string> id, ReleaseState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebaserules/release:Release", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Release resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Release Get(string name, Input<string> id, ReleaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Release(name, id, state, options);
        }
    }

    public sealed class ReleaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Format: `projects/{project_id}/releases/{release_id}`\Firestore Rules Releases will **always** have the name 'cloud.firestore'
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The project for the resource
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist for the `Release` to be created.
        /// 
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("rulesetName", required: true)]
        public Input<string> RulesetName { get; set; } = null!;

        public ReleaseArgs()
        {
        }
        public static new ReleaseArgs Empty => new ReleaseArgs();
    }

    public sealed class ReleaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Output only. Time the release was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Disable the release to keep it from being served. The response code of NOT_FOUND will be given for executables generated from this Release.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Format: `projects/{project_id}/releases/{release_id}`\Firestore Rules Releases will **always** have the name 'cloud.firestore'
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The project for the resource
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist for the `Release` to be created.
        /// 
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("rulesetName")]
        public Input<string>? RulesetName { get; set; }

        /// <summary>
        /// Output only. Time the release was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public ReleaseState()
        {
        }
        public static new ReleaseState Empty => new ReleaseState();
    }
}
