// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkConnectivity
{
    /// <summary>
    /// The NetworkConnectivity Spoke resource
    /// 
    /// To get more information about Spoke, see:
    /// 
    /// * [API documentation](https://cloud.google.com/network-connectivity/docs/reference/networkconnectivity/rest/v1beta/projects.locations.spokes)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/overview)
    /// 
    /// ## Example Usage
    /// 
    /// ### Network Connectivity Spoke Linked Vpc Network Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Name = "net",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var basicHub = new Gcp.NetworkConnectivity.Hub("basic_hub", new()
    ///     {
    ///         Name = "hub1",
    ///         Description = "A sample hub",
    ///         Labels = 
    ///         {
    ///             { "label-two", "value-one" },
    ///         },
    ///     });
    /// 
    ///     var primary = new Gcp.NetworkConnectivity.Spoke("primary", new()
    ///     {
    ///         Name = "spoke1",
    ///         Location = "global",
    ///         Description = "A sample spoke with a linked router appliance instance",
    ///         Labels = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///         Hub = basicHub.Id,
    ///         LinkedVpcNetwork = new Gcp.NetworkConnectivity.Inputs.SpokeLinkedVpcNetworkArgs
    ///         {
    ///             ExcludeExportRanges = new[]
    ///             {
    ///                 "198.51.100.0/24",
    ///                 "10.10.0.0/16",
    ///             },
    ///             IncludeExportRanges = new[]
    ///             {
    ///                 "198.51.100.0/23",
    ///                 "10.0.0.0/8",
    ///             },
    ///             Uri = network.SelfLink,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Connectivity Spoke Router Appliance Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Name = "tf-test-network_55138",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnetwork = new Gcp.Compute.Subnetwork("subnetwork", new()
    ///     {
    ///         Name = "tf-test-subnet_37559",
    ///         IpCidrRange = "10.0.0.0/28",
    ///         Region = "us-central1",
    ///         Network = network.SelfLink,
    ///     });
    /// 
    ///     var instance = new Gcp.Compute.Instance("instance", new()
    ///     {
    ///         Name = "tf-test-instance_91980",
    ///         MachineType = "e2-medium",
    ///         CanIpForward = true,
    ///         Zone = "us-central1-a",
    ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
    ///         {
    ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
    ///             {
    ///                 Image = "projects/debian-cloud/global/images/debian-10-buster-v20210817",
    ///             },
    ///         },
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
    ///             {
    ///                 Subnetwork = subnetwork.Name,
    ///                 NetworkIp = "10.0.0.2",
    ///                 AccessConfigs = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.InstanceNetworkInterfaceAccessConfigArgs
    ///                     {
    ///                         NetworkTier = "PREMIUM",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var basicHub = new Gcp.NetworkConnectivity.Hub("basic_hub", new()
    ///     {
    ///         Name = "tf-test-hub_37118",
    ///         Description = "A sample hub",
    ///         Labels = 
    ///         {
    ///             { "label-two", "value-one" },
    ///         },
    ///     });
    /// 
    ///     var primary = new Gcp.NetworkConnectivity.Spoke("primary", new()
    ///     {
    ///         Name = "tf-test-name_80332",
    ///         Location = "us-central1",
    ///         Description = "A sample spoke with a linked routher appliance instance",
    ///         Labels = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///         Hub = basicHub.Id,
    ///         LinkedRouterApplianceInstances = new Gcp.NetworkConnectivity.Inputs.SpokeLinkedRouterApplianceInstancesArgs
    ///         {
    ///             Instances = new[]
    ///             {
    ///                 new Gcp.NetworkConnectivity.Inputs.SpokeLinkedRouterApplianceInstancesInstanceArgs
    ///                 {
    ///                     VirtualMachine = instance.SelfLink,
    ///                     IpAddress = "10.0.0.2",
    ///                 },
    ///             },
    ///             SiteToSiteDataTransfer = true,
    ///             IncludeImportRanges = new[]
    ///             {
    ///                 "ALL_IPV4_RANGES",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Connectivity Spoke Vpn Tunnel Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicHub = new Gcp.NetworkConnectivity.Hub("basic_hub", new()
    ///     {
    ///         Name = "basic-hub1",
    ///         Description = "A sample hub",
    ///         Labels = 
    ///         {
    ///             { "label-two", "value-one" },
    ///         },
    ///     });
    /// 
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Name = "basic-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnetwork = new Gcp.Compute.Subnetwork("subnetwork", new()
    ///     {
    ///         Name = "basic-subnetwork",
    ///         IpCidrRange = "10.0.0.0/28",
    ///         Region = "us-central1",
    ///         Network = network.SelfLink,
    ///     });
    /// 
    ///     var gateway = new Gcp.Compute.HaVpnGateway("gateway", new()
    ///     {
    ///         Name = "vpn-gateway",
    ///         Network = network.Id,
    ///     });
    /// 
    ///     var externalVpnGw = new Gcp.Compute.ExternalVpnGateway("external_vpn_gw", new()
    ///     {
    ///         Name = "external-vpn-gateway",
    ///         RedundancyType = "SINGLE_IP_INTERNALLY_REDUNDANT",
    ///         Description = "An externally managed VPN gateway",
    ///         Interfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.ExternalVpnGatewayInterfaceArgs
    ///             {
    ///                 Id = 0,
    ///                 IpAddress = "8.8.8.8",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var router = new Gcp.Compute.Router("router", new()
    ///     {
    ///         Name = "external-vpn-gateway",
    ///         Region = "us-central1",
    ///         Network = network.Name,
    ///         Bgp = new Gcp.Compute.Inputs.RouterBgpArgs
    ///         {
    ///             Asn = 64514,
    ///         },
    ///     });
    /// 
    ///     var tunnel1 = new Gcp.Compute.VPNTunnel("tunnel1", new()
    ///     {
    ///         Name = "tunnel1",
    ///         Region = "us-central1",
    ///         VpnGateway = gateway.Id,
    ///         PeerExternalGateway = externalVpnGw.Id,
    ///         PeerExternalGatewayInterface = 0,
    ///         SharedSecret = "a secret message",
    ///         Router = router.Id,
    ///         VpnGatewayInterface = 0,
    ///     });
    /// 
    ///     var tunnel2 = new Gcp.Compute.VPNTunnel("tunnel2", new()
    ///     {
    ///         Name = "tunnel2",
    ///         Region = "us-central1",
    ///         VpnGateway = gateway.Id,
    ///         PeerExternalGateway = externalVpnGw.Id,
    ///         PeerExternalGatewayInterface = 0,
    ///         SharedSecret = "a secret message",
    ///         Router = router.Id.Apply(id =&gt; $" {id}"),
    ///         VpnGatewayInterface = 1,
    ///     });
    /// 
    ///     var routerInterface1 = new Gcp.Compute.RouterInterface("router_interface1", new()
    ///     {
    ///         Name = "router-interface1",
    ///         Router = router.Name,
    ///         Region = "us-central1",
    ///         IpRange = "169.254.0.1/30",
    ///         VpnTunnel = tunnel1.Name,
    ///     });
    /// 
    ///     var routerPeer1 = new Gcp.Compute.RouterPeer("router_peer1", new()
    ///     {
    ///         Name = "router-peer1",
    ///         Router = router.Name,
    ///         Region = "us-central1",
    ///         PeerIpAddress = "169.254.0.2",
    ///         PeerAsn = 64515,
    ///         AdvertisedRoutePriority = 100,
    ///         Interface = routerInterface1.Name,
    ///     });
    /// 
    ///     var routerInterface2 = new Gcp.Compute.RouterInterface("router_interface2", new()
    ///     {
    ///         Name = "router-interface2",
    ///         Router = router.Name,
    ///         Region = "us-central1",
    ///         IpRange = "169.254.1.1/30",
    ///         VpnTunnel = tunnel2.Name,
    ///     });
    /// 
    ///     var routerPeer2 = new Gcp.Compute.RouterPeer("router_peer2", new()
    ///     {
    ///         Name = "router-peer2",
    ///         Router = router.Name,
    ///         Region = "us-central1",
    ///         PeerIpAddress = "169.254.1.2",
    ///         PeerAsn = 64515,
    ///         AdvertisedRoutePriority = 100,
    ///         Interface = routerInterface2.Name,
    ///     });
    /// 
    ///     var tunnel1Spoke = new Gcp.NetworkConnectivity.Spoke("tunnel1", new()
    ///     {
    ///         Name = "vpn-tunnel-1-spoke",
    ///         Location = "us-central1",
    ///         Description = "A sample spoke with a linked VPN Tunnel",
    ///         Labels = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///         Hub = basicHub.Id,
    ///         LinkedVpnTunnels = new Gcp.NetworkConnectivity.Inputs.SpokeLinkedVpnTunnelsArgs
    ///         {
    ///             Uris = new[]
    ///             {
    ///                 tunnel1.SelfLink,
    ///             },
    ///             SiteToSiteDataTransfer = true,
    ///             IncludeImportRanges = new[]
    ///             {
    ///                 "ALL_IPV4_RANGES",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var tunnel2Spoke = new Gcp.NetworkConnectivity.Spoke("tunnel2", new()
    ///     {
    ///         Name = "vpn-tunnel-2-spoke",
    ///         Location = "us-central1",
    ///         Description = "A sample spoke with a linked VPN Tunnel",
    ///         Labels = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///         Hub = basicHub.Id,
    ///         LinkedVpnTunnels = new Gcp.NetworkConnectivity.Inputs.SpokeLinkedVpnTunnelsArgs
    ///         {
    ///             Uris = new[]
    ///             {
    ///                 tunnel2.SelfLink,
    ///             },
    ///             SiteToSiteDataTransfer = true,
    ///             IncludeImportRanges = new[]
    ///             {
    ///                 "ALL_IPV4_RANGES",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Connectivity Spoke Interconnect Attachment Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicHub = new Gcp.NetworkConnectivity.Hub("basic_hub", new()
    ///     {
    ///         Name = "basic-hub1",
    ///         Description = "A sample hub",
    ///         Labels = 
    ///         {
    ///             { "label-two", "value-one" },
    ///         },
    ///     });
    /// 
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Name = "basic-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var router = new Gcp.Compute.Router("router", new()
    ///     {
    ///         Name = "external-vpn-gateway",
    ///         Region = "us-central1",
    ///         Network = network.Name,
    ///         Bgp = new Gcp.Compute.Inputs.RouterBgpArgs
    ///         {
    ///             Asn = 16550,
    ///         },
    ///     });
    /// 
    ///     var interconnect_attachment = new Gcp.Compute.InterconnectAttachment("interconnect-attachment", new()
    ///     {
    ///         Name = "partner-interconnect1",
    ///         EdgeAvailabilityDomain = "AVAILABILITY_DOMAIN_1",
    ///         Type = "PARTNER",
    ///         Router = router.Id,
    ///         Mtu = "1500",
    ///         Region = "us-central1",
    ///     });
    /// 
    ///     var primary = new Gcp.NetworkConnectivity.Spoke("primary", new()
    ///     {
    ///         Name = "interconnect-attachment-spoke",
    ///         Location = "us-central1",
    ///         Description = "A sample spoke with a linked Interconnect Attachment",
    ///         Labels = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///         Hub = basicHub.Id,
    ///         LinkedInterconnectAttachments = new Gcp.NetworkConnectivity.Inputs.SpokeLinkedInterconnectAttachmentsArgs
    ///         {
    ///             Uris = new[]
    ///             {
    ///                 interconnect_attachment.SelfLink,
    ///             },
    ///             SiteToSiteDataTransfer = true,
    ///             IncludeImportRanges = new[]
    ///             {
    ///                 "ALL_IPV4_RANGES",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Connectivity Spoke Linked Producer Vpc Network Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Name = "net-spoke",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var address = new Gcp.Compute.GlobalAddress("address", new()
    ///     {
    ///         Name = "test-address",
    ///         Purpose = "VPC_PEERING",
    ///         AddressType = "INTERNAL",
    ///         PrefixLength = 16,
    ///         Network = network.Id,
    ///     });
    /// 
    ///     var peering = new Gcp.ServiceNetworking.Connection("peering", new()
    ///     {
    ///         Network = network.Id,
    ///         Service = "servicenetworking.googleapis.com",
    ///         ReservedPeeringRanges = new[]
    ///         {
    ///             address.Name,
    ///         },
    ///     });
    /// 
    ///     var basicHub = new Gcp.NetworkConnectivity.Hub("basic_hub", new()
    ///     {
    ///         Name = "hub-basic",
    ///     });
    /// 
    ///     var linkedVpcSpoke = new Gcp.NetworkConnectivity.Spoke("linked_vpc_spoke", new()
    ///     {
    ///         Name = "vpc-spoke",
    ///         Location = "global",
    ///         Hub = basicHub.Id,
    ///         LinkedVpcNetwork = new Gcp.NetworkConnectivity.Inputs.SpokeLinkedVpcNetworkArgs
    ///         {
    ///             Uri = network.SelfLink,
    ///         },
    ///     });
    /// 
    ///     var primary = new Gcp.NetworkConnectivity.Spoke("primary", new()
    ///     {
    ///         Name = "producer-spoke",
    ///         Location = "global",
    ///         Description = "A sample spoke with a linked router appliance instance",
    ///         Labels = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///         Hub = basicHub.Id,
    ///         LinkedProducerVpcNetwork = new Gcp.NetworkConnectivity.Inputs.SpokeLinkedProducerVpcNetworkArgs
    ///         {
    ///             Network = network.Name,
    ///             Peering = peering.Peering,
    ///             ExcludeExportRanges = new[]
    ///             {
    ///                 "198.51.100.0/24",
    ///                 "10.10.0.0/16",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             linkedVpcSpoke,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Spoke can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/spokes/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, Spoke can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkconnectivity/spoke:Spoke default projects/{{project}}/locations/{{location}}/spokes/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkconnectivity/spoke:Spoke default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkconnectivity/spoke:Spoke default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networkconnectivity/spoke:Spoke")]
    public partial class Spoke : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Output only. The time the spoke was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// An optional description of the spoke.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Immutable. The URI of the hub that this spoke is attached to.
        /// </summary>
        [Output("hub")]
        public Output<string> Hub { get; private set; } = null!;

        /// <summary>
        /// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
        /// Structure is documented below.
        /// </summary>
        [Output("linkedInterconnectAttachments")]
        public Output<Outputs.SpokeLinkedInterconnectAttachments?> LinkedInterconnectAttachments { get; private set; } = null!;

        /// <summary>
        /// Producer VPC network that is associated with the spoke.
        /// Structure is documented below.
        /// </summary>
        [Output("linkedProducerVpcNetwork")]
        public Output<Outputs.SpokeLinkedProducerVpcNetwork?> LinkedProducerVpcNetwork { get; private set; } = null!;

        /// <summary>
        /// The URIs of linked Router appliance resources
        /// Structure is documented below.
        /// </summary>
        [Output("linkedRouterApplianceInstances")]
        public Output<Outputs.SpokeLinkedRouterApplianceInstances?> LinkedRouterApplianceInstances { get; private set; } = null!;

        /// <summary>
        /// VPC network that is associated with the spoke.
        /// Structure is documented below.
        /// </summary>
        [Output("linkedVpcNetwork")]
        public Output<Outputs.SpokeLinkedVpcNetwork?> LinkedVpcNetwork { get; private set; } = null!;

        /// <summary>
        /// The URIs of linked VPN tunnel resources
        /// Structure is documented below.
        /// </summary>
        [Output("linkedVpnTunnels")]
        public Output<Outputs.SpokeLinkedVpnTunnels?> LinkedVpnTunnels { get; private set; } = null!;

        /// <summary>
        /// The location for the resource
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Immutable. The name of the spoke. Spoke names must be unique.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Output only. The current lifecycle state of this spoke.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different unique_id.
        /// </summary>
        [Output("uniqueId")]
        public Output<string> UniqueId { get; private set; } = null!;

        /// <summary>
        /// Output only. The time the spoke was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Spoke resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Spoke(string name, SpokeArgs args, CustomResourceOptions? options = null)
            : base("gcp:networkconnectivity/spoke:Spoke", name, args ?? new SpokeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Spoke(string name, Input<string> id, SpokeState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networkconnectivity/spoke:Spoke", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Spoke resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Spoke Get(string name, Input<string> id, SpokeState? state = null, CustomResourceOptions? options = null)
        {
            return new Spoke(name, id, state, options);
        }
    }

    public sealed class SpokeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional description of the spoke.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Immutable. The URI of the hub that this spoke is attached to.
        /// </summary>
        [Input("hub", required: true)]
        public Input<string> Hub { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
        /// Structure is documented below.
        /// </summary>
        [Input("linkedInterconnectAttachments")]
        public Input<Inputs.SpokeLinkedInterconnectAttachmentsArgs>? LinkedInterconnectAttachments { get; set; }

        /// <summary>
        /// Producer VPC network that is associated with the spoke.
        /// Structure is documented below.
        /// </summary>
        [Input("linkedProducerVpcNetwork")]
        public Input<Inputs.SpokeLinkedProducerVpcNetworkArgs>? LinkedProducerVpcNetwork { get; set; }

        /// <summary>
        /// The URIs of linked Router appliance resources
        /// Structure is documented below.
        /// </summary>
        [Input("linkedRouterApplianceInstances")]
        public Input<Inputs.SpokeLinkedRouterApplianceInstancesArgs>? LinkedRouterApplianceInstances { get; set; }

        /// <summary>
        /// VPC network that is associated with the spoke.
        /// Structure is documented below.
        /// </summary>
        [Input("linkedVpcNetwork")]
        public Input<Inputs.SpokeLinkedVpcNetworkArgs>? LinkedVpcNetwork { get; set; }

        /// <summary>
        /// The URIs of linked VPN tunnel resources
        /// Structure is documented below.
        /// </summary>
        [Input("linkedVpnTunnels")]
        public Input<Inputs.SpokeLinkedVpnTunnelsArgs>? LinkedVpnTunnels { get; set; }

        /// <summary>
        /// The location for the resource
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Immutable. The name of the spoke. Spoke names must be unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public SpokeArgs()
        {
        }
        public static new SpokeArgs Empty => new SpokeArgs();
    }

    public sealed class SpokeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Output only. The time the spoke was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// An optional description of the spoke.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Immutable. The URI of the hub that this spoke is attached to.
        /// </summary>
        [Input("hub")]
        public Input<string>? Hub { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
        /// Structure is documented below.
        /// </summary>
        [Input("linkedInterconnectAttachments")]
        public Input<Inputs.SpokeLinkedInterconnectAttachmentsGetArgs>? LinkedInterconnectAttachments { get; set; }

        /// <summary>
        /// Producer VPC network that is associated with the spoke.
        /// Structure is documented below.
        /// </summary>
        [Input("linkedProducerVpcNetwork")]
        public Input<Inputs.SpokeLinkedProducerVpcNetworkGetArgs>? LinkedProducerVpcNetwork { get; set; }

        /// <summary>
        /// The URIs of linked Router appliance resources
        /// Structure is documented below.
        /// </summary>
        [Input("linkedRouterApplianceInstances")]
        public Input<Inputs.SpokeLinkedRouterApplianceInstancesGetArgs>? LinkedRouterApplianceInstances { get; set; }

        /// <summary>
        /// VPC network that is associated with the spoke.
        /// Structure is documented below.
        /// </summary>
        [Input("linkedVpcNetwork")]
        public Input<Inputs.SpokeLinkedVpcNetworkGetArgs>? LinkedVpcNetwork { get; set; }

        /// <summary>
        /// The URIs of linked VPN tunnel resources
        /// Structure is documented below.
        /// </summary>
        [Input("linkedVpnTunnels")]
        public Input<Inputs.SpokeLinkedVpnTunnelsGetArgs>? LinkedVpnTunnels { get; set; }

        /// <summary>
        /// The location for the resource
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Immutable. The name of the spoke. Spoke names must be unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Output only. The current lifecycle state of this spoke.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different unique_id.
        /// </summary>
        [Input("uniqueId")]
        public Input<string>? UniqueId { get; set; }

        /// <summary>
        /// Output only. The time the spoke was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public SpokeState()
        {
        }
        public static new SpokeState Empty => new SpokeState();
    }
}
