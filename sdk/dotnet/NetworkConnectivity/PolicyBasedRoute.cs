// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkConnectivity
{
    /// <summary>
    /// Policy-based Routes are more powerful routes that route L4 network traffic based on not just destination IP, but also source IP, protocol and more. A Policy-based Route always take precedence when it conflicts with other types of routes.
    /// 
    /// To get more information about PolicyBasedRoute, see:
    /// 
    /// * [API documentation](https://cloud.google.com/network-connectivity/docs/reference/networkconnectivity/rest/v1/projects.locations.global.policyBasedRoutes)
    /// * How-to Guides
    ///     * [Use policy-based routes](https://cloud.google.com/vpc/docs/use-policy-based-routes#api)
    /// 
    /// ## Example Usage
    /// 
    /// ### Network Connectivity Policy Based Route Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myNetwork = new Gcp.Compute.Network("my_network", new()
    ///     {
    ///         Name = "my-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var @default = new Gcp.NetworkConnectivity.PolicyBasedRoute("default", new()
    ///     {
    ///         Name = "my-pbr",
    ///         Network = myNetwork.Id,
    ///         Filter = new Gcp.NetworkConnectivity.Inputs.PolicyBasedRouteFilterArgs
    ///         {
    ///             ProtocolVersion = "IPV4",
    ///         },
    ///         NextHopOtherRoutes = "DEFAULT_ROUTING",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Connectivity Policy Based Route Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myNetwork = new Gcp.Compute.Network("my_network", new()
    ///     {
    ///         Name = "my-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     // This example substitutes an arbitrary internal IP for an internal network
    ///     // load balancer for brevity. Consult https://cloud.google.com/load-balancing/docs/internal
    ///     // to set one up.
    ///     var ilb = new Gcp.Compute.GlobalAddress("ilb", new()
    ///     {
    ///         Name = "my-ilb",
    ///     });
    /// 
    ///     var @default = new Gcp.NetworkConnectivity.PolicyBasedRoute("default", new()
    ///     {
    ///         Name = "my-pbr",
    ///         Description = "My routing policy",
    ///         Network = myNetwork.Id,
    ///         Priority = 2302,
    ///         Filter = new Gcp.NetworkConnectivity.Inputs.PolicyBasedRouteFilterArgs
    ///         {
    ///             ProtocolVersion = "IPV4",
    ///             IpProtocol = "UDP",
    ///             SrcRange = "10.0.0.0/24",
    ///             DestRange = "0.0.0.0/0",
    ///         },
    ///         NextHopIlbIp = ilb.Address,
    ///         VirtualMachine = new Gcp.NetworkConnectivity.Inputs.PolicyBasedRouteVirtualMachineArgs
    ///         {
    ///             Tags = new[]
    ///             {
    ///                 "restricted",
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "env", "default" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// PolicyBasedRoute can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/global/policyBasedRoutes/{{name}}`
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, PolicyBasedRoute can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute default projects/{{project}}/locations/global/policyBasedRoutes/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute")]
    public partial class PolicyBasedRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time when the policy-based route was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The filter to match L4 traffic.
        /// Structure is documented below.
        /// </summary>
        [Output("filter")]
        public Output<Outputs.PolicyBasedRouteFilter> Filter { get; private set; } = null!;

        /// <summary>
        /// The interconnect attachments that this policy-based route applies to.
        /// Structure is documented below.
        /// </summary>
        [Output("interconnectAttachment")]
        public Output<Outputs.PolicyBasedRouteInterconnectAttachment?> InterconnectAttachment { get; private set; } = null!;

        /// <summary>
        /// Type of this resource.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// User-defined labels.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the policy based route.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
        /// </summary>
        [Output("nextHopIlbIp")]
        public Output<string?> NextHopIlbIp { get; private set; } = null!;

        /// <summary>
        /// Other routes that will be referenced to determine the next hop of the packet.
        /// Possible values are: `DEFAULT_ROUTING`.
        /// </summary>
        [Output("nextHopOtherRoutes")]
        public Output<string?> NextHopOtherRoutes { get; private set; } = null!;

        /// <summary>
        /// The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Time when the policy-based route was created.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// VM instances to which this policy-based route applies to.
        /// Structure is documented below.
        /// </summary>
        [Output("virtualMachine")]
        public Output<Outputs.PolicyBasedRouteVirtualMachine?> VirtualMachine { get; private set; } = null!;

        /// <summary>
        /// If potential misconfigurations are detected for this route, this field will be populated with warning messages.
        /// Structure is documented below.
        /// </summary>
        [Output("warnings")]
        public Output<ImmutableArray<Outputs.PolicyBasedRouteWarning>> Warnings { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyBasedRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyBasedRoute(string name, PolicyBasedRouteArgs args, CustomResourceOptions? options = null)
            : base("gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute", name, args ?? new PolicyBasedRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyBasedRoute(string name, Input<string> id, PolicyBasedRouteState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyBasedRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyBasedRoute Get(string name, Input<string> id, PolicyBasedRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyBasedRoute(name, id, state, options);
        }
    }

    public sealed class PolicyBasedRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The filter to match L4 traffic.
        /// Structure is documented below.
        /// </summary>
        [Input("filter", required: true)]
        public Input<Inputs.PolicyBasedRouteFilterArgs> Filter { get; set; } = null!;

        /// <summary>
        /// The interconnect attachments that this policy-based route applies to.
        /// Structure is documented below.
        /// </summary>
        [Input("interconnectAttachment")]
        public Input<Inputs.PolicyBasedRouteInterconnectAttachmentArgs>? InterconnectAttachment { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the policy based route.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
        /// </summary>
        [Input("nextHopIlbIp")]
        public Input<string>? NextHopIlbIp { get; set; }

        /// <summary>
        /// Other routes that will be referenced to determine the next hop of the packet.
        /// Possible values are: `DEFAULT_ROUTING`.
        /// </summary>
        [Input("nextHopOtherRoutes")]
        public Input<string>? NextHopOtherRoutes { get; set; }

        /// <summary>
        /// The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// VM instances to which this policy-based route applies to.
        /// Structure is documented below.
        /// </summary>
        [Input("virtualMachine")]
        public Input<Inputs.PolicyBasedRouteVirtualMachineArgs>? VirtualMachine { get; set; }

        public PolicyBasedRouteArgs()
        {
        }
        public static new PolicyBasedRouteArgs Empty => new PolicyBasedRouteArgs();
    }

    public sealed class PolicyBasedRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time when the policy-based route was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The filter to match L4 traffic.
        /// Structure is documented below.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.PolicyBasedRouteFilterGetArgs>? Filter { get; set; }

        /// <summary>
        /// The interconnect attachments that this policy-based route applies to.
        /// Structure is documented below.
        /// </summary>
        [Input("interconnectAttachment")]
        public Input<Inputs.PolicyBasedRouteInterconnectAttachmentGetArgs>? InterconnectAttachment { get; set; }

        /// <summary>
        /// Type of this resource.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the policy based route.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
        /// </summary>
        [Input("nextHopIlbIp")]
        public Input<string>? NextHopIlbIp { get; set; }

        /// <summary>
        /// Other routes that will be referenced to determine the next hop of the packet.
        /// Possible values are: `DEFAULT_ROUTING`.
        /// </summary>
        [Input("nextHopOtherRoutes")]
        public Input<string>? NextHopOtherRoutes { get; set; }

        /// <summary>
        /// The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Time when the policy-based route was created.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// VM instances to which this policy-based route applies to.
        /// Structure is documented below.
        /// </summary>
        [Input("virtualMachine")]
        public Input<Inputs.PolicyBasedRouteVirtualMachineGetArgs>? VirtualMachine { get; set; }

        [Input("warnings")]
        private InputList<Inputs.PolicyBasedRouteWarningGetArgs>? _warnings;

        /// <summary>
        /// If potential misconfigurations are detected for this route, this field will be populated with warning messages.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.PolicyBasedRouteWarningGetArgs> Warnings
        {
            get => _warnings ?? (_warnings = new InputList<Inputs.PolicyBasedRouteWarningGetArgs>());
            set => _warnings = value;
        }

        public PolicyBasedRouteState()
        {
        }
        public static new PolicyBasedRouteState Empty => new PolicyBasedRouteState();
    }
}
