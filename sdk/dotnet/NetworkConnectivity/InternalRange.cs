// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkConnectivity
{
    /// <summary>
    /// The internal range resource for IPAM operations within a VPC network. Used to represent a private address range along with behavioral characterstics of that range (its usage and peering behavior). Networking resources can link to this range if they are created as belonging to it.
    /// 
    /// To get more information about InternalRange, see:
    /// 
    /// * [API documentation](https://cloud.google.com/network-connectivity/docs/reference/networkconnectivity/rest/v1/projects.locations.internalRanges)
    /// * How-to Guides
    ///     * [Use internal ranges](https://cloud.google.com/vpc/docs/create-use-internal-ranges)
    /// 
    /// ## Example Usage
    /// 
    /// ### Network Connectivity Internal Ranges Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultNetwork = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "internal-ranges",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var @default = new Gcp.NetworkConnectivity.InternalRange("default", new()
    ///     {
    ///         Name = "basic",
    ///         Description = "Test internal range",
    ///         Network = defaultNetwork.SelfLink,
    ///         Usage = "FOR_VPC",
    ///         Peering = "FOR_SELF",
    ///         IpCidrRange = "10.0.0.0/24",
    ///         Labels = 
    ///         {
    ///             { "label-a", "b" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Connectivity Internal Ranges Automatic Reservation
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultNetwork = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "internal-ranges",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var @default = new Gcp.NetworkConnectivity.InternalRange("default", new()
    ///     {
    ///         Name = "automatic-reservation",
    ///         Network = defaultNetwork.Id,
    ///         Usage = "FOR_VPC",
    ///         Peering = "FOR_SELF",
    ///         PrefixLength = 24,
    ///         TargetCidrRanges = new[]
    ///         {
    ///             "192.16.0.0/16",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Connectivity Internal Ranges External Ranges
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultNetwork = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "internal-ranges",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var @default = new Gcp.NetworkConnectivity.InternalRange("default", new()
    ///     {
    ///         Name = "external-ranges",
    ///         Network = defaultNetwork.Id,
    ///         Usage = "EXTERNAL_TO_VPC",
    ///         Peering = "FOR_SELF",
    ///         IpCidrRange = "172.16.0.0/24",
    ///         Labels = 
    ///         {
    ///             { "external-reserved-range", "on-premises" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Connectivity Internal Ranges Reserve With Overlap
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultNetwork = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "internal-ranges",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var defaultSubnetwork = new Gcp.Compute.Subnetwork("default", new()
    ///     {
    ///         Name = "overlapping-subnet",
    ///         IpCidrRange = "10.0.0.0/24",
    ///         Region = "us-central1",
    ///         Network = defaultNetwork.Id,
    ///     });
    /// 
    ///     var @default = new Gcp.NetworkConnectivity.InternalRange("default", new()
    ///     {
    ///         Name = "overlap-range",
    ///         Description = "Test internal range",
    ///         Network = defaultNetwork.Id,
    ///         Usage = "FOR_VPC",
    ///         Peering = "FOR_SELF",
    ///         IpCidrRange = "10.0.0.0/30",
    ///         Overlaps = new[]
    ///         {
    ///             "OVERLAP_EXISTING_SUBNET_RANGE",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             defaultSubnetwork,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Connectivity Internal Ranges Migration
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultNetwork = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "internal-ranges",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var source = new Gcp.Compute.Subnetwork("source", new()
    ///     {
    ///         Name = "source-subnet",
    ///         IpCidrRange = "10.1.0.0/16",
    ///         Region = "us-central1",
    ///         Network = defaultNetwork.Name,
    ///     });
    /// 
    ///     var targetProject = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var @default = new Gcp.NetworkConnectivity.InternalRange("default", new()
    ///     {
    ///         Name = "migration",
    ///         Description = "Test internal range",
    ///         Network = defaultNetwork.SelfLink,
    ///         Usage = "FOR_MIGRATION",
    ///         Peering = "FOR_SELF",
    ///         IpCidrRange = "10.1.0.0/16",
    ///         Migration = new Gcp.NetworkConnectivity.Inputs.InternalRangeMigrationArgs
    ///         {
    ///             Source = source.SelfLink,
    ///             Target = $"projects/{targetProject.Apply(getProjectResult =&gt; getProjectResult.ProjectId)}/regions/us-central1/subnetworks/target-subnet",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// InternalRange can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/global/internalRanges/{{name}}`
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, InternalRange can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkconnectivity/internalRange:InternalRange default projects/{{project}}/locations/global/internalRanges/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkconnectivity/internalRange:InternalRange default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkconnectivity/internalRange:InternalRange default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networkconnectivity/internalRange:InternalRange")]
    public partial class InternalRange : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Optional. List of IP CIDR ranges to be excluded. Resulting reserved Internal Range will not overlap with any CIDR blocks mentioned in this list.
        /// Only IPv4 CIDR ranges are supported.
        /// </summary>
        [Output("excludeCidrRanges")]
        public Output<ImmutableArray<string>> ExcludeCidrRanges { get; private set; } = null!;

        /// <summary>
        /// The IP range that this internal range defines.
        /// NOTE: IPv6 ranges are limited to usage=EXTERNAL_TO_VPC and peering=FOR_SELF
        /// NOTE: For IPv6 Ranges this field is compulsory, i.e. the address range must be specified explicitly.
        /// </summary>
        [Output("ipCidrRange")]
        public Output<string> IpCidrRange { get; private set; } = null!;

        /// <summary>
        /// User-defined labels.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Specification for migration with source and target resource names.
        /// Structure is documented below.
        /// </summary>
        [Output("migration")]
        public Output<Outputs.InternalRangeMigration?> Migration { get; private set; } = null!;

        /// <summary>
        /// The name of the policy based route.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// Optional. Types of resources that are allowed to overlap with the current internal range.
        /// Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
        /// </summary>
        [Output("overlaps")]
        public Output<ImmutableArray<string>> Overlaps { get; private set; } = null!;

        /// <summary>
        /// The type of peering set for this internal range.
        /// Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("peering")]
        public Output<string> Peering { get; private set; } = null!;

        /// <summary>
        /// An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
        /// If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
        /// NOTE: For IPv6 this field only works if ip_cidr_range is set as well, and both fields must match. In other words, with IPv6 this field only works as
        /// a redundant parameter.
        /// </summary>
        [Output("prefixLength")]
        public Output<int?> PrefixLength { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Optional. Can be set to narrow down or pick a different address space while searching for a free range.
        /// If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
        /// </summary>
        [Output("targetCidrRanges")]
        public Output<ImmutableArray<string>> TargetCidrRanges { get; private set; } = null!;

        /// <summary>
        /// The type of usage set for this InternalRange.
        /// Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`, `FOR_MIGRATION`.
        /// </summary>
        [Output("usage")]
        public Output<string> Usage { get; private set; } = null!;

        /// <summary>
        /// Output only. The list of resources that refer to this internal range.
        /// Resources that use the internal range for their range allocation are referred to as users of the range.
        /// Other resources mark themselves as users while doing so by creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal range referred to. Can be empty.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<string>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a InternalRange resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InternalRange(string name, InternalRangeArgs args, CustomResourceOptions? options = null)
            : base("gcp:networkconnectivity/internalRange:InternalRange", name, args ?? new InternalRangeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InternalRange(string name, Input<string> id, InternalRangeState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networkconnectivity/internalRange:InternalRange", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InternalRange resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InternalRange Get(string name, Input<string> id, InternalRangeState? state = null, CustomResourceOptions? options = null)
        {
            return new InternalRange(name, id, state, options);
        }
    }

    public sealed class InternalRangeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("excludeCidrRanges")]
        private InputList<string>? _excludeCidrRanges;

        /// <summary>
        /// Optional. List of IP CIDR ranges to be excluded. Resulting reserved Internal Range will not overlap with any CIDR blocks mentioned in this list.
        /// Only IPv4 CIDR ranges are supported.
        /// </summary>
        public InputList<string> ExcludeCidrRanges
        {
            get => _excludeCidrRanges ?? (_excludeCidrRanges = new InputList<string>());
            set => _excludeCidrRanges = value;
        }

        /// <summary>
        /// The IP range that this internal range defines.
        /// NOTE: IPv6 ranges are limited to usage=EXTERNAL_TO_VPC and peering=FOR_SELF
        /// NOTE: For IPv6 Ranges this field is compulsory, i.e. the address range must be specified explicitly.
        /// </summary>
        [Input("ipCidrRange")]
        public Input<string>? IpCidrRange { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Specification for migration with source and target resource names.
        /// Structure is documented below.
        /// </summary>
        [Input("migration")]
        public Input<Inputs.InternalRangeMigrationArgs>? Migration { get; set; }

        /// <summary>
        /// The name of the policy based route.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        [Input("overlaps")]
        private InputList<string>? _overlaps;

        /// <summary>
        /// Optional. Types of resources that are allowed to overlap with the current internal range.
        /// Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
        /// </summary>
        public InputList<string> Overlaps
        {
            get => _overlaps ?? (_overlaps = new InputList<string>());
            set => _overlaps = value;
        }

        /// <summary>
        /// The type of peering set for this internal range.
        /// Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("peering", required: true)]
        public Input<string> Peering { get; set; } = null!;

        /// <summary>
        /// An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
        /// If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
        /// NOTE: For IPv6 this field only works if ip_cidr_range is set as well, and both fields must match. In other words, with IPv6 this field only works as
        /// a redundant parameter.
        /// </summary>
        [Input("prefixLength")]
        public Input<int>? PrefixLength { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("targetCidrRanges")]
        private InputList<string>? _targetCidrRanges;

        /// <summary>
        /// Optional. Can be set to narrow down or pick a different address space while searching for a free range.
        /// If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
        /// </summary>
        public InputList<string> TargetCidrRanges
        {
            get => _targetCidrRanges ?? (_targetCidrRanges = new InputList<string>());
            set => _targetCidrRanges = value;
        }

        /// <summary>
        /// The type of usage set for this InternalRange.
        /// Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`, `FOR_MIGRATION`.
        /// </summary>
        [Input("usage", required: true)]
        public Input<string> Usage { get; set; } = null!;

        public InternalRangeArgs()
        {
        }
        public static new InternalRangeArgs Empty => new InternalRangeArgs();
    }

    public sealed class InternalRangeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("excludeCidrRanges")]
        private InputList<string>? _excludeCidrRanges;

        /// <summary>
        /// Optional. List of IP CIDR ranges to be excluded. Resulting reserved Internal Range will not overlap with any CIDR blocks mentioned in this list.
        /// Only IPv4 CIDR ranges are supported.
        /// </summary>
        public InputList<string> ExcludeCidrRanges
        {
            get => _excludeCidrRanges ?? (_excludeCidrRanges = new InputList<string>());
            set => _excludeCidrRanges = value;
        }

        /// <summary>
        /// The IP range that this internal range defines.
        /// NOTE: IPv6 ranges are limited to usage=EXTERNAL_TO_VPC and peering=FOR_SELF
        /// NOTE: For IPv6 Ranges this field is compulsory, i.e. the address range must be specified explicitly.
        /// </summary>
        [Input("ipCidrRange")]
        public Input<string>? IpCidrRange { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Specification for migration with source and target resource names.
        /// Structure is documented below.
        /// </summary>
        [Input("migration")]
        public Input<Inputs.InternalRangeMigrationGetArgs>? Migration { get; set; }

        /// <summary>
        /// The name of the policy based route.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        [Input("overlaps")]
        private InputList<string>? _overlaps;

        /// <summary>
        /// Optional. Types of resources that are allowed to overlap with the current internal range.
        /// Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
        /// </summary>
        public InputList<string> Overlaps
        {
            get => _overlaps ?? (_overlaps = new InputList<string>());
            set => _overlaps = value;
        }

        /// <summary>
        /// The type of peering set for this internal range.
        /// Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("peering")]
        public Input<string>? Peering { get; set; }

        /// <summary>
        /// An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
        /// If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
        /// NOTE: For IPv6 this field only works if ip_cidr_range is set as well, and both fields must match. In other words, with IPv6 this field only works as
        /// a redundant parameter.
        /// </summary>
        [Input("prefixLength")]
        public Input<int>? PrefixLength { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("targetCidrRanges")]
        private InputList<string>? _targetCidrRanges;

        /// <summary>
        /// Optional. Can be set to narrow down or pick a different address space while searching for a free range.
        /// If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
        /// </summary>
        public InputList<string> TargetCidrRanges
        {
            get => _targetCidrRanges ?? (_targetCidrRanges = new InputList<string>());
            set => _targetCidrRanges = value;
        }

        /// <summary>
        /// The type of usage set for this InternalRange.
        /// Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`, `FOR_MIGRATION`.
        /// </summary>
        [Input("usage")]
        public Input<string>? Usage { get; set; }

        [Input("users")]
        private InputList<string>? _users;

        /// <summary>
        /// Output only. The list of resources that refer to this internal range.
        /// Resources that use the internal range for their range allocation are referred to as users of the range.
        /// Other resources mark themselves as users while doing so by creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal range referred to. Can be empty.
        /// </summary>
        public InputList<string> Users
        {
            get => _users ?? (_users = new InputList<string>());
            set => _users = value;
        }

        public InternalRangeState()
        {
        }
        public static new InternalRangeState Empty => new InternalRangeState();
    }
}
