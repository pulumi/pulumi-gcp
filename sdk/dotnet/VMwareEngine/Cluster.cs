// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.VMwareEngine
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Cluster can be imported using any of these accepted formats:
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vmwareengine/cluster:Cluster default {{parent}}/clusters/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:vmwareengine/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// True if the cluster is a management cluster; false otherwise.
        /// There can only be one management cluster in a private cloud and it has to be the first one.
        /// </summary>
        [Output("management")]
        public Output<bool> Management { get; private set; } = null!;

        /// <summary>
        /// The ID of the Cluster.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The map of cluster node types in this cluster,
        /// where the key is canonical identifier of the node type (corresponds to the NodeType).
        /// Structure is documented below.
        /// </summary>
        [Output("nodeTypeConfigs")]
        public Output<ImmutableArray<Outputs.ClusterNodeTypeConfig>> NodeTypeConfigs { get; private set; } = null!;

        /// <summary>
        /// The resource name of the private cloud to create a new cluster in.
        /// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
        /// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// State of the Cluster.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// System-generated unique identifier for the resource.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("gcp:vmwareengine/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("gcp:vmwareengine/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Cluster.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeTypeConfigs")]
        private InputList<Inputs.ClusterNodeTypeConfigArgs>? _nodeTypeConfigs;

        /// <summary>
        /// The map of cluster node types in this cluster,
        /// where the key is canonical identifier of the node type (corresponds to the NodeType).
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ClusterNodeTypeConfigArgs> NodeTypeConfigs
        {
            get => _nodeTypeConfigs ?? (_nodeTypeConfigs = new InputList<Inputs.ClusterNodeTypeConfigArgs>());
            set => _nodeTypeConfigs = value;
        }

        /// <summary>
        /// The resource name of the private cloud to create a new cluster in.
        /// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
        /// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// True if the cluster is a management cluster; false otherwise.
        /// There can only be one management cluster in a private cloud and it has to be the first one.
        /// </summary>
        [Input("management")]
        public Input<bool>? Management { get; set; }

        /// <summary>
        /// The ID of the Cluster.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeTypeConfigs")]
        private InputList<Inputs.ClusterNodeTypeConfigGetArgs>? _nodeTypeConfigs;

        /// <summary>
        /// The map of cluster node types in this cluster,
        /// where the key is canonical identifier of the node type (corresponds to the NodeType).
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ClusterNodeTypeConfigGetArgs> NodeTypeConfigs
        {
            get => _nodeTypeConfigs ?? (_nodeTypeConfigs = new InputList<Inputs.ClusterNodeTypeConfigGetArgs>());
            set => _nodeTypeConfigs = value;
        }

        /// <summary>
        /// The resource name of the private cloud to create a new cluster in.
        /// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
        /// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// State of the Cluster.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// System-generated unique identifier for the resource.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
