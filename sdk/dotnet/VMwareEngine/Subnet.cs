// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.VMwareEngine
{
    /// <summary>
    /// Subnet in a private cloud. A Private Cloud contains two types of subnets: `Management` subnets (such as vMotion) that
    /// are read-only,and `userDefined`, which can also be updated. This resource should be used to read and update `userDefined`
    /// subnets. To read `Management` subnets, please utilize the subnet data source.
    /// 
    /// To get more information about Subnet, see:
    /// 
    /// * [API documentation](https://cloud.google.com/vmware-engine/docs/reference/rest/v1/projects.locations.privateClouds.subnets)
    /// 
    /// ## Example Usage
    /// 
    /// ### Vmware Engine Subnet User Defined
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var subnet_nw = new Gcp.VMwareEngine.Network("subnet-nw", new()
    ///     {
    ///         Name = "pc-nw",
    ///         Location = "global",
    ///         Type = "STANDARD",
    ///         Description = "PC network description.",
    ///     });
    /// 
    ///     var subnet_pc = new Gcp.VMwareEngine.PrivateCloud("subnet-pc", new()
    ///     {
    ///         Location = "us-west1-a",
    ///         Name = "sample-pc",
    ///         Description = "Sample test PC.",
    ///         NetworkConfig = new Gcp.VMwareEngine.Inputs.PrivateCloudNetworkConfigArgs
    ///         {
    ///             ManagementCidr = "192.168.50.0/24",
    ///             VmwareEngineNetwork = subnet_nw.Id,
    ///         },
    ///         ManagementCluster = new Gcp.VMwareEngine.Inputs.PrivateCloudManagementClusterArgs
    ///         {
    ///             ClusterId = "sample-mgmt-cluster",
    ///             NodeTypeConfigs = new[]
    ///             {
    ///                 new Gcp.VMwareEngine.Inputs.PrivateCloudManagementClusterNodeTypeConfigArgs
    ///                 {
    ///                     NodeTypeId = "standard-72",
    ///                     NodeCount = 3,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var vmw_engine_subnet = new Gcp.VMwareEngine.Subnet("vmw-engine-subnet", new()
    ///     {
    ///         Name = "service-1",
    ///         Parent = subnet_pc.Id,
    ///         IpCidrRange = "192.168.100.0/26",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Subnet can be imported using any of these accepted formats:
    /// 
    /// * `{{parent}}/subnets/{{name}}`
    /// 
    /// When using the `pulumi import` command, Subnet can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:vmwareengine/subnet:Subnet default {{parent}}/subnets/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:vmwareengine/subnet:Subnet")]
    public partial class Subnet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Creation time of this resource.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
        /// up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// DHCP address ranges.
        /// Structure is documented below.
        /// </summary>
        [Output("dhcpAddressRanges")]
        public Output<ImmutableArray<Outputs.SubnetDhcpAddressRange>> DhcpAddressRanges { get; private set; } = null!;

        /// <summary>
        /// The canonical identifier of the logical router that this subnet is attached to.
        /// </summary>
        [Output("gatewayId")]
        public Output<string> GatewayId { get; private set; } = null!;

        /// <summary>
        /// The IP address of the gateway of this subnet. Must fall within the IP prefix defined above.
        /// </summary>
        [Output("gatewayIp")]
        public Output<string> GatewayIp { get; private set; } = null!;

        /// <summary>
        /// The IP address range of the subnet in CIDR format.
        /// </summary>
        [Output("ipCidrRange")]
        public Output<string> IpCidrRange { get; private set; } = null!;

        /// <summary>
        /// The ID of the subnet. For userDefined subnets, this name should be in the format of "service-n",
        /// where n ranges from 1 to 5.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The resource name of the private cloud to create a new subnet in.
        /// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
        /// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// Whether the NSX-T configuration in the backend follows the standard configuration supported by Google Cloud.
        /// If false, the subnet cannot be modified through Google Cloud, only through NSX-T directly.
        /// </summary>
        [Output("standardConfig")]
        public Output<bool> StandardConfig { get; private set; } = null!;

        /// <summary>
        /// State of the subnet.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The type of the subnet.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// System-generated unique identifier for the resource.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Last updated time of this resource.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
        /// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// VLAN ID of the VLAN on which the subnet is configured.
        /// </summary>
        [Output("vlanId")]
        public Output<int> VlanId { get; private set; } = null!;


        /// <summary>
        /// Create a Subnet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subnet(string name, SubnetArgs args, CustomResourceOptions? options = null)
            : base("gcp:vmwareengine/subnet:Subnet", name, args ?? new SubnetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Subnet(string name, Input<string> id, SubnetState? state = null, CustomResourceOptions? options = null)
            : base("gcp:vmwareengine/subnet:Subnet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subnet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subnet Get(string name, Input<string> id, SubnetState? state = null, CustomResourceOptions? options = null)
        {
            return new Subnet(name, id, state, options);
        }
    }

    public sealed class SubnetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IP address range of the subnet in CIDR format.
        /// </summary>
        [Input("ipCidrRange", required: true)]
        public Input<string> IpCidrRange { get; set; } = null!;

        /// <summary>
        /// The ID of the subnet. For userDefined subnets, this name should be in the format of "service-n",
        /// where n ranges from 1 to 5.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The resource name of the private cloud to create a new subnet in.
        /// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
        /// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        public SubnetArgs()
        {
        }
        public static new SubnetArgs Empty => new SubnetArgs();
    }

    public sealed class SubnetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation time of this resource.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
        /// up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("dhcpAddressRanges")]
        private InputList<Inputs.SubnetDhcpAddressRangeGetArgs>? _dhcpAddressRanges;

        /// <summary>
        /// DHCP address ranges.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.SubnetDhcpAddressRangeGetArgs> DhcpAddressRanges
        {
            get => _dhcpAddressRanges ?? (_dhcpAddressRanges = new InputList<Inputs.SubnetDhcpAddressRangeGetArgs>());
            set => _dhcpAddressRanges = value;
        }

        /// <summary>
        /// The canonical identifier of the logical router that this subnet is attached to.
        /// </summary>
        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        /// <summary>
        /// The IP address of the gateway of this subnet. Must fall within the IP prefix defined above.
        /// </summary>
        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        /// <summary>
        /// The IP address range of the subnet in CIDR format.
        /// </summary>
        [Input("ipCidrRange")]
        public Input<string>? IpCidrRange { get; set; }

        /// <summary>
        /// The ID of the subnet. For userDefined subnets, this name should be in the format of "service-n",
        /// where n ranges from 1 to 5.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The resource name of the private cloud to create a new subnet in.
        /// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
        /// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// Whether the NSX-T configuration in the backend follows the standard configuration supported by Google Cloud.
        /// If false, the subnet cannot be modified through Google Cloud, only through NSX-T directly.
        /// </summary>
        [Input("standardConfig")]
        public Input<bool>? StandardConfig { get; set; }

        /// <summary>
        /// State of the subnet.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The type of the subnet.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// System-generated unique identifier for the resource.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Last updated time of this resource.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
        /// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// VLAN ID of the VLAN on which the subnet is configured.
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        public SubnetState()
        {
        }
        public static new SubnetState Empty => new SubnetState();
    }
}
