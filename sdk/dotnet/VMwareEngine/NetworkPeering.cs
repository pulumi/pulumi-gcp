// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.VMwareEngine
{
    /// <summary>
    /// Represents a network peering resource. Network peerings are global resources.
    /// 
    /// To get more information about NetworkPeering, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/networks/addPeering)
    /// 
    /// ## Example Usage
    /// 
    /// ### Vmware Engine Network Peering Ven
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network_peering_nw = new Gcp.VMwareEngine.Network("network-peering-nw", new()
    ///     {
    ///         Name = "default-np-nw",
    ///         Location = "global",
    ///         Type = "STANDARD",
    ///     });
    /// 
    ///     var network_peering_peer_nw = new Gcp.VMwareEngine.Network("network-peering-peer-nw", new()
    ///     {
    ///         Name = "peer-np-nw",
    ///         Location = "global",
    ///         Type = "STANDARD",
    ///     });
    /// 
    ///     var vmw_engine_network_peering = new Gcp.VMwareEngine.NetworkPeering("vmw-engine-network-peering", new()
    ///     {
    ///         Name = "sample-network-peering",
    ///         Description = "Sample description",
    ///         VmwareEngineNetwork = network_peering_nw.Id,
    ///         PeerNetwork = network_peering_peer_nw.Id,
    ///         PeerNetworkType = "VMWARE_ENGINE_NETWORK",
    ///         ExportCustomRoutes = false,
    ///         ImportCustomRoutes = false,
    ///         ExportCustomRoutesWithPublicIp = false,
    ///         ImportCustomRoutesWithPublicIp = false,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Vmware Engine Network Peering Standard
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network_peering_vpc = new Gcp.Compute.Network("network-peering-vpc", new()
    ///     {
    ///         Name = "default-vpc",
    ///     });
    /// 
    ///     var network_peering_standard_nw = new Gcp.VMwareEngine.Network("network-peering-standard-nw", new()
    ///     {
    ///         Name = "default-standard-nw-np",
    ///         Location = "global",
    ///         Type = "STANDARD",
    ///     });
    /// 
    ///     var vmw_engine_network_peering = new Gcp.VMwareEngine.NetworkPeering("vmw-engine-network-peering", new()
    ///     {
    ///         Name = "sample-network-peering",
    ///         Description = "Sample description",
    ///         PeerNetwork = network_peering_vpc.Id,
    ///         PeerNetworkType = "STANDARD",
    ///         VmwareEngineNetwork = network_peering_standard_nw.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NetworkPeering can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/global/networkPeerings/{{name}}`
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, NetworkPeering can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:vmwareengine/networkPeering:NetworkPeering default projects/{{project}}/locations/global/networkPeerings/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:vmwareengine/networkPeering:NetworkPeering default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:vmwareengine/networkPeering:NetworkPeering default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:vmwareengine/networkPeering:NetworkPeering")]
    public partial class NetworkPeering : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Creation time of this resource.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
        /// up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// User-provided description for this network peering.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// True if custom routes are exported to the peered network; false otherwise.
        /// </summary>
        [Output("exportCustomRoutes")]
        public Output<bool?> ExportCustomRoutes { get; private set; } = null!;

        /// <summary>
        /// True if all subnet routes with a public IP address range are exported; false otherwise.
        /// </summary>
        [Output("exportCustomRoutesWithPublicIp")]
        public Output<bool?> ExportCustomRoutesWithPublicIp { get; private set; } = null!;

        /// <summary>
        /// True if custom routes are imported from the peered network; false otherwise.
        /// </summary>
        [Output("importCustomRoutes")]
        public Output<bool?> ImportCustomRoutes { get; private set; } = null!;

        /// <summary>
        /// True if custom routes are imported from the peered network; false otherwise.
        /// </summary>
        [Output("importCustomRoutesWithPublicIp")]
        public Output<bool?> ImportCustomRoutesWithPublicIp { get; private set; } = null!;

        /// <summary>
        /// The ID of the Network Peering.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The relative resource name of the network to peer with a standard VMware Engine network.
        /// The provided network can be a consumer VPC network or another standard VMware Engine network.
        /// </summary>
        [Output("peerNetwork")]
        public Output<string> PeerNetwork { get; private set; } = null!;

        /// <summary>
        /// The type of the network to peer with the VMware Engine network.
        /// Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`.
        /// </summary>
        [Output("peerNetworkType")]
        public Output<string> PeerNetworkType { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// State of the network peering.
        /// This field has a value of 'ACTIVE' when there's a matching configuration in the peer network.
        /// New values may be added to this enum when appropriate.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Details about the current state of the network peering.
        /// </summary>
        [Output("stateDetails")]
        public Output<string> StateDetails { get; private set; } = null!;

        /// <summary>
        /// System-generated unique identifier for the resource.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Last updated time of this resource.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
        /// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// The relative resource name of the VMware Engine network. Specify the name in the following form:
        /// projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
        /// can either be a project number or a project ID.
        /// </summary>
        [Output("vmwareEngineNetwork")]
        public Output<string> VmwareEngineNetwork { get; private set; } = null!;

        /// <summary>
        /// The canonical name of the VMware Engine network in the form:
        /// projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}
        /// </summary>
        [Output("vmwareEngineNetworkCanonical")]
        public Output<string> VmwareEngineNetworkCanonical { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkPeering resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkPeering(string name, NetworkPeeringArgs args, CustomResourceOptions? options = null)
            : base("gcp:vmwareengine/networkPeering:NetworkPeering", name, args ?? new NetworkPeeringArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkPeering(string name, Input<string> id, NetworkPeeringState? state = null, CustomResourceOptions? options = null)
            : base("gcp:vmwareengine/networkPeering:NetworkPeering", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkPeering resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkPeering Get(string name, Input<string> id, NetworkPeeringState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkPeering(name, id, state, options);
        }
    }

    public sealed class NetworkPeeringArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User-provided description for this network peering.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// True if custom routes are exported to the peered network; false otherwise.
        /// </summary>
        [Input("exportCustomRoutes")]
        public Input<bool>? ExportCustomRoutes { get; set; }

        /// <summary>
        /// True if all subnet routes with a public IP address range are exported; false otherwise.
        /// </summary>
        [Input("exportCustomRoutesWithPublicIp")]
        public Input<bool>? ExportCustomRoutesWithPublicIp { get; set; }

        /// <summary>
        /// True if custom routes are imported from the peered network; false otherwise.
        /// </summary>
        [Input("importCustomRoutes")]
        public Input<bool>? ImportCustomRoutes { get; set; }

        /// <summary>
        /// True if custom routes are imported from the peered network; false otherwise.
        /// </summary>
        [Input("importCustomRoutesWithPublicIp")]
        public Input<bool>? ImportCustomRoutesWithPublicIp { get; set; }

        /// <summary>
        /// The ID of the Network Peering.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The relative resource name of the network to peer with a standard VMware Engine network.
        /// The provided network can be a consumer VPC network or another standard VMware Engine network.
        /// </summary>
        [Input("peerNetwork", required: true)]
        public Input<string> PeerNetwork { get; set; } = null!;

        /// <summary>
        /// The type of the network to peer with the VMware Engine network.
        /// Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`.
        /// </summary>
        [Input("peerNetworkType", required: true)]
        public Input<string> PeerNetworkType { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The relative resource name of the VMware Engine network. Specify the name in the following form:
        /// projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
        /// can either be a project number or a project ID.
        /// </summary>
        [Input("vmwareEngineNetwork", required: true)]
        public Input<string> VmwareEngineNetwork { get; set; } = null!;

        public NetworkPeeringArgs()
        {
        }
        public static new NetworkPeeringArgs Empty => new NetworkPeeringArgs();
    }

    public sealed class NetworkPeeringState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation time of this resource.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
        /// up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// User-provided description for this network peering.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// True if custom routes are exported to the peered network; false otherwise.
        /// </summary>
        [Input("exportCustomRoutes")]
        public Input<bool>? ExportCustomRoutes { get; set; }

        /// <summary>
        /// True if all subnet routes with a public IP address range are exported; false otherwise.
        /// </summary>
        [Input("exportCustomRoutesWithPublicIp")]
        public Input<bool>? ExportCustomRoutesWithPublicIp { get; set; }

        /// <summary>
        /// True if custom routes are imported from the peered network; false otherwise.
        /// </summary>
        [Input("importCustomRoutes")]
        public Input<bool>? ImportCustomRoutes { get; set; }

        /// <summary>
        /// True if custom routes are imported from the peered network; false otherwise.
        /// </summary>
        [Input("importCustomRoutesWithPublicIp")]
        public Input<bool>? ImportCustomRoutesWithPublicIp { get; set; }

        /// <summary>
        /// The ID of the Network Peering.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The relative resource name of the network to peer with a standard VMware Engine network.
        /// The provided network can be a consumer VPC network or another standard VMware Engine network.
        /// </summary>
        [Input("peerNetwork")]
        public Input<string>? PeerNetwork { get; set; }

        /// <summary>
        /// The type of the network to peer with the VMware Engine network.
        /// Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`.
        /// </summary>
        [Input("peerNetworkType")]
        public Input<string>? PeerNetworkType { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// State of the network peering.
        /// This field has a value of 'ACTIVE' when there's a matching configuration in the peer network.
        /// New values may be added to this enum when appropriate.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Details about the current state of the network peering.
        /// </summary>
        [Input("stateDetails")]
        public Input<string>? StateDetails { get; set; }

        /// <summary>
        /// System-generated unique identifier for the resource.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Last updated time of this resource.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
        /// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// The relative resource name of the VMware Engine network. Specify the name in the following form:
        /// projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
        /// can either be a project number or a project ID.
        /// </summary>
        [Input("vmwareEngineNetwork")]
        public Input<string>? VmwareEngineNetwork { get; set; }

        /// <summary>
        /// The canonical name of the VMware Engine network in the form:
        /// projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}
        /// </summary>
        [Input("vmwareEngineNetworkCanonical")]
        public Input<string>? VmwareEngineNetworkCanonical { get; set; }

        public NetworkPeeringState()
        {
        }
        public static new NetworkPeeringState Empty => new NetworkPeeringState();
    }
}
