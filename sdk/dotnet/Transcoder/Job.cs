// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Transcoder
{
    /// <summary>
    /// Transcoding Job Resource
    /// 
    /// To get more information about Job, see:
    /// 
    /// * [API documentation](https://cloud.google.com/transcoder/docs/reference/rest/v1/projects.locations.jobs)
    /// * How-to Guides
    ///     * [Transcoder](https://cloud.google.com/transcoder/docs/)
    /// 
    /// ## Example Usage
    /// 
    /// ### Transcoder Job Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Storage.Bucket("default", new()
    ///     {
    ///         Name = "transcoder-job",
    ///         Location = "US",
    ///         ForceDestroy = true,
    ///         UniformBucketLevelAccess = true,
    ///         PublicAccessPrevention = "enforced",
    ///     });
    /// 
    ///     var exampleMp4 = new Gcp.Storage.BucketObject("example_mp4", new()
    ///     {
    ///         Name = "example.mp4",
    ///         Source = new FileAsset("./test-fixtures/example.mp4"),
    ///         Bucket = @default.Name,
    ///     });
    /// 
    ///     var defaultJobTemplate = new Gcp.Transcoder.JobTemplate("default", new()
    ///     {
    ///         JobTemplateId = "example-job-template",
    ///         Location = "us-central1",
    ///         Config = new Gcp.Transcoder.Inputs.JobTemplateConfigArgs
    ///         {
    ///             Inputs = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobTemplateConfigInputArgs
    ///                 {
    ///                     Key = "input0",
    ///                     Uri = Output.Tuple(@default.Name, exampleMp4.Name).Apply(values =&gt;
    ///                     {
    ///                         var defaultName = values.Item1;
    ///                         var exampleMp4Name = values.Item2;
    ///                         return $"gs://{defaultName}/{exampleMp4Name}";
    ///                     }),
    ///                 },
    ///             },
    ///             Output = new Gcp.Transcoder.Inputs.JobTemplateConfigOutputArgs
    ///             {
    ///                 Uri = @default.Name.Apply(name =&gt; $"gs://{name}/outputs/"),
    ///             },
    ///             EditLists = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobTemplateConfigEditListArgs
    ///                 {
    ///                     Key = "atom0",
    ///                     Inputs = new[]
    ///                     {
    ///                         "input0",
    ///                     },
    ///                     StartTimeOffset = "0s",
    ///                 },
    ///             },
    ///             ElementaryStreams = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "video-stream0",
    ///                     VideoStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamArgs
    ///                     {
    ///                         H264 = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamH264Args
    ///                         {
    ///                             WidthPixels = 640,
    ///                             HeightPixels = 360,
    ///                             BitrateBps = 550000,
    ///                             FrameRate = 60,
    ///                             PixelFormat = "yuv420p",
    ///                             RateControlMode = "vbr",
    ///                             CrfLevel = 21,
    ///                             GopDuration = "3s",
    ///                             VbvSizeBits = 550000,
    ///                             VbvFullnessBits = 495000,
    ///                             EntropyCoder = "cabac",
    ///                             Profile = "high",
    ///                             Preset = "veryfast",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "video-stream1",
    ///                     VideoStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamArgs
    ///                     {
    ///                         H264 = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamH264Args
    ///                         {
    ///                             WidthPixels = 1280,
    ///                             HeightPixels = 720,
    ///                             BitrateBps = 550000,
    ///                             FrameRate = 60,
    ///                             PixelFormat = "yuv420p",
    ///                             RateControlMode = "vbr",
    ///                             CrfLevel = 21,
    ///                             GopDuration = "3s",
    ///                             VbvSizeBits = 2500000,
    ///                             VbvFullnessBits = 2250000,
    ///                             EntropyCoder = "cabac",
    ///                             Profile = "high",
    ///                             Preset = "veryfast",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "audio-stream0",
    ///                     AudioStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamAudioStreamArgs
    ///                     {
    ///                         Codec = "aac",
    ///                         BitrateBps = 64000,
    ///                         ChannelCount = 2,
    ///                         ChannelLayouts = new[]
    ///                         {
    ///                             "fl",
    ///                             "fr",
    ///                         },
    ///                         SampleRateHertz = 48000,
    ///                     },
    ///                 },
    ///             },
    ///             MuxStreams = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
    ///                 {
    ///                     Key = "sd",
    ///                     FileName = "sd.mp4",
    ///                     Container = "mp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "video-stream0",
    ///                         "audio-stream0",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
    ///                 {
    ///                     Key = "hd",
    ///                     FileName = "hd.mp4",
    ///                     Container = "mp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "video-stream1",
    ///                         "audio-stream0",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "label", "key" },
    ///         },
    ///     });
    /// 
    ///     var defaultJob = new Gcp.Transcoder.Job("default", new()
    ///     {
    ///         TemplateId = defaultJobTemplate.Name,
    ///         Location = "us-central1",
    ///         Labels = 
    ///         {
    ///             { "label", "key" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Transcoder Job Pubsub
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Storage.Bucket("default", new()
    ///     {
    ///         Name = "transcoder-job",
    ///         Location = "US",
    ///         ForceDestroy = true,
    ///         UniformBucketLevelAccess = true,
    ///         PublicAccessPrevention = "enforced",
    ///     });
    /// 
    ///     var exampleMp4 = new Gcp.Storage.BucketObject("example_mp4", new()
    ///     {
    ///         Name = "example.mp4",
    ///         Source = new FileAsset("./test-fixtures/example.mp4"),
    ///         Bucket = @default.Name,
    ///     });
    /// 
    ///     var transcoderNotifications = new Gcp.PubSub.Topic("transcoder_notifications", new()
    ///     {
    ///         Name = "transcoder-notifications",
    ///     });
    /// 
    ///     var defaultJob = new Gcp.Transcoder.Job("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Config = new Gcp.Transcoder.Inputs.JobConfigArgs
    ///         {
    ///             Inputs = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigInputArgs
    ///                 {
    ///                     Key = "input0",
    ///                     Uri = Output.Tuple(@default.Name, exampleMp4.Name).Apply(values =&gt;
    ///                     {
    ///                         var defaultName = values.Item1;
    ///                         var exampleMp4Name = values.Item2;
    ///                         return $"gs://{defaultName}/{exampleMp4Name}";
    ///                     }),
    ///                 },
    ///             },
    ///             EditLists = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigEditListArgs
    ///                 {
    ///                     Key = "atom0",
    ///                     Inputs = new[]
    ///                     {
    ///                         "input0",
    ///                     },
    ///                     StartTimeOffset = "0s",
    ///                 },
    ///             },
    ///             AdBreaks = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigAdBreakArgs
    ///                 {
    ///                     StartTimeOffset = "3.500s",
    ///                 },
    ///             },
    ///             ElementaryStreams = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "video-stream0",
    ///                     VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
    ///                     {
    ///                         H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
    ///                         {
    ///                             WidthPixels = 640,
    ///                             HeightPixels = 360,
    ///                             BitrateBps = 550000,
    ///                             FrameRate = 60,
    ///                             PixelFormat = "yuv420p",
    ///                             RateControlMode = "vbr",
    ///                             CrfLevel = 21,
    ///                             GopDuration = "3s",
    ///                             VbvSizeBits = 550000,
    ///                             VbvFullnessBits = 495000,
    ///                             EntropyCoder = "cabac",
    ///                             Profile = "high",
    ///                             Preset = "veryfast",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "video-stream1",
    ///                     VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
    ///                     {
    ///                         H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
    ///                         {
    ///                             WidthPixels = 1280,
    ///                             HeightPixels = 720,
    ///                             BitrateBps = 550000,
    ///                             FrameRate = 60,
    ///                             PixelFormat = "yuv420p",
    ///                             RateControlMode = "vbr",
    ///                             CrfLevel = 21,
    ///                             GopDuration = "3s",
    ///                             VbvSizeBits = 2500000,
    ///                             VbvFullnessBits = 2250000,
    ///                             EntropyCoder = "cabac",
    ///                             Profile = "high",
    ///                             Preset = "veryfast",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "audio-stream0",
    ///                     AudioStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamAudioStreamArgs
    ///                     {
    ///                         Codec = "aac",
    ///                         BitrateBps = 64000,
    ///                         ChannelCount = 2,
    ///                         ChannelLayouts = new[]
    ///                         {
    ///                             "fl",
    ///                             "fr",
    ///                         },
    ///                         SampleRateHertz = 48000,
    ///                     },
    ///                 },
    ///             },
    ///             MuxStreams = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "sd",
    ///                     FileName = "sd.mp4",
    ///                     Container = "mp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "video-stream0",
    ///                         "audio-stream0",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "hd",
    ///                     FileName = "hd.mp4",
    ///                     Container = "mp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "video-stream1",
    ///                         "audio-stream0",
    ///                     },
    ///                 },
    ///             },
    ///             PubsubDestination = new Gcp.Transcoder.Inputs.JobConfigPubsubDestinationArgs
    ///             {
    ///                 Topic = transcoderNotifications.Id,
    ///             },
    ///             Output = new Gcp.Transcoder.Inputs.JobConfigOutputArgs
    ///             {
    ///                 Uri = @default.Name.Apply(name =&gt; $"gs://{name}/outputs/"),
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "label", "key" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Transcoder Job Encryptions
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Storage.Bucket("default", new()
    ///     {
    ///         Name = "transcoder-job",
    ///         Location = "US",
    ///         ForceDestroy = true,
    ///         UniformBucketLevelAccess = true,
    ///         PublicAccessPrevention = "enforced",
    ///     });
    /// 
    ///     var exampleMp4 = new Gcp.Storage.BucketObject("example_mp4", new()
    ///     {
    ///         Name = "example.mp4",
    ///         Source = new FileAsset("./test-fixtures/example.mp4"),
    ///         Bucket = @default.Name,
    ///     });
    /// 
    ///     var encryptionKey = new Gcp.SecretManager.Secret("encryption_key", new()
    ///     {
    ///         SecretId = "transcoder-encryption-key",
    ///         Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///         {
    ///             Auto = null,
    ///         },
    ///     });
    /// 
    ///     var encryptionKeySecretVersion = new Gcp.SecretManager.SecretVersion("encryption_key", new()
    ///     {
    ///         Secret = encryptionKey.Name,
    ///         SecretData = "4A67F2C1B8E93A4F6D3E7890A1BC23DF",
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     // this is required to allow the transcoder service identity to access the secret
    ///     var transcoder = new Gcp.Projects.ServiceIdentity("transcoder", new()
    ///     {
    ///         Project = project.Apply(getProjectResult =&gt; getProjectResult.ProjectId),
    ///         Service = "transcoder.googleapis.com",
    ///     });
    /// 
    ///     var transcoderEncryptionKeyAccessor = new Gcp.SecretManager.SecretIamMember("transcoder_encryption_key_accessor", new()
    ///     {
    ///         SecretId = encryptionKey.SecretId,
    ///         Project = encryptionKey.Project,
    ///         Role = "roles/secretmanager.secretAccessor",
    ///         Member = transcoder.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     });
    /// 
    ///     var defaultJob = new Gcp.Transcoder.Job("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Config = new Gcp.Transcoder.Inputs.JobConfigArgs
    ///         {
    ///             Inputs = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigInputArgs
    ///                 {
    ///                     Key = "input0",
    ///                     Uri = Output.Tuple(@default.Name, exampleMp4.Name).Apply(values =&gt;
    ///                     {
    ///                         var defaultName = values.Item1;
    ///                         var exampleMp4Name = values.Item2;
    ///                         return $"gs://{defaultName}/{exampleMp4Name}";
    ///                     }),
    ///                 },
    ///             },
    ///             ElementaryStreams = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "es_video",
    ///                     VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
    ///                     {
    ///                         H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
    ///                         {
    ///                             Profile = "main",
    ///                             HeightPixels = 600,
    ///                             WidthPixels = 800,
    ///                             BitrateBps = 1000000,
    ///                             FrameRate = 60,
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "es_audio",
    ///                     AudioStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamAudioStreamArgs
    ///                     {
    ///                         Codec = "aac",
    ///                         ChannelCount = 2,
    ///                         BitrateBps = 160000,
    ///                     },
    ///                 },
    ///             },
    ///             Encryptions = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigEncryptionArgs
    ///                 {
    ///                     Id = "aes-128",
    ///                     SecretManagerKeySource = new Gcp.Transcoder.Inputs.JobConfigEncryptionSecretManagerKeySourceArgs
    ///                     {
    ///                         SecretVersion = encryptionKeySecretVersion.Name,
    ///                     },
    ///                     DrmSystems = new Gcp.Transcoder.Inputs.JobConfigEncryptionDrmSystemsArgs
    ///                     {
    ///                         Clearkey = null,
    ///                     },
    ///                     Aes128 = null,
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigEncryptionArgs
    ///                 {
    ///                     Id = "cenc",
    ///                     SecretManagerKeySource = new Gcp.Transcoder.Inputs.JobConfigEncryptionSecretManagerKeySourceArgs
    ///                     {
    ///                         SecretVersion = encryptionKeySecretVersion.Name,
    ///                     },
    ///                     DrmSystems = new Gcp.Transcoder.Inputs.JobConfigEncryptionDrmSystemsArgs
    ///                     {
    ///                         Widevine = null,
    ///                     },
    ///                     MpegCenc = new Gcp.Transcoder.Inputs.JobConfigEncryptionMpegCencArgs
    ///                     {
    ///                         Scheme = "cenc",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigEncryptionArgs
    ///                 {
    ///                     Id = "cbcs",
    ///                     SecretManagerKeySource = new Gcp.Transcoder.Inputs.JobConfigEncryptionSecretManagerKeySourceArgs
    ///                     {
    ///                         SecretVersion = encryptionKeySecretVersion.Name,
    ///                     },
    ///                     DrmSystems = new Gcp.Transcoder.Inputs.JobConfigEncryptionDrmSystemsArgs
    ///                     {
    ///                         Widevine = null,
    ///                     },
    ///                     MpegCenc = new Gcp.Transcoder.Inputs.JobConfigEncryptionMpegCencArgs
    ///                     {
    ///                         Scheme = "cbcs",
    ///                     },
    ///                 },
    ///             },
    ///             MuxStreams = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "ts_aes128",
    ///                     Container = "ts",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "es_video",
    ///                         "es_audio",
    ///                     },
    ///                     SegmentSettings = new Gcp.Transcoder.Inputs.JobConfigMuxStreamSegmentSettingsArgs
    ///                     {
    ///                         SegmentDuration = "6s",
    ///                     },
    ///                     EncryptionId = "aes-128",
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "fmp4_cenc_video",
    ///                     Container = "fmp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "es_video",
    ///                     },
    ///                     SegmentSettings = new Gcp.Transcoder.Inputs.JobConfigMuxStreamSegmentSettingsArgs
    ///                     {
    ///                         SegmentDuration = "6s",
    ///                     },
    ///                     EncryptionId = "cenc",
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "fmp4_cenc_audio",
    ///                     Container = "fmp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "es_audio",
    ///                     },
    ///                     SegmentSettings = new Gcp.Transcoder.Inputs.JobConfigMuxStreamSegmentSettingsArgs
    ///                     {
    ///                         SegmentDuration = "6s",
    ///                     },
    ///                     EncryptionId = "cenc",
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "fmp4_cbcs_video",
    ///                     Container = "fmp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "es_video",
    ///                     },
    ///                     SegmentSettings = new Gcp.Transcoder.Inputs.JobConfigMuxStreamSegmentSettingsArgs
    ///                     {
    ///                         SegmentDuration = "6s",
    ///                     },
    ///                     EncryptionId = "cbcs",
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "fmp4_cbcs_audio",
    ///                     Container = "fmp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "es_audio",
    ///                     },
    ///                     SegmentSettings = new Gcp.Transcoder.Inputs.JobConfigMuxStreamSegmentSettingsArgs
    ///                     {
    ///                         SegmentDuration = "6s",
    ///                     },
    ///                     EncryptionId = "cbcs",
    ///                 },
    ///             },
    ///             Manifests = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigManifestArgs
    ///                 {
    ///                     FileName = "manifest_aes128.m3u8",
    ///                     Type = "HLS",
    ///                     MuxStreams = new[]
    ///                     {
    ///                         "ts_aes128",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigManifestArgs
    ///                 {
    ///                     FileName = "manifest_cenc.mpd",
    ///                     Type = "DASH",
    ///                     MuxStreams = new[]
    ///                     {
    ///                         "fmp4_cenc_video",
    ///                         "fmp4_cenc_audio",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigManifestArgs
    ///                 {
    ///                     FileName = "manifest_cbcs.mpd",
    ///                     Type = "DASH",
    ///                     MuxStreams = new[]
    ///                     {
    ///                         "fmp4_cbcs_video",
    ///                         "fmp4_cbcs_audio",
    ///                     },
    ///                 },
    ///             },
    ///             Output = new Gcp.Transcoder.Inputs.JobConfigOutputArgs
    ///             {
    ///                 Uri = @default.Name.Apply(name =&gt; $"gs://{name}/outputs/"),
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "label", "key" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Transcoder Job Overlays
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Storage.Bucket("default", new()
    ///     {
    ///         Name = "transcoder-job",
    ///         Location = "US",
    ///         ForceDestroy = true,
    ///         UniformBucketLevelAccess = true,
    ///         PublicAccessPrevention = "enforced",
    ///     });
    /// 
    ///     var exampleMp4 = new Gcp.Storage.BucketObject("example_mp4", new()
    ///     {
    ///         Name = "example.mp4",
    ///         Source = new FileAsset("./test-fixtures/example.mp4"),
    ///         Bucket = @default.Name,
    ///     });
    /// 
    ///     var overlayPng = new Gcp.Storage.BucketObject("overlay_png", new()
    ///     {
    ///         Name = "overlay.png",
    ///         Source = new FileAsset("./test-fixtures/overlay.png"),
    ///         Bucket = @default.Name,
    ///     });
    /// 
    ///     var defaultJob = new Gcp.Transcoder.Job("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Config = new Gcp.Transcoder.Inputs.JobConfigArgs
    ///         {
    ///             Inputs = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigInputArgs
    ///                 {
    ///                     Key = "input0",
    ///                     Uri = Output.Tuple(@default.Name, exampleMp4.Name).Apply(values =&gt;
    ///                     {
    ///                         var defaultName = values.Item1;
    ///                         var exampleMp4Name = values.Item2;
    ///                         return $"gs://{defaultName}/{exampleMp4Name}";
    ///                     }),
    ///                 },
    ///             },
    ///             EditLists = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigEditListArgs
    ///                 {
    ///                     Key = "atom0",
    ///                     Inputs = new[]
    ///                     {
    ///                         "input0",
    ///                     },
    ///                     StartTimeOffset = "0s",
    ///                 },
    ///             },
    ///             AdBreaks = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigAdBreakArgs
    ///                 {
    ///                     StartTimeOffset = "3.500s",
    ///                 },
    ///             },
    ///             Overlays = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigOverlayArgs
    ///                 {
    ///                     Animations = new[]
    ///                     {
    ///                         new Gcp.Transcoder.Inputs.JobConfigOverlayAnimationArgs
    ///                         {
    ///                             AnimationFade = new Gcp.Transcoder.Inputs.JobConfigOverlayAnimationAnimationFadeArgs
    ///                             {
    ///                                 FadeType = "FADE_IN",
    ///                                 StartTimeOffset = "1.500s",
    ///                                 EndTimeOffset = "3.500s",
    ///                                 Xy = new Gcp.Transcoder.Inputs.JobConfigOverlayAnimationAnimationFadeXyArgs
    ///                                 {
    ///                                     X = 1,
    ///                                     Y = 0.5,
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     Image = new Gcp.Transcoder.Inputs.JobConfigOverlayImageArgs
    ///                     {
    ///                         Uri = Output.Tuple(@default.Name, overlayPng.Name).Apply(values =&gt;
    ///                         {
    ///                             var defaultName = values.Item1;
    ///                             var overlayPngName = values.Item2;
    ///                             return $"gs://{defaultName}/{overlayPngName}";
    ///                         }),
    ///                     },
    ///                 },
    ///             },
    ///             ElementaryStreams = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "video-stream0",
    ///                     VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
    ///                     {
    ///                         H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
    ///                         {
    ///                             WidthPixels = 640,
    ///                             HeightPixels = 360,
    ///                             BitrateBps = 550000,
    ///                             FrameRate = 60,
    ///                             PixelFormat = "yuv420p",
    ///                             RateControlMode = "vbr",
    ///                             CrfLevel = 21,
    ///                             GopDuration = "3s",
    ///                             VbvSizeBits = 550000,
    ///                             VbvFullnessBits = 495000,
    ///                             EntropyCoder = "cabac",
    ///                             Profile = "high",
    ///                             Preset = "veryfast",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "video-stream1",
    ///                     VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
    ///                     {
    ///                         H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
    ///                         {
    ///                             WidthPixels = 1280,
    ///                             HeightPixels = 720,
    ///                             BitrateBps = 550000,
    ///                             FrameRate = 60,
    ///                             PixelFormat = "yuv420p",
    ///                             RateControlMode = "vbr",
    ///                             CrfLevel = 21,
    ///                             GopDuration = "3s",
    ///                             VbvSizeBits = 2500000,
    ///                             VbvFullnessBits = 2250000,
    ///                             EntropyCoder = "cabac",
    ///                             Profile = "high",
    ///                             Preset = "veryfast",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "audio-stream0",
    ///                     AudioStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamAudioStreamArgs
    ///                     {
    ///                         Codec = "aac",
    ///                         BitrateBps = 64000,
    ///                         ChannelCount = 2,
    ///                         ChannelLayouts = new[]
    ///                         {
    ///                             "fl",
    ///                             "fr",
    ///                         },
    ///                         SampleRateHertz = 48000,
    ///                     },
    ///                 },
    ///             },
    ///             MuxStreams = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "sd",
    ///                     FileName = "sd.mp4",
    ///                     Container = "mp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "video-stream0",
    ///                         "audio-stream0",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "hd",
    ///                     FileName = "hd.mp4",
    ///                     Container = "mp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "video-stream1",
    ///                         "audio-stream0",
    ///                     },
    ///                 },
    ///             },
    ///             Output = new Gcp.Transcoder.Inputs.JobConfigOutputArgs
    ///             {
    ///                 Uri = @default.Name.Apply(name =&gt; $"gs://{name}/outputs/"),
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "label", "key" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Transcoder Job Manifests
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Storage.Bucket("default", new()
    ///     {
    ///         Name = "transcoder-job",
    ///         Location = "US",
    ///         ForceDestroy = true,
    ///         UniformBucketLevelAccess = true,
    ///         PublicAccessPrevention = "enforced",
    ///     });
    /// 
    ///     var exampleMp4 = new Gcp.Storage.BucketObject("example_mp4", new()
    ///     {
    ///         Name = "example.mp4",
    ///         Source = new FileAsset("./test-fixtures/example.mp4"),
    ///         Bucket = @default.Name,
    ///     });
    /// 
    ///     var defaultJob = new Gcp.Transcoder.Job("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Config = new Gcp.Transcoder.Inputs.JobConfigArgs
    ///         {
    ///             Inputs = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigInputArgs
    ///                 {
    ///                     Key = "input0",
    ///                     Uri = Output.Tuple(@default.Name, exampleMp4.Name).Apply(values =&gt;
    ///                     {
    ///                         var defaultName = values.Item1;
    ///                         var exampleMp4Name = values.Item2;
    ///                         return $"gs://{defaultName}/{exampleMp4Name}";
    ///                     }),
    ///                 },
    ///             },
    ///             EditLists = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigEditListArgs
    ///                 {
    ///                     Key = "atom0",
    ///                     StartTimeOffset = "0s",
    ///                     Inputs = new[]
    ///                     {
    ///                         "input0",
    ///                     },
    ///                 },
    ///             },
    ///             AdBreaks = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigAdBreakArgs
    ///                 {
    ///                     StartTimeOffset = "3.500s",
    ///                 },
    ///             },
    ///             ElementaryStreams = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "video-stream0",
    ///                     VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
    ///                     {
    ///                         H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
    ///                         {
    ///                             WidthPixels = 640,
    ///                             HeightPixels = 360,
    ///                             BitrateBps = 550000,
    ///                             FrameRate = 60,
    ///                             PixelFormat = "yuv420p",
    ///                             RateControlMode = "vbr",
    ///                             CrfLevel = 21,
    ///                             GopDuration = "3s",
    ///                             VbvSizeBits = 550000,
    ///                             VbvFullnessBits = 495000,
    ///                             EntropyCoder = "cabac",
    ///                             Profile = "high",
    ///                             Preset = "veryfast",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "video-stream1",
    ///                     VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
    ///                     {
    ///                         H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
    ///                         {
    ///                             WidthPixels = 1280,
    ///                             HeightPixels = 720,
    ///                             BitrateBps = 550000,
    ///                             FrameRate = 60,
    ///                             PixelFormat = "yuv420p",
    ///                             RateControlMode = "vbr",
    ///                             CrfLevel = 21,
    ///                             GopDuration = "3s",
    ///                             VbvSizeBits = 2500000,
    ///                             VbvFullnessBits = 2250000,
    ///                             EntropyCoder = "cabac",
    ///                             Profile = "high",
    ///                             Preset = "veryfast",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
    ///                 {
    ///                     Key = "audio-stream0",
    ///                     AudioStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamAudioStreamArgs
    ///                     {
    ///                         Codec = "aac",
    ///                         BitrateBps = 64000,
    ///                         ChannelCount = 2,
    ///                         ChannelLayouts = new[]
    ///                         {
    ///                             "fl",
    ///                             "fr",
    ///                         },
    ///                         SampleRateHertz = 48000,
    ///                     },
    ///                 },
    ///             },
    ///             MuxStreams = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "sd",
    ///                     FileName = "sd.mp4",
    ///                     Container = "mp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "video-stream0",
    ///                         "audio-stream0",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "hd",
    ///                     FileName = "hd.mp4",
    ///                     Container = "mp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "video-stream1",
    ///                         "audio-stream0",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "media-sd",
    ///                     FileName = "media-sd.ts",
    ///                     Container = "ts",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "video-stream0",
    ///                         "audio-stream0",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "media-hd",
    ///                     FileName = "media-hd.ts",
    ///                     Container = "ts",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "video-stream1",
    ///                         "audio-stream0",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "video-only-sd",
    ///                     FileName = "video-only-sd.m4s",
    ///                     Container = "fmp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "video-stream0",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "video-only-hd",
    ///                     FileName = "video-only-hd.m4s",
    ///                     Container = "fmp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "video-stream1",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
    ///                 {
    ///                     Key = "audio-only",
    ///                     FileName = "audio-only.m4s",
    ///                     Container = "fmp4",
    ///                     ElementaryStreams = new[]
    ///                     {
    ///                         "audio-stream0",
    ///                     },
    ///                 },
    ///             },
    ///             Manifests = new[]
    ///             {
    ///                 new Gcp.Transcoder.Inputs.JobConfigManifestArgs
    ///                 {
    ///                     FileName = "manifest.m3u8",
    ///                     Type = "HLS",
    ///                     MuxStreams = new[]
    ///                     {
    ///                         "media-sd",
    ///                         "media-hd",
    ///                     },
    ///                 },
    ///                 new Gcp.Transcoder.Inputs.JobConfigManifestArgs
    ///                 {
    ///                     FileName = "manifest.mpd",
    ///                     Type = "DASH",
    ///                     MuxStreams = new[]
    ///                     {
    ///                         "video-only-sd",
    ///                         "video-only-hd",
    ///                         "audio-only",
    ///                     },
    ///                 },
    ///             },
    ///             Output = new Gcp.Transcoder.Inputs.JobConfigOutputArgs
    ///             {
    ///                 Uri = @default.Name.Apply(name =&gt; $"gs://{name}/outputs/"),
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "label", "key" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Job can be imported using any of these accepted formats:
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{project}} {{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, Job can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:transcoder/job:Job default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:transcoder/job:Job default "{{project}} {{name}}"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:transcoder/job:Job default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:transcoder/job:Job")]
    public partial class Job : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration for this template.
        /// Structure is documented below.
        /// </summary>
        [Output("config")]
        public Output<Outputs.JobConfig> Config { get; private set; } = null!;

        /// <summary>
        /// The time the job was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The time the transcoding finished.
        /// </summary>
        [Output("endTime")]
        public Output<string> EndTime { get; private set; } = null!;

        /// <summary>
        /// The labels associated with this job. You can use these to organize and group your jobs.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location of the transcoding job resource.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the job.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The time the transcoding started.
        /// </summary>
        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;

        /// <summary>
        /// The current state of the job.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Specify the templateId to use for populating Job.config.
        /// The default is preset/web-hd, which is the only supported preset.
        /// </summary>
        [Output("templateId")]
        public Output<string> TemplateId { get; private set; } = null!;


        /// <summary>
        /// Create a Job resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Job(string name, JobArgs args, CustomResourceOptions? options = null)
            : base("gcp:transcoder/job:Job", name, args ?? new JobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Job(string name, Input<string> id, JobState? state = null, CustomResourceOptions? options = null)
            : base("gcp:transcoder/job:Job", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Job resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Job Get(string name, Input<string> id, JobState? state = null, CustomResourceOptions? options = null)
        {
            return new Job(name, id, state, options);
        }
    }

    public sealed class JobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration for this template.
        /// Structure is documented below.
        /// </summary>
        [Input("config")]
        public Input<Inputs.JobConfigArgs>? Config { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The labels associated with this job. You can use these to organize and group your jobs.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the transcoding job resource.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Specify the templateId to use for populating Job.config.
        /// The default is preset/web-hd, which is the only supported preset.
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        public JobArgs()
        {
        }
        public static new JobArgs Empty => new JobArgs();
    }

    public sealed class JobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration for this template.
        /// Structure is documented below.
        /// </summary>
        [Input("config")]
        public Input<Inputs.JobConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// The time the job was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The time the transcoding finished.
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The labels associated with this job. You can use these to organize and group your jobs.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the transcoding job resource.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the job.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The time the transcoding started.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// The current state of the job.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Specify the templateId to use for populating Job.config.
        /// The default is preset/web-hd, which is the only supported preset.
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        public JobState()
        {
        }
        public static new JobState Empty => new JobState();
    }
}
