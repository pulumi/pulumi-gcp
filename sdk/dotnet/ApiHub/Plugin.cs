// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ApiHub
{
    /// <summary>
    /// A plugin resource in the API hub.
    /// 
    /// ## Example Usage
    /// 
    /// ### Apihub Plugin Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var apihubPluginFull = new Gcp.ApiHub.Plugin("apihub_plugin_full", new()
    ///     {
    ///         Location = "us-central1",
    ///         DisplayName = "Test Plugin",
    ///         Description = "Test description",
    ///         PluginId = "plugin-full",
    ///         PluginCategory = "API_GATEWAY",
    ///         ActionsConfigs = new[]
    ///         {
    ///             new Gcp.ApiHub.Inputs.PluginActionsConfigArgs
    ///             {
    ///                 Id = "sync-metadata",
    ///                 DisplayName = "Sync Metadata",
    ///                 Description = "Syncs API metadata.",
    ///                 TriggerMode = "API_HUB_SCHEDULE_TRIGGER",
    ///             },
    ///         },
    ///         Documentation = new Gcp.ApiHub.Inputs.PluginDocumentationArgs
    ///         {
    ///             ExternalUri = "https://example.com/plugin-documentation",
    ///         },
    ///         HostingService = new Gcp.ApiHub.Inputs.PluginHostingServiceArgs
    ///         {
    ///             ServiceUri = "https://your-plugin-service.example.com/api",
    ///         },
    ///         ConfigTemplate = new Gcp.ApiHub.Inputs.PluginConfigTemplateArgs
    ///         {
    ///             AuthConfigTemplate = new Gcp.ApiHub.Inputs.PluginConfigTemplateAuthConfigTemplateArgs
    ///             {
    ///                 SupportedAuthTypes = new[]
    ///                 {
    ///                     "NO_AUTH",
    ///                     "USER_PASSWORD",
    ///                 },
    ///                 ServiceAccount = new Gcp.ApiHub.Inputs.PluginConfigTemplateAuthConfigTemplateServiceAccountArgs
    ///                 {
    ///                     ServiceAccount = "test@developer.gserviceaccount.com",
    ///                 },
    ///             },
    ///             AdditionalConfigTemplates = new[]
    ///             {
    ///                 new Gcp.ApiHub.Inputs.PluginConfigTemplateAdditionalConfigTemplateArgs
    ///                 {
    ///                     Id = "string-val",
    ///                     Description = "API key for the service.",
    ///                     ValueType = "STRING",
    ///                     Required = false,
    ///                     ValidationRegex = "^[a-zA-Z0-9]{5,20}$",
    ///                 },
    ///                 new Gcp.ApiHub.Inputs.PluginConfigTemplateAdditionalConfigTemplateArgs
    ///                 {
    ///                     Id = "integer-val",
    ///                     Description = "API key for the service.",
    ///                     ValueType = "INT",
    ///                     Required = true,
    ///                     ValidationRegex = "",
    ///                 },
    ///                 new Gcp.ApiHub.Inputs.PluginConfigTemplateAdditionalConfigTemplateArgs
    ///                 {
    ///                     Id = "bool-val",
    ///                     Description = "API key for the service.",
    ///                     ValueType = "BOOL",
    ///                     Required = false,
    ///                     ValidationRegex = "",
    ///                 },
    ///                 new Gcp.ApiHub.Inputs.PluginConfigTemplateAdditionalConfigTemplateArgs
    ///                 {
    ///                     Id = "enum-val",
    ///                     Description = "API key for the service.",
    ///                     ValueType = "ENUM",
    ///                     EnumOptions = new[]
    ///                     {
    ///                         new Gcp.ApiHub.Inputs.PluginConfigTemplateAdditionalConfigTemplateEnumOptionArgs
    ///                         {
    ///                             Id = "Option1",
    ///                             DisplayName = "Option1",
    ///                             Description = "Description for Option1",
    ///                         },
    ///                         new Gcp.ApiHub.Inputs.PluginConfigTemplateAdditionalConfigTemplateEnumOptionArgs
    ///                         {
    ///                             Id = "Option2",
    ///                             DisplayName = "Option2",
    ///                             Description = "Description for Option2",
    ///                         },
    ///                     },
    ///                     Required = false,
    ///                     ValidationRegex = "",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Plugin can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{plugin_id}}`
    /// 
    /// * `{{location}}/{{plugin_id}}`
    /// 
    /// When using the `pulumi import` command, Plugin can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:apihub/plugin:Plugin default projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apihub/plugin:Plugin default {{project}}/{{location}}/{{plugin_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apihub/plugin:Plugin default {{location}}/{{plugin_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:apihub/plugin:Plugin")]
    public partial class Plugin : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration of actions supported by the plugin.
        /// Structure is documented below.
        /// </summary>
        [Output("actionsConfigs")]
        public Output<ImmutableArray<Outputs.PluginActionsConfig>> ActionsConfigs { get; private set; } = null!;

        /// <summary>
        /// ConfigTemplate represents the configuration template for a plugin.
        /// Structure is documented below.
        /// </summary>
        [Output("configTemplate")]
        public Output<Outputs.PluginConfigTemplate?> ConfigTemplate { get; private set; } = null!;

        /// <summary>
        /// Timestamp indicating when the plugin was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The plugin description. Max length is 2000 characters (Unicode code
        /// points).
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of the plugin. Max length is 50 characters (Unicode code
        /// points).
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Documentation details.
        /// Structure is documented below.
        /// </summary>
        [Output("documentation")]
        public Output<Outputs.PluginDocumentation?> Documentation { get; private set; } = null!;

        /// <summary>
        /// The information related to the service implemented by the plugin
        /// developer, used to invoke the plugin's functionality.
        /// Structure is documented below.
        /// </summary>
        [Output("hostingService")]
        public Output<Outputs.PluginHostingService?> HostingService { get; private set; } = null!;

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Identifier. The name of the plugin.
        /// Format: `projects/{project}/locations/{location}/plugins/{plugin}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The type of the plugin, indicating whether it is 'SYSTEM_OWNED' or
        /// 'USER_OWNED'.
        /// Possible values:
        /// OWNERSHIP_TYPE_UNSPECIFIED
        /// SYSTEM_OWNED
        /// USER_OWNED
        /// </summary>
        [Output("ownershipType")]
        public Output<string> OwnershipType { get; private set; } = null!;

        /// <summary>
        /// Possible values:
        /// PLUGIN_CATEGORY_UNSPECIFIED
        /// API_GATEWAY
        /// API_PRODUCER
        /// </summary>
        [Output("pluginCategory")]
        public Output<string?> PluginCategory { get; private set; } = null!;

        /// <summary>
        /// The ID to use for the Plugin resource, which will become the final
        /// component of the Plugin's resource name. This field is optional.
        /// * If provided, the same will be used. The service will throw an error if
        /// the specified id is already used by another Plugin resource in the API hub
        /// instance.
        /// * If not provided, a system generated id will be used.
        /// This value should be 4-63 characters, overall resource name which will be
        /// of format
        /// `projects/{project}/locations/{location}/plugins/{plugin}`,
        /// its length is limited to 1000 characters and valid characters are
        /// /a-z[0-9]-_/.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("pluginId")]
        public Output<string> PluginId { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Represents the state of the plugin.
        /// Note this field will not be set for plugins developed via plugin
        /// framework as the state will be managed at plugin instance level.
        /// Possible values:
        /// STATE_UNSPECIFIED
        /// ENABLED
        /// DISABLED
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Timestamp indicating when the plugin was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Plugin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Plugin(string name, PluginArgs args, CustomResourceOptions? options = null)
            : base("gcp:apihub/plugin:Plugin", name, args ?? new PluginArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Plugin(string name, Input<string> id, PluginState? state = null, CustomResourceOptions? options = null)
            : base("gcp:apihub/plugin:Plugin", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Plugin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Plugin Get(string name, Input<string> id, PluginState? state = null, CustomResourceOptions? options = null)
        {
            return new Plugin(name, id, state, options);
        }
    }

    public sealed class PluginArgs : global::Pulumi.ResourceArgs
    {
        [Input("actionsConfigs")]
        private InputList<Inputs.PluginActionsConfigArgs>? _actionsConfigs;

        /// <summary>
        /// The configuration of actions supported by the plugin.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.PluginActionsConfigArgs> ActionsConfigs
        {
            get => _actionsConfigs ?? (_actionsConfigs = new InputList<Inputs.PluginActionsConfigArgs>());
            set => _actionsConfigs = value;
        }

        /// <summary>
        /// ConfigTemplate represents the configuration template for a plugin.
        /// Structure is documented below.
        /// </summary>
        [Input("configTemplate")]
        public Input<Inputs.PluginConfigTemplateArgs>? ConfigTemplate { get; set; }

        /// <summary>
        /// The plugin description. Max length is 2000 characters (Unicode code
        /// points).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the plugin. Max length is 50 characters (Unicode code
        /// points).
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Documentation details.
        /// Structure is documented below.
        /// </summary>
        [Input("documentation")]
        public Input<Inputs.PluginDocumentationArgs>? Documentation { get; set; }

        /// <summary>
        /// The information related to the service implemented by the plugin
        /// developer, used to invoke the plugin's functionality.
        /// Structure is documented below.
        /// </summary>
        [Input("hostingService")]
        public Input<Inputs.PluginHostingServiceArgs>? HostingService { get; set; }

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Possible values:
        /// PLUGIN_CATEGORY_UNSPECIFIED
        /// API_GATEWAY
        /// API_PRODUCER
        /// </summary>
        [Input("pluginCategory")]
        public Input<string>? PluginCategory { get; set; }

        /// <summary>
        /// The ID to use for the Plugin resource, which will become the final
        /// component of the Plugin's resource name. This field is optional.
        /// * If provided, the same will be used. The service will throw an error if
        /// the specified id is already used by another Plugin resource in the API hub
        /// instance.
        /// * If not provided, a system generated id will be used.
        /// This value should be 4-63 characters, overall resource name which will be
        /// of format
        /// `projects/{project}/locations/{location}/plugins/{plugin}`,
        /// its length is limited to 1000 characters and valid characters are
        /// /a-z[0-9]-_/.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("pluginId", required: true)]
        public Input<string> PluginId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public PluginArgs()
        {
        }
        public static new PluginArgs Empty => new PluginArgs();
    }

    public sealed class PluginState : global::Pulumi.ResourceArgs
    {
        [Input("actionsConfigs")]
        private InputList<Inputs.PluginActionsConfigGetArgs>? _actionsConfigs;

        /// <summary>
        /// The configuration of actions supported by the plugin.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.PluginActionsConfigGetArgs> ActionsConfigs
        {
            get => _actionsConfigs ?? (_actionsConfigs = new InputList<Inputs.PluginActionsConfigGetArgs>());
            set => _actionsConfigs = value;
        }

        /// <summary>
        /// ConfigTemplate represents the configuration template for a plugin.
        /// Structure is documented below.
        /// </summary>
        [Input("configTemplate")]
        public Input<Inputs.PluginConfigTemplateGetArgs>? ConfigTemplate { get; set; }

        /// <summary>
        /// Timestamp indicating when the plugin was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The plugin description. Max length is 2000 characters (Unicode code
        /// points).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the plugin. Max length is 50 characters (Unicode code
        /// points).
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Documentation details.
        /// Structure is documented below.
        /// </summary>
        [Input("documentation")]
        public Input<Inputs.PluginDocumentationGetArgs>? Documentation { get; set; }

        /// <summary>
        /// The information related to the service implemented by the plugin
        /// developer, used to invoke the plugin's functionality.
        /// Structure is documented below.
        /// </summary>
        [Input("hostingService")]
        public Input<Inputs.PluginHostingServiceGetArgs>? HostingService { get; set; }

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier. The name of the plugin.
        /// Format: `projects/{project}/locations/{location}/plugins/{plugin}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of the plugin, indicating whether it is 'SYSTEM_OWNED' or
        /// 'USER_OWNED'.
        /// Possible values:
        /// OWNERSHIP_TYPE_UNSPECIFIED
        /// SYSTEM_OWNED
        /// USER_OWNED
        /// </summary>
        [Input("ownershipType")]
        public Input<string>? OwnershipType { get; set; }

        /// <summary>
        /// Possible values:
        /// PLUGIN_CATEGORY_UNSPECIFIED
        /// API_GATEWAY
        /// API_PRODUCER
        /// </summary>
        [Input("pluginCategory")]
        public Input<string>? PluginCategory { get; set; }

        /// <summary>
        /// The ID to use for the Plugin resource, which will become the final
        /// component of the Plugin's resource name. This field is optional.
        /// * If provided, the same will be used. The service will throw an error if
        /// the specified id is already used by another Plugin resource in the API hub
        /// instance.
        /// * If not provided, a system generated id will be used.
        /// This value should be 4-63 characters, overall resource name which will be
        /// of format
        /// `projects/{project}/locations/{location}/plugins/{plugin}`,
        /// its length is limited to 1000 characters and valid characters are
        /// /a-z[0-9]-_/.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("pluginId")]
        public Input<string>? PluginId { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Represents the state of the plugin.
        /// Note this field will not be set for plugins developed via plugin
        /// framework as the state will be managed at plugin instance level.
        /// Possible values:
        /// STATE_UNSPECIFIED
        /// ENABLED
        /// DISABLED
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Timestamp indicating when the plugin was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public PluginState()
        {
        }
        public static new PluginState Empty => new PluginState();
    }
}
