// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ApiHub.Outputs
{

    [OutputType]
    public sealed class ApiHubInstanceConfig
    {
        /// <summary>
        /// Optional. The Customer Managed Encryption Key (CMEK) used for data encryption.
        /// The CMEK name should follow the format of
        /// `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`,
        /// where the location must match the instance location.
        /// If the CMEK is not provided, a GMEK will be created for the instance.
        /// </summary>
        public readonly string? CmekKeyName;
        /// <summary>
        /// Optional. If true, the search will be disabled for the instance. The default value
        /// is false.
        /// </summary>
        public readonly bool? DisableSearch;
        /// <summary>
        /// Optional. Encryption type for the region. If the encryption type is CMEK, the
        /// cmek_key_name must be provided. If no encryption type is provided,
        /// GMEK will be used.
        /// Possible values:
        /// ENCRYPTION_TYPE_UNSPECIFIED
        /// GMEK
        /// CMEK
        /// </summary>
        public readonly string? EncryptionType;
        /// <summary>
        /// Optional. The name of the Vertex AI location where the data store is stored.
        /// 
        /// - - -
        /// </summary>
        public readonly string? VertexLocation;

        [OutputConstructor]
        private ApiHubInstanceConfig(
            string? cmekKeyName,

            bool? disableSearch,

            string? encryptionType,

            string? vertexLocation)
        {
            CmekKeyName = cmekKeyName;
            DisableSearch = disableSearch;
            EncryptionType = encryptionType;
            VertexLocation = vertexLocation;
        }
    }
}
