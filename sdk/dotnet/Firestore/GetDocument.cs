// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firestore
{
    public static class GetDocument
    {
        /// <summary>
        /// Reads a document from a Firestore database.
        /// See [the official documentation](https://cloud.google.com/firestore/native/docs/)
        /// and
        /// [API](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.documents/get/).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Retrieve a document from the Firestore database.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mydoc = new Gcp.Firestore.Document("mydoc", new()
        ///     {
        ///         Project = database.Project,
        ///         Database = database.Name,
        ///         Collection = "somenewcollection",
        ///         DocumentId = "my-doc-id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDocumentResult> InvokeAsync(GetDocumentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDocumentResult>("gcp:firestore/getDocument:getDocument", args ?? new GetDocumentArgs(), options.WithDefaults());

        /// <summary>
        /// Reads a document from a Firestore database.
        /// See [the official documentation](https://cloud.google.com/firestore/native/docs/)
        /// and
        /// [API](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.documents/get/).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Retrieve a document from the Firestore database.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mydoc = new Gcp.Firestore.Document("mydoc", new()
        ///     {
        ///         Project = database.Project,
        ///         Database = database.Name,
        ///         Collection = "somenewcollection",
        ///         DocumentId = "my-doc-id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDocumentResult> Invoke(GetDocumentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDocumentResult>("gcp:firestore/getDocument:getDocument", args ?? new GetDocumentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Reads a document from a Firestore database.
        /// See [the official documentation](https://cloud.google.com/firestore/native/docs/)
        /// and
        /// [API](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.documents/get/).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Retrieve a document from the Firestore database.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mydoc = new Gcp.Firestore.Document("mydoc", new()
        ///     {
        ///         Project = database.Project,
        ///         Database = database.Name,
        ///         Collection = "somenewcollection",
        ///         DocumentId = "my-doc-id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDocumentResult> Invoke(GetDocumentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDocumentResult>("gcp:firestore/getDocument:getDocument", args ?? new GetDocumentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDocumentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the collection of documents.
        /// </summary>
        [Input("collection", required: true)]
        public string Collection { get; set; } = null!;

        /// <summary>
        /// The name of the Firestore database.
        /// </summary>
        [Input("database", required: true)]
        public string Database { get; set; } = null!;

        /// <summary>
        /// The id of the document to get.
        /// </summary>
        [Input("documentId", required: true)]
        public string DocumentId { get; set; } = null!;

        /// <summary>
        /// The project in which the database resides.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetDocumentArgs()
        {
        }
        public static new GetDocumentArgs Empty => new GetDocumentArgs();
    }

    public sealed class GetDocumentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the collection of documents.
        /// </summary>
        [Input("collection", required: true)]
        public Input<string> Collection { get; set; } = null!;

        /// <summary>
        /// The name of the Firestore database.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// The id of the document to get.
        /// </summary>
        [Input("documentId", required: true)]
        public Input<string> DocumentId { get; set; } = null!;

        /// <summary>
        /// The project in which the database resides.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDocumentInvokeArgs()
        {
        }
        public static new GetDocumentInvokeArgs Empty => new GetDocumentInvokeArgs();
    }


    [OutputType]
    public sealed class GetDocumentResult
    {
        public readonly string Collection;
        public readonly string CreateTime;
        public readonly string Database;
        public readonly string DocumentId;
        public readonly string Fields;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string Path;
        public readonly string? Project;
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetDocumentResult(
            string collection,

            string createTime,

            string database,

            string documentId,

            string fields,

            string id,

            string name,

            string path,

            string? project,

            string updateTime)
        {
            Collection = collection;
            CreateTime = createTime;
            Database = database;
            DocumentId = documentId;
            Fields = fields;
            Id = id;
            Name = name;
            Path = path;
            Project = project;
            UpdateTime = updateTime;
        }
    }
}
