// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firestore
{
    /// <summary>
    /// Represents a single field in the database.
    /// Fields are grouped by their "Collection Group", which represent all collections
    /// in the database with the same id.
    /// 
    /// To get more information about Field, see:
    /// 
    /// * [API documentation](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.collectionGroups.fields)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/firestore/docs/query-data/indexing)
    /// 
    /// &gt; **Warning:** This resource creates a Firestore Single Field override on a project that
    ///  already has a Firestore database. If you haven't already created it, you may
    /// create a `gcp.firestore.Database` resource with `location_id` set to your
    /// chosen location.
    /// 
    /// ## Example Usage
    /// ### Firestore Field Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basic = new Gcp.Firestore.Field("basic", new()
    ///     {
    ///         Collection = "chatrooms_%{random_suffix}",
    ///         Database = "(default)",
    ///         FieldId = "basic",
    ///         IndexConfig = new Gcp.Firestore.Inputs.FieldIndexConfigArgs
    ///         {
    ///             Indexes = new[]
    ///             {
    ///                 new Gcp.Firestore.Inputs.FieldIndexConfigIndexArgs
    ///                 {
    ///                     Order = "ASCENDING",
    ///                     QueryScope = "COLLECTION_GROUP",
    ///                 },
    ///                 new Gcp.Firestore.Inputs.FieldIndexConfigIndexArgs
    ///                 {
    ///                     ArrayConfig = "CONTAINS",
    ///                 },
    ///             },
    ///         },
    ///         Project = "my-project-name",
    ///         TtlConfig = null,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firestore Field Timestamp
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var timestamp = new Gcp.Firestore.Field("timestamp", new()
    ///     {
    ///         Collection = "chatrooms_%{random_suffix}",
    ///         FieldId = "timestamp",
    ///         IndexConfig = null,
    ///         Project = "my-project-name",
    ///         TtlConfig = null,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firestore Field Match Override
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var matchOverride = new Gcp.Firestore.Field("matchOverride", new()
    ///     {
    ///         Collection = "chatrooms_%{random_suffix}",
    ///         FieldId = "field_with_same_configuration_as_ancestor",
    ///         IndexConfig = new Gcp.Firestore.Inputs.FieldIndexConfigArgs
    ///         {
    ///             Indexes = new[]
    ///             {
    ///                 new Gcp.Firestore.Inputs.FieldIndexConfigIndexArgs
    ///                 {
    ///                     Order = "ASCENDING",
    ///                 },
    ///                 new Gcp.Firestore.Inputs.FieldIndexConfigIndexArgs
    ///                 {
    ///                     Order = "DESCENDING",
    ///                 },
    ///                 new Gcp.Firestore.Inputs.FieldIndexConfigIndexArgs
    ///                 {
    ///                     ArrayConfig = "CONTAINS",
    ///                 },
    ///             },
    ///         },
    ///         Project = "my-project-name",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Field can be imported using any of these accepted formats:
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firestore/field:Field default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firestore/field:Field")]
    public partial class Field : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the collection group to configure.
        /// </summary>
        [Output("collection")]
        public Output<string> Collection { get; private set; } = null!;

        /// <summary>
        /// The Firestore database id. Defaults to `"(default)"`.
        /// </summary>
        [Output("database")]
        public Output<string?> Database { get; private set; } = null!;

        /// <summary>
        /// The id of the field to configure.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("field")]
        public Output<string> FieldId { get; private set; } = null!;

        /// <summary>
        /// The single field index configuration for this field.
        /// Creating an index configuration for this field will override any inherited configuration with the
        /// indexes specified. Configuring the index configuration with an empty block disables all indexes on
        /// the field.
        /// Structure is documented below.
        /// </summary>
        [Output("indexConfig")]
        public Output<Outputs.FieldIndexConfig?> IndexConfig { get; private set; } = null!;

        /// <summary>
        /// The name of this field. Format:
        /// `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// If set, this field is configured for TTL deletion.
        /// Structure is documented below.
        /// </summary>
        [Output("ttlConfig")]
        public Output<Outputs.FieldTtlConfig?> TtlConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Field resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Field(string name, FieldArgs args, CustomResourceOptions? options = null)
            : base("gcp:firestore/field:Field", name, args ?? new FieldArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Field(string name, Input<string> id, FieldState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firestore/field:Field", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Field resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Field Get(string name, Input<string> id, FieldState? state = null, CustomResourceOptions? options = null)
        {
            return new Field(name, id, state, options);
        }
    }

    public sealed class FieldArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the collection group to configure.
        /// </summary>
        [Input("collection", required: true)]
        public Input<string> Collection { get; set; } = null!;

        /// <summary>
        /// The Firestore database id. Defaults to `"(default)"`.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// The id of the field to configure.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("field", required: true)]
        public Input<string> FieldId { get; set; } = null!;

        /// <summary>
        /// The single field index configuration for this field.
        /// Creating an index configuration for this field will override any inherited configuration with the
        /// indexes specified. Configuring the index configuration with an empty block disables all indexes on
        /// the field.
        /// Structure is documented below.
        /// </summary>
        [Input("indexConfig")]
        public Input<Inputs.FieldIndexConfigArgs>? IndexConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// If set, this field is configured for TTL deletion.
        /// Structure is documented below.
        /// </summary>
        [Input("ttlConfig")]
        public Input<Inputs.FieldTtlConfigArgs>? TtlConfig { get; set; }

        public FieldArgs()
        {
        }
        public static new FieldArgs Empty => new FieldArgs();
    }

    public sealed class FieldState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the collection group to configure.
        /// </summary>
        [Input("collection")]
        public Input<string>? Collection { get; set; }

        /// <summary>
        /// The Firestore database id. Defaults to `"(default)"`.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// The id of the field to configure.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("field")]
        public Input<string>? FieldId { get; set; }

        /// <summary>
        /// The single field index configuration for this field.
        /// Creating an index configuration for this field will override any inherited configuration with the
        /// indexes specified. Configuring the index configuration with an empty block disables all indexes on
        /// the field.
        /// Structure is documented below.
        /// </summary>
        [Input("indexConfig")]
        public Input<Inputs.FieldIndexConfigGetArgs>? IndexConfig { get; set; }

        /// <summary>
        /// The name of this field. Format:
        /// `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// If set, this field is configured for TTL deletion.
        /// Structure is documented below.
        /// </summary>
        [Input("ttlConfig")]
        public Input<Inputs.FieldTtlConfigGetArgs>? TtlConfig { get; set; }

        public FieldState()
        {
        }
        public static new FieldState Empty => new FieldState();
    }
}
