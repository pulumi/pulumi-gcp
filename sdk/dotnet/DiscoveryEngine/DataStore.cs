// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DiscoveryEngine
{
    /// <summary>
    /// Data store is a collection of websites and documents used to find answers for
    /// end-user's questions in Discovery Engine (a.k.a. Vertex AI Search and
    /// Conversation).
    /// 
    /// To get more information about DataStore, see:
    /// 
    /// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.dataStores)
    /// * How-to Guides
    ///     * [Create a search data store](https://cloud.google.com/generative-ai-app-builder/docs/create-data-store-es)
    /// 
    /// ## Example Usage
    /// 
    /// ### Discoveryengine Datastore Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basic = new Gcp.DiscoveryEngine.DataStore("basic", new()
    ///     {
    ///         Location = "global",
    ///         DataStoreId = "data-store-id",
    ///         DisplayName = "tf-test-structured-datastore",
    ///         IndustryVertical = "GENERIC",
    ///         ContentConfig = "NO_CONTENT",
    ///         SolutionTypes = new[]
    ///         {
    ///             "SOLUTION_TYPE_SEARCH",
    ///         },
    ///         CreateAdvancedSiteSearch = false,
    ///         SkipDefaultSchemaCreation = false,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Discoveryengine Datastore Document Processing Config
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var documentProcessingConfig = new Gcp.DiscoveryEngine.DataStore("document_processing_config", new()
    ///     {
    ///         Location = "global",
    ///         DataStoreId = "data-store-id",
    ///         DisplayName = "tf-test-structured-datastore",
    ///         IndustryVertical = "GENERIC",
    ///         ContentConfig = "NO_CONTENT",
    ///         SolutionTypes = new[]
    ///         {
    ///             "SOLUTION_TYPE_SEARCH",
    ///         },
    ///         CreateAdvancedSiteSearch = false,
    ///         DocumentProcessingConfig = new Gcp.DiscoveryEngine.Inputs.DataStoreDocumentProcessingConfigArgs
    ///         {
    ///             DefaultParsingConfig = new Gcp.DiscoveryEngine.Inputs.DataStoreDocumentProcessingConfigDefaultParsingConfigArgs
    ///             {
    ///                 DigitalParsingConfig = null,
    ///             },
    ///             ParsingConfigOverrides = new[]
    ///             {
    ///                 new Gcp.DiscoveryEngine.Inputs.DataStoreDocumentProcessingConfigParsingConfigOverrideArgs
    ///                 {
    ///                     FileType = "pdf",
    ///                     OcrParsingConfig = new Gcp.DiscoveryEngine.Inputs.DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfigArgs
    ///                     {
    ///                         UseNativeText = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DataStore can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/collections/default_collection/dataStores/{{data_store_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{data_store_id}}`
    /// 
    /// * `{{location}}/{{data_store_id}}`
    /// 
    /// When using the `pulumi import` command, DataStore can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/dataStore:DataStore default projects/{{project}}/locations/{{location}}/collections/default_collection/dataStores/{{data_store_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/dataStore:DataStore default {{project}}/{{location}}/{{data_store_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/dataStore:DataStore default {{location}}/{{data_store_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:discoveryengine/dataStore:DataStore")]
    public partial class DataStore : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The content config of the data store.
        /// Possible values are: `NO_CONTENT`, `CONTENT_REQUIRED`, `PUBLIC_WEBSITE`.
        /// </summary>
        [Output("contentConfig")]
        public Output<string> ContentConfig { get; private set; } = null!;

        /// <summary>
        /// If true, an advanced data store for site search will be created. If the
        /// data store is not configured as site search (GENERIC vertical and
        /// PUBLIC_WEBSITE contentConfig), this flag will be ignored.
        /// </summary>
        [Output("createAdvancedSiteSearch")]
        public Output<bool?> CreateAdvancedSiteSearch { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the DataStore was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The unique id of the data store.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("dataStoreId")]
        public Output<string> DataStoreId { get; private set; } = null!;

        /// <summary>
        /// The id of the default Schema associated with this data store.
        /// </summary>
        [Output("defaultSchemaId")]
        public Output<string> DefaultSchemaId { get; private set; } = null!;

        /// <summary>
        /// The display name of the data store. This field must be a UTF-8 encoded
        /// string with a length limit of 128 characters.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Configuration for Document understanding and enrichment.
        /// Structure is documented below.
        /// </summary>
        [Output("documentProcessingConfig")]
        public Output<Outputs.DataStoreDocumentProcessingConfig?> DocumentProcessingConfig { get; private set; } = null!;

        /// <summary>
        /// The industry vertical that the data store registers.
        /// Possible values are: `GENERIC`, `MEDIA`.
        /// </summary>
        [Output("industryVertical")]
        public Output<string> IndustryVertical { get; private set; } = null!;

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The unique full resource name of the data store. Values are of the format
        /// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
        /// This field must be a UTF-8 encoded string with a length limit of 1024
        /// characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// A boolean flag indicating whether to skip the default schema creation for
        /// the data store. Only enable this flag if you are certain that the default
        /// schema is incompatible with your use case.
        /// If set to true, you must manually create a schema for the data store
        /// before any documents can be ingested.
        /// This flag cannot be specified if `data_store.starting_schema` is
        /// specified.
        /// </summary>
        [Output("skipDefaultSchemaCreation")]
        public Output<bool?> SkipDefaultSchemaCreation { get; private set; } = null!;

        /// <summary>
        /// The solutions that the data store enrolls.
        /// Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`.
        /// </summary>
        [Output("solutionTypes")]
        public Output<ImmutableArray<string>> SolutionTypes { get; private set; } = null!;


        /// <summary>
        /// Create a DataStore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataStore(string name, DataStoreArgs args, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/dataStore:DataStore", name, args ?? new DataStoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataStore(string name, Input<string> id, DataStoreState? state = null, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/dataStore:DataStore", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataStore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataStore Get(string name, Input<string> id, DataStoreState? state = null, CustomResourceOptions? options = null)
        {
            return new DataStore(name, id, state, options);
        }
    }

    public sealed class DataStoreArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The content config of the data store.
        /// Possible values are: `NO_CONTENT`, `CONTENT_REQUIRED`, `PUBLIC_WEBSITE`.
        /// </summary>
        [Input("contentConfig", required: true)]
        public Input<string> ContentConfig { get; set; } = null!;

        /// <summary>
        /// If true, an advanced data store for site search will be created. If the
        /// data store is not configured as site search (GENERIC vertical and
        /// PUBLIC_WEBSITE contentConfig), this flag will be ignored.
        /// </summary>
        [Input("createAdvancedSiteSearch")]
        public Input<bool>? CreateAdvancedSiteSearch { get; set; }

        /// <summary>
        /// The unique id of the data store.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("dataStoreId", required: true)]
        public Input<string> DataStoreId { get; set; } = null!;

        /// <summary>
        /// The display name of the data store. This field must be a UTF-8 encoded
        /// string with a length limit of 128 characters.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Configuration for Document understanding and enrichment.
        /// Structure is documented below.
        /// </summary>
        [Input("documentProcessingConfig")]
        public Input<Inputs.DataStoreDocumentProcessingConfigArgs>? DocumentProcessingConfig { get; set; }

        /// <summary>
        /// The industry vertical that the data store registers.
        /// Possible values are: `GENERIC`, `MEDIA`.
        /// </summary>
        [Input("industryVertical", required: true)]
        public Input<string> IndustryVertical { get; set; } = null!;

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A boolean flag indicating whether to skip the default schema creation for
        /// the data store. Only enable this flag if you are certain that the default
        /// schema is incompatible with your use case.
        /// If set to true, you must manually create a schema for the data store
        /// before any documents can be ingested.
        /// This flag cannot be specified if `data_store.starting_schema` is
        /// specified.
        /// </summary>
        [Input("skipDefaultSchemaCreation")]
        public Input<bool>? SkipDefaultSchemaCreation { get; set; }

        [Input("solutionTypes")]
        private InputList<string>? _solutionTypes;

        /// <summary>
        /// The solutions that the data store enrolls.
        /// Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`.
        /// </summary>
        public InputList<string> SolutionTypes
        {
            get => _solutionTypes ?? (_solutionTypes = new InputList<string>());
            set => _solutionTypes = value;
        }

        public DataStoreArgs()
        {
        }
        public static new DataStoreArgs Empty => new DataStoreArgs();
    }

    public sealed class DataStoreState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The content config of the data store.
        /// Possible values are: `NO_CONTENT`, `CONTENT_REQUIRED`, `PUBLIC_WEBSITE`.
        /// </summary>
        [Input("contentConfig")]
        public Input<string>? ContentConfig { get; set; }

        /// <summary>
        /// If true, an advanced data store for site search will be created. If the
        /// data store is not configured as site search (GENERIC vertical and
        /// PUBLIC_WEBSITE contentConfig), this flag will be ignored.
        /// </summary>
        [Input("createAdvancedSiteSearch")]
        public Input<bool>? CreateAdvancedSiteSearch { get; set; }

        /// <summary>
        /// Timestamp when the DataStore was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The unique id of the data store.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("dataStoreId")]
        public Input<string>? DataStoreId { get; set; }

        /// <summary>
        /// The id of the default Schema associated with this data store.
        /// </summary>
        [Input("defaultSchemaId")]
        public Input<string>? DefaultSchemaId { get; set; }

        /// <summary>
        /// The display name of the data store. This field must be a UTF-8 encoded
        /// string with a length limit of 128 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Configuration for Document understanding and enrichment.
        /// Structure is documented below.
        /// </summary>
        [Input("documentProcessingConfig")]
        public Input<Inputs.DataStoreDocumentProcessingConfigGetArgs>? DocumentProcessingConfig { get; set; }

        /// <summary>
        /// The industry vertical that the data store registers.
        /// Possible values are: `GENERIC`, `MEDIA`.
        /// </summary>
        [Input("industryVertical")]
        public Input<string>? IndustryVertical { get; set; }

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The unique full resource name of the data store. Values are of the format
        /// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
        /// This field must be a UTF-8 encoded string with a length limit of 1024
        /// characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A boolean flag indicating whether to skip the default schema creation for
        /// the data store. Only enable this flag if you are certain that the default
        /// schema is incompatible with your use case.
        /// If set to true, you must manually create a schema for the data store
        /// before any documents can be ingested.
        /// This flag cannot be specified if `data_store.starting_schema` is
        /// specified.
        /// </summary>
        [Input("skipDefaultSchemaCreation")]
        public Input<bool>? SkipDefaultSchemaCreation { get; set; }

        [Input("solutionTypes")]
        private InputList<string>? _solutionTypes;

        /// <summary>
        /// The solutions that the data store enrolls.
        /// Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`.
        /// </summary>
        public InputList<string> SolutionTypes
        {
            get => _solutionTypes ?? (_solutionTypes = new InputList<string>());
            set => _solutionTypes = value;
        }

        public DataStoreState()
        {
        }
        public static new DataStoreState Empty => new DataStoreState();
    }
}
