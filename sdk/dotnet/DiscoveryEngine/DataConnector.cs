// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DiscoveryEngine
{
    /// <summary>
    /// DataConnector manages the connection to external data sources for all data stores grouped
    /// under a Collection. It's a singleton resource of Collection. The initialization is only
    /// supported through DataConnectorService.SetUpDataConnector method, which will create a new
    /// Collection and initialize its DataConnector.
    /// 
    /// To get more information about DataConnector, see:
    /// 
    /// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rpc/google.cloud.discoveryengine.v1alpha#dataconnectorservice)
    /// * How-to Guides
    ///     * [Introduction](https://cloud.google.com/agentspace/docs/introduction-to-connectors-and-data-stores)
    /// 
    /// ## Example Usage
    /// 
    /// ### Discoveryengine Dataconnector Jira Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var jira_basic = new Gcp.DiscoveryEngine.DataConnector("jira-basic", new()
    ///     {
    ///         Location = "global",
    ///         CollectionId = "collection-id",
    ///         CollectionDisplayName = "tf-test-dataconnector-jira",
    ///         DataSource = "jira",
    ///         Params = 
    ///         {
    ///             { "instance_id", "33db20a3-dc45-4305-a505-d70b68599840" },
    ///             { "instance_uri", "https://vaissptbots1.atlassian.net/" },
    ///             { "client_secret", "client-secret" },
    ///             { "client_id", "client-id" },
    ///             { "refresh_token", "fill-in-the-blank" },
    ///         },
    ///         RefreshInterval = "86400s",
    ///         Entities = new[]
    ///         {
    ///             new Gcp.DiscoveryEngine.Inputs.DataConnectorEntityArgs
    ///             {
    ///                 EntityName = "project",
    ///             },
    ///             new Gcp.DiscoveryEngine.Inputs.DataConnectorEntityArgs
    ///             {
    ///                 EntityName = "issue",
    ///             },
    ///             new Gcp.DiscoveryEngine.Inputs.DataConnectorEntityArgs
    ///             {
    ///                 EntityName = "attachment",
    ///             },
    ///             new Gcp.DiscoveryEngine.Inputs.DataConnectorEntityArgs
    ///             {
    ///                 EntityName = "comment",
    ///             },
    ///             new Gcp.DiscoveryEngine.Inputs.DataConnectorEntityArgs
    ///             {
    ///                 EntityName = "worklog",
    ///             },
    ///         },
    ///         StaticIpEnabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DataConnector can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/dataConnector`
    /// 
    /// * `{{project}}/{{location}}/{{collection_id}}`
    /// 
    /// * `{{location}}/{{collection_id}}`
    /// 
    /// When using the `pulumi import` command, DataConnector can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/dataConnector:DataConnector default projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/dataConnector
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/dataConnector:DataConnector default {{project}}/{{location}}/{{collection_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/dataConnector:DataConnector default {{location}}/{{collection_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:discoveryengine/dataConnector:DataConnector")]
    public partial class DataConnector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// State of the action connector. This reflects whether the action connector
        /// is initializing, active or has encountered errors. The possible value can be:
        /// 'STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'RUNNING', 'WARNING',
        /// 'INITIALIZATION_FAILED', 'UPDATING'.
        /// </summary>
        [Output("actionState")]
        public Output<string> ActionState { get; private set; } = null!;

        /// <summary>
        /// User actions that must be completed before the connector can start syncing data.
        /// The possible values can be: 'ALLOWLIST_STATIC_IP', 'ALLOWLIST_IN_SERVICE_ATTACHMENT'.
        /// </summary>
        [Output("blockingReasons")]
        public Output<ImmutableArray<string>> BlockingReasons { get; private set; } = null!;

        /// <summary>
        /// The display name of the Collection.
        /// Should be human readable, used to display collections in the Console
        /// Dashboard. UTF-8 encoded string with limit of 1024 characters.
        /// </summary>
        [Output("collectionDisplayName")]
        public Output<string> CollectionDisplayName { get; private set; } = null!;

        /// <summary>
        /// The ID to use for the Collection, which will become the final component
        /// of the Collection's resource name. A new Collection is created as
        /// part of the DataConnector setup. DataConnector is a singleton
        /// resource under Collection, managing all DataStores of the Collection.
        /// This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
        /// standard with a length limit of 63 characters. Otherwise, an
        /// INVALID_ARGUMENT error is returned.
        /// </summary>
        [Output("collectionId")]
        public Output<string> CollectionId { get; private set; } = null!;

        /// <summary>
        /// The type of connector. Each source can only map to one type.
        /// For example, salesforce, confluence and jira have THIRD_PARTY connector
        /// type. It is not mutable once set by system. The possible value can be:
        /// 'CONNECTOR_TYPE_UNSPECIFIED', 'THIRD_PARTY', 'GCP_FHIR', 'BIG_QUERY',
        /// 'GCS', 'GOOGLE_MAIL', 'GOOGLE_CALENDAR', 'GOOGLE_DRIVE',
        /// 'NATIVE_CLOUD_IDENTITY', 'THIRD_PARTY_FEDERATED', 'THIRD_PARTY_EUA', 'GCNV'.
        /// </summary>
        [Output("connectorType")]
        public Output<string> ConnectorType { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the DataConnector was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The name of the data source.
        /// Supported values: `Salesforce`, `Jira`, `Confluence`, `Bigquery`.
        /// </summary>
        [Output("dataSource")]
        public Output<string> DataSource { get; private set; } = null!;

        /// <summary>
        /// List of entities from the connected data source to ingest.
        /// Structure is documented below.
        /// </summary>
        [Output("entities")]
        public Output<ImmutableArray<Outputs.DataConnectorEntity>> Entities { get; private set; } = null!;

        /// <summary>
        /// The errors from initialization or from the latest connector run.
        /// Structure is documented below.
        /// </summary>
        [Output("errors")]
        public Output<ImmutableArray<Outputs.DataConnectorError>> Errors { get; private set; } = null!;

        /// <summary>
        /// Params needed to access the source in the format of json string.
        /// </summary>
        [Output("jsonParams")]
        public Output<string?> JsonParams { get; private set; } = null!;

        /// <summary>
        /// The KMS key to be used to protect the DataStores managed by this connector.
        /// Must be set for requests that need to comply with CMEK Org Policy
        /// protections.
        /// If this field is set and processed successfully, the DataStores created by
        /// this connector will be protected by the KMS key.
        /// </summary>
        [Output("kmsKeyName")]
        public Output<string?> KmsKeyName { get; private set; } = null!;

        /// <summary>
        /// For periodic connectors only, the last time a data sync was completed.
        /// </summary>
        [Output("lastSyncTime")]
        public Output<string> LastSyncTime { get; private set; } = null!;

        /// <summary>
        /// The most recent timestamp when this [DataConnector][] was paused,
        /// affecting all functionalities such as data synchronization.
        /// Pausing a connector has the following effects:
        /// - All functionalities, including data synchronization, are halted.
        /// - Any ongoing data synchronization job will be canceled.
        /// - No future data synchronization runs will be scheduled nor can be
        /// triggered.
        /// </summary>
        [Output("latestPauseTime")]
        public Output<string> LatestPauseTime { get; private set; } = null!;

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The full resource name of the Data Connector.
        /// Format: `projects/*/locations/*/collections/*/dataConnector`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Params needed to access the source in the format of String-to-String (Key, Value) pairs.
        /// </summary>
        [Output("params")]
        public Output<ImmutableDictionary<string, string>?> Params { get; private set; } = null!;

        /// <summary>
        /// The tenant project ID associated with private connectivity connectors.
        /// This project must be allowlisted by in order for the connector to function.
        /// </summary>
        [Output("privateConnectivityProjectId")]
        public Output<string> PrivateConnectivityProjectId { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The real-time sync state. The possible values can be:
        /// 'STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'RUNNING', 'WARNING',
        /// 'INITIALIZATION_FAILED', 'UPDATING'.
        /// </summary>
        [Output("realtimeState")]
        public Output<string> RealtimeState { get; private set; } = null!;

        /// <summary>
        /// The refresh interval for data sync. If duration is set to 0, the data will
        /// be synced in real time. The streaming feature is not supported yet. The
        /// minimum is 30 minutes and maximum is 7 days. When the refresh interval is
        /// set to the same value as the incremental refresh interval, incremental
        /// sync will be disabled.
        /// </summary>
        [Output("refreshInterval")]
        public Output<string> RefreshInterval { get; private set; } = null!;

        /// <summary>
        /// The state of connector. The possible value can be:
        /// 'STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'RUNNING', 'WARNING',
        /// 'INITIALIZATION_FAILED', 'UPDATING'.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The static IP addresses used by this connector.
        /// </summary>
        [Output("staticIpAddresses")]
        public Output<ImmutableArray<string>> StaticIpAddresses { get; private set; } = null!;

        /// <summary>
        /// Whether customer has enabled static IP addresses for this connector.
        /// </summary>
        [Output("staticIpEnabled")]
        public Output<bool?> StaticIpEnabled { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the DataConnector was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a DataConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataConnector(string name, DataConnectorArgs args, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/dataConnector:DataConnector", name, args ?? new DataConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataConnector(string name, Input<string> id, DataConnectorState? state = null, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/dataConnector:DataConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataConnector Get(string name, Input<string> id, DataConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new DataConnector(name, id, state, options);
        }
    }

    public sealed class DataConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The display name of the Collection.
        /// Should be human readable, used to display collections in the Console
        /// Dashboard. UTF-8 encoded string with limit of 1024 characters.
        /// </summary>
        [Input("collectionDisplayName", required: true)]
        public Input<string> CollectionDisplayName { get; set; } = null!;

        /// <summary>
        /// The ID to use for the Collection, which will become the final component
        /// of the Collection's resource name. A new Collection is created as
        /// part of the DataConnector setup. DataConnector is a singleton
        /// resource under Collection, managing all DataStores of the Collection.
        /// This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
        /// standard with a length limit of 63 characters. Otherwise, an
        /// INVALID_ARGUMENT error is returned.
        /// </summary>
        [Input("collectionId", required: true)]
        public Input<string> CollectionId { get; set; } = null!;

        /// <summary>
        /// The name of the data source.
        /// Supported values: `Salesforce`, `Jira`, `Confluence`, `Bigquery`.
        /// </summary>
        [Input("dataSource", required: true)]
        public Input<string> DataSource { get; set; } = null!;

        [Input("entities")]
        private InputList<Inputs.DataConnectorEntityArgs>? _entities;

        /// <summary>
        /// List of entities from the connected data source to ingest.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DataConnectorEntityArgs> Entities
        {
            get => _entities ?? (_entities = new InputList<Inputs.DataConnectorEntityArgs>());
            set => _entities = value;
        }

        /// <summary>
        /// Params needed to access the source in the format of json string.
        /// </summary>
        [Input("jsonParams")]
        public Input<string>? JsonParams { get; set; }

        /// <summary>
        /// The KMS key to be used to protect the DataStores managed by this connector.
        /// Must be set for requests that need to comply with CMEK Org Policy
        /// protections.
        /// If this field is set and processed successfully, the DataStores created by
        /// this connector will be protected by the KMS key.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("params")]
        private InputMap<string>? _params;

        /// <summary>
        /// Params needed to access the source in the format of String-to-String (Key, Value) pairs.
        /// </summary>
        public InputMap<string> Params
        {
            get => _params ?? (_params = new InputMap<string>());
            set => _params = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The refresh interval for data sync. If duration is set to 0, the data will
        /// be synced in real time. The streaming feature is not supported yet. The
        /// minimum is 30 minutes and maximum is 7 days. When the refresh interval is
        /// set to the same value as the incremental refresh interval, incremental
        /// sync will be disabled.
        /// </summary>
        [Input("refreshInterval", required: true)]
        public Input<string> RefreshInterval { get; set; } = null!;

        /// <summary>
        /// Whether customer has enabled static IP addresses for this connector.
        /// </summary>
        [Input("staticIpEnabled")]
        public Input<bool>? StaticIpEnabled { get; set; }

        public DataConnectorArgs()
        {
        }
        public static new DataConnectorArgs Empty => new DataConnectorArgs();
    }

    public sealed class DataConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// State of the action connector. This reflects whether the action connector
        /// is initializing, active or has encountered errors. The possible value can be:
        /// 'STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'RUNNING', 'WARNING',
        /// 'INITIALIZATION_FAILED', 'UPDATING'.
        /// </summary>
        [Input("actionState")]
        public Input<string>? ActionState { get; set; }

        [Input("blockingReasons")]
        private InputList<string>? _blockingReasons;

        /// <summary>
        /// User actions that must be completed before the connector can start syncing data.
        /// The possible values can be: 'ALLOWLIST_STATIC_IP', 'ALLOWLIST_IN_SERVICE_ATTACHMENT'.
        /// </summary>
        public InputList<string> BlockingReasons
        {
            get => _blockingReasons ?? (_blockingReasons = new InputList<string>());
            set => _blockingReasons = value;
        }

        /// <summary>
        /// The display name of the Collection.
        /// Should be human readable, used to display collections in the Console
        /// Dashboard. UTF-8 encoded string with limit of 1024 characters.
        /// </summary>
        [Input("collectionDisplayName")]
        public Input<string>? CollectionDisplayName { get; set; }

        /// <summary>
        /// The ID to use for the Collection, which will become the final component
        /// of the Collection's resource name. A new Collection is created as
        /// part of the DataConnector setup. DataConnector is a singleton
        /// resource under Collection, managing all DataStores of the Collection.
        /// This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
        /// standard with a length limit of 63 characters. Otherwise, an
        /// INVALID_ARGUMENT error is returned.
        /// </summary>
        [Input("collectionId")]
        public Input<string>? CollectionId { get; set; }

        /// <summary>
        /// The type of connector. Each source can only map to one type.
        /// For example, salesforce, confluence and jira have THIRD_PARTY connector
        /// type. It is not mutable once set by system. The possible value can be:
        /// 'CONNECTOR_TYPE_UNSPECIFIED', 'THIRD_PARTY', 'GCP_FHIR', 'BIG_QUERY',
        /// 'GCS', 'GOOGLE_MAIL', 'GOOGLE_CALENDAR', 'GOOGLE_DRIVE',
        /// 'NATIVE_CLOUD_IDENTITY', 'THIRD_PARTY_FEDERATED', 'THIRD_PARTY_EUA', 'GCNV'.
        /// </summary>
        [Input("connectorType")]
        public Input<string>? ConnectorType { get; set; }

        /// <summary>
        /// Timestamp when the DataConnector was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The name of the data source.
        /// Supported values: `Salesforce`, `Jira`, `Confluence`, `Bigquery`.
        /// </summary>
        [Input("dataSource")]
        public Input<string>? DataSource { get; set; }

        [Input("entities")]
        private InputList<Inputs.DataConnectorEntityGetArgs>? _entities;

        /// <summary>
        /// List of entities from the connected data source to ingest.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DataConnectorEntityGetArgs> Entities
        {
            get => _entities ?? (_entities = new InputList<Inputs.DataConnectorEntityGetArgs>());
            set => _entities = value;
        }

        [Input("errors")]
        private InputList<Inputs.DataConnectorErrorGetArgs>? _errors;

        /// <summary>
        /// The errors from initialization or from the latest connector run.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DataConnectorErrorGetArgs> Errors
        {
            get => _errors ?? (_errors = new InputList<Inputs.DataConnectorErrorGetArgs>());
            set => _errors = value;
        }

        /// <summary>
        /// Params needed to access the source in the format of json string.
        /// </summary>
        [Input("jsonParams")]
        public Input<string>? JsonParams { get; set; }

        /// <summary>
        /// The KMS key to be used to protect the DataStores managed by this connector.
        /// Must be set for requests that need to comply with CMEK Org Policy
        /// protections.
        /// If this field is set and processed successfully, the DataStores created by
        /// this connector will be protected by the KMS key.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        /// <summary>
        /// For periodic connectors only, the last time a data sync was completed.
        /// </summary>
        [Input("lastSyncTime")]
        public Input<string>? LastSyncTime { get; set; }

        /// <summary>
        /// The most recent timestamp when this [DataConnector][] was paused,
        /// affecting all functionalities such as data synchronization.
        /// Pausing a connector has the following effects:
        /// - All functionalities, including data synchronization, are halted.
        /// - Any ongoing data synchronization job will be canceled.
        /// - No future data synchronization runs will be scheduled nor can be
        /// triggered.
        /// </summary>
        [Input("latestPauseTime")]
        public Input<string>? LatestPauseTime { get; set; }

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The full resource name of the Data Connector.
        /// Format: `projects/*/locations/*/collections/*/dataConnector`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("params")]
        private InputMap<string>? _params;

        /// <summary>
        /// Params needed to access the source in the format of String-to-String (Key, Value) pairs.
        /// </summary>
        public InputMap<string> Params
        {
            get => _params ?? (_params = new InputMap<string>());
            set => _params = value;
        }

        /// <summary>
        /// The tenant project ID associated with private connectivity connectors.
        /// This project must be allowlisted by in order for the connector to function.
        /// </summary>
        [Input("privateConnectivityProjectId")]
        public Input<string>? PrivateConnectivityProjectId { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The real-time sync state. The possible values can be:
        /// 'STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'RUNNING', 'WARNING',
        /// 'INITIALIZATION_FAILED', 'UPDATING'.
        /// </summary>
        [Input("realtimeState")]
        public Input<string>? RealtimeState { get; set; }

        /// <summary>
        /// The refresh interval for data sync. If duration is set to 0, the data will
        /// be synced in real time. The streaming feature is not supported yet. The
        /// minimum is 30 minutes and maximum is 7 days. When the refresh interval is
        /// set to the same value as the incremental refresh interval, incremental
        /// sync will be disabled.
        /// </summary>
        [Input("refreshInterval")]
        public Input<string>? RefreshInterval { get; set; }

        /// <summary>
        /// The state of connector. The possible value can be:
        /// 'STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'RUNNING', 'WARNING',
        /// 'INITIALIZATION_FAILED', 'UPDATING'.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("staticIpAddresses")]
        private InputList<string>? _staticIpAddresses;

        /// <summary>
        /// The static IP addresses used by this connector.
        /// </summary>
        public InputList<string> StaticIpAddresses
        {
            get => _staticIpAddresses ?? (_staticIpAddresses = new InputList<string>());
            set => _staticIpAddresses = value;
        }

        /// <summary>
        /// Whether customer has enabled static IP addresses for this connector.
        /// </summary>
        [Input("staticIpEnabled")]
        public Input<bool>? StaticIpEnabled { get; set; }

        /// <summary>
        /// Timestamp when the DataConnector was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public DataConnectorState()
        {
        }
        public static new DataConnectorState Empty => new DataConnectorState();
    }
}
