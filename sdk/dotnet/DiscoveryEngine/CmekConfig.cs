// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DiscoveryEngine
{
    /// <summary>
    /// CmekConfig represents configurations used to enable CMEK data encryption with
    /// Cloud KMS keys.
    /// 
    /// To get more information about CmekConfig, see:
    /// 
    /// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.cmekConfigs)
    /// 
    /// ## Example Usage
    /// 
    /// ### Discoveryengine Cmekconfig Default
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var cryptoKey = new Gcp.Kms.CryptoKeyIAMMember("crypto_key", new()
    ///     {
    ///         CryptoKeyId = "kms-key-name",
    ///         Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-discoveryengine.iam.gserviceaccount.com",
    ///     });
    /// 
    ///     var @default = new Gcp.DiscoveryEngine.CmekConfig("default", new()
    ///     {
    ///         Location = "us",
    ///         CmekConfigId = "cmek-config-id",
    ///         KmsKey = "kms-key-name",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             cryptoKey,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// CmekConfig can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/cmekConfigs/{{cmek_config_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{cmek_config_id}}`
    /// 
    /// * `{{location}}/{{cmek_config_id}}`
    /// 
    /// When using the `pulumi import` command, CmekConfig can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/cmekConfig:CmekConfig default projects/{{project}}/locations/{{location}}/cmekConfigs/{{cmek_config_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/cmekConfig:CmekConfig default {{project}}/{{location}}/{{cmek_config_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/cmekConfig:CmekConfig default {{location}}/{{cmek_config_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:discoveryengine/cmekConfig:CmekConfig")]
    public partial class CmekConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique id of the cmek config.
        /// </summary>
        [Output("cmekConfigId")]
        public Output<string?> CmekConfigId { get; private set; } = null!;

        /// <summary>
        /// The default CmekConfig for the Customer.
        /// </summary>
        [Output("isDefault")]
        public Output<bool> IsDefault { get; private set; } = null!;

        /// <summary>
        /// KMS key resource name which will be used to encrypt resources
        /// `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
        /// </summary>
        [Output("kmsKey")]
        public Output<string> KmsKey { get; private set; } = null!;

        /// <summary>
        /// KMS key version resource name which will be used to encrypt resources
        /// `&lt;kms_key&gt;/cryptoKeyVersions/{keyVersion}`.
        /// </summary>
        [Output("kmsKeyVersion")]
        public Output<string> KmsKeyVersion { get; private set; } = null!;

        /// <summary>
        /// The timestamp of the last key rotation.
        /// </summary>
        [Output("lastRotationTimestampMicros")]
        public Output<int> LastRotationTimestampMicros { get; private set; } = null!;

        /// <summary>
        /// The geographic location where the CMEK config should reside. The value can
        /// only be one of "us" and "eu".
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The unique full resource name of the cmek config. Values are of the format
        /// `projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}`.
        /// This field must be a UTF-8 encoded string with a length limit of 1024
        /// characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether the NotebookLM Corpus is ready to be used.
        /// </summary>
        [Output("notebooklmState")]
        public Output<string> NotebooklmState { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Set the following CmekConfig as the default to be used for child resources
        /// if one is not specified. The default value is true.
        /// </summary>
        [Output("setDefault")]
        public Output<bool?> SetDefault { get; private set; } = null!;

        /// <summary>
        /// Single-regional CMEKs that are required for some VAIS features.
        /// Structure is documented below.
        /// </summary>
        [Output("singleRegionKeys")]
        public Output<ImmutableArray<Outputs.CmekConfigSingleRegionKey>> SingleRegionKeys { get; private set; } = null!;

        /// <summary>
        /// The state of the CmekConfig.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a CmekConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CmekConfig(string name, CmekConfigArgs args, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/cmekConfig:CmekConfig", name, args ?? new CmekConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CmekConfig(string name, Input<string> id, CmekConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/cmekConfig:CmekConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CmekConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CmekConfig Get(string name, Input<string> id, CmekConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new CmekConfig(name, id, state, options);
        }
    }

    public sealed class CmekConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique id of the cmek config.
        /// </summary>
        [Input("cmekConfigId")]
        public Input<string>? CmekConfigId { get; set; }

        /// <summary>
        /// KMS key resource name which will be used to encrypt resources
        /// `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
        /// </summary>
        [Input("kmsKey", required: true)]
        public Input<string> KmsKey { get; set; } = null!;

        /// <summary>
        /// The geographic location where the CMEK config should reside. The value can
        /// only be one of "us" and "eu".
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Set the following CmekConfig as the default to be used for child resources
        /// if one is not specified. The default value is true.
        /// </summary>
        [Input("setDefault")]
        public Input<bool>? SetDefault { get; set; }

        [Input("singleRegionKeys")]
        private InputList<Inputs.CmekConfigSingleRegionKeyArgs>? _singleRegionKeys;

        /// <summary>
        /// Single-regional CMEKs that are required for some VAIS features.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CmekConfigSingleRegionKeyArgs> SingleRegionKeys
        {
            get => _singleRegionKeys ?? (_singleRegionKeys = new InputList<Inputs.CmekConfigSingleRegionKeyArgs>());
            set => _singleRegionKeys = value;
        }

        public CmekConfigArgs()
        {
        }
        public static new CmekConfigArgs Empty => new CmekConfigArgs();
    }

    public sealed class CmekConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique id of the cmek config.
        /// </summary>
        [Input("cmekConfigId")]
        public Input<string>? CmekConfigId { get; set; }

        /// <summary>
        /// The default CmekConfig for the Customer.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// KMS key resource name which will be used to encrypt resources
        /// `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
        /// </summary>
        [Input("kmsKey")]
        public Input<string>? KmsKey { get; set; }

        /// <summary>
        /// KMS key version resource name which will be used to encrypt resources
        /// `&lt;kms_key&gt;/cryptoKeyVersions/{keyVersion}`.
        /// </summary>
        [Input("kmsKeyVersion")]
        public Input<string>? KmsKeyVersion { get; set; }

        /// <summary>
        /// The timestamp of the last key rotation.
        /// </summary>
        [Input("lastRotationTimestampMicros")]
        public Input<int>? LastRotationTimestampMicros { get; set; }

        /// <summary>
        /// The geographic location where the CMEK config should reside. The value can
        /// only be one of "us" and "eu".
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The unique full resource name of the cmek config. Values are of the format
        /// `projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}`.
        /// This field must be a UTF-8 encoded string with a length limit of 1024
        /// characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the NotebookLM Corpus is ready to be used.
        /// </summary>
        [Input("notebooklmState")]
        public Input<string>? NotebooklmState { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Set the following CmekConfig as the default to be used for child resources
        /// if one is not specified. The default value is true.
        /// </summary>
        [Input("setDefault")]
        public Input<bool>? SetDefault { get; set; }

        [Input("singleRegionKeys")]
        private InputList<Inputs.CmekConfigSingleRegionKeyGetArgs>? _singleRegionKeys;

        /// <summary>
        /// Single-regional CMEKs that are required for some VAIS features.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CmekConfigSingleRegionKeyGetArgs> SingleRegionKeys
        {
            get => _singleRegionKeys ?? (_singleRegionKeys = new InputList<Inputs.CmekConfigSingleRegionKeyGetArgs>());
            set => _singleRegionKeys = value;
        }

        /// <summary>
        /// The state of the CmekConfig.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public CmekConfigState()
        {
        }
        public static new CmekConfigState Empty => new CmekConfigState();
    }
}
