// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DiscoveryEngine.Inputs
{

    public sealed class ChatEngineChatEngineConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration to generate the Dialogflow agent that is associated to this Engine.
        /// Exactly one of `AgentCreationConfig` or `DialogflowAgentToLink` must be set.
        /// Structure is documented below.
        /// </summary>
        [Input("agentCreationConfig")]
        public Input<Inputs.ChatEngineChatEngineConfigAgentCreationConfigGetArgs>? AgentCreationConfig { get; set; }

        /// <summary>
        /// If the flag set to true, we allow the agent and engine are in
        /// different locations, otherwise the agent and engine are required to be
        /// in the same location. The flag is set to false by default.
        /// Note that the `AllowCrossRegion` are one-time consumed by and passed
        /// to EngineService.CreateEngine. It means they cannot be retrieved using
        /// EngineService.GetEngine or EngineService.ListEngines API after engine
        /// creation.
        /// </summary>
        [Input("allowCrossRegion")]
        public Input<bool>? AllowCrossRegion { get; set; }

        /// <summary>
        /// The resource name of an existing Dialogflow agent to link to this Chat Engine. Format: `projects/&lt;Project_ID&gt;/locations/&lt;Location_ID&gt;/agents/&lt;Agent_ID&gt;`.
        /// Exactly one of `AgentCreationConfig` or `DialogflowAgentToLink` must be set.
        /// </summary>
        [Input("dialogflowAgentToLink")]
        public Input<string>? DialogflowAgentToLink { get; set; }

        public ChatEngineChatEngineConfigGetArgs()
        {
        }
        public static new ChatEngineChatEngineConfigGetArgs Empty => new ChatEngineChatEngineConfigGetArgs();
    }
}
