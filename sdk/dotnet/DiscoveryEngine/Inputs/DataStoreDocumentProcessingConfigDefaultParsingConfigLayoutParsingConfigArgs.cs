// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DiscoveryEngine.Inputs
{

    public sealed class DataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If true, the LLM based annotation is added to the image during parsing.
        /// </summary>
        [Input("enableImageAnnotation")]
        public Input<bool>? EnableImageAnnotation { get; set; }

        /// <summary>
        /// If true, the LLM based annotation is added to the table during parsing.
        /// </summary>
        [Input("enableTableAnnotation")]
        public Input<bool>? EnableTableAnnotation { get; set; }

        [Input("excludeHtmlClasses")]
        private InputList<string>? _excludeHtmlClasses;

        /// <summary>
        /// List of HTML classes to exclude from the parsed content.
        /// </summary>
        public InputList<string> ExcludeHtmlClasses
        {
            get => _excludeHtmlClasses ?? (_excludeHtmlClasses = new InputList<string>());
            set => _excludeHtmlClasses = value;
        }

        [Input("excludeHtmlElements")]
        private InputList<string>? _excludeHtmlElements;

        /// <summary>
        /// List of HTML elements to exclude from the parsed content.
        /// </summary>
        public InputList<string> ExcludeHtmlElements
        {
            get => _excludeHtmlElements ?? (_excludeHtmlElements = new InputList<string>());
            set => _excludeHtmlElements = value;
        }

        [Input("excludeHtmlIds")]
        private InputList<string>? _excludeHtmlIds;

        /// <summary>
        /// List of HTML ids to exclude from the parsed content.
        /// </summary>
        public InputList<string> ExcludeHtmlIds
        {
            get => _excludeHtmlIds ?? (_excludeHtmlIds = new InputList<string>());
            set => _excludeHtmlIds = value;
        }

        [Input("structuredContentTypes")]
        private InputList<string>? _structuredContentTypes;

        /// <summary>
        /// Contains the required structure types to extract from the document. Supported values: `shareholder-structure`.
        /// </summary>
        public InputList<string> StructuredContentTypes
        {
            get => _structuredContentTypes ?? (_structuredContentTypes = new InputList<string>());
            set => _structuredContentTypes = value;
        }

        public DataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigArgs()
        {
        }
        public static new DataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigArgs Empty => new DataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigArgs();
    }
}
