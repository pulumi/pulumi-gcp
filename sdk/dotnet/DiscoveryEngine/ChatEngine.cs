// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DiscoveryEngine
{
    /// <summary>
    /// Vertex chat and Conversation Engine Chat type
    /// 
    /// To get more information about ChatEngine, see:
    /// 
    /// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.engines)
    /// * How-to Guides
    ///     * [Vertex AI Conversation](https://cloud.google.com/dialogflow/cx/docs/concept/generative)
    /// 
    /// ## Example Usage
    /// 
    /// ### Discoveryengine Chat Engine Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testDataStore = new Gcp.DiscoveryEngine.DataStore("test_data_store", new()
    ///     {
    ///         Location = "global",
    ///         DataStoreId = "data-store",
    ///         DisplayName = "Structured datastore",
    ///         IndustryVertical = "GENERIC",
    ///         ContentConfig = "NO_CONTENT",
    ///         SolutionTypes = new[]
    ///         {
    ///             "SOLUTION_TYPE_CHAT",
    ///         },
    ///     });
    /// 
    ///     var testDataStore2 = new Gcp.DiscoveryEngine.DataStore("test_data_store_2", new()
    ///     {
    ///         Location = testDataStore.Location,
    ///         DataStoreId = "data-store-2",
    ///         DisplayName = "Structured datastore 2",
    ///         IndustryVertical = "GENERIC",
    ///         ContentConfig = "NO_CONTENT",
    ///         SolutionTypes = new[]
    ///         {
    ///             "SOLUTION_TYPE_CHAT",
    ///         },
    ///     });
    /// 
    ///     var primary = new Gcp.DiscoveryEngine.ChatEngine("primary", new()
    ///     {
    ///         EngineId = "chat-engine-id",
    ///         CollectionId = "default_collection",
    ///         Location = testDataStore.Location,
    ///         DisplayName = "Chat engine",
    ///         IndustryVertical = "GENERIC",
    ///         DataStoreIds = new[]
    ///         {
    ///             testDataStore.DataStoreId,
    ///             testDataStore2.DataStoreId,
    ///         },
    ///         CommonConfig = new Gcp.DiscoveryEngine.Inputs.ChatEngineCommonConfigArgs
    ///         {
    ///             CompanyName = "test-company",
    ///         },
    ///         ChatEngineConfig = new Gcp.DiscoveryEngine.Inputs.ChatEngineChatEngineConfigArgs
    ///         {
    ///             AgentCreationConfig = new Gcp.DiscoveryEngine.Inputs.ChatEngineChatEngineConfigAgentCreationConfigArgs
    ///             {
    ///                 Business = "test business name",
    ///                 DefaultLanguageCode = "en",
    ///                 TimeZone = "America/Los_Angeles",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ChatEngine can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{collection_id}}/{{engine_id}}`
    /// 
    /// * `{{location}}/{{collection_id}}/{{engine_id}}`
    /// 
    /// When using the `pulumi import` command, ChatEngine can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/chatEngine:ChatEngine default projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/chatEngine:ChatEngine default {{project}}/{{location}}/{{collection_id}}/{{engine_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/chatEngine:ChatEngine default {{location}}/{{collection_id}}/{{engine_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:discoveryengine/chatEngine:ChatEngine")]
    public partial class ChatEngine : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configurations for a chat Engine.
        /// Structure is documented below.
        /// </summary>
        [Output("chatEngineConfig")]
        public Output<Outputs.ChatEngineChatEngineConfig> ChatEngineConfig { get; private set; } = null!;

        /// <summary>
        /// Additional information of the Chat Engine.
        /// Structure is documented below.
        /// </summary>
        [Output("chatEngineMetadatas")]
        public Output<ImmutableArray<Outputs.ChatEngineChatEngineMetadata>> ChatEngineMetadatas { get; private set; } = null!;

        /// <summary>
        /// The collection ID.
        /// </summary>
        [Output("collectionId")]
        public Output<string> CollectionId { get; private set; } = null!;

        /// <summary>
        /// Common config spec that specifies the metadata of the engine.
        /// </summary>
        [Output("commonConfig")]
        public Output<Outputs.ChatEngineCommonConfig?> CommonConfig { get; private set; } = null!;

        /// <summary>
        /// Timestamp the Engine was created at.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`. Adding or removing data stores will force recreation.
        /// </summary>
        [Output("dataStoreIds")]
        public Output<ImmutableArray<string>> DataStoreIds { get; private set; } = null!;

        /// <summary>
        /// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The ID to use for chat engine.
        /// </summary>
        [Output("engineId")]
        public Output<string> EngineId { get; private set; } = null!;

        /// <summary>
        /// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
        /// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
        /// </summary>
        [Output("industryVertical")]
        public Output<string?> IndustryVertical { get; private set; } = null!;

        /// <summary>
        /// Location.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The unique full resource name of the chat engine. Values are of the format
        /// `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
        /// This field must be a UTF-8 encoded string with a length limit of 1024
        /// characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Timestamp the Engine was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a ChatEngine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ChatEngine(string name, ChatEngineArgs args, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/chatEngine:ChatEngine", name, args ?? new ChatEngineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ChatEngine(string name, Input<string> id, ChatEngineState? state = null, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/chatEngine:ChatEngine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ChatEngine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ChatEngine Get(string name, Input<string> id, ChatEngineState? state = null, CustomResourceOptions? options = null)
        {
            return new ChatEngine(name, id, state, options);
        }
    }

    public sealed class ChatEngineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configurations for a chat Engine.
        /// Structure is documented below.
        /// </summary>
        [Input("chatEngineConfig", required: true)]
        public Input<Inputs.ChatEngineChatEngineConfigArgs> ChatEngineConfig { get; set; } = null!;

        /// <summary>
        /// The collection ID.
        /// </summary>
        [Input("collectionId", required: true)]
        public Input<string> CollectionId { get; set; } = null!;

        /// <summary>
        /// Common config spec that specifies the metadata of the engine.
        /// </summary>
        [Input("commonConfig")]
        public Input<Inputs.ChatEngineCommonConfigArgs>? CommonConfig { get; set; }

        [Input("dataStoreIds", required: true)]
        private InputList<string>? _dataStoreIds;

        /// <summary>
        /// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`. Adding or removing data stores will force recreation.
        /// </summary>
        public InputList<string> DataStoreIds
        {
            get => _dataStoreIds ?? (_dataStoreIds = new InputList<string>());
            set => _dataStoreIds = value;
        }

        /// <summary>
        /// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The ID to use for chat engine.
        /// </summary>
        [Input("engineId", required: true)]
        public Input<string> EngineId { get; set; } = null!;

        /// <summary>
        /// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
        /// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
        /// </summary>
        [Input("industryVertical")]
        public Input<string>? IndustryVertical { get; set; }

        /// <summary>
        /// Location.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public ChatEngineArgs()
        {
        }
        public static new ChatEngineArgs Empty => new ChatEngineArgs();
    }

    public sealed class ChatEngineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configurations for a chat Engine.
        /// Structure is documented below.
        /// </summary>
        [Input("chatEngineConfig")]
        public Input<Inputs.ChatEngineChatEngineConfigGetArgs>? ChatEngineConfig { get; set; }

        [Input("chatEngineMetadatas")]
        private InputList<Inputs.ChatEngineChatEngineMetadataGetArgs>? _chatEngineMetadatas;

        /// <summary>
        /// Additional information of the Chat Engine.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ChatEngineChatEngineMetadataGetArgs> ChatEngineMetadatas
        {
            get => _chatEngineMetadatas ?? (_chatEngineMetadatas = new InputList<Inputs.ChatEngineChatEngineMetadataGetArgs>());
            set => _chatEngineMetadatas = value;
        }

        /// <summary>
        /// The collection ID.
        /// </summary>
        [Input("collectionId")]
        public Input<string>? CollectionId { get; set; }

        /// <summary>
        /// Common config spec that specifies the metadata of the engine.
        /// </summary>
        [Input("commonConfig")]
        public Input<Inputs.ChatEngineCommonConfigGetArgs>? CommonConfig { get; set; }

        /// <summary>
        /// Timestamp the Engine was created at.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("dataStoreIds")]
        private InputList<string>? _dataStoreIds;

        /// <summary>
        /// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`. Adding or removing data stores will force recreation.
        /// </summary>
        public InputList<string> DataStoreIds
        {
            get => _dataStoreIds ?? (_dataStoreIds = new InputList<string>());
            set => _dataStoreIds = value;
        }

        /// <summary>
        /// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The ID to use for chat engine.
        /// </summary>
        [Input("engineId")]
        public Input<string>? EngineId { get; set; }

        /// <summary>
        /// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
        /// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
        /// </summary>
        [Input("industryVertical")]
        public Input<string>? IndustryVertical { get; set; }

        /// <summary>
        /// Location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The unique full resource name of the chat engine. Values are of the format
        /// `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
        /// This field must be a UTF-8 encoded string with a length limit of 1024
        /// characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Timestamp the Engine was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public ChatEngineState()
        {
        }
        public static new ChatEngineState Empty => new ChatEngineState();
    }
}
