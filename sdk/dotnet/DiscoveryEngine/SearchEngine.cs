// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DiscoveryEngine
{
    /// <summary>
    /// Vertex AI Search and Conversation can be used to create a search engine or a chat application by connecting it with a datastore
    /// 
    /// To get more information about SearchEngine, see:
    /// 
    /// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.engines)
    /// * How-to Guides
    ///     * [Create a Search Engine](https://cloud.google.com/generative-ai-app-builder/docs/create-engine-es)
    /// 
    /// ## Example Usage
    /// 
    /// ### Discoveryengine Searchengine Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basic = new Gcp.DiscoveryEngine.DataStore("basic", new()
    ///     {
    ///         Location = "global",
    ///         DataStoreId = "example-datastore-id",
    ///         DisplayName = "tf-test-structured-datastore",
    ///         IndustryVertical = "GENERIC",
    ///         ContentConfig = "NO_CONTENT",
    ///         SolutionTypes = new[]
    ///         {
    ///             "SOLUTION_TYPE_SEARCH",
    ///         },
    ///         CreateAdvancedSiteSearch = false,
    ///     });
    /// 
    ///     var basicSearchEngine = new Gcp.DiscoveryEngine.SearchEngine("basic", new()
    ///     {
    ///         EngineId = "example-engine-id",
    ///         CollectionId = "default_collection",
    ///         Location = basic.Location,
    ///         DisplayName = "Example Display Name",
    ///         DataStoreIds = new[]
    ///         {
    ///             basic.DataStoreId,
    ///         },
    ///         SearchEngineConfig = null,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Discoveryengine Searchengine Agentspace Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentspaceBasic = new Gcp.DiscoveryEngine.DataStore("agentspace_basic", new()
    ///     {
    ///         Location = "global",
    ///         DataStoreId = "example-datastore-id",
    ///         DisplayName = "tf-test-structured-datastore",
    ///         IndustryVertical = "GENERIC",
    ///         ContentConfig = "NO_CONTENT",
    ///         SolutionTypes = new[]
    ///         {
    ///             "SOLUTION_TYPE_SEARCH",
    ///         },
    ///         CreateAdvancedSiteSearch = false,
    ///     });
    /// 
    ///     var agentspaceBasicSearchEngine = new Gcp.DiscoveryEngine.SearchEngine("agentspace_basic", new()
    ///     {
    ///         EngineId = "example-engine-id",
    ///         CollectionId = "default_collection",
    ///         Location = agentspaceBasic.Location,
    ///         DisplayName = "tf-test-agentspace-search-engine",
    ///         DataStoreIds = new[]
    ///         {
    ///             agentspaceBasic.DataStoreId,
    ///         },
    ///         IndustryVertical = "GENERIC",
    ///         AppType = "APP_TYPE_INTRANET",
    ///         SearchEngineConfig = null,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SearchEngine can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{collection_id}}/{{engine_id}}`
    /// 
    /// * `{{location}}/{{collection_id}}/{{engine_id}}`
    /// 
    /// When using the `pulumi import` command, SearchEngine can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/searchEngine:SearchEngine default projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/searchEngine:SearchEngine default {{project}}/{{location}}/{{collection_id}}/{{engine_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/searchEngine:SearchEngine default {{location}}/{{collection_id}}/{{engine_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:discoveryengine/searchEngine:SearchEngine")]
    public partial class SearchEngine : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This is the application type this engine resource represents.
        /// The supported values: 'APP_TYPE_UNSPECIFIED', 'APP_TYPE_INTRANET'.
        /// </summary>
        [Output("appType")]
        public Output<string?> AppType { get; private set; } = null!;

        /// <summary>
        /// The collection ID.
        /// </summary>
        [Output("collectionId")]
        public Output<string> CollectionId { get; private set; } = null!;

        /// <summary>
        /// Common config spec that specifies the metadata of the engine.
        /// Structure is documented below.
        /// </summary>
        [Output("commonConfig")]
        public Output<Outputs.SearchEngineCommonConfig?> CommonConfig { get; private set; } = null!;

        /// <summary>
        /// Timestamp the Engine was created at.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at most one data store.
        /// </summary>
        [Output("dataStoreIds")]
        public Output<ImmutableArray<string>> DataStoreIds { get; private set; } = null!;

        /// <summary>
        /// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Unique ID to use for Search Engine App.
        /// </summary>
        [Output("engineId")]
        public Output<string> EngineId { get; private set; } = null!;

        /// <summary>
        /// A map of the feature config for the engine to opt in or opt out of features.
        /// </summary>
        [Output("features")]
        public Output<ImmutableDictionary<string, string>?> Features { get; private set; } = null!;

        /// <summary>
        /// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
        /// Default value is `GENERIC`.
        /// Possible values are: `GENERIC`, `MEDIA`, `HEALTHCARE_FHIR`.
        /// </summary>
        [Output("industryVertical")]
        public Output<string?> IndustryVertical { get; private set; } = null!;

        /// <summary>
        /// The KMS key to be used to protect this Engine at creation time.
        /// Must be set for requests that need to comply with CMEK Org Policy
        /// protections.
        /// If this field is set and processed successfully, the Engine will be
        /// protected by the KMS key, as indicated in the CmekConfig field.
        /// </summary>
        [Output("kmsKeyName")]
        public Output<string?> KmsKeyName { get; private set; } = null!;

        /// <summary>
        /// Location.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The unique full resource name of the search engine. Values are of the format
        /// `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
        /// This field must be a UTF-8 encoded string with a length limit of 1024
        /// characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Configurations for a Search Engine.
        /// Structure is documented below.
        /// </summary>
        [Output("searchEngineConfig")]
        public Output<Outputs.SearchEngineSearchEngineConfig> SearchEngineConfig { get; private set; } = null!;

        /// <summary>
        /// Timestamp the Engine was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a SearchEngine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SearchEngine(string name, SearchEngineArgs args, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/searchEngine:SearchEngine", name, args ?? new SearchEngineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SearchEngine(string name, Input<string> id, SearchEngineState? state = null, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/searchEngine:SearchEngine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SearchEngine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SearchEngine Get(string name, Input<string> id, SearchEngineState? state = null, CustomResourceOptions? options = null)
        {
            return new SearchEngine(name, id, state, options);
        }
    }

    public sealed class SearchEngineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is the application type this engine resource represents.
        /// The supported values: 'APP_TYPE_UNSPECIFIED', 'APP_TYPE_INTRANET'.
        /// </summary>
        [Input("appType")]
        public Input<string>? AppType { get; set; }

        /// <summary>
        /// The collection ID.
        /// </summary>
        [Input("collectionId", required: true)]
        public Input<string> CollectionId { get; set; } = null!;

        /// <summary>
        /// Common config spec that specifies the metadata of the engine.
        /// Structure is documented below.
        /// </summary>
        [Input("commonConfig")]
        public Input<Inputs.SearchEngineCommonConfigArgs>? CommonConfig { get; set; }

        [Input("dataStoreIds", required: true)]
        private InputList<string>? _dataStoreIds;

        /// <summary>
        /// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at most one data store.
        /// </summary>
        public InputList<string> DataStoreIds
        {
            get => _dataStoreIds ?? (_dataStoreIds = new InputList<string>());
            set => _dataStoreIds = value;
        }

        /// <summary>
        /// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Unique ID to use for Search Engine App.
        /// </summary>
        [Input("engineId", required: true)]
        public Input<string> EngineId { get; set; } = null!;

        [Input("features")]
        private InputMap<string>? _features;

        /// <summary>
        /// A map of the feature config for the engine to opt in or opt out of features.
        /// </summary>
        public InputMap<string> Features
        {
            get => _features ?? (_features = new InputMap<string>());
            set => _features = value;
        }

        /// <summary>
        /// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
        /// Default value is `GENERIC`.
        /// Possible values are: `GENERIC`, `MEDIA`, `HEALTHCARE_FHIR`.
        /// </summary>
        [Input("industryVertical")]
        public Input<string>? IndustryVertical { get; set; }

        /// <summary>
        /// The KMS key to be used to protect this Engine at creation time.
        /// Must be set for requests that need to comply with CMEK Org Policy
        /// protections.
        /// If this field is set and processed successfully, the Engine will be
        /// protected by the KMS key, as indicated in the CmekConfig field.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        /// <summary>
        /// Location.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Configurations for a Search Engine.
        /// Structure is documented below.
        /// </summary>
        [Input("searchEngineConfig", required: true)]
        public Input<Inputs.SearchEngineSearchEngineConfigArgs> SearchEngineConfig { get; set; } = null!;

        public SearchEngineArgs()
        {
        }
        public static new SearchEngineArgs Empty => new SearchEngineArgs();
    }

    public sealed class SearchEngineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is the application type this engine resource represents.
        /// The supported values: 'APP_TYPE_UNSPECIFIED', 'APP_TYPE_INTRANET'.
        /// </summary>
        [Input("appType")]
        public Input<string>? AppType { get; set; }

        /// <summary>
        /// The collection ID.
        /// </summary>
        [Input("collectionId")]
        public Input<string>? CollectionId { get; set; }

        /// <summary>
        /// Common config spec that specifies the metadata of the engine.
        /// Structure is documented below.
        /// </summary>
        [Input("commonConfig")]
        public Input<Inputs.SearchEngineCommonConfigGetArgs>? CommonConfig { get; set; }

        /// <summary>
        /// Timestamp the Engine was created at.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("dataStoreIds")]
        private InputList<string>? _dataStoreIds;

        /// <summary>
        /// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at most one data store.
        /// </summary>
        public InputList<string> DataStoreIds
        {
            get => _dataStoreIds ?? (_dataStoreIds = new InputList<string>());
            set => _dataStoreIds = value;
        }

        /// <summary>
        /// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Unique ID to use for Search Engine App.
        /// </summary>
        [Input("engineId")]
        public Input<string>? EngineId { get; set; }

        [Input("features")]
        private InputMap<string>? _features;

        /// <summary>
        /// A map of the feature config for the engine to opt in or opt out of features.
        /// </summary>
        public InputMap<string> Features
        {
            get => _features ?? (_features = new InputMap<string>());
            set => _features = value;
        }

        /// <summary>
        /// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
        /// Default value is `GENERIC`.
        /// Possible values are: `GENERIC`, `MEDIA`, `HEALTHCARE_FHIR`.
        /// </summary>
        [Input("industryVertical")]
        public Input<string>? IndustryVertical { get; set; }

        /// <summary>
        /// The KMS key to be used to protect this Engine at creation time.
        /// Must be set for requests that need to comply with CMEK Org Policy
        /// protections.
        /// If this field is set and processed successfully, the Engine will be
        /// protected by the KMS key, as indicated in the CmekConfig field.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        /// <summary>
        /// Location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The unique full resource name of the search engine. Values are of the format
        /// `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
        /// This field must be a UTF-8 encoded string with a length limit of 1024
        /// characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Configurations for a Search Engine.
        /// Structure is documented below.
        /// </summary>
        [Input("searchEngineConfig")]
        public Input<Inputs.SearchEngineSearchEngineConfigGetArgs>? SearchEngineConfig { get; set; }

        /// <summary>
        /// Timestamp the Engine was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public SearchEngineState()
        {
        }
        public static new SearchEngineState Empty => new SearchEngineState();
    }
}
