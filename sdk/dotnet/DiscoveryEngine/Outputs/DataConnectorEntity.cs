// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DiscoveryEngine.Outputs
{

    [OutputType]
    public sealed class DataConnectorEntity
    {
        /// <summary>
        /// (Output)
        /// The full resource name of the associated data store for the source
        /// entity.
        /// Format: `projects/*/locations/*/collections/*/dataStores/*`.
        /// When the connector is initialized by the DataConnectorService.SetUpDataConnector
        /// method, a DataStore is automatically created for each source entity.
        /// </summary>
        public readonly string? DataStore;
        /// <summary>
        /// The name of the entity. Supported values by data source:
        /// * Salesforce: `Lead`, `Opportunity`, `Contact`, `Account`, `Case`, `Contract`, `Campaign`
        /// * Jira: project, issue, attachment, comment, worklog
        /// * Confluence: `Content`, `Space`
        /// </summary>
        public readonly string? EntityName;
        /// <summary>
        /// Attributes for indexing.
        /// Key: Field name.
        /// Value: The key property to map a field to, such as `title`, and
        /// `description`. Supported key properties:
        /// </summary>
        public readonly ImmutableDictionary<string, string>? KeyPropertyMappings;
        /// <summary>
        /// The parameters for the entity to facilitate data ingestion.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Params;

        [OutputConstructor]
        private DataConnectorEntity(
            string? dataStore,

            string? entityName,

            ImmutableDictionary<string, string>? keyPropertyMappings,

            ImmutableDictionary<string, string>? @params)
        {
            DataStore = dataStore;
            EntityName = entityName;
            KeyPropertyMappings = keyPropertyMappings;
            Params = @params;
        }
    }
}
