// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DiscoveryEngine
{
    /// <summary>
    /// License Configuration.
    /// 
    /// To get more information about LicenseConfig, see:
    /// 
    /// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.licenseConfigs)
    /// 
    /// ## Example Usage
    /// 
    /// ### Discoveryengine Licenseconfig Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basic = new Gcp.DiscoveryEngine.LicenseConfig("basic", new()
    ///     {
    ///         Location = "global",
    ///         LicenseConfigId = "license-config-id",
    ///         LicenseCount = 50,
    ///         SubscriptionTier = "SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT",
    ///         StartDate = new Gcp.DiscoveryEngine.Inputs.LicenseConfigStartDateArgs
    ///         {
    ///             Year = 2099,
    ///             Month = 1,
    ///             Day = 1,
    ///         },
    ///         EndDate = new Gcp.DiscoveryEngine.Inputs.LicenseConfigEndDateArgs
    ///         {
    ///             Year = 2100,
    ///             Month = 1,
    ///             Day = 1,
    ///         },
    ///         SubscriptionTerm = "SUBSCRIPTION_TERM_ONE_YEAR",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// LicenseConfig can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/licenseConfigs/{{license_config_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{license_config_id}}`
    /// 
    /// * `{{location}}/{{license_config_id}}`
    /// 
    /// When using the `pulumi import` command, LicenseConfig can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/licenseConfig:LicenseConfig default projects/{{project}}/locations/{{location}}/licenseConfigs/{{license_config_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/licenseConfig:LicenseConfig default {{project}}/{{location}}/{{license_config_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/licenseConfig:LicenseConfig default {{location}}/{{license_config_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:discoveryengine/licenseConfig:LicenseConfig")]
    public partial class LicenseConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the license config should be auto renewed when it reaches the end date.
        /// </summary>
        [Output("autoRenew")]
        public Output<bool?> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// The planned end date.
        /// Structure is documented below.
        /// </summary>
        [Output("endDate")]
        public Output<Outputs.LicenseConfigEndDate?> EndDate { get; private set; } = null!;

        /// <summary>
        /// Whether the license config is for free trial.
        /// </summary>
        [Output("freeTrial")]
        public Output<bool?> FreeTrial { get; private set; } = null!;

        /// <summary>
        /// The unique id of the license config.
        /// </summary>
        [Output("licenseConfigId")]
        public Output<string> LicenseConfigId { get; private set; } = null!;

        /// <summary>
        /// Number of licenses purchased.
        /// </summary>
        [Output("licenseCount")]
        public Output<int> LicenseCount { get; private set; } = null!;

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The unique full resource name of the license config. Values are of the format
        /// `projects/{project}/locations/{location}/licenseConfigs/{license_config}`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The start date.
        /// Structure is documented below.
        /// </summary>
        [Output("startDate")]
        public Output<Outputs.LicenseConfigStartDate> StartDate { get; private set; } = null!;

        /// <summary>
        /// Subscription term.
        /// Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
        /// </summary>
        [Output("subscriptionTerm")]
        public Output<string> SubscriptionTerm { get; private set; } = null!;

        /// <summary>
        /// Subscription tier information for the license config.
        /// Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
        /// </summary>
        [Output("subscriptionTier")]
        public Output<string> SubscriptionTier { get; private set; } = null!;


        /// <summary>
        /// Create a LicenseConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LicenseConfig(string name, LicenseConfigArgs args, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/licenseConfig:LicenseConfig", name, args ?? new LicenseConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LicenseConfig(string name, Input<string> id, LicenseConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/licenseConfig:LicenseConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LicenseConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LicenseConfig Get(string name, Input<string> id, LicenseConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new LicenseConfig(name, id, state, options);
        }
    }

    public sealed class LicenseConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the license config should be auto renewed when it reaches the end date.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The planned end date.
        /// Structure is documented below.
        /// </summary>
        [Input("endDate")]
        public Input<Inputs.LicenseConfigEndDateArgs>? EndDate { get; set; }

        /// <summary>
        /// Whether the license config is for free trial.
        /// </summary>
        [Input("freeTrial")]
        public Input<bool>? FreeTrial { get; set; }

        /// <summary>
        /// The unique id of the license config.
        /// </summary>
        [Input("licenseConfigId", required: true)]
        public Input<string> LicenseConfigId { get; set; } = null!;

        /// <summary>
        /// Number of licenses purchased.
        /// </summary>
        [Input("licenseCount", required: true)]
        public Input<int> LicenseCount { get; set; } = null!;

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The start date.
        /// Structure is documented below.
        /// </summary>
        [Input("startDate", required: true)]
        public Input<Inputs.LicenseConfigStartDateArgs> StartDate { get; set; } = null!;

        /// <summary>
        /// Subscription term.
        /// Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
        /// </summary>
        [Input("subscriptionTerm", required: true)]
        public Input<string> SubscriptionTerm { get; set; } = null!;

        /// <summary>
        /// Subscription tier information for the license config.
        /// Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
        /// </summary>
        [Input("subscriptionTier", required: true)]
        public Input<string> SubscriptionTier { get; set; } = null!;

        public LicenseConfigArgs()
        {
        }
        public static new LicenseConfigArgs Empty => new LicenseConfigArgs();
    }

    public sealed class LicenseConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the license config should be auto renewed when it reaches the end date.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The planned end date.
        /// Structure is documented below.
        /// </summary>
        [Input("endDate")]
        public Input<Inputs.LicenseConfigEndDateGetArgs>? EndDate { get; set; }

        /// <summary>
        /// Whether the license config is for free trial.
        /// </summary>
        [Input("freeTrial")]
        public Input<bool>? FreeTrial { get; set; }

        /// <summary>
        /// The unique id of the license config.
        /// </summary>
        [Input("licenseConfigId")]
        public Input<string>? LicenseConfigId { get; set; }

        /// <summary>
        /// Number of licenses purchased.
        /// </summary>
        [Input("licenseCount")]
        public Input<int>? LicenseCount { get; set; }

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The unique full resource name of the license config. Values are of the format
        /// `projects/{project}/locations/{location}/licenseConfigs/{license_config}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The start date.
        /// Structure is documented below.
        /// </summary>
        [Input("startDate")]
        public Input<Inputs.LicenseConfigStartDateGetArgs>? StartDate { get; set; }

        /// <summary>
        /// Subscription term.
        /// Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
        /// </summary>
        [Input("subscriptionTerm")]
        public Input<string>? SubscriptionTerm { get; set; }

        /// <summary>
        /// Subscription tier information for the license config.
        /// Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
        /// </summary>
        [Input("subscriptionTier")]
        public Input<string>? SubscriptionTier { get; set; }

        public LicenseConfigState()
        {
        }
        public static new LicenseConfigState Empty => new LicenseConfigState();
    }
}
