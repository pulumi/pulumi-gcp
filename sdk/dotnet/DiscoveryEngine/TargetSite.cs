// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DiscoveryEngine
{
    /// <summary>
    /// TargetSite represents a URI pattern that the users want to confine their
    /// search.
    /// 
    /// To get more information about TargetSite, see:
    /// 
    /// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.dataStores.siteSearchEngine.targetSites)
    /// 
    /// ## Example Usage
    /// 
    /// ### Discoveryengine Targetsite Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicDataStore = new Gcp.DiscoveryEngine.DataStore("basic", new()
    ///     {
    ///         Location = "global",
    ///         DataStoreId = "data-store-id",
    ///         DisplayName = "tf-test-basic-site-search-datastore",
    ///         IndustryVertical = "GENERIC",
    ///         ContentConfig = "PUBLIC_WEBSITE",
    ///         SolutionTypes = new[]
    ///         {
    ///             "SOLUTION_TYPE_SEARCH",
    ///         },
    ///         CreateAdvancedSiteSearch = false,
    ///         SkipDefaultSchemaCreation = false,
    ///     });
    /// 
    ///     var basic = new Gcp.DiscoveryEngine.TargetSite("basic", new()
    ///     {
    ///         Location = basicDataStore.Location,
    ///         DataStoreId = basicDataStore.DataStoreId,
    ///         ProvidedUriPattern = "http://cloud.google.com/docs/*",
    ///         Type = "INCLUDE",
    ///         ExactMatch = false,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Discoveryengine Targetsite Advanced
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var advancedDataStore = new Gcp.DiscoveryEngine.DataStore("advanced", new()
    ///     {
    ///         Location = "global",
    ///         DataStoreId = "data-store-id",
    ///         DisplayName = "tf-test-advanced-site-search-datastore",
    ///         IndustryVertical = "GENERIC",
    ///         ContentConfig = "PUBLIC_WEBSITE",
    ///         SolutionTypes = new[]
    ///         {
    ///             "SOLUTION_TYPE_SEARCH",
    ///         },
    ///         CreateAdvancedSiteSearch = true,
    ///         SkipDefaultSchemaCreation = false,
    ///     });
    /// 
    ///     var advanced = new Gcp.DiscoveryEngine.TargetSite("advanced", new()
    ///     {
    ///         Location = advancedDataStore.Location,
    ///         DataStoreId = advancedDataStore.DataStoreId,
    ///         ProvidedUriPattern = "http://cloud.google.com/docs/*",
    ///         Type = "INCLUDE",
    ///         ExactMatch = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// TargetSite can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/collections/default_collection/dataStores/{{data_store_id}}/siteSearchEngine/targetSites/{{target_site_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{data_store_id}}/{{target_site_id}}`
    /// 
    /// * `{{location}}/{{data_store_id}}/{{target_site_id}}`
    /// 
    /// When using the `pulumi import` command, TargetSite can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/targetSite:TargetSite default projects/{{project}}/locations/{{location}}/collections/default_collection/dataStores/{{data_store_id}}/siteSearchEngine/targetSites/{{target_site_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/targetSite:TargetSite default {{project}}/{{location}}/{{data_store_id}}/{{target_site_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/targetSite:TargetSite default {{location}}/{{data_store_id}}/{{target_site_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:discoveryengine/targetSite:TargetSite")]
    public partial class TargetSite : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique id of the data store.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("dataStoreId")]
        public Output<string> DataStoreId { get; private set; } = null!;

        /// <summary>
        /// If set to false, a uri_pattern is generated to include all pages whose
        /// address contains the provided_uri_pattern. If set to true, an uri_pattern
        /// is generated to try to be an exact match of the provided_uri_pattern or
        /// just the specific page if the provided_uri_pattern is a specific one.
        /// provided_uri_pattern is always normalized to generate the URI pattern to
        /// be used by the search engine.
        /// </summary>
        [Output("exactMatch")]
        public Output<bool?> ExactMatch { get; private set; } = null!;

        /// <summary>
        /// Site search indexing failure reasons.
        /// Structure is documented below.
        /// </summary>
        [Output("failureReasons")]
        public Output<ImmutableArray<Outputs.TargetSiteFailureReason>> FailureReasons { get; private set; } = null!;

        /// <summary>
        /// This is system-generated based on the `provided_uri_pattern`.
        /// </summary>
        [Output("generatedUriPattern")]
        public Output<string> GeneratedUriPattern { get; private set; } = null!;

        /// <summary>
        /// The indexing status.
        /// </summary>
        [Output("indexingStatus")]
        public Output<string> IndexingStatus { get; private set; } = null!;

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The unique full resource name of the target site. Values are of the format
        /// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}`.
        /// This field must be a UTF-8 encoded string with a length limit of 1024
        /// characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The user provided URI pattern from which the `generated_uri_pattern` is
        /// generated.
        /// </summary>
        [Output("providedUriPattern")]
        public Output<string> ProvidedUriPattern { get; private set; } = null!;

        /// <summary>
        /// Root domain of the `provided_uri_pattern`.
        /// </summary>
        [Output("rootDomainUri")]
        public Output<string> RootDomainUri { get; private set; } = null!;

        /// <summary>
        /// Site ownership and validity verification status.
        /// Structure is documented below.
        /// </summary>
        [Output("siteVerificationInfos")]
        public Output<ImmutableArray<Outputs.TargetSiteSiteVerificationInfo>> SiteVerificationInfos { get; private set; } = null!;

        /// <summary>
        /// The unique id of the target site.
        /// </summary>
        [Output("targetSiteId")]
        public Output<string> TargetSiteId { get; private set; } = null!;

        /// <summary>
        /// The possible target site types.
        /// Possible values are: `INCLUDE`, `EXCLUDE`.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// The target site's last updated time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a TargetSite resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TargetSite(string name, TargetSiteArgs args, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/targetSite:TargetSite", name, args ?? new TargetSiteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TargetSite(string name, Input<string> id, TargetSiteState? state = null, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/targetSite:TargetSite", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TargetSite resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TargetSite Get(string name, Input<string> id, TargetSiteState? state = null, CustomResourceOptions? options = null)
        {
            return new TargetSite(name, id, state, options);
        }
    }

    public sealed class TargetSiteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique id of the data store.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("dataStoreId", required: true)]
        public Input<string> DataStoreId { get; set; } = null!;

        /// <summary>
        /// If set to false, a uri_pattern is generated to include all pages whose
        /// address contains the provided_uri_pattern. If set to true, an uri_pattern
        /// is generated to try to be an exact match of the provided_uri_pattern or
        /// just the specific page if the provided_uri_pattern is a specific one.
        /// provided_uri_pattern is always normalized to generate the URI pattern to
        /// be used by the search engine.
        /// </summary>
        [Input("exactMatch")]
        public Input<bool>? ExactMatch { get; set; }

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The user provided URI pattern from which the `generated_uri_pattern` is
        /// generated.
        /// </summary>
        [Input("providedUriPattern", required: true)]
        public Input<string> ProvidedUriPattern { get; set; } = null!;

        /// <summary>
        /// The possible target site types.
        /// Possible values are: `INCLUDE`, `EXCLUDE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public TargetSiteArgs()
        {
        }
        public static new TargetSiteArgs Empty => new TargetSiteArgs();
    }

    public sealed class TargetSiteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique id of the data store.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("dataStoreId")]
        public Input<string>? DataStoreId { get; set; }

        /// <summary>
        /// If set to false, a uri_pattern is generated to include all pages whose
        /// address contains the provided_uri_pattern. If set to true, an uri_pattern
        /// is generated to try to be an exact match of the provided_uri_pattern or
        /// just the specific page if the provided_uri_pattern is a specific one.
        /// provided_uri_pattern is always normalized to generate the URI pattern to
        /// be used by the search engine.
        /// </summary>
        [Input("exactMatch")]
        public Input<bool>? ExactMatch { get; set; }

        [Input("failureReasons")]
        private InputList<Inputs.TargetSiteFailureReasonGetArgs>? _failureReasons;

        /// <summary>
        /// Site search indexing failure reasons.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.TargetSiteFailureReasonGetArgs> FailureReasons
        {
            get => _failureReasons ?? (_failureReasons = new InputList<Inputs.TargetSiteFailureReasonGetArgs>());
            set => _failureReasons = value;
        }

        /// <summary>
        /// This is system-generated based on the `provided_uri_pattern`.
        /// </summary>
        [Input("generatedUriPattern")]
        public Input<string>? GeneratedUriPattern { get; set; }

        /// <summary>
        /// The indexing status.
        /// </summary>
        [Input("indexingStatus")]
        public Input<string>? IndexingStatus { get; set; }

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The unique full resource name of the target site. Values are of the format
        /// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}`.
        /// This field must be a UTF-8 encoded string with a length limit of 1024
        /// characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The user provided URI pattern from which the `generated_uri_pattern` is
        /// generated.
        /// </summary>
        [Input("providedUriPattern")]
        public Input<string>? ProvidedUriPattern { get; set; }

        /// <summary>
        /// Root domain of the `provided_uri_pattern`.
        /// </summary>
        [Input("rootDomainUri")]
        public Input<string>? RootDomainUri { get; set; }

        [Input("siteVerificationInfos")]
        private InputList<Inputs.TargetSiteSiteVerificationInfoGetArgs>? _siteVerificationInfos;

        /// <summary>
        /// Site ownership and validity verification status.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.TargetSiteSiteVerificationInfoGetArgs> SiteVerificationInfos
        {
            get => _siteVerificationInfos ?? (_siteVerificationInfos = new InputList<Inputs.TargetSiteSiteVerificationInfoGetArgs>());
            set => _siteVerificationInfos = value;
        }

        /// <summary>
        /// The unique id of the target site.
        /// </summary>
        [Input("targetSiteId")]
        public Input<string>? TargetSiteId { get; set; }

        /// <summary>
        /// The possible target site types.
        /// Possible values are: `INCLUDE`, `EXCLUDE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The target site's last updated time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public TargetSiteState()
        {
        }
        public static new TargetSiteState Empty => new TargetSiteState();
    }
}
