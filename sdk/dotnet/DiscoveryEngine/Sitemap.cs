// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DiscoveryEngine
{
    /// <summary>
    /// Sitemap is a file where you provide information about the pages, videos, and
    /// other files on your site, and the relationships between them.
    /// 
    /// To get more information about Sitemap, see:
    /// 
    /// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.dataStores.siteSearchEngine.sitemaps)
    /// 
    /// ## Example Usage
    /// 
    /// ### Discoveryengine Sitemap Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var advanced = new Gcp.DiscoveryEngine.DataStore("advanced", new()
    ///     {
    ///         Location = "global",
    ///         DataStoreId = "data-store-id",
    ///         DisplayName = "tf-test-advanced-site-search-datastore",
    ///         IndustryVertical = "GENERIC",
    ///         ContentConfig = "PUBLIC_WEBSITE",
    ///         SolutionTypes = new[]
    ///         {
    ///             "SOLUTION_TYPE_SEARCH",
    ///         },
    ///         CreateAdvancedSiteSearch = true,
    ///         SkipDefaultSchemaCreation = false,
    ///     });
    /// 
    ///     var basic = new Gcp.DiscoveryEngine.Sitemap("basic", new()
    ///     {
    ///         Location = advanced.Location,
    ///         DataStoreId = advanced.DataStoreId,
    ///         Uri = "https://www.test.com/sitemap.xml",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Sitemap can be imported using any of these accepted formats:
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, Sitemap can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:discoveryengine/sitemap:Sitemap default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:discoveryengine/sitemap:Sitemap")]
    public partial class Sitemap : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timestamp when the sitemap was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The unique id of the data store.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("dataStoreId")]
        public Output<string> DataStoreId { get; private set; } = null!;

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The unique full resource name of the sitemap. Values are of the format
        /// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/sitemaps/{sitemap_id}`.
        /// This field must be a UTF-8 encoded string with a length limit of 1024
        /// characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The unique id of the sitemap.
        /// </summary>
        [Output("sitemapId")]
        public Output<string> SitemapId { get; private set; } = null!;

        /// <summary>
        /// Public URI for the sitemap, e.g. "www.example.com/sitemap.xml".
        /// </summary>
        [Output("uri")]
        public Output<string?> Uri { get; private set; } = null!;


        /// <summary>
        /// Create a Sitemap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Sitemap(string name, SitemapArgs args, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/sitemap:Sitemap", name, args ?? new SitemapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Sitemap(string name, Input<string> id, SitemapState? state = null, CustomResourceOptions? options = null)
            : base("gcp:discoveryengine/sitemap:Sitemap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Sitemap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Sitemap Get(string name, Input<string> id, SitemapState? state = null, CustomResourceOptions? options = null)
        {
            return new Sitemap(name, id, state, options);
        }
    }

    public sealed class SitemapArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique id of the data store.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("dataStoreId", required: true)]
        public Input<string> DataStoreId { get; set; } = null!;

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Public URI for the sitemap, e.g. "www.example.com/sitemap.xml".
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public SitemapArgs()
        {
        }
        public static new SitemapArgs Empty => new SitemapArgs();
    }

    public sealed class SitemapState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp when the sitemap was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The unique id of the data store.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("dataStoreId")]
        public Input<string>? DataStoreId { get; set; }

        /// <summary>
        /// The geographic location where the data store should reside. The value can
        /// only be one of "global", "us" and "eu".
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The unique full resource name of the sitemap. Values are of the format
        /// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/sitemaps/{sitemap_id}`.
        /// This field must be a UTF-8 encoded string with a length limit of 1024
        /// characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The unique id of the sitemap.
        /// </summary>
        [Input("sitemapId")]
        public Input<string>? SitemapId { get; set; }

        /// <summary>
        /// Public URI for the sitemap, e.g. "www.example.com/sitemap.xml".
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public SitemapState()
        {
        }
        public static new SitemapState Empty => new SitemapState();
    }
}
