// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.OrgPolicy
{
    /// <summary>
    /// An organization policy gives you programmatic control over your organization's cloud resources.  Using Organization Policies, you will be able to configure constraints across your entire resource hierarchy.
    /// 
    /// For more information, see:
    /// * [Understanding Org Policy concepts](https://cloud.google.com/resource-manager/docs/organization-policy/overview)
    /// * [The resource hierarchy](https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy)
    /// * [All valid constraints](https://cloud.google.com/resource-manager/docs/organization-policy/org-policy-constraints)
    /// ## Example Usage
    /// 
    /// ### Enforce_policy
    /// A test of an enforce orgpolicy policy for a project
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basic = new Gcp.Organizations.Project("basic", new()
    ///     {
    ///         ProjectId = "id",
    ///         Name = "id",
    ///         OrgId = "123456789",
    ///     });
    /// 
    ///     var primary = new Gcp.OrgPolicy.Policy("primary", new()
    ///     {
    ///         Name = basic.Name.Apply(name =&gt; $"projects/{name}/policies/iam.disableServiceAccountKeyUpload"),
    ///         Parent = basic.Name.Apply(name =&gt; $"projects/{name}"),
    ///         Spec = new Gcp.OrgPolicy.Inputs.PolicySpecArgs
    ///         {
    ///             Rules = new[]
    ///             {
    ///                 new Gcp.OrgPolicy.Inputs.PolicySpecRuleArgs
    ///                 {
    ///                     Enforce = "FALSE",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### Folder_policy
    /// A test of an orgpolicy policy for a folder
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basic = new Gcp.Organizations.Folder("basic", new()
    ///     {
    ///         Parent = "organizations/123456789",
    ///         DisplayName = "folder",
    ///     });
    /// 
    ///     var primary = new Gcp.OrgPolicy.Policy("primary", new()
    ///     {
    ///         Name = basic.Name.Apply(name =&gt; $"{name}/policies/gcp.resourceLocations"),
    ///         Parent = basic.Name,
    ///         Spec = new Gcp.OrgPolicy.Inputs.PolicySpecArgs
    ///         {
    ///             InheritFromParent = true,
    ///             Rules = new[]
    ///             {
    ///                 new Gcp.OrgPolicy.Inputs.PolicySpecRuleArgs
    ///                 {
    ///                     DenyAll = "TRUE",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### Organization_policy
    /// A test of an orgpolicy policy for an organization
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primary = new Gcp.OrgPolicy.Policy("primary", new()
    ///     {
    ///         Name = "organizations/123456789/policies/gcp.detailedAuditLoggingMode",
    ///         Parent = "organizations/123456789",
    ///         Spec = new Gcp.OrgPolicy.Inputs.PolicySpecArgs
    ///         {
    ///             Reset = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### Project_policy
    /// A test of an orgpolicy policy for a project
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basic = new Gcp.Organizations.Project("basic", new()
    ///     {
    ///         ProjectId = "id",
    ///         Name = "id",
    ///         OrgId = "123456789",
    ///     });
    /// 
    ///     var primary = new Gcp.OrgPolicy.Policy("primary", new()
    ///     {
    ///         Name = basic.Name.Apply(name =&gt; $"projects/{name}/policies/gcp.resourceLocations"),
    ///         Parent = basic.Name.Apply(name =&gt; $"projects/{name}"),
    ///         Spec = new Gcp.OrgPolicy.Inputs.PolicySpecArgs
    ///         {
    ///             Rules = new[]
    ///             {
    ///                 new Gcp.OrgPolicy.Inputs.PolicySpecRuleArgs
    ///                 {
    ///                     Condition = new Gcp.OrgPolicy.Inputs.PolicySpecRuleConditionArgs
    ///                     {
    ///                         Description = "A sample condition for the policy",
    ///                         Expression = "resource.matchLabels('labelKeys/123', 'labelValues/345')",
    ///                         Location = "sample-location.log",
    ///                         Title = "sample-condition",
    ///                     },
    ///                     Values = new Gcp.OrgPolicy.Inputs.PolicySpecRuleValuesArgs
    ///                     {
    ///                         AllowedValues = new[]
    ///                         {
    ///                             "projects/allowed-project",
    ///                         },
    ///                         DeniedValues = new[]
    ///                         {
    ///                             "projects/denied-project",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.OrgPolicy.Inputs.PolicySpecRuleArgs
    ///                 {
    ///                     AllowAll = "TRUE",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### Dry_run_spec
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var constraint = new Gcp.OrgPolicy.CustomConstraint("constraint", new()
    ///     {
    ///         Name = "custom.disableGkeAutoUpgrade_41819",
    ///         Parent = "organizations/123456789",
    ///         DisplayName = "Disable GKE auto upgrade",
    ///         Description = "Only allow GKE NodePool resource to be created or updated if AutoUpgrade is not enabled where this custom constraint is enforced.",
    ///         ActionType = "ALLOW",
    ///         Condition = "resource.management.autoUpgrade == false",
    ///         MethodTypes = new[]
    ///         {
    ///             "CREATE",
    ///         },
    ///         ResourceTypes = new[]
    ///         {
    ///             "container.googleapis.com/NodePool",
    ///         },
    ///     });
    /// 
    ///     var primary = new Gcp.OrgPolicy.Policy("primary", new()
    ///     {
    ///         Name = constraint.Name.Apply(name =&gt; $"organizations/123456789/policies/{name}"),
    ///         Parent = "organizations/123456789",
    ///         Spec = new Gcp.OrgPolicy.Inputs.PolicySpecArgs
    ///         {
    ///             Rules = new[]
    ///             {
    ///                 new Gcp.OrgPolicy.Inputs.PolicySpecRuleArgs
    ///                 {
    ///                     Enforce = "FALSE",
    ///                 },
    ///             },
    ///         },
    ///         DryRunSpec = new Gcp.OrgPolicy.Inputs.PolicyDryRunSpecArgs
    ///         {
    ///             InheritFromParent = false,
    ///             Reset = false,
    ///             Rules = new[]
    ///             {
    ///                 new Gcp.OrgPolicy.Inputs.PolicyDryRunSpecRuleArgs
    ///                 {
    ///                     Enforce = "FALSE",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Policy can be imported using any of these accepted formats:
    /// * `{{parent}}/policies/{{name}}`
    /// 
    /// When using the `pulumi import` command, Policy can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:orgpolicy/policy:Policy default {{parent}}/policies/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:orgpolicy/policy:Policy")]
    public partial class Policy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.
        /// </summary>
        [Output("dryRunSpec")]
        public Output<Outputs.PolicyDryRunSpec?> DryRunSpec { get; private set; } = null!;

        /// <summary>
        /// An opaque tag indicating the current version of the policy, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current policy to use when executing a read-modify-write loop. When the policy is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The parent of the resource.
        /// 
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// Basic information about the Organization Policy.
        /// </summary>
        [Output("spec")]
        public Output<Outputs.PolicySpec?> Spec { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:orgpolicy/policy:Policy", name, args ?? new PolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:orgpolicy/policy:Policy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, state, options);
        }
    }

    public sealed class PolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.
        /// </summary>
        [Input("dryRunSpec")]
        public Input<Inputs.PolicyDryRunSpecArgs>? DryRunSpec { get; set; }

        /// <summary>
        /// Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The parent of the resource.
        /// 
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        /// <summary>
        /// Basic information about the Organization Policy.
        /// </summary>
        [Input("spec")]
        public Input<Inputs.PolicySpecArgs>? Spec { get; set; }

        public PolicyArgs()
        {
        }
        public static new PolicyArgs Empty => new PolicyArgs();
    }

    public sealed class PolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.
        /// </summary>
        [Input("dryRunSpec")]
        public Input<Inputs.PolicyDryRunSpecGetArgs>? DryRunSpec { get; set; }

        /// <summary>
        /// An opaque tag indicating the current version of the policy, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current policy to use when executing a read-modify-write loop. When the policy is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The parent of the resource.
        /// 
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// Basic information about the Organization Policy.
        /// </summary>
        [Input("spec")]
        public Input<Inputs.PolicySpecGetArgs>? Spec { get; set; }

        public PolicyState()
        {
        }
        public static new PolicyState Empty => new PolicyState();
    }
}
