// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.OrgPolicy
{
    /// <summary>
    /// ## Example Usage
    /// ### Enforce_policy
    /// A test of an enforce orgpolicy policy for a project
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var basic = new Gcp.Organizations.Project("basic", new Gcp.Organizations.ProjectArgs
    ///         {
    ///             OrgId = "123456789",
    ///             ProjectId = "id-test",
    ///         });
    ///         var primary = new Gcp.OrgPolicy.Policy("primary", new Gcp.OrgPolicy.PolicyArgs
    ///         {
    ///             Parent = basic.Name.Apply(name =&gt; $"projects/{name}"),
    ///             Spec = new Gcp.OrgPolicy.Inputs.PolicySpecArgs
    ///             {
    ///                 Rules = 
    ///                 {
    ///                     new Gcp.OrgPolicy.Inputs.PolicySpecRuleArgs
    ///                     {
    ///                         Enforce = "FALSE",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Folder_policy
    /// A test of an orgpolicy policy for a folder
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var basic = new Gcp.Organizations.Folder("basic", new Gcp.Organizations.FolderArgs
    ///         {
    ///             Parent = "organizations/123456789",
    ///             DisplayName = "folder",
    ///         });
    ///         var primary = new Gcp.OrgPolicy.Policy("primary", new Gcp.OrgPolicy.PolicyArgs
    ///         {
    ///             Parent = basic.Name,
    ///             Spec = new Gcp.OrgPolicy.Inputs.PolicySpecArgs
    ///             {
    ///                 InheritFromParent = true,
    ///                 Rules = 
    ///                 {
    ///                     new Gcp.OrgPolicy.Inputs.PolicySpecRuleArgs
    ///                     {
    ///                         DenyAll = "TRUE",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Organization_policy
    /// A test of an orgpolicy policy for an organization
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var primary = new Gcp.OrgPolicy.Policy("primary", new Gcp.OrgPolicy.PolicyArgs
    ///         {
    ///             Parent = "organizations/123456789",
    ///             Spec = new Gcp.OrgPolicy.Inputs.PolicySpecArgs
    ///             {
    ///                 Reset = true,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Project_policy
    /// A test of an orgpolicy policy for a project
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var basic = new Gcp.Organizations.Project("basic", new Gcp.Organizations.ProjectArgs
    ///         {
    ///             OrgId = "123456789",
    ///             ProjectId = "id-test",
    ///         });
    ///         var primary = new Gcp.OrgPolicy.Policy("primary", new Gcp.OrgPolicy.PolicyArgs
    ///         {
    ///             Parent = basic.Name.Apply(name =&gt; $"projects/{name}"),
    ///             Spec = new Gcp.OrgPolicy.Inputs.PolicySpecArgs
    ///             {
    ///                 Rules = 
    ///                 {
    ///                     new Gcp.OrgPolicy.Inputs.PolicySpecRuleArgs
    ///                     {
    ///                         Condition = new Gcp.OrgPolicy.Inputs.PolicySpecRuleConditionArgs
    ///                         {
    ///                             Description = "A sample condition for the policy",
    ///                             Expression = "resource.matchLabels('labelKeys/123', 'labelValues/345')",
    ///                             Location = "sample-location.log",
    ///                             Title = "sample-condition",
    ///                         },
    ///                         Values = new Gcp.OrgPolicy.Inputs.PolicySpecRuleValuesArgs
    ///                         {
    ///                             AllowedValues = 
    ///                             {
    ///                                 "projects/allowed-project",
    ///                             },
    ///                             DeniedValues = 
    ///                             {
    ///                                 "projects/denied-project",
    ///                             },
    ///                         },
    ///                     },
    ///                     new Gcp.OrgPolicy.Inputs.PolicySpecRuleArgs
    ///                     {
    ///                         AllowAll = "TRUE",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Policy can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:orgpolicy/policy:Policy default {{parent}}/policies/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:orgpolicy/policy:Policy default {{parent}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:orgpolicy/policy:Policy")]
    public partial class Policy : Pulumi.CustomResource
    {
        /// <summary>
        /// Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The parent of the resource.
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// Basic information about the Organization Policy.
        /// </summary>
        [Output("spec")]
        public Output<Outputs.PolicySpec?> Spec { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:orgpolicy/policy:Policy", name, args ?? new PolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:orgpolicy/policy:Policy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, state, options);
        }
    }

    public sealed class PolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The parent of the resource.
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        /// <summary>
        /// Basic information about the Organization Policy.
        /// </summary>
        [Input("spec")]
        public Input<Inputs.PolicySpecArgs>? Spec { get; set; }

        public PolicyArgs()
        {
        }
    }

    public sealed class PolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The parent of the resource.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// Basic information about the Organization Policy.
        /// </summary>
        [Input("spec")]
        public Input<Inputs.PolicySpecGetArgs>? Spec { get; set; }

        public PolicyState()
        {
        }
    }
}
