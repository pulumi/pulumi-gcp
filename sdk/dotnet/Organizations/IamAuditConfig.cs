// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Organizations
{
    /// <summary>
    /// Allows management of audit logging config for a given service for a Google Cloud Platform Organization.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var config = new Gcp.Organizations.IamAuditConfig("config", new Gcp.Organizations.IamAuditConfigArgs
    ///         {
    ///             AuditLogConfigs = 
    ///             {
    ///                 new Gcp.Organizations.Inputs.IamAuditConfigAuditLogConfigArgs
    ///                 {
    ///                     ExemptedMembers = 
    ///                     {
    ///                         "user:joebloggs@hashicorp.com",
    ///                     },
    ///                     LogType = "DATA_READ",
    ///                 },
    ///             },
    ///             OrgId = "your-organization-id",
    ///             Service = "allServices",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// IAM audit config imports use the identifier of the resource in question and the service, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gcp:organizations/iamAuditConfig:IamAuditConfig config "your-organization-id foo.googleapis.com"
    /// ```
    /// </summary>
    [GcpResourceType("gcp:organizations/iamAuditConfig:IamAuditConfig")]
    public partial class IamAuditConfig : Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration for logging of each type of permission.  This can be specified multiple times.  Structure is documented below.
        /// </summary>
        [Output("auditLogConfigs")]
        public Output<ImmutableArray<Outputs.IamAuditConfigAuditLogConfig>> AuditLogConfigs { get; private set; } = null!;

        /// <summary>
        /// The etag of iam policy
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The numeric ID of the organization in which you want to manage the audit logging config.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Service which will be enabled for audit logging.  The special value `allServices` covers all services.  Note that if there are google\_organization\_iam\_audit\_config resources covering both `allServices` and a specific service then the union of the two AuditConfigs is used for that service: the `log_types` specified in each `audit_log_config` are enabled, and the `exempted_members` in each `audit_log_config` are exempted.
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;


        /// <summary>
        /// Create a IamAuditConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IamAuditConfig(string name, IamAuditConfigArgs args, CustomResourceOptions? options = null)
            : base("gcp:organizations/iamAuditConfig:IamAuditConfig", name, args ?? new IamAuditConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IamAuditConfig(string name, Input<string> id, IamAuditConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:organizations/iamAuditConfig:IamAuditConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IamAuditConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IamAuditConfig Get(string name, Input<string> id, IamAuditConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new IamAuditConfig(name, id, state, options);
        }
    }

    public sealed class IamAuditConfigArgs : Pulumi.ResourceArgs
    {
        [Input("auditLogConfigs", required: true)]
        private InputList<Inputs.IamAuditConfigAuditLogConfigArgs>? _auditLogConfigs;

        /// <summary>
        /// The configuration for logging of each type of permission.  This can be specified multiple times.  Structure is documented below.
        /// </summary>
        public InputList<Inputs.IamAuditConfigAuditLogConfigArgs> AuditLogConfigs
        {
            get => _auditLogConfigs ?? (_auditLogConfigs = new InputList<Inputs.IamAuditConfigAuditLogConfigArgs>());
            set => _auditLogConfigs = value;
        }

        /// <summary>
        /// The numeric ID of the organization in which you want to manage the audit logging config.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Service which will be enabled for audit logging.  The special value `allServices` covers all services.  Note that if there are google\_organization\_iam\_audit\_config resources covering both `allServices` and a specific service then the union of the two AuditConfigs is used for that service: the `log_types` specified in each `audit_log_config` are enabled, and the `exempted_members` in each `audit_log_config` are exempted.
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        public IamAuditConfigArgs()
        {
        }
    }

    public sealed class IamAuditConfigState : Pulumi.ResourceArgs
    {
        [Input("auditLogConfigs")]
        private InputList<Inputs.IamAuditConfigAuditLogConfigGetArgs>? _auditLogConfigs;

        /// <summary>
        /// The configuration for logging of each type of permission.  This can be specified multiple times.  Structure is documented below.
        /// </summary>
        public InputList<Inputs.IamAuditConfigAuditLogConfigGetArgs> AuditLogConfigs
        {
            get => _auditLogConfigs ?? (_auditLogConfigs = new InputList<Inputs.IamAuditConfigAuditLogConfigGetArgs>());
            set => _auditLogConfigs = value;
        }

        /// <summary>
        /// The etag of iam policy
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The numeric ID of the organization in which you want to manage the audit logging config.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Service which will be enabled for audit logging.  The special value `allServices` covers all services.  Note that if there are google\_organization\_iam\_audit\_config resources covering both `allServices` and a specific service then the union of the two AuditConfigs is used for that service: the `log_types` specified in each `audit_log_config` are enabled, and the `exempted_members` in each `audit_log_config` are exempted.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        public IamAuditConfigState()
        {
        }
    }
}
