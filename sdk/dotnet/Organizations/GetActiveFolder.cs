// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Organizations
{
    public static class GetActiveFolder
    {
        /// <summary>
        /// Get an active folder within GCP by `display_name` and `parent`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var department1 = Gcp.Organizations.GetActiveFolder.Invoke(new()
        ///     {
        ///         DisplayName = "Department 1",
        ///         Parent = "organizations/1234567",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetActiveFolderResult> InvokeAsync(GetActiveFolderArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetActiveFolderResult>("gcp:organizations/getActiveFolder:getActiveFolder", args ?? new GetActiveFolderArgs(), options.WithDefaults());

        /// <summary>
        /// Get an active folder within GCP by `display_name` and `parent`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var department1 = Gcp.Organizations.GetActiveFolder.Invoke(new()
        ///     {
        ///         DisplayName = "Department 1",
        ///         Parent = "organizations/1234567",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetActiveFolderResult> Invoke(GetActiveFolderInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetActiveFolderResult>("gcp:organizations/getActiveFolder:getActiveFolder", args ?? new GetActiveFolderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetActiveFolderArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The API method to use to search for the folder. Valid values are `LIST` and `SEARCH`. Default Value is `LIST`. `LIST` is [strongly consistent](https://cloud.google.com/resource-manager/reference/rest/v3/folders/list#:~:text=list()%20provides%20a-,strongly%20consistent,-view%20of%20the) and requires `resourcemanager.folders.list` on the parent folder, while `SEARCH` is [eventually consistent](https://cloud.google.com/resource-manager/reference/rest/v3/folders/search#:~:text=eventually%20consistent) and only returns folders that the user has `resourcemanager.folders.get` permission on.
        /// </summary>
        [Input("apiMethod")]
        public string? ApiMethod { get; set; }

        /// <summary>
        /// The folder's display name.
        /// </summary>
        [Input("displayName", required: true)]
        public string DisplayName { get; set; } = null!;

        /// <summary>
        /// The resource name of the parent Folder or Organization.
        /// </summary>
        [Input("parent", required: true)]
        public string Parent { get; set; } = null!;

        public GetActiveFolderArgs()
        {
        }
        public static new GetActiveFolderArgs Empty => new GetActiveFolderArgs();
    }

    public sealed class GetActiveFolderInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The API method to use to search for the folder. Valid values are `LIST` and `SEARCH`. Default Value is `LIST`. `LIST` is [strongly consistent](https://cloud.google.com/resource-manager/reference/rest/v3/folders/list#:~:text=list()%20provides%20a-,strongly%20consistent,-view%20of%20the) and requires `resourcemanager.folders.list` on the parent folder, while `SEARCH` is [eventually consistent](https://cloud.google.com/resource-manager/reference/rest/v3/folders/search#:~:text=eventually%20consistent) and only returns folders that the user has `resourcemanager.folders.get` permission on.
        /// </summary>
        [Input("apiMethod")]
        public Input<string>? ApiMethod { get; set; }

        /// <summary>
        /// The folder's display name.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The resource name of the parent Folder or Organization.
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        public GetActiveFolderInvokeArgs()
        {
        }
        public static new GetActiveFolderInvokeArgs Empty => new GetActiveFolderInvokeArgs();
    }


    [OutputType]
    public sealed class GetActiveFolderResult
    {
        public readonly string? ApiMethod;
        public readonly string DisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The resource name of the Folder. This uniquely identifies the folder.
        /// </summary>
        public readonly string Name;
        public readonly string Parent;

        [OutputConstructor]
        private GetActiveFolderResult(
            string? apiMethod,

            string displayName,

            string id,

            string name,

            string parent)
        {
            ApiMethod = apiMethod;
            DisplayName = displayName;
            Id = id;
            Name = name;
            Parent = parent;
        }
    }
}
