// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Organizations
{
    public static class GetFolder
    {
        /// <summary>
        /// Use this data source to get information about a Google Cloud Folder.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myFolder1 = Gcp.Organizations.GetFolder.Invoke(new()
        ///     {
        ///         Folder = "folders/12345",
        ///         LookupOrganization = true,
        ///     });
        /// 
        ///     var myFolder2 = Gcp.Organizations.GetFolder.Invoke(new()
        ///     {
        ///         Folder = "folders/23456",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myFolder1Organization"] = myFolder1.Apply(getFolderResult =&gt; getFolderResult.Organization),
        ///         ["myFolder2Parent"] = myFolder2.Apply(getFolderResult =&gt; getFolderResult.Parent),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetFolderResult> InvokeAsync(GetFolderArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFolderResult>("gcp:organizations/getFolder:getFolder", args ?? new GetFolderArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Google Cloud Folder.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myFolder1 = Gcp.Organizations.GetFolder.Invoke(new()
        ///     {
        ///         Folder = "folders/12345",
        ///         LookupOrganization = true,
        ///     });
        /// 
        ///     var myFolder2 = Gcp.Organizations.GetFolder.Invoke(new()
        ///     {
        ///         Folder = "folders/23456",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myFolder1Organization"] = myFolder1.Apply(getFolderResult =&gt; getFolderResult.Organization),
        ///         ["myFolder2Parent"] = myFolder2.Apply(getFolderResult =&gt; getFolderResult.Parent),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFolderResult> Invoke(GetFolderInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFolderResult>("gcp:organizations/getFolder:getFolder", args ?? new GetFolderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFolderArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Folder in the form `{folder_id}` or `folders/{folder_id}`.
        /// </summary>
        [Input("folder", required: true)]
        public string Folder { get; set; } = null!;

        /// <summary>
        /// `true` to find the organization that the folder belongs, `false` to avoid the lookup. It searches up the tree. (defaults to `false`)
        /// </summary>
        [Input("lookupOrganization")]
        public bool? LookupOrganization { get; set; }

        public GetFolderArgs()
        {
        }
        public static new GetFolderArgs Empty => new GetFolderArgs();
    }

    public sealed class GetFolderInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Folder in the form `{folder_id}` or `folders/{folder_id}`.
        /// </summary>
        [Input("folder", required: true)]
        public Input<string> Folder { get; set; } = null!;

        /// <summary>
        /// `true` to find the organization that the folder belongs, `false` to avoid the lookup. It searches up the tree. (defaults to `false`)
        /// </summary>
        [Input("lookupOrganization")]
        public Input<bool>? LookupOrganization { get; set; }

        public GetFolderInvokeArgs()
        {
        }
        public static new GetFolderInvokeArgs Empty => new GetFolderInvokeArgs();
    }


    [OutputType]
    public sealed class GetFolderResult
    {
        /// <summary>
        /// Timestamp when the Organization was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The folder's display name.
        /// </summary>
        public readonly string DisplayName;
        public readonly string Folder;
        public readonly string FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Folder's current lifecycle state.
        /// </summary>
        public readonly string LifecycleState;
        public readonly bool? LookupOrganization;
        /// <summary>
        /// The resource name of the Folder in the form `folders/{folder_id}`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// If `lookup_organization` is enable, the resource name of the Organization that the folder belongs.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// The resource name of the parent Folder or Organization.
        /// </summary>
        public readonly string Parent;

        [OutputConstructor]
        private GetFolderResult(
            string createTime,

            string displayName,

            string folder,

            string folderId,

            string id,

            string lifecycleState,

            bool? lookupOrganization,

            string name,

            string organization,

            string parent)
        {
            CreateTime = createTime;
            DisplayName = displayName;
            Folder = folder;
            FolderId = folderId;
            Id = id;
            LifecycleState = lifecycleState;
            LookupOrganization = lookupOrganization;
            Name = name;
            Organization = organization;
            Parent = parent;
        }
    }
}
