// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Organizations
{
    /// <summary>
    /// Allows management of a Google Cloud Platform folder. For more information see
    /// [the official documentation](https://cloud.google.com/resource-manager/docs/creating-managing-folders)
    /// and
    /// [API](https://cloud.google.com/resource-manager/reference/rest/v2/folders).
    /// 
    /// A folder can contain projects, other folders, or a combination of both. You can use folders to group projects under an organization in a hierarchy. For example, your organization might contain multiple departments, each with its own set of Cloud Platform resources. Folders allows you to group these resources on a per-department basis. Folders are used to group resources that share common IAM policies.
    /// 
    /// Folders created live inside an Organization. See the [Organization documentation](https://cloud.google.com/resource-manager/docs/quickstarts) for more details.
    /// 
    /// The service account used to run the provider when creating a `gcp.organizations.Folder`
    /// resource must have `roles/resourcemanager.folderCreator`. See the
    /// [Access Control for Folders Using IAM](https://cloud.google.com/resource-manager/docs/access-control-folders)
    /// doc for more information.
    /// 
    /// &gt; It may take a while for the attached tag bindings to be deleted after the folder is scheduled to be deleted.
    /// 
    /// ## Import
    /// 
    /// Folders can be imported using the folder's id, e.g.
    /// 
    /// * `folders/{{folder_id}}`
    /// 
    /// * `{{folder_id}}`
    /// 
    /// When using the `pulumi import` command, Folders can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:organizations/folder:Folder default {{folder_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:organizations/folder:Folder default folders/{{folder_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:organizations/folder:Folder")]
    public partial class Folder : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional capabilities configured for this folder.
        /// </summary>
        [Output("configuredCapabilities")]
        public Output<ImmutableArray<string>> ConfiguredCapabilities { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the Folder was created. Assigned by the server.
        /// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        [Output("deletionProtection")]
        public Output<bool?> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// The folder’s display name.
        /// A folder’s display name must be unique amongst its siblings, e.g. no two folders with the same parent can share the same display name. The display name must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be no longer than 30 characters.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The folder id from the name "folders/{folder_id}"
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// The lifecycle state of the folder such as `ACTIVE` or `DELETE_REQUESTED`.
        /// </summary>
        [Output("lifecycleState")]
        public Output<string> LifecycleState { get; private set; } = null!;

        /// <summary>
        /// Management Project associated with this folder (if capability is enabled).
        /// </summary>
        [Output("managementProject")]
        public Output<string> ManagementProject { get; private set; } = null!;

        /// <summary>
        /// The resource name of the Folder. Its format is folders/{folder_id}.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The resource name of the parent Folder or Organization.
        /// Must be of the form `folders/{folder_id}` or `organizations/{org_id}`.
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored when empty. The field is immutable and causes resource replacement when  mutated. This field is only set at create time and modifying this field after creation will trigger recreation. To apply tags to an existing resource, see the `gcp.tags.TagValue` resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Folder resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Folder(string name, FolderArgs args, CustomResourceOptions? options = null)
            : base("gcp:organizations/folder:Folder", name, args ?? new FolderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Folder(string name, Input<string> id, FolderState? state = null, CustomResourceOptions? options = null)
            : base("gcp:organizations/folder:Folder", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Folder resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Folder Get(string name, Input<string> id, FolderState? state = null, CustomResourceOptions? options = null)
        {
            return new Folder(name, id, state, options);
        }
    }

    public sealed class FolderArgs : global::Pulumi.ResourceArgs
    {
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The folder’s display name.
        /// A folder’s display name must be unique amongst its siblings, e.g. no two folders with the same parent can share the same display name. The display name must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be no longer than 30 characters.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The resource name of the parent Folder or Organization.
        /// Must be of the form `folders/{folder_id}` or `organizations/{org_id}`.
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored when empty. The field is immutable and causes resource replacement when  mutated. This field is only set at create time and modifying this field after creation will trigger recreation. To apply tags to an existing resource, see the `gcp.tags.TagValue` resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public FolderArgs()
        {
        }
        public static new FolderArgs Empty => new FolderArgs();
    }

    public sealed class FolderState : global::Pulumi.ResourceArgs
    {
        [Input("configuredCapabilities")]
        private InputList<string>? _configuredCapabilities;

        /// <summary>
        /// Optional capabilities configured for this folder.
        /// </summary>
        public InputList<string> ConfiguredCapabilities
        {
            get => _configuredCapabilities ?? (_configuredCapabilities = new InputList<string>());
            set => _configuredCapabilities = value;
        }

        /// <summary>
        /// Timestamp when the Folder was created. Assigned by the server.
        /// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The folder’s display name.
        /// A folder’s display name must be unique amongst its siblings, e.g. no two folders with the same parent can share the same display name. The display name must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be no longer than 30 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The folder id from the name "folders/{folder_id}"
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// The lifecycle state of the folder such as `ACTIVE` or `DELETE_REQUESTED`.
        /// </summary>
        [Input("lifecycleState")]
        public Input<string>? LifecycleState { get; set; }

        /// <summary>
        /// Management Project associated with this folder (if capability is enabled).
        /// </summary>
        [Input("managementProject")]
        public Input<string>? ManagementProject { get; set; }

        /// <summary>
        /// The resource name of the Folder. Its format is folders/{folder_id}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The resource name of the parent Folder or Organization.
        /// Must be of the form `folders/{folder_id}` or `organizations/{org_id}`.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored when empty. The field is immutable and causes resource replacement when  mutated. This field is only set at create time and modifying this field after creation will trigger recreation. To apply tags to an existing resource, see the `gcp.tags.TagValue` resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public FolderState()
        {
        }
        public static new FolderState Empty => new FolderState();
    }
}
