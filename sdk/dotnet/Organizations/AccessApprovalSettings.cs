// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Organizations
{
    /// <summary>
    /// Access Approval enables you to require your explicit approval whenever Google support and engineering need to access your customer content.
    /// 
    /// To get more information about OrganizationSettings, see:
    /// 
    /// * [API documentation](https://cloud.google.com/access-approval/docs/reference/rest/v1/organizations)
    /// 
    /// ## Example Usage
    /// ### Organization Access Approval Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var organizationAccessApproval = new Gcp.Organizations.AccessApprovalSettings("organizationAccessApproval", new()
    ///     {
    ///         EnrolledServices = new[]
    ///         {
    ///             new Gcp.Organizations.Inputs.AccessApprovalSettingsEnrolledServiceArgs
    ///             {
    ///                 CloudProduct = "appengine.googleapis.com",
    ///             },
    ///             new Gcp.Organizations.Inputs.AccessApprovalSettingsEnrolledServiceArgs
    ///             {
    ///                 CloudProduct = "dataflow.googleapis.com",
    ///                 EnrollmentLevel = "BLOCK_ALL",
    ///             },
    ///         },
    ///         NotificationEmails = new[]
    ///         {
    ///             "testuser@example.com",
    ///             "example.user@example.com",
    ///         },
    ///         OrganizationId = "123456789",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Organization Access Approval Active Key Version
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myProject = new Gcp.Organizations.Project("myProject", new()
    ///     {
    ///         ProjectId = "your-project-id",
    ///         OrgId = "123456789",
    ///     });
    /// 
    ///     var keyRing = new Gcp.Kms.KeyRing("keyRing", new()
    ///     {
    ///         Location = "global",
    ///         Project = myProject.ProjectId,
    ///     });
    /// 
    ///     var cryptoKey = new Gcp.Kms.CryptoKey("cryptoKey", new()
    ///     {
    ///         KeyRing = keyRing.Id,
    ///         Purpose = "ASYMMETRIC_SIGN",
    ///         VersionTemplate = new Gcp.Kms.Inputs.CryptoKeyVersionTemplateArgs
    ///         {
    ///             Algorithm = "EC_SIGN_P384_SHA384",
    ///         },
    ///     });
    /// 
    ///     var serviceAccount = Gcp.AccessApproval.GetOrganizationServiceAccount.Invoke(new()
    ///     {
    ///         OrganizationId = "123456789",
    ///     });
    /// 
    ///     var iam = new Gcp.Kms.CryptoKeyIAMMember("iam", new()
    ///     {
    ///         CryptoKeyId = cryptoKey.Id,
    ///         Role = "roles/cloudkms.signerVerifier",
    ///         Member = $"serviceAccount:{serviceAccount.Apply(getOrganizationServiceAccountResult =&gt; getOrganizationServiceAccountResult.AccountEmail)}",
    ///     });
    /// 
    ///     var cryptoKeyVersion = Gcp.Kms.GetKMSCryptoKeyVersion.Invoke(new()
    ///     {
    ///         CryptoKey = cryptoKey.Id,
    ///     });
    /// 
    ///     var organizationAccessApproval = new Gcp.Organizations.AccessApprovalSettings("organizationAccessApproval", new()
    ///     {
    ///         OrganizationId = "123456789",
    ///         ActiveKeyVersion = cryptoKeyVersion.Apply(getKMSCryptoKeyVersionResult =&gt; getKMSCryptoKeyVersionResult.Name),
    ///         EnrolledServices = new[]
    ///         {
    ///             new Gcp.Organizations.Inputs.AccessApprovalSettingsEnrolledServiceArgs
    ///             {
    ///                 CloudProduct = "all",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             iam,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// OrganizationSettings can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:organizations/accessApprovalSettings:AccessApprovalSettings default organizations/{{organization_id}}/accessApprovalSettings
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:organizations/accessApprovalSettings:AccessApprovalSettings default {{organization_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:organizations/accessApprovalSettings:AccessApprovalSettings")]
    public partial class AccessApprovalSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The asymmetric crypto key version to use for signing approval requests.
        /// Empty active_key_version indicates that a Google-managed key should be used for signing.
        /// </summary>
        [Output("activeKeyVersion")]
        public Output<string?> ActiveKeyVersion { get; private set; } = null!;

        /// <summary>
        /// This field will always be unset for the organization since organizations do not have ancestors.
        /// </summary>
        [Output("ancestorHasActiveKeyVersion")]
        public Output<bool> AncestorHasActiveKeyVersion { get; private set; } = null!;

        /// <summary>
        /// This field will always be unset for the organization since organizations do not have ancestors.
        /// </summary>
        [Output("enrolledAncestor")]
        public Output<bool> EnrolledAncestor { get; private set; } = null!;

        /// <summary>
        /// A list of Google Cloud Services for which the given resource has Access Approval enrolled.
        /// Access requests for the resource given by name against any of these services contained here will be required
        /// to have explicit approval. Enrollment can be done for individual services.
        /// A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
        /// Structure is documented below.
        /// </summary>
        [Output("enrolledServices")]
        public Output<ImmutableArray<Outputs.AccessApprovalSettingsEnrolledService>> EnrolledServices { get; private set; } = null!;

        /// <summary>
        /// If the field is true, that indicates that there is some configuration issue with the active_key_version configured on
        /// this Organization (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on
        /// it, etc.).
        /// </summary>
        [Output("invalidKeyVersion")]
        public Output<bool> InvalidKeyVersion { get; private set; } = null!;

        /// <summary>
        /// The resource name of the settings. Format is "organizations/{organization_id}/accessApprovalSettings"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of email addresses to which notifications relating to approval requests should be sent.
        /// Notifications relating to a resource will be sent to all emails in the settings of ancestor
        /// resources of that resource. A maximum of 50 email addresses are allowed.
        /// </summary>
        [Output("notificationEmails")]
        public Output<ImmutableArray<string>> NotificationEmails { get; private set; } = null!;

        /// <summary>
        /// ID of the organization of the access approval settings.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;


        /// <summary>
        /// Create a AccessApprovalSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessApprovalSettings(string name, AccessApprovalSettingsArgs args, CustomResourceOptions? options = null)
            : base("gcp:organizations/accessApprovalSettings:AccessApprovalSettings", name, args ?? new AccessApprovalSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessApprovalSettings(string name, Input<string> id, AccessApprovalSettingsState? state = null, CustomResourceOptions? options = null)
            : base("gcp:organizations/accessApprovalSettings:AccessApprovalSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessApprovalSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessApprovalSettings Get(string name, Input<string> id, AccessApprovalSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessApprovalSettings(name, id, state, options);
        }
    }

    public sealed class AccessApprovalSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The asymmetric crypto key version to use for signing approval requests.
        /// Empty active_key_version indicates that a Google-managed key should be used for signing.
        /// </summary>
        [Input("activeKeyVersion")]
        public Input<string>? ActiveKeyVersion { get; set; }

        [Input("enrolledServices", required: true)]
        private InputList<Inputs.AccessApprovalSettingsEnrolledServiceArgs>? _enrolledServices;

        /// <summary>
        /// A list of Google Cloud Services for which the given resource has Access Approval enrolled.
        /// Access requests for the resource given by name against any of these services contained here will be required
        /// to have explicit approval. Enrollment can be done for individual services.
        /// A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AccessApprovalSettingsEnrolledServiceArgs> EnrolledServices
        {
            get => _enrolledServices ?? (_enrolledServices = new InputList<Inputs.AccessApprovalSettingsEnrolledServiceArgs>());
            set => _enrolledServices = value;
        }

        [Input("notificationEmails")]
        private InputList<string>? _notificationEmails;

        /// <summary>
        /// A list of email addresses to which notifications relating to approval requests should be sent.
        /// Notifications relating to a resource will be sent to all emails in the settings of ancestor
        /// resources of that resource. A maximum of 50 email addresses are allowed.
        /// </summary>
        public InputList<string> NotificationEmails
        {
            get => _notificationEmails ?? (_notificationEmails = new InputList<string>());
            set => _notificationEmails = value;
        }

        /// <summary>
        /// ID of the organization of the access approval settings.
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        public AccessApprovalSettingsArgs()
        {
        }
        public static new AccessApprovalSettingsArgs Empty => new AccessApprovalSettingsArgs();
    }

    public sealed class AccessApprovalSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The asymmetric crypto key version to use for signing approval requests.
        /// Empty active_key_version indicates that a Google-managed key should be used for signing.
        /// </summary>
        [Input("activeKeyVersion")]
        public Input<string>? ActiveKeyVersion { get; set; }

        /// <summary>
        /// This field will always be unset for the organization since organizations do not have ancestors.
        /// </summary>
        [Input("ancestorHasActiveKeyVersion")]
        public Input<bool>? AncestorHasActiveKeyVersion { get; set; }

        /// <summary>
        /// This field will always be unset for the organization since organizations do not have ancestors.
        /// </summary>
        [Input("enrolledAncestor")]
        public Input<bool>? EnrolledAncestor { get; set; }

        [Input("enrolledServices")]
        private InputList<Inputs.AccessApprovalSettingsEnrolledServiceGetArgs>? _enrolledServices;

        /// <summary>
        /// A list of Google Cloud Services for which the given resource has Access Approval enrolled.
        /// Access requests for the resource given by name against any of these services contained here will be required
        /// to have explicit approval. Enrollment can be done for individual services.
        /// A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AccessApprovalSettingsEnrolledServiceGetArgs> EnrolledServices
        {
            get => _enrolledServices ?? (_enrolledServices = new InputList<Inputs.AccessApprovalSettingsEnrolledServiceGetArgs>());
            set => _enrolledServices = value;
        }

        /// <summary>
        /// If the field is true, that indicates that there is some configuration issue with the active_key_version configured on
        /// this Organization (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on
        /// it, etc.).
        /// </summary>
        [Input("invalidKeyVersion")]
        public Input<bool>? InvalidKeyVersion { get; set; }

        /// <summary>
        /// The resource name of the settings. Format is "organizations/{organization_id}/accessApprovalSettings"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationEmails")]
        private InputList<string>? _notificationEmails;

        /// <summary>
        /// A list of email addresses to which notifications relating to approval requests should be sent.
        /// Notifications relating to a resource will be sent to all emails in the settings of ancestor
        /// resources of that resource. A maximum of 50 email addresses are allowed.
        /// </summary>
        public InputList<string> NotificationEmails
        {
            get => _notificationEmails ?? (_notificationEmails = new InputList<string>());
            set => _notificationEmails = value;
        }

        /// <summary>
        /// ID of the organization of the access approval settings.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        public AccessApprovalSettingsState()
        {
        }
        public static new AccessApprovalSettingsState Empty => new AccessApprovalSettingsState();
    }
}
