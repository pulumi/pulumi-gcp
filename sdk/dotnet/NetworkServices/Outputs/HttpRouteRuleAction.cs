// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkServices.Outputs
{

    [OutputType]
    public sealed class HttpRouteRuleAction
    {
        /// <summary>
        /// The specification for allowing client side cross-origin requests.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.HttpRouteRuleActionCorsPolicy? CorsPolicy;
        /// <summary>
        /// The destination to which traffic should be forwarded.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.HttpRouteRuleActionDestination> Destinations;
        /// <summary>
        /// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.HttpRouteRuleActionFaultInjectionPolicy? FaultInjectionPolicy;
        /// <summary>
        /// If set, the request is directed as configured by this field.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.HttpRouteRuleActionRedirect? Redirect;
        /// <summary>
        /// The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.HttpRouteRuleActionRequestHeaderModifier? RequestHeaderModifier;
        /// <summary>
        /// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.HttpRouteRuleActionRequestMirrorPolicy? RequestMirrorPolicy;
        /// <summary>
        /// The specification for modifying the headers of a response prior to sending the response back to the client.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.HttpRouteRuleActionResponseHeaderModifier? ResponseHeaderModifier;
        /// <summary>
        /// Specifies the retry policy associated with this route.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.HttpRouteRuleActionRetryPolicy? RetryPolicy;
        /// <summary>
        /// Specifies the timeout for selected route.
        /// </summary>
        public readonly string? Timeout;
        /// <summary>
        /// The specification for rewrite URL before forwarding requests to the destination.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.HttpRouteRuleActionUrlRewrite? UrlRewrite;

        [OutputConstructor]
        private HttpRouteRuleAction(
            Outputs.HttpRouteRuleActionCorsPolicy? corsPolicy,

            ImmutableArray<Outputs.HttpRouteRuleActionDestination> destinations,

            Outputs.HttpRouteRuleActionFaultInjectionPolicy? faultInjectionPolicy,

            Outputs.HttpRouteRuleActionRedirect? redirect,

            Outputs.HttpRouteRuleActionRequestHeaderModifier? requestHeaderModifier,

            Outputs.HttpRouteRuleActionRequestMirrorPolicy? requestMirrorPolicy,

            Outputs.HttpRouteRuleActionResponseHeaderModifier? responseHeaderModifier,

            Outputs.HttpRouteRuleActionRetryPolicy? retryPolicy,

            string? timeout,

            Outputs.HttpRouteRuleActionUrlRewrite? urlRewrite)
        {
            CorsPolicy = corsPolicy;
            Destinations = destinations;
            FaultInjectionPolicy = faultInjectionPolicy;
            Redirect = redirect;
            RequestHeaderModifier = requestHeaderModifier;
            RequestMirrorPolicy = requestMirrorPolicy;
            ResponseHeaderModifier = responseHeaderModifier;
            RetryPolicy = retryPolicy;
            Timeout = timeout;
            UrlRewrite = urlRewrite;
        }
    }
}
