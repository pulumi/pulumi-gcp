// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkServices
{
    /// <summary>
    /// WasmPlugin is a resource representing a service executing a customer-provided Wasm module.
    /// 
    /// To get more information about WasmPlugin, see:
    /// 
    /// * [API documentation](https://cloud.google.com/service-extensions/docs/reference/rest/v1/projects.locations.wasmPlugins)
    /// * How-to Guides
    ///     * [Configure a route extension](https://cloud.google.com/service-extensions/docs/create-plugin)
    /// 
    /// ## Example Usage
    /// 
    /// ### Wasm Plugin Basic Docker Repository
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var wasmPlugin = new Gcp.NetworkServices.WasmPlugin("wasm_plugin", new()
    ///     {
    ///         Name = "my-wasm-plugin",
    ///         Description = "my wasm plugin from a docker repository",
    ///         MainVersionId = "v1",
    ///         Labels = 
    ///         {
    ///             { "test_label", "test_value" },
    ///         },
    ///         LogConfig = new Gcp.NetworkServices.Inputs.WasmPluginLogConfigArgs
    ///         {
    ///             Enable = true,
    ///             SampleRate = 1,
    ///             MinLogLevel = "WARN",
    ///         },
    ///         Versions = new[]
    ///         {
    ///             new Gcp.NetworkServices.Inputs.WasmPluginVersionArgs
    ///             {
    ///                 VersionName = "v1",
    ///                 Description = "v1 version of my wasm plugin",
    ///                 ImageUri = $"us-central1-docker.pkg.dev/{project.Apply(getProjectResult =&gt; getProjectResult.Name)}/my-artifact-registry-docker-repository/my-wasm-plugin-data:prod",
    ///                 Labels = 
    ///                 {
    ///                     { "test_label", "test_value" },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Wasm Plugin Basic Generic Repository
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var wasmPlugin = new Gcp.NetworkServices.WasmPlugin("wasm_plugin", new()
    ///     {
    ///         Name = "my-wasm-plugin",
    ///         Description = "my wasm plugin from a generic repository",
    ///         MainVersionId = "v1",
    ///         Labels = 
    ///         {
    ///             { "test_label", "test_value" },
    ///         },
    ///         LogConfig = new Gcp.NetworkServices.Inputs.WasmPluginLogConfigArgs
    ///         {
    ///             Enable = true,
    ///             SampleRate = 1,
    ///             MinLogLevel = "WARN",
    ///         },
    ///         Versions = new[]
    ///         {
    ///             new Gcp.NetworkServices.Inputs.WasmPluginVersionArgs
    ///             {
    ///                 VersionName = "v1",
    ///                 Description = "v1 version of my wasm plugin",
    ///                 ImageUri = $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Name)}/locations/us-central1/repositories/my-artifact-registry-generic-repository/genericArtifacts/my-wasm-plugin-data:v1",
    ///                 Labels = 
    ///                 {
    ///                     { "test_label", "test_value" },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WasmPlugin can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/wasmPlugins/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, WasmPlugin can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkservices/wasmPlugin:WasmPlugin default projects/{{project}}/locations/{{location}}/wasmPlugins/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkservices/wasmPlugin:WasmPlugin default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkservices/wasmPlugin:WasmPlugin default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networkservices/wasmPlugin:WasmPlugin")]
    public partial class WasmPlugin : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Output only. The timestamp when the resource was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Optional. A human-readable description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Optional. Set of labels associated with the WasmPlugin resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location of the traffic extension
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
        /// Note that the settings relate to the logs generated by using logging statements in your Wasm code.
        /// Structure is documented below.
        /// </summary>
        [Output("logConfig")]
        public Output<Outputs.WasmPluginLogConfig?> LogConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the "versions" field.
        /// </summary>
        [Output("mainVersionId")]
        public Output<string> MainVersionId { get; private set; } = null!;

        /// <summary>
        /// Identifier. Name of the WasmPlugin resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Output only. The timestamp when the resource was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Output only. List of all extensions that use this WasmPlugin resource.
        /// Structure is documented below.
        /// </summary>
        [Output("usedBies")]
        public Output<ImmutableArray<Outputs.WasmPluginUsedBy>> UsedBies { get; private set; } = null!;

        /// <summary>
        /// All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
        /// Structure is documented below.
        /// </summary>
        [Output("versions")]
        public Output<ImmutableArray<Outputs.WasmPluginVersion>> Versions { get; private set; } = null!;


        /// <summary>
        /// Create a WasmPlugin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WasmPlugin(string name, WasmPluginArgs args, CustomResourceOptions? options = null)
            : base("gcp:networkservices/wasmPlugin:WasmPlugin", name, args ?? new WasmPluginArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WasmPlugin(string name, Input<string> id, WasmPluginState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networkservices/wasmPlugin:WasmPlugin", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WasmPlugin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WasmPlugin Get(string name, Input<string> id, WasmPluginState? state = null, CustomResourceOptions? options = null)
        {
            return new WasmPlugin(name, id, state, options);
        }
    }

    public sealed class WasmPluginArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Set of labels associated with the WasmPlugin resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the traffic extension
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
        /// Note that the settings relate to the logs generated by using logging statements in your Wasm code.
        /// Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.WasmPluginLogConfigArgs>? LogConfig { get; set; }

        /// <summary>
        /// The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the "versions" field.
        /// </summary>
        [Input("mainVersionId", required: true)]
        public Input<string> MainVersionId { get; set; } = null!;

        /// <summary>
        /// Identifier. Name of the WasmPlugin resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("versions", required: true)]
        private InputList<Inputs.WasmPluginVersionArgs>? _versions;

        /// <summary>
        /// All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WasmPluginVersionArgs> Versions
        {
            get => _versions ?? (_versions = new InputList<Inputs.WasmPluginVersionArgs>());
            set => _versions = value;
        }

        public WasmPluginArgs()
        {
        }
        public static new WasmPluginArgs Empty => new WasmPluginArgs();
    }

    public sealed class WasmPluginState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Output only. The timestamp when the resource was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Optional. A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Set of labels associated with the WasmPlugin resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the traffic extension
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
        /// Note that the settings relate to the logs generated by using logging statements in your Wasm code.
        /// Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.WasmPluginLogConfigGetArgs>? LogConfig { get; set; }

        /// <summary>
        /// The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the "versions" field.
        /// </summary>
        [Input("mainVersionId")]
        public Input<string>? MainVersionId { get; set; }

        /// <summary>
        /// Identifier. Name of the WasmPlugin resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Output only. The timestamp when the resource was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        [Input("usedBies")]
        private InputList<Inputs.WasmPluginUsedByGetArgs>? _usedBies;

        /// <summary>
        /// Output only. List of all extensions that use this WasmPlugin resource.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WasmPluginUsedByGetArgs> UsedBies
        {
            get => _usedBies ?? (_usedBies = new InputList<Inputs.WasmPluginUsedByGetArgs>());
            set => _usedBies = value;
        }

        [Input("versions")]
        private InputList<Inputs.WasmPluginVersionGetArgs>? _versions;

        /// <summary>
        /// All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WasmPluginVersionGetArgs> Versions
        {
            get => _versions ?? (_versions = new InputList<Inputs.WasmPluginVersionGetArgs>());
            set => _versions = value;
        }

        public WasmPluginState()
        {
        }
        public static new WasmPluginState Empty => new WasmPluginState();
    }
}
