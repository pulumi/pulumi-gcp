// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkServices.Inputs
{

    public sealed class WasmPluginVersionGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Output)
        /// Output only. The timestamp when the resource was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Optional. A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Output)
        /// Output only. The resolved digest for the image specified in the image field. The digest is resolved during the creation of WasmPluginVersion resource.
        /// This field holds the digest value, regardless of whether a tag or digest was originally specified in the image field.
        /// </summary>
        [Input("imageDigest")]
        public Input<string>? ImageDigest { get; set; }

        /// <summary>
        /// Optional. URI of the container image containing the plugin, stored in the Artifact Registry. When a new WasmPluginVersion resource is created, the digest of the container image is saved in the imageDigest field.
        /// When downloading an image, the digest value is used instead of an image tag.
        /// </summary>
        [Input("imageUri")]
        public Input<string>? ImageUri { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Set of labels associated with the WasmPlugin resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// A base64-encoded string containing the configuration for the plugin. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
        /// When a new WasmPluginVersion resource is created, the digest of the contents is saved in the pluginConfigDigest field.
        /// Conflics with pluginConfigUri.
        /// </summary>
        [Input("pluginConfigData")]
        public Input<string>? PluginConfigData { get; set; }

        /// <summary>
        /// (Output)
        /// Output only. This field holds the digest (usually checksum) value for the plugin configuration.
        /// The value is calculated based on the contents of pluginConfigData or the container image defined by the pluginConfigUri field.
        /// </summary>
        [Input("pluginConfigDigest")]
        public Input<string>? PluginConfigDigest { get; set; }

        /// <summary>
        /// URI of the plugin configuration stored in the Artifact Registry. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
        /// The container image must contain only a single file with the name plugin.config.
        /// When a new WasmPluginVersion resource is created, the digest of the container image is saved in the pluginConfigDigest field.
        /// Conflics with pluginConfigData.
        /// </summary>
        [Input("pluginConfigUri")]
        public Input<string>? PluginConfigUri { get; set; }

        /// <summary>
        /// (Output)
        /// Output only. The timestamp when the resource was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// The identifier for this object. Format specified above.
        /// </summary>
        [Input("versionName", required: true)]
        public Input<string> VersionName { get; set; } = null!;

        public WasmPluginVersionGetArgs()
        {
        }
        public static new WasmPluginVersionGetArgs Empty => new WasmPluginVersionGetArgs();
    }
}
