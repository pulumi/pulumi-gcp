// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkServices
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// EndpointPolicy can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:networkservices/endpointPolicy:EndpointPolicy default projects/{{project}}/locations/global/endpointPolicies/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:networkservices/endpointPolicy:EndpointPolicy default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:networkservices/endpointPolicy:EndpointPolicy default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networkservices/endpointPolicy:EndpointPolicy")]
    public partial class EndpointPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic at the matched endpoints.
        /// </summary>
        [Output("authorizationPolicy")]
        public Output<string?> AuthorizationPolicy { get; private set; } = null!;

        /// <summary>
        /// A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from the proxy to the actual endpoints.
        /// </summary>
        [Output("clientTlsPolicy")]
        public Output<string?> ClientTlsPolicy { get; private set; } = null!;

        /// <summary>
        /// Time the TcpRoute was created in UTC.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Required. A matcher that selects endpoints to which the policies should be applied.
        /// Structure is documented below.
        /// </summary>
        [Output("endpointMatcher")]
        public Output<Outputs.EndpointPolicyEndpointMatcher> EndpointMatcher { get; private set; } = null!;

        /// <summary>
        /// Set of label tags associated with the TcpRoute resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the EndpointPolicy resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be applied to terminate the inbound traffic at the identified backends.
        /// </summary>
        [Output("serverTlsPolicy")]
        public Output<string?> ServerTlsPolicy { get; private set; } = null!;

        /// <summary>
        /// Port selector for the (matched) endpoints. If no port selector is provided, the matched config is applied to all ports.
        /// Structure is documented below.
        /// </summary>
        [Output("trafficPortSelector")]
        public Output<Outputs.EndpointPolicyTrafficPortSelector?> TrafficPortSelector { get; private set; } = null!;

        /// <summary>
        /// The type of endpoint policy. This is primarily used to validate the configuration.
        /// Possible values are: `SIDECAR_PROXY`, `GRPC_SERVER`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Time the TcpRoute was updated in UTC.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a EndpointPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EndpointPolicy(string name, EndpointPolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:networkservices/endpointPolicy:EndpointPolicy", name, args ?? new EndpointPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EndpointPolicy(string name, Input<string> id, EndpointPolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networkservices/endpointPolicy:EndpointPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EndpointPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EndpointPolicy Get(string name, Input<string> id, EndpointPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new EndpointPolicy(name, id, state, options);
        }
    }

    public sealed class EndpointPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic at the matched endpoints.
        /// </summary>
        [Input("authorizationPolicy")]
        public Input<string>? AuthorizationPolicy { get; set; }

        /// <summary>
        /// A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from the proxy to the actual endpoints.
        /// </summary>
        [Input("clientTlsPolicy")]
        public Input<string>? ClientTlsPolicy { get; set; }

        /// <summary>
        /// A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Required. A matcher that selects endpoints to which the policies should be applied.
        /// Structure is documented below.
        /// </summary>
        [Input("endpointMatcher", required: true)]
        public Input<Inputs.EndpointPolicyEndpointMatcherArgs> EndpointMatcher { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the TcpRoute resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the EndpointPolicy resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be applied to terminate the inbound traffic at the identified backends.
        /// </summary>
        [Input("serverTlsPolicy")]
        public Input<string>? ServerTlsPolicy { get; set; }

        /// <summary>
        /// Port selector for the (matched) endpoints. If no port selector is provided, the matched config is applied to all ports.
        /// Structure is documented below.
        /// </summary>
        [Input("trafficPortSelector")]
        public Input<Inputs.EndpointPolicyTrafficPortSelectorArgs>? TrafficPortSelector { get; set; }

        /// <summary>
        /// The type of endpoint policy. This is primarily used to validate the configuration.
        /// Possible values are: `SIDECAR_PROXY`, `GRPC_SERVER`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public EndpointPolicyArgs()
        {
        }
        public static new EndpointPolicyArgs Empty => new EndpointPolicyArgs();
    }

    public sealed class EndpointPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic at the matched endpoints.
        /// </summary>
        [Input("authorizationPolicy")]
        public Input<string>? AuthorizationPolicy { get; set; }

        /// <summary>
        /// A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from the proxy to the actual endpoints.
        /// </summary>
        [Input("clientTlsPolicy")]
        public Input<string>? ClientTlsPolicy { get; set; }

        /// <summary>
        /// Time the TcpRoute was created in UTC.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Required. A matcher that selects endpoints to which the policies should be applied.
        /// Structure is documented below.
        /// </summary>
        [Input("endpointMatcher")]
        public Input<Inputs.EndpointPolicyEndpointMatcherGetArgs>? EndpointMatcher { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the TcpRoute resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the EndpointPolicy resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be applied to terminate the inbound traffic at the identified backends.
        /// </summary>
        [Input("serverTlsPolicy")]
        public Input<string>? ServerTlsPolicy { get; set; }

        /// <summary>
        /// Port selector for the (matched) endpoints. If no port selector is provided, the matched config is applied to all ports.
        /// Structure is documented below.
        /// </summary>
        [Input("trafficPortSelector")]
        public Input<Inputs.EndpointPolicyTrafficPortSelectorGetArgs>? TrafficPortSelector { get; set; }

        /// <summary>
        /// The type of endpoint policy. This is primarily used to validate the configuration.
        /// Possible values are: `SIDECAR_PROXY`, `GRPC_SERVER`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Time the TcpRoute was updated in UTC.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public EndpointPolicyState()
        {
        }
        public static new EndpointPolicyState Empty => new EndpointPolicyState();
    }
}
