// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkServices
{
    /// <summary>
    /// EdgeCacheOrigin represents a HTTP-reachable backend for an EdgeCacheService.
    /// 
    /// ## Example Usage
    /// ### Network Services Edge Cache Origin Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.NetworkServices.EdgeCacheOrigin("default", new()
    ///     {
    ///         Description = "The default bucket for media edge test",
    ///         OriginAddress = "gs://media-edge-default",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Services Edge Cache Origin Advanced
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fallback = new Gcp.NetworkServices.EdgeCacheOrigin("fallback", new()
    ///     {
    ///         OriginAddress = "gs://media-edge-fallback",
    ///         Description = "The default bucket for media edge test",
    ///         MaxAttempts = 3,
    ///         Protocol = "HTTP",
    ///         Port = 80,
    ///         RetryConditions = new[]
    ///         {
    ///             "CONNECT_FAILURE",
    ///             "NOT_FOUND",
    ///             "HTTP_5XX",
    ///             "FORBIDDEN",
    ///         },
    ///         Timeout = new Gcp.NetworkServices.Inputs.EdgeCacheOriginTimeoutArgs
    ///         {
    ///             ConnectTimeout = "10s",
    ///             MaxAttemptsTimeout = "20s",
    ///             ResponseTimeout = "60s",
    ///             ReadTimeout = "5s",
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.NetworkServices.EdgeCacheOrigin("default", new()
    ///     {
    ///         OriginAddress = "gs://media-edge-default",
    ///         FailoverOrigin = fallback.Id,
    ///         Description = "The default bucket for media edge test",
    ///         MaxAttempts = 2,
    ///         Labels = 
    ///         {
    ///             { "a", "b" },
    ///         },
    ///         Timeout = new Gcp.NetworkServices.Inputs.EdgeCacheOriginTimeoutArgs
    ///         {
    ///             ConnectTimeout = "10s",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// EdgeCacheOrigin can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:networkservices/edgeCacheOrigin:EdgeCacheOrigin default projects/{{project}}/locations/global/edgeCacheOrigins/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:networkservices/edgeCacheOrigin:EdgeCacheOrigin default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:networkservices/edgeCacheOrigin:EdgeCacheOrigin default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networkservices/edgeCacheOrigin:EdgeCacheOrigin")]
    public partial class EdgeCacheOrigin : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Origin resource to try when the current origin cannot be reached.
        /// After maxAttempts is reached, the configured failoverOrigin will be used to fulfil the request.
        /// The value of timeout.maxAttemptsTimeout dictates the timeout across all origins.
        /// A reference to a Topic resource.
        /// </summary>
        [Output("failoverOrigin")]
        public Output<string?> FailoverOrigin { get; private set; } = null!;

        /// <summary>
        /// Set of label tags associated with the EdgeCache resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The maximum number of attempts to cache fill from this origin. Another attempt is made when a cache fill fails with one of the retryConditions.
        /// Once maxAttempts to this origin have failed the failoverOrigin will be used, if one is specified. That failoverOrigin may specify its own maxAttempts,
        /// retryConditions and failoverOrigin to control its own cache fill failures.
        /// The total number of allowed attempts to cache fill across this and failover origins is limited to four.
        /// The total time allowed for cache fill attempts across this and failover origins can be controlled with maxAttemptsTimeout.
        /// The last valid, non-retried response from all origins will be returned to the client.
        /// If no origin returns a valid response, an HTTP 502 will be returned to the client.
        /// Defaults to 1. Must be a value greater than 0 and less than 4.
        /// </summary>
        [Output("maxAttempts")]
        public Output<int?> MaxAttempts { get; private set; } = null!;

        /// <summary>
        /// Name of the resource; provided by the client when the resource is created.
        /// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
        /// and all following characters must be a dash, underscore, letter or digit.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A fully qualified domain name (FQDN) or IP address reachable over the public Internet, or the address of a Google Cloud Storage bucket.
        /// This address will be used as the origin for cache requests - e.g. FQDN: media-backend.example.com, IPv4: 35.218.1.1, IPv6: 2607:f8b0:4012:809::200e, Cloud Storage: gs://bucketname
        /// When providing an FQDN (hostname), it must be publicly resolvable (e.g. via Google public DNS) and IP addresses must be publicly routable.  It must not contain a protocol (e.g., https://) and it must not contain any slashes.
        /// If a Cloud Storage bucket is provided, it must be in the canonical "gs://bucketname" format. Other forms, such as "storage.googleapis.com", will be rejected.
        /// </summary>
        [Output("originAddress")]
        public Output<string> OriginAddress { get; private set; } = null!;

        /// <summary>
        /// The port to connect to the origin on.
        /// Defaults to port 443 for HTTP2 and HTTPS protocols, and port 80 for HTTP.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The protocol to use to connect to the configured origin. Defaults to HTTP2, and it is strongly recommended that users use HTTP2 for both security &amp; performance.
        /// When using HTTP2 or HTTPS as the protocol, a valid, publicly-signed, unexpired TLS (SSL) certificate must be presented by the origin server.
        /// Possible values are `HTTP2`, `HTTPS`, and `HTTP`.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// Specifies one or more retry conditions for the configured origin.
        /// If the failure mode during a connection attempt to the origin matches the configured retryCondition(s),
        /// the origin request will be retried up to maxAttempts times. The failoverOrigin, if configured, will then be used to satisfy the request.
        /// The default retryCondition is "CONNECT_FAILURE".
        /// retryConditions apply to this origin, and not subsequent failoverOrigin(s),
        /// which may specify their own retryConditions and maxAttempts.
        /// Valid values are:
        /// - CONNECT_FAILURE: Retry on failures connecting to origins, for example due to connection timeouts.
        /// - HTTP_5XX: Retry if the origin responds with any 5xx response code, or if the origin does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams.
        /// - GATEWAY_ERROR: Similar to 5xx, but only applies to response codes 502, 503 or 504.
        /// - RETRIABLE_4XX: Retry for retriable 4xx response codes, which include HTTP 409 (Conflict) and HTTP 429 (Too Many Requests)
        /// - NOT_FOUND: Retry if the origin returns a HTTP 404 (Not Found). This can be useful when generating video content, and the segment is not available yet.
        /// - FORBIDDEN: Retry if the origin returns a HTTP 403 (Forbidden).
        /// Each value may be one of `CONNECT_FAILURE`, `HTTP_5XX`, `GATEWAY_ERROR`, `RETRIABLE_4XX`, `NOT_FOUND`, and `FORBIDDEN`.
        /// </summary>
        [Output("retryConditions")]
        public Output<ImmutableArray<string>> RetryConditions { get; private set; } = null!;

        /// <summary>
        /// The connection and HTTP timeout configuration for this origin.
        /// Structure is documented below.
        /// </summary>
        [Output("timeout")]
        public Output<Outputs.EdgeCacheOriginTimeout?> Timeout { get; private set; } = null!;


        /// <summary>
        /// Create a EdgeCacheOrigin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgeCacheOrigin(string name, EdgeCacheOriginArgs args, CustomResourceOptions? options = null)
            : base("gcp:networkservices/edgeCacheOrigin:EdgeCacheOrigin", name, args ?? new EdgeCacheOriginArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgeCacheOrigin(string name, Input<string> id, EdgeCacheOriginState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networkservices/edgeCacheOrigin:EdgeCacheOrigin", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgeCacheOrigin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgeCacheOrigin Get(string name, Input<string> id, EdgeCacheOriginState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgeCacheOrigin(name, id, state, options);
        }
    }

    public sealed class EdgeCacheOriginArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Origin resource to try when the current origin cannot be reached.
        /// After maxAttempts is reached, the configured failoverOrigin will be used to fulfil the request.
        /// The value of timeout.maxAttemptsTimeout dictates the timeout across all origins.
        /// A reference to a Topic resource.
        /// </summary>
        [Input("failoverOrigin")]
        public Input<string>? FailoverOrigin { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the EdgeCache resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The maximum number of attempts to cache fill from this origin. Another attempt is made when a cache fill fails with one of the retryConditions.
        /// Once maxAttempts to this origin have failed the failoverOrigin will be used, if one is specified. That failoverOrigin may specify its own maxAttempts,
        /// retryConditions and failoverOrigin to control its own cache fill failures.
        /// The total number of allowed attempts to cache fill across this and failover origins is limited to four.
        /// The total time allowed for cache fill attempts across this and failover origins can be controlled with maxAttemptsTimeout.
        /// The last valid, non-retried response from all origins will be returned to the client.
        /// If no origin returns a valid response, an HTTP 502 will be returned to the client.
        /// Defaults to 1. Must be a value greater than 0 and less than 4.
        /// </summary>
        [Input("maxAttempts")]
        public Input<int>? MaxAttempts { get; set; }

        /// <summary>
        /// Name of the resource; provided by the client when the resource is created.
        /// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
        /// and all following characters must be a dash, underscore, letter or digit.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A fully qualified domain name (FQDN) or IP address reachable over the public Internet, or the address of a Google Cloud Storage bucket.
        /// This address will be used as the origin for cache requests - e.g. FQDN: media-backend.example.com, IPv4: 35.218.1.1, IPv6: 2607:f8b0:4012:809::200e, Cloud Storage: gs://bucketname
        /// When providing an FQDN (hostname), it must be publicly resolvable (e.g. via Google public DNS) and IP addresses must be publicly routable.  It must not contain a protocol (e.g., https://) and it must not contain any slashes.
        /// If a Cloud Storage bucket is provided, it must be in the canonical "gs://bucketname" format. Other forms, such as "storage.googleapis.com", will be rejected.
        /// </summary>
        [Input("originAddress", required: true)]
        public Input<string> OriginAddress { get; set; } = null!;

        /// <summary>
        /// The port to connect to the origin on.
        /// Defaults to port 443 for HTTP2 and HTTPS protocols, and port 80 for HTTP.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The protocol to use to connect to the configured origin. Defaults to HTTP2, and it is strongly recommended that users use HTTP2 for both security &amp; performance.
        /// When using HTTP2 or HTTPS as the protocol, a valid, publicly-signed, unexpired TLS (SSL) certificate must be presented by the origin server.
        /// Possible values are `HTTP2`, `HTTPS`, and `HTTP`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("retryConditions")]
        private InputList<string>? _retryConditions;

        /// <summary>
        /// Specifies one or more retry conditions for the configured origin.
        /// If the failure mode during a connection attempt to the origin matches the configured retryCondition(s),
        /// the origin request will be retried up to maxAttempts times. The failoverOrigin, if configured, will then be used to satisfy the request.
        /// The default retryCondition is "CONNECT_FAILURE".
        /// retryConditions apply to this origin, and not subsequent failoverOrigin(s),
        /// which may specify their own retryConditions and maxAttempts.
        /// Valid values are:
        /// - CONNECT_FAILURE: Retry on failures connecting to origins, for example due to connection timeouts.
        /// - HTTP_5XX: Retry if the origin responds with any 5xx response code, or if the origin does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams.
        /// - GATEWAY_ERROR: Similar to 5xx, but only applies to response codes 502, 503 or 504.
        /// - RETRIABLE_4XX: Retry for retriable 4xx response codes, which include HTTP 409 (Conflict) and HTTP 429 (Too Many Requests)
        /// - NOT_FOUND: Retry if the origin returns a HTTP 404 (Not Found). This can be useful when generating video content, and the segment is not available yet.
        /// - FORBIDDEN: Retry if the origin returns a HTTP 403 (Forbidden).
        /// Each value may be one of `CONNECT_FAILURE`, `HTTP_5XX`, `GATEWAY_ERROR`, `RETRIABLE_4XX`, `NOT_FOUND`, and `FORBIDDEN`.
        /// </summary>
        public InputList<string> RetryConditions
        {
            get => _retryConditions ?? (_retryConditions = new InputList<string>());
            set => _retryConditions = value;
        }

        /// <summary>
        /// The connection and HTTP timeout configuration for this origin.
        /// Structure is documented below.
        /// </summary>
        [Input("timeout")]
        public Input<Inputs.EdgeCacheOriginTimeoutArgs>? Timeout { get; set; }

        public EdgeCacheOriginArgs()
        {
        }
        public static new EdgeCacheOriginArgs Empty => new EdgeCacheOriginArgs();
    }

    public sealed class EdgeCacheOriginState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Origin resource to try when the current origin cannot be reached.
        /// After maxAttempts is reached, the configured failoverOrigin will be used to fulfil the request.
        /// The value of timeout.maxAttemptsTimeout dictates the timeout across all origins.
        /// A reference to a Topic resource.
        /// </summary>
        [Input("failoverOrigin")]
        public Input<string>? FailoverOrigin { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the EdgeCache resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The maximum number of attempts to cache fill from this origin. Another attempt is made when a cache fill fails with one of the retryConditions.
        /// Once maxAttempts to this origin have failed the failoverOrigin will be used, if one is specified. That failoverOrigin may specify its own maxAttempts,
        /// retryConditions and failoverOrigin to control its own cache fill failures.
        /// The total number of allowed attempts to cache fill across this and failover origins is limited to four.
        /// The total time allowed for cache fill attempts across this and failover origins can be controlled with maxAttemptsTimeout.
        /// The last valid, non-retried response from all origins will be returned to the client.
        /// If no origin returns a valid response, an HTTP 502 will be returned to the client.
        /// Defaults to 1. Must be a value greater than 0 and less than 4.
        /// </summary>
        [Input("maxAttempts")]
        public Input<int>? MaxAttempts { get; set; }

        /// <summary>
        /// Name of the resource; provided by the client when the resource is created.
        /// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
        /// and all following characters must be a dash, underscore, letter or digit.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A fully qualified domain name (FQDN) or IP address reachable over the public Internet, or the address of a Google Cloud Storage bucket.
        /// This address will be used as the origin for cache requests - e.g. FQDN: media-backend.example.com, IPv4: 35.218.1.1, IPv6: 2607:f8b0:4012:809::200e, Cloud Storage: gs://bucketname
        /// When providing an FQDN (hostname), it must be publicly resolvable (e.g. via Google public DNS) and IP addresses must be publicly routable.  It must not contain a protocol (e.g., https://) and it must not contain any slashes.
        /// If a Cloud Storage bucket is provided, it must be in the canonical "gs://bucketname" format. Other forms, such as "storage.googleapis.com", will be rejected.
        /// </summary>
        [Input("originAddress")]
        public Input<string>? OriginAddress { get; set; }

        /// <summary>
        /// The port to connect to the origin on.
        /// Defaults to port 443 for HTTP2 and HTTPS protocols, and port 80 for HTTP.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The protocol to use to connect to the configured origin. Defaults to HTTP2, and it is strongly recommended that users use HTTP2 for both security &amp; performance.
        /// When using HTTP2 or HTTPS as the protocol, a valid, publicly-signed, unexpired TLS (SSL) certificate must be presented by the origin server.
        /// Possible values are `HTTP2`, `HTTPS`, and `HTTP`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("retryConditions")]
        private InputList<string>? _retryConditions;

        /// <summary>
        /// Specifies one or more retry conditions for the configured origin.
        /// If the failure mode during a connection attempt to the origin matches the configured retryCondition(s),
        /// the origin request will be retried up to maxAttempts times. The failoverOrigin, if configured, will then be used to satisfy the request.
        /// The default retryCondition is "CONNECT_FAILURE".
        /// retryConditions apply to this origin, and not subsequent failoverOrigin(s),
        /// which may specify their own retryConditions and maxAttempts.
        /// Valid values are:
        /// - CONNECT_FAILURE: Retry on failures connecting to origins, for example due to connection timeouts.
        /// - HTTP_5XX: Retry if the origin responds with any 5xx response code, or if the origin does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams.
        /// - GATEWAY_ERROR: Similar to 5xx, but only applies to response codes 502, 503 or 504.
        /// - RETRIABLE_4XX: Retry for retriable 4xx response codes, which include HTTP 409 (Conflict) and HTTP 429 (Too Many Requests)
        /// - NOT_FOUND: Retry if the origin returns a HTTP 404 (Not Found). This can be useful when generating video content, and the segment is not available yet.
        /// - FORBIDDEN: Retry if the origin returns a HTTP 403 (Forbidden).
        /// Each value may be one of `CONNECT_FAILURE`, `HTTP_5XX`, `GATEWAY_ERROR`, `RETRIABLE_4XX`, `NOT_FOUND`, and `FORBIDDEN`.
        /// </summary>
        public InputList<string> RetryConditions
        {
            get => _retryConditions ?? (_retryConditions = new InputList<string>());
            set => _retryConditions = value;
        }

        /// <summary>
        /// The connection and HTTP timeout configuration for this origin.
        /// Structure is documented below.
        /// </summary>
        [Input("timeout")]
        public Input<Inputs.EdgeCacheOriginTimeoutGetArgs>? Timeout { get; set; }

        public EdgeCacheOriginState()
        {
        }
        public static new EdgeCacheOriginState Empty => new EdgeCacheOriginState();
    }
}
