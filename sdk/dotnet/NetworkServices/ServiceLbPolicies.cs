// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkServices
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Network Services Service Lb Policies Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.NetworkServices.ServiceLbPolicies("default", new()
    ///     {
    ///         Name = "my-lb-policy",
    ///         Location = "global",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Services Service Lb Policies Advanced
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.NetworkServices.ServiceLbPolicies("default", new()
    ///     {
    ///         Name = "my-lb-policy",
    ///         Location = "global",
    ///         Description = "my description",
    ///         LoadBalancingAlgorithm = "SPRAY_TO_REGION",
    ///         AutoCapacityDrain = new Gcp.NetworkServices.Inputs.ServiceLbPoliciesAutoCapacityDrainArgs
    ///         {
    ///             Enable = true,
    ///         },
    ///         FailoverConfig = new Gcp.NetworkServices.Inputs.ServiceLbPoliciesFailoverConfigArgs
    ///         {
    ///             FailoverHealthThreshold = 70,
    ///         },
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "my-lb-backend",
    ///         Description = "my description",
    ///         LoadBalancingScheme = "INTERNAL_SELF_MANAGED",
    ///         Protocol = "HTTP",
    ///         ServiceLbPolicy = @default.Id.Apply(id =&gt; $"//networkservices.googleapis.com/{id}"),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ServiceLbPolicies can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/serviceLbPolicies/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, ServiceLbPolicies can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkservices/serviceLbPolicies:ServiceLbPolicies default projects/{{project}}/locations/{{location}}/serviceLbPolicies/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkservices/serviceLbPolicies:ServiceLbPolicies default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkservices/serviceLbPolicies:ServiceLbPolicies default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networkservices/serviceLbPolicies:ServiceLbPolicies")]
    public partial class ServiceLbPolicies : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Option to specify if an unhealthy MIG/NEG should be considered for global load balancing and traffic routing.
        /// Structure is documented below.
        /// </summary>
        [Output("autoCapacityDrain")]
        public Output<Outputs.ServiceLbPoliciesAutoCapacityDrain?> AutoCapacityDrain { get; private set; } = null!;

        /// <summary>
        /// Time the ServiceLbPolicy was created in UTC.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Option to specify health based failover behavior. This is not related to Network load balancer FailoverPolicy.
        /// Structure is documented below.
        /// </summary>
        [Output("failoverConfig")]
        public Output<Outputs.ServiceLbPoliciesFailoverConfig?> FailoverConfig { get; private set; } = null!;

        /// <summary>
        /// Set of label tags associated with the ServiceLbPolicy resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
        /// Possible values are: `SPRAY_TO_REGION`, `SPRAY_TO_WORLD`, `WATERFALL_BY_REGION`, `WATERFALL_BY_ZONE`.
        /// </summary>
        [Output("loadBalancingAlgorithm")]
        public Output<string?> LoadBalancingAlgorithm { get; private set; } = null!;

        /// <summary>
        /// The location of the service lb policy.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Time the ServiceLbPolicy was updated in UTC.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceLbPolicies resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceLbPolicies(string name, ServiceLbPoliciesArgs args, CustomResourceOptions? options = null)
            : base("gcp:networkservices/serviceLbPolicies:ServiceLbPolicies", name, args ?? new ServiceLbPoliciesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceLbPolicies(string name, Input<string> id, ServiceLbPoliciesState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networkservices/serviceLbPolicies:ServiceLbPolicies", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceLbPolicies resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceLbPolicies Get(string name, Input<string> id, ServiceLbPoliciesState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceLbPolicies(name, id, state, options);
        }
    }

    public sealed class ServiceLbPoliciesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Option to specify if an unhealthy MIG/NEG should be considered for global load balancing and traffic routing.
        /// Structure is documented below.
        /// </summary>
        [Input("autoCapacityDrain")]
        public Input<Inputs.ServiceLbPoliciesAutoCapacityDrainArgs>? AutoCapacityDrain { get; set; }

        /// <summary>
        /// A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Option to specify health based failover behavior. This is not related to Network load balancer FailoverPolicy.
        /// Structure is documented below.
        /// </summary>
        [Input("failoverConfig")]
        public Input<Inputs.ServiceLbPoliciesFailoverConfigArgs>? FailoverConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the ServiceLbPolicy resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
        /// Possible values are: `SPRAY_TO_REGION`, `SPRAY_TO_WORLD`, `WATERFALL_BY_REGION`, `WATERFALL_BY_ZONE`.
        /// </summary>
        [Input("loadBalancingAlgorithm")]
        public Input<string>? LoadBalancingAlgorithm { get; set; }

        /// <summary>
        /// The location of the service lb policy.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public ServiceLbPoliciesArgs()
        {
        }
        public static new ServiceLbPoliciesArgs Empty => new ServiceLbPoliciesArgs();
    }

    public sealed class ServiceLbPoliciesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Option to specify if an unhealthy MIG/NEG should be considered for global load balancing and traffic routing.
        /// Structure is documented below.
        /// </summary>
        [Input("autoCapacityDrain")]
        public Input<Inputs.ServiceLbPoliciesAutoCapacityDrainGetArgs>? AutoCapacityDrain { get; set; }

        /// <summary>
        /// Time the ServiceLbPolicy was created in UTC.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Option to specify health based failover behavior. This is not related to Network load balancer FailoverPolicy.
        /// Structure is documented below.
        /// </summary>
        [Input("failoverConfig")]
        public Input<Inputs.ServiceLbPoliciesFailoverConfigGetArgs>? FailoverConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the ServiceLbPolicy resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
        /// Possible values are: `SPRAY_TO_REGION`, `SPRAY_TO_WORLD`, `WATERFALL_BY_REGION`, `WATERFALL_BY_ZONE`.
        /// </summary>
        [Input("loadBalancingAlgorithm")]
        public Input<string>? LoadBalancingAlgorithm { get; set; }

        /// <summary>
        /// The location of the service lb policy.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Time the ServiceLbPolicy was updated in UTC.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public ServiceLbPoliciesState()
        {
        }
        public static new ServiceLbPoliciesState Empty => new ServiceLbPoliciesState();
    }
}
