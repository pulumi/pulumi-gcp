// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkServices
{
    /// <summary>
    /// EdgeCacheService defines the IP addresses, protocols, security policies, cache policies and routing configuration.
    /// 
    /// &gt; **Warning:** These resources require allow-listing to use, and are not openly available to all Cloud customers. Engage with your Cloud account team to discuss how to onboard.
    /// 
    /// ## Example Usage
    /// ### Network Services Edge Cache Service Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dest = new Gcp.Storage.Bucket("dest", new()
    ///     {
    ///         Location = "US",
    ///         ForceDestroy = true,
    ///     });
    /// 
    ///     var instanceEdgeCacheOrigin = new Gcp.NetworkServices.EdgeCacheOrigin("instanceEdgeCacheOrigin", new()
    ///     {
    ///         OriginAddress = dest.Url,
    ///         Description = "The default bucket for media edge test",
    ///         MaxAttempts = 2,
    ///         Timeout = new Gcp.NetworkServices.Inputs.EdgeCacheOriginTimeoutArgs
    ///         {
    ///             ConnectTimeout = "10s",
    ///         },
    ///     });
    /// 
    ///     var instanceEdgeCacheService = new Gcp.NetworkServices.EdgeCacheService("instanceEdgeCacheService", new()
    ///     {
    ///         Description = "some description",
    ///         Routing = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingArgs
    ///         {
    ///             HostRules = new[]
    ///             {
    ///                 new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingHostRuleArgs
    ///                 {
    ///                     Description = "host rule description",
    ///                     Hosts = new[]
    ///                     {
    ///                         "sslcert.tf-test.club",
    ///                     },
    ///                     PathMatcher = "routes",
    ///                 },
    ///             },
    ///             PathMatchers = new[]
    ///             {
    ///                 new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherArgs
    ///                 {
    ///                     Name = "routes",
    ///                     RouteRules = new[]
    ///                     {
    ///                         new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleArgs
    ///                         {
    ///                             Description = "a route rule to match against",
    ///                             Priority = "1",
    ///                             MatchRules = new[]
    ///                             {
    ///                                 new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs
    ///                                 {
    ///                                     PrefixMatch = "/",
    ///                                 },
    ///                             },
    ///                             Origin = instanceEdgeCacheOrigin.Name,
    ///                             RouteAction = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs
    ///                             {
    ///                                 CdnPolicy = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs
    ///                                 {
    ///                                     CacheMode = "CACHE_ALL_STATIC",
    ///                                     DefaultTtl = "3600s",
    ///                                 },
    ///                             },
    ///                             HeaderAction = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs
    ///                             {
    ///                                 ResponseHeaderToAdds = new[]
    ///                                 {
    ///                                     new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs
    ///                                     {
    ///                                         HeaderName = "x-cache-status",
    ///                                         HeaderValue = "{cdn_cache_status}",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Services Edge Cache Service Advanced
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dest = new Gcp.Storage.Bucket("dest", new()
    ///     {
    ///         Location = "US",
    ///         ForceDestroy = true,
    ///     });
    /// 
    ///     var google = new Gcp.NetworkServices.EdgeCacheOrigin("google", new()
    ///     {
    ///         OriginAddress = "google.com",
    ///         Description = "The default bucket for media edge test",
    ///         MaxAttempts = 2,
    ///         Timeout = new Gcp.NetworkServices.Inputs.EdgeCacheOriginTimeoutArgs
    ///         {
    ///             ConnectTimeout = "10s",
    ///         },
    ///     });
    /// 
    ///     var instanceEdgeCacheOrigin = new Gcp.NetworkServices.EdgeCacheOrigin("instanceEdgeCacheOrigin", new()
    ///     {
    ///         OriginAddress = dest.Url,
    ///         Description = "The default bucket for media edge test",
    ///         MaxAttempts = 2,
    ///         Timeout = new Gcp.NetworkServices.Inputs.EdgeCacheOriginTimeoutArgs
    ///         {
    ///             ConnectTimeout = "10s",
    ///         },
    ///     });
    /// 
    ///     var instanceEdgeCacheService = new Gcp.NetworkServices.EdgeCacheService("instanceEdgeCacheService", new()
    ///     {
    ///         Description = "some description",
    ///         DisableQuic = true,
    ///         DisableHttp2 = true,
    ///         Labels = 
    ///         {
    ///             { "a", "b" },
    ///         },
    ///         Routing = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingArgs
    ///         {
    ///             HostRules = new[]
    ///             {
    ///                 new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingHostRuleArgs
    ///                 {
    ///                     Description = "host rule description",
    ///                     Hosts = new[]
    ///                     {
    ///                         "sslcert.tf-test.club",
    ///                     },
    ///                     PathMatcher = "routes",
    ///                 },
    ///                 new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingHostRuleArgs
    ///                 {
    ///                     Description = "host rule2",
    ///                     Hosts = new[]
    ///                     {
    ///                         "sslcert.tf-test2.club",
    ///                     },
    ///                     PathMatcher = "routes",
    ///                 },
    ///                 new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingHostRuleArgs
    ///                 {
    ///                     Description = "host rule3",
    ///                     Hosts = new[]
    ///                     {
    ///                         "sslcert.tf-test3.club",
    ///                     },
    ///                     PathMatcher = "routesAdvanced",
    ///                 },
    ///             },
    ///             PathMatchers = new[]
    ///             {
    ///                 new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherArgs
    ///                 {
    ///                     Name = "routes",
    ///                     RouteRules = new[]
    ///                     {
    ///                         new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleArgs
    ///                         {
    ///                             Description = "a route rule to match against",
    ///                             Priority = "1",
    ///                             MatchRules = new[]
    ///                             {
    ///                                 new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs
    ///                                 {
    ///                                     PrefixMatch = "/",
    ///                                 },
    ///                             },
    ///                             Origin = instanceEdgeCacheOrigin.Name,
    ///                             RouteAction = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs
    ///                             {
    ///                                 CdnPolicy = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs
    ///                                 {
    ///                                     CacheMode = "CACHE_ALL_STATIC",
    ///                                     DefaultTtl = "3600s",
    ///                                 },
    ///                             },
    ///                             HeaderAction = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs
    ///                             {
    ///                                 ResponseHeaderToAdds = new[]
    ///                                 {
    ///                                     new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs
    ///                                     {
    ///                                         HeaderName = "x-cache-status",
    ///                                         HeaderValue = "{cdn_cache_status}",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherArgs
    ///                 {
    ///                     Name = "routesAdvanced",
    ///                     Description = "an advanced ruleset",
    ///                     RouteRules = new[]
    ///                     {
    ///                         new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleArgs
    ///                         {
    ///                             Description = "an advanced route rule to match against",
    ///                             Priority = "1",
    ///                             MatchRules = new[]
    ///                             {
    ///                                 new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs
    ///                                 {
    ///                                     PrefixMatch = "/potato/",
    ///                                     QueryParameterMatches = new[]
    ///                                     {
    ///                                         new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs
    ///                                         {
    ///                                             Name = "debug",
    ///                                             PresentMatch = true,
    ///                                         },
    ///                                         new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs
    ///                                         {
    ///                                             Name = "state",
    ///                                             ExactMatch = "debug",
    ///                                         },
    ///                                     },
    ///                                 },
    ///                                 new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs
    ///                                 {
    ///                                     FullPathMatch = "/apple",
    ///                                 },
    ///                             },
    ///                             HeaderAction = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs
    ///                             {
    ///                                 RequestHeaderToAdds = new[]
    ///                                 {
    ///                                     new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs
    ///                                     {
    ///                                         HeaderName = "debug",
    ///                                         HeaderValue = "true",
    ///                                         Replace = true,
    ///                                     },
    ///                                     new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs
    ///                                     {
    ///                                         HeaderName = "potato",
    ///                                         HeaderValue = "plant",
    ///                                     },
    ///                                 },
    ///                                 ResponseHeaderToAdds = new[]
    ///                                 {
    ///                                     new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs
    ///                                     {
    ///                                         HeaderName = "potato",
    ///                                         HeaderValue = "plant",
    ///                                         Replace = true,
    ///                                     },
    ///                                 },
    ///                                 RequestHeaderToRemoves = new[]
    ///                                 {
    ///                                     new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs
    ///                                     {
    ///                                         HeaderName = "prod",
    ///                                     },
    ///                                 },
    ///                                 ResponseHeaderToRemoves = new[]
    ///                                 {
    ///                                     new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs
    ///                                     {
    ///                                         HeaderName = "prod",
    ///                                     },
    ///                                 },
    ///                             },
    ///                             Origin = instanceEdgeCacheOrigin.Name,
    ///                             RouteAction = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs
    ///                             {
    ///                                 CdnPolicy = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs
    ///                                 {
    ///                                     CacheMode = "CACHE_ALL_STATIC",
    ///                                     DefaultTtl = "3800s",
    ///                                     ClientTtl = "3600s",
    ///                                     MaxTtl = "9000s",
    ///                                     CacheKeyPolicy = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs
    ///                                     {
    ///                                         IncludeProtocol = true,
    ///                                         ExcludeHost = true,
    ///                                         IncludedQueryParameters = new[]
    ///                                         {
    ///                                             "apple",
    ///                                             "dev",
    ///                                             "santa",
    ///                                             "claus",
    ///                                         },
    ///                                         IncludedHeaderNames = new[]
    ///                                         {
    ///                                             "banana",
    ///                                         },
    ///                                         IncludedCookieNames = new[]
    ///                                         {
    ///                                             "orange",
    ///                                         },
    ///                                     },
    ///                                     NegativeCaching = true,
    ///                                     SignedRequestMode = "DISABLED",
    ///                                     NegativeCachingPolicy = 
    ///                                     {
    ///                                         { "500", "3000s" },
    ///                                     },
    ///                                 },
    ///                                 UrlRewrite = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs
    ///                                 {
    ///                                     PathPrefixRewrite = "/dev",
    ///                                     HostRewrite = "dev.club",
    ///                                 },
    ///                                 CorsPolicy = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs
    ///                                 {
    ///                                     MaxAge = "2500s",
    ///                                     AllowCredentials = true,
    ///                                     AllowOrigins = new[]
    ///                                     {
    ///                                         "*",
    ///                                     },
    ///                                     AllowMethods = new[]
    ///                                     {
    ///                                         "GET",
    ///                                     },
    ///                                     AllowHeaders = new[]
    ///                                     {
    ///                                         "dev",
    ///                                     },
    ///                                     ExposeHeaders = new[]
    ///                                     {
    ///                                         "prod",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                         new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleArgs
    ///                         {
    ///                             Description = "a second route rule to match against",
    ///                             Priority = "2",
    ///                             MatchRules = new[]
    ///                             {
    ///                                 new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs
    ///                                 {
    ///                                     FullPathMatch = "/yay",
    ///                                 },
    ///                             },
    ///                             Origin = instanceEdgeCacheOrigin.Name,
    ///                             RouteAction = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs
    ///                             {
    ///                                 CdnPolicy = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs
    ///                                 {
    ///                                     CacheMode = "CACHE_ALL_STATIC",
    ///                                     DefaultTtl = "3600s",
    ///                                     CacheKeyPolicy = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs
    ///                                     {
    ///                                         ExcludedQueryParameters = new[]
    ///                                         {
    ///                                             "dev",
    ///                                         },
    ///                                     },
    ///                                 },
    ///                                 CorsPolicy = new Gcp.NetworkServices.Inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs
    ///                                 {
    ///                                     MaxAge = "3000s",
    ///                                     AllowHeaders = new[]
    ///                                     {
    ///                                         "dev",
    ///                                     },
    ///                                     Disabled = true,
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         LogConfig = new Gcp.NetworkServices.Inputs.EdgeCacheServiceLogConfigArgs
    ///         {
    ///             Enable = true,
    ///             SampleRate = 0.01,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// EdgeCacheService can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:networkservices/edgeCacheService:EdgeCacheService default projects/{{project}}/locations/global/edgeCacheServices/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:networkservices/edgeCacheService:EdgeCacheService default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:networkservices/edgeCacheService:EdgeCacheService default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networkservices/edgeCacheService:EdgeCacheService")]
    public partial class EdgeCacheService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Disables HTTP/2.
        /// HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use and reduces connection setup overhead by sending multiple streams over the same connection.
        /// Some legacy HTTP clients may have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from being advertised and negotiated.
        /// </summary>
        [Output("disableHttp2")]
        public Output<bool?> DisableHttp2 { get; private set; } = null!;

        /// <summary>
        /// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
        /// </summary>
        [Output("disableQuic")]
        public Output<bool> DisableQuic { get; private set; } = null!;

        /// <summary>
        /// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
        /// </summary>
        [Output("edgeSecurityPolicy")]
        public Output<string?> EdgeSecurityPolicy { get; private set; } = null!;

        /// <summary>
        /// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
        /// Note that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
        /// </summary>
        [Output("edgeSslCertificates")]
        public Output<ImmutableArray<string>> EdgeSslCertificates { get; private set; } = null!;

        /// <summary>
        /// The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
        /// </summary>
        [Output("ipv4Addresses")]
        public Output<ImmutableArray<string>> Ipv4Addresses { get; private set; } = null!;

        /// <summary>
        /// The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
        /// </summary>
        [Output("ipv6Addresses")]
        public Output<ImmutableArray<string>> Ipv6Addresses { get; private set; } = null!;

        /// <summary>
        /// Set of label tags associated with the EdgeCache resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
        /// Structure is documented below.
        /// </summary>
        [Output("logConfig")]
        public Output<Outputs.EdgeCacheServiceLogConfig?> LogConfig { get; private set; } = null!;

        /// <summary>
        /// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Require TLS (HTTPS) for all clients connecting to this service.
        /// Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
        /// You must have at least one (1) edgeSslCertificate specified to enable this.
        /// </summary>
        [Output("requireTls")]
        public Output<bool> RequireTls { get; private set; } = null!;

        /// <summary>
        /// Defines how requests are routed, modified, cached and/or which origin content is filled from.
        /// Structure is documented below.
        /// </summary>
        [Output("routing")]
        public Output<Outputs.EdgeCacheServiceRouting> Routing { get; private set; } = null!;

        /// <summary>
        /// URL of the SslPolicy resource that will be associated with the EdgeCacheService.
        /// If not set, the EdgeCacheService has no SSL policy configured, and will default to the "COMPATIBLE" policy.
        /// </summary>
        [Output("sslPolicy")]
        public Output<string?> SslPolicy { get; private set; } = null!;


        /// <summary>
        /// Create a EdgeCacheService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgeCacheService(string name, EdgeCacheServiceArgs args, CustomResourceOptions? options = null)
            : base("gcp:networkservices/edgeCacheService:EdgeCacheService", name, args ?? new EdgeCacheServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgeCacheService(string name, Input<string> id, EdgeCacheServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networkservices/edgeCacheService:EdgeCacheService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgeCacheService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgeCacheService Get(string name, Input<string> id, EdgeCacheServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgeCacheService(name, id, state, options);
        }
    }

    public sealed class EdgeCacheServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Disables HTTP/2.
        /// HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use and reduces connection setup overhead by sending multiple streams over the same connection.
        /// Some legacy HTTP clients may have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from being advertised and negotiated.
        /// </summary>
        [Input("disableHttp2")]
        public Input<bool>? DisableHttp2 { get; set; }

        /// <summary>
        /// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
        /// </summary>
        [Input("disableQuic")]
        public Input<bool>? DisableQuic { get; set; }

        /// <summary>
        /// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
        /// </summary>
        [Input("edgeSecurityPolicy")]
        public Input<string>? EdgeSecurityPolicy { get; set; }

        [Input("edgeSslCertificates")]
        private InputList<string>? _edgeSslCertificates;

        /// <summary>
        /// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
        /// Note that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
        /// </summary>
        public InputList<string> EdgeSslCertificates
        {
            get => _edgeSslCertificates ?? (_edgeSslCertificates = new InputList<string>());
            set => _edgeSslCertificates = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the EdgeCache resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
        /// Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.EdgeCacheServiceLogConfigArgs>? LogConfig { get; set; }

        /// <summary>
        /// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Require TLS (HTTPS) for all clients connecting to this service.
        /// Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
        /// You must have at least one (1) edgeSslCertificate specified to enable this.
        /// </summary>
        [Input("requireTls")]
        public Input<bool>? RequireTls { get; set; }

        /// <summary>
        /// Defines how requests are routed, modified, cached and/or which origin content is filled from.
        /// Structure is documented below.
        /// </summary>
        [Input("routing", required: true)]
        public Input<Inputs.EdgeCacheServiceRoutingArgs> Routing { get; set; } = null!;

        /// <summary>
        /// URL of the SslPolicy resource that will be associated with the EdgeCacheService.
        /// If not set, the EdgeCacheService has no SSL policy configured, and will default to the "COMPATIBLE" policy.
        /// </summary>
        [Input("sslPolicy")]
        public Input<string>? SslPolicy { get; set; }

        public EdgeCacheServiceArgs()
        {
        }
        public static new EdgeCacheServiceArgs Empty => new EdgeCacheServiceArgs();
    }

    public sealed class EdgeCacheServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Disables HTTP/2.
        /// HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use and reduces connection setup overhead by sending multiple streams over the same connection.
        /// Some legacy HTTP clients may have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from being advertised and negotiated.
        /// </summary>
        [Input("disableHttp2")]
        public Input<bool>? DisableHttp2 { get; set; }

        /// <summary>
        /// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
        /// </summary>
        [Input("disableQuic")]
        public Input<bool>? DisableQuic { get; set; }

        /// <summary>
        /// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
        /// </summary>
        [Input("edgeSecurityPolicy")]
        public Input<string>? EdgeSecurityPolicy { get; set; }

        [Input("edgeSslCertificates")]
        private InputList<string>? _edgeSslCertificates;

        /// <summary>
        /// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
        /// Note that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
        /// </summary>
        public InputList<string> EdgeSslCertificates
        {
            get => _edgeSslCertificates ?? (_edgeSslCertificates = new InputList<string>());
            set => _edgeSslCertificates = value;
        }

        [Input("ipv4Addresses")]
        private InputList<string>? _ipv4Addresses;

        /// <summary>
        /// The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
        /// </summary>
        public InputList<string> Ipv4Addresses
        {
            get => _ipv4Addresses ?? (_ipv4Addresses = new InputList<string>());
            set => _ipv4Addresses = value;
        }

        [Input("ipv6Addresses")]
        private InputList<string>? _ipv6Addresses;

        /// <summary>
        /// The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
        /// </summary>
        public InputList<string> Ipv6Addresses
        {
            get => _ipv6Addresses ?? (_ipv6Addresses = new InputList<string>());
            set => _ipv6Addresses = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the EdgeCache resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
        /// Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.EdgeCacheServiceLogConfigGetArgs>? LogConfig { get; set; }

        /// <summary>
        /// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Require TLS (HTTPS) for all clients connecting to this service.
        /// Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
        /// You must have at least one (1) edgeSslCertificate specified to enable this.
        /// </summary>
        [Input("requireTls")]
        public Input<bool>? RequireTls { get; set; }

        /// <summary>
        /// Defines how requests are routed, modified, cached and/or which origin content is filled from.
        /// Structure is documented below.
        /// </summary>
        [Input("routing")]
        public Input<Inputs.EdgeCacheServiceRoutingGetArgs>? Routing { get; set; }

        /// <summary>
        /// URL of the SslPolicy resource that will be associated with the EdgeCacheService.
        /// If not set, the EdgeCacheService has no SSL policy configured, and will default to the "COMPATIBLE" policy.
        /// </summary>
        [Input("sslPolicy")]
        public Input<string>? SslPolicy { get; set; }

        public EdgeCacheServiceState()
        {
        }
        public static new EdgeCacheServiceState Empty => new EdgeCacheServiceState();
    }
}
