// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkServices
{
    /// <summary>
    /// TcpRoute is the resource defining how TCP traffic should be routed by a Mesh/Gateway resource.
    /// 
    /// To get more information about TcpRoute, see:
    /// 
    /// * [API documentation](https://cloud.google.com/traffic-director/docs/reference/network-services/rest/v1beta1/projects.locations.tcpRoutes)
    /// * How-to Guides
    ///     * [Setup TCP Services](https://cloud.google.com/traffic-director/docs/set-up-tcp-route)
    /// 
    /// ## Example Usage
    /// 
    /// ### Network Services Tcp Route Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "backend-service-health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "my-backend-service",
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var defaultTcpRoute = new Gcp.NetworkServices.TcpRoute("default", new()
    ///     {
    ///         Name = "my-tcp-route",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Description = "my description",
    ///         Rules = new[]
    ///         {
    ///             new Gcp.NetworkServices.Inputs.TcpRouteRuleArgs
    ///             {
    ///                 Matches = new[]
    ///                 {
    ///                     new Gcp.NetworkServices.Inputs.TcpRouteRuleMatchArgs
    ///                     {
    ///                         Address = "10.0.0.1/32",
    ///                         Port = "8081",
    ///                     },
    ///                 },
    ///                 Action = new Gcp.NetworkServices.Inputs.TcpRouteRuleActionArgs
    ///                 {
    ///                     Destinations = new[]
    ///                     {
    ///                         new Gcp.NetworkServices.Inputs.TcpRouteRuleActionDestinationArgs
    ///                         {
    ///                             ServiceName = @default.Id,
    ///                             Weight = 1,
    ///                         },
    ///                     },
    ///                     OriginalDestination = false,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Services Tcp Route Actions
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "backend-service-health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "my-backend-service",
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var defaultTcpRoute = new Gcp.NetworkServices.TcpRoute("default", new()
    ///     {
    ///         Name = "my-tcp-route",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Description = "my description",
    ///         Rules = new[]
    ///         {
    ///             new Gcp.NetworkServices.Inputs.TcpRouteRuleArgs
    ///             {
    ///                 Action = new Gcp.NetworkServices.Inputs.TcpRouteRuleActionArgs
    ///                 {
    ///                     Destinations = new[]
    ///                     {
    ///                         new Gcp.NetworkServices.Inputs.TcpRouteRuleActionDestinationArgs
    ///                         {
    ///                             ServiceName = @default.Id,
    ///                             Weight = 1,
    ///                         },
    ///                     },
    ///                     OriginalDestination = false,
    ///                     IdleTimeout = "60s",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Services Tcp Route Mesh Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "backend-service-health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "my-backend-service",
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var defaultMesh = new Gcp.NetworkServices.Mesh("default", new()
    ///     {
    ///         Name = "my-tcp-route",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Description = "my description",
    ///     });
    /// 
    ///     var defaultTcpRoute = new Gcp.NetworkServices.TcpRoute("default", new()
    ///     {
    ///         Name = "my-tcp-route",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Description = "my description",
    ///         Meshes = new[]
    ///         {
    ///             defaultMesh.Id,
    ///         },
    ///         Rules = new[]
    ///         {
    ///             new Gcp.NetworkServices.Inputs.TcpRouteRuleArgs
    ///             {
    ///                 Matches = new[]
    ///                 {
    ///                     new Gcp.NetworkServices.Inputs.TcpRouteRuleMatchArgs
    ///                     {
    ///                         Address = "10.0.0.1/32",
    ///                         Port = "8081",
    ///                     },
    ///                 },
    ///                 Action = new Gcp.NetworkServices.Inputs.TcpRouteRuleActionArgs
    ///                 {
    ///                     Destinations = new[]
    ///                     {
    ///                         new Gcp.NetworkServices.Inputs.TcpRouteRuleActionDestinationArgs
    ///                         {
    ///                             ServiceName = @default.Id,
    ///                             Weight = 1,
    ///                         },
    ///                     },
    ///                     OriginalDestination = false,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Services Tcp Route Gateway Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "backend-service-health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "my-backend-service",
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var defaultGateway = new Gcp.NetworkServices.Gateway("default", new()
    ///     {
    ///         Name = "my-tcp-route",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Description = "my description",
    ///         Scope = "my-scope",
    ///         Type = "OPEN_MESH",
    ///         Ports = new[]
    ///         {
    ///             443,
    ///         },
    ///     });
    /// 
    ///     var defaultTcpRoute = new Gcp.NetworkServices.TcpRoute("default", new()
    ///     {
    ///         Name = "my-tcp-route",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Description = "my description",
    ///         Gateways = new[]
    ///         {
    ///             defaultGateway.Id,
    ///         },
    ///         Rules = new[]
    ///         {
    ///             new Gcp.NetworkServices.Inputs.TcpRouteRuleArgs
    ///             {
    ///                 Matches = new[]
    ///                 {
    ///                     new Gcp.NetworkServices.Inputs.TcpRouteRuleMatchArgs
    ///                     {
    ///                         Address = "10.0.0.1/32",
    ///                         Port = "8081",
    ///                     },
    ///                 },
    ///                 Action = new Gcp.NetworkServices.Inputs.TcpRouteRuleActionArgs
    ///                 {
    ///                     Destinations = new[]
    ///                     {
    ///                         new Gcp.NetworkServices.Inputs.TcpRouteRuleActionDestinationArgs
    ///                         {
    ///                             ServiceName = @default.Id,
    ///                             Weight = 1,
    ///                         },
    ///                     },
    ///                     OriginalDestination = false,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// TcpRoute can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/global/tcpRoutes/{{name}}`
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, TcpRoute can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkservices/tcpRoute:TcpRoute default projects/{{project}}/locations/global/tcpRoutes/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkservices/tcpRoute:TcpRoute default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkservices/tcpRoute:TcpRoute default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networkservices/tcpRoute:TcpRoute")]
    public partial class TcpRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time the TcpRoute was created in UTC.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
        /// Each gateway reference should match the pattern: projects/*/locations/global/gateways/&lt;gateway_name&gt;
        /// </summary>
        [Output("gateways")]
        public Output<ImmutableArray<string>> Gateways { get; private set; } = null!;

        /// <summary>
        /// Set of label tags associated with the TcpRoute resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
        /// Each mesh reference should match the pattern: projects/*/locations/global/meshes/&lt;mesh_name&gt;
        /// The attached Mesh should be of a type SIDECAR
        /// </summary>
        [Output("meshes")]
        public Output<ImmutableArray<string>> Meshes { get; private set; } = null!;

        /// <summary>
        /// Name of the TcpRoute resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
        /// If there are multiple rules then the action taken will be the first rule to match.
        /// Structure is documented below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.TcpRouteRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Server-defined URL of this resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Time the TcpRoute was updated in UTC.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a TcpRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TcpRoute(string name, TcpRouteArgs args, CustomResourceOptions? options = null)
            : base("gcp:networkservices/tcpRoute:TcpRoute", name, args ?? new TcpRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TcpRoute(string name, Input<string> id, TcpRouteState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networkservices/tcpRoute:TcpRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TcpRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TcpRoute Get(string name, Input<string> id, TcpRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new TcpRoute(name, id, state, options);
        }
    }

    public sealed class TcpRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("gateways")]
        private InputList<string>? _gateways;

        /// <summary>
        /// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
        /// Each gateway reference should match the pattern: projects/*/locations/global/gateways/&lt;gateway_name&gt;
        /// </summary>
        public InputList<string> Gateways
        {
            get => _gateways ?? (_gateways = new InputList<string>());
            set => _gateways = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the TcpRoute resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("meshes")]
        private InputList<string>? _meshes;

        /// <summary>
        /// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
        /// Each mesh reference should match the pattern: projects/*/locations/global/meshes/&lt;mesh_name&gt;
        /// The attached Mesh should be of a type SIDECAR
        /// </summary>
        public InputList<string> Meshes
        {
            get => _meshes ?? (_meshes = new InputList<string>());
            set => _meshes = value;
        }

        /// <summary>
        /// Name of the TcpRoute resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("rules", required: true)]
        private InputList<Inputs.TcpRouteRuleArgs>? _rules;

        /// <summary>
        /// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
        /// If there are multiple rules then the action taken will be the first rule to match.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.TcpRouteRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.TcpRouteRuleArgs>());
            set => _rules = value;
        }

        public TcpRouteArgs()
        {
        }
        public static new TcpRouteArgs Empty => new TcpRouteArgs();
    }

    public sealed class TcpRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time the TcpRoute was created in UTC.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("gateways")]
        private InputList<string>? _gateways;

        /// <summary>
        /// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
        /// Each gateway reference should match the pattern: projects/*/locations/global/gateways/&lt;gateway_name&gt;
        /// </summary>
        public InputList<string> Gateways
        {
            get => _gateways ?? (_gateways = new InputList<string>());
            set => _gateways = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the TcpRoute resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("meshes")]
        private InputList<string>? _meshes;

        /// <summary>
        /// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
        /// Each mesh reference should match the pattern: projects/*/locations/global/meshes/&lt;mesh_name&gt;
        /// The attached Mesh should be of a type SIDECAR
        /// </summary>
        public InputList<string> Meshes
        {
            get => _meshes ?? (_meshes = new InputList<string>());
            set => _meshes = value;
        }

        /// <summary>
        /// Name of the TcpRoute resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("rules")]
        private InputList<Inputs.TcpRouteRuleGetArgs>? _rules;

        /// <summary>
        /// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
        /// If there are multiple rules then the action taken will be the first rule to match.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.TcpRouteRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.TcpRouteRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Server-defined URL of this resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// Time the TcpRoute was updated in UTC.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public TcpRouteState()
        {
        }
        public static new TcpRouteState Empty => new TcpRouteState();
    }
}
