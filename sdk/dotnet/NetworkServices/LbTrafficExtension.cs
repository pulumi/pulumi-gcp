// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkServices
{
    /// <summary>
    /// LbTrafficExtension is a resource that lets the extension service modify the headers and payloads of both requests and responses without impacting the choice of backend services or any other security policies associated with the backend service.
    /// 
    /// To get more information about LbTrafficExtension, see:
    /// 
    /// * [API documentation](https://cloud.google.com/service-extensions/docs/reference/rest/v1beta1/projects.locations.lbTrafficExtensions)
    /// * How-to Guides
    ///     * [Configure a traffic extension](https://cloud.google.com/service-extensions/docs/configure-callout#configure_a_traffic_extension)
    /// 
    /// ## Example Usage
    /// 
    /// ### Network Services Lb Traffic Extension Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Internal HTTP load balancer with a managed instance group backend
    ///     // VPC network
    ///     var ilbNetwork = new Gcp.Compute.Network("ilb_network", new()
    ///     {
    ///         Name = "l7-ilb-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     // proxy-only subnet
    ///     var proxySubnet = new Gcp.Compute.Subnetwork("proxy_subnet", new()
    ///     {
    ///         Name = "l7-ilb-proxy-subnet",
    ///         IpCidrRange = "10.0.0.0/24",
    ///         Region = "us-west1",
    ///         Purpose = "REGIONAL_MANAGED_PROXY",
    ///         Role = "ACTIVE",
    ///         Network = ilbNetwork.Id,
    ///     });
    /// 
    ///     // backend subnet
    ///     var ilbSubnet = new Gcp.Compute.Subnetwork("ilb_subnet", new()
    ///     {
    ///         Name = "l7-ilb-subnet",
    ///         IpCidrRange = "10.0.1.0/24",
    ///         Region = "us-west1",
    ///         Network = ilbNetwork.Id,
    ///     });
    /// 
    ///     // health check
    ///     var defaultRegionHealthCheck = new Gcp.Compute.RegionHealthCheck("default", new()
    ///     {
    ///         Name = "l7-ilb-hc",
    ///         Region = "us-west1",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///         {
    ///             PortSpecification = "USE_SERVING_PORT",
    ///         },
    ///     });
    /// 
    ///     // instance template
    ///     var instanceTemplate = new Gcp.Compute.InstanceTemplate("instance_template", new()
    ///     {
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateNetworkInterfaceArgs
    ///             {
    ///                 AccessConfigs = new[]
    ///                 {
    ///                     null,
    ///                 },
    ///                 Network = ilbNetwork.Id,
    ///                 Subnetwork = ilbSubnet.Id,
    ///             },
    ///         },
    ///         Name = "l7-ilb-mig-template",
    ///         MachineType = "e2-small",
    ///         Tags = new[]
    ///         {
    ///             "http-server",
    ///         },
    ///         Disks = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateDiskArgs
    ///             {
    ///                 SourceImage = "debian-cloud/debian-10",
    ///                 AutoDelete = true,
    ///                 Boot = true,
    ///             },
    ///         },
    ///         Metadata = 
    ///         {
    ///             { "startup-script", @"#! /bin/bash
    /// set -euo pipefail
    /// 
    /// export DEBIAN_FRONTEND=noninteractive
    /// apt-get update
    /// apt-get install -y nginx-light jq
    /// 
    /// NAME=$(curl -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/hostname"")
    /// IP=$(curl -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip"")
    /// METADATA=$(curl -f -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True"" | jq 'del(.[""startup-script""])')
    /// 
    /// cat &lt;&lt;EOF &gt; /var/www/html/index.html
    /// &lt;pre&gt;
    /// Name: $NAME
    /// IP: $IP
    /// Metadata: $METADATA
    /// &lt;/pre&gt;
    /// EOF
    /// " },
    ///         },
    ///     });
    /// 
    ///     // MIG
    ///     var mig = new Gcp.Compute.RegionInstanceGroupManager("mig", new()
    ///     {
    ///         Name = "l7-ilb-mig1",
    ///         Region = "us-west1",
    ///         BaseInstanceName = "vm",
    ///         TargetSize = 2,
    ///         Versions = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionInstanceGroupManagerVersionArgs
    ///             {
    ///                 InstanceTemplate = instanceTemplate.Id,
    ///                 Name = "primary",
    ///             },
    ///         },
    ///     });
    /// 
    ///     // backend service
    ///     var defaultRegionBackendService = new Gcp.Compute.RegionBackendService("default", new()
    ///     {
    ///         Name = "l7-ilb-backend-subnet",
    ///         Region = "us-west1",
    ///         Protocol = "HTTP",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultRegionHealthCheck.Id,
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionBackendServiceBackendArgs
    ///             {
    ///                 Group = mig.InstanceGroup,
    ///                 BalancingMode = "UTILIZATION",
    ///                 CapacityScaler = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // URL map
    ///     var defaultRegionUrlMap = new Gcp.Compute.RegionUrlMap("default", new()
    ///     {
    ///         Name = "l7-ilb-regional-url-map",
    ///         Region = "us-west1",
    ///         DefaultService = defaultRegionBackendService.Id,
    ///     });
    /// 
    ///     // HTTP target proxy
    ///     var defaultRegionTargetHttpProxy = new Gcp.Compute.RegionTargetHttpProxy("default", new()
    ///     {
    ///         Name = "l7-ilb-target-http-proxy",
    ///         Region = "us-west1",
    ///         UrlMap = defaultRegionUrlMap.Id,
    ///     });
    /// 
    ///     // forwarding rule
    ///     var @default = new Gcp.Compute.ForwardingRule("default", new()
    ///     {
    ///         Name = "l7-ilb-forwarding-rule",
    ///         Region = "us-west1",
    ///         IpProtocol = "TCP",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         PortRange = "80",
    ///         Target = defaultRegionTargetHttpProxy.Id,
    ///         Network = ilbNetwork.Id,
    ///         Subnetwork = ilbSubnet.Id,
    ///         NetworkTier = "PREMIUM",
    ///     });
    /// 
    ///     // allow all access from IAP and health check ranges
    ///     var fwIap = new Gcp.Compute.Firewall("fw_iap", new()
    ///     {
    ///         Name = "l7-ilb-fw-allow-iap-hc",
    ///         Direction = "INGRESS",
    ///         Network = ilbNetwork.Id,
    ///         SourceRanges = new[]
    ///         {
    ///             "130.211.0.0/22",
    ///             "35.191.0.0/16",
    ///             "35.235.240.0/20",
    ///         },
    ///         Allows = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.FirewallAllowArgs
    ///             {
    ///                 Protocol = "tcp",
    ///             },
    ///         },
    ///     });
    /// 
    ///     // allow http from proxy subnet to backends
    ///     var fwIlbToBackends = new Gcp.Compute.Firewall("fw_ilb_to_backends", new()
    ///     {
    ///         Name = "l7-ilb-fw-allow-ilb-to-backends",
    ///         Direction = "INGRESS",
    ///         Network = ilbNetwork.Id,
    ///         SourceRanges = new[]
    ///         {
    ///             "10.0.0.0/24",
    ///         },
    ///         TargetTags = new[]
    ///         {
    ///             "http-server",
    ///         },
    ///         Allows = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.FirewallAllowArgs
    ///             {
    ///                 Protocol = "tcp",
    ///                 Ports = new[]
    ///                 {
    ///                     "80",
    ///                     "443",
    ///                     "8080",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Traffic Extension Backend Instance
    ///     var calloutsInstance = new Gcp.Compute.Instance("callouts_instance", new()
    ///     {
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
    ///             {
    ///                 AccessConfigs = new[]
    ///                 {
    ///                     null,
    ///                 },
    ///                 Network = ilbNetwork.Id,
    ///                 Subnetwork = ilbSubnet.Id,
    ///             },
    ///         },
    ///         Name = "l7-ilb-callouts-ins",
    ///         Zone = "us-west1-a",
    ///         MachineType = "e2-small",
    ///         Labels = 
    ///         {
    ///             { "container-vm", "cos-stable-109-17800-147-54" },
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "allow-ssh",
    ///             "load-balanced-backend",
    ///         },
    ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
    ///         {
    ///             AutoDelete = true,
    ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
    ///             {
    ///                 Type = "pd-standard",
    ///                 Size = 10,
    ///                 Image = "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/cos-stable-109-17800-147-54",
    ///             },
    ///         },
    ///         Metadata = 
    ///         {
    ///             { "gce-container-declaration", @"# DISCLAIMER:
    /// # This container declaration format is not a public API and may change without
    /// # notice. Please use gcloud command-line tool or Google Cloud Console to run
    /// # Containers on Google Compute Engine.
    /// 
    /// spec:
    ///   containers:
    ///   - image: us-docker.pkg.dev/service-extensions/ext-proc/service-callout-basic-example-python:latest
    ///     name: callouts-vm
    ///     securityContext:
    ///       privileged: false
    ///     stdin: false
    ///     tty: false
    ///     volumeMounts: []
    ///   restartPolicy: Always
    ///   volumes: []
    /// " },
    ///             { "google-logging-enabled", "true" },
    ///         },
    ///         DeletionProtection = false,
    ///     });
    /// 
    ///     // callouts instance group
    ///     var calloutsInstanceGroup = new Gcp.Compute.InstanceGroup("callouts_instance_group", new()
    ///     {
    ///         Name = "l7-ilb-callouts-ins-group",
    ///         Description = "Terraform test instance group",
    ///         Zone = "us-west1-a",
    ///         Instances = new[]
    ///         {
    ///             calloutsInstance.Id,
    ///         },
    ///         NamedPorts = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceGroupNamedPortArgs
    ///             {
    ///                 Name = "http",
    ///                 Port = 80,
    ///             },
    ///             new Gcp.Compute.Inputs.InstanceGroupNamedPortArgs
    ///             {
    ///                 Name = "grpc",
    ///                 Port = 443,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // callout health check
    ///     var calloutsHealthCheck = new Gcp.Compute.RegionHealthCheck("callouts_health_check", new()
    ///     {
    ///         Name = "l7-ilb-callouts-hc",
    ///         Region = "us-west1",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     // callout backend service
    ///     var calloutsBackend = new Gcp.Compute.RegionBackendService("callouts_backend", new()
    ///     {
    ///         Name = "l7-ilb-callouts-backend",
    ///         Region = "us-west1",
    ///         Protocol = "HTTP2",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         TimeoutSec = 10,
    ///         PortName = "grpc",
    ///         HealthChecks = calloutsHealthCheck.Id,
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionBackendServiceBackendArgs
    ///             {
    ///                 Group = calloutsInstanceGroup.Id,
    ///                 BalancingMode = "UTILIZATION",
    ///                 CapacityScaler = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultLbTrafficExtension = new Gcp.NetworkServices.LbTrafficExtension("default", new()
    ///     {
    ///         Name = "l7-ilb-traffic-ext",
    ///         Description = "my traffic extension",
    ///         Location = "us-west1",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         ForwardingRules = new[]
    ///         {
    ///             @default.SelfLink,
    ///         },
    ///         ExtensionChains = new[]
    ///         {
    ///             new Gcp.NetworkServices.Inputs.LbTrafficExtensionExtensionChainArgs
    ///             {
    ///                 Name = "chain1",
    ///                 MatchCondition = new Gcp.NetworkServices.Inputs.LbTrafficExtensionExtensionChainMatchConditionArgs
    ///                 {
    ///                     CelExpression = "request.host == 'example.com'",
    ///                 },
    ///                 Extensions = new[]
    ///                 {
    ///                     new Gcp.NetworkServices.Inputs.LbTrafficExtensionExtensionChainExtensionArgs
    ///                     {
    ///                         Name = "ext11",
    ///                         Authority = "ext11.com",
    ///                         Service = calloutsBackend.SelfLink,
    ///                         Timeout = "0.1s",
    ///                         FailOpen = false,
    ///                         SupportedEvents = new[]
    ///                         {
    ///                             "REQUEST_HEADERS",
    ///                         },
    ///                         ForwardHeaders = new[]
    ///                         {
    ///                             "custom-header",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    ///     // test instance
    ///     var vmTest = new Gcp.Compute.Instance("vm_test", new()
    ///     {
    ///         Name = "l7-ilb-test-vm",
    ///         Zone = "us-west1-b",
    ///         MachineType = "e2-small",
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
    ///             {
    ///                 Network = ilbNetwork.Id,
    ///                 Subnetwork = ilbSubnet.Id,
    ///             },
    ///         },
    ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
    ///         {
    ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
    ///             {
    ///                 Image = "debian-cloud/debian-11",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// LbTrafficExtension can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, LbTrafficExtension can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkservices/lbTrafficExtension:LbTrafficExtension default projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkservices/lbTrafficExtension:LbTrafficExtension default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networkservices/lbTrafficExtension:LbTrafficExtension default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networkservices/lbTrafficExtension:LbTrafficExtension")]
    public partial class LbTrafficExtension : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// A set of ordered extension chains that contain the match conditions and extensions to execute.
        /// Match conditions for each extension chain are evaluated in sequence for a given request.
        /// The first extension chain that has a condition that matches the request is executed.
        /// Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
        /// Structure is documented below.
        /// </summary>
        [Output("extensionChains")]
        public Output<ImmutableArray<Outputs.LbTrafficExtensionExtensionChain>> ExtensionChains { get; private set; } = null!;

        /// <summary>
        /// A list of references to the forwarding rules to which this service extension is attached to.
        /// At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
        /// </summary>
        [Output("forwardingRules")]
        public Output<ImmutableArray<string>> ForwardingRules { get; private set; } = null!;

        /// <summary>
        /// Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
        /// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
        /// present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
        /// more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
        /// "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
        /// </summary>
        [Output("loadBalancingScheme")]
        public Output<string?> LoadBalancingScheme { get; private set; } = null!;

        /// <summary>
        /// The location of the traffic extension
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;


        /// <summary>
        /// Create a LbTrafficExtension resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LbTrafficExtension(string name, LbTrafficExtensionArgs args, CustomResourceOptions? options = null)
            : base("gcp:networkservices/lbTrafficExtension:LbTrafficExtension", name, args ?? new LbTrafficExtensionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LbTrafficExtension(string name, Input<string> id, LbTrafficExtensionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networkservices/lbTrafficExtension:LbTrafficExtension", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LbTrafficExtension resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LbTrafficExtension Get(string name, Input<string> id, LbTrafficExtensionState? state = null, CustomResourceOptions? options = null)
        {
            return new LbTrafficExtension(name, id, state, options);
        }
    }

    public sealed class LbTrafficExtensionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("extensionChains", required: true)]
        private InputList<Inputs.LbTrafficExtensionExtensionChainArgs>? _extensionChains;

        /// <summary>
        /// A set of ordered extension chains that contain the match conditions and extensions to execute.
        /// Match conditions for each extension chain are evaluated in sequence for a given request.
        /// The first extension chain that has a condition that matches the request is executed.
        /// Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.LbTrafficExtensionExtensionChainArgs> ExtensionChains
        {
            get => _extensionChains ?? (_extensionChains = new InputList<Inputs.LbTrafficExtensionExtensionChainArgs>());
            set => _extensionChains = value;
        }

        [Input("forwardingRules", required: true)]
        private InputList<string>? _forwardingRules;

        /// <summary>
        /// A list of references to the forwarding rules to which this service extension is attached to.
        /// At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
        /// </summary>
        public InputList<string> ForwardingRules
        {
            get => _forwardingRules ?? (_forwardingRules = new InputList<string>());
            set => _forwardingRules = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
        /// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
        /// present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
        /// more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
        /// "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
        /// </summary>
        [Input("loadBalancingScheme")]
        public Input<string>? LoadBalancingScheme { get; set; }

        /// <summary>
        /// The location of the traffic extension
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        public LbTrafficExtensionArgs()
        {
        }
        public static new LbTrafficExtensionArgs Empty => new LbTrafficExtensionArgs();
    }

    public sealed class LbTrafficExtensionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("extensionChains")]
        private InputList<Inputs.LbTrafficExtensionExtensionChainGetArgs>? _extensionChains;

        /// <summary>
        /// A set of ordered extension chains that contain the match conditions and extensions to execute.
        /// Match conditions for each extension chain are evaluated in sequence for a given request.
        /// The first extension chain that has a condition that matches the request is executed.
        /// Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.LbTrafficExtensionExtensionChainGetArgs> ExtensionChains
        {
            get => _extensionChains ?? (_extensionChains = new InputList<Inputs.LbTrafficExtensionExtensionChainGetArgs>());
            set => _extensionChains = value;
        }

        [Input("forwardingRules")]
        private InputList<string>? _forwardingRules;

        /// <summary>
        /// A list of references to the forwarding rules to which this service extension is attached to.
        /// At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
        /// </summary>
        public InputList<string> ForwardingRules
        {
            get => _forwardingRules ?? (_forwardingRules = new InputList<string>());
            set => _forwardingRules = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
        /// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
        /// present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
        /// more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
        /// "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
        /// </summary>
        [Input("loadBalancingScheme")]
        public Input<string>? LoadBalancingScheme { get; set; }

        /// <summary>
        /// The location of the traffic extension
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        public LbTrafficExtensionState()
        {
        }
        public static new LbTrafficExtensionState Empty => new LbTrafficExtensionState();
    }
}
