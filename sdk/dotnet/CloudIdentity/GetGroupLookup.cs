// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudIdentity
{
    public static class GetGroupLookup
    {
        /// <summary>
        /// Use this data source to look up the resource name of a Cloud Identity Group by its [EntityKey](https://cloud.google.com/identity/docs/reference/rest/v1/EntityKey), i.e. the group's email.
        /// 
        /// https://cloud.google.com/identity/docs/concepts/overview#groups
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @group = Gcp.CloudIdentity.GetGroupLookup.Invoke(new()
        ///     {
        ///         GroupKey = new Gcp.CloudIdentity.Inputs.GetGroupLookupGroupKeyInputArgs
        ///         {
        ///             Id = "my-group@example.com",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGroupLookupResult> InvokeAsync(GetGroupLookupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupLookupResult>("gcp:cloudidentity/getGroupLookup:getGroupLookup", args ?? new GetGroupLookupArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to look up the resource name of a Cloud Identity Group by its [EntityKey](https://cloud.google.com/identity/docs/reference/rest/v1/EntityKey), i.e. the group's email.
        /// 
        /// https://cloud.google.com/identity/docs/concepts/overview#groups
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @group = Gcp.CloudIdentity.GetGroupLookup.Invoke(new()
        ///     {
        ///         GroupKey = new Gcp.CloudIdentity.Inputs.GetGroupLookupGroupKeyInputArgs
        ///         {
        ///             Id = "my-group@example.com",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGroupLookupResult> Invoke(GetGroupLookupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupLookupResult>("gcp:cloudidentity/getGroupLookup:getGroupLookup", args ?? new GetGroupLookupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupLookupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The EntityKey of the Group to lookup. A unique identifier for an entity in the Cloud Identity Groups API.
        /// An entity can represent either a group with an optional namespace or a user without a namespace.
        /// The combination of id and namespace must be unique; however, the same id can be used with different namespaces. Structure is documented below.
        /// </summary>
        [Input("groupKey", required: true)]
        public Inputs.GetGroupLookupGroupKeyArgs GroupKey { get; set; } = null!;

        public GetGroupLookupArgs()
        {
        }
        public static new GetGroupLookupArgs Empty => new GetGroupLookupArgs();
    }

    public sealed class GetGroupLookupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The EntityKey of the Group to lookup. A unique identifier for an entity in the Cloud Identity Groups API.
        /// An entity can represent either a group with an optional namespace or a user without a namespace.
        /// The combination of id and namespace must be unique; however, the same id can be used with different namespaces. Structure is documented below.
        /// </summary>
        [Input("groupKey", required: true)]
        public Input<Inputs.GetGroupLookupGroupKeyInputArgs> GroupKey { get; set; } = null!;

        public GetGroupLookupInvokeArgs()
        {
        }
        public static new GetGroupLookupInvokeArgs Empty => new GetGroupLookupInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupLookupResult
    {
        public readonly Outputs.GetGroupLookupGroupKeyResult GroupKey;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource name of the Group in the format: groups/{group_id}, where `group_id` is the unique ID assigned to the Group.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetGroupLookupResult(
            Outputs.GetGroupLookupGroupKeyResult groupKey,

            string id,

            string name)
        {
            GroupKey = groupKey;
            Id = id;
            Name = name;
        }
    }
}
