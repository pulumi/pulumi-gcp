// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Iam
{
    /// <summary>
    /// Represents a public key configuration for a Workforce Pool Provider. The key can be configured in your identity provider to encrypt SAML assertions.
    /// Google holds the corresponding private key, which it uses to decrypt encrypted tokens.
    /// 
    /// To get more information about WorkforcePoolProviderKey, see:
    /// 
    /// * [API documentation](https://cloud.google.com/iam/docs/reference/rest/v1/locations.workforcePools.providers.keys)
    /// * How-to Guides
    ///     * [Configure a provider within the workforce pool](https://cloud.google.com/iam/docs/manage-workforce-identity-pools-providers#configure_a_provider_within_the_workforce_pool)
    ///     * [Workforce Identity Federation Overview](https://cloud.google.com/iam/docs/workforce-identity-federation)
    /// 
    /// ## Example Usage
    /// 
    /// ### Iam Workforce Pool Provider Saml Key Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pool = new Gcp.Iam.WorkforcePool("pool", new()
    ///     {
    ///         WorkforcePoolId = "example-pool",
    ///         Parent = "organizations/123456789",
    ///         Location = "global",
    ///     });
    /// 
    ///     var provider = new Gcp.Iam.WorkforcePoolProvider("provider", new()
    ///     {
    ///         WorkforcePoolId = pool.WorkforcePoolId,
    ///         Location = pool.Location,
    ///         ProviderId = "example-prvdr",
    ///         AttributeMapping = 
    ///         {
    ///             { "google.subject", "assertion.sub" },
    ///         },
    ///         Saml = new Gcp.Iam.Inputs.WorkforcePoolProviderSamlArgs
    ///         {
    ///             IdpMetadataXml = "&lt;?xml version=\"1.0\"?&gt;&lt;md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"https://test.com\"&gt;&lt;md:IDPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\"&gt; &lt;md:KeyDescriptor use=\"signing\"&gt;&lt;ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"&gt;&lt;ds:X509Data&gt;&lt;ds:X509Certificate&gt;MIIDpDCCAoygAwIBAgIGAX7/5qPhMA0GCSqGSIb3DQEBCwUAMIGSMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxEzARBgNVBAMMCmRldi00NTg0MjExHDAaBgkqhkiG9w0BCQEWDWluZm9Ab2t0YS5jb20wHhcNMjIwMjE2MDAxOTEyWhcNMzIwMjE2MDAyMDEyWjCBkjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBE9rdGExFDASBgNVBAsMC1NTT1Byb3ZpZGVyMRMwEQYDVQQDDApkZXYtNDU4NDIxMRwwGgYJKoZIhvcNAQkBFg1pbmZvQG9rdGEuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxrBl7GKz52cRpxF9xCsirnRuMxnhFBaUrsHqAQrLqWmdlpNYZTVg+T9iQ+aq/iE68L+BRZcZniKIvW58wqqS0ltXVvIkXuDSvnvnkkI5yMIVErR20K8jSOKQm1FmK+fgAJ4koshFiu9oLiqu0Ejc0DuL3/XRsb4RuxjktKTb1khgBBtb+7idEk0sFR0RPefAweXImJkDHDm7SxjDwGJUubbqpdTxasPr0W+AHI1VUzsUsTiHAoyb0XDkYqHfDzhj/ZdIEl4zHQ3bEZvlD984ztAnmX2SuFLLKfXeAAGHei8MMixJvwxYkkPeYZ/5h8WgBZPP4heS2CPjwYExt29L8QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQARjJFz++a9Z5IQGFzsZMrX2EDR5ML4xxUiQkbhld1S1PljOLcYFARDmUC2YYHOueU4ee8Jid9nPGEUebV/4Jok+b+oQh+dWMgiWjSLI7h5q4OYZ3VJtdlVwgMFt2iz+/4yBKMUZ50g3Qgg36vE34us+eKitg759JgCNsibxn0qtJgSPm0sgP2L6yTaLnoEUbXBRxCwynTSkp9ZijZqEzbhN0e2dWv7Rx/nfpohpDP6vEiFImKFHpDSv3M/5de1ytQzPFrZBYt9WlzlYwE1aD9FHCxdd+rWgYMVVoRaRmndpV/Rq3QUuDuFJtaoX11bC7ExkOpg9KstZzA63i3VcfYv&lt;/ds:X509Certificate&gt;&lt;/ds:X509Data&gt;&lt;/ds:KeyInfo&gt;&lt;/md:KeyDescriptor&gt;&lt;md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://test.com/sso\"/&gt;&lt;/md:IDPSSODescriptor&gt;&lt;/md:EntityDescriptor&gt;",
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.Iam.WorkforcePoolProviderKey("example", new()
    ///     {
    ///         WorkforcePoolId = pool.WorkforcePoolId,
    ///         Location = pool.Location,
    ///         ProviderId = provider.ProviderId,
    ///         KeyId = "example-key",
    ///         KeyData = new Gcp.Iam.Inputs.WorkforcePoolProviderKeyKeyDataArgs
    ///         {
    ///             KeySpec = "RSA_2048",
    ///         },
    ///         Use = "ENCRYPTION",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WorkforcePoolProviderKey can be imported using any of these accepted formats:
    /// 
    /// * `locations/{{location}}/workforcePools/{{workforce_pool_id}}/providers/{{provider_id}}/keys/{{key_id}}`
    /// 
    /// * `{{location}}/{{workforce_pool_id}}/{{provider_id}}/{{key_id}}`
    /// 
    /// When using the `pulumi import` command, WorkforcePoolProviderKey can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:iam/workforcePoolProviderKey:WorkforcePoolProviderKey default locations/{{location}}/workforcePools/{{workforce_pool_id}}/providers/{{provider_id}}/keys/{{key_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:iam/workforcePoolProviderKey:WorkforcePoolProviderKey default {{location}}/{{workforce_pool_id}}/{{provider_id}}/{{key_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:iam/workforcePoolProviderKey:WorkforcePoolProviderKey")]
    public partial class WorkforcePoolProviderKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time after which the key will be permanently deleted and cannot be recovered.
        /// Note that the key may get purged before this time if the total limit of keys per provider is exceeded.
        /// </summary>
        [Output("expireTime")]
        public Output<string> ExpireTime { get; private set; } = null!;

        /// <summary>
        /// Immutable. Public half of the asymmetric key.
        /// Structure is documented below.
        /// </summary>
        [Output("keyData")]
        public Output<Outputs.WorkforcePoolProviderKeyKeyData> KeyData { get; private set; } = null!;

        /// <summary>
        /// The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        /// <summary>
        /// The location for the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Identifier. The resource name of the key.
        /// Format: `locations/{location}/workforcePools/{workforcePoolId}/providers/{providerId}/keys/{keyId}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the provider.
        /// </summary>
        [Output("providerId")]
        public Output<string> ProviderId { get; private set; } = null!;

        /// <summary>
        /// The state of the key.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The purpose of the key.
        /// Possible values are: `ENCRYPTION`.
        /// </summary>
        [Output("use")]
        public Output<string> Use { get; private set; } = null!;

        /// <summary>
        /// The ID of the workforce pool.
        /// </summary>
        [Output("workforcePoolId")]
        public Output<string> WorkforcePoolId { get; private set; } = null!;


        /// <summary>
        /// Create a WorkforcePoolProviderKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkforcePoolProviderKey(string name, WorkforcePoolProviderKeyArgs args, CustomResourceOptions? options = null)
            : base("gcp:iam/workforcePoolProviderKey:WorkforcePoolProviderKey", name, args ?? new WorkforcePoolProviderKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkforcePoolProviderKey(string name, Input<string> id, WorkforcePoolProviderKeyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:iam/workforcePoolProviderKey:WorkforcePoolProviderKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkforcePoolProviderKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkforcePoolProviderKey Get(string name, Input<string> id, WorkforcePoolProviderKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkforcePoolProviderKey(name, id, state, options);
        }
    }

    public sealed class WorkforcePoolProviderKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Immutable. Public half of the asymmetric key.
        /// Structure is documented below.
        /// </summary>
        [Input("keyData", required: true)]
        public Input<Inputs.WorkforcePoolProviderKeyKeyDataArgs> KeyData { get; set; } = null!;

        /// <summary>
        /// The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
        /// </summary>
        [Input("keyId", required: true)]
        public Input<string> KeyId { get; set; } = null!;

        /// <summary>
        /// The location for the resource.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the provider.
        /// </summary>
        [Input("providerId", required: true)]
        public Input<string> ProviderId { get; set; } = null!;

        /// <summary>
        /// The purpose of the key.
        /// Possible values are: `ENCRYPTION`.
        /// </summary>
        [Input("use", required: true)]
        public Input<string> Use { get; set; } = null!;

        /// <summary>
        /// The ID of the workforce pool.
        /// </summary>
        [Input("workforcePoolId", required: true)]
        public Input<string> WorkforcePoolId { get; set; } = null!;

        public WorkforcePoolProviderKeyArgs()
        {
        }
        public static new WorkforcePoolProviderKeyArgs Empty => new WorkforcePoolProviderKeyArgs();
    }

    public sealed class WorkforcePoolProviderKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time after which the key will be permanently deleted and cannot be recovered.
        /// Note that the key may get purged before this time if the total limit of keys per provider is exceeded.
        /// </summary>
        [Input("expireTime")]
        public Input<string>? ExpireTime { get; set; }

        /// <summary>
        /// Immutable. Public half of the asymmetric key.
        /// Structure is documented below.
        /// </summary>
        [Input("keyData")]
        public Input<Inputs.WorkforcePoolProviderKeyKeyDataGetArgs>? KeyData { get; set; }

        /// <summary>
        /// The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// The location for the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier. The resource name of the key.
        /// Format: `locations/{location}/workforcePools/{workforcePoolId}/providers/{providerId}/keys/{keyId}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the provider.
        /// </summary>
        [Input("providerId")]
        public Input<string>? ProviderId { get; set; }

        /// <summary>
        /// The state of the key.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The purpose of the key.
        /// Possible values are: `ENCRYPTION`.
        /// </summary>
        [Input("use")]
        public Input<string>? Use { get; set; }

        /// <summary>
        /// The ID of the workforce pool.
        /// </summary>
        [Input("workforcePoolId")]
        public Input<string>? WorkforcePoolId { get; set; }

        public WorkforcePoolProviderKeyState()
        {
        }
        public static new WorkforcePoolProviderKeyState Empty => new WorkforcePoolProviderKeyState();
    }
}
