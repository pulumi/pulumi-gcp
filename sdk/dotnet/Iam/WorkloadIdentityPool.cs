// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Iam
{
    /// <summary>
    /// Represents a collection of external workload identities. You can define IAM policies to
    /// grant these identities access to Google Cloud resources.
    /// 
    /// To get more information about WorkloadIdentityPool, see:
    /// 
    /// * [API documentation](https://cloud.google.com/iam/docs/reference/rest/v1/projects.locations.workloadIdentityPools)
    /// * How-to Guides
    ///     * [Configure managed workload identity authentication for Compute Engine](https://cloud.google.com/iam/docs/create-managed-workload-identities)
    ///     * [Configure managed workload identity authentication for GKE](https://cloud.google.com/iam/docs/create-managed-workload-identities-gke)
    ///     * [Managing workload identity pools](https://cloud.google.com/iam/docs/manage-workload-identity-pools-providers#pools)
    /// 
    /// ## Example Usage
    /// 
    /// ### Iam Workload Identity Pool Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.Iam.WorkloadIdentityPool("example", new()
    ///     {
    ///         WorkloadIdentityPoolId = "example-pool",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Iam Workload Identity Pool Full Federation Only Mode
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.Iam.WorkloadIdentityPool("example", new()
    ///     {
    ///         WorkloadIdentityPoolId = "example-pool",
    ///         DisplayName = "Name of the pool",
    ///         Description = "Identity pool operates in FEDERATION_ONLY mode",
    ///         Disabled = true,
    ///         Mode = "FEDERATION_ONLY",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Iam Workload Identity Pool Full Trust Domain Mode
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.Iam.WorkloadIdentityPool("example", new()
    ///     {
    ///         WorkloadIdentityPoolId = "example-pool",
    ///         DisplayName = "Name of the pool",
    ///         Description = "Identity pool operates in TRUST_DOMAIN mode",
    ///         Disabled = true,
    ///         Mode = "TRUST_DOMAIN",
    ///         InlineCertificateIssuanceConfig = new Gcp.Iam.Inputs.WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs
    ///         {
    ///             CaPools = 
    ///             {
    ///                 { "us-central1", "projects/project-bar/locations/us-central1/caPools/ca-pool-bar" },
    ///                 { "asia-east2", "projects/project-foo/locations/asia-east2/caPools/ca-pool-foo" },
    ///             },
    ///             Lifetime = "86400s",
    ///             RotationWindowPercentage = 50,
    ///             KeyAlgorithm = "ECDSA_P256",
    ///         },
    ///         InlineTrustConfig = new Gcp.Iam.Inputs.WorkloadIdentityPoolInlineTrustConfigArgs
    ///         {
    ///             AdditionalTrustBundles = new[]
    ///             {
    ///                 new Gcp.Iam.Inputs.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleArgs
    ///                 {
    ///                     TrustDomain = "example.com",
    ///                     TrustAnchors = new[]
    ///                     {
    ///                         new Gcp.Iam.Inputs.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleTrustAnchorArgs
    ///                         {
    ///                             PemCertificate = Std.File.Invoke(new()
    ///                             {
    ///                                 Input = "test-fixtures/trust_anchor_1.pem",
    ///                             }).Apply(invoke =&gt; invoke.Result),
    ///                         },
    ///                         new Gcp.Iam.Inputs.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleTrustAnchorArgs
    ///                         {
    ///                             PemCertificate = Std.File.Invoke(new()
    ///                             {
    ///                                 Input = "test-fixtures/trust_anchor_2.pem",
    ///                             }).Apply(invoke =&gt; invoke.Result),
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.Iam.Inputs.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleArgs
    ///                 {
    ///                     TrustDomain = "example.net",
    ///                     TrustAnchors = new[]
    ///                     {
    ///                         new Gcp.Iam.Inputs.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleTrustAnchorArgs
    ///                         {
    ///                             PemCertificate = Std.File.Invoke(new()
    ///                             {
    ///                                 Input = "test-fixtures/trust_anchor_3.pem",
    ///                             }).Apply(invoke =&gt; invoke.Result),
    ///                         },
    ///                         new Gcp.Iam.Inputs.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleTrustAnchorArgs
    ///                         {
    ///                             PemCertificate = Std.File.Invoke(new()
    ///                             {
    ///                                 Input = "test-fixtures/trust_anchor_4.pem",
    ///                             }).Apply(invoke =&gt; invoke.Result),
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WorkloadIdentityPool can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}`
    /// 
    /// * `{{project}}/{{workload_identity_pool_id}}`
    /// 
    /// * `{{workload_identity_pool_id}}`
    /// 
    /// When using the `pulumi import` command, WorkloadIdentityPool can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:iam/workloadIdentityPool:WorkloadIdentityPool default projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:iam/workloadIdentityPool:WorkloadIdentityPool default {{project}}/{{workload_identity_pool_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:iam/workloadIdentityPool:WorkloadIdentityPool default {{workload_identity_pool_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:iam/workloadIdentityPool:WorkloadIdentityPool")]
    public partial class WorkloadIdentityPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A description of the pool. Cannot exceed 256 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
        /// existing tokens to access resources. If the pool is re-enabled, existing tokens grant
        /// access again.
        /// </summary>
        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        /// <summary>
        /// A display name for the pool. Cannot exceed 32 characters.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Represents configuration for generating mutual TLS (mTLS) certificates for the identities
        /// within this pool. Defines the Certificate Authority (CA) pool resources and configurations
        /// required for issuance and rotation of mTLS workload certificates.
        /// Structure is documented below.
        /// </summary>
        [Output("inlineCertificateIssuanceConfig")]
        public Output<Outputs.WorkloadIdentityPoolInlineCertificateIssuanceConfig?> InlineCertificateIssuanceConfig { get; private set; } = null!;

        /// <summary>
        /// Represents config to add additional trusted trust domains. Defines configuration for extending
        /// trust to additional trust domains. By establishing trust with another domain, the current
        /// domain will recognize and accept certificates issued by entities within the trusted domains.
        /// Note that a trust domain automatically trusts itself, eliminating the need for explicit
        /// configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("inlineTrustConfig")]
        public Output<Outputs.WorkloadIdentityPoolInlineTrustConfig?> InlineTrustConfig { get; private set; } = null!;

        /// <summary>
        /// The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
        /// are in `FEDERATION_ONLY` mode.
        /// 
        /// &gt; **Note** This field cannot be changed after the Workload Identity Pool is created. While
        /// `pulumi preview` may show an update if you change this field's value, `pulumi up`
        /// **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
        /// To specify a different `mode`, please create a new Workload Identity Pool resource.
        /// * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
        /// Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
        /// workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
        /// within the pool besides providers.
        /// * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
        /// identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
        /// workload identifier. The subject identifier for all identities must conform to the following
        /// format: `ns/&lt;namespace&gt;/sa/&lt;workload_identifier&gt;`.
        /// `gcp.iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
        /// mode pools.
        /// Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// The resource name of the pool as
        /// `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The state of the pool.
        /// * `STATE_UNSPECIFIED`: State unspecified.
        /// * `ACTIVE`: The pool is active, and may be used in Google Cloud policies.
        /// * `DELETED`: The pool is soft-deleted. Soft-deleted pools are permanently deleted after
        /// approximately 30 days. You can restore a soft-deleted pool using
        /// `UndeleteWorkloadIdentityPool`. You cannot reuse the ID of a soft-deleted pool until it is
        /// permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or
        /// use existing tokens to access resources. If the pool is undeleted, existing tokens grant
        /// access again.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The ID to use for the pool, which becomes the final component of the resource name. This
        /// value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
        /// `gcp-` is reserved for use by Google, and may not be specified.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("workloadIdentityPoolId")]
        public Output<string> WorkloadIdentityPoolId { get; private set; } = null!;


        /// <summary>
        /// Create a WorkloadIdentityPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkloadIdentityPool(string name, WorkloadIdentityPoolArgs args, CustomResourceOptions? options = null)
            : base("gcp:iam/workloadIdentityPool:WorkloadIdentityPool", name, args ?? new WorkloadIdentityPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkloadIdentityPool(string name, Input<string> id, WorkloadIdentityPoolState? state = null, CustomResourceOptions? options = null)
            : base("gcp:iam/workloadIdentityPool:WorkloadIdentityPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkloadIdentityPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkloadIdentityPool Get(string name, Input<string> id, WorkloadIdentityPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkloadIdentityPool(name, id, state, options);
        }
    }

    public sealed class WorkloadIdentityPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the pool. Cannot exceed 256 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
        /// existing tokens to access resources. If the pool is re-enabled, existing tokens grant
        /// access again.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// A display name for the pool. Cannot exceed 32 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Represents configuration for generating mutual TLS (mTLS) certificates for the identities
        /// within this pool. Defines the Certificate Authority (CA) pool resources and configurations
        /// required for issuance and rotation of mTLS workload certificates.
        /// Structure is documented below.
        /// </summary>
        [Input("inlineCertificateIssuanceConfig")]
        public Input<Inputs.WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs>? InlineCertificateIssuanceConfig { get; set; }

        /// <summary>
        /// Represents config to add additional trusted trust domains. Defines configuration for extending
        /// trust to additional trust domains. By establishing trust with another domain, the current
        /// domain will recognize and accept certificates issued by entities within the trusted domains.
        /// Note that a trust domain automatically trusts itself, eliminating the need for explicit
        /// configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("inlineTrustConfig")]
        public Input<Inputs.WorkloadIdentityPoolInlineTrustConfigArgs>? InlineTrustConfig { get; set; }

        /// <summary>
        /// The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
        /// are in `FEDERATION_ONLY` mode.
        /// 
        /// &gt; **Note** This field cannot be changed after the Workload Identity Pool is created. While
        /// `pulumi preview` may show an update if you change this field's value, `pulumi up`
        /// **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
        /// To specify a different `mode`, please create a new Workload Identity Pool resource.
        /// * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
        /// Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
        /// workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
        /// within the pool besides providers.
        /// * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
        /// identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
        /// workload identifier. The subject identifier for all identities must conform to the following
        /// format: `ns/&lt;namespace&gt;/sa/&lt;workload_identifier&gt;`.
        /// `gcp.iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
        /// mode pools.
        /// Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The ID to use for the pool, which becomes the final component of the resource name. This
        /// value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
        /// `gcp-` is reserved for use by Google, and may not be specified.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("workloadIdentityPoolId", required: true)]
        public Input<string> WorkloadIdentityPoolId { get; set; } = null!;

        public WorkloadIdentityPoolArgs()
        {
        }
        public static new WorkloadIdentityPoolArgs Empty => new WorkloadIdentityPoolArgs();
    }

    public sealed class WorkloadIdentityPoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the pool. Cannot exceed 256 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
        /// existing tokens to access resources. If the pool is re-enabled, existing tokens grant
        /// access again.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// A display name for the pool. Cannot exceed 32 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Represents configuration for generating mutual TLS (mTLS) certificates for the identities
        /// within this pool. Defines the Certificate Authority (CA) pool resources and configurations
        /// required for issuance and rotation of mTLS workload certificates.
        /// Structure is documented below.
        /// </summary>
        [Input("inlineCertificateIssuanceConfig")]
        public Input<Inputs.WorkloadIdentityPoolInlineCertificateIssuanceConfigGetArgs>? InlineCertificateIssuanceConfig { get; set; }

        /// <summary>
        /// Represents config to add additional trusted trust domains. Defines configuration for extending
        /// trust to additional trust domains. By establishing trust with another domain, the current
        /// domain will recognize and accept certificates issued by entities within the trusted domains.
        /// Note that a trust domain automatically trusts itself, eliminating the need for explicit
        /// configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("inlineTrustConfig")]
        public Input<Inputs.WorkloadIdentityPoolInlineTrustConfigGetArgs>? InlineTrustConfig { get; set; }

        /// <summary>
        /// The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
        /// are in `FEDERATION_ONLY` mode.
        /// 
        /// &gt; **Note** This field cannot be changed after the Workload Identity Pool is created. While
        /// `pulumi preview` may show an update if you change this field's value, `pulumi up`
        /// **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
        /// To specify a different `mode`, please create a new Workload Identity Pool resource.
        /// * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
        /// Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
        /// workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
        /// within the pool besides providers.
        /// * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
        /// identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
        /// workload identifier. The subject identifier for all identities must conform to the following
        /// format: `ns/&lt;namespace&gt;/sa/&lt;workload_identifier&gt;`.
        /// `gcp.iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
        /// mode pools.
        /// Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The resource name of the pool as
        /// `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The state of the pool.
        /// * `STATE_UNSPECIFIED`: State unspecified.
        /// * `ACTIVE`: The pool is active, and may be used in Google Cloud policies.
        /// * `DELETED`: The pool is soft-deleted. Soft-deleted pools are permanently deleted after
        /// approximately 30 days. You can restore a soft-deleted pool using
        /// `UndeleteWorkloadIdentityPool`. You cannot reuse the ID of a soft-deleted pool until it is
        /// permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or
        /// use existing tokens to access resources. If the pool is undeleted, existing tokens grant
        /// access again.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The ID to use for the pool, which becomes the final component of the resource name. This
        /// value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
        /// `gcp-` is reserved for use by Google, and may not be specified.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("workloadIdentityPoolId")]
        public Input<string>? WorkloadIdentityPoolId { get; set; }

        public WorkloadIdentityPoolState()
        {
        }
        public static new WorkloadIdentityPoolState Empty => new WorkloadIdentityPoolState();
    }
}
