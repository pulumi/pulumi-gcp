// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Iam
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// DenyPolicy can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:iam/denyPolicy:DenyPolicy default {{parent}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:iam/denyPolicy:DenyPolicy")]
    public partial class DenyPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// The display name of the rule.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The hash of the resource. Used internally during updates.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The name of the policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The attachment point is identified by its URL-encoded full resource name.
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// Rules to be applied.
        /// Structure is documented below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.DenyPolicyRule>> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a DenyPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DenyPolicy(string name, DenyPolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:iam/denyPolicy:DenyPolicy", name, args ?? new DenyPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DenyPolicy(string name, Input<string> id, DenyPolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:iam/denyPolicy:DenyPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DenyPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DenyPolicy Get(string name, Input<string> id, DenyPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new DenyPolicy(name, id, state, options);
        }
    }

    public sealed class DenyPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The display name of the rule.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The name of the policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The attachment point is identified by its URL-encoded full resource name.
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        [Input("rules", required: true)]
        private InputList<Inputs.DenyPolicyRuleArgs>? _rules;

        /// <summary>
        /// Rules to be applied.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DenyPolicyRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.DenyPolicyRuleArgs>());
            set => _rules = value;
        }

        public DenyPolicyArgs()
        {
        }
    }

    public sealed class DenyPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The display name of the rule.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The hash of the resource. Used internally during updates.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The name of the policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The attachment point is identified by its URL-encoded full resource name.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("rules")]
        private InputList<Inputs.DenyPolicyRuleGetArgs>? _rules;

        /// <summary>
        /// Rules to be applied.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DenyPolicyRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.DenyPolicyRuleGetArgs>());
            set => _rules = value;
        }

        public DenyPolicyState()
        {
        }
    }
}
