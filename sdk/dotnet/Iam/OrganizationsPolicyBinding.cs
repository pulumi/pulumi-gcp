// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Iam
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Iam Organizations Policy Binding
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pabPolicy = new Gcp.Iam.PrincipalAccessBoundaryPolicy("pab_policy", new()
    ///     {
    ///         Organization = "123456789",
    ///         Location = "global",
    ///         DisplayName = "binding for all principals in the Organization",
    ///         PrincipalAccessBoundaryPolicyId = "my-pab-policy",
    ///     });
    /// 
    ///     var wait60Seconds = new Time.Index.Sleep("wait_60_seconds", new()
    ///     {
    ///         CreateDuration = "60s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             pabPolicy,
    ///         },
    ///     });
    /// 
    ///     var binding_for_all_org_principals = new Gcp.Iam.OrganizationsPolicyBinding("binding-for-all-org-principals", new()
    ///     {
    ///         Organization = "123456789",
    ///         Location = "global",
    ///         DisplayName = "binding for all principals in the Organization",
    ///         PolicyKind = "PRINCIPAL_ACCESS_BOUNDARY",
    ///         PolicyBindingId = "binding-for-all-org-principals",
    ///         Policy = pabPolicy.PrincipalAccessBoundaryPolicyId.Apply(principalAccessBoundaryPolicyId =&gt; $"organizations/123456789/locations/global/principalAccessBoundaryPolicies/{principalAccessBoundaryPolicyId}"),
    ///         Target = new Gcp.Iam.Inputs.OrganizationsPolicyBindingTargetArgs
    ///         {
    ///             PrincipalSet = "//cloudresourcemanager.googleapis.com/organizations/123456789",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait60Seconds,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// OrganizationsPolicyBinding can be imported using any of these accepted formats:
    /// 
    /// * `organizations/{{organization}}/locations/{{location}}/policyBindings/{{policy_binding_id}}`
    /// 
    /// * `{{organization}}/{{location}}/{{policy_binding_id}}`
    /// 
    /// When using the `pulumi import` command, OrganizationsPolicyBinding can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:iam/organizationsPolicyBinding:OrganizationsPolicyBinding default organizations/{{organization}}/locations/{{location}}/policyBindings/{{policy_binding_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:iam/organizationsPolicyBinding:OrganizationsPolicyBinding default {{organization}}/{{location}}/{{policy_binding_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:iam/organizationsPolicyBinding:OrganizationsPolicyBinding")]
    public partial class OrganizationsPolicyBinding : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size
        /// limitations **Note**: This field is non-authoritative, and will only manage the annotations present in your
        /// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The
        /// syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary
        /// size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() &lt;
        /// 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\"
        /// expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description:
        /// \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' &amp;&amp; document.type
        /// != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string
        /// with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and
        /// functions that may be referenced within an expression are determined by the service that evaluates it. See the service
        /// documentation for additional information.
        /// </summary>
        [Output("condition")]
        public Output<Outputs.OrganizationsPolicyBindingCondition?> Condition { get; private set; } = null!;

        /// <summary>
        /// Output only. The time when the policy binding was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// Optional. The etag for the policy binding. If this is provided on update, it must match the server's etag.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The location of the Policy Binding
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The parent organization of the Policy Binding.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
        /// </summary>
        [Output("policy")]
        public Output<string> Policy { get; private set; } = null!;

        /// <summary>
        /// The Policy Binding ID.
        /// </summary>
        [Output("policyBindingId")]
        public Output<string> PolicyBindingId { get; private set; } = null!;

        /// <summary>
        /// Immutable. The kind of the policy to attach in this binding. This field must be one of the following: - Left empty (will
        /// be automatically set to the policy kind) - The input policy kind Possible values: POLICY_KIND_UNSPECIFIED
        /// PRINCIPAL_ACCESS_BOUNDARY ACCESS
        /// </summary>
        [Output("policyKind")]
        public Output<string?> PolicyKind { get; private set; } = null!;

        /// <summary>
        /// Output only. The globally unique ID of the policy to be bound.
        /// </summary>
        [Output("policyUid")]
        public Output<string> PolicyUid { get; private set; } = null!;

        /// <summary>
        /// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
        /// Structure is documented below.
        /// </summary>
        [Output("target")]
        public Output<Outputs.OrganizationsPolicyBindingTarget> Target { get; private set; } = null!;

        /// <summary>
        /// Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Output only. The time when the policy binding was most recently updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationsPolicyBinding resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationsPolicyBinding(string name, OrganizationsPolicyBindingArgs args, CustomResourceOptions? options = null)
            : base("gcp:iam/organizationsPolicyBinding:OrganizationsPolicyBinding", name, args ?? new OrganizationsPolicyBindingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationsPolicyBinding(string name, Input<string> id, OrganizationsPolicyBindingState? state = null, CustomResourceOptions? options = null)
            : base("gcp:iam/organizationsPolicyBinding:OrganizationsPolicyBinding", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationsPolicyBinding resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationsPolicyBinding Get(string name, Input<string> id, OrganizationsPolicyBindingState? state = null, CustomResourceOptions? options = null)
        {
            return new OrganizationsPolicyBinding(name, id, state, options);
        }
    }

    public sealed class OrganizationsPolicyBindingArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size
        /// limitations **Note**: This field is non-authoritative, and will only manage the annotations present in your
        /// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The
        /// syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary
        /// size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() &lt;
        /// 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\"
        /// expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description:
        /// \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' &amp;&amp; document.type
        /// != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string
        /// with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and
        /// functions that may be referenced within an expression are determined by the service that evaluates it. See the service
        /// documentation for additional information.
        /// </summary>
        [Input("condition")]
        public Input<Inputs.OrganizationsPolicyBindingConditionArgs>? Condition { get; set; }

        /// <summary>
        /// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The location of the Policy Binding
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The parent organization of the Policy Binding.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
        /// </summary>
        [Input("policy", required: true)]
        public Input<string> Policy { get; set; } = null!;

        /// <summary>
        /// The Policy Binding ID.
        /// </summary>
        [Input("policyBindingId", required: true)]
        public Input<string> PolicyBindingId { get; set; } = null!;

        /// <summary>
        /// Immutable. The kind of the policy to attach in this binding. This field must be one of the following: - Left empty (will
        /// be automatically set to the policy kind) - The input policy kind Possible values: POLICY_KIND_UNSPECIFIED
        /// PRINCIPAL_ACCESS_BOUNDARY ACCESS
        /// </summary>
        [Input("policyKind")]
        public Input<string>? PolicyKind { get; set; }

        /// <summary>
        /// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
        /// Structure is documented below.
        /// </summary>
        [Input("target", required: true)]
        public Input<Inputs.OrganizationsPolicyBindingTargetArgs> Target { get; set; } = null!;

        public OrganizationsPolicyBindingArgs()
        {
        }
        public static new OrganizationsPolicyBindingArgs Empty => new OrganizationsPolicyBindingArgs();
    }

    public sealed class OrganizationsPolicyBindingState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size
        /// limitations **Note**: This field is non-authoritative, and will only manage the annotations present in your
        /// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The
        /// syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary
        /// size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() &lt;
        /// 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\"
        /// expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description:
        /// \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' &amp;&amp; document.type
        /// != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string
        /// with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and
        /// functions that may be referenced within an expression are determined by the service that evaluates it. See the service
        /// documentation for additional information.
        /// </summary>
        [Input("condition")]
        public Input<Inputs.OrganizationsPolicyBindingConditionGetArgs>? Condition { get; set; }

        /// <summary>
        /// Output only. The time when the policy binding was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        /// <summary>
        /// Optional. The etag for the policy binding. If this is provided on update, it must match the server's etag.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The location of the Policy Binding
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The parent organization of the Policy Binding.
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// The Policy Binding ID.
        /// </summary>
        [Input("policyBindingId")]
        public Input<string>? PolicyBindingId { get; set; }

        /// <summary>
        /// Immutable. The kind of the policy to attach in this binding. This field must be one of the following: - Left empty (will
        /// be automatically set to the policy kind) - The input policy kind Possible values: POLICY_KIND_UNSPECIFIED
        /// PRINCIPAL_ACCESS_BOUNDARY ACCESS
        /// </summary>
        [Input("policyKind")]
        public Input<string>? PolicyKind { get; set; }

        /// <summary>
        /// Output only. The globally unique ID of the policy to be bound.
        /// </summary>
        [Input("policyUid")]
        public Input<string>? PolicyUid { get; set; }

        /// <summary>
        /// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
        /// Structure is documented below.
        /// </summary>
        [Input("target")]
        public Input<Inputs.OrganizationsPolicyBindingTargetGetArgs>? Target { get; set; }

        /// <summary>
        /// Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Output only. The time when the policy binding was most recently updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public OrganizationsPolicyBindingState()
        {
        }
        public static new OrganizationsPolicyBindingState Empty => new OrganizationsPolicyBindingState();
    }
}
