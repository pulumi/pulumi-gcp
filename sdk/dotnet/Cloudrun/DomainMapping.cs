// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Cloudrun
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/cloud_run_domain_mapping.html.markdown.
    /// </summary>
    public partial class DomainMapping : Pulumi.CustomResource
    {
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        [Output("metadata")]
        public Output<Outputs.DomainMappingMetadata> Metadata { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        [Output("spec")]
        public Output<Outputs.DomainMappingSpec> Spec { get; private set; } = null!;

        [Output("status")]
        public Output<Outputs.DomainMappingStatus> Status { get; private set; } = null!;


        /// <summary>
        /// Create a DomainMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainMapping(string name, DomainMappingArgs args, CustomResourceOptions? options = null)
            : base("gcp:cloudrun/domainMapping:DomainMapping", name, args, MakeResourceOptions(options, ""))
        {
        }

        private DomainMapping(string name, Input<string> id, DomainMappingState? state = null, CustomResourceOptions? options = null)
            : base("gcp:cloudrun/domainMapping:DomainMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainMapping Get(string name, Input<string> id, DomainMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainMapping(name, id, state, options);
        }
    }

    public sealed class DomainMappingArgs : Pulumi.ResourceArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("metadata", required: true)]
        public Input<Inputs.DomainMappingMetadataArgs> Metadata { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("spec", required: true)]
        public Input<Inputs.DomainMappingSpecArgs> Spec { get; set; } = null!;

        public DomainMappingArgs()
        {
        }
    }

    public sealed class DomainMappingState : Pulumi.ResourceArgs
    {
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("metadata")]
        public Input<Inputs.DomainMappingMetadataGetArgs>? Metadata { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("spec")]
        public Input<Inputs.DomainMappingSpecGetArgs>? Spec { get; set; }

        [Input("status")]
        public Input<Inputs.DomainMappingStatusGetArgs>? Status { get; set; }

        public DomainMappingState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class DomainMappingMetadataArgs : Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("generation")]
        public Input<int>? Generation { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        [Input("resourceVersion")]
        public Input<string>? ResourceVersion { get; set; }

        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public DomainMappingMetadataArgs()
        {
        }
    }

    public sealed class DomainMappingMetadataGetArgs : Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("generation")]
        public Input<int>? Generation { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        [Input("resourceVersion")]
        public Input<string>? ResourceVersion { get; set; }

        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public DomainMappingMetadataGetArgs()
        {
        }
    }

    public sealed class DomainMappingSpecArgs : Pulumi.ResourceArgs
    {
        [Input("certificateMode")]
        public Input<string>? CertificateMode { get; set; }

        [Input("forceOverride")]
        public Input<bool>? ForceOverride { get; set; }

        [Input("routeName", required: true)]
        public Input<string> RouteName { get; set; } = null!;

        public DomainMappingSpecArgs()
        {
        }
    }

    public sealed class DomainMappingSpecGetArgs : Pulumi.ResourceArgs
    {
        [Input("certificateMode")]
        public Input<string>? CertificateMode { get; set; }

        [Input("forceOverride")]
        public Input<bool>? ForceOverride { get; set; }

        [Input("routeName", required: true)]
        public Input<string> RouteName { get; set; } = null!;

        public DomainMappingSpecGetArgs()
        {
        }
    }

    public sealed class DomainMappingStatusConditionsGetArgs : Pulumi.ResourceArgs
    {
        [Input("message")]
        public Input<string>? Message { get; set; }

        [Input("reason")]
        public Input<string>? Reason { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public DomainMappingStatusConditionsGetArgs()
        {
        }
    }

    public sealed class DomainMappingStatusGetArgs : Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<DomainMappingStatusConditionsGetArgs>? _conditions;
        public InputList<DomainMappingStatusConditionsGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<DomainMappingStatusConditionsGetArgs>());
            set => _conditions = value;
        }

        [Input("mappedRouteName")]
        public Input<string>? MappedRouteName { get; set; }

        [Input("observedGeneration")]
        public Input<int>? ObservedGeneration { get; set; }

        [Input("resourceRecords")]
        private InputList<DomainMappingStatusResourceRecordsGetArgs>? _resourceRecords;
        public InputList<DomainMappingStatusResourceRecordsGetArgs> ResourceRecords
        {
            get => _resourceRecords ?? (_resourceRecords = new InputList<DomainMappingStatusResourceRecordsGetArgs>());
            set => _resourceRecords = value;
        }

        public DomainMappingStatusGetArgs()
        {
        }
    }

    public sealed class DomainMappingStatusResourceRecordsGetArgs : Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rrdata")]
        public Input<string>? Rrdata { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public DomainMappingStatusResourceRecordsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class DomainMappingMetadata
    {
        public readonly ImmutableDictionary<string, string> Annotations;
        public readonly int Generation;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Namespace;
        public readonly string ResourceVersion;
        public readonly string SelfLink;
        public readonly string Uid;

        [OutputConstructor]
        private DomainMappingMetadata(
            ImmutableDictionary<string, string> annotations,
            int generation,
            ImmutableDictionary<string, string> labels,
            string @namespace,
            string resourceVersion,
            string selfLink,
            string uid)
        {
            Annotations = annotations;
            Generation = generation;
            Labels = labels;
            Namespace = @namespace;
            ResourceVersion = resourceVersion;
            SelfLink = selfLink;
            Uid = uid;
        }
    }

    [OutputType]
    public sealed class DomainMappingSpec
    {
        public readonly string? CertificateMode;
        public readonly bool? ForceOverride;
        public readonly string RouteName;

        [OutputConstructor]
        private DomainMappingSpec(
            string? certificateMode,
            bool? forceOverride,
            string routeName)
        {
            CertificateMode = certificateMode;
            ForceOverride = forceOverride;
            RouteName = routeName;
        }
    }

    [OutputType]
    public sealed class DomainMappingStatus
    {
        public readonly ImmutableArray<DomainMappingStatusConditions> Conditions;
        public readonly string MappedRouteName;
        public readonly int ObservedGeneration;
        public readonly ImmutableArray<DomainMappingStatusResourceRecords> ResourceRecords;

        [OutputConstructor]
        private DomainMappingStatus(
            ImmutableArray<DomainMappingStatusConditions> conditions,
            string mappedRouteName,
            int observedGeneration,
            ImmutableArray<DomainMappingStatusResourceRecords> resourceRecords)
        {
            Conditions = conditions;
            MappedRouteName = mappedRouteName;
            ObservedGeneration = observedGeneration;
            ResourceRecords = resourceRecords;
        }
    }

    [OutputType]
    public sealed class DomainMappingStatusConditions
    {
        public readonly string Message;
        public readonly string Reason;
        public readonly string Status;
        public readonly string Type;

        [OutputConstructor]
        private DomainMappingStatusConditions(
            string message,
            string reason,
            string status,
            string type)
        {
            Message = message;
            Reason = reason;
            Status = status;
            Type = type;
        }
    }

    [OutputType]
    public sealed class DomainMappingStatusResourceRecords
    {
        public readonly string Name;
        public readonly string? Rrdata;
        public readonly string? Type;

        [OutputConstructor]
        private DomainMappingStatusResourceRecords(
            string name,
            string? rrdata,
            string? type)
        {
            Name = name;
            Rrdata = rrdata;
            Type = type;
        }
    }
    }
}
