// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudRun
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/cloud_run_service.html.markdown.
    /// </summary>
    public partial class Service : Pulumi.CustomResource
    {
        /// <summary>
        /// The location of the cloud run instance. eg us-central1
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Metadata associated with this Service, including name, namespace, labels, and annotations.
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.ServiceMetadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources. Name
        /// is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info:
        /// http://kubernetes.io/docs/user-guide/identifiers#names
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// RevisionSpec holds the desired state of the Revision (from the client).
        /// </summary>
        [Output("spec")]
        public Output<Outputs.ServiceSpec> Spec { get; private set; } = null!;

        /// <summary>
        /// The current status of the Service.
        /// </summary>
        [Output("status")]
        public Output<Outputs.ServiceStatus> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("gcp:cloudrun/service:Service", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:cloudrun/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The location of the cloud run instance. eg us-central1
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Metadata associated with this Service, including name, namespace, labels, and annotations.
        /// </summary>
        [Input("metadata", required: true)]
        public Input<Inputs.ServiceMetadataArgs> Metadata { get; set; } = null!;

        /// <summary>
        /// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources. Name
        /// is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info:
        /// http://kubernetes.io/docs/user-guide/identifiers#names
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// RevisionSpec holds the desired state of the Revision (from the client).
        /// </summary>
        [Input("spec", required: true)]
        public Input<Inputs.ServiceSpecArgs> Spec { get; set; } = null!;

        public ServiceArgs()
        {
        }
    }

    public sealed class ServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The location of the cloud run instance. eg us-central1
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Metadata associated with this Service, including name, namespace, labels, and annotations.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ServiceMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources. Name
        /// is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info:
        /// http://kubernetes.io/docs/user-guide/identifiers#names
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// RevisionSpec holds the desired state of the Revision (from the client).
        /// </summary>
        [Input("spec")]
        public Input<Inputs.ServiceSpecGetArgs>? Spec { get; set; }

        /// <summary>
        /// The current status of the Service.
        /// </summary>
        [Input("status")]
        public Input<Inputs.ServiceStatusGetArgs>? Status { get; set; }

        public ServiceState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ServiceMetadataArgs : Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("generation")]
        public Input<int>? Generation { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        [Input("resourceVersion")]
        public Input<string>? ResourceVersion { get; set; }

        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public ServiceMetadataArgs()
        {
        }
    }

    public sealed class ServiceMetadataGetArgs : Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("generation")]
        public Input<int>? Generation { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        [Input("resourceVersion")]
        public Input<string>? ResourceVersion { get; set; }

        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public ServiceMetadataGetArgs()
        {
        }
    }

    public sealed class ServiceSpecArgs : Pulumi.ResourceArgs
    {
        [Input("containerConcurrency")]
        public Input<int>? ContainerConcurrency { get; set; }

        [Input("containers", required: true)]
        private InputList<ServiceSpecContainersArgs>? _containers;
        public InputList<ServiceSpecContainersArgs> Containers
        {
            get => _containers ?? (_containers = new InputList<ServiceSpecContainersArgs>());
            set => _containers = value;
        }

        [Input("servingState")]
        public Input<string>? ServingState { get; set; }

        public ServiceSpecArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersArgs : Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        [Input("commands")]
        private InputList<string>? _commands;
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        [Input("envs")]
        private InputList<ServiceSpecContainersEnvsArgs>? _envs;
        public InputList<ServiceSpecContainersEnvsArgs> Envs
        {
            get => _envs ?? (_envs = new InputList<ServiceSpecContainersEnvsArgs>());
            set => _envs = value;
        }

        [Input("envFroms")]
        private InputList<ServiceSpecContainersEnvFromsArgs>? _envFroms;
        public InputList<ServiceSpecContainersEnvFromsArgs> EnvFroms
        {
            get => _envFroms ?? (_envFroms = new InputList<ServiceSpecContainersEnvFromsArgs>());
            set => _envFroms = value;
        }

        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("resources")]
        public Input<ServiceSpecContainersResourcesArgs>? Resources { get; set; }

        [Input("workingDir")]
        public Input<string>? WorkingDir { get; set; }

        public ServiceSpecContainersArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersEnvFromsArgs : Pulumi.ResourceArgs
    {
        [Input("configMapRef")]
        public Input<ServiceSpecContainersEnvFromsConfigMapRefArgs>? ConfigMapRef { get; set; }

        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("secretRef")]
        public Input<ServiceSpecContainersEnvFromsSecretRefArgs>? SecretRef { get; set; }

        public ServiceSpecContainersEnvFromsArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersEnvFromsConfigMapRefArgs : Pulumi.ResourceArgs
    {
        [Input("localObjectReference")]
        public Input<ServiceSpecContainersEnvFromsConfigMapRefLocalObjectReferenceArgs>? LocalObjectReference { get; set; }

        [Input("optional")]
        public Input<bool>? Optional { get; set; }

        public ServiceSpecContainersEnvFromsConfigMapRefArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersEnvFromsConfigMapRefGetArgs : Pulumi.ResourceArgs
    {
        [Input("localObjectReference")]
        public Input<ServiceSpecContainersEnvFromsConfigMapRefLocalObjectReferenceGetArgs>? LocalObjectReference { get; set; }

        [Input("optional")]
        public Input<bool>? Optional { get; set; }

        public ServiceSpecContainersEnvFromsConfigMapRefGetArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersEnvFromsConfigMapRefLocalObjectReferenceArgs : Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ServiceSpecContainersEnvFromsConfigMapRefLocalObjectReferenceArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersEnvFromsConfigMapRefLocalObjectReferenceGetArgs : Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ServiceSpecContainersEnvFromsConfigMapRefLocalObjectReferenceGetArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersEnvFromsGetArgs : Pulumi.ResourceArgs
    {
        [Input("configMapRef")]
        public Input<ServiceSpecContainersEnvFromsConfigMapRefGetArgs>? ConfigMapRef { get; set; }

        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("secretRef")]
        public Input<ServiceSpecContainersEnvFromsSecretRefGetArgs>? SecretRef { get; set; }

        public ServiceSpecContainersEnvFromsGetArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersEnvFromsSecretRefArgs : Pulumi.ResourceArgs
    {
        [Input("localObjectReference")]
        public Input<ServiceSpecContainersEnvFromsSecretRefLocalObjectReferenceArgs>? LocalObjectReference { get; set; }

        [Input("optional")]
        public Input<bool>? Optional { get; set; }

        public ServiceSpecContainersEnvFromsSecretRefArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersEnvFromsSecretRefGetArgs : Pulumi.ResourceArgs
    {
        [Input("localObjectReference")]
        public Input<ServiceSpecContainersEnvFromsSecretRefLocalObjectReferenceGetArgs>? LocalObjectReference { get; set; }

        [Input("optional")]
        public Input<bool>? Optional { get; set; }

        public ServiceSpecContainersEnvFromsSecretRefGetArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersEnvFromsSecretRefLocalObjectReferenceArgs : Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ServiceSpecContainersEnvFromsSecretRefLocalObjectReferenceArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersEnvFromsSecretRefLocalObjectReferenceGetArgs : Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ServiceSpecContainersEnvFromsSecretRefLocalObjectReferenceGetArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersEnvsArgs : Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("value")]
        public Input<string>? Value { get; set; }

        public ServiceSpecContainersEnvsArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersEnvsGetArgs : Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("value")]
        public Input<string>? Value { get; set; }

        public ServiceSpecContainersEnvsGetArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersGetArgs : Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        [Input("commands")]
        private InputList<string>? _commands;
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        [Input("envs")]
        private InputList<ServiceSpecContainersEnvsGetArgs>? _envs;
        public InputList<ServiceSpecContainersEnvsGetArgs> Envs
        {
            get => _envs ?? (_envs = new InputList<ServiceSpecContainersEnvsGetArgs>());
            set => _envs = value;
        }

        [Input("envFroms")]
        private InputList<ServiceSpecContainersEnvFromsGetArgs>? _envFroms;
        public InputList<ServiceSpecContainersEnvFromsGetArgs> EnvFroms
        {
            get => _envFroms ?? (_envFroms = new InputList<ServiceSpecContainersEnvFromsGetArgs>());
            set => _envFroms = value;
        }

        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("resources")]
        public Input<ServiceSpecContainersResourcesGetArgs>? Resources { get; set; }

        [Input("workingDir")]
        public Input<string>? WorkingDir { get; set; }

        public ServiceSpecContainersGetArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersResourcesArgs : Pulumi.ResourceArgs
    {
        [Input("limits")]
        private InputMap<string>? _limits;
        public InputMap<string> Limits
        {
            get => _limits ?? (_limits = new InputMap<string>());
            set => _limits = value;
        }

        [Input("requests")]
        private InputMap<string>? _requests;
        public InputMap<string> Requests
        {
            get => _requests ?? (_requests = new InputMap<string>());
            set => _requests = value;
        }

        public ServiceSpecContainersResourcesArgs()
        {
        }
    }

    public sealed class ServiceSpecContainersResourcesGetArgs : Pulumi.ResourceArgs
    {
        [Input("limits")]
        private InputMap<string>? _limits;
        public InputMap<string> Limits
        {
            get => _limits ?? (_limits = new InputMap<string>());
            set => _limits = value;
        }

        [Input("requests")]
        private InputMap<string>? _requests;
        public InputMap<string> Requests
        {
            get => _requests ?? (_requests = new InputMap<string>());
            set => _requests = value;
        }

        public ServiceSpecContainersResourcesGetArgs()
        {
        }
    }

    public sealed class ServiceSpecGetArgs : Pulumi.ResourceArgs
    {
        [Input("containerConcurrency")]
        public Input<int>? ContainerConcurrency { get; set; }

        [Input("containers", required: true)]
        private InputList<ServiceSpecContainersGetArgs>? _containers;
        public InputList<ServiceSpecContainersGetArgs> Containers
        {
            get => _containers ?? (_containers = new InputList<ServiceSpecContainersGetArgs>());
            set => _containers = value;
        }

        [Input("servingState")]
        public Input<string>? ServingState { get; set; }

        public ServiceSpecGetArgs()
        {
        }
    }

    public sealed class ServiceStatusConditionsGetArgs : Pulumi.ResourceArgs
    {
        [Input("message")]
        public Input<string>? Message { get; set; }

        [Input("reason")]
        public Input<string>? Reason { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public ServiceStatusConditionsGetArgs()
        {
        }
    }

    public sealed class ServiceStatusGetArgs : Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<ServiceStatusConditionsGetArgs>? _conditions;
        public InputList<ServiceStatusConditionsGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<ServiceStatusConditionsGetArgs>());
            set => _conditions = value;
        }

        [Input("latestCreatedRevisionName")]
        public Input<string>? LatestCreatedRevisionName { get; set; }

        [Input("latestReadyRevisionName")]
        public Input<string>? LatestReadyRevisionName { get; set; }

        [Input("observedGeneration")]
        public Input<int>? ObservedGeneration { get; set; }

        [Input("url")]
        public Input<string>? Url { get; set; }

        public ServiceStatusGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ServiceMetadata
    {
        public readonly ImmutableDictionary<string, string> Annotations;
        public readonly int Generation;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Namespace;
        public readonly string ResourceVersion;
        public readonly string SelfLink;
        public readonly string Uid;

        [OutputConstructor]
        private ServiceMetadata(
            ImmutableDictionary<string, string> annotations,
            int generation,
            ImmutableDictionary<string, string> labels,
            string @namespace,
            string resourceVersion,
            string selfLink,
            string uid)
        {
            Annotations = annotations;
            Generation = generation;
            Labels = labels;
            Namespace = @namespace;
            ResourceVersion = resourceVersion;
            SelfLink = selfLink;
            Uid = uid;
        }
    }

    [OutputType]
    public sealed class ServiceSpec
    {
        public readonly int? ContainerConcurrency;
        public readonly ImmutableArray<ServiceSpecContainers> Containers;
        public readonly string ServingState;

        [OutputConstructor]
        private ServiceSpec(
            int? containerConcurrency,
            ImmutableArray<ServiceSpecContainers> containers,
            string servingState)
        {
            ContainerConcurrency = containerConcurrency;
            Containers = containers;
            ServingState = servingState;
        }
    }

    [OutputType]
    public sealed class ServiceSpecContainers
    {
        public readonly ImmutableArray<string> Args;
        public readonly ImmutableArray<string> Commands;
        public readonly ImmutableArray<ServiceSpecContainersEnvs> Envs;
        public readonly ImmutableArray<ServiceSpecContainersEnvFroms> EnvFroms;
        public readonly string Image;
        public readonly ServiceSpecContainersResources? Resources;
        public readonly string? WorkingDir;

        [OutputConstructor]
        private ServiceSpecContainers(
            ImmutableArray<string> args,
            ImmutableArray<string> commands,
            ImmutableArray<ServiceSpecContainersEnvs> envs,
            ImmutableArray<ServiceSpecContainersEnvFroms> envFroms,
            string image,
            ServiceSpecContainersResources? resources,
            string? workingDir)
        {
            Args = args;
            Commands = commands;
            Envs = envs;
            EnvFroms = envFroms;
            Image = image;
            Resources = resources;
            WorkingDir = workingDir;
        }
    }

    [OutputType]
    public sealed class ServiceSpecContainersEnvFroms
    {
        public readonly ServiceSpecContainersEnvFromsConfigMapRef? ConfigMapRef;
        public readonly string? Prefix;
        public readonly ServiceSpecContainersEnvFromsSecretRef? SecretRef;

        [OutputConstructor]
        private ServiceSpecContainersEnvFroms(
            ServiceSpecContainersEnvFromsConfigMapRef? configMapRef,
            string? prefix,
            ServiceSpecContainersEnvFromsSecretRef? secretRef)
        {
            ConfigMapRef = configMapRef;
            Prefix = prefix;
            SecretRef = secretRef;
        }
    }

    [OutputType]
    public sealed class ServiceSpecContainersEnvFromsConfigMapRef
    {
        public readonly ServiceSpecContainersEnvFromsConfigMapRefLocalObjectReference? LocalObjectReference;
        public readonly bool? Optional;

        [OutputConstructor]
        private ServiceSpecContainersEnvFromsConfigMapRef(
            ServiceSpecContainersEnvFromsConfigMapRefLocalObjectReference? localObjectReference,
            bool? optional)
        {
            LocalObjectReference = localObjectReference;
            Optional = optional;
        }
    }

    [OutputType]
    public sealed class ServiceSpecContainersEnvFromsConfigMapRefLocalObjectReference
    {
        public readonly string? Name;

        [OutputConstructor]
        private ServiceSpecContainersEnvFromsConfigMapRefLocalObjectReference(string? name)
        {
            Name = name;
        }
    }

    [OutputType]
    public sealed class ServiceSpecContainersEnvFromsSecretRef
    {
        public readonly ServiceSpecContainersEnvFromsSecretRefLocalObjectReference? LocalObjectReference;
        public readonly bool? Optional;

        [OutputConstructor]
        private ServiceSpecContainersEnvFromsSecretRef(
            ServiceSpecContainersEnvFromsSecretRefLocalObjectReference? localObjectReference,
            bool? optional)
        {
            LocalObjectReference = localObjectReference;
            Optional = optional;
        }
    }

    [OutputType]
    public sealed class ServiceSpecContainersEnvFromsSecretRefLocalObjectReference
    {
        public readonly string? Name;

        [OutputConstructor]
        private ServiceSpecContainersEnvFromsSecretRefLocalObjectReference(string? name)
        {
            Name = name;
        }
    }

    [OutputType]
    public sealed class ServiceSpecContainersEnvs
    {
        public readonly string? Name;
        public readonly string? Value;

        [OutputConstructor]
        private ServiceSpecContainersEnvs(
            string? name,
            string? value)
        {
            Name = name;
            Value = value;
        }
    }

    [OutputType]
    public sealed class ServiceSpecContainersResources
    {
        public readonly ImmutableDictionary<string, string>? Limits;
        public readonly ImmutableDictionary<string, string>? Requests;

        [OutputConstructor]
        private ServiceSpecContainersResources(
            ImmutableDictionary<string, string>? limits,
            ImmutableDictionary<string, string>? requests)
        {
            Limits = limits;
            Requests = requests;
        }
    }

    [OutputType]
    public sealed class ServiceStatus
    {
        public readonly ImmutableArray<ServiceStatusConditions> Conditions;
        public readonly string LatestCreatedRevisionName;
        public readonly string LatestReadyRevisionName;
        public readonly int ObservedGeneration;
        public readonly string Url;

        [OutputConstructor]
        private ServiceStatus(
            ImmutableArray<ServiceStatusConditions> conditions,
            string latestCreatedRevisionName,
            string latestReadyRevisionName,
            int observedGeneration,
            string url)
        {
            Conditions = conditions;
            LatestCreatedRevisionName = latestCreatedRevisionName;
            LatestReadyRevisionName = latestReadyRevisionName;
            ObservedGeneration = observedGeneration;
            Url = url;
        }
    }

    [OutputType]
    public sealed class ServiceStatusConditions
    {
        public readonly string Message;
        public readonly string Reason;
        public readonly string Status;
        public readonly string Type;

        [OutputConstructor]
        private ServiceStatusConditions(
            string message,
            string reason,
            string status,
            string type)
        {
            Message = message;
            Reason = reason;
            Status = status;
            Type = type;
        }
    }
    }
}
