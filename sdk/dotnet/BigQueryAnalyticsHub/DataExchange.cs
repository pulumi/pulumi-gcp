// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQueryAnalyticsHub
{
    /// <summary>
    /// A Bigquery Analytics Hub data exchange
    /// 
    /// To get more information about DataExchange, see:
    /// 
    /// * [API documentation](https://cloud.google.com/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/bigquery/docs/analytics-hub-introduction)
    /// 
    /// ## Example Usage
    /// 
    /// ### Bigquery Analyticshub Data Exchange Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dataExchange = new Gcp.BigQueryAnalyticsHub.DataExchange("data_exchange", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = "my_data_exchange",
    ///         DisplayName = "my_data_exchange",
    ///         Description = "example data exchange",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Bigquery Analyticshub Data Exchange Dcr
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dataExchange = new Gcp.BigQueryAnalyticsHub.DataExchange("data_exchange", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = "dcr_data_exchange",
    ///         DisplayName = "dcr_data_exchange",
    ///         Description = "example dcr data exchange",
    ///         SharingEnvironmentConfig = new Gcp.BigQueryAnalyticsHub.Inputs.DataExchangeSharingEnvironmentConfigArgs
    ///         {
    ///             DcrExchangeConfig = null,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Bigquery Analyticshub Data Exchange Log Linked Dataset Query User
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dataExchange = new Gcp.BigQueryAnalyticsHub.DataExchange("data_exchange", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = "tf_test_log_email_data_exchange",
    ///         DisplayName = "tf_test_log_email_data_exchange",
    ///         Description = "Example for log email test for data exchange",
    ///         LogLinkedDatasetQueryUserEmail = true,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Bigquery Analyticshub Public Data Exchange
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dataExchange = new Gcp.BigQueryAnalyticsHub.DataExchange("data_exchange", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = "public_data_exchange",
    ///         DisplayName = "public_data_exchange",
    ///         Description = "Example for public data exchange",
    ///         DiscoveryType = "DISCOVERY_TYPE_PUBLIC",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DataExchange can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{data_exchange_id}}`
    /// 
    /// * `{{location}}/{{data_exchange_id}}`
    /// 
    /// * `{{data_exchange_id}}`
    /// 
    /// When using the `pulumi import` command, DataExchange can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigqueryanalyticshub/dataExchange:DataExchange default projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigqueryanalyticshub/dataExchange:DataExchange default {{project}}/{{location}}/{{data_exchange_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigqueryanalyticshub/dataExchange:DataExchange default {{location}}/{{data_exchange_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigqueryanalyticshub/dataExchange:DataExchange default {{data_exchange_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:bigqueryanalyticshub/dataExchange:DataExchange")]
    public partial class DataExchange : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Output("dataExchangeId")]
        public Output<string> DataExchangeId { get; private set; } = null!;

        /// <summary>
        /// Description of the data exchange.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Type of discovery on the discovery page for all the listings under this exchange. Cannot be set for a Data Clean Room. Updating this field also updates (overwrites) the discoveryType field for all the listings under this exchange.
        /// Possible values are: `DISCOVERY_TYPE_PRIVATE`, `DISCOVERY_TYPE_PUBLIC`.
        /// </summary>
        [Output("discoveryType")]
        public Output<string> DiscoveryType { get; private set; } = null!;

        /// <summary>
        /// Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Documentation describing the data exchange.
        /// </summary>
        [Output("documentation")]
        public Output<string?> Documentation { get; private set; } = null!;

        /// <summary>
        /// Base64 encoded image representing the data exchange.
        /// </summary>
        [Output("icon")]
        public Output<string?> Icon { get; private set; } = null!;

        /// <summary>
        /// Number of listings contained in the data exchange.
        /// </summary>
        [Output("listingCount")]
        public Output<int> ListingCount { get; private set; } = null!;

        /// <summary>
        /// The name of the location this data exchange.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
        /// </summary>
        [Output("logLinkedDatasetQueryUserEmail")]
        public Output<bool?> LogLinkedDatasetQueryUserEmail { get; private set; } = null!;

        /// <summary>
        /// The resource name of the data exchange, for example:
        /// "projects/myproject/locations/US/dataExchanges/123"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Email or URL of the primary point of contact of the data exchange.
        /// </summary>
        [Output("primaryContact")]
        public Output<string?> PrimaryContact { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Configurable data sharing environment option for a data exchange.
        /// This field is required for data clean room exchanges.
        /// Structure is documented below.
        /// </summary>
        [Output("sharingEnvironmentConfig")]
        public Output<Outputs.DataExchangeSharingEnvironmentConfig> SharingEnvironmentConfig { get; private set; } = null!;


        /// <summary>
        /// Create a DataExchange resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataExchange(string name, DataExchangeArgs args, CustomResourceOptions? options = null)
            : base("gcp:bigqueryanalyticshub/dataExchange:DataExchange", name, args ?? new DataExchangeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataExchange(string name, Input<string> id, DataExchangeState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigqueryanalyticshub/dataExchange:DataExchange", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataExchange resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataExchange Get(string name, Input<string> id, DataExchangeState? state = null, CustomResourceOptions? options = null)
        {
            return new DataExchange(name, id, state, options);
        }
    }

    public sealed class DataExchangeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Input("dataExchangeId", required: true)]
        public Input<string> DataExchangeId { get; set; } = null!;

        /// <summary>
        /// Description of the data exchange.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Type of discovery on the discovery page for all the listings under this exchange. Cannot be set for a Data Clean Room. Updating this field also updates (overwrites) the discoveryType field for all the listings under this exchange.
        /// Possible values are: `DISCOVERY_TYPE_PRIVATE`, `DISCOVERY_TYPE_PUBLIC`.
        /// </summary>
        [Input("discoveryType")]
        public Input<string>? DiscoveryType { get; set; }

        /// <summary>
        /// Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Documentation describing the data exchange.
        /// </summary>
        [Input("documentation")]
        public Input<string>? Documentation { get; set; }

        /// <summary>
        /// Base64 encoded image representing the data exchange.
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        /// <summary>
        /// The name of the location this data exchange.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
        /// </summary>
        [Input("logLinkedDatasetQueryUserEmail")]
        public Input<bool>? LogLinkedDatasetQueryUserEmail { get; set; }

        /// <summary>
        /// Email or URL of the primary point of contact of the data exchange.
        /// </summary>
        [Input("primaryContact")]
        public Input<string>? PrimaryContact { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Configurable data sharing environment option for a data exchange.
        /// This field is required for data clean room exchanges.
        /// Structure is documented below.
        /// </summary>
        [Input("sharingEnvironmentConfig")]
        public Input<Inputs.DataExchangeSharingEnvironmentConfigArgs>? SharingEnvironmentConfig { get; set; }

        public DataExchangeArgs()
        {
        }
        public static new DataExchangeArgs Empty => new DataExchangeArgs();
    }

    public sealed class DataExchangeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Input("dataExchangeId")]
        public Input<string>? DataExchangeId { get; set; }

        /// <summary>
        /// Description of the data exchange.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Type of discovery on the discovery page for all the listings under this exchange. Cannot be set for a Data Clean Room. Updating this field also updates (overwrites) the discoveryType field for all the listings under this exchange.
        /// Possible values are: `DISCOVERY_TYPE_PRIVATE`, `DISCOVERY_TYPE_PUBLIC`.
        /// </summary>
        [Input("discoveryType")]
        public Input<string>? DiscoveryType { get; set; }

        /// <summary>
        /// Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Documentation describing the data exchange.
        /// </summary>
        [Input("documentation")]
        public Input<string>? Documentation { get; set; }

        /// <summary>
        /// Base64 encoded image representing the data exchange.
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        /// <summary>
        /// Number of listings contained in the data exchange.
        /// </summary>
        [Input("listingCount")]
        public Input<int>? ListingCount { get; set; }

        /// <summary>
        /// The name of the location this data exchange.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
        /// </summary>
        [Input("logLinkedDatasetQueryUserEmail")]
        public Input<bool>? LogLinkedDatasetQueryUserEmail { get; set; }

        /// <summary>
        /// The resource name of the data exchange, for example:
        /// "projects/myproject/locations/US/dataExchanges/123"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Email or URL of the primary point of contact of the data exchange.
        /// </summary>
        [Input("primaryContact")]
        public Input<string>? PrimaryContact { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Configurable data sharing environment option for a data exchange.
        /// This field is required for data clean room exchanges.
        /// Structure is documented below.
        /// </summary>
        [Input("sharingEnvironmentConfig")]
        public Input<Inputs.DataExchangeSharingEnvironmentConfigGetArgs>? SharingEnvironmentConfig { get; set; }

        public DataExchangeState()
        {
        }
        public static new DataExchangeState Empty => new DataExchangeState();
    }
}
