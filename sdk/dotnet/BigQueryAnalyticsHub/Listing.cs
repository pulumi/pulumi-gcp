// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQueryAnalyticsHub
{
    /// <summary>
    /// A Bigquery Analytics Hub data exchange listing
    /// 
    /// To get more information about Listing, see:
    /// 
    /// * [API documentation](https://cloud.google.com/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/bigquery/docs/analytics-hub-introduction)
    /// 
    /// ## Example Usage
    /// 
    /// ### Bigquery Analyticshub Listing Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var listing = new Gcp.BigQueryAnalyticsHub.DataExchange("listing", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = "my_data_exchange",
    ///         DisplayName = "my_data_exchange",
    ///         Description = "example data exchange",
    ///     });
    /// 
    ///     var listingDataset = new Gcp.BigQuery.Dataset("listing", new()
    ///     {
    ///         DatasetId = "my_listing",
    ///         FriendlyName = "my_listing",
    ///         Description = "example data exchange",
    ///         Location = "US",
    ///     });
    /// 
    ///     var listingListing = new Gcp.BigQueryAnalyticsHub.Listing("listing", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = listing.DataExchangeId,
    ///         ListingId = "my_listing",
    ///         DisplayName = "my_listing",
    ///         Description = "example data exchange",
    ///         BigqueryDataset = new Gcp.BigQueryAnalyticsHub.Inputs.ListingBigqueryDatasetArgs
    ///         {
    ///             Dataset = listingDataset.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Bigquery Analyticshub Listing Restricted
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var listing = new Gcp.BigQueryAnalyticsHub.DataExchange("listing", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = "my_data_exchange",
    ///         DisplayName = "my_data_exchange",
    ///         Description = "example data exchange",
    ///     });
    /// 
    ///     var listingDataset = new Gcp.BigQuery.Dataset("listing", new()
    ///     {
    ///         DatasetId = "my_listing",
    ///         FriendlyName = "my_listing",
    ///         Description = "example data exchange",
    ///         Location = "US",
    ///     });
    /// 
    ///     var listingListing = new Gcp.BigQueryAnalyticsHub.Listing("listing", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = listing.DataExchangeId,
    ///         ListingId = "my_listing",
    ///         DisplayName = "my_listing",
    ///         Description = "example data exchange",
    ///         BigqueryDataset = new Gcp.BigQueryAnalyticsHub.Inputs.ListingBigqueryDatasetArgs
    ///         {
    ///             Dataset = listingDataset.Id,
    ///         },
    ///         RestrictedExportConfig = new Gcp.BigQueryAnalyticsHub.Inputs.ListingRestrictedExportConfigArgs
    ///         {
    ///             Enabled = true,
    ///             RestrictQueryResult = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Bigquery Analyticshub Listing Dcr
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var listing = new Gcp.BigQueryAnalyticsHub.DataExchange("listing", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = "dcr_data_exchange",
    ///         DisplayName = "dcr_data_exchange",
    ///         Description = "example dcr data exchange",
    ///         SharingEnvironmentConfig = new Gcp.BigQueryAnalyticsHub.Inputs.DataExchangeSharingEnvironmentConfigArgs
    ///         {
    ///             DcrExchangeConfig = null,
    ///         },
    ///     });
    /// 
    ///     var listingDataset = new Gcp.BigQuery.Dataset("listing", new()
    ///     {
    ///         DatasetId = "dcr_listing",
    ///         FriendlyName = "dcr_listing",
    ///         Description = "example dcr data exchange",
    ///         Location = "US",
    ///     });
    /// 
    ///     var listingTable = new Gcp.BigQuery.Table("listing", new()
    ///     {
    ///         DeletionProtection = false,
    ///         TableId = "dcr_listing",
    ///         DatasetId = listingDataset.DatasetId,
    ///         Schema = @"[
    ///   {
    ///     ""name"": ""name"",
    ///     ""type"": ""STRING"",
    ///     ""mode"": ""NULLABLE""
    ///   },
    ///   {
    ///     ""name"": ""post_abbr"",
    ///     ""type"": ""STRING"",
    ///     ""mode"": ""NULLABLE""
    ///   },
    ///   {
    ///     ""name"": ""date"",
    ///     ""type"": ""DATE"",
    ///     ""mode"": ""NULLABLE""
    ///   }
    /// ]
    /// ",
    ///     });
    /// 
    ///     var listingListing = new Gcp.BigQueryAnalyticsHub.Listing("listing", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = listing.DataExchangeId,
    ///         ListingId = "dcr_listing",
    ///         DisplayName = "dcr_listing",
    ///         Description = "example dcr data exchange",
    ///         BigqueryDataset = new Gcp.BigQueryAnalyticsHub.Inputs.ListingBigqueryDatasetArgs
    ///         {
    ///             Dataset = listingDataset.Id,
    ///             SelectedResources = new[]
    ///             {
    ///                 new Gcp.BigQueryAnalyticsHub.Inputs.ListingBigqueryDatasetSelectedResourceArgs
    ///                 {
    ///                     Table = listingTable.Id,
    ///                 },
    ///             },
    ///         },
    ///         RestrictedExportConfig = new Gcp.BigQueryAnalyticsHub.Inputs.ListingRestrictedExportConfigArgs
    ///         {
    ///             Enabled = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Bigquery Analyticshub Listing Log Linked Dataset Query User
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var listingLogEmail = new Gcp.BigQueryAnalyticsHub.DataExchange("listing_log_email", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = "tf_test_log_email_de",
    ///         DisplayName = "tf_test_log_email_de",
    ///         Description = "Example for log email test",
    ///     });
    /// 
    ///     var listingLogEmailDataset = new Gcp.BigQuery.Dataset("listing_log_email", new()
    ///     {
    ///         DatasetId = "tf_test_log_email_ds",
    ///         FriendlyName = "tf_test_log_email_ds",
    ///         Description = "Example for log email test",
    ///         Location = "US",
    ///     });
    /// 
    ///     var listing = new Gcp.BigQueryAnalyticsHub.Listing("listing", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = listingLogEmail.DataExchangeId,
    ///         ListingId = "tf_test_log_email_listing",
    ///         DisplayName = "tf_test_log_email_listing",
    ///         Description = "Example for log email test",
    ///         LogLinkedDatasetQueryUserEmail = true,
    ///         BigqueryDataset = new Gcp.BigQueryAnalyticsHub.Inputs.ListingBigqueryDatasetArgs
    ///         {
    ///             Dataset = listingLogEmailDataset.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Bigquery Analyticshub Listing Pubsub
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var listing = new Gcp.BigQueryAnalyticsHub.DataExchange("listing", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = "tf_test_pubsub_data_exchange",
    ///         DisplayName = "tf_test_pubsub_data_exchange",
    ///         Description = "Example for pubsub topic source",
    ///     });
    /// 
    ///     var tfTestPubsubTopic = new Gcp.PubSub.Topic("tf_test_pubsub_topic", new()
    ///     {
    ///         Name = "test_pubsub",
    ///     });
    /// 
    ///     var listingListing = new Gcp.BigQueryAnalyticsHub.Listing("listing", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = listing.DataExchangeId,
    ///         ListingId = "tf_test_pubsub_listing",
    ///         DisplayName = "tf_test_pubsub_listing",
    ///         Description = "Example for pubsub topic source",
    ///         PubsubTopic = new Gcp.BigQueryAnalyticsHub.Inputs.ListingPubsubTopicArgs
    ///         {
    ///             Topic = tfTestPubsubTopic.Id,
    ///             DataAffinityRegions = new[]
    ///             {
    ///                 "us-central1",
    ///                 "europe-west1",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Bigquery Analyticshub Listing Dcr Routine
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dcrDataExchangeExample = new Gcp.BigQueryAnalyticsHub.DataExchange("dcr_data_exchange_example", new()
    ///     {
    ///         Location = "us",
    ///         DataExchangeId = "tf_test_data_exchange",
    ///         DisplayName = "tf_test_data_exchange",
    ///         Description = "Example for listing with routine",
    ///         SharingEnvironmentConfig = new Gcp.BigQueryAnalyticsHub.Inputs.DataExchangeSharingEnvironmentConfigArgs
    ///         {
    ///             DcrExchangeConfig = null,
    ///         },
    ///     });
    /// 
    ///     var listing = new Gcp.BigQuery.Dataset("listing", new()
    ///     {
    ///         DatasetId = "tf_test_dataset",
    ///         FriendlyName = "tf_test_dataset",
    ///         Description = "Example for listing with routine",
    ///         Location = "us",
    ///     });
    /// 
    ///     var listingRoutine = new Gcp.BigQuery.Routine("listing", new()
    ///     {
    ///         DatasetId = listing.DatasetId,
    ///         RoutineId = "tf_test_routine",
    ///         RoutineType = "TABLE_VALUED_FUNCTION",
    ///         Language = "SQL",
    ///         Description = "A DCR routine example.",
    ///         DefinitionBody = @"SELECT 1 + value AS value
    /// ",
    ///         Arguments = new[]
    ///         {
    ///             new Gcp.BigQuery.Inputs.RoutineArgumentArgs
    ///             {
    ///                 Name = "value",
    ///                 ArgumentKind = "FIXED_TYPE",
    ///                 DataType = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["typeKind"] = "INT64",
    ///                 }),
    ///             },
    ///         },
    ///         ReturnTableType = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["columns"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["name"] = "value",
    ///                     ["type"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["typeKind"] = "INT64",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var listingListing = new Gcp.BigQueryAnalyticsHub.Listing("listing", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = dcrDataExchangeExample.DataExchangeId,
    ///         ListingId = "tf_test_listing_routine",
    ///         DisplayName = "tf_test_listing_routine",
    ///         Description = "Example for listing with routine",
    ///         BigqueryDataset = new Gcp.BigQueryAnalyticsHub.Inputs.ListingBigqueryDatasetArgs
    ///         {
    ///             Dataset = listing.Id,
    ///             SelectedResources = new[]
    ///             {
    ///                 new Gcp.BigQueryAnalyticsHub.Inputs.ListingBigqueryDatasetSelectedResourceArgs
    ///                 {
    ///                     Routine = listingRoutine.Id,
    ///                 },
    ///             },
    ///         },
    ///         RestrictedExportConfig = new Gcp.BigQueryAnalyticsHub.Inputs.ListingRestrictedExportConfigArgs
    ///         {
    ///             Enabled = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Listing can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{data_exchange_id}}/{{listing_id}}`
    /// 
    /// * `{{location}}/{{data_exchange_id}}/{{listing_id}}`
    /// 
    /// When using the `pulumi import` command, Listing can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigqueryanalyticshub/listing:Listing default projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigqueryanalyticshub/listing:Listing default {{project}}/{{location}}/{{data_exchange_id}}/{{listing_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigqueryanalyticshub/listing:Listing default {{location}}/{{data_exchange_id}}/{{listing_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:bigqueryanalyticshub/listing:Listing")]
    public partial class Listing : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Shared dataset i.e. BigQuery dataset source.
        /// Structure is documented below.
        /// </summary>
        [Output("bigqueryDataset")]
        public Output<Outputs.ListingBigqueryDataset?> BigqueryDataset { get; private set; } = null!;

        /// <summary>
        /// Categories of the listing. Up to two categories are allowed.
        /// </summary>
        [Output("categories")]
        public Output<ImmutableArray<string>> Categories { get; private set; } = null!;

        /// <summary>
        /// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Output("dataExchangeId")]
        public Output<string> DataExchangeId { get; private set; } = null!;

        /// <summary>
        /// Details of the data provider who owns the source data.
        /// Structure is documented below.
        /// </summary>
        [Output("dataProvider")]
        public Output<Outputs.ListingDataProvider?> DataProvider { get; private set; } = null!;

        /// <summary>
        /// Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&amp;) and can't start or end with spaces.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Documentation describing the listing.
        /// </summary>
        [Output("documentation")]
        public Output<string?> Documentation { get; private set; } = null!;

        /// <summary>
        /// Base64 encoded image representing the listing.
        /// </summary>
        [Output("icon")]
        public Output<string?> Icon { get; private set; } = null!;

        /// <summary>
        /// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Output("listingId")]
        public Output<string> ListingId { get; private set; } = null!;

        /// <summary>
        /// The name of the location this data exchange listing.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
        /// </summary>
        [Output("logLinkedDatasetQueryUserEmail")]
        public Output<bool?> LogLinkedDatasetQueryUserEmail { get; private set; } = null!;

        /// <summary>
        /// The resource name of the listing. e.g. "projects/myproject/locations/US/dataExchanges/123/listings/456"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Email or URL of the primary point of contact of the listing.
        /// </summary>
        [Output("primaryContact")]
        public Output<string?> PrimaryContact { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Details of the publisher who owns the listing and who can share the source data.
        /// Structure is documented below.
        /// </summary>
        [Output("publisher")]
        public Output<Outputs.ListingPublisher?> Publisher { get; private set; } = null!;

        /// <summary>
        /// Pub/Sub topic source.
        /// Structure is documented below.
        /// </summary>
        [Output("pubsubTopic")]
        public Output<Outputs.ListingPubsubTopic?> PubsubTopic { get; private set; } = null!;

        /// <summary>
        /// Email or URL of the request access of the listing. Subscribers can use this reference to request access.
        /// </summary>
        [Output("requestAccess")]
        public Output<string?> RequestAccess { get; private set; } = null!;

        /// <summary>
        /// If set, restricted export configuration will be propagated and enforced on the linked dataset.
        /// Structure is documented below.
        /// </summary>
        [Output("restrictedExportConfig")]
        public Output<Outputs.ListingRestrictedExportConfig?> RestrictedExportConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Listing resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Listing(string name, ListingArgs args, CustomResourceOptions? options = null)
            : base("gcp:bigqueryanalyticshub/listing:Listing", name, args ?? new ListingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Listing(string name, Input<string> id, ListingState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigqueryanalyticshub/listing:Listing", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Listing resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Listing Get(string name, Input<string> id, ListingState? state = null, CustomResourceOptions? options = null)
        {
            return new Listing(name, id, state, options);
        }
    }

    public sealed class ListingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Shared dataset i.e. BigQuery dataset source.
        /// Structure is documented below.
        /// </summary>
        [Input("bigqueryDataset")]
        public Input<Inputs.ListingBigqueryDatasetArgs>? BigqueryDataset { get; set; }

        [Input("categories")]
        private InputList<string>? _categories;

        /// <summary>
        /// Categories of the listing. Up to two categories are allowed.
        /// </summary>
        public InputList<string> Categories
        {
            get => _categories ?? (_categories = new InputList<string>());
            set => _categories = value;
        }

        /// <summary>
        /// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Input("dataExchangeId", required: true)]
        public Input<string> DataExchangeId { get; set; } = null!;

        /// <summary>
        /// Details of the data provider who owns the source data.
        /// Structure is documented below.
        /// </summary>
        [Input("dataProvider")]
        public Input<Inputs.ListingDataProviderArgs>? DataProvider { get; set; }

        /// <summary>
        /// Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&amp;) and can't start or end with spaces.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Documentation describing the listing.
        /// </summary>
        [Input("documentation")]
        public Input<string>? Documentation { get; set; }

        /// <summary>
        /// Base64 encoded image representing the listing.
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        /// <summary>
        /// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Input("listingId", required: true)]
        public Input<string> ListingId { get; set; } = null!;

        /// <summary>
        /// The name of the location this data exchange listing.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
        /// </summary>
        [Input("logLinkedDatasetQueryUserEmail")]
        public Input<bool>? LogLinkedDatasetQueryUserEmail { get; set; }

        /// <summary>
        /// Email or URL of the primary point of contact of the listing.
        /// </summary>
        [Input("primaryContact")]
        public Input<string>? PrimaryContact { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Details of the publisher who owns the listing and who can share the source data.
        /// Structure is documented below.
        /// </summary>
        [Input("publisher")]
        public Input<Inputs.ListingPublisherArgs>? Publisher { get; set; }

        /// <summary>
        /// Pub/Sub topic source.
        /// Structure is documented below.
        /// </summary>
        [Input("pubsubTopic")]
        public Input<Inputs.ListingPubsubTopicArgs>? PubsubTopic { get; set; }

        /// <summary>
        /// Email or URL of the request access of the listing. Subscribers can use this reference to request access.
        /// </summary>
        [Input("requestAccess")]
        public Input<string>? RequestAccess { get; set; }

        /// <summary>
        /// If set, restricted export configuration will be propagated and enforced on the linked dataset.
        /// Structure is documented below.
        /// </summary>
        [Input("restrictedExportConfig")]
        public Input<Inputs.ListingRestrictedExportConfigArgs>? RestrictedExportConfig { get; set; }

        public ListingArgs()
        {
        }
        public static new ListingArgs Empty => new ListingArgs();
    }

    public sealed class ListingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Shared dataset i.e. BigQuery dataset source.
        /// Structure is documented below.
        /// </summary>
        [Input("bigqueryDataset")]
        public Input<Inputs.ListingBigqueryDatasetGetArgs>? BigqueryDataset { get; set; }

        [Input("categories")]
        private InputList<string>? _categories;

        /// <summary>
        /// Categories of the listing. Up to two categories are allowed.
        /// </summary>
        public InputList<string> Categories
        {
            get => _categories ?? (_categories = new InputList<string>());
            set => _categories = value;
        }

        /// <summary>
        /// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Input("dataExchangeId")]
        public Input<string>? DataExchangeId { get; set; }

        /// <summary>
        /// Details of the data provider who owns the source data.
        /// Structure is documented below.
        /// </summary>
        [Input("dataProvider")]
        public Input<Inputs.ListingDataProviderGetArgs>? DataProvider { get; set; }

        /// <summary>
        /// Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&amp;) and can't start or end with spaces.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Documentation describing the listing.
        /// </summary>
        [Input("documentation")]
        public Input<string>? Documentation { get; set; }

        /// <summary>
        /// Base64 encoded image representing the listing.
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        /// <summary>
        /// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Input("listingId")]
        public Input<string>? ListingId { get; set; }

        /// <summary>
        /// The name of the location this data exchange listing.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
        /// </summary>
        [Input("logLinkedDatasetQueryUserEmail")]
        public Input<bool>? LogLinkedDatasetQueryUserEmail { get; set; }

        /// <summary>
        /// The resource name of the listing. e.g. "projects/myproject/locations/US/dataExchanges/123/listings/456"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Email or URL of the primary point of contact of the listing.
        /// </summary>
        [Input("primaryContact")]
        public Input<string>? PrimaryContact { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Details of the publisher who owns the listing and who can share the source data.
        /// Structure is documented below.
        /// </summary>
        [Input("publisher")]
        public Input<Inputs.ListingPublisherGetArgs>? Publisher { get; set; }

        /// <summary>
        /// Pub/Sub topic source.
        /// Structure is documented below.
        /// </summary>
        [Input("pubsubTopic")]
        public Input<Inputs.ListingPubsubTopicGetArgs>? PubsubTopic { get; set; }

        /// <summary>
        /// Email or URL of the request access of the listing. Subscribers can use this reference to request access.
        /// </summary>
        [Input("requestAccess")]
        public Input<string>? RequestAccess { get; set; }

        /// <summary>
        /// If set, restricted export configuration will be propagated and enforced on the linked dataset.
        /// Structure is documented below.
        /// </summary>
        [Input("restrictedExportConfig")]
        public Input<Inputs.ListingRestrictedExportConfigGetArgs>? RestrictedExportConfig { get; set; }

        public ListingState()
        {
        }
        public static new ListingState Empty => new ListingState();
    }
}
