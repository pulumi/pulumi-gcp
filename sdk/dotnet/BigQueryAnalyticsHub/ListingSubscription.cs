// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQueryAnalyticsHub
{
    /// <summary>
    /// A Bigquery Analytics Hub listing subscription
    /// 
    /// To get more information about ListingSubscription, see:
    /// 
    /// * [API documentation](https://cloud.google.com/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/bigquery/docs/analytics-hub-introduction)
    /// 
    /// ## Example Usage
    /// 
    /// ### Bigquery Analyticshub Listing Subscription Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var subscription = new Gcp.BigQueryAnalyticsHub.DataExchange("subscription", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = "my_data_exchange",
    ///         DisplayName = "my_data_exchange",
    ///         Description = "",
    ///     });
    /// 
    ///     var subscriptionDataset = new Gcp.BigQuery.Dataset("subscription", new()
    ///     {
    ///         DatasetId = "my_listing",
    ///         FriendlyName = "my_listing",
    ///         Description = "",
    ///         Location = "US",
    ///     });
    /// 
    ///     var subscriptionListing = new Gcp.BigQueryAnalyticsHub.Listing("subscription", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = subscription.DataExchangeId,
    ///         ListingId = "my_listing",
    ///         DisplayName = "my_listing",
    ///         Description = "",
    ///         BigqueryDataset = new Gcp.BigQueryAnalyticsHub.Inputs.ListingBigqueryDatasetArgs
    ///         {
    ///             Dataset = subscriptionDataset.Id,
    ///         },
    ///     });
    /// 
    ///     var subscriptionListingSubscription = new Gcp.BigQueryAnalyticsHub.ListingSubscription("subscription", new()
    ///     {
    ///         Location = "US",
    ///         DataExchangeId = subscription.DataExchangeId,
    ///         ListingId = subscriptionListing.ListingId,
    ///         DestinationDataset = new Gcp.BigQueryAnalyticsHub.Inputs.ListingSubscriptionDestinationDatasetArgs
    ///         {
    ///             Description = "A test subscription",
    ///             FriendlyName = "ðŸ‘‹",
    ///             Labels = 
    ///             {
    ///                 { "testing", "123" },
    ///             },
    ///             Location = "US",
    ///             DatasetReference = new Gcp.BigQueryAnalyticsHub.Inputs.ListingSubscriptionDestinationDatasetDatasetReferenceArgs
    ///             {
    ///                 DatasetId = "destination_dataset",
    ///                 ProjectId = subscriptionDataset.Project,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ListingSubscription can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{subscription_id}}`
    /// 
    /// * `{{location}}/{{subscription_id}}`
    /// 
    /// When using the `pulumi import` command, ListingSubscription can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigqueryanalyticshub/listingSubscription:ListingSubscription default projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigqueryanalyticshub/listingSubscription:ListingSubscription default {{project}}/{{location}}/{{subscription_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigqueryanalyticshub/listingSubscription:ListingSubscription default {{location}}/{{subscription_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:bigqueryanalyticshub/listingSubscription:ListingSubscription")]
    public partial class ListingSubscription : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timestamp when the subscription was created.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Output("dataExchangeId")]
        public Output<string> DataExchangeId { get; private set; } = null!;

        /// <summary>
        /// The destination dataset for this subscription.
        /// Structure is documented below.
        /// </summary>
        [Output("destinationDataset")]
        public Output<Outputs.ListingSubscriptionDestinationDataset> DestinationDataset { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the subscription was last modified.
        /// </summary>
        [Output("lastModifyTime")]
        public Output<string> LastModifyTime { get; private set; } = null!;

        /// <summary>
        /// Output only. Map of listing resource names to associated linked resource,
        /// e.g. projects/123/locations/US/dataExchanges/456/listings/789 &gt; projects/123/datasets/my_dataset
        /// Structure is documented below.
        /// </summary>
        [Output("linkedDatasetMaps")]
        public Output<ImmutableArray<Outputs.ListingSubscriptionLinkedDatasetMap>> LinkedDatasetMaps { get; private set; } = null!;

        /// <summary>
        /// Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
        /// Structure is documented below.
        /// </summary>
        [Output("linkedResources")]
        public Output<ImmutableArray<Outputs.ListingSubscriptionLinkedResource>> LinkedResources { get; private set; } = null!;

        /// <summary>
        /// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Output("listingId")]
        public Output<string> ListingId { get; private set; } = null!;

        /// <summary>
        /// The name of the location for this subscription.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the subscription. e.g. "projects/myproject/locations/US/subscriptions/123"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Display name of the project of this subscription.
        /// </summary>
        [Output("organizationDisplayName")]
        public Output<string> OrganizationDisplayName { get; private set; } = null!;

        /// <summary>
        /// Organization of the project this subscription belongs to.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Listing shared asset type.
        /// </summary>
        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;

        /// <summary>
        /// Current state of the subscription.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Email of the subscriber.
        /// </summary>
        [Output("subscriberContact")]
        public Output<string> SubscriberContact { get; private set; } = null!;

        /// <summary>
        /// The subscription id used to reference the subscription.
        /// </summary>
        [Output("subscriptionId")]
        public Output<string> SubscriptionId { get; private set; } = null!;


        /// <summary>
        /// Create a ListingSubscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ListingSubscription(string name, ListingSubscriptionArgs args, CustomResourceOptions? options = null)
            : base("gcp:bigqueryanalyticshub/listingSubscription:ListingSubscription", name, args ?? new ListingSubscriptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ListingSubscription(string name, Input<string> id, ListingSubscriptionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigqueryanalyticshub/listingSubscription:ListingSubscription", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ListingSubscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ListingSubscription Get(string name, Input<string> id, ListingSubscriptionState? state = null, CustomResourceOptions? options = null)
        {
            return new ListingSubscription(name, id, state, options);
        }
    }

    public sealed class ListingSubscriptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Input("dataExchangeId", required: true)]
        public Input<string> DataExchangeId { get; set; } = null!;

        /// <summary>
        /// The destination dataset for this subscription.
        /// Structure is documented below.
        /// </summary>
        [Input("destinationDataset", required: true)]
        public Input<Inputs.ListingSubscriptionDestinationDatasetArgs> DestinationDataset { get; set; } = null!;

        /// <summary>
        /// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Input("listingId", required: true)]
        public Input<string> ListingId { get; set; } = null!;

        /// <summary>
        /// The name of the location for this subscription.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public ListingSubscriptionArgs()
        {
        }
        public static new ListingSubscriptionArgs Empty => new ListingSubscriptionArgs();
    }

    public sealed class ListingSubscriptionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp when the subscription was created.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        /// <summary>
        /// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Input("dataExchangeId")]
        public Input<string>? DataExchangeId { get; set; }

        /// <summary>
        /// The destination dataset for this subscription.
        /// Structure is documented below.
        /// </summary>
        [Input("destinationDataset")]
        public Input<Inputs.ListingSubscriptionDestinationDatasetGetArgs>? DestinationDataset { get; set; }

        /// <summary>
        /// Timestamp when the subscription was last modified.
        /// </summary>
        [Input("lastModifyTime")]
        public Input<string>? LastModifyTime { get; set; }

        [Input("linkedDatasetMaps")]
        private InputList<Inputs.ListingSubscriptionLinkedDatasetMapGetArgs>? _linkedDatasetMaps;

        /// <summary>
        /// Output only. Map of listing resource names to associated linked resource,
        /// e.g. projects/123/locations/US/dataExchanges/456/listings/789 &gt; projects/123/datasets/my_dataset
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ListingSubscriptionLinkedDatasetMapGetArgs> LinkedDatasetMaps
        {
            get => _linkedDatasetMaps ?? (_linkedDatasetMaps = new InputList<Inputs.ListingSubscriptionLinkedDatasetMapGetArgs>());
            set => _linkedDatasetMaps = value;
        }

        [Input("linkedResources")]
        private InputList<Inputs.ListingSubscriptionLinkedResourceGetArgs>? _linkedResources;

        /// <summary>
        /// Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ListingSubscriptionLinkedResourceGetArgs> LinkedResources
        {
            get => _linkedResources ?? (_linkedResources = new InputList<Inputs.ListingSubscriptionLinkedResourceGetArgs>());
            set => _linkedResources = value;
        }

        /// <summary>
        /// The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
        /// </summary>
        [Input("listingId")]
        public Input<string>? ListingId { get; set; }

        /// <summary>
        /// The name of the location for this subscription.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the subscription. e.g. "projects/myproject/locations/US/subscriptions/123"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Display name of the project of this subscription.
        /// </summary>
        [Input("organizationDisplayName")]
        public Input<string>? OrganizationDisplayName { get; set; }

        /// <summary>
        /// Organization of the project this subscription belongs to.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Listing shared asset type.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// Current state of the subscription.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Email of the subscriber.
        /// </summary>
        [Input("subscriberContact")]
        public Input<string>? SubscriberContact { get; set; }

        /// <summary>
        /// The subscription id used to reference the subscription.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        public ListingSubscriptionState()
        {
        }
        public static new ListingSubscriptionState Empty => new ListingSubscriptionState();
    }
}
