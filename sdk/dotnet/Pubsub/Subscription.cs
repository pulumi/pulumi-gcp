// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Pubsub
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/pubsub_subscription.html.markdown.
    /// </summary>
    public partial class Subscription : Pulumi.CustomResource
    {
        [Output("ackDeadlineSeconds")]
        public Output<int> AckDeadlineSeconds { get; private set; } = null!;

        [Output("expirationPolicy")]
        public Output<Outputs.SubscriptionExpirationPolicy> ExpirationPolicy { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        [Output("messageRetentionDuration")]
        public Output<string?> MessageRetentionDuration { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        [Output("pushConfig")]
        public Output<Outputs.SubscriptionPushConfig?> PushConfig { get; private set; } = null!;

        [Output("retainAckedMessages")]
        public Output<bool?> RetainAckedMessages { get; private set; } = null!;

        [Output("topic")]
        public Output<string> Topic { get; private set; } = null!;


        /// <summary>
        /// Create a Subscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subscription(string name, SubscriptionArgs args, CustomResourceOptions? options = null)
            : base("gcp:pubsub/subscription:Subscription", name, args, MakeResourceOptions(options, ""))
        {
        }

        private Subscription(string name, Input<string> id, SubscriptionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:pubsub/subscription:Subscription", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subscription Get(string name, Input<string> id, SubscriptionState? state = null, CustomResourceOptions? options = null)
        {
            return new Subscription(name, id, state, options);
        }
    }

    public sealed class SubscriptionArgs : Pulumi.ResourceArgs
    {
        [Input("ackDeadlineSeconds")]
        public Input<int>? AckDeadlineSeconds { get; set; }

        [Input("expirationPolicy")]
        public Input<Inputs.SubscriptionExpirationPolicyArgs>? ExpirationPolicy { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("messageRetentionDuration")]
        public Input<string>? MessageRetentionDuration { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pushConfig")]
        public Input<Inputs.SubscriptionPushConfigArgs>? PushConfig { get; set; }

        [Input("retainAckedMessages")]
        public Input<bool>? RetainAckedMessages { get; set; }

        [Input("topic", required: true)]
        public Input<string> Topic { get; set; } = null!;

        public SubscriptionArgs()
        {
        }
    }

    public sealed class SubscriptionState : Pulumi.ResourceArgs
    {
        [Input("ackDeadlineSeconds")]
        public Input<int>? AckDeadlineSeconds { get; set; }

        [Input("expirationPolicy")]
        public Input<Inputs.SubscriptionExpirationPolicyGetArgs>? ExpirationPolicy { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("messageRetentionDuration")]
        public Input<string>? MessageRetentionDuration { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pushConfig")]
        public Input<Inputs.SubscriptionPushConfigGetArgs>? PushConfig { get; set; }

        [Input("retainAckedMessages")]
        public Input<bool>? RetainAckedMessages { get; set; }

        [Input("topic")]
        public Input<string>? Topic { get; set; }

        public SubscriptionState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class SubscriptionExpirationPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public SubscriptionExpirationPolicyArgs()
        {
        }
    }

    public sealed class SubscriptionExpirationPolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public SubscriptionExpirationPolicyGetArgs()
        {
        }
    }

    public sealed class SubscriptionPushConfigArgs : Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<string>? _attributes;
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        [Input("pushEndpoint", required: true)]
        public Input<string> PushEndpoint { get; set; } = null!;

        public SubscriptionPushConfigArgs()
        {
        }
    }

    public sealed class SubscriptionPushConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<string>? _attributes;
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        [Input("pushEndpoint", required: true)]
        public Input<string> PushEndpoint { get; set; } = null!;

        public SubscriptionPushConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class SubscriptionExpirationPolicy
    {
        public readonly string? Ttl;

        [OutputConstructor]
        private SubscriptionExpirationPolicy(string? ttl)
        {
            Ttl = ttl;
        }
    }

    [OutputType]
    public sealed class SubscriptionPushConfig
    {
        public readonly ImmutableDictionary<string, string>? Attributes;
        public readonly string PushEndpoint;

        [OutputConstructor]
        private SubscriptionPushConfig(
            ImmutableDictionary<string, string>? attributes,
            string pushEndpoint)
        {
            Attributes = attributes;
            PushEndpoint = pushEndpoint;
        }
    }
    }
}
