// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataflow
{
    /// <summary>
    /// Creates a [Flex Template](https://cloud.google.com/dataflow/docs/guides/templates/using-flex-templates)
    /// job on Dataflow, which is an implementation of Apache Beam running on Google
    /// Compute Engine. For more information see the official documentation for [Beam](https://beam.apache.org)
    /// and [Dataflow](https://cloud.google.com/dataflow/).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var bigDataJob = new Gcp.Dataflow.FlexTemplateJob("bigDataJob", new Gcp.Dataflow.FlexTemplateJobArgs
    ///         {
    ///             ContainerSpecGcsPath = "gs://my-bucket/templates/template.json",
    ///             Parameters = 
    ///             {
    ///                 { "inputSubscription", "messages" },
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Note on "destroy" / "apply"
    /// 
    /// There are many types of Dataflow jobs.  Some Dataflow jobs run constantly,
    /// getting new data from (e.g.) a GCS bucket, and outputting data continuously.
    /// Some jobs process a set amount of data then terminate. All jobs can fail while
    /// running due to programming errors or other issues. In this way, Dataflow jobs
    /// are different from most other provider / Google resources.
    /// 
    /// The Dataflow resource is considered 'existing' while it is in a nonterminal
    /// state.  If it reaches a terminal state (e.g. 'FAILED', 'COMPLETE',
    /// 'CANCELLED'), it will be recreated on the next 'apply'.  This is as expected for
    /// jobs which run continuously, but may surprise users who use this resource for
    /// other kinds of Dataflow jobs.
    /// 
    /// A Dataflow job which is 'destroyed' may be "cancelled" or "drained".  If
    /// "cancelled", the job terminates - any data written remains where it is, but no
    /// new data will be processed.  If "drained", no new data will enter the pipeline,
    /// but any data currently in the pipeline will finish being processed.  The default
    /// is "cancelled", but if a user sets `on_delete` to `"drain"` in the
    /// configuration, you may experience a long wait for your `pulumi destroy` to
    /// complete.
    /// 
    /// ## Import
    /// 
    /// This resource does not support import.
    /// </summary>
    [GcpResourceType("gcp:dataflow/flexTemplateJob:FlexTemplateJob")]
    public partial class FlexTemplateJob : Pulumi.CustomResource
    {
        /// <summary>
        /// The GCS path to the Dataflow job Flex
        /// Template.
        /// </summary>
        [Output("containerSpecGcsPath")]
        public Output<string> ContainerSpecGcsPath { get; private set; } = null!;

        /// <summary>
        /// The unique ID of this job.
        /// </summary>
        [Output("jobId")]
        public Output<string> JobId { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, object>?> Labels { get; private set; } = null!;

        /// <summary>
        /// A unique name for the resource, required by Dataflow.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One of "drain" or "cancel". Specifies behavior of
        /// deletion during `pulumi destroy`.  See above note.
        /// </summary>
        [Output("onDelete")]
        public Output<string?> OnDelete { get; private set; } = null!;

        /// <summary>
        /// Key/Value pairs to be passed to the Dataflow job (as
        /// used in the template). Additional [pipeline options](https://cloud.google.com/dataflow/docs/guides/specifying-exec-params#setting-other-cloud-dataflow-pipeline-options)
        /// such as `serviceAccount`, `workerMachineType`, etc can be specified here.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, object>?> Parameters { get; private set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it is not
        /// provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The region in which the created job should run.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The current state of the resource, selected from the [JobState enum](https://cloud.google.com/dataflow/docs/reference/rest/v1b3/projects.jobs#Job.JobState)
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a FlexTemplateJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FlexTemplateJob(string name, FlexTemplateJobArgs args, CustomResourceOptions? options = null)
            : base("gcp:dataflow/flexTemplateJob:FlexTemplateJob", name, args ?? new FlexTemplateJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FlexTemplateJob(string name, Input<string> id, FlexTemplateJobState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dataflow/flexTemplateJob:FlexTemplateJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FlexTemplateJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FlexTemplateJob Get(string name, Input<string> id, FlexTemplateJobState? state = null, CustomResourceOptions? options = null)
        {
            return new FlexTemplateJob(name, id, state, options);
        }
    }

    public sealed class FlexTemplateJobArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The GCS path to the Dataflow job Flex
        /// Template.
        /// </summary>
        [Input("containerSpecGcsPath", required: true)]
        public Input<string> ContainerSpecGcsPath { get; set; } = null!;

        [Input("labels")]
        private InputMap<object>? _labels;
        [Obsolete(@"Deprecated until the API supports this field")]
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// A unique name for the resource, required by Dataflow.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// One of "drain" or "cancel". Specifies behavior of
        /// deletion during `pulumi destroy`.  See above note.
        /// </summary>
        [Input("onDelete")]
        public Input<string>? OnDelete { get; set; }

        [Input("parameters")]
        private InputMap<object>? _parameters;

        /// <summary>
        /// Key/Value pairs to be passed to the Dataflow job (as
        /// used in the template). Additional [pipeline options](https://cloud.google.com/dataflow/docs/guides/specifying-exec-params#setting-other-cloud-dataflow-pipeline-options)
        /// such as `serviceAccount`, `workerMachineType`, etc can be specified here.
        /// </summary>
        public InputMap<object> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<object>());
            set => _parameters = value;
        }

        /// <summary>
        /// The project in which the resource belongs. If it is not
        /// provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region in which the created job should run.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public FlexTemplateJobArgs()
        {
        }
    }

    public sealed class FlexTemplateJobState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The GCS path to the Dataflow job Flex
        /// Template.
        /// </summary>
        [Input("containerSpecGcsPath")]
        public Input<string>? ContainerSpecGcsPath { get; set; }

        /// <summary>
        /// The unique ID of this job.
        /// </summary>
        [Input("jobId")]
        public Input<string>? JobId { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;
        [Obsolete(@"Deprecated until the API supports this field")]
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// A unique name for the resource, required by Dataflow.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// One of "drain" or "cancel". Specifies behavior of
        /// deletion during `pulumi destroy`.  See above note.
        /// </summary>
        [Input("onDelete")]
        public Input<string>? OnDelete { get; set; }

        [Input("parameters")]
        private InputMap<object>? _parameters;

        /// <summary>
        /// Key/Value pairs to be passed to the Dataflow job (as
        /// used in the template). Additional [pipeline options](https://cloud.google.com/dataflow/docs/guides/specifying-exec-params#setting-other-cloud-dataflow-pipeline-options)
        /// such as `serviceAccount`, `workerMachineType`, etc can be specified here.
        /// </summary>
        public InputMap<object> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<object>());
            set => _parameters = value;
        }

        /// <summary>
        /// The project in which the resource belongs. If it is not
        /// provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region in which the created job should run.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The current state of the resource, selected from the [JobState enum](https://cloud.google.com/dataflow/docs/reference/rest/v1b3/projects.jobs#Job.JobState)
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public FlexTemplateJobState()
        {
        }
    }
}
