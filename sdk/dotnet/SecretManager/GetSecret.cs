// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.SecretManager
{
    public static class GetSecret
    {
        /// <summary>
        /// Use this data source to get information about a Secret Manager Secret
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var qa = Gcp.SecretManager.GetSecret.Invoke(new()
        ///     {
        ///         SecretId = "foobar",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSecretResult> InvokeAsync(GetSecretArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSecretResult>("gcp:secretmanager/getSecret:getSecret", args ?? new GetSecretArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Secret Manager Secret
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var qa = Gcp.SecretManager.GetSecret.Invoke(new()
        ///     {
        ///         SecretId = "foobar",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSecretResult> Invoke(GetSecretInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSecretResult>("gcp:secretmanager/getSecret:getSecret", args ?? new GetSecretInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The name of the secret.
        /// </summary>
        [Input("secretId", required: true)]
        public string SecretId { get; set; } = null!;

        public GetSecretArgs()
        {
        }
        public static new GetSecretArgs Empty => new GetSecretArgs();
    }

    public sealed class GetSecretInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The name of the secret.
        /// </summary>
        [Input("secretId", required: true)]
        public Input<string> SecretId { get; set; } = null!;

        public GetSecretInvokeArgs()
        {
        }
        public static new GetSecretInvokeArgs Empty => new GetSecretInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecretResult
    {
        public readonly string CreateTime;
        public readonly string ExpireTime;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Name;
        public readonly string? Project;
        public readonly ImmutableArray<Outputs.GetSecretReplicationResult> Replications;
        public readonly ImmutableArray<Outputs.GetSecretRotationResult> Rotations;
        public readonly string SecretId;
        public readonly ImmutableArray<Outputs.GetSecretTopicResult> Topics;
        public readonly string Ttl;

        [OutputConstructor]
        private GetSecretResult(
            string createTime,

            string expireTime,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            string? project,

            ImmutableArray<Outputs.GetSecretReplicationResult> replications,

            ImmutableArray<Outputs.GetSecretRotationResult> rotations,

            string secretId,

            ImmutableArray<Outputs.GetSecretTopicResult> topics,

            string ttl)
        {
            CreateTime = createTime;
            ExpireTime = expireTime;
            Id = id;
            Labels = labels;
            Name = name;
            Project = project;
            Replications = replications;
            Rotations = rotations;
            SecretId = secretId;
            Topics = topics;
            Ttl = ttl;
        }
    }
}
