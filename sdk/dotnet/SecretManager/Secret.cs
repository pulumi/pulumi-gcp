// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.SecretManager
{
    /// <summary>
    /// A Secret is a logical secret whose value and versions can be accessed.
    /// 
    /// To get more information about Secret, see:
    /// 
    /// * [API documentation](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.secrets)
    /// 
    /// ## Example Usage
    /// ### Secret Config Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var secret_basic = new Gcp.SecretManager.Secret("secret-basic", new()
    ///     {
    ///         Labels = 
    ///         {
    ///             { "label", "my-label" },
    ///         },
    ///         Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///         {
    ///             UserManaged = new Gcp.SecretManager.Inputs.SecretReplicationUserManagedArgs
    ///             {
    ///                 Replicas = new[]
    ///                 {
    ///                     new Gcp.SecretManager.Inputs.SecretReplicationUserManagedReplicaArgs
    ///                     {
    ///                         Location = "us-central1",
    ///                     },
    ///                     new Gcp.SecretManager.Inputs.SecretReplicationUserManagedReplicaArgs
    ///                     {
    ///                         Location = "us-east1",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         SecretId = "secret",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Secret can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:secretmanager/secret:Secret default projects/{{project}}/secrets/{{secret_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:secretmanager/secret:Secret default {{project}}/{{secret_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:secretmanager/secret:Secret default {{secret_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:secretmanager/secret:Secret")]
    public partial class Secret : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time at which the Secret was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("expireTime")]
        public Output<string> ExpireTime { get; private set; } = null!;

        /// <summary>
        /// The labels assigned to this Secret.
        /// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
        /// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
        /// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
        /// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
        /// No more than 64 labels can be assigned to a given resource.
        /// An object containing a list of "key": value pairs. Example:
        /// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The resource name of the Pub/Sub topic that will be published to, in the following format: projects/*/topics/*.
        /// For publication to succeed, the Secret Manager Service Agent service account must have pubsub.publisher permissions on the topic.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The replication policy of the secret data attached to the Secret. It cannot be changed
        /// after the Secret has been created.
        /// Structure is documented below.
        /// </summary>
        [Output("replication")]
        public Output<Outputs.SecretReplication> Replication { get; private set; } = null!;

        /// <summary>
        /// The rotation time and period for a Secret. At `next_rotation_time`, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be set to configure rotation.
        /// Structure is documented below.
        /// </summary>
        [Output("rotation")]
        public Output<Outputs.SecretRotation?> Rotation { get; private set; } = null!;

        /// <summary>
        /// This must be unique within the project.
        /// </summary>
        [Output("secretId")]
        public Output<string> SecretId { get; private set; } = null!;

        /// <summary>
        /// A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.
        /// Structure is documented below.
        /// </summary>
        [Output("topics")]
        public Output<ImmutableArray<Outputs.SecretTopic>> Topics { get; private set; } = null!;

        /// <summary>
        /// The TTL for the Secret.
        /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        /// </summary>
        [Output("ttl")]
        public Output<string?> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a Secret resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Secret(string name, SecretArgs args, CustomResourceOptions? options = null)
            : base("gcp:secretmanager/secret:Secret", name, args ?? new SecretArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Secret(string name, Input<string> id, SecretState? state = null, CustomResourceOptions? options = null)
            : base("gcp:secretmanager/secret:Secret", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Secret resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Secret Get(string name, Input<string> id, SecretState? state = null, CustomResourceOptions? options = null)
        {
            return new Secret(name, id, state, options);
        }
    }

    public sealed class SecretArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("expireTime")]
        public Input<string>? ExpireTime { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The labels assigned to this Secret.
        /// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
        /// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
        /// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
        /// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
        /// No more than 64 labels can be assigned to a given resource.
        /// An object containing a list of "key": value pairs. Example:
        /// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The replication policy of the secret data attached to the Secret. It cannot be changed
        /// after the Secret has been created.
        /// Structure is documented below.
        /// </summary>
        [Input("replication", required: true)]
        public Input<Inputs.SecretReplicationArgs> Replication { get; set; } = null!;

        /// <summary>
        /// The rotation time and period for a Secret. At `next_rotation_time`, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be set to configure rotation.
        /// Structure is documented below.
        /// </summary>
        [Input("rotation")]
        public Input<Inputs.SecretRotationArgs>? Rotation { get; set; }

        /// <summary>
        /// This must be unique within the project.
        /// </summary>
        [Input("secretId", required: true)]
        public Input<string> SecretId { get; set; } = null!;

        [Input("topics")]
        private InputList<Inputs.SecretTopicArgs>? _topics;

        /// <summary>
        /// A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.SecretTopicArgs> Topics
        {
            get => _topics ?? (_topics = new InputList<Inputs.SecretTopicArgs>());
            set => _topics = value;
        }

        /// <summary>
        /// The TTL for the Secret.
        /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public SecretArgs()
        {
        }
        public static new SecretArgs Empty => new SecretArgs();
    }

    public sealed class SecretState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time at which the Secret was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("expireTime")]
        public Input<string>? ExpireTime { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The labels assigned to this Secret.
        /// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
        /// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
        /// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
        /// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
        /// No more than 64 labels can be assigned to a given resource.
        /// An object containing a list of "key": value pairs. Example:
        /// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The resource name of the Pub/Sub topic that will be published to, in the following format: projects/*/topics/*.
        /// For publication to succeed, the Secret Manager Service Agent service account must have pubsub.publisher permissions on the topic.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The replication policy of the secret data attached to the Secret. It cannot be changed
        /// after the Secret has been created.
        /// Structure is documented below.
        /// </summary>
        [Input("replication")]
        public Input<Inputs.SecretReplicationGetArgs>? Replication { get; set; }

        /// <summary>
        /// The rotation time and period for a Secret. At `next_rotation_time`, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be set to configure rotation.
        /// Structure is documented below.
        /// </summary>
        [Input("rotation")]
        public Input<Inputs.SecretRotationGetArgs>? Rotation { get; set; }

        /// <summary>
        /// This must be unique within the project.
        /// </summary>
        [Input("secretId")]
        public Input<string>? SecretId { get; set; }

        [Input("topics")]
        private InputList<Inputs.SecretTopicGetArgs>? _topics;

        /// <summary>
        /// A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.SecretTopicGetArgs> Topics
        {
            get => _topics ?? (_topics = new InputList<Inputs.SecretTopicGetArgs>());
            set => _topics = value;
        }

        /// <summary>
        /// The TTL for the Secret.
        /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public SecretState()
        {
        }
        public static new SecretState Empty => new SecretState();
    }
}
