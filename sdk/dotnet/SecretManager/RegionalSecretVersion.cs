// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.SecretManager
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Regional Secret Version Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var secret_basic = new Gcp.SecretManager.RegionalSecret("secret-basic", new()
    ///     {
    ///         SecretId = "secret-version",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var regionalSecretVersionBasic = new Gcp.SecretManager.RegionalSecretVersion("regional_secret_version_basic", new()
    ///     {
    ///         Secret = secret_basic.Id,
    ///         SecretData = "secret-data",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Regional Secret Version With Base64 Data
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var secret_basic = new Gcp.SecretManager.RegionalSecret("secret-basic", new()
    ///     {
    ///         SecretId = "secret-version",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var regionalSecretVersionBase64 = new Gcp.SecretManager.RegionalSecretVersion("regional_secret_version_base64", new()
    ///     {
    ///         Secret = secret_basic.Id,
    ///         SecretData = Std.Filebase64.Invoke(new()
    ///         {
    ///             Input = "secret-data.pfx",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         IsSecretDataBase64 = true,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Regional Secret Version Disabled
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var secret_basic = new Gcp.SecretManager.RegionalSecret("secret-basic", new()
    ///     {
    ///         SecretId = "secret-version",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var regionalSecretVersionDisabled = new Gcp.SecretManager.RegionalSecretVersion("regional_secret_version_disabled", new()
    ///     {
    ///         Secret = secret_basic.Id,
    ///         SecretData = "secret-data",
    ///         Enabled = false,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Regional Secret Version Deletion Policy Abandon
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var secret_basic = new Gcp.SecretManager.RegionalSecret("secret-basic", new()
    ///     {
    ///         SecretId = "secret-version",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var regionalSecretVersionDeletionPolicy = new Gcp.SecretManager.RegionalSecretVersion("regional_secret_version_deletion_policy", new()
    ///     {
    ///         Secret = secret_basic.Id,
    ///         SecretData = "secret-data",
    ///         DeletionPolicy = "ABANDON",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Regional Secret Version Deletion Policy Disable
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var secret_basic = new Gcp.SecretManager.RegionalSecret("secret-basic", new()
    ///     {
    ///         SecretId = "secret-version",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var regionalSecretVersionDeletionPolicy = new Gcp.SecretManager.RegionalSecretVersion("regional_secret_version_deletion_policy", new()
    ///     {
    ///         Secret = secret_basic.Id,
    ///         SecretData = "secret-data",
    ///         DeletionPolicy = "DISABLE",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RegionalSecretVersion can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
    /// 
    /// When using the `pulumi import` command, RegionalSecretVersion can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:secretmanager/regionalSecretVersion:RegionalSecretVersion default projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:secretmanager/regionalSecretVersion:RegionalSecretVersion")]
    public partial class RegionalSecretVersion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time at which the regional secret version was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The customer-managed encryption configuration of the regional secret.
        /// Structure is documented below.
        /// </summary>
        [Output("customerManagedEncryptions")]
        public Output<ImmutableArray<Outputs.RegionalSecretVersionCustomerManagedEncryption>> CustomerManagedEncryptions { get; private set; } = null!;

        /// <summary>
        /// The deletion policy for the regional secret version. Setting `ABANDON` allows the resource
        /// to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
        /// disabled rather than deleted. Default is `DELETE`. Possible values are:
        /// * DELETE
        /// * DISABLE
        /// * ABANDON
        /// </summary>
        [Output("deletionPolicy")]
        public Output<string?> DeletionPolicy { get; private set; } = null!;

        /// <summary>
        /// The time at which the regional secret version was destroyed. Only present if state is DESTROYED.
        /// </summary>
        [Output("destroyTime")]
        public Output<string> DestroyTime { get; private set; } = null!;

        /// <summary>
        /// The current state of the regional secret version.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
        /// </summary>
        [Output("isSecretDataBase64")]
        public Output<bool?> IsSecretDataBase64 { get; private set; } = null!;

        /// <summary>
        /// Location of Secret Manager regional secret resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the regional secret version. Format:
        /// `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Secret Manager regional secret resource.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("secret")]
        public Output<string> Secret { get; private set; } = null!;

        /// <summary>
        /// The secret data. Must be no larger than 64KiB.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        [Output("secretData")]
        public Output<string> SecretData { get; private set; } = null!;

        /// <summary>
        /// The version of the Regional Secret.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a RegionalSecretVersion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegionalSecretVersion(string name, RegionalSecretVersionArgs args, CustomResourceOptions? options = null)
            : base("gcp:secretmanager/regionalSecretVersion:RegionalSecretVersion", name, args ?? new RegionalSecretVersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegionalSecretVersion(string name, Input<string> id, RegionalSecretVersionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:secretmanager/regionalSecretVersion:RegionalSecretVersion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "secretData",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegionalSecretVersion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegionalSecretVersion Get(string name, Input<string> id, RegionalSecretVersionState? state = null, CustomResourceOptions? options = null)
        {
            return new RegionalSecretVersion(name, id, state, options);
        }
    }

    public sealed class RegionalSecretVersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The deletion policy for the regional secret version. Setting `ABANDON` allows the resource
        /// to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
        /// disabled rather than deleted. Default is `DELETE`. Possible values are:
        /// * DELETE
        /// * DISABLE
        /// * ABANDON
        /// </summary>
        [Input("deletionPolicy")]
        public Input<string>? DeletionPolicy { get; set; }

        /// <summary>
        /// The current state of the regional secret version.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
        /// </summary>
        [Input("isSecretDataBase64")]
        public Input<bool>? IsSecretDataBase64 { get; set; }

        /// <summary>
        /// Secret Manager regional secret resource.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("secret", required: true)]
        public Input<string> Secret { get; set; } = null!;

        [Input("secretData", required: true)]
        private Input<string>? _secretData;

        /// <summary>
        /// The secret data. Must be no larger than 64KiB.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? SecretData
        {
            get => _secretData;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretData = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public RegionalSecretVersionArgs()
        {
        }
        public static new RegionalSecretVersionArgs Empty => new RegionalSecretVersionArgs();
    }

    public sealed class RegionalSecretVersionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time at which the regional secret version was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("customerManagedEncryptions")]
        private InputList<Inputs.RegionalSecretVersionCustomerManagedEncryptionGetArgs>? _customerManagedEncryptions;

        /// <summary>
        /// The customer-managed encryption configuration of the regional secret.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionalSecretVersionCustomerManagedEncryptionGetArgs> CustomerManagedEncryptions
        {
            get => _customerManagedEncryptions ?? (_customerManagedEncryptions = new InputList<Inputs.RegionalSecretVersionCustomerManagedEncryptionGetArgs>());
            set => _customerManagedEncryptions = value;
        }

        /// <summary>
        /// The deletion policy for the regional secret version. Setting `ABANDON` allows the resource
        /// to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
        /// disabled rather than deleted. Default is `DELETE`. Possible values are:
        /// * DELETE
        /// * DISABLE
        /// * ABANDON
        /// </summary>
        [Input("deletionPolicy")]
        public Input<string>? DeletionPolicy { get; set; }

        /// <summary>
        /// The time at which the regional secret version was destroyed. Only present if state is DESTROYED.
        /// </summary>
        [Input("destroyTime")]
        public Input<string>? DestroyTime { get; set; }

        /// <summary>
        /// The current state of the regional secret version.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
        /// </summary>
        [Input("isSecretDataBase64")]
        public Input<bool>? IsSecretDataBase64 { get; set; }

        /// <summary>
        /// Location of Secret Manager regional secret resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the regional secret version. Format:
        /// `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Secret Manager regional secret resource.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("secret")]
        public Input<string>? Secret { get; set; }

        [Input("secretData")]
        private Input<string>? _secretData;

        /// <summary>
        /// The secret data. Must be no larger than 64KiB.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? SecretData
        {
            get => _secretData;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretData = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The version of the Regional Secret.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public RegionalSecretVersionState()
        {
        }
        public static new RegionalSecretVersionState Empty => new RegionalSecretVersionState();
    }
}
