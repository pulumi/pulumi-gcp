// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.SecretManager
{
    public static class GetRegionalSecret
    {
        /// <summary>
        /// Use this data source to get information about a Secret Manager Regional Secret
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var secretDatasource = Gcp.SecretManager.GetRegionalSecret.Invoke(new()
        ///     {
        ///         SecretId = "secretname",
        ///         Location = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRegionalSecretResult> InvokeAsync(GetRegionalSecretArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegionalSecretResult>("gcp:secretmanager/getRegionalSecret:getRegionalSecret", args ?? new GetRegionalSecretArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Secret Manager Regional Secret
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var secretDatasource = Gcp.SecretManager.GetRegionalSecret.Invoke(new()
        ///     {
        ///         SecretId = "secretname",
        ///         Location = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegionalSecretResult> Invoke(GetRegionalSecretInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionalSecretResult>("gcp:secretmanager/getRegionalSecret:getRegionalSecret", args ?? new GetRegionalSecretInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Secret Manager Regional Secret
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var secretDatasource = Gcp.SecretManager.GetRegionalSecret.Invoke(new()
        ///     {
        ///         SecretId = "secretname",
        ///         Location = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegionalSecretResult> Invoke(GetRegionalSecretInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionalSecretResult>("gcp:secretmanager/getRegionalSecret:getRegionalSecret", args ?? new GetRegionalSecretInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionalSecretArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the regional secret. eg us-central1
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The name of the regional secret.
        /// </summary>
        [Input("secretId", required: true)]
        public string SecretId { get; set; } = null!;

        public GetRegionalSecretArgs()
        {
        }
        public static new GetRegionalSecretArgs Empty => new GetRegionalSecretArgs();
    }

    public sealed class GetRegionalSecretInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the regional secret. eg us-central1
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The name of the regional secret.
        /// </summary>
        [Input("secretId", required: true)]
        public Input<string> SecretId { get; set; } = null!;

        public GetRegionalSecretInvokeArgs()
        {
        }
        public static new GetRegionalSecretInvokeArgs Empty => new GetRegionalSecretInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegionalSecretResult
    {
        public readonly ImmutableDictionary<string, string> Annotations;
        public readonly string CreateTime;
        public readonly ImmutableArray<Outputs.GetRegionalSecretCustomerManagedEncryptionResult> CustomerManagedEncryptions;
        public readonly bool DeletionProtection;
        public readonly ImmutableDictionary<string, string> EffectiveAnnotations;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly string ExpireTime;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Location;
        public readonly string Name;
        public readonly string? Project;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly ImmutableArray<Outputs.GetRegionalSecretRotationResult> Rotations;
        public readonly string SecretId;
        public readonly ImmutableArray<Outputs.GetRegionalSecretTopicResult> Topics;
        public readonly string Ttl;
        public readonly ImmutableDictionary<string, string> VersionAliases;
        public readonly string VersionDestroyTtl;

        [OutputConstructor]
        private GetRegionalSecretResult(
            ImmutableDictionary<string, string> annotations,

            string createTime,

            ImmutableArray<Outputs.GetRegionalSecretCustomerManagedEncryptionResult> customerManagedEncryptions,

            bool deletionProtection,

            ImmutableDictionary<string, string> effectiveAnnotations,

            ImmutableDictionary<string, string> effectiveLabels,

            string expireTime,

            string id,

            ImmutableDictionary<string, string> labels,

            string location,

            string name,

            string? project,

            ImmutableDictionary<string, string> pulumiLabels,

            ImmutableArray<Outputs.GetRegionalSecretRotationResult> rotations,

            string secretId,

            ImmutableArray<Outputs.GetRegionalSecretTopicResult> topics,

            string ttl,

            ImmutableDictionary<string, string> versionAliases,

            string versionDestroyTtl)
        {
            Annotations = annotations;
            CreateTime = createTime;
            CustomerManagedEncryptions = customerManagedEncryptions;
            DeletionProtection = deletionProtection;
            EffectiveAnnotations = effectiveAnnotations;
            EffectiveLabels = effectiveLabels;
            ExpireTime = expireTime;
            Id = id;
            Labels = labels;
            Location = location;
            Name = name;
            Project = project;
            PulumiLabels = pulumiLabels;
            Rotations = rotations;
            SecretId = secretId;
            Topics = topics;
            Ttl = ttl;
            VersionAliases = versionAliases;
            VersionDestroyTtl = versionDestroyTtl;
        }
    }
}
