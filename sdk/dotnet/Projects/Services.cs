// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Projects
{
    /// <summary>
    /// Allows management of enabled API services for an existing Google Cloud
    /// Platform project. Services in an existing project that are not defined
    /// in the config will be removed.
    /// 
    /// For a list of services available, visit the
    /// [API library page](https://console.cloud.google.com/apis/library) or run `gcloud services list`.
    /// 
    /// &gt; **Note:** This resource attempts to be the authoritative source on *all* enabled APIs, which often
    /// 	leads to conflicts when certain actions enable other APIs. If you do not need to ensure that
    /// 	*exclusively* a particular set of APIs are enabled, you should most likely use the
    /// 	gcp.projects.Service resource, one resource per API.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/project_services.html.markdown.
    /// </summary>
    public partial class Services : Pulumi.CustomResource
    {
        /// <summary>
        /// Whether or not to disable APIs on project
        /// when destroyed. Defaults to true. **Note**: When `disable_on_destroy` is
        /// true and the project is changed, this provider will force disable API services
        /// managed by this provider for the previous project.
        /// </summary>
        [Output("disableOnDestroy")]
        public Output<bool?> DisableOnDestroy { get; private set; } = null!;

        /// <summary>
        /// The project ID.
        /// Changing this forces this provider to attempt to disable all previously managed
        /// API services in the previous project.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The list of services that are enabled. Supports
        /// update.
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<string>> ServiceNames { get; private set; } = null!;


        /// <summary>
        /// Create a Services resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Services(string name, ServicesArgs args, CustomResourceOptions? options = null)
            : base("gcp:projects/services:Services", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Services(string name, Input<string> id, ServicesState? state = null, CustomResourceOptions? options = null)
            : base("gcp:projects/services:Services", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Services resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Services Get(string name, Input<string> id, ServicesState? state = null, CustomResourceOptions? options = null)
        {
            return new Services(name, id, state, options);
        }
    }

    public sealed class ServicesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not to disable APIs on project
        /// when destroyed. Defaults to true. **Note**: When `disable_on_destroy` is
        /// true and the project is changed, this provider will force disable API services
        /// managed by this provider for the previous project.
        /// </summary>
        [Input("disableOnDestroy")]
        public Input<bool>? DisableOnDestroy { get; set; }

        /// <summary>
        /// The project ID.
        /// Changing this forces this provider to attempt to disable all previously managed
        /// API services in the previous project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("services", required: true)]
        private InputList<string>? _services;

        /// <summary>
        /// The list of services that are enabled. Supports
        /// update.
        /// </summary>
        public InputList<string> ServiceNames
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        public ServicesArgs()
        {
        }
    }

    public sealed class ServicesState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not to disable APIs on project
        /// when destroyed. Defaults to true. **Note**: When `disable_on_destroy` is
        /// true and the project is changed, this provider will force disable API services
        /// managed by this provider for the previous project.
        /// </summary>
        [Input("disableOnDestroy")]
        public Input<bool>? DisableOnDestroy { get; set; }

        /// <summary>
        /// The project ID.
        /// Changing this forces this provider to attempt to disable all previously managed
        /// API services in the previous project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("services")]
        private InputList<string>? _services;

        /// <summary>
        /// The list of services that are enabled. Supports
        /// update.
        /// </summary>
        public InputList<string> ServiceNames
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        public ServicesState()
        {
        }
    }
}
