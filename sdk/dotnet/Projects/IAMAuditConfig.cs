// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Projects
{
    /// <summary>
    /// Four different resources help you manage your IAM policy for a project. Each of these resources serves a different use case:
    /// 
    /// * `gcp.projects.IAMPolicy`: Authoritative. Sets the IAM policy for the project and replaces any existing policy already attached.
    /// * `gcp.projects.IAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the project are preserved.
    /// * `gcp.projects.IAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the project are preserved.
    /// * `gcp.projects.IAMAuditConfig`: Authoritative for a given service. Updates the IAM policy to enable audit logging for the given service.
    /// 
    /// 
    /// &gt; **Note:** `gcp.projects.IAMPolicy` **cannot** be used in conjunction with `gcp.projects.IAMBinding`, `gcp.projects.IAMMember`, or `gcp.projects.IAMAuditConfig` or they will fight over what your policy should be.
    /// 
    /// &gt; **Note:** `gcp.projects.IAMBinding` resources **can be** used in conjunction with `gcp.projects.IAMMember` resources **only if** they do not grant privilege to the same role.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/project_iam_audit_config.html.markdown.
    /// </summary>
    public partial class IAMAuditConfig : Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration for logging of each type of permission.  This can be specified multiple times.  Structure is documented below.
        /// </summary>
        [Output("auditLogConfigs")]
        public Output<ImmutableArray<Outputs.IAMAuditConfigAuditLogConfigs>> AuditLogConfigs { get; private set; } = null!;

        /// <summary>
        /// (Computed) The etag of the project's IAM policy.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The project ID. If not specified for `gcp.projects.IAMBinding`, `gcp.projects.IAMMember`, or `gcp.projects.IAMAuditConfig`, uses the ID of the project configured with the provider.
        /// Required for `gcp.projects.IAMPolicy` - you must explicitly set the project, and it
        /// will not be inferred from the provider.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Service which will be enabled for audit logging.  The special value `allServices` covers all services.  Note that if there are google\_project\_iam\_audit\_config resources covering both `allServices` and a specific service then the union of the two AuditConfigs is used for that service: the `log_types` specified in each `audit_log_config` are enabled, and the `exempted_members` in each `audit_log_config` are exempted.
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;


        /// <summary>
        /// Create a IAMAuditConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IAMAuditConfig(string name, IAMAuditConfigArgs args, CustomResourceOptions? options = null)
            : base("gcp:projects/iAMAuditConfig:IAMAuditConfig", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private IAMAuditConfig(string name, Input<string> id, IAMAuditConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:projects/iAMAuditConfig:IAMAuditConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IAMAuditConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IAMAuditConfig Get(string name, Input<string> id, IAMAuditConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new IAMAuditConfig(name, id, state, options);
        }
    }

    public sealed class IAMAuditConfigArgs : Pulumi.ResourceArgs
    {
        [Input("auditLogConfigs", required: true)]
        private InputList<Inputs.IAMAuditConfigAuditLogConfigsArgs>? _auditLogConfigs;

        /// <summary>
        /// The configuration for logging of each type of permission.  This can be specified multiple times.  Structure is documented below.
        /// </summary>
        public InputList<Inputs.IAMAuditConfigAuditLogConfigsArgs> AuditLogConfigs
        {
            get => _auditLogConfigs ?? (_auditLogConfigs = new InputList<Inputs.IAMAuditConfigAuditLogConfigsArgs>());
            set => _auditLogConfigs = value;
        }

        /// <summary>
        /// The project ID. If not specified for `gcp.projects.IAMBinding`, `gcp.projects.IAMMember`, or `gcp.projects.IAMAuditConfig`, uses the ID of the project configured with the provider.
        /// Required for `gcp.projects.IAMPolicy` - you must explicitly set the project, and it
        /// will not be inferred from the provider.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Service which will be enabled for audit logging.  The special value `allServices` covers all services.  Note that if there are google\_project\_iam\_audit\_config resources covering both `allServices` and a specific service then the union of the two AuditConfigs is used for that service: the `log_types` specified in each `audit_log_config` are enabled, and the `exempted_members` in each `audit_log_config` are exempted.
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        public IAMAuditConfigArgs()
        {
        }
    }

    public sealed class IAMAuditConfigState : Pulumi.ResourceArgs
    {
        [Input("auditLogConfigs")]
        private InputList<Inputs.IAMAuditConfigAuditLogConfigsGetArgs>? _auditLogConfigs;

        /// <summary>
        /// The configuration for logging of each type of permission.  This can be specified multiple times.  Structure is documented below.
        /// </summary>
        public InputList<Inputs.IAMAuditConfigAuditLogConfigsGetArgs> AuditLogConfigs
        {
            get => _auditLogConfigs ?? (_auditLogConfigs = new InputList<Inputs.IAMAuditConfigAuditLogConfigsGetArgs>());
            set => _auditLogConfigs = value;
        }

        /// <summary>
        /// (Computed) The etag of the project's IAM policy.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The project ID. If not specified for `gcp.projects.IAMBinding`, `gcp.projects.IAMMember`, or `gcp.projects.IAMAuditConfig`, uses the ID of the project configured with the provider.
        /// Required for `gcp.projects.IAMPolicy` - you must explicitly set the project, and it
        /// will not be inferred from the provider.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Service which will be enabled for audit logging.  The special value `allServices` covers all services.  Note that if there are google\_project\_iam\_audit\_config resources covering both `allServices` and a specific service then the union of the two AuditConfigs is used for that service: the `log_types` specified in each `audit_log_config` are enabled, and the `exempted_members` in each `audit_log_config` are exempted.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        public IAMAuditConfigState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class IAMAuditConfigAuditLogConfigsArgs : Pulumi.ResourceArgs
    {
        [Input("exemptedMembers")]
        private InputList<string>? _exemptedMembers;
        public InputList<string> ExemptedMembers
        {
            get => _exemptedMembers ?? (_exemptedMembers = new InputList<string>());
            set => _exemptedMembers = value;
        }

        [Input("logType", required: true)]
        public Input<string> LogType { get; set; } = null!;

        public IAMAuditConfigAuditLogConfigsArgs()
        {
        }
    }

    public sealed class IAMAuditConfigAuditLogConfigsGetArgs : Pulumi.ResourceArgs
    {
        [Input("exemptedMembers")]
        private InputList<string>? _exemptedMembers;
        public InputList<string> ExemptedMembers
        {
            get => _exemptedMembers ?? (_exemptedMembers = new InputList<string>());
            set => _exemptedMembers = value;
        }

        [Input("logType", required: true)]
        public Input<string> LogType { get; set; } = null!;

        public IAMAuditConfigAuditLogConfigsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class IAMAuditConfigAuditLogConfigs
    {
        public readonly ImmutableArray<string> ExemptedMembers;
        public readonly string LogType;

        [OutputConstructor]
        private IAMAuditConfigAuditLogConfigs(
            ImmutableArray<string> exemptedMembers,
            string logType)
        {
            ExemptedMembers = exemptedMembers;
            LogType = logType;
        }
    }
    }
}
