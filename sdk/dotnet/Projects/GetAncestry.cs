// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Projects
{
    public static class GetAncestry
    {
        /// <summary>
        /// Retrieve the ancestors for a project.
        /// See the [REST API](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getAncestry) for more details.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetAncestryResult> InvokeAsync(GetAncestryArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAncestryResult>("gcp:projects/getAncestry:getAncestry", args ?? new GetAncestryArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve the ancestors for a project.
        /// See the [REST API](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getAncestry) for more details.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetAncestryResult> Invoke(GetAncestryInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAncestryResult>("gcp:projects/getAncestry:getAncestry", args ?? new GetAncestryInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve the ancestors for a project.
        /// See the [REST API](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getAncestry) for more details.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetAncestryResult> Invoke(GetAncestryInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAncestryResult>("gcp:projects/getAncestry:getAncestry", args ?? new GetAncestryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAncestryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the project. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetAncestryArgs()
        {
        }
        public static new GetAncestryArgs Empty => new GetAncestryArgs();
    }

    public sealed class GetAncestryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the project. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetAncestryInvokeArgs()
        {
        }
        public static new GetAncestryInvokeArgs Empty => new GetAncestryInvokeArgs();
    }


    [OutputType]
    public sealed class GetAncestryResult
    {
        /// <summary>
        /// A list of the project's ancestors. Structure is defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAncestryAncestorResult> Ancestors;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The optional user-assigned display name of the project.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// The parent's id.
        /// </summary>
        public readonly string ParentId;
        /// <summary>
        /// One of `"folder"` or `"organization"`.
        /// </summary>
        public readonly string ParentType;
        public readonly string? Project;

        [OutputConstructor]
        private GetAncestryResult(
            ImmutableArray<Outputs.GetAncestryAncestorResult> ancestors,

            string id,

            string orgId,

            string parentId,

            string parentType,

            string? project)
        {
            Ancestors = ancestors;
            Id = id;
            OrgId = orgId;
            ParentId = parentId;
            ParentType = parentType;
            Project = project;
        }
    }
}
