// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebase
{
    /// <summary>
    /// ## Example Usage
    /// ### Firebasehosting Release In Site
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHostingSite = new Gcp.Firebase.HostingSite("defaultHostingSite", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = "site-id",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var defaultHostingVersion = new Gcp.Firebase.HostingVersion("defaultHostingVersion", new()
    ///     {
    ///         SiteId = defaultHostingSite.SiteId,
    ///         Config = new Gcp.Firebase.Inputs.HostingVersionConfigArgs
    ///         {
    ///             Redirects = new[]
    ///             {
    ///                 new Gcp.Firebase.Inputs.HostingVersionConfigRedirectArgs
    ///                 {
    ///                     Glob = "/google/**",
    ///                     StatusCode = 302,
    ///                     Location = "https://www.google.com",
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var defaultHostingRelease = new Gcp.Firebase.HostingRelease("defaultHostingRelease", new()
    ///     {
    ///         SiteId = defaultHostingSite.SiteId,
    ///         VersionName = defaultHostingVersion.Name,
    ///         Message = "Test release",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebasehosting Release In Channel
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHostingSite = new Gcp.Firebase.HostingSite("defaultHostingSite", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = "site-with-channel",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var defaultHostingVersion = new Gcp.Firebase.HostingVersion("defaultHostingVersion", new()
    ///     {
    ///         SiteId = defaultHostingSite.SiteId,
    ///         Config = new Gcp.Firebase.Inputs.HostingVersionConfigArgs
    ///         {
    ///             Redirects = new[]
    ///             {
    ///                 new Gcp.Firebase.Inputs.HostingVersionConfigRedirectArgs
    ///                 {
    ///                     Glob = "/google/**",
    ///                     StatusCode = 302,
    ///                     Location = "https://www.google.com",
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var defaultHostingChannel = new Gcp.Firebase.HostingChannel("defaultHostingChannel", new()
    ///     {
    ///         SiteId = defaultHostingSite.SiteId,
    ///         ChannelId = "channel-id",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var defaultHostingRelease = new Gcp.Firebase.HostingRelease("defaultHostingRelease", new()
    ///     {
    ///         SiteId = defaultHostingSite.SiteId,
    ///         ChannelId = defaultHostingChannel.ChannelId,
    ///         VersionName = defaultHostingVersion.Name,
    ///         Message = "Test release in channel",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebasehosting Release Disable
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHostingSite = new Gcp.Firebase.HostingSite("defaultHostingSite", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = "site-id",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var defaultHostingRelease = new Gcp.Firebase.HostingRelease("defaultHostingRelease", new()
    ///     {
    ///         SiteId = defaultHostingSite.SiteId,
    ///         Type = "SITE_DISABLE",
    ///         Message = "Take down site",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Release can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firebase/hostingRelease:HostingRelease default sites/{{site_id}}/channels/{{channel_id}}/releases/{{release_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firebase/hostingRelease:HostingRelease default sites/{{site_id}}/releases/{{release_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firebase/hostingRelease:HostingRelease default {{site_id}}/{{channel_id}}/{{release_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firebase/hostingRelease:HostingRelease default {{site_id}}/{{release_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebase/hostingRelease:HostingRelease")]
    public partial class HostingRelease : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the channel to which the release belongs. If not provided, the release will
        /// belong to the default "live" channel
        /// </summary>
        [Output("channelId")]
        public Output<string?> ChannelId { get; private set; } = null!;

        /// <summary>
        /// The deploy description when the release was created. The value can be up to 512 characters.
        /// </summary>
        [Output("message")]
        public Output<string?> Message { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the release, in either of the following formats:
        /// sites/SITE_ID/releases/RELEASE_ID
        /// sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the Release.
        /// </summary>
        [Output("releaseId")]
        public Output<string> ReleaseId { get; private set; } = null!;

        /// <summary>
        /// Required. The ID of the site to which the release belongs.
        /// </summary>
        [Output("siteId")]
        public Output<string> SiteId { get; private set; } = null!;

        /// <summary>
        /// The type of the release; indicates what happened to the content of the site. There is no need to specify
        /// `DEPLOY` or `ROLLBACK` type if a `version_name` is provided.
        /// DEPLOY: A version was uploaded to Firebase Hosting and released. Output only.
        /// ROLLBACK: The release points back to a previously deployed version. Output only.
        /// SITE_DISABLE: The release prevents the site from serving content. Firebase Hosting acts as if the site never existed
        /// Possible values are: `DEPLOY`, `ROLLBACK`, `SITE_DISABLE`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for a version, in the format: sites/SITE_ID/versions/VERSION_ID.
        /// The content of the version specified will be actively displayed on the appropriate URL.
        /// The Version must belong to the same site as in the `site_id`.
        /// This parameter must be empty if the `type` of the release is `SITE_DISABLE`.
        /// </summary>
        [Output("versionName")]
        public Output<string?> VersionName { get; private set; } = null!;


        /// <summary>
        /// Create a HostingRelease resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HostingRelease(string name, HostingReleaseArgs args, CustomResourceOptions? options = null)
            : base("gcp:firebase/hostingRelease:HostingRelease", name, args ?? new HostingReleaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HostingRelease(string name, Input<string> id, HostingReleaseState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/hostingRelease:HostingRelease", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HostingRelease resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HostingRelease Get(string name, Input<string> id, HostingReleaseState? state = null, CustomResourceOptions? options = null)
        {
            return new HostingRelease(name, id, state, options);
        }
    }

    public sealed class HostingReleaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the channel to which the release belongs. If not provided, the release will
        /// belong to the default "live" channel
        /// </summary>
        [Input("channelId")]
        public Input<string>? ChannelId { get; set; }

        /// <summary>
        /// The deploy description when the release was created. The value can be up to 512 characters.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// Required. The ID of the site to which the release belongs.
        /// </summary>
        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        /// <summary>
        /// The type of the release; indicates what happened to the content of the site. There is no need to specify
        /// `DEPLOY` or `ROLLBACK` type if a `version_name` is provided.
        /// DEPLOY: A version was uploaded to Firebase Hosting and released. Output only.
        /// ROLLBACK: The release points back to a previously deployed version. Output only.
        /// SITE_DISABLE: The release prevents the site from serving content. Firebase Hosting acts as if the site never existed
        /// Possible values are: `DEPLOY`, `ROLLBACK`, `SITE_DISABLE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The unique identifier for a version, in the format: sites/SITE_ID/versions/VERSION_ID.
        /// The content of the version specified will be actively displayed on the appropriate URL.
        /// The Version must belong to the same site as in the `site_id`.
        /// This parameter must be empty if the `type` of the release is `SITE_DISABLE`.
        /// </summary>
        [Input("versionName")]
        public Input<string>? VersionName { get; set; }

        public HostingReleaseArgs()
        {
        }
        public static new HostingReleaseArgs Empty => new HostingReleaseArgs();
    }

    public sealed class HostingReleaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the channel to which the release belongs. If not provided, the release will
        /// belong to the default "live" channel
        /// </summary>
        [Input("channelId")]
        public Input<string>? ChannelId { get; set; }

        /// <summary>
        /// The deploy description when the release was created. The value can be up to 512 characters.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// The unique identifier for the release, in either of the following formats:
        /// sites/SITE_ID/releases/RELEASE_ID
        /// sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The unique identifier for the Release.
        /// </summary>
        [Input("releaseId")]
        public Input<string>? ReleaseId { get; set; }

        /// <summary>
        /// Required. The ID of the site to which the release belongs.
        /// </summary>
        [Input("siteId")]
        public Input<string>? SiteId { get; set; }

        /// <summary>
        /// The type of the release; indicates what happened to the content of the site. There is no need to specify
        /// `DEPLOY` or `ROLLBACK` type if a `version_name` is provided.
        /// DEPLOY: A version was uploaded to Firebase Hosting and released. Output only.
        /// ROLLBACK: The release points back to a previously deployed version. Output only.
        /// SITE_DISABLE: The release prevents the site from serving content. Firebase Hosting acts as if the site never existed
        /// Possible values are: `DEPLOY`, `ROLLBACK`, `SITE_DISABLE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The unique identifier for a version, in the format: sites/SITE_ID/versions/VERSION_ID.
        /// The content of the version specified will be actively displayed on the appropriate URL.
        /// The Version must belong to the same site as in the `site_id`.
        /// This parameter must be empty if the `type` of the release is `SITE_DISABLE`.
        /// </summary>
        [Input("versionName")]
        public Input<string>? VersionName { get; set; }

        public HostingReleaseState()
        {
        }
        public static new HostingReleaseState Empty => new HostingReleaseState();
    }
}
