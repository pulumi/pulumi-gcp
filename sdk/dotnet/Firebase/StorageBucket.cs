// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebase
{
    /// <summary>
    /// ## Example Usage
    /// ### Firebasestorage Bucket Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultBucket = new Gcp.Storage.Bucket("defaultBucket", new()
    ///     {
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var defaultStorageBucket = new Gcp.Firebase.StorageBucket("defaultStorageBucket", new()
    ///     {
    ///         Project = "my-project-name",
    ///         BucketId = defaultBucket.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Bucket can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firebase/storageBucket:StorageBucket default projects/{{project}}/buckets/{{bucket_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firebase/storageBucket:StorageBucket default {{project}}/{{bucket_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firebase/storageBucket:StorageBucket default {{bucket_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebase/storageBucket:StorageBucket")]
    public partial class StorageBucket : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Required. Immutable. The ID of the underlying Google Cloud Storage bucket
        /// </summary>
        [Output("bucketId")]
        public Output<string?> BucketId { get; private set; } = null!;

        /// <summary>
        /// Resource name of the bucket in the format projects/PROJECT_IDENTIFIER/buckets/BUCKET_ID
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a StorageBucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageBucket(string name, StorageBucketArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/storageBucket:StorageBucket", name, args ?? new StorageBucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StorageBucket(string name, Input<string> id, StorageBucketState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/storageBucket:StorageBucket", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StorageBucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageBucket Get(string name, Input<string> id, StorageBucketState? state = null, CustomResourceOptions? options = null)
        {
            return new StorageBucket(name, id, state, options);
        }
    }

    public sealed class StorageBucketArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. Immutable. The ID of the underlying Google Cloud Storage bucket
        /// </summary>
        [Input("bucketId")]
        public Input<string>? BucketId { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public StorageBucketArgs()
        {
        }
        public static new StorageBucketArgs Empty => new StorageBucketArgs();
    }

    public sealed class StorageBucketState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. Immutable. The ID of the underlying Google Cloud Storage bucket
        /// </summary>
        [Input("bucketId")]
        public Input<string>? BucketId { get; set; }

        /// <summary>
        /// Resource name of the bucket in the format projects/PROJECT_IDENTIFIER/buckets/BUCKET_ID
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public StorageBucketState()
        {
        }
        public static new StorageBucketState Empty => new StorageBucketState();
    }
}
