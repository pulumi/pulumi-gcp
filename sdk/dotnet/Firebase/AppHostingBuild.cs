// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebase
{
    /// <summary>
    /// A single build for a backend, at a specific point codebase reference tag
    /// and point in time. Encapsulates several resources, including an Artifact Registry
    /// container image, a Cloud Build invocation that built the image, and the
    /// Cloud Run revision that uses that image.
    /// 
    /// ## Example Usage
    /// 
    /// ### Firebase App Hosting Build Minimal
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //## Include these blocks only once per project if you are starting from scratch ###
    ///     var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    ///     {
    ///         Project = "my-project-name",
    ///         AccountId = "firebase-app-hosting-compute",
    ///         DisplayName = "Firebase App Hosting compute service account",
    ///         CreateIgnoreAlreadyExists = true,
    ///     });
    /// 
    ///     var fah = new Gcp.Projects.Service("fah", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceName = "firebaseapphosting.googleapis.com",
    ///         DisableOnDestroy = false,
    ///     });
    /// 
    ///     var exampleAppHostingBackend = new Gcp.Firebase.AppHostingBackend("example", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         BackendId = "mini",
    ///         AppId = "1:0000000000:web:674cde32020e16fbce9dbd",
    ///         ServingLocality = "GLOBAL_ACCESS",
    ///         ServiceAccount = serviceAccount.Email,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             fah,
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.Firebase.AppHostingBuild("example", new()
    ///     {
    ///         Project = exampleAppHostingBackend.Project,
    ///         Location = exampleAppHostingBackend.Location,
    ///         Backend = exampleAppHostingBackend.BackendId,
    ///         BuildId = "mini-build",
    ///         Source = new Gcp.Firebase.Inputs.AppHostingBuildSourceArgs
    ///         {
    ///             Container = new Gcp.Firebase.Inputs.AppHostingBuildSourceContainerArgs
    ///             {
    ///                 Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var appHostingSaRunner = new Gcp.Projects.IAMMember("app_hosting_sa_runner", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/firebaseapphosting.computeRunner",
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebase App Hosting Build Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //## Include these blocks only once per project if you are starting from scratch ###
    ///     var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    ///     {
    ///         Project = "my-project-name",
    ///         AccountId = "firebase-app-hosting-compute",
    ///         DisplayName = "Firebase App Hosting compute service account",
    ///         CreateIgnoreAlreadyExists = true,
    ///     });
    /// 
    ///     var fah = new Gcp.Projects.Service("fah", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceName = "firebaseapphosting.googleapis.com",
    ///         DisableOnDestroy = false,
    ///     });
    /// 
    ///     var exampleAppHostingBackend = new Gcp.Firebase.AppHostingBackend("example", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         BackendId = "full",
    ///         AppId = "1:0000000000:web:674cde32020e16fbce9dbd",
    ///         ServingLocality = "GLOBAL_ACCESS",
    ///         ServiceAccount = serviceAccount.Email,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             fah,
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.Firebase.AppHostingBuild("example", new()
    ///     {
    ///         Project = exampleAppHostingBackend.Project,
    ///         Location = exampleAppHostingBackend.Location,
    ///         Backend = exampleAppHostingBackend.BackendId,
    ///         BuildId = "full-build",
    ///         DisplayName = "My Build",
    ///         Annotations = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///         Source = new Gcp.Firebase.Inputs.AppHostingBuildSourceArgs
    ///         {
    ///             Container = new Gcp.Firebase.Inputs.AppHostingBuildSourceContainerArgs
    ///             {
    ///                 Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var appHostingSaRunner = new Gcp.Projects.IAMMember("app_hosting_sa_runner", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/firebaseapphosting.computeRunner",
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    /// });
    /// ```
    /// ## Import
    /// 
    /// Build can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/backends/{{backend}}/builds/{{build_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{backend}}/{{build_id}}`
    /// 
    /// * `{{location}}/{{backend}}/{{build_id}}`
    /// 
    /// When using the `pulumi import` command, Build can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appHostingBuild:AppHostingBuild default projects/{{project}}/locations/{{location}}/backends/{{backend}}/builds/{{build_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appHostingBuild:AppHostingBuild default {{project}}/{{location}}/{{backend}}/{{build_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appHostingBuild:AppHostingBuild default {{location}}/{{backend}}/{{build_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebase/appHostingBuild:AppHostingBuild")]
    public partial class AppHostingBuild : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
        /// should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
        /// annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
        /// present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// The ID of the Backend that this Build applies to
        /// </summary>
        [Output("backend")]
        public Output<string> Backend { get; private set; } = null!;

        /// <summary>
        /// The user-specified ID of the build being created.
        /// </summary>
        [Output("buildId")]
        public Output<string> BuildId { get; private set; } = null!;

        /// <summary>
        /// The location of the [Cloud Build
        /// logs](https://cloud.google.com/build/docs/view-build-results) for the build
        /// process.
        /// </summary>
        [Output("buildLogsUri")]
        public Output<string> BuildLogsUri { get; private set; } = null!;

        /// <summary>
        /// Time at which the build was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Human-readable name. 63 character limit.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The environment name of the backend when this build was created.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The source of the error for the build, if in a `FAILED` state.
        /// Possible values:
        /// CLOUD_BUILD
        /// CLOUD_RUN
        /// </summary>
        [Output("errorSource")]
        public Output<string> ErrorSource { get; private set; } = null!;

        /// <summary>
        /// The `Status` type defines a logical error model that is suitable for
        /// different programming environments, including REST APIs and RPC APIs. It is
        /// used by [gRPC](https://github.com/grpc). Each `Status` message contains
        /// three pieces of data: error code, error message, and error details.
        /// You can find out more about this error model and how to work with it in the
        /// [API Design Guide](https://cloud.google.com/apis/design/errors).
        /// Structure is documented below.
        /// </summary>
        [Output("errors")]
        public Output<ImmutableArray<Outputs.AppHostingBuildError>> Errors { get; private set; } = null!;

        /// <summary>
        /// Server-computed checksum based on other values; may be sent
        /// on update or delete to ensure operation is done on expected resource.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The Artifact Registry
        /// [container
        /// image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
        /// URI, used by the Cloud Run
        /// [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
        /// for this build.
        /// </summary>
        [Output("image")]
        public Output<string> Image { get; private set; } = null!;

        /// <summary>
        /// Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
        /// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
        /// 'effective_labels' for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location of the Backend that this Build applies to
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Identifier. The resource name of the build.
        /// Format:
        /// `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The source for the build.
        /// Structure is documented below.
        /// </summary>
        [Output("source")]
        public Output<Outputs.AppHostingBuildSource> Source { get; private set; } = null!;

        /// <summary>
        /// The state of the build.
        /// Possible values:
        /// BUILDING
        /// BUILT
        /// DEPLOYING
        /// READY
        /// FAILED
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// System-assigned, unique identifier.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Time at which the build was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a AppHostingBuild resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppHostingBuild(string name, AppHostingBuildArgs args, CustomResourceOptions? options = null)
            : base("gcp:firebase/appHostingBuild:AppHostingBuild", name, args ?? new AppHostingBuildArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppHostingBuild(string name, Input<string> id, AppHostingBuildState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/appHostingBuild:AppHostingBuild", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppHostingBuild resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppHostingBuild Get(string name, Input<string> id, AppHostingBuildState? state = null, CustomResourceOptions? options = null)
        {
            return new AppHostingBuild(name, id, state, options);
        }
    }

    public sealed class AppHostingBuildArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
        /// should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
        /// annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
        /// present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The ID of the Backend that this Build applies to
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// The user-specified ID of the build being created.
        /// </summary>
        [Input("buildId", required: true)]
        public Input<string> BuildId { get; set; } = null!;

        /// <summary>
        /// Human-readable name. 63 character limit.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
        /// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
        /// 'effective_labels' for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the Backend that this Build applies to
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The source for the build.
        /// Structure is documented below.
        /// </summary>
        [Input("source", required: true)]
        public Input<Inputs.AppHostingBuildSourceArgs> Source { get; set; } = null!;

        public AppHostingBuildArgs()
        {
        }
        public static new AppHostingBuildArgs Empty => new AppHostingBuildArgs();
    }

    public sealed class AppHostingBuildState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
        /// should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
        /// annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
        /// present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The ID of the Backend that this Build applies to
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// The user-specified ID of the build being created.
        /// </summary>
        [Input("buildId")]
        public Input<string>? BuildId { get; set; }

        /// <summary>
        /// The location of the [Cloud Build
        /// logs](https://cloud.google.com/build/docs/view-build-results) for the build
        /// process.
        /// </summary>
        [Input("buildLogsUri")]
        public Input<string>? BuildLogsUri { get; set; }

        /// <summary>
        /// Time at which the build was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Human-readable name. 63 character limit.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The environment name of the backend when this build was created.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The source of the error for the build, if in a `FAILED` state.
        /// Possible values:
        /// CLOUD_BUILD
        /// CLOUD_RUN
        /// </summary>
        [Input("errorSource")]
        public Input<string>? ErrorSource { get; set; }

        [Input("errors")]
        private InputList<Inputs.AppHostingBuildErrorGetArgs>? _errors;

        /// <summary>
        /// The `Status` type defines a logical error model that is suitable for
        /// different programming environments, including REST APIs and RPC APIs. It is
        /// used by [gRPC](https://github.com/grpc). Each `Status` message contains
        /// three pieces of data: error code, error message, and error details.
        /// You can find out more about this error model and how to work with it in the
        /// [API Design Guide](https://cloud.google.com/apis/design/errors).
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AppHostingBuildErrorGetArgs> Errors
        {
            get => _errors ?? (_errors = new InputList<Inputs.AppHostingBuildErrorGetArgs>());
            set => _errors = value;
        }

        /// <summary>
        /// Server-computed checksum based on other values; may be sent
        /// on update or delete to ensure operation is done on expected resource.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The Artifact Registry
        /// [container
        /// image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
        /// URI, used by the Cloud Run
        /// [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
        /// for this build.
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
        /// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
        /// 'effective_labels' for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the Backend that this Build applies to
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier. The resource name of the build.
        /// Format:
        /// `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The source for the build.
        /// Structure is documented below.
        /// </summary>
        [Input("source")]
        public Input<Inputs.AppHostingBuildSourceGetArgs>? Source { get; set; }

        /// <summary>
        /// The state of the build.
        /// Possible values:
        /// BUILDING
        /// BUILT
        /// DEPLOYING
        /// READY
        /// FAILED
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// System-assigned, unique identifier.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Time at which the build was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public AppHostingBuildState()
        {
        }
        public static new AppHostingBuildState Empty => new AppHostingBuildState();
    }
}
