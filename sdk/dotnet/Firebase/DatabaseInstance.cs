// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebase
{
    /// <summary>
    /// ## Example Usage
    /// ### Firebase Database Instance Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basic = new Gcp.Firebase.DatabaseInstance("basic", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Region = "us-central1",
    ///         InstanceId = "active-db",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebase Database Instance Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var full = new Gcp.Firebase.DatabaseInstance("full", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Region = "europe-west1",
    ///         InstanceId = "disabled-db",
    ///         Type = "USER_DATABASE",
    ///         DesiredState = "DISABLED",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebase Database Instance Default Database
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultProject = new Gcp.Organizations.Project("defaultProject", new()
    ///     {
    ///         ProjectId = "rtdb-project",
    ///         OrgId = "123456789",
    ///         Labels = 
    ///         {
    ///             { "firebase", "enabled" },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var defaultFirebase_projectProject = new Gcp.Firebase.Project("defaultFirebase/projectProject", new()
    ///     {
    ///         ProjectID = defaultProject.ProjectId,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var firebaseDatabase = new Gcp.Projects.Service("firebaseDatabase", new()
    ///     {
    ///         Project = defaultFirebase / projectProject.Project,
    ///         ServiceName = "firebasedatabase.googleapis.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var defaultDatabaseInstance = new Gcp.Firebase.DatabaseInstance("defaultDatabaseInstance", new()
    ///     {
    ///         Project = defaultFirebase / projectProject.Project,
    ///         Region = "us-central1",
    ///         InstanceId = "rtdb-project-default-rtdb",
    ///         Type = "DEFAULT_DATABASE",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///         DependsOn = new[]
    ///         {
    ///             firebaseDatabase,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Instance can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firebase/databaseInstance:DatabaseInstance default projects/{{project}}/locations/{{region}}/instances/{{instance_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firebase/databaseInstance:DatabaseInstance default {{project}}/{{region}}/{{instance_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firebase/databaseInstance:DatabaseInstance default {{region}}/{{instance_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:firebase/databaseInstance:DatabaseInstance default {{instance_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebase/databaseInstance:DatabaseInstance")]
    public partial class DatabaseInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The database URL in the form of https://{instance-id}.firebaseio.com for us-central1 instances
        /// or https://{instance-id}.{region}.firebasedatabase.app in other regions.
        /// </summary>
        [Output("databaseUrl")]
        public Output<string> DatabaseUrl { get; private set; } = null!;

        /// <summary>
        /// The intended database state.
        /// </summary>
        [Output("desiredState")]
        public Output<string?> DesiredState { get; private set; } = null!;

        /// <summary>
        /// The globally unique identifier of the Firebase Realtime Database instance.
        /// Instance IDs cannot be reused after deletion.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The fully-qualified resource name of the Firebase Realtime Database, in the
        /// format: projects/PROJECT_NUMBER/locations/REGION_IDENTIFIER/instances/INSTANCE_ID
        /// PROJECT_NUMBER: The Firebase project's [`ProjectNumber`](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
        /// Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// A reference to the region where the Firebase Realtime database resides.
        /// Check all [available regions](https://firebase.google.com/docs/projects/locations#rtdb-locations)
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The current database state. Set desired_state to :DISABLED to disable the database and :ACTIVE to reenable the database
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The database type.
        /// Each project can create one default Firebase Realtime Database, which cannot be deleted once created.
        /// Creating user Databases is only available for projects on the Blaze plan.
        /// Projects can be upgraded using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo.
        /// Default value is `USER_DATABASE`.
        /// Possible values are `DEFAULT_DATABASE` and `USER_DATABASE`.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseInstance(string name, DatabaseInstanceArgs args, CustomResourceOptions? options = null)
            : base("gcp:firebase/databaseInstance:DatabaseInstance", name, args ?? new DatabaseInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseInstance(string name, Input<string> id, DatabaseInstanceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/databaseInstance:DatabaseInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseInstance Get(string name, Input<string> id, DatabaseInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseInstance(name, id, state, options);
        }
    }

    public sealed class DatabaseInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The intended database state.
        /// </summary>
        [Input("desiredState")]
        public Input<string>? DesiredState { get; set; }

        /// <summary>
        /// The globally unique identifier of the Firebase Realtime Database instance.
        /// Instance IDs cannot be reused after deletion.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A reference to the region where the Firebase Realtime database resides.
        /// Check all [available regions](https://firebase.google.com/docs/projects/locations#rtdb-locations)
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// The database type.
        /// Each project can create one default Firebase Realtime Database, which cannot be deleted once created.
        /// Creating user Databases is only available for projects on the Blaze plan.
        /// Projects can be upgraded using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo.
        /// Default value is `USER_DATABASE`.
        /// Possible values are `DEFAULT_DATABASE` and `USER_DATABASE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DatabaseInstanceArgs()
        {
        }
        public static new DatabaseInstanceArgs Empty => new DatabaseInstanceArgs();
    }

    public sealed class DatabaseInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The database URL in the form of https://{instance-id}.firebaseio.com for us-central1 instances
        /// or https://{instance-id}.{region}.firebasedatabase.app in other regions.
        /// </summary>
        [Input("databaseUrl")]
        public Input<string>? DatabaseUrl { get; set; }

        /// <summary>
        /// The intended database state.
        /// </summary>
        [Input("desiredState")]
        public Input<string>? DesiredState { get; set; }

        /// <summary>
        /// The globally unique identifier of the Firebase Realtime Database instance.
        /// Instance IDs cannot be reused after deletion.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The fully-qualified resource name of the Firebase Realtime Database, in the
        /// format: projects/PROJECT_NUMBER/locations/REGION_IDENTIFIER/instances/INSTANCE_ID
        /// PROJECT_NUMBER: The Firebase project's [`ProjectNumber`](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
        /// Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A reference to the region where the Firebase Realtime database resides.
        /// Check all [available regions](https://firebase.google.com/docs/projects/locations#rtdb-locations)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The current database state. Set desired_state to :DISABLED to disable the database and :ACTIVE to reenable the database
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The database type.
        /// Each project can create one default Firebase Realtime Database, which cannot be deleted once created.
        /// Creating user Databases is only available for projects on the Blaze plan.
        /// Projects can be upgraded using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo.
        /// Default value is `USER_DATABASE`.
        /// Possible values are `DEFAULT_DATABASE` and `USER_DATABASE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DatabaseInstanceState()
        {
        }
        public static new DatabaseInstanceState Empty => new DatabaseInstanceState();
    }
}
