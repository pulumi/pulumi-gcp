// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebase
{
    /// <summary>
    /// A Firebase Data Connect service.
    /// 
    /// To get more information about Service, see:
    /// 
    /// * [API documentation](https://firebase.google.com/docs/reference/data-connect/rest)
    /// * How-to Guides
    ///     * [Official Documentation](https://firebase.google.com/docs/data-connect)
    /// 
    /// ## Example Usage
    /// 
    /// ### Firebasedataconnect Service Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Enable Firebase Data Connect API
    ///     var fdc = new Gcp.Projects.Service("fdc", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceName = "firebasedataconnect.googleapis.com",
    ///         DisableOnDestroy = false,
    ///     });
    /// 
    ///     // Create a Firebase Data Connect service
    ///     var @default = new Gcp.Firebase.DataConnectService("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         ServiceId = "example-service",
    ///         DeletionPolicy = "DEFAULT",
    ///         Labels = 
    ///         {
    ///             { "label", "my-label" },
    ///         },
    ///         Annotations = 
    ///         {
    ///             { "key1", "value1" },
    ///             { "key2", "value2" },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             fdc,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebasedataconnect Service With Force Deletion
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Enable Firebase Data Connect API
    ///     var fdc = new Gcp.Projects.Service("fdc", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceName = "firebasedataconnect.googleapis.com",
    ///         DisableOnDestroy = false,
    ///     });
    /// 
    ///     // Create a Firebase Data Connect service
    ///     var @default = new Gcp.Firebase.DataConnectService("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         ServiceId = "example-service",
    ///         DeletionPolicy = "FORCE",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             fdc,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/services/{{service_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{service_id}}`
    /// 
    /// * `{{location}}/{{service_id}}`
    /// 
    /// When using the `pulumi import` command, Service can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/dataConnectService:DataConnectService default projects/{{project}}/locations/{{location}}/services/{{service_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/dataConnectService:DataConnectService default {{project}}/{{location}}/{{service_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/dataConnectService:DataConnectService default {{location}}/{{service_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebase/dataConnectService:DataConnectService")]
    public partial class DataConnectService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. Stores small amounts of arbitrary data.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Output only. [Output only] Create time stamp.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The deletion policy for the database. Setting the field to FORCE allows the
        /// Service to be deleted even if a Schema or Connector is present. By default,
        /// the Service deletion will only succeed when no Schema or Connectors are
        /// present.
        /// Possible values: DEFAULT, FORCE
        /// </summary>
        [Output("deletionPolicy")]
        public Output<string?> DeletionPolicy { get; private set; } = null!;

        /// <summary>
        /// Optional. Mutable human-readable name. 63 character limit.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Output only. This checksum is computed by the server based on the value of other
        /// fields, and may be sent on update and delete requests to ensure the
        /// client has an up-to-date value before proceeding.
        /// [AIP-154](https://google.aip.dev/154)
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Optional. Labels as key value pairs.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The region in which the service resides, e.g. "us-central1" or "asia-east1".
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Identifier. The relative resource name of the Firebase Data Connect service, in the
        /// format:
        /// ```
        /// projects/{project}/locations/{location}/services/{service}
        /// ```
        /// Note that the service ID is specific to Firebase Data Connect and does not
        /// correspond to any of the instance IDs of the underlying data source
        /// connections.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Output only. A field that if true, indicates that the system is working update the
        /// service.
        /// </summary>
        [Output("reconciling")]
        public Output<bool> Reconciling { get; private set; } = null!;

        /// <summary>
        /// Required. The ID to use for the service, which will become the final component of the
        /// service's resource name.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// Output only. System-assigned, unique identifier.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Output only. [Output only] Update time stamp.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a DataConnectService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataConnectService(string name, DataConnectServiceArgs args, CustomResourceOptions? options = null)
            : base("gcp:firebase/dataConnectService:DataConnectService", name, args ?? new DataConnectServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataConnectService(string name, Input<string> id, DataConnectServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/dataConnectService:DataConnectService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataConnectService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataConnectService Get(string name, Input<string> id, DataConnectServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new DataConnectService(name, id, state, options);
        }
    }

    public sealed class DataConnectServiceArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. Stores small amounts of arbitrary data.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The deletion policy for the database. Setting the field to FORCE allows the
        /// Service to be deleted even if a Schema or Connector is present. By default,
        /// the Service deletion will only succeed when no Schema or Connectors are
        /// present.
        /// Possible values: DEFAULT, FORCE
        /// </summary>
        [Input("deletionPolicy")]
        public Input<string>? DeletionPolicy { get; set; }

        /// <summary>
        /// Optional. Mutable human-readable name. 63 character limit.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels as key value pairs.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The region in which the service resides, e.g. "us-central1" or "asia-east1".
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Required. The ID to use for the service, which will become the final component of the
        /// service's resource name.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public DataConnectServiceArgs()
        {
        }
        public static new DataConnectServiceArgs Empty => new DataConnectServiceArgs();
    }

    public sealed class DataConnectServiceState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. Stores small amounts of arbitrary data.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Output only. [Output only] Create time stamp.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The deletion policy for the database. Setting the field to FORCE allows the
        /// Service to be deleted even if a Schema or Connector is present. By default,
        /// the Service deletion will only succeed when no Schema or Connectors are
        /// present.
        /// Possible values: DEFAULT, FORCE
        /// </summary>
        [Input("deletionPolicy")]
        public Input<string>? DeletionPolicy { get; set; }

        /// <summary>
        /// Optional. Mutable human-readable name. 63 character limit.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Output only. This checksum is computed by the server based on the value of other
        /// fields, and may be sent on update and delete requests to ensure the
        /// client has an up-to-date value before proceeding.
        /// [AIP-154](https://google.aip.dev/154)
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels as key value pairs.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The region in which the service resides, e.g. "us-central1" or "asia-east1".
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier. The relative resource name of the Firebase Data Connect service, in the
        /// format:
        /// ```
        /// projects/{project}/locations/{location}/services/{service}
        /// ```
        /// Note that the service ID is specific to Firebase Data Connect and does not
        /// correspond to any of the instance IDs of the underlying data source
        /// connections.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Output only. A field that if true, indicates that the system is working update the
        /// service.
        /// </summary>
        [Input("reconciling")]
        public Input<bool>? Reconciling { get; set; }

        /// <summary>
        /// Required. The ID to use for the service, which will become the final component of the
        /// service's resource name.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// Output only. System-assigned, unique identifier.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Output only. [Output only] Update time stamp.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public DataConnectServiceState()
        {
        }
        public static new DataConnectServiceState Empty => new DataConnectServiceState();
    }
}
