// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebase
{
    /// <summary>
    /// A domain name that is associated with a backend.
    /// 
    /// ## Example Usage
    /// 
    /// ### Firebase App Hosting Default Domain Minimal
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    ///     {
    ///         Project = "my-project-name",
    ///         AccountId = "service-account",
    ///         DisplayName = "Firebase App Hosting compute service account",
    ///         CreateIgnoreAlreadyExists = true,
    ///     });
    /// 
    ///     var exampleAppHostingBackend = new Gcp.Firebase.AppHostingBackend("example", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         BackendId = "dd-mini",
    ///         AppId = "1:0000000000:web:674cde32020e16fbce9dbd",
    ///         ServingLocality = "GLOBAL_ACCESS",
    ///         ServiceAccount = serviceAccount.Email,
    ///     });
    /// 
    ///     var example = new Gcp.Firebase.AppHostingDefaultDomain("example", new()
    ///     {
    ///         Project = exampleAppHostingBackend.Project,
    ///         Location = exampleAppHostingBackend.Location,
    ///         Backend = exampleAppHostingBackend.BackendId,
    ///         DomainId = exampleAppHostingBackend.Uri,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebase App Hosting Default Domain Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    ///     {
    ///         Project = "my-project-name",
    ///         AccountId = "service-account",
    ///         DisplayName = "Firebase App Hosting compute service account",
    ///         CreateIgnoreAlreadyExists = true,
    ///     });
    /// 
    ///     var exampleAppHostingBackend = new Gcp.Firebase.AppHostingBackend("example", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         BackendId = "dd-full",
    ///         AppId = "1:0000000000:web:674cde32020e16fbce9dbd",
    ///         ServingLocality = "GLOBAL_ACCESS",
    ///         ServiceAccount = serviceAccount.Email,
    ///     });
    /// 
    ///     var example = new Gcp.Firebase.AppHostingDefaultDomain("example", new()
    ///     {
    ///         Project = exampleAppHostingBackend.Project,
    ///         Location = exampleAppHostingBackend.Location,
    ///         Backend = exampleAppHostingBackend.BackendId,
    ///         DomainId = exampleAppHostingBackend.Uri,
    ///         Disabled = false,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebase App Hosting Default Domain Disabled
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    ///     {
    ///         Project = "my-project-name",
    ///         AccountId = "service-account",
    ///         DisplayName = "Firebase App Hosting compute service account",
    ///         CreateIgnoreAlreadyExists = true,
    ///     });
    /// 
    ///     var exampleAppHostingBackend = new Gcp.Firebase.AppHostingBackend("example", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         BackendId = "dd-disabled",
    ///         AppId = "1:0000000000:web:674cde32020e16fbce9dbd",
    ///         ServingLocality = "GLOBAL_ACCESS",
    ///         ServiceAccount = serviceAccount.Email,
    ///     });
    /// 
    ///     var example = new Gcp.Firebase.AppHostingDefaultDomain("example", new()
    ///     {
    ///         Project = exampleAppHostingBackend.Project,
    ///         Location = exampleAppHostingBackend.Location,
    ///         Backend = exampleAppHostingBackend.BackendId,
    ///         DomainId = exampleAppHostingBackend.Uri,
    ///         Disabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DefaultDomain can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{backend}}/{{domain_id}}`
    /// 
    /// * `{{location}}/{{backend}}/{{domain_id}}`
    /// 
    /// When using the `pulumi import` command, DefaultDomain can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appHostingDefaultDomain:AppHostingDefaultDomain default projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appHostingDefaultDomain:AppHostingDefaultDomain default {{project}}/{{location}}/{{backend}}/{{domain_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appHostingDefaultDomain:AppHostingDefaultDomain default {{location}}/{{backend}}/{{domain_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebase/appHostingDefaultDomain:AppHostingDefaultDomain")]
    public partial class AppHostingDefaultDomain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Backend that this Domain is associated with
        /// </summary>
        [Output("backend")]
        public Output<string> Backend { get; private set; } = null!;

        /// <summary>
        /// Time at which the domain was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Whether the domain is disabled. Defaults to false.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
        /// </summary>
        [Output("domainId")]
        public Output<string> DomainId { get; private set; } = null!;

        /// <summary>
        /// Server-computed checksum based on other values; may be sent
        /// on update or delete to ensure operation is done on expected resource.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The location of the Backend that this Domain is associated with
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Identifier. The resource name of the domain, e.g.
        /// `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// System-assigned, unique identifier.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Time at which the domain was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a AppHostingDefaultDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppHostingDefaultDomain(string name, AppHostingDefaultDomainArgs args, CustomResourceOptions? options = null)
            : base("gcp:firebase/appHostingDefaultDomain:AppHostingDefaultDomain", name, args ?? new AppHostingDefaultDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppHostingDefaultDomain(string name, Input<string> id, AppHostingDefaultDomainState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/appHostingDefaultDomain:AppHostingDefaultDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppHostingDefaultDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppHostingDefaultDomain Get(string name, Input<string> id, AppHostingDefaultDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new AppHostingDefaultDomain(name, id, state, options);
        }
    }

    public sealed class AppHostingDefaultDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Backend that this Domain is associated with
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// Whether the domain is disabled. Defaults to false.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
        /// </summary>
        [Input("domainId", required: true)]
        public Input<string> DomainId { get; set; } = null!;

        /// <summary>
        /// The location of the Backend that this Domain is associated with
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public AppHostingDefaultDomainArgs()
        {
        }
        public static new AppHostingDefaultDomainArgs Empty => new AppHostingDefaultDomainArgs();
    }

    public sealed class AppHostingDefaultDomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Backend that this Domain is associated with
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// Time at which the domain was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Whether the domain is disabled. Defaults to false.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
        /// </summary>
        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        /// <summary>
        /// Server-computed checksum based on other values; may be sent
        /// on update or delete to ensure operation is done on expected resource.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The location of the Backend that this Domain is associated with
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier. The resource name of the domain, e.g.
        /// `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// System-assigned, unique identifier.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Time at which the domain was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public AppHostingDefaultDomainState()
        {
        }
        public static new AppHostingDefaultDomainState Empty => new AppHostingDefaultDomainState();
    }
}
