// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebase
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Firebasehosting Version Redirect
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Firebase.HostingSite("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = "site-id",
    ///     });
    /// 
    ///     var defaultHostingVersion = new Gcp.Firebase.HostingVersion("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         Config = new Gcp.Firebase.Inputs.HostingVersionConfigArgs
    ///         {
    ///             Redirects = new[]
    ///             {
    ///                 new Gcp.Firebase.Inputs.HostingVersionConfigRedirectArgs
    ///                 {
    ///                     Glob = "/google/**",
    ///                     StatusCode = 302,
    ///                     Location = "https://www.google.com",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultHostingRelease = new Gcp.Firebase.HostingRelease("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         VersionName = defaultHostingVersion.Name,
    ///         Message = "Redirect to Google",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebasehosting Version Headers
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Firebase.HostingSite("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = "site-id",
    ///     });
    /// 
    ///     var defaultHostingVersion = new Gcp.Firebase.HostingVersion("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         Config = new Gcp.Firebase.Inputs.HostingVersionConfigArgs
    ///         {
    ///             Headers = new[]
    ///             {
    ///                 new Gcp.Firebase.Inputs.HostingVersionConfigHeaderArgs
    ///                 {
    ///                     Glob = "/headers/**",
    ///                     Headers = 
    ///                     {
    ///                         { "my-header", "my-value" },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultHostingRelease = new Gcp.Firebase.HostingRelease("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         VersionName = defaultHostingVersion.Name,
    ///         Message = "With custom headers",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebasehosting Version Headers Regex
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Firebase.HostingSite("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = "site-id",
    ///     });
    /// 
    ///     var defaultHostingVersion = new Gcp.Firebase.HostingVersion("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         Config = new Gcp.Firebase.Inputs.HostingVersionConfigArgs
    ///         {
    ///             Headers = new[]
    ///             {
    ///                 new Gcp.Firebase.Inputs.HostingVersionConfigHeaderArgs
    ///                 {
    ///                     Regex = "^~/headers$",
    ///                     Headers = 
    ///                     {
    ///                         { "my-header", "my-value" },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultHostingRelease = new Gcp.Firebase.HostingRelease("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         VersionName = defaultHostingVersion.Name,
    ///         Message = "With custom headers",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebasehosting Version Path
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Firebase.HostingSite("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = "site-id",
    ///     });
    /// 
    ///     var defaultHostingVersion = new Gcp.Firebase.HostingVersion("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         Config = new Gcp.Firebase.Inputs.HostingVersionConfigArgs
    ///         {
    ///             Rewrites = new[]
    ///             {
    ///                 new Gcp.Firebase.Inputs.HostingVersionConfigRewriteArgs
    ///                 {
    ///                     Glob = "**",
    ///                     Path = "/index.html",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultHostingRelease = new Gcp.Firebase.HostingRelease("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         VersionName = defaultHostingVersion.Name,
    ///         Message = "Path Rewrite",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebasehosting Version Cloud Run
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Firebase.HostingSite("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = "site-id",
    ///     });
    /// 
    ///     var defaultService = new Gcp.CloudRunV2.Service("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Name = "cloud-run-service-via-hosting",
    ///         Location = "us-central1",
    ///         Ingress = "INGRESS_TRAFFIC_ALL",
    ///         Template = new Gcp.CloudRunV2.Inputs.ServiceTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                 },
    ///             },
    ///         },
    ///         DeletionProtection = true,
    ///     });
    /// 
    ///     var defaultHostingVersion = new Gcp.Firebase.HostingVersion("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         Config = new Gcp.Firebase.Inputs.HostingVersionConfigArgs
    ///         {
    ///             Rewrites = new[]
    ///             {
    ///                 new Gcp.Firebase.Inputs.HostingVersionConfigRewriteArgs
    ///                 {
    ///                     Glob = "/hello/**",
    ///                     Run = new Gcp.Firebase.Inputs.HostingVersionConfigRewriteRunArgs
    ///                     {
    ///                         ServiceId = defaultService.Name,
    ///                         Region = defaultService.Location,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultHostingRelease = new Gcp.Firebase.HostingRelease("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         VersionName = defaultHostingVersion.Name,
    ///         Message = "Cloud Run Integration",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebasehosting Version Cloud Functions
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Firebase.HostingSite("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = "site-id",
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Name = "site-id-function-source",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctions.Function("function", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Name = "cloud-function-via-hosting",
    ///         Description = "A Cloud Function connected to Firebase Hosing",
    ///         Runtime = "nodejs16",
    ///         AvailableMemoryMb = 128,
    ///         SourceArchiveBucket = bucket.Name,
    ///         SourceArchiveObject = @object.Name,
    ///         TriggerHttp = true,
    ///         EntryPoint = "helloHttp",
    ///     });
    /// 
    ///     var defaultHostingVersion = new Gcp.Firebase.HostingVersion("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         Config = new Gcp.Firebase.Inputs.HostingVersionConfigArgs
    ///         {
    ///             Rewrites = new[]
    ///             {
    ///                 new Gcp.Firebase.Inputs.HostingVersionConfigRewriteArgs
    ///                 {
    ///                     Glob = "/hello/**",
    ///                     Function = function.Name,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultHostingRelease = new Gcp.Firebase.HostingRelease("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         VersionName = defaultHostingVersion.Name,
    ///         Message = "Cloud Functions Integration",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Version can be imported using any of these accepted formats:
    /// 
    /// * `sites/{{site_id}}/versions/{{version_id}}`
    /// 
    /// * `{{site_id}}/{{version_id}}`
    /// 
    /// When using the `pulumi import` command, Version can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/hostingVersion:HostingVersion default sites/{{site_id}}/versions/{{version_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/hostingVersion:HostingVersion default {{site_id}}/{{version_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebase/hostingVersion:HostingVersion")]
    public partial class HostingVersion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
        /// Structure is documented below.
        /// </summary>
        [Output("config")]
        public Output<Outputs.HostingVersionConfig?> Config { get; private set; } = null!;

        /// <summary>
        /// The fully-qualified resource name for the version, in the format:
        /// sites/SITE_ID/versions/VERSION_ID
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Required. The ID of the site in which to create this Version.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("siteId")]
        public Output<string> SiteId { get; private set; } = null!;

        /// <summary>
        /// The ID for the version as in sites/SITE_ID/versions/VERSION_ID
        /// </summary>
        [Output("versionId")]
        public Output<string> VersionId { get; private set; } = null!;


        /// <summary>
        /// Create a HostingVersion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HostingVersion(string name, HostingVersionArgs args, CustomResourceOptions? options = null)
            : base("gcp:firebase/hostingVersion:HostingVersion", name, args ?? new HostingVersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HostingVersion(string name, Input<string> id, HostingVersionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/hostingVersion:HostingVersion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HostingVersion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HostingVersion Get(string name, Input<string> id, HostingVersionState? state = null, CustomResourceOptions? options = null)
        {
            return new HostingVersion(name, id, state, options);
        }
    }

    public sealed class HostingVersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
        /// Structure is documented below.
        /// </summary>
        [Input("config")]
        public Input<Inputs.HostingVersionConfigArgs>? Config { get; set; }

        /// <summary>
        /// Required. The ID of the site in which to create this Version.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        public HostingVersionArgs()
        {
        }
        public static new HostingVersionArgs Empty => new HostingVersionArgs();
    }

    public sealed class HostingVersionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
        /// Structure is documented below.
        /// </summary>
        [Input("config")]
        public Input<Inputs.HostingVersionConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// The fully-qualified resource name for the version, in the format:
        /// sites/SITE_ID/versions/VERSION_ID
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Required. The ID of the site in which to create this Version.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("siteId")]
        public Input<string>? SiteId { get; set; }

        /// <summary>
        /// The ID for the version as in sites/SITE_ID/versions/VERSION_ID
        /// </summary>
        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        public HostingVersionState()
        {
        }
        public static new HostingVersionState Empty => new HostingVersionState();
    }
}
