// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebase
{
    /// <summary>
    /// A Backend is the primary resource of App Hosting.
    /// 
    /// ## Example Usage
    /// 
    /// ### Firebase App Hosting Backend Minimal
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //## Include these blocks only once per project if you are starting from scratch ###
    ///     var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    ///     {
    ///         Project = "my-project-name",
    ///         AccountId = "firebase-app-hosting-compute",
    ///         DisplayName = "Firebase App Hosting compute service account",
    ///         CreateIgnoreAlreadyExists = true,
    ///     });
    /// 
    ///     var fah = new Gcp.Projects.Service("fah", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceName = "firebaseapphosting.googleapis.com",
    ///         DisableOnDestroy = false,
    ///     });
    /// 
    ///     var example = new Gcp.Firebase.AppHostingBackend("example", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         BackendId = "mini",
    ///         AppId = "1:0000000000:web:674cde32020e16fbce9dbd",
    ///         ServingLocality = "GLOBAL_ACCESS",
    ///         ServiceAccount = serviceAccount.Email,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             fah,
    ///         },
    ///     });
    /// 
    ///     var appHostingSaRunner = new Gcp.Projects.IAMMember("app_hosting_sa_runner", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/firebaseapphosting.computeRunner",
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebase App Hosting Backend Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //## Include these blocks only once per project if you are starting from scratch ###
    ///     var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    ///     {
    ///         Project = "my-project-name",
    ///         AccountId = "firebase-app-hosting-compute",
    ///         DisplayName = "Firebase App Hosting compute service account",
    ///         CreateIgnoreAlreadyExists = true,
    ///     });
    /// 
    ///     var fah = new Gcp.Projects.Service("fah", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceName = "firebaseapphosting.googleapis.com",
    ///         DisableOnDestroy = false,
    ///     });
    /// 
    ///     var example = new Gcp.Firebase.AppHostingBackend("example", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         BackendId = "full",
    ///         AppId = "1:0000000000:web:674cde32020e16fbce9dbd",
    ///         DisplayName = "My Backend",
    ///         ServingLocality = "GLOBAL_ACCESS",
    ///         ServiceAccount = serviceAccount.Email,
    ///         Environment = "prod",
    ///         Annotations = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             fah,
    ///         },
    ///     });
    /// 
    ///     var appHostingSaDeveloperconnect = new Gcp.Projects.IAMMember("app_hosting_sa_developerconnect", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/developerconnect.readTokenAccessor",
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    ///     var appHostingSaAdminsdk = new Gcp.Projects.IAMMember("app_hosting_sa_adminsdk", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/firebase.sdkAdminServiceAgent",
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    ///     var appHostingSaRunner = new Gcp.Projects.IAMMember("app_hosting_sa_runner", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/firebaseapphosting.computeRunner",
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebase App Hosting Backend Github
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //## Include these blocks only once per project if you are starting from scratch ###
    ///     var devconnect_p4sa = new Gcp.Projects.ServiceIdentity("devconnect-p4sa", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Service = "developerconnect.googleapis.com",
    ///     });
    /// 
    ///     var devconnect_secret = new Gcp.Projects.IAMMember("devconnect-secret", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/secretmanager.admin",
    ///         Member = devconnect_p4sa.Member,
    ///     });
    /// 
    ///     //##
    ///     //## Include these blocks only once per Github account ###
    ///     var my_connection = new Gcp.DeveloperConnect.Connection("my-connection", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         ConnectionId = "tf-test-connection-new",
    ///         GithubConfig = new Gcp.DeveloperConnect.Inputs.ConnectionGithubConfigArgs
    ///         {
    ///             GithubApp = "FIREBASE",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             devconnect_secret,
    ///         },
    ///     });
    /// 
    ///     var my_repository = new Gcp.DeveloperConnect.GitRepositoryLink("my-repository", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         GitRepositoryLinkId = "my-repo",
    ///         ParentConnection = my_connection.ConnectionId,
    ///         CloneUri = "https://github.com/myuser/myrepo.git",
    ///     });
    /// 
    ///     var example = new Gcp.Firebase.AppHostingBackend("example", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         BackendId = "my-backend-gh",
    ///         AppId = "1:0000000000:web:674cde32020e16fbce9dbd",
    ///         DisplayName = "My Backend",
    ///         ServingLocality = "GLOBAL_ACCESS",
    ///         ServiceAccount = "firebase-app-hosting-compute@my-project-name.iam.gserviceaccount.com",
    ///         Environment = "prod",
    ///         Annotations = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///         Codebase = new Gcp.Firebase.Inputs.AppHostingBackendCodebaseArgs
    ///         {
    ///             Repository = my_repository.Name,
    ///             RootDirectory = "/",
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["nextSteps"] = my_connection.InstallationStates,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Backend can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/backends/{{backend_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{backend_id}}`
    /// 
    /// * `{{location}}/{{backend_id}}`
    /// 
    /// When using the `pulumi import` command, Backend can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appHostingBackend:AppHostingBackend default projects/{{project}}/locations/{{location}}/backends/{{backend_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appHostingBackend:AppHostingBackend default {{project}}/{{location}}/{{backend_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appHostingBackend:AppHostingBackend default {{location}}/{{backend_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebase/appHostingBackend:AppHostingBackend")]
    public partial class AppHostingBackend : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Unstructured key value map that may be set by external tools to
        /// store and arbitrary metadata. They are not queryable and should be
        /// preserved when modifying objects.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// The [ID of a Web
        /// App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
        /// associated with the backend.
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// Id of the backend. Also used as the service ID for Cloud Run, and as part
        /// of the default domain name.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("backendId")]
        public Output<string> BackendId { get; private set; } = null!;

        /// <summary>
        /// The connection to an external source repository to watch for event-driven
        /// updates to the backend.
        /// Structure is documented below.
        /// </summary>
        [Output("codebase")]
        public Output<Outputs.AppHostingBackendCodebase?> Codebase { get; private set; } = null!;

        /// <summary>
        /// Time at which the backend was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Time at which the backend was deleted.
        /// </summary>
        [Output("deleteTime")]
        public Output<string> DeleteTime { get; private set; } = null!;

        /// <summary>
        /// Human-readable name. 63 character limit.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The environment name of the backend, used to load environment variables
        /// from environment specific configuration.
        /// </summary>
        [Output("environment")]
        public Output<string?> Environment { get; private set; } = null!;

        /// <summary>
        /// Server-computed checksum based on other values; may be sent
        /// on update or delete to ensure operation is done on expected resource.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Unstructured key value map that can be used to organize and categorize
        /// objects.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The canonical IDs of a Google Cloud location such as "us-east1".
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A list of the resources managed by this backend.
        /// Structure is documented below.
        /// </summary>
        [Output("managedResources")]
        public Output<ImmutableArray<Outputs.AppHostingBackendManagedResource>> ManagedResources { get; private set; } = null!;

        /// <summary>
        /// Identifier. The resource name of the backend.
        /// Format:
        /// `projects/{project}/locations/{locationId}/backends/{backendId}`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The name of the service account used for Cloud Build and Cloud Run.
        /// Should have the role roles/firebaseapphosting.computeRunner
        /// or equivalent permissions.
        /// </summary>
        [Output("serviceAccount")]
        public Output<string> ServiceAccount { get; private set; } = null!;

        /// <summary>
        /// Immutable. Specifies how App Hosting will serve the content for this backend. It will
        /// either be contained to a single region (REGIONAL_STRICT) or allowed to use
        /// App Hosting's global-replicated serving infrastructure (GLOBAL_ACCESS).
        /// Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
        /// </summary>
        [Output("servingLocality")]
        public Output<string> ServingLocality { get; private set; } = null!;

        /// <summary>
        /// System-assigned, unique identifier.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Time at which the backend was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// The primary URI to communicate with the backend.
        /// </summary>
        [Output("uri")]
        public Output<string> Uri { get; private set; } = null!;


        /// <summary>
        /// Create a AppHostingBackend resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppHostingBackend(string name, AppHostingBackendArgs args, CustomResourceOptions? options = null)
            : base("gcp:firebase/appHostingBackend:AppHostingBackend", name, args ?? new AppHostingBackendArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppHostingBackend(string name, Input<string> id, AppHostingBackendState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/appHostingBackend:AppHostingBackend", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppHostingBackend resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppHostingBackend Get(string name, Input<string> id, AppHostingBackendState? state = null, CustomResourceOptions? options = null)
        {
            return new AppHostingBackend(name, id, state, options);
        }
    }

    public sealed class AppHostingBackendArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Unstructured key value map that may be set by external tools to
        /// store and arbitrary metadata. They are not queryable and should be
        /// preserved when modifying objects.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The [ID of a Web
        /// App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
        /// associated with the backend.
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// Id of the backend. Also used as the service ID for Cloud Run, and as part
        /// of the default domain name.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("backendId", required: true)]
        public Input<string> BackendId { get; set; } = null!;

        /// <summary>
        /// The connection to an external source repository to watch for event-driven
        /// updates to the backend.
        /// Structure is documented below.
        /// </summary>
        [Input("codebase")]
        public Input<Inputs.AppHostingBackendCodebaseArgs>? Codebase { get; set; }

        /// <summary>
        /// Human-readable name. 63 character limit.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The environment name of the backend, used to load environment variables
        /// from environment specific configuration.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Unstructured key value map that can be used to organize and categorize
        /// objects.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The canonical IDs of a Google Cloud location such as "us-east1".
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The name of the service account used for Cloud Build and Cloud Run.
        /// Should have the role roles/firebaseapphosting.computeRunner
        /// or equivalent permissions.
        /// </summary>
        [Input("serviceAccount", required: true)]
        public Input<string> ServiceAccount { get; set; } = null!;

        /// <summary>
        /// Immutable. Specifies how App Hosting will serve the content for this backend. It will
        /// either be contained to a single region (REGIONAL_STRICT) or allowed to use
        /// App Hosting's global-replicated serving infrastructure (GLOBAL_ACCESS).
        /// Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
        /// </summary>
        [Input("servingLocality", required: true)]
        public Input<string> ServingLocality { get; set; } = null!;

        public AppHostingBackendArgs()
        {
        }
        public static new AppHostingBackendArgs Empty => new AppHostingBackendArgs();
    }

    public sealed class AppHostingBackendState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Unstructured key value map that may be set by external tools to
        /// store and arbitrary metadata. They are not queryable and should be
        /// preserved when modifying objects.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The [ID of a Web
        /// App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
        /// associated with the backend.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// Id of the backend. Also used as the service ID for Cloud Run, and as part
        /// of the default domain name.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("backendId")]
        public Input<string>? BackendId { get; set; }

        /// <summary>
        /// The connection to an external source repository to watch for event-driven
        /// updates to the backend.
        /// Structure is documented below.
        /// </summary>
        [Input("codebase")]
        public Input<Inputs.AppHostingBackendCodebaseGetArgs>? Codebase { get; set; }

        /// <summary>
        /// Time at which the backend was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Time at which the backend was deleted.
        /// </summary>
        [Input("deleteTime")]
        public Input<string>? DeleteTime { get; set; }

        /// <summary>
        /// Human-readable name. 63 character limit.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The environment name of the backend, used to load environment variables
        /// from environment specific configuration.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// Server-computed checksum based on other values; may be sent
        /// on update or delete to ensure operation is done on expected resource.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Unstructured key value map that can be used to organize and categorize
        /// objects.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The canonical IDs of a Google Cloud location such as "us-east1".
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("managedResources")]
        private InputList<Inputs.AppHostingBackendManagedResourceGetArgs>? _managedResources;

        /// <summary>
        /// A list of the resources managed by this backend.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AppHostingBackendManagedResourceGetArgs> ManagedResources
        {
            get => _managedResources ?? (_managedResources = new InputList<Inputs.AppHostingBackendManagedResourceGetArgs>());
            set => _managedResources = value;
        }

        /// <summary>
        /// Identifier. The resource name of the backend.
        /// Format:
        /// `projects/{project}/locations/{locationId}/backends/{backendId}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The name of the service account used for Cloud Build and Cloud Run.
        /// Should have the role roles/firebaseapphosting.computeRunner
        /// or equivalent permissions.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// Immutable. Specifies how App Hosting will serve the content for this backend. It will
        /// either be contained to a single region (REGIONAL_STRICT) or allowed to use
        /// App Hosting's global-replicated serving infrastructure (GLOBAL_ACCESS).
        /// Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
        /// </summary>
        [Input("servingLocality")]
        public Input<string>? ServingLocality { get; set; }

        /// <summary>
        /// System-assigned, unique identifier.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Time at which the backend was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// The primary URI to communicate with the backend.
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public AppHostingBackendState()
        {
        }
        public static new AppHostingBackendState Empty => new AppHostingBackendState();
    }
}
