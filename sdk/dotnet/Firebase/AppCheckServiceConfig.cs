// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebase
{
    /// <summary>
    /// The enforcement configuration for a service supported by App Check.
    /// 
    /// To get more information about ServiceConfig, see:
    /// 
    /// * [API documentation](https://firebase.google.com/docs/reference/appcheck/rest/v1/projects.services)
    /// * How-to Guides
    ///     * [Official Documentation](https://firebase.google.com/docs/app-check)
    /// 
    /// ## Example Usage
    /// 
    /// ### Firebase App Check Service Config Off
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var appcheck = new Gcp.Projects.Service("appcheck", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceName = "firebaseappcheck.googleapis.com",
    ///         DisableOnDestroy = false,
    ///     });
    /// 
    ///     var @default = new Gcp.Firebase.AppCheckServiceConfig("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceId = "firestore.googleapis.com",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebase App Check Service Config Enforced
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var appcheck = new Gcp.Projects.Service("appcheck", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceName = "firebaseappcheck.googleapis.com",
    ///         DisableOnDestroy = false,
    ///     });
    /// 
    ///     var @default = new Gcp.Firebase.AppCheckServiceConfig("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceId = "firebasestorage.googleapis.com",
    ///         EnforcementMode = "ENFORCED",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebase App Check Service Config Unenforced
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var appcheck = new Gcp.Projects.Service("appcheck", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceName = "firebaseappcheck.googleapis.com",
    ///         DisableOnDestroy = false,
    ///     });
    /// 
    ///     var @default = new Gcp.Firebase.AppCheckServiceConfig("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceId = "identitytoolkit.googleapis.com",
    ///         EnforcementMode = "UNENFORCED",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ServiceConfig can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/services/{{service_id}}`
    /// 
    /// * `{{project}}/{{service_id}}`
    /// 
    /// * `{{service_id}}`
    /// 
    /// When using the `pulumi import` command, ServiceConfig can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appCheckServiceConfig:AppCheckServiceConfig default projects/{{project}}/services/{{service_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appCheckServiceConfig:AppCheckServiceConfig default {{project}}/{{service_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appCheckServiceConfig:AppCheckServiceConfig default {{service_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebase/appCheckServiceConfig:AppCheckServiceConfig")]
    public partial class AppCheckServiceConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The App Check enforcement mode for a service supported by App Check. Valid values are (Unset) Firebase App Check is not
        /// enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this
        /// mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this
        /// mode by default. This is equivalent to OFF in the REST API. Deleting the Terraform resource will also switch the
        /// enforcement to OFF for this service. UNENFORCED Firebase App Check is not enforced for the service. App Check metrics
        /// are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App
        /// Check in this mode, other applicable protections, such as user authorization, are still enforced. ENFORCED Firebase App
        /// Check is enforced for the service. The service will reject any request that attempts to access your project's resources
        /// if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some
        /// services will still allow requests bearing the developer's privileged service account credentials without an App Check
        /// token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor
        /// the composition of your callers. While the service is protected by App Check, other applicable protections, such as user
        /// authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase
        /// service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able
        /// to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App
        /// Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since
        /// there are no outdated clients in use. Possible values: ["UNENFORCED", "ENFORCED"]
        /// </summary>
        [Output("enforcementMode")]
        public Output<string?> EnforcementMode { get; private set; } = null!;

        /// <summary>
        /// The fully-qualified resource name of the service enforcement configuration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
        /// firebasestorage.googleapis.com (Cloud Storage for Firebase)
        /// firebasedatabase.googleapis.com (Firebase Realtime Database)
        /// firestore.googleapis.com (Cloud Firestore)
        /// identitytoolkit.googleapis.com (Authentication)
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;


        /// <summary>
        /// Create a AppCheckServiceConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppCheckServiceConfig(string name, AppCheckServiceConfigArgs args, CustomResourceOptions? options = null)
            : base("gcp:firebase/appCheckServiceConfig:AppCheckServiceConfig", name, args ?? new AppCheckServiceConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppCheckServiceConfig(string name, Input<string> id, AppCheckServiceConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/appCheckServiceConfig:AppCheckServiceConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppCheckServiceConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppCheckServiceConfig Get(string name, Input<string> id, AppCheckServiceConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new AppCheckServiceConfig(name, id, state, options);
        }
    }

    public sealed class AppCheckServiceConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The App Check enforcement mode for a service supported by App Check. Valid values are (Unset) Firebase App Check is not
        /// enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this
        /// mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this
        /// mode by default. This is equivalent to OFF in the REST API. Deleting the Terraform resource will also switch the
        /// enforcement to OFF for this service. UNENFORCED Firebase App Check is not enforced for the service. App Check metrics
        /// are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App
        /// Check in this mode, other applicable protections, such as user authorization, are still enforced. ENFORCED Firebase App
        /// Check is enforced for the service. The service will reject any request that attempts to access your project's resources
        /// if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some
        /// services will still allow requests bearing the developer's privileged service account credentials without an App Check
        /// token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor
        /// the composition of your callers. While the service is protected by App Check, other applicable protections, such as user
        /// authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase
        /// service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able
        /// to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App
        /// Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since
        /// there are no outdated clients in use. Possible values: ["UNENFORCED", "ENFORCED"]
        /// </summary>
        [Input("enforcementMode")]
        public Input<string>? EnforcementMode { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
        /// firebasestorage.googleapis.com (Cloud Storage for Firebase)
        /// firebasedatabase.googleapis.com (Firebase Realtime Database)
        /// firestore.googleapis.com (Cloud Firestore)
        /// identitytoolkit.googleapis.com (Authentication)
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public AppCheckServiceConfigArgs()
        {
        }
        public static new AppCheckServiceConfigArgs Empty => new AppCheckServiceConfigArgs();
    }

    public sealed class AppCheckServiceConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The App Check enforcement mode for a service supported by App Check. Valid values are (Unset) Firebase App Check is not
        /// enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this
        /// mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this
        /// mode by default. This is equivalent to OFF in the REST API. Deleting the Terraform resource will also switch the
        /// enforcement to OFF for this service. UNENFORCED Firebase App Check is not enforced for the service. App Check metrics
        /// are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App
        /// Check in this mode, other applicable protections, such as user authorization, are still enforced. ENFORCED Firebase App
        /// Check is enforced for the service. The service will reject any request that attempts to access your project's resources
        /// if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some
        /// services will still allow requests bearing the developer's privileged service account credentials without an App Check
        /// token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor
        /// the composition of your callers. While the service is protected by App Check, other applicable protections, such as user
        /// authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase
        /// service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able
        /// to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App
        /// Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since
        /// there are no outdated clients in use. Possible values: ["UNENFORCED", "ENFORCED"]
        /// </summary>
        [Input("enforcementMode")]
        public Input<string>? EnforcementMode { get; set; }

        /// <summary>
        /// The fully-qualified resource name of the service enforcement configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
        /// firebasestorage.googleapis.com (Cloud Storage for Firebase)
        /// firebasedatabase.googleapis.com (Firebase Realtime Database)
        /// firestore.googleapis.com (Cloud Firestore)
        /// identitytoolkit.googleapis.com (Authentication)
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        public AppCheckServiceConfigState()
        {
        }
        public static new AppCheckServiceConfigState Empty => new AppCheckServiceConfigState();
    }
}
