// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebase
{
    /// <summary>
    /// A debug token is a secret used during the development or integration testing of
    /// an app. It essentially allows the development or integration testing to bypass
    /// app attestation while still allowing App Check to enforce protection on supported
    /// production Firebase services.
    /// 
    /// To get more information about DebugToken, see:
    /// 
    /// * [API documentation](https://firebase.google.com/docs/reference/appcheck/rest/v1/projects.apps.debugTokens)
    /// * How-to Guides
    ///     * [Official Documentation](https://firebase.google.com/docs/app-check)
    /// 
    /// ## Example Usage
    /// 
    /// ### Firebase App Check Debug Token Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Firebase.WebApp("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         DisplayName = "Web App for debug token",
    ///     });
    /// 
    ///     // It takes a while for App Check to recognize the new app
    ///     // If your app already exists, you don't have to wait 30 seconds.
    ///     var wait30s = new Time.Index.Sleep("wait_30s", new()
    ///     {
    ///         CreateDuration = "30s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             @default,
    ///         },
    ///     });
    /// 
    ///     var defaultAppCheckDebugToken = new Gcp.Firebase.AppCheckDebugToken("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         AppId = @default.AppId,
    ///         DisplayName = "Debug Token",
    ///         Token = "00000000-AAAA-BBBB-CCCC-000000000000",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait30s,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DebugToken can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/apps/{{app_id}}/debugTokens/{{debug_token_id}}`
    /// 
    /// * `{{project}}/{{app_id}}/{{debug_token_id}}`
    /// 
    /// * `{{app_id}}/{{debug_token_id}}`
    /// 
    /// When using the `pulumi import` command, DebugToken can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appCheckDebugToken:AppCheckDebugToken default projects/{{project}}/apps/{{app_id}}/debugTokens/{{debug_token_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appCheckDebugToken:AppCheckDebugToken default {{project}}/{{app_id}}/{{debug_token_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appCheckDebugToken:AppCheckDebugToken default {{app_id}}/{{debug_token_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebase/appCheckDebugToken:AppCheckDebugToken")]
    public partial class AppCheckDebugToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of a
        /// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id),
        /// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id),
        /// or [Android App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.androidApps#AndroidApp.FIELDS.app_id)
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// The last segment of the resource name of the debug token.
        /// </summary>
        [Output("debugTokenId")]
        public Output<string> DebugTokenId { get; private set; } = null!;

        /// <summary>
        /// A human readable display name used to identify this debug token.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The secret token itself. Must be provided during creation, and must be a UUID4,
        /// case insensitive. You may use a method of your choice such as random/random_uuid
        /// to generate the token.
        /// This field is immutable once set, and cannot be updated. You can, however, delete
        /// this debug token to revoke it.
        /// For security reasons, this field will never be populated in any response.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;


        /// <summary>
        /// Create a AppCheckDebugToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppCheckDebugToken(string name, AppCheckDebugTokenArgs args, CustomResourceOptions? options = null)
            : base("gcp:firebase/appCheckDebugToken:AppCheckDebugToken", name, args ?? new AppCheckDebugTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppCheckDebugToken(string name, Input<string> id, AppCheckDebugTokenState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/appCheckDebugToken:AppCheckDebugToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppCheckDebugToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppCheckDebugToken Get(string name, Input<string> id, AppCheckDebugTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new AppCheckDebugToken(name, id, state, options);
        }
    }

    public sealed class AppCheckDebugTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of a
        /// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id),
        /// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id),
        /// or [Android App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.androidApps#AndroidApp.FIELDS.app_id)
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// A human readable display name used to identify this debug token.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("token", required: true)]
        private Input<string>? _token;

        /// <summary>
        /// The secret token itself. Must be provided during creation, and must be a UUID4,
        /// case insensitive. You may use a method of your choice such as random/random_uuid
        /// to generate the token.
        /// This field is immutable once set, and cannot be updated. You can, however, delete
        /// this debug token to revoke it.
        /// For security reasons, this field will never be populated in any response.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public AppCheckDebugTokenArgs()
        {
        }
        public static new AppCheckDebugTokenArgs Empty => new AppCheckDebugTokenArgs();
    }

    public sealed class AppCheckDebugTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of a
        /// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id),
        /// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id),
        /// or [Android App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.androidApps#AndroidApp.FIELDS.app_id)
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// The last segment of the resource name of the debug token.
        /// </summary>
        [Input("debugTokenId")]
        public Input<string>? DebugTokenId { get; set; }

        /// <summary>
        /// A human readable display name used to identify this debug token.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The secret token itself. Must be provided during creation, and must be a UUID4,
        /// case insensitive. You may use a method of your choice such as random/random_uuid
        /// to generate the token.
        /// This field is immutable once set, and cannot be updated. You can, however, delete
        /// this debug token to revoke it.
        /// For security reasons, this field will never be populated in any response.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public AppCheckDebugTokenState()
        {
        }
        public static new AppCheckDebugTokenState Empty => new AppCheckDebugTokenState();
    }
}
