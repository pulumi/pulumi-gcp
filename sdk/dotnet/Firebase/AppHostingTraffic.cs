// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebase
{
    /// <summary>
    /// Controls traffic configuration for a backend.
    /// 
    /// ## Example Usage
    /// 
    /// ### Firebase App Hosting Traffic Target
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //## Include these blocks only once per project if you are starting from scratch ###
    ///     var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    ///     {
    ///         Project = "my-project-name",
    ///         AccountId = "firebase-app-hosting-compute",
    ///         DisplayName = "Firebase App Hosting compute service account",
    ///         CreateIgnoreAlreadyExists = true,
    ///     });
    /// 
    ///     var fah = new Gcp.Projects.Service("fah", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceName = "firebaseapphosting.googleapis.com",
    ///     });
    /// 
    ///     var exampleAppHostingBackend = new Gcp.Firebase.AppHostingBackend("example", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "asia-east1",
    ///         BackendId = "traffic-tg",
    ///         AppId = "1:0000000000:web:674cde32020e16fbce9dbd",
    ///         ServingLocality = "GLOBAL_ACCESS",
    ///         ServiceAccount = serviceAccount.Email,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             fah,
    ///         },
    ///     });
    /// 
    ///     var exampleAppHostingBuild = new Gcp.Firebase.AppHostingBuild("example", new()
    ///     {
    ///         Project = exampleAppHostingBackend.Project,
    ///         Location = exampleAppHostingBackend.Location,
    ///         Backend = exampleAppHostingBackend.BackendId,
    ///         BuildId = "target-build",
    ///         Source = new Gcp.Firebase.Inputs.AppHostingBuildSourceArgs
    ///         {
    ///             Container = new Gcp.Firebase.Inputs.AppHostingBuildSourceContainerArgs
    ///             {
    ///                 Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.Firebase.AppHostingTraffic("example", new()
    ///     {
    ///         Project = exampleAppHostingBackend.Project,
    ///         Location = exampleAppHostingBackend.Location,
    ///         Backend = exampleAppHostingBackend.BackendId,
    ///         Target = new Gcp.Firebase.Inputs.AppHostingTrafficTargetArgs
    ///         {
    ///             Splits = new[]
    ///             {
    ///                 new Gcp.Firebase.Inputs.AppHostingTrafficTargetSplitArgs
    ///                 {
    ///                     Build = exampleAppHostingBuild.Name,
    ///                     Percent = 100,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var appHostingSaRunner = new Gcp.Projects.IAMMember("app_hosting_sa_runner", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/firebaseapphosting.computeRunner",
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebase App Hosting Traffic Rollout Policy
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //## Include these blocks only once per project if you are starting from scratch ###
    ///     var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    ///     {
    ///         Project = "my-project-name",
    ///         AccountId = "firebase-app-hosting-compute",
    ///         DisplayName = "Firebase App Hosting compute service account",
    ///         CreateIgnoreAlreadyExists = true,
    ///     });
    /// 
    ///     var fah = new Gcp.Projects.Service("fah", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceName = "firebaseapphosting.googleapis.com",
    ///     });
    /// 
    ///     var exampleAppHostingBackend = new Gcp.Firebase.AppHostingBackend("example", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "asia-east1",
    ///         BackendId = "traffic-rp",
    ///         AppId = "1:0000000000:web:674cde32020e16fbce9dbd",
    ///         ServingLocality = "GLOBAL_ACCESS",
    ///         ServiceAccount = serviceAccount.Email,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             fah,
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.Firebase.AppHostingTraffic("example", new()
    ///     {
    ///         Project = exampleAppHostingBackend.Project,
    ///         Location = exampleAppHostingBackend.Location,
    ///         Backend = exampleAppHostingBackend.BackendId,
    ///         RolloutPolicy = new Gcp.Firebase.Inputs.AppHostingTrafficRolloutPolicyArgs
    ///         {
    ///             CodebaseBranch = "main",
    ///         },
    ///     });
    /// 
    ///     var appHostingSaRunner = new Gcp.Projects.IAMMember("app_hosting_sa_runner", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/firebaseapphosting.computeRunner",
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebase App Hosting Traffic Rollout Policy Disabled
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //## Include these blocks only once per project if you are starting from scratch ###
    ///     var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    ///     {
    ///         Project = "my-project-name",
    ///         AccountId = "firebase-app-hosting-compute",
    ///         DisplayName = "Firebase App Hosting compute service account",
    ///         CreateIgnoreAlreadyExists = true,
    ///     });
    /// 
    ///     var fah = new Gcp.Projects.Service("fah", new()
    ///     {
    ///         Project = "my-project-name",
    ///         ServiceName = "firebaseapphosting.googleapis.com",
    ///     });
    /// 
    ///     var exampleAppHostingBackend = new Gcp.Firebase.AppHostingBackend("example", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Location = "asia-east1",
    ///         BackendId = "traffic-rpd",
    ///         AppId = "1:0000000000:web:674cde32020e16fbce9dbd",
    ///         ServingLocality = "GLOBAL_ACCESS",
    ///         ServiceAccount = serviceAccount.Email,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             fah,
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.Firebase.AppHostingTraffic("example", new()
    ///     {
    ///         Project = exampleAppHostingBackend.Project,
    ///         Location = exampleAppHostingBackend.Location,
    ///         Backend = exampleAppHostingBackend.BackendId,
    ///         RolloutPolicy = new Gcp.Firebase.Inputs.AppHostingTrafficRolloutPolicyArgs
    ///         {
    ///             Disabled = true,
    ///             CodebaseBranch = "main",
    ///         },
    ///     });
    /// 
    ///     var appHostingSaRunner = new Gcp.Projects.IAMMember("app_hosting_sa_runner", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/firebaseapphosting.computeRunner",
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Traffic can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic`
    /// 
    /// * `{{project}}/{{location}}/{{backend}}`
    /// 
    /// * `{{location}}/{{backend}}`
    /// 
    /// When using the `pulumi import` command, Traffic can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appHostingTraffic:AppHostingTraffic default projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appHostingTraffic:AppHostingTraffic default {{project}}/{{location}}/{{backend}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/appHostingTraffic:AppHostingTraffic default {{location}}/{{backend}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebase/appHostingTraffic:AppHostingTraffic")]
    public partial class AppHostingTraffic : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Id of the backend that this Traffic config applies to
        /// </summary>
        [Output("backend")]
        public Output<string> Backend { get; private set; } = null!;

        /// <summary>
        /// Time at which the backend was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Current state of traffic allocation for the backend.
        /// When setting `target`, this field may differ for some time until the desired state is reached.
        /// Structure is documented below.
        /// </summary>
        [Output("currents")]
        public Output<ImmutableArray<Outputs.AppHostingTrafficCurrent>> Currents { get; private set; } = null!;

        /// <summary>
        /// Time at which the backend was deleted.
        /// </summary>
        [Output("deleteTime")]
        public Output<string> DeleteTime { get; private set; } = null!;

        /// <summary>
        /// Server-computed checksum based on other values; may be sent
        /// on update or delete to ensure operation is done on expected resource.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The location the Backend that this Traffic config applies to
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Identifier. The resource name of the backend traffic config
        /// Format:
        /// `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The policy for how builds and rollouts are triggered and rolled out.
        /// Structure is documented below.
        /// </summary>
        [Output("rolloutPolicy")]
        public Output<Outputs.AppHostingTrafficRolloutPolicy?> RolloutPolicy { get; private set; } = null!;

        /// <summary>
        /// Set to manually control the desired traffic for the backend. This will
        /// cause current to eventually match this value. The percentages must add
        /// up to 100.
        /// Structure is documented below.
        /// </summary>
        [Output("target")]
        public Output<Outputs.AppHostingTrafficTarget?> Target { get; private set; } = null!;

        /// <summary>
        /// System-assigned, unique identifier.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Time at which the backend was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a AppHostingTraffic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppHostingTraffic(string name, AppHostingTrafficArgs args, CustomResourceOptions? options = null)
            : base("gcp:firebase/appHostingTraffic:AppHostingTraffic", name, args ?? new AppHostingTrafficArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppHostingTraffic(string name, Input<string> id, AppHostingTrafficState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/appHostingTraffic:AppHostingTraffic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppHostingTraffic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppHostingTraffic Get(string name, Input<string> id, AppHostingTrafficState? state = null, CustomResourceOptions? options = null)
        {
            return new AppHostingTraffic(name, id, state, options);
        }
    }

    public sealed class AppHostingTrafficArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the backend that this Traffic config applies to
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// The location the Backend that this Traffic config applies to
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The policy for how builds and rollouts are triggered and rolled out.
        /// Structure is documented below.
        /// </summary>
        [Input("rolloutPolicy")]
        public Input<Inputs.AppHostingTrafficRolloutPolicyArgs>? RolloutPolicy { get; set; }

        /// <summary>
        /// Set to manually control the desired traffic for the backend. This will
        /// cause current to eventually match this value. The percentages must add
        /// up to 100.
        /// Structure is documented below.
        /// </summary>
        [Input("target")]
        public Input<Inputs.AppHostingTrafficTargetArgs>? Target { get; set; }

        public AppHostingTrafficArgs()
        {
        }
        public static new AppHostingTrafficArgs Empty => new AppHostingTrafficArgs();
    }

    public sealed class AppHostingTrafficState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the backend that this Traffic config applies to
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// Time at which the backend was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("currents")]
        private InputList<Inputs.AppHostingTrafficCurrentGetArgs>? _currents;

        /// <summary>
        /// Current state of traffic allocation for the backend.
        /// When setting `target`, this field may differ for some time until the desired state is reached.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AppHostingTrafficCurrentGetArgs> Currents
        {
            get => _currents ?? (_currents = new InputList<Inputs.AppHostingTrafficCurrentGetArgs>());
            set => _currents = value;
        }

        /// <summary>
        /// Time at which the backend was deleted.
        /// </summary>
        [Input("deleteTime")]
        public Input<string>? DeleteTime { get; set; }

        /// <summary>
        /// Server-computed checksum based on other values; may be sent
        /// on update or delete to ensure operation is done on expected resource.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The location the Backend that this Traffic config applies to
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier. The resource name of the backend traffic config
        /// Format:
        /// `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The policy for how builds and rollouts are triggered and rolled out.
        /// Structure is documented below.
        /// </summary>
        [Input("rolloutPolicy")]
        public Input<Inputs.AppHostingTrafficRolloutPolicyGetArgs>? RolloutPolicy { get; set; }

        /// <summary>
        /// Set to manually control the desired traffic for the backend. This will
        /// cause current to eventually match this value. The percentages must add
        /// up to 100.
        /// Structure is documented below.
        /// </summary>
        [Input("target")]
        public Input<Inputs.AppHostingTrafficTargetGetArgs>? Target { get; set; }

        /// <summary>
        /// System-assigned, unique identifier.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Time at which the backend was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public AppHostingTrafficState()
        {
        }
        public static new AppHostingTrafficState Empty => new AppHostingTrafficState();
    }
}
