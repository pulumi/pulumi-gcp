// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Firebase
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Firebasehosting Customdomain Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Firebase.HostingCustomDomain("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = "site-id",
    ///         CustomDomain = "custom.domain.com",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebasehosting Customdomain Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Firebase.HostingSite("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = "site-id-full",
    ///     });
    /// 
    ///     var defaultHostingCustomDomain = new Gcp.Firebase.HostingCustomDomain("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = @default.SiteId,
    ///         CustomDomain = "source.domain.com",
    ///         CertPreference = "GROUPED",
    ///         RedirectTarget = "destination.domain.com",
    ///         WaitDnsVerification = false,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Firebasehosting Customdomain Cloud Run
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Firebase.HostingSite("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = "site-id",
    ///     });
    /// 
    ///     var defaultService = new Gcp.CloudRunV2.Service("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Name = "cloud-run-service-via-hosting",
    ///         Location = "us-central1",
    ///         Ingress = "INGRESS_TRAFFIC_ALL",
    ///         Template = new Gcp.CloudRunV2.Inputs.ServiceTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                 },
    ///             },
    ///         },
    ///         DeletionProtection = true,
    ///     });
    /// 
    ///     var defaultHostingVersion = new Gcp.Firebase.HostingVersion("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         Config = new Gcp.Firebase.Inputs.HostingVersionConfigArgs
    ///         {
    ///             Rewrites = new[]
    ///             {
    ///                 new Gcp.Firebase.Inputs.HostingVersionConfigRewriteArgs
    ///                 {
    ///                     Glob = "/hello/**",
    ///                     Run = new Gcp.Firebase.Inputs.HostingVersionConfigRewriteRunArgs
    ///                     {
    ///                         ServiceId = defaultService.Name,
    ///                         Region = defaultService.Location,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultHostingRelease = new Gcp.Firebase.HostingRelease("default", new()
    ///     {
    ///         SiteId = @default.SiteId,
    ///         VersionName = defaultHostingVersion.Name,
    ///         Message = "Cloud Run Integration",
    ///     });
    /// 
    ///     var defaultHostingCustomDomain = new Gcp.Firebase.HostingCustomDomain("default", new()
    ///     {
    ///         Project = "my-project-name",
    ///         SiteId = @default.SiteId,
    ///         CustomDomain = "run.custom.domain.com",
    ///         WaitDnsVerification = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// CustomDomain can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/sites/{{site_id}}/customDomains/{{custom_domain}}`
    /// 
    /// * `sites/{{site_id}}/customDomains/{{custom_domain}}`
    /// 
    /// * `{{project}}/{{site_id}}/{{custom_domain}}`
    /// 
    /// * `{{site_id}}/{{custom_domain}}`
    /// 
    /// When using the `pulumi import` command, CustomDomain can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/hostingCustomDomain:HostingCustomDomain default projects/{{project}}/sites/{{site_id}}/customDomains/{{custom_domain}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/hostingCustomDomain:HostingCustomDomain default sites/{{site_id}}/customDomains/{{custom_domain}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/hostingCustomDomain:HostingCustomDomain default {{project}}/{{site_id}}/{{custom_domain}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:firebase/hostingCustomDomain:HostingCustomDomain default {{site_id}}/{{custom_domain}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:firebase/hostingCustomDomain:HostingCustomDomain")]
    public partial class HostingCustomDomain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A field that lets you specify which SSL certificate type Hosting creates
        /// for your domain name. Spark plan `CustomDomain`s only have access to the
        /// `GROUPED` cert type, while Blaze plan can select any option.
        /// Possible values are: `GROUPED`, `PROJECT_GROUPED`, `DEDICATED`.
        /// </summary>
        [Output("certPreference")]
        public Output<string> CertPreference { get; private set; } = null!;

        /// <summary>
        /// The SSL certificate Hosting has for this `CustomDomain`'s domain name.
        /// For new `CustomDomain`s, this often represents Hosting's intent to create
        /// a certificate, rather than an actual cert. Check the `state` field for
        /// more.
        /// Structure is documented below.
        /// </summary>
        [Output("certs")]
        public Output<ImmutableArray<Outputs.HostingCustomDomainCert>> Certs { get; private set; } = null!;

        /// <summary>
        /// The `CustomDomain`'s create time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
        /// </summary>
        [Output("customDomain")]
        public Output<string> CustomDomain { get; private set; } = null!;

        /// <summary>
        /// The time the `CustomDomain` was deleted; null for `CustomDomains` that
        /// haven't been deleted. Deleted `CustomDomains` persist for approximately 30
        /// days, after which time Hosting removes them completely.
        /// </summary>
        [Output("deleteTime")]
        public Output<string> DeleteTime { get; private set; } = null!;

        /// <summary>
        /// A string that represents the current state of the `CustomDomain` and
        /// allows you to confirm its initial state in requests that would modify it.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The minimum time before a soft-deleted `CustomDomain` is completely removed
        /// from Hosting; null for `CustomDomains` that haven't been deleted.
        /// </summary>
        [Output("expireTime")]
        public Output<string> ExpireTime { get; private set; } = null!;

        /// <summary>
        /// The host state of your domain name. Host state is determined by checking each
        /// IP address associated with your domain name to see if it's serving
        /// Hosting content.
        /// HOST_UNHOSTED:
        /// Your `CustomDomain`'s domain name isn't associated with any IP addresses.
        /// HOST_UNREACHABLE:
        /// Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
        /// queries to find your domain name's IP addresses resulted in errors. See
        /// your `CustomDomain`'s `issues` field for more details.
        /// HOST_MISMATCH:
        /// Your `CustomDomain`'s domain name has IP addresses that don't ultimately
        /// resolve to Hosting.
        /// HOST_CONFLICT:
        /// Your `CustomDomain`'s domain name has IP addresses that resolve to both
        /// Hosting and other services. To ensure consistent results, remove `A` and
        /// `AAAA` records related to non-Hosting services.
        /// HOST_ACTIVE:
        /// All requests against your `CustomDomain`'s domain name are served by
        /// Hosting. If the `CustomDomain`'s `OwnershipState` is also `ACTIVE`, Hosting
        /// serves your Hosting Site's content on the domain name.
        /// </summary>
        [Output("hostState")]
        public Output<string> HostState { get; private set; } = null!;

        /// <summary>
        /// A set of errors Hosting systems encountered when trying to establish
        /// Hosting's ability to serve secure content for your domain name. Resolve
        /// these issues to ensure your `CustomDomain` behaves properly.
        /// Structure is documented below.
        /// </summary>
        [Output("issues")]
        public Output<ImmutableArray<Outputs.HostingCustomDomainIssue>> Issues { get; private set; } = null!;

        /// <summary>
        /// The fully-qualified name of the `CustomDomain`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ownership state of your domain name. Ownership is determined at a
        /// Firebase project level, and established by adding `TXT` records to your
        /// domain name's DNS records.
        /// Ownership cascades to subdomains. Granting a project ownership of `foo.com`
        /// also grants that project ownership over `bar.foo.com`, unless you add
        /// specific `TXT` records to `bar.foo.com` that grant a different project
        /// ownership.
        /// If your `CustomDomain` is in an `OwnershipState` other than
        /// `OWNERSHIP_ACTIVE` for more than 30 days and it hasn't been updated in at
        /// least 30 days, Hosting's ownership systems delete the `CustomDomain`.
        /// OWNERSHIP_MISSING:
        /// Your `CustomDomain`'s domain name has no Hosting-related ownership records;
        /// no Firebase project has permission to act on the domain name's behalf.
        /// OWNERSHIP_UNREACHABLE:
        /// Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
        /// queries to find your domain name's ownership records resulted in errors.
        /// See your `CustomDomain`'s `issues` field for more details.
        /// OWNERSHIP_MISMATCH:
        /// Your `CustomDomain`'s domain name is owned by another Firebase project.
        /// Remove the conflicting `TXT` records and replace them with project-specific
        /// records for your current Firebase project.
        /// OWNERSHIP_CONFLICT:
        /// Your `CustomDomain`'s domain name has conflicting `TXT` records that
        /// indicate ownership by both your current Firebase project and another
        /// project. Remove the other project's ownership records to grant the current
        /// project ownership.
        /// OWNERSHIP_PENDING:
        /// Your `CustomDomain`'s DNS records are configured correctly. Hosting will
        /// transfer ownership of your domain to this `CustomDomain` within 24 hours.
        /// OWNERSHIP_ACTIVE:
        /// Your `CustomDomain`'s domain name has `TXT` records that grant its project
        /// permission to act on its behalf.
        /// </summary>
        [Output("ownershipState")]
        public Output<string> OwnershipState { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// if true, indicates that Hosting's systems are attempting to
        /// make the `CustomDomain`'s state match your preferred state. This is most
        /// frequently `true` when initially provisioning a `CustomDomain` or when creating
        /// a new SSL certificate to match an updated `cert_preference`
        /// </summary>
        [Output("reconciling")]
        public Output<bool> Reconciling { get; private set; } = null!;

        /// <summary>
        /// A domain name that this CustomDomain should direct traffic towards. If
        /// specified, Hosting will respond to requests against this CustomDomain
        /// with an HTTP 301 code, and route traffic to the specified `redirect_target`
        /// instead.
        /// </summary>
        [Output("redirectTarget")]
        public Output<string?> RedirectTarget { get; private set; } = null!;

        /// <summary>
        /// A set of updates you should make to the domain name's DNS records to
        /// let Hosting serve secure content on its behalf.
        /// Structure is documented below.
        /// </summary>
        [Output("requiredDnsUpdates")]
        public Output<ImmutableArray<Outputs.HostingCustomDomainRequiredDnsUpdate>> RequiredDnsUpdates { get; private set; } = null!;

        /// <summary>
        /// The ID of the site in which to create this custom domain association.
        /// </summary>
        [Output("siteId")]
        public Output<string> SiteId { get; private set; } = null!;

        /// <summary>
        /// The last time the `CustomDomain` was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        [Output("waitDnsVerification")]
        public Output<bool?> WaitDnsVerification { get; private set; } = null!;


        /// <summary>
        /// Create a HostingCustomDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HostingCustomDomain(string name, HostingCustomDomainArgs args, CustomResourceOptions? options = null)
            : base("gcp:firebase/hostingCustomDomain:HostingCustomDomain", name, args ?? new HostingCustomDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HostingCustomDomain(string name, Input<string> id, HostingCustomDomainState? state = null, CustomResourceOptions? options = null)
            : base("gcp:firebase/hostingCustomDomain:HostingCustomDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HostingCustomDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HostingCustomDomain Get(string name, Input<string> id, HostingCustomDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new HostingCustomDomain(name, id, state, options);
        }
    }

    public sealed class HostingCustomDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A field that lets you specify which SSL certificate type Hosting creates
        /// for your domain name. Spark plan `CustomDomain`s only have access to the
        /// `GROUPED` cert type, while Blaze plan can select any option.
        /// Possible values are: `GROUPED`, `PROJECT_GROUPED`, `DEDICATED`.
        /// </summary>
        [Input("certPreference")]
        public Input<string>? CertPreference { get; set; }

        /// <summary>
        /// The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
        /// </summary>
        [Input("customDomain", required: true)]
        public Input<string> CustomDomain { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A domain name that this CustomDomain should direct traffic towards. If
        /// specified, Hosting will respond to requests against this CustomDomain
        /// with an HTTP 301 code, and route traffic to the specified `redirect_target`
        /// instead.
        /// </summary>
        [Input("redirectTarget")]
        public Input<string>? RedirectTarget { get; set; }

        /// <summary>
        /// The ID of the site in which to create this custom domain association.
        /// </summary>
        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        [Input("waitDnsVerification")]
        public Input<bool>? WaitDnsVerification { get; set; }

        public HostingCustomDomainArgs()
        {
        }
        public static new HostingCustomDomainArgs Empty => new HostingCustomDomainArgs();
    }

    public sealed class HostingCustomDomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A field that lets you specify which SSL certificate type Hosting creates
        /// for your domain name. Spark plan `CustomDomain`s only have access to the
        /// `GROUPED` cert type, while Blaze plan can select any option.
        /// Possible values are: `GROUPED`, `PROJECT_GROUPED`, `DEDICATED`.
        /// </summary>
        [Input("certPreference")]
        public Input<string>? CertPreference { get; set; }

        [Input("certs")]
        private InputList<Inputs.HostingCustomDomainCertGetArgs>? _certs;

        /// <summary>
        /// The SSL certificate Hosting has for this `CustomDomain`'s domain name.
        /// For new `CustomDomain`s, this often represents Hosting's intent to create
        /// a certificate, rather than an actual cert. Check the `state` field for
        /// more.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.HostingCustomDomainCertGetArgs> Certs
        {
            get => _certs ?? (_certs = new InputList<Inputs.HostingCustomDomainCertGetArgs>());
            set => _certs = value;
        }

        /// <summary>
        /// The `CustomDomain`'s create time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
        /// </summary>
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        /// <summary>
        /// The time the `CustomDomain` was deleted; null for `CustomDomains` that
        /// haven't been deleted. Deleted `CustomDomains` persist for approximately 30
        /// days, after which time Hosting removes them completely.
        /// </summary>
        [Input("deleteTime")]
        public Input<string>? DeleteTime { get; set; }

        /// <summary>
        /// A string that represents the current state of the `CustomDomain` and
        /// allows you to confirm its initial state in requests that would modify it.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The minimum time before a soft-deleted `CustomDomain` is completely removed
        /// from Hosting; null for `CustomDomains` that haven't been deleted.
        /// </summary>
        [Input("expireTime")]
        public Input<string>? ExpireTime { get; set; }

        /// <summary>
        /// The host state of your domain name. Host state is determined by checking each
        /// IP address associated with your domain name to see if it's serving
        /// Hosting content.
        /// HOST_UNHOSTED:
        /// Your `CustomDomain`'s domain name isn't associated with any IP addresses.
        /// HOST_UNREACHABLE:
        /// Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
        /// queries to find your domain name's IP addresses resulted in errors. See
        /// your `CustomDomain`'s `issues` field for more details.
        /// HOST_MISMATCH:
        /// Your `CustomDomain`'s domain name has IP addresses that don't ultimately
        /// resolve to Hosting.
        /// HOST_CONFLICT:
        /// Your `CustomDomain`'s domain name has IP addresses that resolve to both
        /// Hosting and other services. To ensure consistent results, remove `A` and
        /// `AAAA` records related to non-Hosting services.
        /// HOST_ACTIVE:
        /// All requests against your `CustomDomain`'s domain name are served by
        /// Hosting. If the `CustomDomain`'s `OwnershipState` is also `ACTIVE`, Hosting
        /// serves your Hosting Site's content on the domain name.
        /// </summary>
        [Input("hostState")]
        public Input<string>? HostState { get; set; }

        [Input("issues")]
        private InputList<Inputs.HostingCustomDomainIssueGetArgs>? _issues;

        /// <summary>
        /// A set of errors Hosting systems encountered when trying to establish
        /// Hosting's ability to serve secure content for your domain name. Resolve
        /// these issues to ensure your `CustomDomain` behaves properly.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.HostingCustomDomainIssueGetArgs> Issues
        {
            get => _issues ?? (_issues = new InputList<Inputs.HostingCustomDomainIssueGetArgs>());
            set => _issues = value;
        }

        /// <summary>
        /// The fully-qualified name of the `CustomDomain`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ownership state of your domain name. Ownership is determined at a
        /// Firebase project level, and established by adding `TXT` records to your
        /// domain name's DNS records.
        /// Ownership cascades to subdomains. Granting a project ownership of `foo.com`
        /// also grants that project ownership over `bar.foo.com`, unless you add
        /// specific `TXT` records to `bar.foo.com` that grant a different project
        /// ownership.
        /// If your `CustomDomain` is in an `OwnershipState` other than
        /// `OWNERSHIP_ACTIVE` for more than 30 days and it hasn't been updated in at
        /// least 30 days, Hosting's ownership systems delete the `CustomDomain`.
        /// OWNERSHIP_MISSING:
        /// Your `CustomDomain`'s domain name has no Hosting-related ownership records;
        /// no Firebase project has permission to act on the domain name's behalf.
        /// OWNERSHIP_UNREACHABLE:
        /// Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
        /// queries to find your domain name's ownership records resulted in errors.
        /// See your `CustomDomain`'s `issues` field for more details.
        /// OWNERSHIP_MISMATCH:
        /// Your `CustomDomain`'s domain name is owned by another Firebase project.
        /// Remove the conflicting `TXT` records and replace them with project-specific
        /// records for your current Firebase project.
        /// OWNERSHIP_CONFLICT:
        /// Your `CustomDomain`'s domain name has conflicting `TXT` records that
        /// indicate ownership by both your current Firebase project and another
        /// project. Remove the other project's ownership records to grant the current
        /// project ownership.
        /// OWNERSHIP_PENDING:
        /// Your `CustomDomain`'s DNS records are configured correctly. Hosting will
        /// transfer ownership of your domain to this `CustomDomain` within 24 hours.
        /// OWNERSHIP_ACTIVE:
        /// Your `CustomDomain`'s domain name has `TXT` records that grant its project
        /// permission to act on its behalf.
        /// </summary>
        [Input("ownershipState")]
        public Input<string>? OwnershipState { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// if true, indicates that Hosting's systems are attempting to
        /// make the `CustomDomain`'s state match your preferred state. This is most
        /// frequently `true` when initially provisioning a `CustomDomain` or when creating
        /// a new SSL certificate to match an updated `cert_preference`
        /// </summary>
        [Input("reconciling")]
        public Input<bool>? Reconciling { get; set; }

        /// <summary>
        /// A domain name that this CustomDomain should direct traffic towards. If
        /// specified, Hosting will respond to requests against this CustomDomain
        /// with an HTTP 301 code, and route traffic to the specified `redirect_target`
        /// instead.
        /// </summary>
        [Input("redirectTarget")]
        public Input<string>? RedirectTarget { get; set; }

        [Input("requiredDnsUpdates")]
        private InputList<Inputs.HostingCustomDomainRequiredDnsUpdateGetArgs>? _requiredDnsUpdates;

        /// <summary>
        /// A set of updates you should make to the domain name's DNS records to
        /// let Hosting serve secure content on its behalf.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.HostingCustomDomainRequiredDnsUpdateGetArgs> RequiredDnsUpdates
        {
            get => _requiredDnsUpdates ?? (_requiredDnsUpdates = new InputList<Inputs.HostingCustomDomainRequiredDnsUpdateGetArgs>());
            set => _requiredDnsUpdates = value;
        }

        /// <summary>
        /// The ID of the site in which to create this custom domain association.
        /// </summary>
        [Input("siteId")]
        public Input<string>? SiteId { get; set; }

        /// <summary>
        /// The last time the `CustomDomain` was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        [Input("waitDnsVerification")]
        public Input<bool>? WaitDnsVerification { get; set; }

        public HostingCustomDomainState()
        {
        }
        public static new HostingCustomDomainState Empty => new HostingCustomDomainState();
    }
}
