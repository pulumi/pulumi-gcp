// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Sql
{
    /// <summary>
    /// ## Example Usage
    /// ### Sql Source Representation Instance Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Sql.SourceRepresentationInstance("instance", new()
    ///     {
    ///         DatabaseVersion = "MYSQL_8_0",
    ///         DumpFilePath = "gs://replica-bucket/source-database.sql.gz",
    ///         Host = "10.20.30.40",
    ///         Password = "password-for-the-user",
    ///         Port = 3306,
    ///         Region = "us-central1",
    ///         Username = "some-user",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SourceRepresentationInstance can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance default projects/{{project}}/instances/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance")]
    public partial class SourceRepresentationInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
        /// </summary>
        [Output("caCertificate")]
        public Output<string?> CaCertificate { get; private set; } = null!;

        /// <summary>
        /// The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
        /// </summary>
        [Output("clientCertificate")]
        public Output<string?> ClientCertificate { get; private set; } = null!;

        /// <summary>
        /// The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
        /// </summary>
        [Output("clientKey")]
        public Output<string?> ClientKey { get; private set; } = null!;

        /// <summary>
        /// The MySQL version running on your source database server.
        /// Possible values are `MYSQL_5_5`, `MYSQL_5_6`, `MYSQL_5_7`, and `MYSQL_8_0`.
        /// </summary>
        [Output("databaseVersion")]
        public Output<string> DatabaseVersion { get; private set; } = null!;

        /// <summary>
        /// A file in the bucket that contains the data from the external server.
        /// </summary>
        [Output("dumpFilePath")]
        public Output<string?> DumpFilePath { get; private set; } = null!;

        /// <summary>
        /// The externally accessible IPv4 address for the source database server.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// The name of the source representation instance. Use any valid Cloud SQL instance name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The password for the replication user account.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The externally accessible port for the source database server.
        /// Defaults to 3306.
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The Region in which the created instance should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The replication user account on the external server.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a SourceRepresentationInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourceRepresentationInstance(string name, SourceRepresentationInstanceArgs args, CustomResourceOptions? options = null)
            : base("gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance", name, args ?? new SourceRepresentationInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SourceRepresentationInstance(string name, Input<string> id, SourceRepresentationInstanceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourceRepresentationInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourceRepresentationInstance Get(string name, Input<string> id, SourceRepresentationInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new SourceRepresentationInstance(name, id, state, options);
        }
    }

    public sealed class SourceRepresentationInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
        /// </summary>
        [Input("caCertificate")]
        public Input<string>? CaCertificate { get; set; }

        /// <summary>
        /// The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
        /// </summary>
        [Input("clientCertificate")]
        public Input<string>? ClientCertificate { get; set; }

        /// <summary>
        /// The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// The MySQL version running on your source database server.
        /// Possible values are `MYSQL_5_5`, `MYSQL_5_6`, `MYSQL_5_7`, and `MYSQL_8_0`.
        /// </summary>
        [Input("databaseVersion", required: true)]
        public Input<string> DatabaseVersion { get; set; } = null!;

        /// <summary>
        /// A file in the bucket that contains the data from the external server.
        /// </summary>
        [Input("dumpFilePath")]
        public Input<string>? DumpFilePath { get; set; }

        /// <summary>
        /// The externally accessible IPv4 address for the source database server.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The name of the source representation instance. Use any valid Cloud SQL instance name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password for the replication user account.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The externally accessible port for the source database server.
        /// Defaults to 3306.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Region in which the created instance should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The replication user account on the external server.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public SourceRepresentationInstanceArgs()
        {
        }
        public static new SourceRepresentationInstanceArgs Empty => new SourceRepresentationInstanceArgs();
    }

    public sealed class SourceRepresentationInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
        /// </summary>
        [Input("caCertificate")]
        public Input<string>? CaCertificate { get; set; }

        /// <summary>
        /// The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
        /// </summary>
        [Input("clientCertificate")]
        public Input<string>? ClientCertificate { get; set; }

        /// <summary>
        /// The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// The MySQL version running on your source database server.
        /// Possible values are `MYSQL_5_5`, `MYSQL_5_6`, `MYSQL_5_7`, and `MYSQL_8_0`.
        /// </summary>
        [Input("databaseVersion")]
        public Input<string>? DatabaseVersion { get; set; }

        /// <summary>
        /// A file in the bucket that contains the data from the external server.
        /// </summary>
        [Input("dumpFilePath")]
        public Input<string>? DumpFilePath { get; set; }

        /// <summary>
        /// The externally accessible IPv4 address for the source database server.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// The name of the source representation instance. Use any valid Cloud SQL instance name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password for the replication user account.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The externally accessible port for the source database server.
        /// Defaults to 3306.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Region in which the created instance should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The replication user account on the external server.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public SourceRepresentationInstanceState()
        {
        }
        public static new SourceRepresentationInstanceState Empty => new SourceRepresentationInstanceState();
    }
}
