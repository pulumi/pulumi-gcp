// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Sql.Outputs
{

    [OutputType]
    public sealed class GetDatabaseInstanceSettingResult
    {
        /// <summary>
        /// This specifies when the instance should be active. Can be either ALWAYS, NEVER or ON_DEMAND.
        /// </summary>
        public readonly string ActivationPolicy;
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceSettingActiveDirectoryConfigResult> ActiveDirectoryConfigs;
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceSettingAdvancedMachineFeatureResult> AdvancedMachineFeatures;
        /// <summary>
        /// The availability type of the Cloud SQL instance, high availability
        /// (REGIONAL) or single zone (ZONAL). For all instances, ensure that
        /// settings.backup_configuration.enabled is set to true.
        /// For MySQL instances, ensure that settings.backup_configuration.binary_log_enabled is set to true.
        /// For Postgres instances, ensure that settings.backup_configuration.point_in_time_recovery_enabled
        /// is set to true. Defaults to ZONAL.
        /// </summary>
        public readonly string AvailabilityType;
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceSettingBackupConfigurationResult> BackupConfigurations;
        /// <summary>
        /// The name of server instance collation.
        /// </summary>
        public readonly string Collation;
        /// <summary>
        /// Specifies if connections must use Cloud SQL connectors.
        /// </summary>
        public readonly string ConnectorEnforcement;
        /// <summary>
        /// Data cache configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceSettingDataCacheConfigResult> DataCacheConfigs;
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceSettingDatabaseFlagResult> DatabaseFlags;
        /// <summary>
        /// Configuration to protect against accidental instance deletion.
        /// </summary>
        public readonly bool DeletionProtectionEnabled;
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceSettingDenyMaintenancePeriodResult> DenyMaintenancePeriods;
        /// <summary>
        /// Enables auto-resizing of the storage size. Defaults to true.
        /// </summary>
        public readonly bool DiskAutoresize;
        /// <summary>
        /// The maximum size, in GB, to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
        /// </summary>
        public readonly int DiskAutoresizeLimit;
        /// <summary>
        /// The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.
        /// </summary>
        public readonly int DiskSize;
        /// <summary>
        /// The type of data disk: PD_SSD or PD_HDD. Defaults to PD_SSD.
        /// </summary>
        public readonly string DiskType;
        /// <summary>
        /// The edition of the instance, can be ENTERPRISE or ENTERPRISE_PLUS.
        /// </summary>
        public readonly string Edition;
        /// <summary>
        /// Enables Vertex AI Integration.
        /// </summary>
        public readonly bool EnableGoogleMlIntegration;
        /// <summary>
        /// Configuration of Query Insights.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceSettingInsightsConfigResult> InsightsConfigs;
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceSettingIpConfigurationResult> IpConfigurations;
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceSettingLocationPreferenceResult> LocationPreferences;
        /// <summary>
        /// Declares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceSettingMaintenanceWindowResult> MaintenanceWindows;
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceSettingPasswordValidationPolicyResult> PasswordValidationPolicies;
        /// <summary>
        /// Pricing plan for this instance, can only be PER_USE.
        /// </summary>
        public readonly string PricingPlan;
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceSettingSqlServerAuditConfigResult> SqlServerAuditConfigs;
        /// <summary>
        /// The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types, and custom machine types such as db-custom-2-13312. See the Custom Machine Type Documentation to learn about specifying custom machine types.
        /// </summary>
        public readonly string Tier;
        /// <summary>
        /// The time_zone to be used by the database engine (supported only for SQL Server), in SQL Server timezone format.
        /// </summary>
        public readonly string TimeZone;
        /// <summary>
        /// A set of key/value user label pairs to assign to the instance.
        /// </summary>
        public readonly ImmutableDictionary<string, string> UserLabels;
        /// <summary>
        /// Used to make sure changes to the settings block are atomic.
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetDatabaseInstanceSettingResult(
            string activationPolicy,

            ImmutableArray<Outputs.GetDatabaseInstanceSettingActiveDirectoryConfigResult> activeDirectoryConfigs,

            ImmutableArray<Outputs.GetDatabaseInstanceSettingAdvancedMachineFeatureResult> advancedMachineFeatures,

            string availabilityType,

            ImmutableArray<Outputs.GetDatabaseInstanceSettingBackupConfigurationResult> backupConfigurations,

            string collation,

            string connectorEnforcement,

            ImmutableArray<Outputs.GetDatabaseInstanceSettingDataCacheConfigResult> dataCacheConfigs,

            ImmutableArray<Outputs.GetDatabaseInstanceSettingDatabaseFlagResult> databaseFlags,

            bool deletionProtectionEnabled,

            ImmutableArray<Outputs.GetDatabaseInstanceSettingDenyMaintenancePeriodResult> denyMaintenancePeriods,

            bool diskAutoresize,

            int diskAutoresizeLimit,

            int diskSize,

            string diskType,

            string edition,

            bool enableGoogleMlIntegration,

            ImmutableArray<Outputs.GetDatabaseInstanceSettingInsightsConfigResult> insightsConfigs,

            ImmutableArray<Outputs.GetDatabaseInstanceSettingIpConfigurationResult> ipConfigurations,

            ImmutableArray<Outputs.GetDatabaseInstanceSettingLocationPreferenceResult> locationPreferences,

            ImmutableArray<Outputs.GetDatabaseInstanceSettingMaintenanceWindowResult> maintenanceWindows,

            ImmutableArray<Outputs.GetDatabaseInstanceSettingPasswordValidationPolicyResult> passwordValidationPolicies,

            string pricingPlan,

            ImmutableArray<Outputs.GetDatabaseInstanceSettingSqlServerAuditConfigResult> sqlServerAuditConfigs,

            string tier,

            string timeZone,

            ImmutableDictionary<string, string> userLabels,

            int version)
        {
            ActivationPolicy = activationPolicy;
            ActiveDirectoryConfigs = activeDirectoryConfigs;
            AdvancedMachineFeatures = advancedMachineFeatures;
            AvailabilityType = availabilityType;
            BackupConfigurations = backupConfigurations;
            Collation = collation;
            ConnectorEnforcement = connectorEnforcement;
            DataCacheConfigs = dataCacheConfigs;
            DatabaseFlags = databaseFlags;
            DeletionProtectionEnabled = deletionProtectionEnabled;
            DenyMaintenancePeriods = denyMaintenancePeriods;
            DiskAutoresize = diskAutoresize;
            DiskAutoresizeLimit = diskAutoresizeLimit;
            DiskSize = diskSize;
            DiskType = diskType;
            Edition = edition;
            EnableGoogleMlIntegration = enableGoogleMlIntegration;
            InsightsConfigs = insightsConfigs;
            IpConfigurations = ipConfigurations;
            LocationPreferences = locationPreferences;
            MaintenanceWindows = maintenanceWindows;
            PasswordValidationPolicies = passwordValidationPolicies;
            PricingPlan = pricingPlan;
            SqlServerAuditConfigs = sqlServerAuditConfigs;
            Tier = tier;
            TimeZone = timeZone;
            UserLabels = userLabels;
            Version = version;
        }
    }
}
