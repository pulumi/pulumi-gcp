// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Sql.Outputs
{

    [OutputType]
    public sealed class DatabaseInstanceSettings
    {
        /// <summary>
        /// This specifies when the instance should be
        /// active. Can be either `ALWAYS`, `NEVER` or `ON_DEMAND`.
        /// </summary>
        public readonly string? ActivationPolicy;
        public readonly Outputs.DatabaseInstanceSettingsActiveDirectoryConfig? ActiveDirectoryConfig;
        public readonly Outputs.DatabaseInstanceSettingsAdvancedMachineFeatures? AdvancedMachineFeatures;
        /// <summary>
        /// The availability type of the Cloud SQL
        /// instance, high availability (`REGIONAL`) or single zone (`ZONAL`). For all instances, ensure that
        /// `settings.backup_configuration.enabled` is set to `True`.
        /// For MySQL instances, ensure that `settings.backup_configuration.binary_log_enabled` is set to `True`.
        /// For Postgres and SQL Server instances, ensure that `settings.backup_configuration.point_in_time_recovery_enabled`
        /// is set to `True`. Defaults to `ZONAL`.
        /// For read pool instances, this field is read-only. The availability type is changed by specifying
        /// the number of nodes (`NodeCount`).
        /// </summary>
        public readonly string? AvailabilityType;
        public readonly Outputs.DatabaseInstanceSettingsBackupConfiguration? BackupConfiguration;
        /// <summary>
        /// The name of server instance collation.
        /// </summary>
        public readonly string? Collation;
        /// <summary>
        /// The managed connection pool setting for a Cloud SQL instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.DatabaseInstanceSettingsConnectionPoolConfig> ConnectionPoolConfigs;
        /// <summary>
        /// Control the enforcement of Cloud SQL Auth Proxy or Cloud SQL connectors for all the connections, can be `REQUIRED` or `NOT_REQUIRED`. If enabled, all the direct connections are rejected.
        /// </summary>
        public readonly string? ConnectorEnforcement;
        /// <summary>
        /// Data cache configurations.
        /// </summary>
        public readonly Outputs.DatabaseInstanceSettingsDataCacheConfig? DataCacheConfig;
        /// <summary>
        /// Provisioned number of I/O operations per second for the data disk. This field is only used for `HYPERDISK_BALANCED` disk types.
        /// </summary>
        public readonly int? DataDiskProvisionedIops;
        /// <summary>
        /// Provisioned throughput measured in MiB per second for the data disk. This field is only used for `HYPERDISK_BALANCED` disk types.
        /// </summary>
        public readonly int? DataDiskProvisionedThroughput;
        public readonly ImmutableArray<Outputs.DatabaseInstanceSettingsDatabaseFlag> DatabaseFlags;
        /// <summary>
        /// Configuration to protect against accidental instance deletion.
        /// </summary>
        public readonly bool? DeletionProtectionEnabled;
        public readonly Outputs.DatabaseInstanceSettingsDenyMaintenancePeriod? DenyMaintenancePeriod;
        /// <summary>
        /// Enables auto-resizing of the storage size. Defaults to `True`. Note that if `DiskSize` is set, future `pulumi up` calls will attempt to delete the instance in order to resize the disk to the value specified in DiskSize if it has been resized. To avoid this, ensure that `lifecycle.ignore_changes` is applied to `DiskSize`.
        /// </summary>
        public readonly bool? DiskAutoresize;
        /// <summary>
        /// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
        /// </summary>
        public readonly int? DiskAutoresizeLimit;
        /// <summary>
        /// The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB for `PD_SSD`, `PD_HDD` and 20GB for `HYPERDISK_BALANCED`. Note that this value will override the resizing from `DiskAutoresize` if that feature is enabled. To avoid this, set `lifecycle.ignore_changes` on this field.
        /// </summary>
        public readonly int? DiskSize;
        /// <summary>
        /// The type of data disk: `PD_SSD`, `PD_HDD`, or `HYPERDISK_BALANCED`. Defaults to `PD_SSD`. `HYPERDISK_BALANCED` is preview.
        /// </summary>
        public readonly string? DiskType;
        /// <summary>
        /// The edition of the instance, can be `ENTERPRISE` or `ENTERPRISE_PLUS`.
        /// </summary>
        public readonly string? Edition;
        /// <summary>
        /// (Computed) The availability type of
        /// the Cloud SQL instance, high availability (REGIONAL) or single zone
        /// (ZONAL). This field always contains the value that is reported by the API (for
        /// read pools, `settings.0.effective_availability_type` may differ from
        /// `settings.0.availability_type`).
        /// </summary>
        public readonly string? EffectiveAvailabilityType;
        /// <summary>
        /// Enables [Cloud SQL instance integration with Dataplex](https://cloud.google.com/sql/docs/mysql/dataplex-catalog-integration). MySQL, Postgres and SQL Server instances are supported for this feature. Defaults to `False`.
        /// </summary>
        public readonly bool? EnableDataplexIntegration;
        /// <summary>
        /// Enables [Cloud SQL instances to connect to Vertex AI](https://cloud.google.com/sql/docs/postgres/integrate-cloud-sql-with-vertex-ai) and pass requests for real-time predictions and insights. Defaults to `False`.
        /// </summary>
        public readonly bool? EnableGoogleMlIntegration;
        /// <summary>
        /// Config used to determine the final backup settings for the instance
        /// </summary>
        public readonly Outputs.DatabaseInstanceSettingsFinalBackupConfig? FinalBackupConfig;
        /// <summary>
        /// Configuration of Query Insights.
        /// </summary>
        public readonly Outputs.DatabaseInstanceSettingsInsightsConfig? InsightsConfig;
        public readonly Outputs.DatabaseInstanceSettingsIpConfiguration? IpConfiguration;
        public readonly Outputs.DatabaseInstanceSettingsLocationPreference? LocationPreference;
        /// <summary>
        /// Declares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time.
        /// </summary>
        public readonly Outputs.DatabaseInstanceSettingsMaintenanceWindow? MaintenanceWindow;
        public readonly Outputs.DatabaseInstanceSettingsPasswordValidationPolicy? PasswordValidationPolicy;
        /// <summary>
        /// Pricing plan for this instance, can only be `PER_USE`.
        /// </summary>
        public readonly string? PricingPlan;
        /// <summary>
        /// When this parameter is set to true, Cloud SQL retains backups of the instance even after the instance is deleted. The `ON_DEMAND` backup will be retained until customer deletes the backup or the project. The `AUTOMATED` backup will be retained based on the backups retention setting.
        /// </summary>
        public readonly bool? RetainBackupsOnDelete;
        public readonly Outputs.DatabaseInstanceSettingsSqlServerAuditConfig? SqlServerAuditConfig;
        /// <summary>
        /// The machine type to use. See [tiers](https://cloud.google.com/sql/docs/admin-api/v1beta4/tiers)
        /// for more details and supported versions. Postgres supports only shared-core machine types,
        /// and custom machine types such as `db-custom-2-13312`. See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.
        /// </summary>
        public readonly string Tier;
        /// <summary>
        /// The TimeZone to be used by the database engine (supported only for SQL Server), in SQL Server timezone format.
        /// </summary>
        public readonly string? TimeZone;
        /// <summary>
        /// A set of key/value user label pairs to assign to the instance.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? UserLabels;
        /// <summary>
        /// Used to make sure changes to the `Settings` block are
        /// atomic.
        /// </summary>
        public readonly int? Version;

        [OutputConstructor]
        private DatabaseInstanceSettings(
            string? activationPolicy,

            Outputs.DatabaseInstanceSettingsActiveDirectoryConfig? activeDirectoryConfig,

            Outputs.DatabaseInstanceSettingsAdvancedMachineFeatures? advancedMachineFeatures,

            string? availabilityType,

            Outputs.DatabaseInstanceSettingsBackupConfiguration? backupConfiguration,

            string? collation,

            ImmutableArray<Outputs.DatabaseInstanceSettingsConnectionPoolConfig> connectionPoolConfigs,

            string? connectorEnforcement,

            Outputs.DatabaseInstanceSettingsDataCacheConfig? dataCacheConfig,

            int? dataDiskProvisionedIops,

            int? dataDiskProvisionedThroughput,

            ImmutableArray<Outputs.DatabaseInstanceSettingsDatabaseFlag> databaseFlags,

            bool? deletionProtectionEnabled,

            Outputs.DatabaseInstanceSettingsDenyMaintenancePeriod? denyMaintenancePeriod,

            bool? diskAutoresize,

            int? diskAutoresizeLimit,

            int? diskSize,

            string? diskType,

            string? edition,

            string? effectiveAvailabilityType,

            bool? enableDataplexIntegration,

            bool? enableGoogleMlIntegration,

            Outputs.DatabaseInstanceSettingsFinalBackupConfig? finalBackupConfig,

            Outputs.DatabaseInstanceSettingsInsightsConfig? insightsConfig,

            Outputs.DatabaseInstanceSettingsIpConfiguration? ipConfiguration,

            Outputs.DatabaseInstanceSettingsLocationPreference? locationPreference,

            Outputs.DatabaseInstanceSettingsMaintenanceWindow? maintenanceWindow,

            Outputs.DatabaseInstanceSettingsPasswordValidationPolicy? passwordValidationPolicy,

            string? pricingPlan,

            bool? retainBackupsOnDelete,

            Outputs.DatabaseInstanceSettingsSqlServerAuditConfig? sqlServerAuditConfig,

            string tier,

            string? timeZone,

            ImmutableDictionary<string, string>? userLabels,

            int? version)
        {
            ActivationPolicy = activationPolicy;
            ActiveDirectoryConfig = activeDirectoryConfig;
            AdvancedMachineFeatures = advancedMachineFeatures;
            AvailabilityType = availabilityType;
            BackupConfiguration = backupConfiguration;
            Collation = collation;
            ConnectionPoolConfigs = connectionPoolConfigs;
            ConnectorEnforcement = connectorEnforcement;
            DataCacheConfig = dataCacheConfig;
            DataDiskProvisionedIops = dataDiskProvisionedIops;
            DataDiskProvisionedThroughput = dataDiskProvisionedThroughput;
            DatabaseFlags = databaseFlags;
            DeletionProtectionEnabled = deletionProtectionEnabled;
            DenyMaintenancePeriod = denyMaintenancePeriod;
            DiskAutoresize = diskAutoresize;
            DiskAutoresizeLimit = diskAutoresizeLimit;
            DiskSize = diskSize;
            DiskType = diskType;
            Edition = edition;
            EffectiveAvailabilityType = effectiveAvailabilityType;
            EnableDataplexIntegration = enableDataplexIntegration;
            EnableGoogleMlIntegration = enableGoogleMlIntegration;
            FinalBackupConfig = finalBackupConfig;
            InsightsConfig = insightsConfig;
            IpConfiguration = ipConfiguration;
            LocationPreference = locationPreference;
            MaintenanceWindow = maintenanceWindow;
            PasswordValidationPolicy = passwordValidationPolicy;
            PricingPlan = pricingPlan;
            RetainBackupsOnDelete = retainBackupsOnDelete;
            SqlServerAuditConfig = sqlServerAuditConfig;
            Tier = tier;
            TimeZone = timeZone;
            UserLabels = userLabels;
            Version = version;
        }
    }
}
