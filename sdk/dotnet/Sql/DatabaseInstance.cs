// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Sql
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### SQL Second Generation Instance
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Gcp.Sql.DatabaseInstance("main", new()
    ///     {
    ///         Name = "main-instance",
    ///         DatabaseVersion = "POSTGRES_15",
    ///         Region = "us-central1",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-f1-micro",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Private IP Instance
    /// &gt; **NOTE:** For private IP instance setup, note that the `gcp.sql.DatabaseInstance` does not actually interpolate values from `gcp.servicenetworking.Connection`. You must explicitly add a `depends_on`reference as shown below.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var privateNetwork = new Gcp.Compute.Network("private_network", new()
    ///     {
    ///         Name = "private-network",
    ///     });
    /// 
    ///     var privateIpAddress = new Gcp.Compute.GlobalAddress("private_ip_address", new()
    ///     {
    ///         Name = "private-ip-address",
    ///         Purpose = "VPC_PEERING",
    ///         AddressType = "INTERNAL",
    ///         PrefixLength = 16,
    ///         Network = privateNetwork.Id,
    ///     });
    /// 
    ///     var privateVpcConnection = new Gcp.ServiceNetworking.Connection("private_vpc_connection", new()
    ///     {
    ///         Network = privateNetwork.Id,
    ///         Service = "servicenetworking.googleapis.com",
    ///         ReservedPeeringRanges = new[]
    ///         {
    ///             privateIpAddress.Name,
    ///         },
    ///     });
    /// 
    ///     var dbNameSuffix = new Random.RandomId("db_name_suffix", new()
    ///     {
    ///         ByteLength = 4,
    ///     });
    /// 
    ///     var instance = new Gcp.Sql.DatabaseInstance("instance", new()
    ///     {
    ///         Name = dbNameSuffix.Hex.Apply(hex =&gt; $"private-instance-{hex}"),
    ///         Region = "us-central1",
    ///         DatabaseVersion = "MYSQL_5_7",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-f1-micro",
    ///             IpConfiguration = new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationArgs
    ///             {
    ///                 Ipv4Enabled = false,
    ///                 PrivateNetwork = privateNetwork.SelfLink,
    ///                 EnablePrivatePathForGoogleCloudServices = true,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             privateVpcConnection,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### ENTERPRISE_PLUS Instance with data_cache_config
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Gcp.Sql.DatabaseInstance("main", new()
    ///     {
    ///         Name = "enterprise-plus-main-instance",
    ///         DatabaseVersion = "MYSQL_8_0_31",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-perf-optimized-N-2",
    ///             Edition = "ENTERPRISE_PLUS",
    ///             DataCacheConfig = new Gcp.Sql.Inputs.DatabaseInstanceSettingsDataCacheConfigArgs
    ///             {
    ///                 DataCacheEnabled = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Cloud SQL Instance with PSC connectivity
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Gcp.Sql.DatabaseInstance("main", new()
    ///     {
    ///         Name = "psc-enabled-main-instance",
    ///         DatabaseVersion = "MYSQL_8_0",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-f1-micro",
    ///             IpConfiguration = new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationArgs
    ///             {
    ///                 PscConfigs = new[]
    ///                 {
    ///                     new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationPscConfigArgs
    ///                     {
    ///                         PscEnabled = true,
    ///                         AllowedConsumerProjects = new[]
    ///                         {
    ///                             "allowed-consumer-project-name",
    ///                         },
    ///                     },
    ///                 },
    ///                 Ipv4Enabled = false,
    ///             },
    ///             BackupConfiguration = new Gcp.Sql.Inputs.DatabaseInstanceSettingsBackupConfigurationArgs
    ///             {
    ///                 Enabled = true,
    ///                 BinaryLogEnabled = true,
    ///             },
    ///             AvailabilityType = "REGIONAL",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Cloud SQL Instance with PSC auto connections
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Gcp.Sql.DatabaseInstance("main", new()
    ///     {
    ///         Name = "psc-enabled-main-instance",
    ///         DatabaseVersion = "MYSQL_8_0",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-f1-micro",
    ///             IpConfiguration = new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationArgs
    ///             {
    ///                 PscConfigs = new[]
    ///                 {
    ///                     new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationPscConfigArgs
    ///                     {
    ///                         PscEnabled = true,
    ///                         AllowedConsumerProjects = new[]
    ///                         {
    ///                             "allowed-consumer-project-name",
    ///                         },
    ///                         PscAutoConnections = new[]
    ///                         {
    ///                             new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationPscConfigPscAutoConnectionArgs
    ///                             {
    ///                                 ConsumerNetwork = "network-name",
    ///                                 ConsumerServiceProjectId = "project-id",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 Ipv4Enabled = false,
    ///             },
    ///             BackupConfiguration = new Gcp.Sql.Inputs.DatabaseInstanceSettingsBackupConfigurationArgs
    ///             {
    ///                 Enabled = true,
    ///                 BinaryLogEnabled = true,
    ///             },
    ///             AvailabilityType = "REGIONAL",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Switchover
    /// 
    /// Users can perform a switchover on a replica by following the steps below.
    /// 
    ///   ~&gt;**WARNING:** Failure to follow these steps can lead to data loss (You will be warned during plan stage). To prevent data loss during a switchover, please verify your plan with the checklist below.
    /// 
    /// For a more in-depth walkthrough with example code, see the Switchover Guide
    /// 
    /// ### Steps to Invoke Switchover
    /// 
    /// MySQL/PostgreSQL: Create a cross-region, Enterprise Plus edition primary and replica pair, then set the value of primary's `replication_cluster.failover_dr_replica_name` as the replica.
    /// 
    /// SQL Server: Create a `cascadable` replica in a different region from the primary (`cascadable_replica` is set to true in `replica_configuration`)
    /// 
    /// #### Invoking switchover in the replica resource:
    /// 1. Change instance_type from `READ_REPLICA_INSTANCE` to `CLOUD_SQL_INSTANCE`
    /// 2. Remove `master_instance_name`
    /// 3. (SQL Server) Remove `replica_configuration`
    /// 4. Add current primary's name to the replica's `replica_names` list
    /// 5. (MySQL/PostgreSQL) Add current primary's name to the replica's `replication_cluster.failover_dr_replica_name`.
    /// 6. (MySQL/PostgreSQL) Adjust `backup_configuration`. See Switchover Guide for details.
    /// 
    /// #### Updating the primary resource:
    /// 1. Change `instance_type` from `CLOUD_SQL_INSTANCE` to `READ_REPLICA_INSTANCE`
    /// 2. Set `master_instance_name` to the original replica (which will be primary after switchover)
    /// 3. (SQL Server) Set `replica_configuration` and set `cascadable_replica` to `true`
    /// 4. Remove original replica from `replica_names`
    ///    * **NOTE**: Do **not** delete the replica_names field, even if it has no replicas remaining. Set replica_names = [ ] to indicate it having no replicas.
    /// 5. (MySQL/PostgreSQL) Set `replication_cluster.failover_dr_replica_name` as the empty string.
    /// 6. (MySQL/PostgreSQL) Adjust `backup_configuration`. See Switchover Guide for details.
    /// #### Plan and verify that:
    /// - `pulumi preview` outputs **"0 to add, 0 to destroy"**
    /// - `pulumi preview` does not say **"must be replaced"** for any resource
    /// - Every resource **"will be updated in-place"**
    /// - Only the 2 instances involved in switchover have planned changes
    /// - (Recommended) Use `deletion_protection` on instances as a safety measure
    /// 
    /// ## Import
    /// 
    /// Database instances can be imported using one of any of these accepted formats:
    /// 
    /// * `projects/{{project}}/instances/{{name}}`
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, Database instances can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:sql/databaseInstance:DatabaseInstance default projects/{{project}}/instances/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:sql/databaseInstance:DatabaseInstance default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:sql/databaseInstance:DatabaseInstance default {{name}}
    /// ```
    /// 
    /// config and set on the server.
    /// 
    /// When importing, double-check that your config has all the fields set that you expect- just seeing
    /// 
    /// no diff isn't sufficient to know that your config could reproduce the imported resource.
    /// </summary>
    [GcpResourceType("gcp:sql/databaseInstance:DatabaseInstance")]
    public partial class DatabaseInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of all maintenance versions applicable on the instance.
        /// </summary>
        [Output("availableMaintenanceVersions")]
        public Output<ImmutableArray<string>> AvailableMaintenanceVersions { get; private set; } = null!;

        /// <summary>
        /// Configuration for creating a new instance as a clone of another instance.
        /// </summary>
        [Output("clone")]
        public Output<Outputs.DatabaseInstanceClone?> Clone { get; private set; } = null!;

        /// <summary>
        /// The connection name of the instance to be used in
        /// connection strings. For example, when connecting with [Cloud SQL Proxy](https://cloud.google.com/sql/docs/mysql/connect-admin-proxy).
        /// </summary>
        [Output("connectionName")]
        public Output<string> ConnectionName { get; private set; } = null!;

        /// <summary>
        /// The MySQL, PostgreSQL or
        /// SQL Server version to use. Supported values include `MYSQL_5_6`,
        /// `MYSQL_5_7`, `MYSQL_8_0`, `MYSQL_8_4`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
        /// `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `POSTGRES_15`, `POSTGRES_16`, `POSTGRES_17`,
        /// `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
        /// `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
        /// `SQLSERVER_2019_WEB`.
        /// [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
        /// includes an up-to-date reference of supported versions.
        /// </summary>
        [Output("databaseVersion")]
        public Output<string> DatabaseVersion { get; private set; } = null!;

        [Output("deletionProtection")]
        public Output<bool?> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// The DNS name of the instance. See [Connect to an instance using Private Service Connect](https://cloud.google.com/sql/docs/mysql/configure-private-service-connect#view-summary-information-cloud-sql-instances-psc-enabled) for more details.
        /// </summary>
        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        /// <summary>
        /// The list of DNS names used by this instance. Different connection types for an instance may have different DNS names. DNS names can apply to an individual instance or a cluster of instances.
        /// </summary>
        [Output("dnsNames")]
        public Output<ImmutableArray<Outputs.DatabaseInstanceDnsName>> DnsNames { get; private set; } = null!;

        [Output("encryptionKeyName")]
        public Output<string> EncryptionKeyName { get; private set; } = null!;

        [Output("firstIpAddress")]
        public Output<string> FirstIpAddress { get; private set; } = null!;

        /// <summary>
        /// The type of the instance. The supported values are `SQL_INSTANCE_TYPE_UNSPECIFIED`, `CLOUD_SQL_INSTANCE`, `ON_PREMISES_INSTANCE` and `READ_REPLICA_INSTANCE`.
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        [Output("ipAddresses")]
        public Output<ImmutableArray<Outputs.DatabaseInstanceIpAddress>> IpAddresses { get; private set; } = null!;

        /// <summary>
        /// The current software version on the instance. This attribute can not be set during creation. Refer to `available_maintenance_versions` attribute to see what `maintenance_version` are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a `maintenance_version` value that is older than the current one on the instance will be ignored.
        /// </summary>
        [Output("maintenanceVersion")]
        public Output<string> MaintenanceVersion { get; private set; } = null!;

        /// <summary>
        /// The name of the existing instance that will
        /// act as the master in the replication setup. Note, this requires the master to
        /// have `binary_log_enabled` set, as well as existing backups.
        /// </summary>
        [Output("masterInstanceName")]
        public Output<string> MasterInstanceName { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("privateIpAddress")]
        public Output<string> PrivateIpAddress { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// the URI that points to the service attachment of the instance.
        /// </summary>
        [Output("pscServiceAttachmentLink")]
        public Output<string> PscServiceAttachmentLink { get; private set; } = null!;

        [Output("publicIpAddress")]
        public Output<string> PublicIpAddress { get; private set; } = null!;

        /// <summary>
        /// The region the instance will sit in. If a region is not provided in the resource definition,
        /// the provider region will be used instead.
        /// 
        /// - - -
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The configuration for replication. The
        /// configuration is detailed below.
        /// </summary>
        [Output("replicaConfiguration")]
        public Output<Outputs.DatabaseInstanceReplicaConfiguration> ReplicaConfiguration { get; private set; } = null!;

        /// <summary>
        /// List of replica names. Can be updated.
        /// </summary>
        [Output("replicaNames")]
        public Output<ImmutableArray<string>> ReplicaNames { get; private set; } = null!;

        /// <summary>
        /// A primary instance and disaster recovery replica pair. Applicable to MySQL and PostgreSQL. This field can be set only
        /// after both the primary and replica are created.
        /// </summary>
        [Output("replicationCluster")]
        public Output<Outputs.DatabaseInstanceReplicationCluster> ReplicationCluster { get; private set; } = null!;

        [Output("restoreBackupContext")]
        public Output<Outputs.DatabaseInstanceRestoreBackupContext?> RestoreBackupContext { get; private set; } = null!;

        /// <summary>
        /// Initial root password. Can be updated. Required for MS SQL Server.
        /// </summary>
        [Output("rootPassword")]
        public Output<string?> RootPassword { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        [Output("serverCaCerts")]
        public Output<ImmutableArray<Outputs.DatabaseInstanceServerCaCert>> ServerCaCerts { get; private set; } = null!;

        /// <summary>
        /// The service account email address assigned to the
        /// instance.
        /// </summary>
        [Output("serviceAccountEmailAddress")]
        public Output<string> ServiceAccountEmailAddress { get; private set; } = null!;

        /// <summary>
        /// The settings to use for the database. The
        /// configuration is detailed below. Required if `clone` is not set.
        /// </summary>
        [Output("settings")]
        public Output<Outputs.DatabaseInstanceSettings> Settings { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseInstance(string name, DatabaseInstanceArgs args, CustomResourceOptions? options = null)
            : base("gcp:sql/databaseInstance:DatabaseInstance", name, args ?? new DatabaseInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseInstance(string name, Input<string> id, DatabaseInstanceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:sql/databaseInstance:DatabaseInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "replicaConfiguration",
                    "rootPassword",
                    "serverCaCerts",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseInstance Get(string name, Input<string> id, DatabaseInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseInstance(name, id, state, options);
        }
    }

    public sealed class DatabaseInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for creating a new instance as a clone of another instance.
        /// </summary>
        [Input("clone")]
        public Input<Inputs.DatabaseInstanceCloneArgs>? Clone { get; set; }

        /// <summary>
        /// The MySQL, PostgreSQL or
        /// SQL Server version to use. Supported values include `MYSQL_5_6`,
        /// `MYSQL_5_7`, `MYSQL_8_0`, `MYSQL_8_4`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
        /// `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `POSTGRES_15`, `POSTGRES_16`, `POSTGRES_17`,
        /// `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
        /// `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
        /// `SQLSERVER_2019_WEB`.
        /// [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
        /// includes an up-to-date reference of supported versions.
        /// </summary>
        [Input("databaseVersion", required: true)]
        public Input<string> DatabaseVersion { get; set; } = null!;

        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        [Input("encryptionKeyName")]
        public Input<string>? EncryptionKeyName { get; set; }

        /// <summary>
        /// The type of the instance. The supported values are `SQL_INSTANCE_TYPE_UNSPECIFIED`, `CLOUD_SQL_INSTANCE`, `ON_PREMISES_INSTANCE` and `READ_REPLICA_INSTANCE`.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// The current software version on the instance. This attribute can not be set during creation. Refer to `available_maintenance_versions` attribute to see what `maintenance_version` are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a `maintenance_version` value that is older than the current one on the instance will be ignored.
        /// </summary>
        [Input("maintenanceVersion")]
        public Input<string>? MaintenanceVersion { get; set; }

        /// <summary>
        /// The name of the existing instance that will
        /// act as the master in the replication setup. Note, this requires the master to
        /// have `binary_log_enabled` set, as well as existing backups.
        /// </summary>
        [Input("masterInstanceName")]
        public Input<string>? MasterInstanceName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region the instance will sit in. If a region is not provided in the resource definition,
        /// the provider region will be used instead.
        /// 
        /// - - -
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("replicaConfiguration")]
        private Input<Inputs.DatabaseInstanceReplicaConfigurationArgs>? _replicaConfiguration;

        /// <summary>
        /// The configuration for replication. The
        /// configuration is detailed below.
        /// </summary>
        public Input<Inputs.DatabaseInstanceReplicaConfigurationArgs>? ReplicaConfiguration
        {
            get => _replicaConfiguration;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _replicaConfiguration = Output.Tuple<Input<Inputs.DatabaseInstanceReplicaConfigurationArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("replicaNames")]
        private InputList<string>? _replicaNames;

        /// <summary>
        /// List of replica names. Can be updated.
        /// </summary>
        public InputList<string> ReplicaNames
        {
            get => _replicaNames ?? (_replicaNames = new InputList<string>());
            set => _replicaNames = value;
        }

        /// <summary>
        /// A primary instance and disaster recovery replica pair. Applicable to MySQL and PostgreSQL. This field can be set only
        /// after both the primary and replica are created.
        /// </summary>
        [Input("replicationCluster")]
        public Input<Inputs.DatabaseInstanceReplicationClusterArgs>? ReplicationCluster { get; set; }

        [Input("restoreBackupContext")]
        public Input<Inputs.DatabaseInstanceRestoreBackupContextArgs>? RestoreBackupContext { get; set; }

        [Input("rootPassword")]
        private Input<string>? _rootPassword;

        /// <summary>
        /// Initial root password. Can be updated. Required for MS SQL Server.
        /// </summary>
        public Input<string>? RootPassword
        {
            get => _rootPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _rootPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The settings to use for the database. The
        /// configuration is detailed below. Required if `clone` is not set.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.DatabaseInstanceSettingsArgs>? Settings { get; set; }

        public DatabaseInstanceArgs()
        {
        }
        public static new DatabaseInstanceArgs Empty => new DatabaseInstanceArgs();
    }

    public sealed class DatabaseInstanceState : global::Pulumi.ResourceArgs
    {
        [Input("availableMaintenanceVersions")]
        private InputList<string>? _availableMaintenanceVersions;

        /// <summary>
        /// The list of all maintenance versions applicable on the instance.
        /// </summary>
        public InputList<string> AvailableMaintenanceVersions
        {
            get => _availableMaintenanceVersions ?? (_availableMaintenanceVersions = new InputList<string>());
            set => _availableMaintenanceVersions = value;
        }

        /// <summary>
        /// Configuration for creating a new instance as a clone of another instance.
        /// </summary>
        [Input("clone")]
        public Input<Inputs.DatabaseInstanceCloneGetArgs>? Clone { get; set; }

        /// <summary>
        /// The connection name of the instance to be used in
        /// connection strings. For example, when connecting with [Cloud SQL Proxy](https://cloud.google.com/sql/docs/mysql/connect-admin-proxy).
        /// </summary>
        [Input("connectionName")]
        public Input<string>? ConnectionName { get; set; }

        /// <summary>
        /// The MySQL, PostgreSQL or
        /// SQL Server version to use. Supported values include `MYSQL_5_6`,
        /// `MYSQL_5_7`, `MYSQL_8_0`, `MYSQL_8_4`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
        /// `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `POSTGRES_15`, `POSTGRES_16`, `POSTGRES_17`,
        /// `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
        /// `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
        /// `SQLSERVER_2019_WEB`.
        /// [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
        /// includes an up-to-date reference of supported versions.
        /// </summary>
        [Input("databaseVersion")]
        public Input<string>? DatabaseVersion { get; set; }

        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The DNS name of the instance. See [Connect to an instance using Private Service Connect](https://cloud.google.com/sql/docs/mysql/configure-private-service-connect#view-summary-information-cloud-sql-instances-psc-enabled) for more details.
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        [Input("dnsNames")]
        private InputList<Inputs.DatabaseInstanceDnsNameGetArgs>? _dnsNames;

        /// <summary>
        /// The list of DNS names used by this instance. Different connection types for an instance may have different DNS names. DNS names can apply to an individual instance or a cluster of instances.
        /// </summary>
        public InputList<Inputs.DatabaseInstanceDnsNameGetArgs> DnsNames
        {
            get => _dnsNames ?? (_dnsNames = new InputList<Inputs.DatabaseInstanceDnsNameGetArgs>());
            set => _dnsNames = value;
        }

        [Input("encryptionKeyName")]
        public Input<string>? EncryptionKeyName { get; set; }

        [Input("firstIpAddress")]
        public Input<string>? FirstIpAddress { get; set; }

        /// <summary>
        /// The type of the instance. The supported values are `SQL_INSTANCE_TYPE_UNSPECIFIED`, `CLOUD_SQL_INSTANCE`, `ON_PREMISES_INSTANCE` and `READ_REPLICA_INSTANCE`.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        [Input("ipAddresses")]
        private InputList<Inputs.DatabaseInstanceIpAddressGetArgs>? _ipAddresses;
        public InputList<Inputs.DatabaseInstanceIpAddressGetArgs> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<Inputs.DatabaseInstanceIpAddressGetArgs>());
            set => _ipAddresses = value;
        }

        /// <summary>
        /// The current software version on the instance. This attribute can not be set during creation. Refer to `available_maintenance_versions` attribute to see what `maintenance_version` are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a `maintenance_version` value that is older than the current one on the instance will be ignored.
        /// </summary>
        [Input("maintenanceVersion")]
        public Input<string>? MaintenanceVersion { get; set; }

        /// <summary>
        /// The name of the existing instance that will
        /// act as the master in the replication setup. Note, this requires the master to
        /// have `binary_log_enabled` set, as well as existing backups.
        /// </summary>
        [Input("masterInstanceName")]
        public Input<string>? MasterInstanceName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateIpAddress")]
        public Input<string>? PrivateIpAddress { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// the URI that points to the service attachment of the instance.
        /// </summary>
        [Input("pscServiceAttachmentLink")]
        public Input<string>? PscServiceAttachmentLink { get; set; }

        [Input("publicIpAddress")]
        public Input<string>? PublicIpAddress { get; set; }

        /// <summary>
        /// The region the instance will sit in. If a region is not provided in the resource definition,
        /// the provider region will be used instead.
        /// 
        /// - - -
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("replicaConfiguration")]
        private Input<Inputs.DatabaseInstanceReplicaConfigurationGetArgs>? _replicaConfiguration;

        /// <summary>
        /// The configuration for replication. The
        /// configuration is detailed below.
        /// </summary>
        public Input<Inputs.DatabaseInstanceReplicaConfigurationGetArgs>? ReplicaConfiguration
        {
            get => _replicaConfiguration;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _replicaConfiguration = Output.Tuple<Input<Inputs.DatabaseInstanceReplicaConfigurationGetArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("replicaNames")]
        private InputList<string>? _replicaNames;

        /// <summary>
        /// List of replica names. Can be updated.
        /// </summary>
        public InputList<string> ReplicaNames
        {
            get => _replicaNames ?? (_replicaNames = new InputList<string>());
            set => _replicaNames = value;
        }

        /// <summary>
        /// A primary instance and disaster recovery replica pair. Applicable to MySQL and PostgreSQL. This field can be set only
        /// after both the primary and replica are created.
        /// </summary>
        [Input("replicationCluster")]
        public Input<Inputs.DatabaseInstanceReplicationClusterGetArgs>? ReplicationCluster { get; set; }

        [Input("restoreBackupContext")]
        public Input<Inputs.DatabaseInstanceRestoreBackupContextGetArgs>? RestoreBackupContext { get; set; }

        [Input("rootPassword")]
        private Input<string>? _rootPassword;

        /// <summary>
        /// Initial root password. Can be updated. Required for MS SQL Server.
        /// </summary>
        public Input<string>? RootPassword
        {
            get => _rootPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _rootPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("serverCaCerts")]
        private InputList<Inputs.DatabaseInstanceServerCaCertGetArgs>? _serverCaCerts;
        public InputList<Inputs.DatabaseInstanceServerCaCertGetArgs> ServerCaCerts
        {
            get => _serverCaCerts ?? (_serverCaCerts = new InputList<Inputs.DatabaseInstanceServerCaCertGetArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.DatabaseInstanceServerCaCertGetArgs>());
                _serverCaCerts = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The service account email address assigned to the
        /// instance.
        /// </summary>
        [Input("serviceAccountEmailAddress")]
        public Input<string>? ServiceAccountEmailAddress { get; set; }

        /// <summary>
        /// The settings to use for the database. The
        /// configuration is detailed below. Required if `clone` is not set.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.DatabaseInstanceSettingsGetArgs>? Settings { get; set; }

        public DatabaseInstanceState()
        {
        }
        public static new DatabaseInstanceState Empty => new DatabaseInstanceState();
    }
}
