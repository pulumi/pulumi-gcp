// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Spanner
{
    public static class GetInstance
    {
        /// <summary>
        /// Get a spanner instance from Google Cloud by its name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.Spanner.GetInstance.Invoke(new()
        ///     {
        ///         Name = "bar",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("gcp:spanner/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Get a spanner instance from Google Cloud by its name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.Spanner.GetInstance.Invoke(new()
        ///     {
        ///         Name = "bar",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("gcp:spanner/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a spanner instance from Google Cloud by its name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.Spanner.GetInstance.Invoke(new()
        ///     {
        ///         Name = "bar",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("gcp:spanner/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        [Input("config")]
        public string? Config { get; set; }

        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// The name of the spanner instance.
        /// 
        /// - - -
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("config")]
        public Input<string>? Config { get; set; }

        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The name of the spanner instance.
        /// 
        /// - - -
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        public readonly ImmutableArray<Outputs.GetInstanceAutoscalingConfigResult> AutoscalingConfigs;
        public readonly string? Config;
        public readonly string DefaultBackupScheduleType;
        public readonly string? DisplayName;
        public readonly string Edition;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly bool ForceDestroy;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceType;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Name;
        public readonly int NumNodes;
        public readonly int ProcessingUnits;
        public readonly string? Project;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly string State;

        [OutputConstructor]
        private GetInstanceResult(
            ImmutableArray<Outputs.GetInstanceAutoscalingConfigResult> autoscalingConfigs,

            string? config,

            string defaultBackupScheduleType,

            string? displayName,

            string edition,

            ImmutableDictionary<string, string> effectiveLabels,

            bool forceDestroy,

            string id,

            string instanceType,

            ImmutableDictionary<string, string> labels,

            string name,

            int numNodes,

            int processingUnits,

            string? project,

            ImmutableDictionary<string, string> pulumiLabels,

            string state)
        {
            AutoscalingConfigs = autoscalingConfigs;
            Config = config;
            DefaultBackupScheduleType = defaultBackupScheduleType;
            DisplayName = displayName;
            Edition = edition;
            EffectiveLabels = effectiveLabels;
            ForceDestroy = forceDestroy;
            Id = id;
            InstanceType = instanceType;
            Labels = labels;
            Name = name;
            NumNodes = numNodes;
            ProcessingUnits = processingUnits;
            Project = project;
            PulumiLabels = pulumiLabels;
            State = state;
        }
    }
}
