// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Spanner
{
    public static class GetInstance
    {
        /// <summary>
        /// Get a spanner instance from Google Cloud by its name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foo = Output.Create(Gcp.Spanner.GetInstance.InvokeAsync(new Gcp.Spanner.GetInstanceArgs
        ///         {
        ///             Name = "bar",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("gcp:spanner/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithVersion());
    }


    public sealed class GetInstanceArgs : Pulumi.InvokeArgs
    {
        [Input("config")]
        public string? Config { get; set; }

        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("forceDestroy")]
        public bool? ForceDestroy { get; set; }

        [Input("labels")]
        private Dictionary<string, string>? _labels;
        public Dictionary<string, string> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the spanner instance.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("numNodes")]
        public int? NumNodes { get; set; }

        [Input("processingUnits")]
        public int? ProcessingUnits { get; set; }

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetInstanceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        public readonly string? Config;
        public readonly string? DisplayName;
        public readonly bool? ForceDestroy;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string>? Labels;
        public readonly string Name;
        public readonly int NumNodes;
        public readonly int ProcessingUnits;
        public readonly string? Project;
        public readonly string State;

        [OutputConstructor]
        private GetInstanceResult(
            string? config,

            string? displayName,

            bool? forceDestroy,

            string id,

            ImmutableDictionary<string, string>? labels,

            string name,

            int numNodes,

            int processingUnits,

            string? project,

            string state)
        {
            Config = config;
            DisplayName = displayName;
            ForceDestroy = forceDestroy;
            Id = id;
            Labels = labels;
            Name = name;
            NumNodes = numNodes;
            ProcessingUnits = processingUnits;
            Project = project;
            State = state;
        }
    }
}
