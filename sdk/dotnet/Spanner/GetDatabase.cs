// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Spanner
{
    public static class GetDatabase
    {
        /// <summary>
        /// Get a spanner database from Google Cloud by its name and instance name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.Spanner.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "foo",
        ///         Instance = instance.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDatabaseResult> InvokeAsync(GetDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseResult>("gcp:spanner/getDatabase:getDatabase", args ?? new GetDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// Get a spanner database from Google Cloud by its name and instance name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.Spanner.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "foo",
        ///         Instance = instance.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseResult> Invoke(GetDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseResult>("gcp:spanner/getDatabase:getDatabase", args ?? new GetDatabaseInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a spanner database from Google Cloud by its name and instance name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.Spanner.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "foo",
        ///         Instance = instance.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseResult> Invoke(GetDatabaseInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseResult>("gcp:spanner/getDatabase:getDatabase", args ?? new GetDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the database's spanner instance.
        /// 
        /// - - -
        /// </summary>
        [Input("instance", required: true)]
        public string Instance { get; set; } = null!;

        /// <summary>
        /// The name of the spanner database.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetDatabaseArgs()
        {
        }
        public static new GetDatabaseArgs Empty => new GetDatabaseArgs();
    }

    public sealed class GetDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the database's spanner instance.
        /// 
        /// - - -
        /// </summary>
        [Input("instance", required: true)]
        public Input<string> Instance { get; set; } = null!;

        /// <summary>
        /// The name of the spanner database.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDatabaseInvokeArgs()
        {
        }
        public static new GetDatabaseInvokeArgs Empty => new GetDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseResult
    {
        public readonly string DatabaseDialect;
        public readonly ImmutableArray<string> Ddls;
        public readonly string DefaultTimeZone;
        public readonly bool DeletionProtection;
        public readonly bool EnableDropProtection;
        public readonly ImmutableArray<Outputs.GetDatabaseEncryptionConfigResult> EncryptionConfigs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Instance;
        public readonly string Name;
        public readonly string? Project;
        public readonly string State;
        public readonly string VersionRetentionPeriod;

        [OutputConstructor]
        private GetDatabaseResult(
            string databaseDialect,

            ImmutableArray<string> ddls,

            string defaultTimeZone,

            bool deletionProtection,

            bool enableDropProtection,

            ImmutableArray<Outputs.GetDatabaseEncryptionConfigResult> encryptionConfigs,

            string id,

            string instance,

            string name,

            string? project,

            string state,

            string versionRetentionPeriod)
        {
            DatabaseDialect = databaseDialect;
            Ddls = ddls;
            DefaultTimeZone = defaultTimeZone;
            DeletionProtection = deletionProtection;
            EnableDropProtection = enableDropProtection;
            EncryptionConfigs = encryptionConfigs;
            Id = id;
            Instance = instance;
            Name = name;
            Project = project;
            State = state;
            VersionRetentionPeriod = versionRetentionPeriod;
        }
    }
}
