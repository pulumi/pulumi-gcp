// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Spanner
{
    /// <summary>
    /// A Cloud Spanner instance partition is a unit of Cloud Spanner database capacity
    /// that can be used to partition data and processing capacity within an instance.
    /// 
    /// To get more information about InstancePartition, see:
    /// 
    /// * [API documentation](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances.instancePartitions)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/spanner/docs/geo-partitioning)
    /// 
    /// ## Example Usage
    /// 
    /// ### Spanner Instance Partition Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Gcp.Spanner.Instance("main", new()
    ///     {
    ///         Name = "test-instance",
    ///         Config = "nam6",
    ///         DisplayName = "main-instance",
    ///         NumNodes = 1,
    ///         Edition = "ENTERPRISE_PLUS",
    ///     });
    /// 
    ///     var partition = new Gcp.Spanner.InstancePartition("partition", new()
    ///     {
    ///         Name = "test-partition",
    ///         Instance = main.Name,
    ///         Config = "nam8",
    ///         DisplayName = "test-spanner-partition",
    ///         NodeCount = 1,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// InstancePartition can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/instances/{{instance}}/instancePartitions/{{name}}`
    /// 
    /// * `{{project}}/{{instance}}/{{name}}`
    /// 
    /// * `{{instance}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, InstancePartition can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:spanner/instancePartition:InstancePartition default projects/{{project}}/instances/{{instance}}/instancePartitions/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:spanner/instancePartition:InstancePartition default {{project}}/{{instance}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:spanner/instancePartition:InstancePartition default {{instance}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:spanner/instancePartition:InstancePartition")]
    public partial class InstancePartition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the instance partition's configuration (similar to a region) which
        /// defines the geographic placement and replication of data in this instance partition.
        /// </summary>
        [Output("config")]
        public Output<string> Config { get; private set; } = null!;

        /// <summary>
        /// The descriptive name for this instance partition as it appears in UIs.
        /// Must be unique per project and between 4 and 30 characters in length.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The instance to create the instance partition in.
        /// </summary>
        [Output("instance")]
        public Output<string> Instance { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for the instance partition, which cannot be changed after
        /// the instance partition is created. The name must be between 2 and 64 characters
        /// and match the regular expression [a-z][a-z0-9\\-]{0,61}[a-z0-9].
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of nodes allocated to this instance partition. One node equals
        /// 1000 processing units. Exactly one of either NodeCount or ProcessingUnits
        /// must be present.
        /// </summary>
        [Output("nodeCount")]
        public Output<int?> NodeCount { get; private set; } = null!;

        /// <summary>
        /// The number of processing units allocated to this instance partition.
        /// Exactly one of either NodeCount or ProcessingUnits must be present.
        /// </summary>
        [Output("processingUnits")]
        public Output<int?> ProcessingUnits { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The current instance partition state. Possible values are:
        /// CREATING: The instance partition is being created. Resources are being
        /// allocated for the instance partition.
        /// READY: The instance partition has been allocated resources and is ready for use.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a InstancePartition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstancePartition(string name, InstancePartitionArgs args, CustomResourceOptions? options = null)
            : base("gcp:spanner/instancePartition:InstancePartition", name, args ?? new InstancePartitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstancePartition(string name, Input<string> id, InstancePartitionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:spanner/instancePartition:InstancePartition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstancePartition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstancePartition Get(string name, Input<string> id, InstancePartitionState? state = null, CustomResourceOptions? options = null)
        {
            return new InstancePartition(name, id, state, options);
        }
    }

    public sealed class InstancePartitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the instance partition's configuration (similar to a region) which
        /// defines the geographic placement and replication of data in this instance partition.
        /// </summary>
        [Input("config", required: true)]
        public Input<string> Config { get; set; } = null!;

        /// <summary>
        /// The descriptive name for this instance partition as it appears in UIs.
        /// Must be unique per project and between 4 and 30 characters in length.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The instance to create the instance partition in.
        /// </summary>
        [Input("instance", required: true)]
        public Input<string> Instance { get; set; } = null!;

        /// <summary>
        /// A unique identifier for the instance partition, which cannot be changed after
        /// the instance partition is created. The name must be between 2 and 64 characters
        /// and match the regular expression [a-z][a-z0-9\\-]{0,61}[a-z0-9].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of nodes allocated to this instance partition. One node equals
        /// 1000 processing units. Exactly one of either NodeCount or ProcessingUnits
        /// must be present.
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// The number of processing units allocated to this instance partition.
        /// Exactly one of either NodeCount or ProcessingUnits must be present.
        /// </summary>
        [Input("processingUnits")]
        public Input<int>? ProcessingUnits { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public InstancePartitionArgs()
        {
        }
        public static new InstancePartitionArgs Empty => new InstancePartitionArgs();
    }

    public sealed class InstancePartitionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the instance partition's configuration (similar to a region) which
        /// defines the geographic placement and replication of data in this instance partition.
        /// </summary>
        [Input("config")]
        public Input<string>? Config { get; set; }

        /// <summary>
        /// The descriptive name for this instance partition as it appears in UIs.
        /// Must be unique per project and between 4 and 30 characters in length.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The instance to create the instance partition in.
        /// </summary>
        [Input("instance")]
        public Input<string>? Instance { get; set; }

        /// <summary>
        /// A unique identifier for the instance partition, which cannot be changed after
        /// the instance partition is created. The name must be between 2 and 64 characters
        /// and match the regular expression [a-z][a-z0-9\\-]{0,61}[a-z0-9].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of nodes allocated to this instance partition. One node equals
        /// 1000 processing units. Exactly one of either NodeCount or ProcessingUnits
        /// must be present.
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// The number of processing units allocated to this instance partition.
        /// Exactly one of either NodeCount or ProcessingUnits must be present.
        /// </summary>
        [Input("processingUnits")]
        public Input<int>? ProcessingUnits { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The current instance partition state. Possible values are:
        /// CREATING: The instance partition is being created. Resources are being
        /// allocated for the instance partition.
        /// READY: The instance partition has been allocated resources and is ready for use.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public InstancePartitionState()
        {
        }
        public static new InstancePartitionState Empty => new InstancePartitionState();
    }
}
