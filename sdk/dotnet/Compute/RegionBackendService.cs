// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// A Region Backend Service defines a regionally-scoped group of virtual
    /// machines that will serve traffic for load balancing.
    /// 
    /// To get more information about RegionBackendService, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/latest/regionBackendServices)
    /// * How-to Guides
    ///     * [Internal TCP/UDP Load Balancing](https://cloud.google.com/compute/docs/load-balancing/internal/)
    /// 
    /// ## Example Usage
    /// ### Region Backend Service Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var defaultHealthCheck = new Gcp.Compute.HealthCheck("defaultHealthCheck", new Gcp.Compute.HealthCheckArgs
    ///         {
    ///             CheckIntervalSec = 1,
    ///             TimeoutSec = 1,
    ///             TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
    ///             {
    ///                 Port = 80,
    ///             },
    ///         });
    ///         var defaultRegionBackendService = new Gcp.Compute.RegionBackendService("defaultRegionBackendService", new Gcp.Compute.RegionBackendServiceArgs
    ///         {
    ///             Region = "us-central1",
    ///             HealthChecks = 
    ///             {
    ///                 defaultHealthCheck.Id,
    ///             },
    ///             ConnectionDrainingTimeoutSec = 10,
    ///             SessionAffinity = "CLIENT_IP",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Region Backend Service Cache
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var defaultRegionHealthCheck = new Gcp.Compute.RegionHealthCheck("defaultRegionHealthCheck", new Gcp.Compute.RegionHealthCheckArgs
    ///         {
    ///             Region = "us-central1",
    ///             HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///             {
    ///                 Port = 80,
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///         });
    ///         var defaultRegionBackendService = new Gcp.Compute.RegionBackendService("defaultRegionBackendService", new Gcp.Compute.RegionBackendServiceArgs
    ///         {
    ///             Region = "us-central1",
    ///             HealthChecks = 
    ///             {
    ///                 defaultRegionHealthCheck.Id,
    ///             },
    ///             EnableCdn = true,
    ///             CdnPolicy = new Gcp.Compute.Inputs.RegionBackendServiceCdnPolicyArgs
    ///             {
    ///                 CacheMode = "CACHE_ALL_STATIC",
    ///                 DefaultTtl = 3600,
    ///                 ClientTtl = 7200,
    ///                 MaxTtl = 10800,
    ///                 NegativeCaching = true,
    ///                 SignedUrlCacheMaxAgeSec = 7200,
    ///             },
    ///             LoadBalancingScheme = "EXTERNAL",
    ///             Protocol = "HTTP",
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Region Backend Service Ilb Round Robin
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var healthCheck = new Gcp.Compute.HealthCheck("healthCheck", new Gcp.Compute.HealthCheckArgs
    ///         {
    ///             HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///             {
    ///                 Port = 80,
    ///             },
    ///         });
    ///         var @default = new Gcp.Compute.RegionBackendService("default", new Gcp.Compute.RegionBackendServiceArgs
    ///         {
    ///             Region = "us-central1",
    ///             HealthChecks = 
    ///             {
    ///                 healthCheck.Id,
    ///             },
    ///             Protocol = "HTTP",
    ///             LoadBalancingScheme = "INTERNAL_MANAGED",
    ///             LocalityLbPolicy = "ROUND_ROBIN",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Region Backend Service External
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var healthCheck = new Gcp.Compute.RegionHealthCheck("healthCheck", new Gcp.Compute.RegionHealthCheckArgs
    ///         {
    ///             Region = "us-central1",
    ///             TcpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckTcpHealthCheckArgs
    ///             {
    ///                 Port = 80,
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///         });
    ///         var @default = new Gcp.Compute.RegionBackendService("default", new Gcp.Compute.RegionBackendServiceArgs
    ///         {
    ///             Region = "us-central1",
    ///             HealthChecks = 
    ///             {
    ///                 healthCheck.Id,
    ///             },
    ///             Protocol = "TCP",
    ///             LoadBalancingScheme = "EXTERNAL",
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Region Backend Service Ilb Ring Hash
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var healthCheck = new Gcp.Compute.HealthCheck("healthCheck", new Gcp.Compute.HealthCheckArgs
    ///         {
    ///             HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///             {
    ///                 Port = 80,
    ///             },
    ///         });
    ///         var @default = new Gcp.Compute.RegionBackendService("default", new Gcp.Compute.RegionBackendServiceArgs
    ///         {
    ///             Region = "us-central1",
    ///             HealthChecks = 
    ///             {
    ///                 healthCheck.Id,
    ///             },
    ///             LoadBalancingScheme = "INTERNAL_MANAGED",
    ///             LocalityLbPolicy = "RING_HASH",
    ///             SessionAffinity = "HTTP_COOKIE",
    ///             Protocol = "HTTP",
    ///             CircuitBreakers = new Gcp.Compute.Inputs.RegionBackendServiceCircuitBreakersArgs
    ///             {
    ///                 MaxConnections = 10,
    ///             },
    ///             ConsistentHash = new Gcp.Compute.Inputs.RegionBackendServiceConsistentHashArgs
    ///             {
    ///                 HttpCookie = new Gcp.Compute.Inputs.RegionBackendServiceConsistentHashHttpCookieArgs
    ///                 {
    ///                     Ttl = new Gcp.Compute.Inputs.RegionBackendServiceConsistentHashHttpCookieTtlArgs
    ///                     {
    ///                         Seconds = 11,
    ///                         Nanos = 1111,
    ///                     },
    ///                     Name = "mycookie",
    ///                 },
    ///             },
    ///             OutlierDetection = new Gcp.Compute.Inputs.RegionBackendServiceOutlierDetectionArgs
    ///             {
    ///                 ConsecutiveErrors = 2,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Region Backend Service Balancing Mode
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var debianImage = Output.Create(Gcp.Compute.GetImage.InvokeAsync(new Gcp.Compute.GetImageArgs
    ///         {
    ///             Family = "debian-9",
    ///             Project = "debian-cloud",
    ///         }));
    ///         var defaultNetwork = new Gcp.Compute.Network("defaultNetwork", new Gcp.Compute.NetworkArgs
    ///         {
    ///             AutoCreateSubnetworks = false,
    ///             RoutingMode = "REGIONAL",
    ///         });
    ///         var defaultSubnetwork = new Gcp.Compute.Subnetwork("defaultSubnetwork", new Gcp.Compute.SubnetworkArgs
    ///         {
    ///             IpCidrRange = "10.1.2.0/24",
    ///             Region = "us-central1",
    ///             Network = defaultNetwork.Id,
    ///         });
    ///         var instanceTemplate = new Gcp.Compute.InstanceTemplate("instanceTemplate", new Gcp.Compute.InstanceTemplateArgs
    ///         {
    ///             MachineType = "e2-medium",
    ///             NetworkInterfaces = 
    ///             {
    ///                 new Gcp.Compute.Inputs.InstanceTemplateNetworkInterfaceArgs
    ///                 {
    ///                     Network = defaultNetwork.Id,
    ///                     Subnetwork = defaultSubnetwork.Id,
    ///                 },
    ///             },
    ///             Disks = 
    ///             {
    ///                 new Gcp.Compute.Inputs.InstanceTemplateDiskArgs
    ///                 {
    ///                     SourceImage = debianImage.Apply(debianImage =&gt; debianImage.SelfLink),
    ///                     AutoDelete = true,
    ///                     Boot = true,
    ///                 },
    ///             },
    ///             Tags = 
    ///             {
    ///                 "allow-ssh",
    ///                 "load-balanced-backend",
    ///             },
    ///         });
    ///         var rigm = new Gcp.Compute.RegionInstanceGroupManager("rigm", new Gcp.Compute.RegionInstanceGroupManagerArgs
    ///         {
    ///             Region = "us-central1",
    ///             Versions = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionInstanceGroupManagerVersionArgs
    ///                 {
    ///                     InstanceTemplate = instanceTemplate.Id,
    ///                     Name = "primary",
    ///                 },
    ///             },
    ///             BaseInstanceName = "internal-glb",
    ///             TargetSize = 1,
    ///         });
    ///         var defaultRegionHealthCheck = new Gcp.Compute.RegionHealthCheck("defaultRegionHealthCheck", new Gcp.Compute.RegionHealthCheckArgs
    ///         {
    ///             Region = "us-central1",
    ///             HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///             {
    ///                 PortSpecification = "USE_SERVING_PORT",
    ///             },
    ///         });
    ///         var defaultRegionBackendService = new Gcp.Compute.RegionBackendService("defaultRegionBackendService", new Gcp.Compute.RegionBackendServiceArgs
    ///         {
    ///             LoadBalancingScheme = "INTERNAL_MANAGED",
    ///             Backends = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionBackendServiceBackendArgs
    ///                 {
    ///                     Group = rigm.InstanceGroup,
    ///                     BalancingMode = "UTILIZATION",
    ///                     CapacityScaler = 1,
    ///                 },
    ///             },
    ///             Region = "us-central1",
    ///             Protocol = "HTTP",
    ///             TimeoutSec = 10,
    ///             HealthChecks = 
    ///             {
    ///                 defaultRegionHealthCheck.Id,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// RegionBackendService can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/regionBackendService:RegionBackendService default projects/{{project}}/regions/{{region}}/backendServices/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/regionBackendService:RegionBackendService default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/regionBackendService:RegionBackendService default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/regionBackendService:RegionBackendService default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/regionBackendService:RegionBackendService")]
    public partial class RegionBackendService : Pulumi.CustomResource
    {
        /// <summary>
        /// Lifetime of cookies in seconds if session_affinity is
        /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
        /// only until the end of the browser session (or equivalent). The
        /// maximum allowed value for TTL is one day.
        /// When the load balancing scheme is INTERNAL, this field is not used.
        /// </summary>
        [Output("affinityCookieTtlSec")]
        public Output<int?> AffinityCookieTtlSec { get; private set; } = null!;

        /// <summary>
        /// The set of backends that serve this RegionBackendService.
        /// Structure is documented below.
        /// </summary>
        [Output("backends")]
        public Output<ImmutableArray<Outputs.RegionBackendServiceBackend>> Backends { get; private set; } = null!;

        /// <summary>
        /// Cloud CDN configuration for this BackendService.
        /// Structure is documented below.
        /// </summary>
        [Output("cdnPolicy")]
        public Output<Outputs.RegionBackendServiceCdnPolicy> CdnPolicy { get; private set; } = null!;

        /// <summary>
        /// Settings controlling the volume of connections to a backend service. This field
        /// is applicable only when the `load_balancing_scheme` is set to INTERNAL_MANAGED
        /// and the `protocol` is set to HTTP, HTTPS, or HTTP2.
        /// Structure is documented below.
        /// </summary>
        [Output("circuitBreakers")]
        public Output<Outputs.RegionBackendServiceCircuitBreakers?> CircuitBreakers { get; private set; } = null!;

        /// <summary>
        /// Time for which instance will be drained (not accept new
        /// connections, but still work to finish started).
        /// </summary>
        [Output("connectionDrainingTimeoutSec")]
        public Output<int?> ConnectionDrainingTimeoutSec { get; private set; } = null!;

        /// <summary>
        /// Consistent Hash-based load balancing can be used to provide soft session
        /// affinity based on HTTP headers, cookies or other properties. This load balancing
        /// policy is applicable only for HTTP connections. The affinity to a particular
        /// destination host will be lost when one or more hosts are added/removed from the
        /// destination service. This field specifies parameters that control consistent
        /// hashing.
        /// This field only applies when all of the following are true -
        /// </summary>
        [Output("consistentHash")]
        public Output<Outputs.RegionBackendServiceConsistentHash?> ConsistentHash { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// Provide this property when you create the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If true, enable Cloud CDN for this RegionBackendService.
        /// </summary>
        [Output("enableCdn")]
        public Output<bool?> EnableCdn { get; private set; } = null!;

        /// <summary>
        /// Policy for failovers.
        /// Structure is documented below.
        /// </summary>
        [Output("failoverPolicy")]
        public Output<Outputs.RegionBackendServiceFailoverPolicy?> FailoverPolicy { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// The set of URLs to HealthCheck resources for health checking
        /// this RegionBackendService. Currently at most one health
        /// check can be specified.
        /// A health check must be specified unless the backend service uses an internet
        /// or serverless NEG as a backend.
        /// </summary>
        [Output("healthChecks")]
        public Output<string?> HealthChecks { get; private set; } = null!;

        /// <summary>
        /// Indicates what kind of load balancing this regional backend service
        /// will be used for. A backend service created for one type of load
        /// balancing cannot be used with the other(s).
        /// Default value is `INTERNAL`.
        /// Possible values are `EXTERNAL`, `INTERNAL`, and `INTERNAL_MANAGED`.
        /// </summary>
        [Output("loadBalancingScheme")]
        public Output<string?> LoadBalancingScheme { get; private set; } = null!;

        /// <summary>
        /// The load balancing algorithm used within the scope of the locality.
        /// The possible values are -
        /// * ROUND_ROBIN - This is a simple policy in which each healthy backend
        /// is selected in round robin order.
        /// * LEAST_REQUEST - An O(1) algorithm which selects two random healthy
        /// hosts and picks the host which has fewer active requests.
        /// * RING_HASH - The ring/modulo hash load balancer implements consistent
        /// hashing to backends. The algorithm has the property that the
        /// addition/removal of a host from a set of N hosts only affects
        /// 1/N of the requests.
        /// * RANDOM - The load balancer selects a random healthy host.
        /// * ORIGINAL_DESTINATION - Backend host is selected based on the client
        /// connection metadata, i.e., connections are opened
        /// to the same address as the destination address of
        /// the incoming connection before the connection
        /// was redirected to the load balancer.
        /// * MAGLEV - used as a drop in replacement for the ring hash load balancer.
        /// Maglev is not as stable as ring hash but has faster table lookup
        /// build times and host selection times. For more information about
        /// Maglev, refer to https://ai.google/research/pubs/pub44824
        /// This field is applicable only when the `load_balancing_scheme` is set to
        /// INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
        /// Possible values are `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, and `MAGLEV`.
        /// </summary>
        [Output("localityLbPolicy")]
        public Output<string?> LocalityLbPolicy { get; private set; } = null!;

        /// <summary>
        /// This field denotes the logging options for the load balancer traffic served by this backend service.
        /// If logging is enabled, logs will be exported to Stackdriver.
        /// Structure is documented below.
        /// </summary>
        [Output("logConfig")]
        public Output<Outputs.RegionBackendServiceLogConfig?> LogConfig { get; private set; } = null!;

        /// <summary>
        /// Name of the cookie.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The URL of the network to which this backend service belongs.
        /// This field can only be specified when the load balancing scheme is set to INTERNAL.
        /// </summary>
        [Output("network")]
        public Output<string?> Network { get; private set; } = null!;

        /// <summary>
        /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
        /// This field is applicable only when the `load_balancing_scheme` is set
        /// to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
        /// Structure is documented below.
        /// </summary>
        [Output("outlierDetection")]
        public Output<Outputs.RegionBackendServiceOutlierDetection?> OutlierDetection { get; private set; } = null!;

        /// <summary>
        /// A named port on a backend instance group representing the port for
        /// communication to the backend VMs in that group. Required when the
        /// loadBalancingScheme is EXTERNAL, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
        /// and the backends are instance groups. The named port must be defined on each
        /// backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
        /// default of "http" if not given.
        /// Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
        /// </summary>
        [Output("portName")]
        public Output<string> PortName { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The protocol this RegionBackendService uses to communicate with backends.
        /// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
        /// types and may result in errors if used with the GA API.
        /// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `SSL`, `TCP`, `UDP`, and `GRPC`.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// The Region in which the created backend service should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Type of session affinity to use. The default is NONE. Session affinity is
        /// not applicable if the protocol is UDP.
        /// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
        /// </summary>
        [Output("sessionAffinity")]
        public Output<string> SessionAffinity { get; private set; } = null!;

        /// <summary>
        /// How many seconds to wait for the backend before considering it a
        /// failed request. Default is 30 seconds. Valid range is [1, 86400].
        /// </summary>
        [Output("timeoutSec")]
        public Output<int> TimeoutSec { get; private set; } = null!;


        /// <summary>
        /// Create a RegionBackendService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegionBackendService(string name, RegionBackendServiceArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:compute/regionBackendService:RegionBackendService", name, args ?? new RegionBackendServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegionBackendService(string name, Input<string> id, RegionBackendServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/regionBackendService:RegionBackendService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegionBackendService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegionBackendService Get(string name, Input<string> id, RegionBackendServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new RegionBackendService(name, id, state, options);
        }
    }

    public sealed class RegionBackendServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Lifetime of cookies in seconds if session_affinity is
        /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
        /// only until the end of the browser session (or equivalent). The
        /// maximum allowed value for TTL is one day.
        /// When the load balancing scheme is INTERNAL, this field is not used.
        /// </summary>
        [Input("affinityCookieTtlSec")]
        public Input<int>? AffinityCookieTtlSec { get; set; }

        [Input("backends")]
        private InputList<Inputs.RegionBackendServiceBackendArgs>? _backends;

        /// <summary>
        /// The set of backends that serve this RegionBackendService.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionBackendServiceBackendArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.RegionBackendServiceBackendArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// Cloud CDN configuration for this BackendService.
        /// Structure is documented below.
        /// </summary>
        [Input("cdnPolicy")]
        public Input<Inputs.RegionBackendServiceCdnPolicyArgs>? CdnPolicy { get; set; }

        /// <summary>
        /// Settings controlling the volume of connections to a backend service. This field
        /// is applicable only when the `load_balancing_scheme` is set to INTERNAL_MANAGED
        /// and the `protocol` is set to HTTP, HTTPS, or HTTP2.
        /// Structure is documented below.
        /// </summary>
        [Input("circuitBreakers")]
        public Input<Inputs.RegionBackendServiceCircuitBreakersArgs>? CircuitBreakers { get; set; }

        /// <summary>
        /// Time for which instance will be drained (not accept new
        /// connections, but still work to finish started).
        /// </summary>
        [Input("connectionDrainingTimeoutSec")]
        public Input<int>? ConnectionDrainingTimeoutSec { get; set; }

        /// <summary>
        /// Consistent Hash-based load balancing can be used to provide soft session
        /// affinity based on HTTP headers, cookies or other properties. This load balancing
        /// policy is applicable only for HTTP connections. The affinity to a particular
        /// destination host will be lost when one or more hosts are added/removed from the
        /// destination service. This field specifies parameters that control consistent
        /// hashing.
        /// This field only applies when all of the following are true -
        /// </summary>
        [Input("consistentHash")]
        public Input<Inputs.RegionBackendServiceConsistentHashArgs>? ConsistentHash { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If true, enable Cloud CDN for this RegionBackendService.
        /// </summary>
        [Input("enableCdn")]
        public Input<bool>? EnableCdn { get; set; }

        /// <summary>
        /// Policy for failovers.
        /// Structure is documented below.
        /// </summary>
        [Input("failoverPolicy")]
        public Input<Inputs.RegionBackendServiceFailoverPolicyArgs>? FailoverPolicy { get; set; }

        /// <summary>
        /// The set of URLs to HealthCheck resources for health checking
        /// this RegionBackendService. Currently at most one health
        /// check can be specified.
        /// A health check must be specified unless the backend service uses an internet
        /// or serverless NEG as a backend.
        /// </summary>
        [Input("healthChecks")]
        public Input<string>? HealthChecks { get; set; }

        /// <summary>
        /// Indicates what kind of load balancing this regional backend service
        /// will be used for. A backend service created for one type of load
        /// balancing cannot be used with the other(s).
        /// Default value is `INTERNAL`.
        /// Possible values are `EXTERNAL`, `INTERNAL`, and `INTERNAL_MANAGED`.
        /// </summary>
        [Input("loadBalancingScheme")]
        public Input<string>? LoadBalancingScheme { get; set; }

        /// <summary>
        /// The load balancing algorithm used within the scope of the locality.
        /// The possible values are -
        /// * ROUND_ROBIN - This is a simple policy in which each healthy backend
        /// is selected in round robin order.
        /// * LEAST_REQUEST - An O(1) algorithm which selects two random healthy
        /// hosts and picks the host which has fewer active requests.
        /// * RING_HASH - The ring/modulo hash load balancer implements consistent
        /// hashing to backends. The algorithm has the property that the
        /// addition/removal of a host from a set of N hosts only affects
        /// 1/N of the requests.
        /// * RANDOM - The load balancer selects a random healthy host.
        /// * ORIGINAL_DESTINATION - Backend host is selected based on the client
        /// connection metadata, i.e., connections are opened
        /// to the same address as the destination address of
        /// the incoming connection before the connection
        /// was redirected to the load balancer.
        /// * MAGLEV - used as a drop in replacement for the ring hash load balancer.
        /// Maglev is not as stable as ring hash but has faster table lookup
        /// build times and host selection times. For more information about
        /// Maglev, refer to https://ai.google/research/pubs/pub44824
        /// This field is applicable only when the `load_balancing_scheme` is set to
        /// INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
        /// Possible values are `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, and `MAGLEV`.
        /// </summary>
        [Input("localityLbPolicy")]
        public Input<string>? LocalityLbPolicy { get; set; }

        /// <summary>
        /// This field denotes the logging options for the load balancer traffic served by this backend service.
        /// If logging is enabled, logs will be exported to Stackdriver.
        /// Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.RegionBackendServiceLogConfigArgs>? LogConfig { get; set; }

        /// <summary>
        /// Name of the cookie.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The URL of the network to which this backend service belongs.
        /// This field can only be specified when the load balancing scheme is set to INTERNAL.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
        /// This field is applicable only when the `load_balancing_scheme` is set
        /// to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
        /// Structure is documented below.
        /// </summary>
        [Input("outlierDetection")]
        public Input<Inputs.RegionBackendServiceOutlierDetectionArgs>? OutlierDetection { get; set; }

        /// <summary>
        /// A named port on a backend instance group representing the port for
        /// communication to the backend VMs in that group. Required when the
        /// loadBalancingScheme is EXTERNAL, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
        /// and the backends are instance groups. The named port must be defined on each
        /// backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
        /// default of "http" if not given.
        /// Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
        /// </summary>
        [Input("portName")]
        public Input<string>? PortName { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The protocol this RegionBackendService uses to communicate with backends.
        /// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
        /// types and may result in errors if used with the GA API.
        /// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `SSL`, `TCP`, `UDP`, and `GRPC`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The Region in which the created backend service should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Type of session affinity to use. The default is NONE. Session affinity is
        /// not applicable if the protocol is UDP.
        /// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// How many seconds to wait for the backend before considering it a
        /// failed request. Default is 30 seconds. Valid range is [1, 86400].
        /// </summary>
        [Input("timeoutSec")]
        public Input<int>? TimeoutSec { get; set; }

        public RegionBackendServiceArgs()
        {
        }
    }

    public sealed class RegionBackendServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Lifetime of cookies in seconds if session_affinity is
        /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
        /// only until the end of the browser session (or equivalent). The
        /// maximum allowed value for TTL is one day.
        /// When the load balancing scheme is INTERNAL, this field is not used.
        /// </summary>
        [Input("affinityCookieTtlSec")]
        public Input<int>? AffinityCookieTtlSec { get; set; }

        [Input("backends")]
        private InputList<Inputs.RegionBackendServiceBackendGetArgs>? _backends;

        /// <summary>
        /// The set of backends that serve this RegionBackendService.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionBackendServiceBackendGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.RegionBackendServiceBackendGetArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// Cloud CDN configuration for this BackendService.
        /// Structure is documented below.
        /// </summary>
        [Input("cdnPolicy")]
        public Input<Inputs.RegionBackendServiceCdnPolicyGetArgs>? CdnPolicy { get; set; }

        /// <summary>
        /// Settings controlling the volume of connections to a backend service. This field
        /// is applicable only when the `load_balancing_scheme` is set to INTERNAL_MANAGED
        /// and the `protocol` is set to HTTP, HTTPS, or HTTP2.
        /// Structure is documented below.
        /// </summary>
        [Input("circuitBreakers")]
        public Input<Inputs.RegionBackendServiceCircuitBreakersGetArgs>? CircuitBreakers { get; set; }

        /// <summary>
        /// Time for which instance will be drained (not accept new
        /// connections, but still work to finish started).
        /// </summary>
        [Input("connectionDrainingTimeoutSec")]
        public Input<int>? ConnectionDrainingTimeoutSec { get; set; }

        /// <summary>
        /// Consistent Hash-based load balancing can be used to provide soft session
        /// affinity based on HTTP headers, cookies or other properties. This load balancing
        /// policy is applicable only for HTTP connections. The affinity to a particular
        /// destination host will be lost when one or more hosts are added/removed from the
        /// destination service. This field specifies parameters that control consistent
        /// hashing.
        /// This field only applies when all of the following are true -
        /// </summary>
        [Input("consistentHash")]
        public Input<Inputs.RegionBackendServiceConsistentHashGetArgs>? ConsistentHash { get; set; }

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If true, enable Cloud CDN for this RegionBackendService.
        /// </summary>
        [Input("enableCdn")]
        public Input<bool>? EnableCdn { get; set; }

        /// <summary>
        /// Policy for failovers.
        /// Structure is documented below.
        /// </summary>
        [Input("failoverPolicy")]
        public Input<Inputs.RegionBackendServiceFailoverPolicyGetArgs>? FailoverPolicy { get; set; }

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// The set of URLs to HealthCheck resources for health checking
        /// this RegionBackendService. Currently at most one health
        /// check can be specified.
        /// A health check must be specified unless the backend service uses an internet
        /// or serverless NEG as a backend.
        /// </summary>
        [Input("healthChecks")]
        public Input<string>? HealthChecks { get; set; }

        /// <summary>
        /// Indicates what kind of load balancing this regional backend service
        /// will be used for. A backend service created for one type of load
        /// balancing cannot be used with the other(s).
        /// Default value is `INTERNAL`.
        /// Possible values are `EXTERNAL`, `INTERNAL`, and `INTERNAL_MANAGED`.
        /// </summary>
        [Input("loadBalancingScheme")]
        public Input<string>? LoadBalancingScheme { get; set; }

        /// <summary>
        /// The load balancing algorithm used within the scope of the locality.
        /// The possible values are -
        /// * ROUND_ROBIN - This is a simple policy in which each healthy backend
        /// is selected in round robin order.
        /// * LEAST_REQUEST - An O(1) algorithm which selects two random healthy
        /// hosts and picks the host which has fewer active requests.
        /// * RING_HASH - The ring/modulo hash load balancer implements consistent
        /// hashing to backends. The algorithm has the property that the
        /// addition/removal of a host from a set of N hosts only affects
        /// 1/N of the requests.
        /// * RANDOM - The load balancer selects a random healthy host.
        /// * ORIGINAL_DESTINATION - Backend host is selected based on the client
        /// connection metadata, i.e., connections are opened
        /// to the same address as the destination address of
        /// the incoming connection before the connection
        /// was redirected to the load balancer.
        /// * MAGLEV - used as a drop in replacement for the ring hash load balancer.
        /// Maglev is not as stable as ring hash but has faster table lookup
        /// build times and host selection times. For more information about
        /// Maglev, refer to https://ai.google/research/pubs/pub44824
        /// This field is applicable only when the `load_balancing_scheme` is set to
        /// INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
        /// Possible values are `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, and `MAGLEV`.
        /// </summary>
        [Input("localityLbPolicy")]
        public Input<string>? LocalityLbPolicy { get; set; }

        /// <summary>
        /// This field denotes the logging options for the load balancer traffic served by this backend service.
        /// If logging is enabled, logs will be exported to Stackdriver.
        /// Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.RegionBackendServiceLogConfigGetArgs>? LogConfig { get; set; }

        /// <summary>
        /// Name of the cookie.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The URL of the network to which this backend service belongs.
        /// This field can only be specified when the load balancing scheme is set to INTERNAL.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
        /// This field is applicable only when the `load_balancing_scheme` is set
        /// to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
        /// Structure is documented below.
        /// </summary>
        [Input("outlierDetection")]
        public Input<Inputs.RegionBackendServiceOutlierDetectionGetArgs>? OutlierDetection { get; set; }

        /// <summary>
        /// A named port on a backend instance group representing the port for
        /// communication to the backend VMs in that group. Required when the
        /// loadBalancingScheme is EXTERNAL, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
        /// and the backends are instance groups. The named port must be defined on each
        /// backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
        /// default of "http" if not given.
        /// Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
        /// </summary>
        [Input("portName")]
        public Input<string>? PortName { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The protocol this RegionBackendService uses to communicate with backends.
        /// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
        /// types and may result in errors if used with the GA API.
        /// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `SSL`, `TCP`, `UDP`, and `GRPC`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The Region in which the created backend service should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// Type of session affinity to use. The default is NONE. Session affinity is
        /// not applicable if the protocol is UDP.
        /// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// How many seconds to wait for the backend before considering it a
        /// failed request. Default is 30 seconds. Valid range is [1, 86400].
        /// </summary>
        [Input("timeoutSec")]
        public Input<int>? TimeoutSec { get; set; }

        public RegionBackendServiceState()
        {
        }
    }
}
