// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// UrlMaps are used to route requests to a backend service based on rules
    /// that you define for the host and path of an incoming URL.
    /// 
    /// 
    /// To get more information about UrlMap, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/urlMaps)
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_url_map.html.markdown.
    /// </summary>
    public partial class URLMap : Pulumi.CustomResource
    {
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// The backend service or backend bucket to use when none of the given rules match.
        /// </summary>
        [Output("defaultService")]
        public Output<string?> DefaultService { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic
        /// locking.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// Specifies changes to request and response headers that need to take effect for the selected backendService.
        /// The headerAction specified here take effect after headerAction specified under pathMatcher.
        /// </summary>
        [Output("headerAction")]
        public Output<Outputs.URLMapHeaderAction?> HeaderAction { get; private set; } = null!;

        /// <summary>
        /// The list of HostRules to use against the URL.
        /// </summary>
        [Output("hostRules")]
        public Output<ImmutableArray<Outputs.URLMapHostRules>> HostRules { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the resource.
        /// </summary>
        [Output("mapId")]
        public Output<int> MapId { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters
        /// long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular
        /// expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be
        /// a dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of named PathMatchers to use against the URL.
        /// </summary>
        [Output("pathMatchers")]
        public Output<ImmutableArray<Outputs.URLMapPathMatchers>> PathMatchers { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// The list of expected URL mapping tests. Request to update this UrlMap will succeed only if all of the test
        /// cases pass. You can specify a maximum of 100 tests per UrlMap.
        /// </summary>
        [Output("tests")]
        public Output<ImmutableArray<Outputs.URLMapTests>> Tests { get; private set; } = null!;


        /// <summary>
        /// Create a URLMap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public URLMap(string name, URLMapArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:compute/uRLMap:URLMap", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private URLMap(string name, Input<string> id, URLMapState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/uRLMap:URLMap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing URLMap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static URLMap Get(string name, Input<string> id, URLMapState? state = null, CustomResourceOptions? options = null)
        {
            return new URLMap(name, id, state, options);
        }
    }

    public sealed class URLMapArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The backend service or backend bucket to use when none of the given rules match.
        /// </summary>
        [Input("defaultService")]
        public Input<string>? DefaultService { get; set; }

        /// <summary>
        /// An optional description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies changes to request and response headers that need to take effect for the selected backendService.
        /// The headerAction specified here take effect after headerAction specified under pathMatcher.
        /// </summary>
        [Input("headerAction")]
        public Input<Inputs.URLMapHeaderActionArgs>? HeaderAction { get; set; }

        [Input("hostRules")]
        private InputList<Inputs.URLMapHostRulesArgs>? _hostRules;

        /// <summary>
        /// The list of HostRules to use against the URL.
        /// </summary>
        public InputList<Inputs.URLMapHostRulesArgs> HostRules
        {
            get => _hostRules ?? (_hostRules = new InputList<Inputs.URLMapHostRulesArgs>());
            set => _hostRules = value;
        }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters
        /// long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular
        /// expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be
        /// a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pathMatchers")]
        private InputList<Inputs.URLMapPathMatchersArgs>? _pathMatchers;

        /// <summary>
        /// The list of named PathMatchers to use against the URL.
        /// </summary>
        public InputList<Inputs.URLMapPathMatchersArgs> PathMatchers
        {
            get => _pathMatchers ?? (_pathMatchers = new InputList<Inputs.URLMapPathMatchersArgs>());
            set => _pathMatchers = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("tests")]
        private InputList<Inputs.URLMapTestsArgs>? _tests;

        /// <summary>
        /// The list of expected URL mapping tests. Request to update this UrlMap will succeed only if all of the test
        /// cases pass. You can specify a maximum of 100 tests per UrlMap.
        /// </summary>
        public InputList<Inputs.URLMapTestsArgs> Tests
        {
            get => _tests ?? (_tests = new InputList<Inputs.URLMapTestsArgs>());
            set => _tests = value;
        }

        public URLMapArgs()
        {
        }
    }

    public sealed class URLMapState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// The backend service or backend bucket to use when none of the given rules match.
        /// </summary>
        [Input("defaultService")]
        public Input<string>? DefaultService { get; set; }

        /// <summary>
        /// An optional description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic
        /// locking.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// Specifies changes to request and response headers that need to take effect for the selected backendService.
        /// The headerAction specified here take effect after headerAction specified under pathMatcher.
        /// </summary>
        [Input("headerAction")]
        public Input<Inputs.URLMapHeaderActionGetArgs>? HeaderAction { get; set; }

        [Input("hostRules")]
        private InputList<Inputs.URLMapHostRulesGetArgs>? _hostRules;

        /// <summary>
        /// The list of HostRules to use against the URL.
        /// </summary>
        public InputList<Inputs.URLMapHostRulesGetArgs> HostRules
        {
            get => _hostRules ?? (_hostRules = new InputList<Inputs.URLMapHostRulesGetArgs>());
            set => _hostRules = value;
        }

        /// <summary>
        /// The unique identifier for the resource.
        /// </summary>
        [Input("mapId")]
        public Input<int>? MapId { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters
        /// long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular
        /// expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be
        /// a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pathMatchers")]
        private InputList<Inputs.URLMapPathMatchersGetArgs>? _pathMatchers;

        /// <summary>
        /// The list of named PathMatchers to use against the URL.
        /// </summary>
        public InputList<Inputs.URLMapPathMatchersGetArgs> PathMatchers
        {
            get => _pathMatchers ?? (_pathMatchers = new InputList<Inputs.URLMapPathMatchersGetArgs>());
            set => _pathMatchers = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("tests")]
        private InputList<Inputs.URLMapTestsGetArgs>? _tests;

        /// <summary>
        /// The list of expected URL mapping tests. Request to update this UrlMap will succeed only if all of the test
        /// cases pass. You can specify a maximum of 100 tests per UrlMap.
        /// </summary>
        public InputList<Inputs.URLMapTestsGetArgs> Tests
        {
            get => _tests ?? (_tests = new InputList<Inputs.URLMapTestsGetArgs>());
            set => _tests = value;
        }

        public URLMapState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class URLMapHeaderActionArgs : Pulumi.ResourceArgs
    {
        [Input("requestHeadersToAdds")]
        private InputList<URLMapHeaderActionRequestHeadersToAddsArgs>? _requestHeadersToAdds;
        public InputList<URLMapHeaderActionRequestHeadersToAddsArgs> RequestHeadersToAdds
        {
            get => _requestHeadersToAdds ?? (_requestHeadersToAdds = new InputList<URLMapHeaderActionRequestHeadersToAddsArgs>());
            set => _requestHeadersToAdds = value;
        }

        [Input("requestHeadersToRemoves")]
        private InputList<string>? _requestHeadersToRemoves;
        public InputList<string> RequestHeadersToRemoves
        {
            get => _requestHeadersToRemoves ?? (_requestHeadersToRemoves = new InputList<string>());
            set => _requestHeadersToRemoves = value;
        }

        [Input("responseHeadersToAdds")]
        private InputList<URLMapHeaderActionResponseHeadersToAddsArgs>? _responseHeadersToAdds;
        public InputList<URLMapHeaderActionResponseHeadersToAddsArgs> ResponseHeadersToAdds
        {
            get => _responseHeadersToAdds ?? (_responseHeadersToAdds = new InputList<URLMapHeaderActionResponseHeadersToAddsArgs>());
            set => _responseHeadersToAdds = value;
        }

        [Input("responseHeadersToRemoves")]
        private InputList<string>? _responseHeadersToRemoves;
        public InputList<string> ResponseHeadersToRemoves
        {
            get => _responseHeadersToRemoves ?? (_responseHeadersToRemoves = new InputList<string>());
            set => _responseHeadersToRemoves = value;
        }

        public URLMapHeaderActionArgs()
        {
        }
    }

    public sealed class URLMapHeaderActionGetArgs : Pulumi.ResourceArgs
    {
        [Input("requestHeadersToAdds")]
        private InputList<URLMapHeaderActionRequestHeadersToAddsGetArgs>? _requestHeadersToAdds;
        public InputList<URLMapHeaderActionRequestHeadersToAddsGetArgs> RequestHeadersToAdds
        {
            get => _requestHeadersToAdds ?? (_requestHeadersToAdds = new InputList<URLMapHeaderActionRequestHeadersToAddsGetArgs>());
            set => _requestHeadersToAdds = value;
        }

        [Input("requestHeadersToRemoves")]
        private InputList<string>? _requestHeadersToRemoves;
        public InputList<string> RequestHeadersToRemoves
        {
            get => _requestHeadersToRemoves ?? (_requestHeadersToRemoves = new InputList<string>());
            set => _requestHeadersToRemoves = value;
        }

        [Input("responseHeadersToAdds")]
        private InputList<URLMapHeaderActionResponseHeadersToAddsGetArgs>? _responseHeadersToAdds;
        public InputList<URLMapHeaderActionResponseHeadersToAddsGetArgs> ResponseHeadersToAdds
        {
            get => _responseHeadersToAdds ?? (_responseHeadersToAdds = new InputList<URLMapHeaderActionResponseHeadersToAddsGetArgs>());
            set => _responseHeadersToAdds = value;
        }

        [Input("responseHeadersToRemoves")]
        private InputList<string>? _responseHeadersToRemoves;
        public InputList<string> ResponseHeadersToRemoves
        {
            get => _responseHeadersToRemoves ?? (_responseHeadersToRemoves = new InputList<string>());
            set => _responseHeadersToRemoves = value;
        }

        public URLMapHeaderActionGetArgs()
        {
        }
    }

    public sealed class URLMapHeaderActionRequestHeadersToAddsArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapHeaderActionRequestHeadersToAddsArgs()
        {
        }
    }

    public sealed class URLMapHeaderActionRequestHeadersToAddsGetArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapHeaderActionRequestHeadersToAddsGetArgs()
        {
        }
    }

    public sealed class URLMapHeaderActionResponseHeadersToAddsArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapHeaderActionResponseHeadersToAddsArgs()
        {
        }
    }

    public sealed class URLMapHeaderActionResponseHeadersToAddsGetArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapHeaderActionResponseHeadersToAddsGetArgs()
        {
        }
    }

    public sealed class URLMapHostRulesArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("hosts", required: true)]
        private InputList<string>? _hosts;
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        [Input("pathMatcher", required: true)]
        public Input<string> PathMatcher { get; set; } = null!;

        public URLMapHostRulesArgs()
        {
        }
    }

    public sealed class URLMapHostRulesGetArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("hosts", required: true)]
        private InputList<string>? _hosts;
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        [Input("pathMatcher", required: true)]
        public Input<string> PathMatcher { get; set; } = null!;

        public URLMapHostRulesGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersArgs : Pulumi.ResourceArgs
    {
        [Input("defaultService")]
        public Input<string>? DefaultService { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("headerAction")]
        public Input<URLMapPathMatchersHeaderActionArgs>? HeaderAction { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("pathRules")]
        private InputList<URLMapPathMatchersPathRulesArgs>? _pathRules;
        public InputList<URLMapPathMatchersPathRulesArgs> PathRules
        {
            get => _pathRules ?? (_pathRules = new InputList<URLMapPathMatchersPathRulesArgs>());
            set => _pathRules = value;
        }

        [Input("routeRules")]
        private InputList<URLMapPathMatchersRouteRulesArgs>? _routeRules;
        public InputList<URLMapPathMatchersRouteRulesArgs> RouteRules
        {
            get => _routeRules ?? (_routeRules = new InputList<URLMapPathMatchersRouteRulesArgs>());
            set => _routeRules = value;
        }

        public URLMapPathMatchersArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersGetArgs : Pulumi.ResourceArgs
    {
        [Input("defaultService")]
        public Input<string>? DefaultService { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("headerAction")]
        public Input<URLMapPathMatchersHeaderActionGetArgs>? HeaderAction { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("pathRules")]
        private InputList<URLMapPathMatchersPathRulesGetArgs>? _pathRules;
        public InputList<URLMapPathMatchersPathRulesGetArgs> PathRules
        {
            get => _pathRules ?? (_pathRules = new InputList<URLMapPathMatchersPathRulesGetArgs>());
            set => _pathRules = value;
        }

        [Input("routeRules")]
        private InputList<URLMapPathMatchersRouteRulesGetArgs>? _routeRules;
        public InputList<URLMapPathMatchersRouteRulesGetArgs> RouteRules
        {
            get => _routeRules ?? (_routeRules = new InputList<URLMapPathMatchersRouteRulesGetArgs>());
            set => _routeRules = value;
        }

        public URLMapPathMatchersGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersHeaderActionArgs : Pulumi.ResourceArgs
    {
        [Input("requestHeadersToAdds")]
        private InputList<URLMapPathMatchersHeaderActionRequestHeadersToAddsArgs>? _requestHeadersToAdds;
        public InputList<URLMapPathMatchersHeaderActionRequestHeadersToAddsArgs> RequestHeadersToAdds
        {
            get => _requestHeadersToAdds ?? (_requestHeadersToAdds = new InputList<URLMapPathMatchersHeaderActionRequestHeadersToAddsArgs>());
            set => _requestHeadersToAdds = value;
        }

        [Input("requestHeadersToRemoves")]
        private InputList<string>? _requestHeadersToRemoves;
        public InputList<string> RequestHeadersToRemoves
        {
            get => _requestHeadersToRemoves ?? (_requestHeadersToRemoves = new InputList<string>());
            set => _requestHeadersToRemoves = value;
        }

        [Input("responseHeadersToAdds")]
        private InputList<URLMapPathMatchersHeaderActionResponseHeadersToAddsArgs>? _responseHeadersToAdds;
        public InputList<URLMapPathMatchersHeaderActionResponseHeadersToAddsArgs> ResponseHeadersToAdds
        {
            get => _responseHeadersToAdds ?? (_responseHeadersToAdds = new InputList<URLMapPathMatchersHeaderActionResponseHeadersToAddsArgs>());
            set => _responseHeadersToAdds = value;
        }

        [Input("responseHeadersToRemoves")]
        private InputList<string>? _responseHeadersToRemoves;
        public InputList<string> ResponseHeadersToRemoves
        {
            get => _responseHeadersToRemoves ?? (_responseHeadersToRemoves = new InputList<string>());
            set => _responseHeadersToRemoves = value;
        }

        public URLMapPathMatchersHeaderActionArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersHeaderActionGetArgs : Pulumi.ResourceArgs
    {
        [Input("requestHeadersToAdds")]
        private InputList<URLMapPathMatchersHeaderActionRequestHeadersToAddsGetArgs>? _requestHeadersToAdds;
        public InputList<URLMapPathMatchersHeaderActionRequestHeadersToAddsGetArgs> RequestHeadersToAdds
        {
            get => _requestHeadersToAdds ?? (_requestHeadersToAdds = new InputList<URLMapPathMatchersHeaderActionRequestHeadersToAddsGetArgs>());
            set => _requestHeadersToAdds = value;
        }

        [Input("requestHeadersToRemoves")]
        private InputList<string>? _requestHeadersToRemoves;
        public InputList<string> RequestHeadersToRemoves
        {
            get => _requestHeadersToRemoves ?? (_requestHeadersToRemoves = new InputList<string>());
            set => _requestHeadersToRemoves = value;
        }

        [Input("responseHeadersToAdds")]
        private InputList<URLMapPathMatchersHeaderActionResponseHeadersToAddsGetArgs>? _responseHeadersToAdds;
        public InputList<URLMapPathMatchersHeaderActionResponseHeadersToAddsGetArgs> ResponseHeadersToAdds
        {
            get => _responseHeadersToAdds ?? (_responseHeadersToAdds = new InputList<URLMapPathMatchersHeaderActionResponseHeadersToAddsGetArgs>());
            set => _responseHeadersToAdds = value;
        }

        [Input("responseHeadersToRemoves")]
        private InputList<string>? _responseHeadersToRemoves;
        public InputList<string> ResponseHeadersToRemoves
        {
            get => _responseHeadersToRemoves ?? (_responseHeadersToRemoves = new InputList<string>());
            set => _responseHeadersToRemoves = value;
        }

        public URLMapPathMatchersHeaderActionGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersHeaderActionRequestHeadersToAddsArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersHeaderActionRequestHeadersToAddsArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersHeaderActionRequestHeadersToAddsGetArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersHeaderActionRequestHeadersToAddsGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersHeaderActionResponseHeadersToAddsArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersHeaderActionResponseHeadersToAddsArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersHeaderActionResponseHeadersToAddsGetArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersHeaderActionResponseHeadersToAddsGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesArgs : Pulumi.ResourceArgs
    {
        [Input("paths", required: true)]
        private InputList<string>? _paths;
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        [Input("routeAction")]
        public Input<URLMapPathMatchersPathRulesRouteActionArgs>? RouteAction { get; set; }

        [Input("service")]
        public Input<string>? Service { get; set; }

        [Input("urlRedirect")]
        public Input<URLMapPathMatchersPathRulesUrlRedirectArgs>? UrlRedirect { get; set; }

        public URLMapPathMatchersPathRulesArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesGetArgs : Pulumi.ResourceArgs
    {
        [Input("paths", required: true)]
        private InputList<string>? _paths;
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        [Input("routeAction")]
        public Input<URLMapPathMatchersPathRulesRouteActionGetArgs>? RouteAction { get; set; }

        [Input("service")]
        public Input<string>? Service { get; set; }

        [Input("urlRedirect")]
        public Input<URLMapPathMatchersPathRulesUrlRedirectGetArgs>? UrlRedirect { get; set; }

        public URLMapPathMatchersPathRulesGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionArgs : Pulumi.ResourceArgs
    {
        [Input("corsPolicy")]
        public Input<URLMapPathMatchersPathRulesRouteActionCorsPolicyArgs>? CorsPolicy { get; set; }

        [Input("faultInjectionPolicy")]
        public Input<URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyArgs>? FaultInjectionPolicy { get; set; }

        [Input("requestMirrorPolicy")]
        public Input<URLMapPathMatchersPathRulesRouteActionRequestMirrorPolicyArgs>? RequestMirrorPolicy { get; set; }

        [Input("retryPolicy")]
        public Input<URLMapPathMatchersPathRulesRouteActionRetryPolicyArgs>? RetryPolicy { get; set; }

        [Input("timeout")]
        public Input<URLMapPathMatchersPathRulesRouteActionTimeoutArgs>? Timeout { get; set; }

        [Input("urlRewrite")]
        public Input<URLMapPathMatchersPathRulesRouteActionUrlRewriteArgs>? UrlRewrite { get; set; }

        [Input("weightedBackendServices")]
        private InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesArgs>? _weightedBackendServices;
        public InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesArgs> WeightedBackendServices
        {
            get => _weightedBackendServices ?? (_weightedBackendServices = new InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesArgs>());
            set => _weightedBackendServices = value;
        }

        public URLMapPathMatchersPathRulesRouteActionArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionCorsPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("allowCredentials")]
        public Input<bool>? AllowCredentials { get; set; }

        [Input("allowHeaders")]
        private InputList<string>? _allowHeaders;
        public InputList<string> AllowHeaders
        {
            get => _allowHeaders ?? (_allowHeaders = new InputList<string>());
            set => _allowHeaders = value;
        }

        [Input("allowMethods")]
        private InputList<string>? _allowMethods;
        public InputList<string> AllowMethods
        {
            get => _allowMethods ?? (_allowMethods = new InputList<string>());
            set => _allowMethods = value;
        }

        [Input("allowOriginRegexes")]
        private InputList<string>? _allowOriginRegexes;
        public InputList<string> AllowOriginRegexes
        {
            get => _allowOriginRegexes ?? (_allowOriginRegexes = new InputList<string>());
            set => _allowOriginRegexes = value;
        }

        [Input("allowOrigins")]
        private InputList<string>? _allowOrigins;
        public InputList<string> AllowOrigins
        {
            get => _allowOrigins ?? (_allowOrigins = new InputList<string>());
            set => _allowOrigins = value;
        }

        [Input("disabled", required: true)]
        public Input<bool> Disabled { get; set; } = null!;

        [Input("exposeHeaders")]
        private InputList<string>? _exposeHeaders;
        public InputList<string> ExposeHeaders
        {
            get => _exposeHeaders ?? (_exposeHeaders = new InputList<string>());
            set => _exposeHeaders = value;
        }

        [Input("maxAge")]
        public Input<int>? MaxAge { get; set; }

        public URLMapPathMatchersPathRulesRouteActionCorsPolicyArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionCorsPolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("allowCredentials")]
        public Input<bool>? AllowCredentials { get; set; }

        [Input("allowHeaders")]
        private InputList<string>? _allowHeaders;
        public InputList<string> AllowHeaders
        {
            get => _allowHeaders ?? (_allowHeaders = new InputList<string>());
            set => _allowHeaders = value;
        }

        [Input("allowMethods")]
        private InputList<string>? _allowMethods;
        public InputList<string> AllowMethods
        {
            get => _allowMethods ?? (_allowMethods = new InputList<string>());
            set => _allowMethods = value;
        }

        [Input("allowOriginRegexes")]
        private InputList<string>? _allowOriginRegexes;
        public InputList<string> AllowOriginRegexes
        {
            get => _allowOriginRegexes ?? (_allowOriginRegexes = new InputList<string>());
            set => _allowOriginRegexes = value;
        }

        [Input("allowOrigins")]
        private InputList<string>? _allowOrigins;
        public InputList<string> AllowOrigins
        {
            get => _allowOrigins ?? (_allowOrigins = new InputList<string>());
            set => _allowOrigins = value;
        }

        [Input("disabled", required: true)]
        public Input<bool> Disabled { get; set; } = null!;

        [Input("exposeHeaders")]
        private InputList<string>? _exposeHeaders;
        public InputList<string> ExposeHeaders
        {
            get => _exposeHeaders ?? (_exposeHeaders = new InputList<string>());
            set => _exposeHeaders = value;
        }

        [Input("maxAge")]
        public Input<int>? MaxAge { get; set; }

        public URLMapPathMatchersPathRulesRouteActionCorsPolicyGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyAbortArgs : Pulumi.ResourceArgs
    {
        [Input("httpStatus", required: true)]
        public Input<int> HttpStatus { get; set; } = null!;

        [Input("percentage", required: true)]
        public Input<double> Percentage { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyAbortArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyAbortGetArgs : Pulumi.ResourceArgs
    {
        [Input("httpStatus", required: true)]
        public Input<int> HttpStatus { get; set; } = null!;

        [Input("percentage", required: true)]
        public Input<double> Percentage { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyAbortGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("abort")]
        public Input<URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyAbortArgs>? Abort { get; set; }

        [Input("delay")]
        public Input<URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayArgs>? Delay { get; set; }

        public URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayArgs : Pulumi.ResourceArgs
    {
        [Input("fixedDelay", required: true)]
        public Input<URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayFixedDelayArgs> FixedDelay { get; set; } = null!;

        [Input("percentage", required: true)]
        public Input<double> Percentage { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayFixedDelayArgs : Pulumi.ResourceArgs
    {
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        [Input("seconds", required: true)]
        public Input<string> Seconds { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayFixedDelayArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayFixedDelayGetArgs : Pulumi.ResourceArgs
    {
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        [Input("seconds", required: true)]
        public Input<string> Seconds { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayFixedDelayGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayGetArgs : Pulumi.ResourceArgs
    {
        [Input("fixedDelay", required: true)]
        public Input<URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayFixedDelayGetArgs> FixedDelay { get; set; } = null!;

        [Input("percentage", required: true)]
        public Input<double> Percentage { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("abort")]
        public Input<URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyAbortGetArgs>? Abort { get; set; }

        [Input("delay")]
        public Input<URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayGetArgs>? Delay { get; set; }

        public URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionGetArgs : Pulumi.ResourceArgs
    {
        [Input("corsPolicy")]
        public Input<URLMapPathMatchersPathRulesRouteActionCorsPolicyGetArgs>? CorsPolicy { get; set; }

        [Input("faultInjectionPolicy")]
        public Input<URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyGetArgs>? FaultInjectionPolicy { get; set; }

        [Input("requestMirrorPolicy")]
        public Input<URLMapPathMatchersPathRulesRouteActionRequestMirrorPolicyGetArgs>? RequestMirrorPolicy { get; set; }

        [Input("retryPolicy")]
        public Input<URLMapPathMatchersPathRulesRouteActionRetryPolicyGetArgs>? RetryPolicy { get; set; }

        [Input("timeout")]
        public Input<URLMapPathMatchersPathRulesRouteActionTimeoutGetArgs>? Timeout { get; set; }

        [Input("urlRewrite")]
        public Input<URLMapPathMatchersPathRulesRouteActionUrlRewriteGetArgs>? UrlRewrite { get; set; }

        [Input("weightedBackendServices")]
        private InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesGetArgs>? _weightedBackendServices;
        public InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesGetArgs> WeightedBackendServices
        {
            get => _weightedBackendServices ?? (_weightedBackendServices = new InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesGetArgs>());
            set => _weightedBackendServices = value;
        }

        public URLMapPathMatchersPathRulesRouteActionGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionRequestMirrorPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("backendService", required: true)]
        public Input<string> BackendService { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionRequestMirrorPolicyArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionRequestMirrorPolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("backendService", required: true)]
        public Input<string> BackendService { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionRequestMirrorPolicyGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionRetryPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("numRetries")]
        public Input<int>? NumRetries { get; set; }

        [Input("perTryTimeout")]
        public Input<URLMapPathMatchersPathRulesRouteActionRetryPolicyPerTryTimeoutArgs>? PerTryTimeout { get; set; }

        [Input("retryConditions")]
        private InputList<string>? _retryConditions;
        public InputList<string> RetryConditions
        {
            get => _retryConditions ?? (_retryConditions = new InputList<string>());
            set => _retryConditions = value;
        }

        public URLMapPathMatchersPathRulesRouteActionRetryPolicyArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionRetryPolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("numRetries")]
        public Input<int>? NumRetries { get; set; }

        [Input("perTryTimeout")]
        public Input<URLMapPathMatchersPathRulesRouteActionRetryPolicyPerTryTimeoutGetArgs>? PerTryTimeout { get; set; }

        [Input("retryConditions")]
        private InputList<string>? _retryConditions;
        public InputList<string> RetryConditions
        {
            get => _retryConditions ?? (_retryConditions = new InputList<string>());
            set => _retryConditions = value;
        }

        public URLMapPathMatchersPathRulesRouteActionRetryPolicyGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionRetryPolicyPerTryTimeoutArgs : Pulumi.ResourceArgs
    {
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        [Input("seconds", required: true)]
        public Input<string> Seconds { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionRetryPolicyPerTryTimeoutArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionRetryPolicyPerTryTimeoutGetArgs : Pulumi.ResourceArgs
    {
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        [Input("seconds", required: true)]
        public Input<string> Seconds { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionRetryPolicyPerTryTimeoutGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionTimeoutArgs : Pulumi.ResourceArgs
    {
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        [Input("seconds", required: true)]
        public Input<string> Seconds { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionTimeoutArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionTimeoutGetArgs : Pulumi.ResourceArgs
    {
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        [Input("seconds", required: true)]
        public Input<string> Seconds { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionTimeoutGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionUrlRewriteArgs : Pulumi.ResourceArgs
    {
        [Input("hostRewrite")]
        public Input<string>? HostRewrite { get; set; }

        [Input("pathPrefixRewrite")]
        public Input<string>? PathPrefixRewrite { get; set; }

        public URLMapPathMatchersPathRulesRouteActionUrlRewriteArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionUrlRewriteGetArgs : Pulumi.ResourceArgs
    {
        [Input("hostRewrite")]
        public Input<string>? HostRewrite { get; set; }

        [Input("pathPrefixRewrite")]
        public Input<string>? PathPrefixRewrite { get; set; }

        public URLMapPathMatchersPathRulesRouteActionUrlRewriteGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesArgs : Pulumi.ResourceArgs
    {
        [Input("backendService", required: true)]
        public Input<string> BackendService { get; set; } = null!;

        [Input("headerAction")]
        public Input<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionArgs>? HeaderAction { get; set; }

        [Input("weight", required: true)]
        public Input<int> Weight { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesGetArgs : Pulumi.ResourceArgs
    {
        [Input("backendService", required: true)]
        public Input<string> BackendService { get; set; } = null!;

        [Input("headerAction")]
        public Input<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionGetArgs>? HeaderAction { get; set; }

        [Input("weight", required: true)]
        public Input<int> Weight { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionArgs : Pulumi.ResourceArgs
    {
        [Input("requestHeadersToAdds")]
        private InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsArgs>? _requestHeadersToAdds;
        public InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsArgs> RequestHeadersToAdds
        {
            get => _requestHeadersToAdds ?? (_requestHeadersToAdds = new InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsArgs>());
            set => _requestHeadersToAdds = value;
        }

        [Input("requestHeadersToRemoves")]
        private InputList<string>? _requestHeadersToRemoves;
        public InputList<string> RequestHeadersToRemoves
        {
            get => _requestHeadersToRemoves ?? (_requestHeadersToRemoves = new InputList<string>());
            set => _requestHeadersToRemoves = value;
        }

        [Input("responseHeadersToAdds")]
        private InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsArgs>? _responseHeadersToAdds;
        public InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsArgs> ResponseHeadersToAdds
        {
            get => _responseHeadersToAdds ?? (_responseHeadersToAdds = new InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsArgs>());
            set => _responseHeadersToAdds = value;
        }

        [Input("responseHeadersToRemoves")]
        private InputList<string>? _responseHeadersToRemoves;
        public InputList<string> ResponseHeadersToRemoves
        {
            get => _responseHeadersToRemoves ?? (_responseHeadersToRemoves = new InputList<string>());
            set => _responseHeadersToRemoves = value;
        }

        public URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionGetArgs : Pulumi.ResourceArgs
    {
        [Input("requestHeadersToAdds")]
        private InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsGetArgs>? _requestHeadersToAdds;
        public InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsGetArgs> RequestHeadersToAdds
        {
            get => _requestHeadersToAdds ?? (_requestHeadersToAdds = new InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsGetArgs>());
            set => _requestHeadersToAdds = value;
        }

        [Input("requestHeadersToRemoves")]
        private InputList<string>? _requestHeadersToRemoves;
        public InputList<string> RequestHeadersToRemoves
        {
            get => _requestHeadersToRemoves ?? (_requestHeadersToRemoves = new InputList<string>());
            set => _requestHeadersToRemoves = value;
        }

        [Input("responseHeadersToAdds")]
        private InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsGetArgs>? _responseHeadersToAdds;
        public InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsGetArgs> ResponseHeadersToAdds
        {
            get => _responseHeadersToAdds ?? (_responseHeadersToAdds = new InputList<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsGetArgs>());
            set => _responseHeadersToAdds = value;
        }

        [Input("responseHeadersToRemoves")]
        private InputList<string>? _responseHeadersToRemoves;
        public InputList<string> ResponseHeadersToRemoves
        {
            get => _responseHeadersToRemoves ?? (_responseHeadersToRemoves = new InputList<string>());
            set => _responseHeadersToRemoves = value;
        }

        public URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsGetArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsGetArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesUrlRedirectArgs : Pulumi.ResourceArgs
    {
        [Input("hostRedirect")]
        public Input<string>? HostRedirect { get; set; }

        [Input("httpsRedirect")]
        public Input<bool>? HttpsRedirect { get; set; }

        [Input("pathRedirect")]
        public Input<string>? PathRedirect { get; set; }

        [Input("prefixRedirect")]
        public Input<string>? PrefixRedirect { get; set; }

        [Input("redirectResponseCode")]
        public Input<string>? RedirectResponseCode { get; set; }

        [Input("stripQuery", required: true)]
        public Input<bool> StripQuery { get; set; } = null!;

        public URLMapPathMatchersPathRulesUrlRedirectArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersPathRulesUrlRedirectGetArgs : Pulumi.ResourceArgs
    {
        [Input("hostRedirect")]
        public Input<string>? HostRedirect { get; set; }

        [Input("httpsRedirect")]
        public Input<bool>? HttpsRedirect { get; set; }

        [Input("pathRedirect")]
        public Input<string>? PathRedirect { get; set; }

        [Input("prefixRedirect")]
        public Input<string>? PrefixRedirect { get; set; }

        [Input("redirectResponseCode")]
        public Input<string>? RedirectResponseCode { get; set; }

        [Input("stripQuery", required: true)]
        public Input<bool> StripQuery { get; set; } = null!;

        public URLMapPathMatchersPathRulesUrlRedirectGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesArgs : Pulumi.ResourceArgs
    {
        [Input("headerAction")]
        public Input<URLMapPathMatchersRouteRulesHeaderActionArgs>? HeaderAction { get; set; }

        [Input("matchRules")]
        private InputList<URLMapPathMatchersRouteRulesMatchRulesArgs>? _matchRules;
        public InputList<URLMapPathMatchersRouteRulesMatchRulesArgs> MatchRules
        {
            get => _matchRules ?? (_matchRules = new InputList<URLMapPathMatchersRouteRulesMatchRulesArgs>());
            set => _matchRules = value;
        }

        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        [Input("routeAction")]
        public Input<URLMapPathMatchersRouteRulesRouteActionArgs>? RouteAction { get; set; }

        [Input("service")]
        public Input<string>? Service { get; set; }

        [Input("urlRedirect")]
        public Input<URLMapPathMatchersRouteRulesUrlRedirectArgs>? UrlRedirect { get; set; }

        public URLMapPathMatchersRouteRulesArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesGetArgs : Pulumi.ResourceArgs
    {
        [Input("headerAction")]
        public Input<URLMapPathMatchersRouteRulesHeaderActionGetArgs>? HeaderAction { get; set; }

        [Input("matchRules")]
        private InputList<URLMapPathMatchersRouteRulesMatchRulesGetArgs>? _matchRules;
        public InputList<URLMapPathMatchersRouteRulesMatchRulesGetArgs> MatchRules
        {
            get => _matchRules ?? (_matchRules = new InputList<URLMapPathMatchersRouteRulesMatchRulesGetArgs>());
            set => _matchRules = value;
        }

        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        [Input("routeAction")]
        public Input<URLMapPathMatchersRouteRulesRouteActionGetArgs>? RouteAction { get; set; }

        [Input("service")]
        public Input<string>? Service { get; set; }

        [Input("urlRedirect")]
        public Input<URLMapPathMatchersRouteRulesUrlRedirectGetArgs>? UrlRedirect { get; set; }

        public URLMapPathMatchersRouteRulesGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesHeaderActionArgs : Pulumi.ResourceArgs
    {
        [Input("requestHeadersToAdds")]
        private InputList<URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAddsArgs>? _requestHeadersToAdds;
        public InputList<URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAddsArgs> RequestHeadersToAdds
        {
            get => _requestHeadersToAdds ?? (_requestHeadersToAdds = new InputList<URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAddsArgs>());
            set => _requestHeadersToAdds = value;
        }

        [Input("requestHeadersToRemoves")]
        private InputList<string>? _requestHeadersToRemoves;
        public InputList<string> RequestHeadersToRemoves
        {
            get => _requestHeadersToRemoves ?? (_requestHeadersToRemoves = new InputList<string>());
            set => _requestHeadersToRemoves = value;
        }

        [Input("responseHeadersToAdds")]
        private InputList<URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAddsArgs>? _responseHeadersToAdds;
        public InputList<URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAddsArgs> ResponseHeadersToAdds
        {
            get => _responseHeadersToAdds ?? (_responseHeadersToAdds = new InputList<URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAddsArgs>());
            set => _responseHeadersToAdds = value;
        }

        [Input("responseHeadersToRemoves")]
        private InputList<string>? _responseHeadersToRemoves;
        public InputList<string> ResponseHeadersToRemoves
        {
            get => _responseHeadersToRemoves ?? (_responseHeadersToRemoves = new InputList<string>());
            set => _responseHeadersToRemoves = value;
        }

        public URLMapPathMatchersRouteRulesHeaderActionArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesHeaderActionGetArgs : Pulumi.ResourceArgs
    {
        [Input("requestHeadersToAdds")]
        private InputList<URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAddsGetArgs>? _requestHeadersToAdds;
        public InputList<URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAddsGetArgs> RequestHeadersToAdds
        {
            get => _requestHeadersToAdds ?? (_requestHeadersToAdds = new InputList<URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAddsGetArgs>());
            set => _requestHeadersToAdds = value;
        }

        [Input("requestHeadersToRemoves")]
        private InputList<string>? _requestHeadersToRemoves;
        public InputList<string> RequestHeadersToRemoves
        {
            get => _requestHeadersToRemoves ?? (_requestHeadersToRemoves = new InputList<string>());
            set => _requestHeadersToRemoves = value;
        }

        [Input("responseHeadersToAdds")]
        private InputList<URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAddsGetArgs>? _responseHeadersToAdds;
        public InputList<URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAddsGetArgs> ResponseHeadersToAdds
        {
            get => _responseHeadersToAdds ?? (_responseHeadersToAdds = new InputList<URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAddsGetArgs>());
            set => _responseHeadersToAdds = value;
        }

        [Input("responseHeadersToRemoves")]
        private InputList<string>? _responseHeadersToRemoves;
        public InputList<string> ResponseHeadersToRemoves
        {
            get => _responseHeadersToRemoves ?? (_responseHeadersToRemoves = new InputList<string>());
            set => _responseHeadersToRemoves = value;
        }

        public URLMapPathMatchersRouteRulesHeaderActionGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAddsArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAddsArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAddsGetArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAddsGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAddsArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAddsArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAddsGetArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAddsGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesMatchRulesArgs : Pulumi.ResourceArgs
    {
        [Input("fullPathMatch")]
        public Input<string>? FullPathMatch { get; set; }

        [Input("headerMatches")]
        private InputList<URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesArgs>? _headerMatches;
        public InputList<URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesArgs> HeaderMatches
        {
            get => _headerMatches ?? (_headerMatches = new InputList<URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesArgs>());
            set => _headerMatches = value;
        }

        [Input("ignoreCase")]
        public Input<bool>? IgnoreCase { get; set; }

        [Input("metadataFilters")]
        private InputList<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersArgs>? _metadataFilters;
        public InputList<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersArgs> MetadataFilters
        {
            get => _metadataFilters ?? (_metadataFilters = new InputList<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersArgs>());
            set => _metadataFilters = value;
        }

        [Input("prefixMatch")]
        public Input<string>? PrefixMatch { get; set; }

        [Input("queryParameterMatches")]
        private InputList<URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatchesArgs>? _queryParameterMatches;
        public InputList<URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatchesArgs> QueryParameterMatches
        {
            get => _queryParameterMatches ?? (_queryParameterMatches = new InputList<URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatchesArgs>());
            set => _queryParameterMatches = value;
        }

        [Input("regexMatch")]
        public Input<string>? RegexMatch { get; set; }

        public URLMapPathMatchersRouteRulesMatchRulesArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesMatchRulesGetArgs : Pulumi.ResourceArgs
    {
        [Input("fullPathMatch")]
        public Input<string>? FullPathMatch { get; set; }

        [Input("headerMatches")]
        private InputList<URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesGetArgs>? _headerMatches;
        public InputList<URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesGetArgs> HeaderMatches
        {
            get => _headerMatches ?? (_headerMatches = new InputList<URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesGetArgs>());
            set => _headerMatches = value;
        }

        [Input("ignoreCase")]
        public Input<bool>? IgnoreCase { get; set; }

        [Input("metadataFilters")]
        private InputList<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersGetArgs>? _metadataFilters;
        public InputList<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersGetArgs> MetadataFilters
        {
            get => _metadataFilters ?? (_metadataFilters = new InputList<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersGetArgs>());
            set => _metadataFilters = value;
        }

        [Input("prefixMatch")]
        public Input<string>? PrefixMatch { get; set; }

        [Input("queryParameterMatches")]
        private InputList<URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatchesGetArgs>? _queryParameterMatches;
        public InputList<URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatchesGetArgs> QueryParameterMatches
        {
            get => _queryParameterMatches ?? (_queryParameterMatches = new InputList<URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatchesGetArgs>());
            set => _queryParameterMatches = value;
        }

        [Input("regexMatch")]
        public Input<string>? RegexMatch { get; set; }

        public URLMapPathMatchersRouteRulesMatchRulesGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesArgs : Pulumi.ResourceArgs
    {
        [Input("exactMatch")]
        public Input<string>? ExactMatch { get; set; }

        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("invertMatch")]
        public Input<bool>? InvertMatch { get; set; }

        [Input("prefixMatch")]
        public Input<string>? PrefixMatch { get; set; }

        [Input("presentMatch")]
        public Input<bool>? PresentMatch { get; set; }

        [Input("rangeMatch")]
        public Input<URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesRangeMatchArgs>? RangeMatch { get; set; }

        [Input("regexMatch")]
        public Input<string>? RegexMatch { get; set; }

        [Input("suffixMatch")]
        public Input<string>? SuffixMatch { get; set; }

        public URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesGetArgs : Pulumi.ResourceArgs
    {
        [Input("exactMatch")]
        public Input<string>? ExactMatch { get; set; }

        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("invertMatch")]
        public Input<bool>? InvertMatch { get; set; }

        [Input("prefixMatch")]
        public Input<string>? PrefixMatch { get; set; }

        [Input("presentMatch")]
        public Input<bool>? PresentMatch { get; set; }

        [Input("rangeMatch")]
        public Input<URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesRangeMatchGetArgs>? RangeMatch { get; set; }

        [Input("regexMatch")]
        public Input<string>? RegexMatch { get; set; }

        [Input("suffixMatch")]
        public Input<string>? SuffixMatch { get; set; }

        public URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesRangeMatchArgs : Pulumi.ResourceArgs
    {
        [Input("rangeEnd", required: true)]
        public Input<int> RangeEnd { get; set; } = null!;

        [Input("rangeStart", required: true)]
        public Input<int> RangeStart { get; set; } = null!;

        public URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesRangeMatchArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesRangeMatchGetArgs : Pulumi.ResourceArgs
    {
        [Input("rangeEnd", required: true)]
        public Input<int> RangeEnd { get; set; } = null!;

        [Input("rangeStart", required: true)]
        public Input<int> RangeStart { get; set; } = null!;

        public URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesRangeMatchGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersArgs : Pulumi.ResourceArgs
    {
        [Input("filterLabels", required: true)]
        private InputList<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabelsArgs>? _filterLabels;
        public InputList<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabelsArgs> FilterLabels
        {
            get => _filterLabels ?? (_filterLabels = new InputList<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabelsArgs>());
            set => _filterLabels = value;
        }

        [Input("filterMatchCriteria", required: true)]
        public Input<string> FilterMatchCriteria { get; set; } = null!;

        public URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabelsArgs : Pulumi.ResourceArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabelsArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabelsGetArgs : Pulumi.ResourceArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabelsGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersGetArgs : Pulumi.ResourceArgs
    {
        [Input("filterLabels", required: true)]
        private InputList<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabelsGetArgs>? _filterLabels;
        public InputList<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabelsGetArgs> FilterLabels
        {
            get => _filterLabels ?? (_filterLabels = new InputList<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabelsGetArgs>());
            set => _filterLabels = value;
        }

        [Input("filterMatchCriteria", required: true)]
        public Input<string> FilterMatchCriteria { get; set; } = null!;

        public URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatchesArgs : Pulumi.ResourceArgs
    {
        [Input("exactMatch")]
        public Input<string>? ExactMatch { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("presentMatch")]
        public Input<bool>? PresentMatch { get; set; }

        [Input("regexMatch")]
        public Input<string>? RegexMatch { get; set; }

        public URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatchesArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatchesGetArgs : Pulumi.ResourceArgs
    {
        [Input("exactMatch")]
        public Input<string>? ExactMatch { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("presentMatch")]
        public Input<bool>? PresentMatch { get; set; }

        [Input("regexMatch")]
        public Input<string>? RegexMatch { get; set; }

        public URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatchesGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionArgs : Pulumi.ResourceArgs
    {
        [Input("corsPolicy")]
        public Input<URLMapPathMatchersRouteRulesRouteActionCorsPolicyArgs>? CorsPolicy { get; set; }

        [Input("faultInjectionPolicy")]
        public Input<URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyArgs>? FaultInjectionPolicy { get; set; }

        [Input("requestMirrorPolicy")]
        public Input<URLMapPathMatchersRouteRulesRouteActionRequestMirrorPolicyArgs>? RequestMirrorPolicy { get; set; }

        [Input("retryPolicy")]
        public Input<URLMapPathMatchersRouteRulesRouteActionRetryPolicyArgs>? RetryPolicy { get; set; }

        [Input("timeout")]
        public Input<URLMapPathMatchersRouteRulesRouteActionTimeoutArgs>? Timeout { get; set; }

        [Input("urlRewrite")]
        public Input<URLMapPathMatchersRouteRulesRouteActionUrlRewriteArgs>? UrlRewrite { get; set; }

        [Input("weightedBackendServices")]
        private InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesArgs>? _weightedBackendServices;
        public InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesArgs> WeightedBackendServices
        {
            get => _weightedBackendServices ?? (_weightedBackendServices = new InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesArgs>());
            set => _weightedBackendServices = value;
        }

        public URLMapPathMatchersRouteRulesRouteActionArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionCorsPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("allowCredentials")]
        public Input<bool>? AllowCredentials { get; set; }

        [Input("allowHeaders")]
        private InputList<string>? _allowHeaders;
        public InputList<string> AllowHeaders
        {
            get => _allowHeaders ?? (_allowHeaders = new InputList<string>());
            set => _allowHeaders = value;
        }

        [Input("allowMethods")]
        private InputList<string>? _allowMethods;
        public InputList<string> AllowMethods
        {
            get => _allowMethods ?? (_allowMethods = new InputList<string>());
            set => _allowMethods = value;
        }

        [Input("allowOriginRegexes")]
        private InputList<string>? _allowOriginRegexes;
        public InputList<string> AllowOriginRegexes
        {
            get => _allowOriginRegexes ?? (_allowOriginRegexes = new InputList<string>());
            set => _allowOriginRegexes = value;
        }

        [Input("allowOrigins")]
        private InputList<string>? _allowOrigins;
        public InputList<string> AllowOrigins
        {
            get => _allowOrigins ?? (_allowOrigins = new InputList<string>());
            set => _allowOrigins = value;
        }

        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("exposeHeaders")]
        private InputList<string>? _exposeHeaders;
        public InputList<string> ExposeHeaders
        {
            get => _exposeHeaders ?? (_exposeHeaders = new InputList<string>());
            set => _exposeHeaders = value;
        }

        [Input("maxAge")]
        public Input<int>? MaxAge { get; set; }

        public URLMapPathMatchersRouteRulesRouteActionCorsPolicyArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionCorsPolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("allowCredentials")]
        public Input<bool>? AllowCredentials { get; set; }

        [Input("allowHeaders")]
        private InputList<string>? _allowHeaders;
        public InputList<string> AllowHeaders
        {
            get => _allowHeaders ?? (_allowHeaders = new InputList<string>());
            set => _allowHeaders = value;
        }

        [Input("allowMethods")]
        private InputList<string>? _allowMethods;
        public InputList<string> AllowMethods
        {
            get => _allowMethods ?? (_allowMethods = new InputList<string>());
            set => _allowMethods = value;
        }

        [Input("allowOriginRegexes")]
        private InputList<string>? _allowOriginRegexes;
        public InputList<string> AllowOriginRegexes
        {
            get => _allowOriginRegexes ?? (_allowOriginRegexes = new InputList<string>());
            set => _allowOriginRegexes = value;
        }

        [Input("allowOrigins")]
        private InputList<string>? _allowOrigins;
        public InputList<string> AllowOrigins
        {
            get => _allowOrigins ?? (_allowOrigins = new InputList<string>());
            set => _allowOrigins = value;
        }

        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("exposeHeaders")]
        private InputList<string>? _exposeHeaders;
        public InputList<string> ExposeHeaders
        {
            get => _exposeHeaders ?? (_exposeHeaders = new InputList<string>());
            set => _exposeHeaders = value;
        }

        [Input("maxAge")]
        public Input<int>? MaxAge { get; set; }

        public URLMapPathMatchersRouteRulesRouteActionCorsPolicyGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyAbortArgs : Pulumi.ResourceArgs
    {
        [Input("httpStatus")]
        public Input<int>? HttpStatus { get; set; }

        [Input("percentage")]
        public Input<double>? Percentage { get; set; }

        public URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyAbortArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyAbortGetArgs : Pulumi.ResourceArgs
    {
        [Input("httpStatus")]
        public Input<int>? HttpStatus { get; set; }

        [Input("percentage")]
        public Input<double>? Percentage { get; set; }

        public URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyAbortGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("abort")]
        public Input<URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyAbortArgs>? Abort { get; set; }

        [Input("delay")]
        public Input<URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayArgs>? Delay { get; set; }

        public URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayArgs : Pulumi.ResourceArgs
    {
        [Input("fixedDelay")]
        public Input<URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayArgs>? FixedDelay { get; set; }

        [Input("percentage")]
        public Input<double>? Percentage { get; set; }

        public URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayArgs : Pulumi.ResourceArgs
    {
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        [Input("seconds", required: true)]
        public Input<string> Seconds { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayGetArgs : Pulumi.ResourceArgs
    {
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        [Input("seconds", required: true)]
        public Input<string> Seconds { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayGetArgs : Pulumi.ResourceArgs
    {
        [Input("fixedDelay")]
        public Input<URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayGetArgs>? FixedDelay { get; set; }

        [Input("percentage")]
        public Input<double>? Percentage { get; set; }

        public URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("abort")]
        public Input<URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyAbortGetArgs>? Abort { get; set; }

        [Input("delay")]
        public Input<URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayGetArgs>? Delay { get; set; }

        public URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionGetArgs : Pulumi.ResourceArgs
    {
        [Input("corsPolicy")]
        public Input<URLMapPathMatchersRouteRulesRouteActionCorsPolicyGetArgs>? CorsPolicy { get; set; }

        [Input("faultInjectionPolicy")]
        public Input<URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyGetArgs>? FaultInjectionPolicy { get; set; }

        [Input("requestMirrorPolicy")]
        public Input<URLMapPathMatchersRouteRulesRouteActionRequestMirrorPolicyGetArgs>? RequestMirrorPolicy { get; set; }

        [Input("retryPolicy")]
        public Input<URLMapPathMatchersRouteRulesRouteActionRetryPolicyGetArgs>? RetryPolicy { get; set; }

        [Input("timeout")]
        public Input<URLMapPathMatchersRouteRulesRouteActionTimeoutGetArgs>? Timeout { get; set; }

        [Input("urlRewrite")]
        public Input<URLMapPathMatchersRouteRulesRouteActionUrlRewriteGetArgs>? UrlRewrite { get; set; }

        [Input("weightedBackendServices")]
        private InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesGetArgs>? _weightedBackendServices;
        public InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesGetArgs> WeightedBackendServices
        {
            get => _weightedBackendServices ?? (_weightedBackendServices = new InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesGetArgs>());
            set => _weightedBackendServices = value;
        }

        public URLMapPathMatchersRouteRulesRouteActionGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionRequestMirrorPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("backendService", required: true)]
        public Input<string> BackendService { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionRequestMirrorPolicyArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionRequestMirrorPolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("backendService", required: true)]
        public Input<string> BackendService { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionRequestMirrorPolicyGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionRetryPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("numRetries", required: true)]
        public Input<int> NumRetries { get; set; } = null!;

        [Input("perTryTimeout")]
        public Input<URLMapPathMatchersRouteRulesRouteActionRetryPolicyPerTryTimeoutArgs>? PerTryTimeout { get; set; }

        [Input("retryConditions")]
        private InputList<string>? _retryConditions;
        public InputList<string> RetryConditions
        {
            get => _retryConditions ?? (_retryConditions = new InputList<string>());
            set => _retryConditions = value;
        }

        public URLMapPathMatchersRouteRulesRouteActionRetryPolicyArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionRetryPolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("numRetries", required: true)]
        public Input<int> NumRetries { get; set; } = null!;

        [Input("perTryTimeout")]
        public Input<URLMapPathMatchersRouteRulesRouteActionRetryPolicyPerTryTimeoutGetArgs>? PerTryTimeout { get; set; }

        [Input("retryConditions")]
        private InputList<string>? _retryConditions;
        public InputList<string> RetryConditions
        {
            get => _retryConditions ?? (_retryConditions = new InputList<string>());
            set => _retryConditions = value;
        }

        public URLMapPathMatchersRouteRulesRouteActionRetryPolicyGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionRetryPolicyPerTryTimeoutArgs : Pulumi.ResourceArgs
    {
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        [Input("seconds", required: true)]
        public Input<string> Seconds { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionRetryPolicyPerTryTimeoutArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionRetryPolicyPerTryTimeoutGetArgs : Pulumi.ResourceArgs
    {
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        [Input("seconds", required: true)]
        public Input<string> Seconds { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionRetryPolicyPerTryTimeoutGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionTimeoutArgs : Pulumi.ResourceArgs
    {
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        [Input("seconds", required: true)]
        public Input<string> Seconds { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionTimeoutArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionTimeoutGetArgs : Pulumi.ResourceArgs
    {
        [Input("nanos")]
        public Input<int>? Nanos { get; set; }

        [Input("seconds", required: true)]
        public Input<string> Seconds { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionTimeoutGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionUrlRewriteArgs : Pulumi.ResourceArgs
    {
        [Input("hostRewrite")]
        public Input<string>? HostRewrite { get; set; }

        [Input("pathPrefixRewrite")]
        public Input<string>? PathPrefixRewrite { get; set; }

        public URLMapPathMatchersRouteRulesRouteActionUrlRewriteArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionUrlRewriteGetArgs : Pulumi.ResourceArgs
    {
        [Input("hostRewrite")]
        public Input<string>? HostRewrite { get; set; }

        [Input("pathPrefixRewrite")]
        public Input<string>? PathPrefixRewrite { get; set; }

        public URLMapPathMatchersRouteRulesRouteActionUrlRewriteGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesArgs : Pulumi.ResourceArgs
    {
        [Input("backendService", required: true)]
        public Input<string> BackendService { get; set; } = null!;

        [Input("headerAction")]
        public Input<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionArgs>? HeaderAction { get; set; }

        [Input("weight", required: true)]
        public Input<int> Weight { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesGetArgs : Pulumi.ResourceArgs
    {
        [Input("backendService", required: true)]
        public Input<string> BackendService { get; set; } = null!;

        [Input("headerAction")]
        public Input<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionGetArgs>? HeaderAction { get; set; }

        [Input("weight", required: true)]
        public Input<int> Weight { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionArgs : Pulumi.ResourceArgs
    {
        [Input("requestHeadersToAdds")]
        private InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsArgs>? _requestHeadersToAdds;
        public InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsArgs> RequestHeadersToAdds
        {
            get => _requestHeadersToAdds ?? (_requestHeadersToAdds = new InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsArgs>());
            set => _requestHeadersToAdds = value;
        }

        [Input("requestHeadersToRemoves")]
        private InputList<string>? _requestHeadersToRemoves;
        public InputList<string> RequestHeadersToRemoves
        {
            get => _requestHeadersToRemoves ?? (_requestHeadersToRemoves = new InputList<string>());
            set => _requestHeadersToRemoves = value;
        }

        [Input("responseHeadersToAdds")]
        private InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsArgs>? _responseHeadersToAdds;
        public InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsArgs> ResponseHeadersToAdds
        {
            get => _responseHeadersToAdds ?? (_responseHeadersToAdds = new InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsArgs>());
            set => _responseHeadersToAdds = value;
        }

        [Input("responseHeadersToRemoves")]
        private InputList<string>? _responseHeadersToRemoves;
        public InputList<string> ResponseHeadersToRemoves
        {
            get => _responseHeadersToRemoves ?? (_responseHeadersToRemoves = new InputList<string>());
            set => _responseHeadersToRemoves = value;
        }

        public URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionGetArgs : Pulumi.ResourceArgs
    {
        [Input("requestHeadersToAdds")]
        private InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsGetArgs>? _requestHeadersToAdds;
        public InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsGetArgs> RequestHeadersToAdds
        {
            get => _requestHeadersToAdds ?? (_requestHeadersToAdds = new InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsGetArgs>());
            set => _requestHeadersToAdds = value;
        }

        [Input("requestHeadersToRemoves")]
        private InputList<string>? _requestHeadersToRemoves;
        public InputList<string> RequestHeadersToRemoves
        {
            get => _requestHeadersToRemoves ?? (_requestHeadersToRemoves = new InputList<string>());
            set => _requestHeadersToRemoves = value;
        }

        [Input("responseHeadersToAdds")]
        private InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsGetArgs>? _responseHeadersToAdds;
        public InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsGetArgs> ResponseHeadersToAdds
        {
            get => _responseHeadersToAdds ?? (_responseHeadersToAdds = new InputList<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsGetArgs>());
            set => _responseHeadersToAdds = value;
        }

        [Input("responseHeadersToRemoves")]
        private InputList<string>? _responseHeadersToRemoves;
        public InputList<string> ResponseHeadersToRemoves
        {
            get => _responseHeadersToRemoves ?? (_responseHeadersToRemoves = new InputList<string>());
            set => _responseHeadersToRemoves = value;
        }

        public URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsGetArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddsGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsGetArgs : Pulumi.ResourceArgs
    {
        [Input("headerName", required: true)]
        public Input<string> HeaderName { get; set; } = null!;

        [Input("headerValue", required: true)]
        public Input<string> HeaderValue { get; set; } = null!;

        [Input("replace", required: true)]
        public Input<bool> Replace { get; set; } = null!;

        public URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddsGetArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesUrlRedirectArgs : Pulumi.ResourceArgs
    {
        [Input("hostRedirect")]
        public Input<string>? HostRedirect { get; set; }

        [Input("httpsRedirect")]
        public Input<bool>? HttpsRedirect { get; set; }

        [Input("pathRedirect")]
        public Input<string>? PathRedirect { get; set; }

        [Input("prefixRedirect")]
        public Input<string>? PrefixRedirect { get; set; }

        [Input("redirectResponseCode")]
        public Input<string>? RedirectResponseCode { get; set; }

        [Input("stripQuery")]
        public Input<bool>? StripQuery { get; set; }

        public URLMapPathMatchersRouteRulesUrlRedirectArgs()
        {
        }
    }

    public sealed class URLMapPathMatchersRouteRulesUrlRedirectGetArgs : Pulumi.ResourceArgs
    {
        [Input("hostRedirect")]
        public Input<string>? HostRedirect { get; set; }

        [Input("httpsRedirect")]
        public Input<bool>? HttpsRedirect { get; set; }

        [Input("pathRedirect")]
        public Input<string>? PathRedirect { get; set; }

        [Input("prefixRedirect")]
        public Input<string>? PrefixRedirect { get; set; }

        [Input("redirectResponseCode")]
        public Input<string>? RedirectResponseCode { get; set; }

        [Input("stripQuery")]
        public Input<bool>? StripQuery { get; set; }

        public URLMapPathMatchersRouteRulesUrlRedirectGetArgs()
        {
        }
    }

    public sealed class URLMapTestsArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        public URLMapTestsArgs()
        {
        }
    }

    public sealed class URLMapTestsGetArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        public URLMapTestsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class URLMapHeaderAction
    {
        public readonly ImmutableArray<URLMapHeaderActionRequestHeadersToAdds> RequestHeadersToAdds;
        public readonly ImmutableArray<string> RequestHeadersToRemoves;
        public readonly ImmutableArray<URLMapHeaderActionResponseHeadersToAdds> ResponseHeadersToAdds;
        public readonly ImmutableArray<string> ResponseHeadersToRemoves;

        [OutputConstructor]
        private URLMapHeaderAction(
            ImmutableArray<URLMapHeaderActionRequestHeadersToAdds> requestHeadersToAdds,
            ImmutableArray<string> requestHeadersToRemoves,
            ImmutableArray<URLMapHeaderActionResponseHeadersToAdds> responseHeadersToAdds,
            ImmutableArray<string> responseHeadersToRemoves)
        {
            RequestHeadersToAdds = requestHeadersToAdds;
            RequestHeadersToRemoves = requestHeadersToRemoves;
            ResponseHeadersToAdds = responseHeadersToAdds;
            ResponseHeadersToRemoves = responseHeadersToRemoves;
        }
    }

    [OutputType]
    public sealed class URLMapHeaderActionRequestHeadersToAdds
    {
        public readonly string HeaderName;
        public readonly string HeaderValue;
        public readonly bool Replace;

        [OutputConstructor]
        private URLMapHeaderActionRequestHeadersToAdds(
            string headerName,
            string headerValue,
            bool replace)
        {
            HeaderName = headerName;
            HeaderValue = headerValue;
            Replace = replace;
        }
    }

    [OutputType]
    public sealed class URLMapHeaderActionResponseHeadersToAdds
    {
        public readonly string HeaderName;
        public readonly string HeaderValue;
        public readonly bool Replace;

        [OutputConstructor]
        private URLMapHeaderActionResponseHeadersToAdds(
            string headerName,
            string headerValue,
            bool replace)
        {
            HeaderName = headerName;
            HeaderValue = headerValue;
            Replace = replace;
        }
    }

    [OutputType]
    public sealed class URLMapHostRules
    {
        public readonly string? Description;
        public readonly ImmutableArray<string> Hosts;
        public readonly string PathMatcher;

        [OutputConstructor]
        private URLMapHostRules(
            string? description,
            ImmutableArray<string> hosts,
            string pathMatcher)
        {
            Description = description;
            Hosts = hosts;
            PathMatcher = pathMatcher;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchers
    {
        public readonly string? DefaultService;
        public readonly string? Description;
        public readonly URLMapPathMatchersHeaderAction? HeaderAction;
        public readonly string Name;
        public readonly ImmutableArray<URLMapPathMatchersPathRules> PathRules;
        public readonly ImmutableArray<URLMapPathMatchersRouteRules> RouteRules;

        [OutputConstructor]
        private URLMapPathMatchers(
            string? defaultService,
            string? description,
            URLMapPathMatchersHeaderAction? headerAction,
            string name,
            ImmutableArray<URLMapPathMatchersPathRules> pathRules,
            ImmutableArray<URLMapPathMatchersRouteRules> routeRules)
        {
            DefaultService = defaultService;
            Description = description;
            HeaderAction = headerAction;
            Name = name;
            PathRules = pathRules;
            RouteRules = routeRules;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersHeaderAction
    {
        public readonly ImmutableArray<URLMapPathMatchersHeaderActionRequestHeadersToAdds> RequestHeadersToAdds;
        public readonly ImmutableArray<string> RequestHeadersToRemoves;
        public readonly ImmutableArray<URLMapPathMatchersHeaderActionResponseHeadersToAdds> ResponseHeadersToAdds;
        public readonly ImmutableArray<string> ResponseHeadersToRemoves;

        [OutputConstructor]
        private URLMapPathMatchersHeaderAction(
            ImmutableArray<URLMapPathMatchersHeaderActionRequestHeadersToAdds> requestHeadersToAdds,
            ImmutableArray<string> requestHeadersToRemoves,
            ImmutableArray<URLMapPathMatchersHeaderActionResponseHeadersToAdds> responseHeadersToAdds,
            ImmutableArray<string> responseHeadersToRemoves)
        {
            RequestHeadersToAdds = requestHeadersToAdds;
            RequestHeadersToRemoves = requestHeadersToRemoves;
            ResponseHeadersToAdds = responseHeadersToAdds;
            ResponseHeadersToRemoves = responseHeadersToRemoves;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersHeaderActionRequestHeadersToAdds
    {
        public readonly string HeaderName;
        public readonly string HeaderValue;
        public readonly bool Replace;

        [OutputConstructor]
        private URLMapPathMatchersHeaderActionRequestHeadersToAdds(
            string headerName,
            string headerValue,
            bool replace)
        {
            HeaderName = headerName;
            HeaderValue = headerValue;
            Replace = replace;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersHeaderActionResponseHeadersToAdds
    {
        public readonly string HeaderName;
        public readonly string HeaderValue;
        public readonly bool Replace;

        [OutputConstructor]
        private URLMapPathMatchersHeaderActionResponseHeadersToAdds(
            string headerName,
            string headerValue,
            bool replace)
        {
            HeaderName = headerName;
            HeaderValue = headerValue;
            Replace = replace;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRules
    {
        public readonly ImmutableArray<string> Paths;
        public readonly URLMapPathMatchersPathRulesRouteAction? RouteAction;
        public readonly string? Service;
        public readonly URLMapPathMatchersPathRulesUrlRedirect? UrlRedirect;

        [OutputConstructor]
        private URLMapPathMatchersPathRules(
            ImmutableArray<string> paths,
            URLMapPathMatchersPathRulesRouteAction? routeAction,
            string? service,
            URLMapPathMatchersPathRulesUrlRedirect? urlRedirect)
        {
            Paths = paths;
            RouteAction = routeAction;
            Service = service;
            UrlRedirect = urlRedirect;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteAction
    {
        public readonly URLMapPathMatchersPathRulesRouteActionCorsPolicy? CorsPolicy;
        public readonly URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicy? FaultInjectionPolicy;
        public readonly URLMapPathMatchersPathRulesRouteActionRequestMirrorPolicy? RequestMirrorPolicy;
        public readonly URLMapPathMatchersPathRulesRouteActionRetryPolicy? RetryPolicy;
        public readonly URLMapPathMatchersPathRulesRouteActionTimeout? Timeout;
        public readonly URLMapPathMatchersPathRulesRouteActionUrlRewrite? UrlRewrite;
        public readonly ImmutableArray<URLMapPathMatchersPathRulesRouteActionWeightedBackendServices> WeightedBackendServices;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteAction(
            URLMapPathMatchersPathRulesRouteActionCorsPolicy? corsPolicy,
            URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicy? faultInjectionPolicy,
            URLMapPathMatchersPathRulesRouteActionRequestMirrorPolicy? requestMirrorPolicy,
            URLMapPathMatchersPathRulesRouteActionRetryPolicy? retryPolicy,
            URLMapPathMatchersPathRulesRouteActionTimeout? timeout,
            URLMapPathMatchersPathRulesRouteActionUrlRewrite? urlRewrite,
            ImmutableArray<URLMapPathMatchersPathRulesRouteActionWeightedBackendServices> weightedBackendServices)
        {
            CorsPolicy = corsPolicy;
            FaultInjectionPolicy = faultInjectionPolicy;
            RequestMirrorPolicy = requestMirrorPolicy;
            RetryPolicy = retryPolicy;
            Timeout = timeout;
            UrlRewrite = urlRewrite;
            WeightedBackendServices = weightedBackendServices;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionCorsPolicy
    {
        public readonly bool? AllowCredentials;
        public readonly ImmutableArray<string> AllowHeaders;
        public readonly ImmutableArray<string> AllowMethods;
        public readonly ImmutableArray<string> AllowOriginRegexes;
        public readonly ImmutableArray<string> AllowOrigins;
        public readonly bool Disabled;
        public readonly ImmutableArray<string> ExposeHeaders;
        public readonly int? MaxAge;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionCorsPolicy(
            bool? allowCredentials,
            ImmutableArray<string> allowHeaders,
            ImmutableArray<string> allowMethods,
            ImmutableArray<string> allowOriginRegexes,
            ImmutableArray<string> allowOrigins,
            bool disabled,
            ImmutableArray<string> exposeHeaders,
            int? maxAge)
        {
            AllowCredentials = allowCredentials;
            AllowHeaders = allowHeaders;
            AllowMethods = allowMethods;
            AllowOriginRegexes = allowOriginRegexes;
            AllowOrigins = allowOrigins;
            Disabled = disabled;
            ExposeHeaders = exposeHeaders;
            MaxAge = maxAge;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicy
    {
        public readonly URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyAbort? Abort;
        public readonly URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelay? Delay;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicy(
            URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyAbort? abort,
            URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelay? delay)
        {
            Abort = abort;
            Delay = delay;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyAbort
    {
        public readonly int HttpStatus;
        public readonly double Percentage;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyAbort(
            int httpStatus,
            double percentage)
        {
            HttpStatus = httpStatus;
            Percentage = percentage;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelay
    {
        public readonly URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayFixedDelay FixedDelay;
        public readonly double Percentage;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelay(
            URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayFixedDelay fixedDelay,
            double percentage)
        {
            FixedDelay = fixedDelay;
            Percentage = percentage;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayFixedDelay
    {
        public readonly int? Nanos;
        public readonly string Seconds;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionFaultInjectionPolicyDelayFixedDelay(
            int? nanos,
            string seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionRequestMirrorPolicy
    {
        public readonly string BackendService;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionRequestMirrorPolicy(string backendService)
        {
            BackendService = backendService;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionRetryPolicy
    {
        public readonly int? NumRetries;
        public readonly URLMapPathMatchersPathRulesRouteActionRetryPolicyPerTryTimeout? PerTryTimeout;
        public readonly ImmutableArray<string> RetryConditions;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionRetryPolicy(
            int? numRetries,
            URLMapPathMatchersPathRulesRouteActionRetryPolicyPerTryTimeout? perTryTimeout,
            ImmutableArray<string> retryConditions)
        {
            NumRetries = numRetries;
            PerTryTimeout = perTryTimeout;
            RetryConditions = retryConditions;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionRetryPolicyPerTryTimeout
    {
        public readonly int? Nanos;
        public readonly string Seconds;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionRetryPolicyPerTryTimeout(
            int? nanos,
            string seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionTimeout
    {
        public readonly int? Nanos;
        public readonly string Seconds;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionTimeout(
            int? nanos,
            string seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionUrlRewrite
    {
        public readonly string? HostRewrite;
        public readonly string? PathPrefixRewrite;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionUrlRewrite(
            string? hostRewrite,
            string? pathPrefixRewrite)
        {
            HostRewrite = hostRewrite;
            PathPrefixRewrite = pathPrefixRewrite;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionWeightedBackendServices
    {
        public readonly string BackendService;
        public readonly URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderAction? HeaderAction;
        public readonly int Weight;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionWeightedBackendServices(
            string backendService,
            URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderAction? headerAction,
            int weight)
        {
            BackendService = backendService;
            HeaderAction = headerAction;
            Weight = weight;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderAction
    {
        public readonly ImmutableArray<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdds> RequestHeadersToAdds;
        public readonly ImmutableArray<string> RequestHeadersToRemoves;
        public readonly ImmutableArray<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdds> ResponseHeadersToAdds;
        public readonly ImmutableArray<string> ResponseHeadersToRemoves;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderAction(
            ImmutableArray<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdds> requestHeadersToAdds,
            ImmutableArray<string> requestHeadersToRemoves,
            ImmutableArray<URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdds> responseHeadersToAdds,
            ImmutableArray<string> responseHeadersToRemoves)
        {
            RequestHeadersToAdds = requestHeadersToAdds;
            RequestHeadersToRemoves = requestHeadersToRemoves;
            ResponseHeadersToAdds = responseHeadersToAdds;
            ResponseHeadersToRemoves = responseHeadersToRemoves;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdds
    {
        public readonly string HeaderName;
        public readonly string HeaderValue;
        public readonly bool Replace;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdds(
            string headerName,
            string headerValue,
            bool replace)
        {
            HeaderName = headerName;
            HeaderValue = headerValue;
            Replace = replace;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdds
    {
        public readonly string HeaderName;
        public readonly string HeaderValue;
        public readonly bool Replace;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdds(
            string headerName,
            string headerValue,
            bool replace)
        {
            HeaderName = headerName;
            HeaderValue = headerValue;
            Replace = replace;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersPathRulesUrlRedirect
    {
        public readonly string? HostRedirect;
        public readonly bool? HttpsRedirect;
        public readonly string? PathRedirect;
        public readonly string? PrefixRedirect;
        public readonly string? RedirectResponseCode;
        public readonly bool StripQuery;

        [OutputConstructor]
        private URLMapPathMatchersPathRulesUrlRedirect(
            string? hostRedirect,
            bool? httpsRedirect,
            string? pathRedirect,
            string? prefixRedirect,
            string? redirectResponseCode,
            bool stripQuery)
        {
            HostRedirect = hostRedirect;
            HttpsRedirect = httpsRedirect;
            PathRedirect = pathRedirect;
            PrefixRedirect = prefixRedirect;
            RedirectResponseCode = redirectResponseCode;
            StripQuery = stripQuery;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRules
    {
        public readonly URLMapPathMatchersRouteRulesHeaderAction? HeaderAction;
        public readonly ImmutableArray<URLMapPathMatchersRouteRulesMatchRules> MatchRules;
        public readonly int Priority;
        public readonly URLMapPathMatchersRouteRulesRouteAction? RouteAction;
        public readonly string? Service;
        public readonly URLMapPathMatchersRouteRulesUrlRedirect? UrlRedirect;

        [OutputConstructor]
        private URLMapPathMatchersRouteRules(
            URLMapPathMatchersRouteRulesHeaderAction? headerAction,
            ImmutableArray<URLMapPathMatchersRouteRulesMatchRules> matchRules,
            int priority,
            URLMapPathMatchersRouteRulesRouteAction? routeAction,
            string? service,
            URLMapPathMatchersRouteRulesUrlRedirect? urlRedirect)
        {
            HeaderAction = headerAction;
            MatchRules = matchRules;
            Priority = priority;
            RouteAction = routeAction;
            Service = service;
            UrlRedirect = urlRedirect;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesHeaderAction
    {
        public readonly ImmutableArray<URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAdds> RequestHeadersToAdds;
        public readonly ImmutableArray<string> RequestHeadersToRemoves;
        public readonly ImmutableArray<URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAdds> ResponseHeadersToAdds;
        public readonly ImmutableArray<string> ResponseHeadersToRemoves;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesHeaderAction(
            ImmutableArray<URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAdds> requestHeadersToAdds,
            ImmutableArray<string> requestHeadersToRemoves,
            ImmutableArray<URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAdds> responseHeadersToAdds,
            ImmutableArray<string> responseHeadersToRemoves)
        {
            RequestHeadersToAdds = requestHeadersToAdds;
            RequestHeadersToRemoves = requestHeadersToRemoves;
            ResponseHeadersToAdds = responseHeadersToAdds;
            ResponseHeadersToRemoves = responseHeadersToRemoves;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAdds
    {
        public readonly string HeaderName;
        public readonly string HeaderValue;
        public readonly bool Replace;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesHeaderActionRequestHeadersToAdds(
            string headerName,
            string headerValue,
            bool replace)
        {
            HeaderName = headerName;
            HeaderValue = headerValue;
            Replace = replace;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAdds
    {
        public readonly string HeaderName;
        public readonly string HeaderValue;
        public readonly bool Replace;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesHeaderActionResponseHeadersToAdds(
            string headerName,
            string headerValue,
            bool replace)
        {
            HeaderName = headerName;
            HeaderValue = headerValue;
            Replace = replace;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesMatchRules
    {
        public readonly string? FullPathMatch;
        public readonly ImmutableArray<URLMapPathMatchersRouteRulesMatchRulesHeaderMatches> HeaderMatches;
        public readonly bool? IgnoreCase;
        public readonly ImmutableArray<URLMapPathMatchersRouteRulesMatchRulesMetadataFilters> MetadataFilters;
        public readonly string? PrefixMatch;
        public readonly ImmutableArray<URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatches> QueryParameterMatches;
        public readonly string? RegexMatch;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesMatchRules(
            string? fullPathMatch,
            ImmutableArray<URLMapPathMatchersRouteRulesMatchRulesHeaderMatches> headerMatches,
            bool? ignoreCase,
            ImmutableArray<URLMapPathMatchersRouteRulesMatchRulesMetadataFilters> metadataFilters,
            string? prefixMatch,
            ImmutableArray<URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatches> queryParameterMatches,
            string? regexMatch)
        {
            FullPathMatch = fullPathMatch;
            HeaderMatches = headerMatches;
            IgnoreCase = ignoreCase;
            MetadataFilters = metadataFilters;
            PrefixMatch = prefixMatch;
            QueryParameterMatches = queryParameterMatches;
            RegexMatch = regexMatch;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesMatchRulesHeaderMatches
    {
        public readonly string? ExactMatch;
        public readonly string HeaderName;
        public readonly bool? InvertMatch;
        public readonly string? PrefixMatch;
        public readonly bool? PresentMatch;
        public readonly URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesRangeMatch? RangeMatch;
        public readonly string? RegexMatch;
        public readonly string? SuffixMatch;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesMatchRulesHeaderMatches(
            string? exactMatch,
            string headerName,
            bool? invertMatch,
            string? prefixMatch,
            bool? presentMatch,
            URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesRangeMatch? rangeMatch,
            string? regexMatch,
            string? suffixMatch)
        {
            ExactMatch = exactMatch;
            HeaderName = headerName;
            InvertMatch = invertMatch;
            PrefixMatch = prefixMatch;
            PresentMatch = presentMatch;
            RangeMatch = rangeMatch;
            RegexMatch = regexMatch;
            SuffixMatch = suffixMatch;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesRangeMatch
    {
        public readonly int RangeEnd;
        public readonly int RangeStart;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesMatchRulesHeaderMatchesRangeMatch(
            int rangeEnd,
            int rangeStart)
        {
            RangeEnd = rangeEnd;
            RangeStart = rangeStart;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesMatchRulesMetadataFilters
    {
        public readonly ImmutableArray<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabels> FilterLabels;
        public readonly string FilterMatchCriteria;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesMatchRulesMetadataFilters(
            ImmutableArray<URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabels> filterLabels,
            string filterMatchCriteria)
        {
            FilterLabels = filterLabels;
            FilterMatchCriteria = filterMatchCriteria;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabels
    {
        public readonly string Name;
        public readonly string Value;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesMatchRulesMetadataFiltersFilterLabels(
            string name,
            string value)
        {
            Name = name;
            Value = value;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatches
    {
        public readonly string? ExactMatch;
        public readonly string Name;
        public readonly bool? PresentMatch;
        public readonly string? RegexMatch;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesMatchRulesQueryParameterMatches(
            string? exactMatch,
            string name,
            bool? presentMatch,
            string? regexMatch)
        {
            ExactMatch = exactMatch;
            Name = name;
            PresentMatch = presentMatch;
            RegexMatch = regexMatch;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteAction
    {
        public readonly URLMapPathMatchersRouteRulesRouteActionCorsPolicy? CorsPolicy;
        public readonly URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicy? FaultInjectionPolicy;
        public readonly URLMapPathMatchersRouteRulesRouteActionRequestMirrorPolicy? RequestMirrorPolicy;
        public readonly URLMapPathMatchersRouteRulesRouteActionRetryPolicy? RetryPolicy;
        public readonly URLMapPathMatchersRouteRulesRouteActionTimeout? Timeout;
        public readonly URLMapPathMatchersRouteRulesRouteActionUrlRewrite? UrlRewrite;
        public readonly ImmutableArray<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServices> WeightedBackendServices;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteAction(
            URLMapPathMatchersRouteRulesRouteActionCorsPolicy? corsPolicy,
            URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicy? faultInjectionPolicy,
            URLMapPathMatchersRouteRulesRouteActionRequestMirrorPolicy? requestMirrorPolicy,
            URLMapPathMatchersRouteRulesRouteActionRetryPolicy? retryPolicy,
            URLMapPathMatchersRouteRulesRouteActionTimeout? timeout,
            URLMapPathMatchersRouteRulesRouteActionUrlRewrite? urlRewrite,
            ImmutableArray<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServices> weightedBackendServices)
        {
            CorsPolicy = corsPolicy;
            FaultInjectionPolicy = faultInjectionPolicy;
            RequestMirrorPolicy = requestMirrorPolicy;
            RetryPolicy = retryPolicy;
            Timeout = timeout;
            UrlRewrite = urlRewrite;
            WeightedBackendServices = weightedBackendServices;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionCorsPolicy
    {
        public readonly bool? AllowCredentials;
        public readonly ImmutableArray<string> AllowHeaders;
        public readonly ImmutableArray<string> AllowMethods;
        public readonly ImmutableArray<string> AllowOriginRegexes;
        public readonly ImmutableArray<string> AllowOrigins;
        public readonly bool? Disabled;
        public readonly ImmutableArray<string> ExposeHeaders;
        public readonly int? MaxAge;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionCorsPolicy(
            bool? allowCredentials,
            ImmutableArray<string> allowHeaders,
            ImmutableArray<string> allowMethods,
            ImmutableArray<string> allowOriginRegexes,
            ImmutableArray<string> allowOrigins,
            bool? disabled,
            ImmutableArray<string> exposeHeaders,
            int? maxAge)
        {
            AllowCredentials = allowCredentials;
            AllowHeaders = allowHeaders;
            AllowMethods = allowMethods;
            AllowOriginRegexes = allowOriginRegexes;
            AllowOrigins = allowOrigins;
            Disabled = disabled;
            ExposeHeaders = exposeHeaders;
            MaxAge = maxAge;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicy
    {
        public readonly URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyAbort? Abort;
        public readonly URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelay? Delay;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicy(
            URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyAbort? abort,
            URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelay? delay)
        {
            Abort = abort;
            Delay = delay;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyAbort
    {
        public readonly int? HttpStatus;
        public readonly double? Percentage;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyAbort(
            int? httpStatus,
            double? percentage)
        {
            HttpStatus = httpStatus;
            Percentage = percentage;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelay
    {
        public readonly URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay? FixedDelay;
        public readonly double? Percentage;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelay(
            URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay? fixedDelay,
            double? percentage)
        {
            FixedDelay = fixedDelay;
            Percentage = percentage;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay
    {
        public readonly int? Nanos;
        public readonly string Seconds;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay(
            int? nanos,
            string seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionRequestMirrorPolicy
    {
        public readonly string BackendService;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionRequestMirrorPolicy(string backendService)
        {
            BackendService = backendService;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionRetryPolicy
    {
        public readonly int NumRetries;
        public readonly URLMapPathMatchersRouteRulesRouteActionRetryPolicyPerTryTimeout? PerTryTimeout;
        public readonly ImmutableArray<string> RetryConditions;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionRetryPolicy(
            int numRetries,
            URLMapPathMatchersRouteRulesRouteActionRetryPolicyPerTryTimeout? perTryTimeout,
            ImmutableArray<string> retryConditions)
        {
            NumRetries = numRetries;
            PerTryTimeout = perTryTimeout;
            RetryConditions = retryConditions;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionRetryPolicyPerTryTimeout
    {
        public readonly int? Nanos;
        public readonly string Seconds;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionRetryPolicyPerTryTimeout(
            int? nanos,
            string seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionTimeout
    {
        public readonly int? Nanos;
        public readonly string Seconds;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionTimeout(
            int? nanos,
            string seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionUrlRewrite
    {
        public readonly string? HostRewrite;
        public readonly string? PathPrefixRewrite;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionUrlRewrite(
            string? hostRewrite,
            string? pathPrefixRewrite)
        {
            HostRewrite = hostRewrite;
            PathPrefixRewrite = pathPrefixRewrite;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionWeightedBackendServices
    {
        public readonly string BackendService;
        public readonly URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderAction? HeaderAction;
        public readonly int Weight;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionWeightedBackendServices(
            string backendService,
            URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderAction? headerAction,
            int weight)
        {
            BackendService = backendService;
            HeaderAction = headerAction;
            Weight = weight;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderAction
    {
        public readonly ImmutableArray<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdds> RequestHeadersToAdds;
        public readonly ImmutableArray<string> RequestHeadersToRemoves;
        public readonly ImmutableArray<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdds> ResponseHeadersToAdds;
        public readonly ImmutableArray<string> ResponseHeadersToRemoves;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderAction(
            ImmutableArray<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdds> requestHeadersToAdds,
            ImmutableArray<string> requestHeadersToRemoves,
            ImmutableArray<URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdds> responseHeadersToAdds,
            ImmutableArray<string> responseHeadersToRemoves)
        {
            RequestHeadersToAdds = requestHeadersToAdds;
            RequestHeadersToRemoves = requestHeadersToRemoves;
            ResponseHeadersToAdds = responseHeadersToAdds;
            ResponseHeadersToRemoves = responseHeadersToRemoves;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdds
    {
        public readonly string HeaderName;
        public readonly string HeaderValue;
        public readonly bool Replace;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdds(
            string headerName,
            string headerValue,
            bool replace)
        {
            HeaderName = headerName;
            HeaderValue = headerValue;
            Replace = replace;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdds
    {
        public readonly string HeaderName;
        public readonly string HeaderValue;
        public readonly bool Replace;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdds(
            string headerName,
            string headerValue,
            bool replace)
        {
            HeaderName = headerName;
            HeaderValue = headerValue;
            Replace = replace;
        }
    }

    [OutputType]
    public sealed class URLMapPathMatchersRouteRulesUrlRedirect
    {
        public readonly string? HostRedirect;
        public readonly bool? HttpsRedirect;
        public readonly string? PathRedirect;
        public readonly string? PrefixRedirect;
        public readonly string? RedirectResponseCode;
        public readonly bool? StripQuery;

        [OutputConstructor]
        private URLMapPathMatchersRouteRulesUrlRedirect(
            string? hostRedirect,
            bool? httpsRedirect,
            string? pathRedirect,
            string? prefixRedirect,
            string? redirectResponseCode,
            bool? stripQuery)
        {
            HostRedirect = hostRedirect;
            HttpsRedirect = httpsRedirect;
            PathRedirect = pathRedirect;
            PrefixRedirect = prefixRedirect;
            RedirectResponseCode = redirectResponseCode;
            StripQuery = stripQuery;
        }
    }

    [OutputType]
    public sealed class URLMapTests
    {
        public readonly string? Description;
        public readonly string Host;
        public readonly string Path;
        public readonly string Service;

        [OutputConstructor]
        private URLMapTests(
            string? description,
            string host,
            string path,
            string service)
        {
            Description = description;
            Host = host;
            Path = path;
            Service = service;
        }
    }
    }
}
