// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// UrlMaps are used to route requests to a backend service based on rules
    /// that you define for the host and path of an incoming URL.
    /// 
    /// To get more information about UrlMap, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/urlMaps)
    /// 
    /// ## Example Usage
    /// 
    /// ### Url Map Bucket And Service
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var login = new Gcp.Compute.BackendService("login", new()
    ///     {
    ///         Name = "login",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     var staticBucket = new Gcp.Storage.Bucket("static", new()
    ///     {
    ///         Name = "static-asset-bucket",
    ///         Location = "US",
    ///     });
    /// 
    ///     var @static = new Gcp.Compute.BackendBucket("static", new()
    ///     {
    ///         Name = "static-asset-backend-bucket",
    ///         BucketName = staticBucket.Name,
    ///         EnableCdn = true,
    ///     });
    /// 
    ///     var urlmap = new Gcp.Compute.URLMap("urlmap", new()
    ///     {
    ///         Name = "urlmap",
    ///         Description = "a description",
    ///         DefaultService = @static.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "mysite",
    ///             },
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "myothersite.com",
    ///                 },
    ///                 PathMatcher = "otherpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "mysite",
    ///                 DefaultService = @static.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/home",
    ///                         },
    ///                         Service = @static.Id,
    ///                     },
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/login",
    ///                         },
    ///                         Service = login.Id,
    ///                     },
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/static",
    ///                         },
    ///                         Service = @static.Id,
    ///                     },
    ///                 },
    ///             },
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "otherpaths",
    ///                 DefaultService = @static.Id,
    ///             },
    ///         },
    ///         Tests = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapTestArgs
    ///             {
    ///                 Service = @static.Id,
    ///                 Host = "example.com",
    ///                 Path = "/home",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Url Map Traffic Director Route
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var home = new Gcp.Compute.BackendService("home", new()
    ///     {
    ///         Name = "home",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///         LoadBalancingScheme = "INTERNAL_SELF_MANAGED",
    ///     });
    /// 
    ///     var urlmap = new Gcp.Compute.URLMap("urlmap", new()
    ///     {
    ///         Name = "urlmap",
    ///         Description = "a description",
    ///         DefaultService = home.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = home.Id,
    ///                 RouteRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleArgs
    ///                     {
    ///                         Priority = 1,
    ///                         HeaderAction = new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleHeaderActionArgs
    ///                         {
    ///                             RequestHeadersToRemoves = new[]
    ///                             {
    ///                                 "RemoveMe2",
    ///                             },
    ///                             RequestHeadersToAdds = new[]
    ///                             {
    ///                                 new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs
    ///                                 {
    ///                                     HeaderName = "AddSomethingElse",
    ///                                     HeaderValue = "MyOtherValue",
    ///                                     Replace = true,
    ///                                 },
    ///                             },
    ///                             ResponseHeadersToRemoves = new[]
    ///                             {
    ///                                 "RemoveMe3",
    ///                             },
    ///                             ResponseHeadersToAdds = new[]
    ///                             {
    ///                                 new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs
    ///                                 {
    ///                                     HeaderName = "AddMe",
    ///                                     HeaderValue = "MyValue",
    ///                                     Replace = false,
    ///                                 },
    ///                             },
    ///                         },
    ///                         MatchRules = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleArgs
    ///                             {
    ///                                 FullPathMatch = "a full path",
    ///                                 HeaderMatches = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs
    ///                                     {
    ///                                         HeaderName = "someheader",
    ///                                         ExactMatch = "match this exactly",
    ///                                         InvertMatch = true,
    ///                                     },
    ///                                 },
    ///                                 IgnoreCase = true,
    ///                                 MetadataFilters = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs
    ///                                     {
    ///                                         FilterMatchCriteria = "MATCH_ANY",
    ///                                         FilterLabels = new[]
    ///                                         {
    ///                                             new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs
    ///                                             {
    ///                                                 Name = "PLANET",
    ///                                                 Value = "MARS",
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                                 QueryParameterMatches = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs
    ///                                     {
    ///                                         Name = "a query parameter",
    ///                                         PresentMatch = true,
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                         UrlRedirect = new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleUrlRedirectArgs
    ///                         {
    ///                             HostRedirect = "A host",
    ///                             HttpsRedirect = false,
    ///                             PathRedirect = "some/path",
    ///                             RedirectResponseCode = "TEMPORARY_REDIRECT",
    ///                             StripQuery = true,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tests = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapTestArgs
    ///             {
    ///                 Service = home.Id,
    ///                 Host = "hi.com",
    ///                 Path = "/home",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Url Map Traffic Director Route Partial
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var home = new Gcp.Compute.BackendService("home", new()
    ///     {
    ///         Name = "home",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///         LoadBalancingScheme = "INTERNAL_SELF_MANAGED",
    ///     });
    /// 
    ///     var urlmap = new Gcp.Compute.URLMap("urlmap", new()
    ///     {
    ///         Name = "urlmap",
    ///         Description = "a description",
    ///         DefaultService = home.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = home.Id,
    ///                 RouteRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleArgs
    ///                     {
    ///                         Priority = 1,
    ///                         MatchRules = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleArgs
    ///                             {
    ///                                 PrefixMatch = "/someprefix",
    ///                                 HeaderMatches = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs
    ///                                     {
    ///                                         HeaderName = "someheader",
    ///                                         ExactMatch = "match this exactly",
    ///                                         InvertMatch = true,
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                         UrlRedirect = new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleUrlRedirectArgs
    ///                         {
    ///                             PathRedirect = "some/path",
    ///                             RedirectResponseCode = "TEMPORARY_REDIRECT",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tests = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapTestArgs
    ///             {
    ///                 Service = home.Id,
    ///                 Host = "hi.com",
    ///                 Path = "/home",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Url Map Traffic Director Path
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var home = new Gcp.Compute.BackendService("home", new()
    ///     {
    ///         Name = "home",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///         LoadBalancingScheme = "INTERNAL_SELF_MANAGED",
    ///     });
    /// 
    ///     var urlmap = new Gcp.Compute.URLMap("urlmap", new()
    ///     {
    ///         Name = "urlmap",
    ///         Description = "a description",
    ///         DefaultService = home.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = home.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/home",
    ///                         },
    ///                         RouteAction = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionArgs
    ///                         {
    ///                             CorsPolicy = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs
    ///                             {
    ///                                 AllowCredentials = true,
    ///                                 AllowHeaders = new[]
    ///                                 {
    ///                                     "Allowed content",
    ///                                 },
    ///                                 AllowMethods = new[]
    ///                                 {
    ///                                     "GET",
    ///                                 },
    ///                                 AllowOriginRegexes = new[]
    ///                                 {
    ///                                     "abc.*",
    ///                                 },
    ///                                 AllowOrigins = new[]
    ///                                 {
    ///                                     "Allowed origin",
    ///                                 },
    ///                                 ExposeHeaders = new[]
    ///                                 {
    ///                                     "Exposed header",
    ///                                 },
    ///                                 MaxAge = 30,
    ///                                 Disabled = false,
    ///                             },
    ///                             FaultInjectionPolicy = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs
    ///                             {
    ///                                 Abort = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs
    ///                                 {
    ///                                     HttpStatus = 234,
    ///                                     Percentage = 5.6,
    ///                                 },
    ///                                 Delay = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs
    ///                                 {
    ///                                     FixedDelay = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs
    ///                                     {
    ///                                         Seconds = "0",
    ///                                         Nanos = 50000,
    ///                                     },
    ///                                     Percentage = 7.8,
    ///                                 },
    ///                             },
    ///                             RequestMirrorPolicy = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs
    ///                             {
    ///                                 BackendService = home.Id,
    ///                             },
    ///                             RetryPolicy = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs
    ///                             {
    ///                                 NumRetries = 4,
    ///                                 PerTryTimeout = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs
    ///                                 {
    ///                                     Seconds = "30",
    ///                                 },
    ///                                 RetryConditions = new[]
    ///                                 {
    ///                                     "5xx",
    ///                                     "deadline-exceeded",
    ///                                 },
    ///                             },
    ///                             Timeout = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionTimeoutArgs
    ///                             {
    ///                                 Seconds = "20",
    ///                                 Nanos = 750000000,
    ///                             },
    ///                             UrlRewrite = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs
    ///                             {
    ///                                 HostRewrite = "dev.example.com",
    ///                                 PathPrefixRewrite = "/v1/api/",
    ///                             },
    ///                             WeightedBackendServices = new[]
    ///                             {
    ///                                 new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs
    ///                                 {
    ///                                     BackendService = home.Id,
    ///                                     Weight = 400,
    ///                                     HeaderAction = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs
    ///                                     {
    ///                                         RequestHeadersToRemoves = new[]
    ///                                         {
    ///                                             "RemoveMe",
    ///                                         },
    ///                                         RequestHeadersToAdds = new[]
    ///                                         {
    ///                                             new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs
    ///                                             {
    ///                                                 HeaderName = "AddMe",
    ///                                                 HeaderValue = "MyValue",
    ///                                                 Replace = true,
    ///                                             },
    ///                                         },
    ///                                         ResponseHeadersToRemoves = new[]
    ///                                         {
    ///                                             "RemoveMe",
    ///                                         },
    ///                                         ResponseHeadersToAdds = new[]
    ///                                         {
    ///                                             new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs
    ///                                             {
    ///                                                 HeaderName = "AddMe",
    ///                                                 HeaderValue = "MyValue",
    ///                                                 Replace = false,
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tests = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapTestArgs
    ///             {
    ///                 Service = home.Id,
    ///                 Host = "hi.com",
    ///                 Path = "/home",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Url Map Traffic Director Path Partial
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var home = new Gcp.Compute.BackendService("home", new()
    ///     {
    ///         Name = "home",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///         LoadBalancingScheme = "INTERNAL_SELF_MANAGED",
    ///     });
    /// 
    ///     var urlmap = new Gcp.Compute.URLMap("urlmap", new()
    ///     {
    ///         Name = "urlmap",
    ///         Description = "a description",
    ///         DefaultService = home.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = home.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/home",
    ///                         },
    ///                         RouteAction = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionArgs
    ///                         {
    ///                             CorsPolicy = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs
    ///                             {
    ///                                 AllowCredentials = true,
    ///                                 AllowHeaders = new[]
    ///                                 {
    ///                                     "Allowed content",
    ///                                 },
    ///                                 AllowMethods = new[]
    ///                                 {
    ///                                     "GET",
    ///                                 },
    ///                                 AllowOriginRegexes = new[]
    ///                                 {
    ///                                     "abc.*",
    ///                                 },
    ///                                 AllowOrigins = new[]
    ///                                 {
    ///                                     "Allowed origin",
    ///                                 },
    ///                                 ExposeHeaders = new[]
    ///                                 {
    ///                                     "Exposed header",
    ///                                 },
    ///                                 MaxAge = 30,
    ///                                 Disabled = false,
    ///                             },
    ///                             WeightedBackendServices = new[]
    ///                             {
    ///                                 new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs
    ///                                 {
    ///                                     BackendService = home.Id,
    ///                                     Weight = 400,
    ///                                     HeaderAction = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs
    ///                                     {
    ///                                         RequestHeadersToRemoves = new[]
    ///                                         {
    ///                                             "RemoveMe",
    ///                                         },
    ///                                         RequestHeadersToAdds = new[]
    ///                                         {
    ///                                             new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs
    ///                                             {
    ///                                                 HeaderName = "AddMe",
    ///                                                 HeaderValue = "MyValue",
    ///                                                 Replace = true,
    ///                                             },
    ///                                         },
    ///                                         ResponseHeadersToRemoves = new[]
    ///                                         {
    ///                                             "RemoveMe",
    ///                                         },
    ///                                         ResponseHeadersToAdds = new[]
    ///                                         {
    ///                                             new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs
    ///                                             {
    ///                                                 HeaderName = "AddMe",
    ///                                                 HeaderValue = "MyValue",
    ///                                                 Replace = false,
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tests = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapTestArgs
    ///             {
    ///                 Service = home.Id,
    ///                 Host = "hi.com",
    ///                 Path = "/home",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Url Map Header Based Routing
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "default",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var service_a = new Gcp.Compute.BackendService("service-a", new()
    ///     {
    ///         Name = "service-a",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var service_b = new Gcp.Compute.BackendService("service-b", new()
    ///     {
    ///         Name = "service-b",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var urlmap = new Gcp.Compute.URLMap("urlmap", new()
    ///     {
    ///         Name = "urlmap",
    ///         Description = "header-based routing example",
    ///         DefaultService = @default.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = @default.Id,
    ///                 RouteRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleArgs
    ///                     {
    ///                         Priority = 1,
    ///                         Service = service_a.Id,
    ///                         MatchRules = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleArgs
    ///                             {
    ///                                 PrefixMatch = "/",
    ///                                 IgnoreCase = true,
    ///                                 HeaderMatches = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs
    ///                                     {
    ///                                         HeaderName = "abtest",
    ///                                         ExactMatch = "a",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleArgs
    ///                     {
    ///                         Priority = 2,
    ///                         Service = service_b.Id,
    ///                         MatchRules = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleArgs
    ///                             {
    ///                                 IgnoreCase = true,
    ///                                 PrefixMatch = "/",
    ///                                 HeaderMatches = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs
    ///                                     {
    ///                                         HeaderName = "abtest",
    ///                                         ExactMatch = "b",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Url Map Parameter Based Routing
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "default",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var service_a = new Gcp.Compute.BackendService("service-a", new()
    ///     {
    ///         Name = "service-a",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var service_b = new Gcp.Compute.BackendService("service-b", new()
    ///     {
    ///         Name = "service-b",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var urlmap = new Gcp.Compute.URLMap("urlmap", new()
    ///     {
    ///         Name = "urlmap",
    ///         Description = "parameter-based routing example",
    ///         DefaultService = @default.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = @default.Id,
    ///                 RouteRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleArgs
    ///                     {
    ///                         Priority = 1,
    ///                         Service = service_a.Id,
    ///                         MatchRules = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleArgs
    ///                             {
    ///                                 PrefixMatch = "/",
    ///                                 IgnoreCase = true,
    ///                                 QueryParameterMatches = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs
    ///                                     {
    ///                                         Name = "abtest",
    ///                                         ExactMatch = "a",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleArgs
    ///                     {
    ///                         Priority = 2,
    ///                         Service = service_b.Id,
    ///                         MatchRules = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleArgs
    ///                             {
    ///                                 IgnoreCase = true,
    ///                                 PrefixMatch = "/",
    ///                                 QueryParameterMatches = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs
    ///                                     {
    ///                                         Name = "abtest",
    ///                                         ExactMatch = "b",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Url Map Path Template Match
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var cart_backend = new Gcp.Compute.BackendService("cart-backend", new()
    ///     {
    ///         Name = "cart-service",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     var user_backend = new Gcp.Compute.BackendService("user-backend", new()
    ///     {
    ///         Name = "user-service",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     var staticBucket = new Gcp.Storage.Bucket("static", new()
    ///     {
    ///         Name = "static-asset-bucket",
    ///         Location = "US",
    ///     });
    /// 
    ///     var @static = new Gcp.Compute.BackendBucket("static", new()
    ///     {
    ///         Name = "static-asset-backend-bucket",
    ///         BucketName = staticBucket.Name,
    ///         EnableCdn = true,
    ///     });
    /// 
    ///     var urlmap = new Gcp.Compute.URLMap("urlmap", new()
    ///     {
    ///         Name = "urlmap",
    ///         Description = "a description",
    ///         DefaultService = @static.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "mysite",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "mysite",
    ///                 DefaultService = @static.Id,
    ///                 RouteRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleArgs
    ///                     {
    ///                         MatchRules = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleArgs
    ///                             {
    ///                                 PathTemplateMatch = "/xyzwebservices/v2/xyz/users/{username=*}/carts/{cartid=**}",
    ///                             },
    ///                         },
    ///                         Service = cart_backend.Id,
    ///                         Priority = 1,
    ///                         RouteAction = new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleRouteActionArgs
    ///                         {
    ///                             UrlRewrite = new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs
    ///                             {
    ///                                 PathTemplateRewrite = "/{username}-{cartid}/",
    ///                             },
    ///                         },
    ///                     },
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleArgs
    ///                     {
    ///                         MatchRules = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.URLMapPathMatcherRouteRuleMatchRuleArgs
    ///                             {
    ///                                 PathTemplateMatch = "/xyzwebservices/v2/xyz/users/*/accountinfo/*",
    ///                             },
    ///                         },
    ///                         Service = user_backend.Id,
    ///                         Priority = 2,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Url Map Custom Error Response Policy
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var example = new Gcp.Compute.BackendService("example", new()
    ///     {
    ///         Name = "login",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     var errorBucket = new Gcp.Storage.Bucket("error", new()
    ///     {
    ///         Name = "static-asset-bucket",
    ///         Location = "US",
    ///     });
    /// 
    ///     var error = new Gcp.Compute.BackendBucket("error", new()
    ///     {
    ///         Name = "error-backend-bucket",
    ///         BucketName = errorBucket.Name,
    ///         EnableCdn = true,
    ///     });
    /// 
    ///     var urlmap = new Gcp.Compute.URLMap("urlmap", new()
    ///     {
    ///         Name = "urlmap",
    ///         Description = "a description",
    ///         DefaultService = example.Id,
    ///         DefaultCustomErrorResponsePolicy = new Gcp.Compute.Inputs.URLMapDefaultCustomErrorResponsePolicyArgs
    ///         {
    ///             ErrorResponseRules = new[]
    ///             {
    ///                 new Gcp.Compute.Inputs.URLMapDefaultCustomErrorResponsePolicyErrorResponseRuleArgs
    ///                 {
    ///                     MatchResponseCodes = new[]
    ///                     {
    ///                         "5xx",
    ///                     },
    ///                     Path = "/internal_error.html",
    ///                     OverrideResponseCode = 502,
    ///                 },
    ///             },
    ///             ErrorService = error.Id,
    ///         },
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "mysite",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "mysite",
    ///                 DefaultService = example.Id,
    ///                 DefaultCustomErrorResponsePolicy = new Gcp.Compute.Inputs.URLMapPathMatcherDefaultCustomErrorResponsePolicyArgs
    ///                 {
    ///                     ErrorResponseRules = new[]
    ///                     {
    ///                         new Gcp.Compute.Inputs.URLMapPathMatcherDefaultCustomErrorResponsePolicyErrorResponseRuleArgs
    ///                         {
    ///                             MatchResponseCodes = new[]
    ///                             {
    ///                                 "4xx",
    ///                                 "5xx",
    ///                             },
    ///                             Path = "/login_error.html",
    ///                             OverrideResponseCode = 404,
    ///                         },
    ///                         new Gcp.Compute.Inputs.URLMapPathMatcherDefaultCustomErrorResponsePolicyErrorResponseRuleArgs
    ///                         {
    ///                             MatchResponseCodes = new[]
    ///                             {
    ///                                 "503",
    ///                             },
    ///                             Path = "/bad_gateway.html",
    ///                             OverrideResponseCode = 502,
    ///                         },
    ///                     },
    ///                     ErrorService = error.Id,
    ///                 },
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/private/*",
    ///                         },
    ///                         Service = example.Id,
    ///                         CustomErrorResponsePolicy = new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleCustomErrorResponsePolicyArgs
    ///                         {
    ///                             ErrorResponseRules = new[]
    ///                             {
    ///                                 new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRuleArgs
    ///                                 {
    ///                                     MatchResponseCodes = new[]
    ///                                     {
    ///                                         "4xx",
    ///                                     },
    ///                                     Path = "/login.html",
    ///                                     OverrideResponseCode = 401,
    ///                                 },
    ///                             },
    ///                             ErrorService = error.Id,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// UrlMap can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/global/urlMaps/{{name}}`
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, UrlMap can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/uRLMap:URLMap default projects/{{project}}/global/urlMaps/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/uRLMap:URLMap default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/uRLMap:URLMap default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/uRLMap:URLMap")]
    public partial class URLMap : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// defaultCustomErrorResponsePolicy specifies how the Load Balancer returns error responses when BackendService or BackendBucket responds with an error.
        /// This policy takes effect at the PathMatcher level and applies only when no policy has been defined for the error code at lower levels like RouteRule and PathRule within this PathMatcher. If an error code does not have a policy defined in defaultCustomErrorResponsePolicy, then a policy defined for the error code in UrlMap.defaultCustomErrorResponsePolicy takes effect.
        /// For example, consider a UrlMap with the following configuration:
        /// UrlMap.defaultCustomErrorResponsePolicy is configured with policies for 5xx and 4xx errors
        /// A RouteRule for /coming_soon/ is configured for the error code 404.
        /// If the request is for www.myotherdomain.com and a 404 is encountered, the policy under UrlMap.defaultCustomErrorResponsePolicy takes effect. If a 404 response is encountered for the request www.example.com/current_events/, the pathMatcher's policy takes effect. If however, the request for www.example.com/coming_soon/ encounters a 404, the policy in RouteRule.customErrorResponsePolicy takes effect. If any of the requests in this example encounter a 500 error code, the policy at UrlMap.defaultCustomErrorResponsePolicy takes effect.
        /// When used in conjunction with pathMatcher.defaultRouteAction.retryPolicy, retries take precedence. Only once all retries are exhausted, the defaultCustomErrorResponsePolicy is applied. While attempting a retry, if load balancer is successful in reaching the service, the defaultCustomErrorResponsePolicy is ignored and the response from the service is returned to the client.
        /// defaultCustomErrorResponsePolicy is supported only for global external Application Load Balancers.
        /// Structure is documented below.
        /// </summary>
        [Output("defaultCustomErrorResponsePolicy")]
        public Output<Outputs.URLMapDefaultCustomErrorResponsePolicy?> DefaultCustomErrorResponsePolicy { get; private set; } = null!;

        /// <summary>
        /// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions
        /// like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend.
        /// If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService
        /// is set, defaultRouteAction cannot contain any weightedBackendServices.
        /// Only one of defaultRouteAction or defaultUrlRedirect must be set.
        /// Structure is documented below.
        /// </summary>
        [Output("defaultRouteAction")]
        public Output<Outputs.URLMapDefaultRouteAction?> DefaultRouteAction { get; private set; } = null!;

        /// <summary>
        /// The backend service or backend bucket to use when none of the given rules match.
        /// </summary>
        [Output("defaultService")]
        public Output<string?> DefaultService { get; private set; } = null!;

        /// <summary>
        /// When none of the specified hostRules match, the request is redirected to a URL specified
        /// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        /// defaultRouteAction must not be set.
        /// Structure is documented below.
        /// </summary>
        [Output("defaultUrlRedirect")]
        public Output<Outputs.URLMapDefaultUrlRedirect?> DefaultUrlRedirect { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource. Provide this property when you create
        /// the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This
        /// field is used in optimistic locking.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// Specifies changes to request and response headers that need to take effect for
        /// the selected backendService. The headerAction specified here take effect after
        /// headerAction specified under pathMatcher.
        /// Structure is documented below.
        /// </summary>
        [Output("headerAction")]
        public Output<Outputs.URLMapHeaderAction?> HeaderAction { get; private set; } = null!;

        /// <summary>
        /// The list of HostRules to use against the URL.
        /// Structure is documented below.
        /// </summary>
        [Output("hostRules")]
        public Output<ImmutableArray<Outputs.URLMapHostRule>> HostRules { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the resource.
        /// </summary>
        [Output("mapId")]
        public Output<int> MapId { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The
        /// name must be 1-63 characters long, and comply with RFC1035. Specifically, the
        /// name must be 1-63 characters long and match the regular expression
        /// `a-z?` which means the first character must be a lowercase
        /// letter, and all following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of named PathMatchers to use against the URL.
        /// Structure is documented below.
        /// </summary>
        [Output("pathMatchers")]
        public Output<ImmutableArray<Outputs.URLMapPathMatcher>> PathMatchers { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// The list of expected URL mapping tests. Request to update this UrlMap will
        /// succeed only if all of the test cases pass. You can specify a maximum of 100
        /// tests per UrlMap.
        /// Structure is documented below.
        /// </summary>
        [Output("tests")]
        public Output<ImmutableArray<Outputs.URLMapTest>> Tests { get; private set; } = null!;


        /// <summary>
        /// Create a URLMap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public URLMap(string name, URLMapArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:compute/uRLMap:URLMap", name, args ?? new URLMapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private URLMap(string name, Input<string> id, URLMapState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/uRLMap:URLMap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing URLMap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static URLMap Get(string name, Input<string> id, URLMapState? state = null, CustomResourceOptions? options = null)
        {
            return new URLMap(name, id, state, options);
        }
    }

    public sealed class URLMapArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// defaultCustomErrorResponsePolicy specifies how the Load Balancer returns error responses when BackendService or BackendBucket responds with an error.
        /// This policy takes effect at the PathMatcher level and applies only when no policy has been defined for the error code at lower levels like RouteRule and PathRule within this PathMatcher. If an error code does not have a policy defined in defaultCustomErrorResponsePolicy, then a policy defined for the error code in UrlMap.defaultCustomErrorResponsePolicy takes effect.
        /// For example, consider a UrlMap with the following configuration:
        /// UrlMap.defaultCustomErrorResponsePolicy is configured with policies for 5xx and 4xx errors
        /// A RouteRule for /coming_soon/ is configured for the error code 404.
        /// If the request is for www.myotherdomain.com and a 404 is encountered, the policy under UrlMap.defaultCustomErrorResponsePolicy takes effect. If a 404 response is encountered for the request www.example.com/current_events/, the pathMatcher's policy takes effect. If however, the request for www.example.com/coming_soon/ encounters a 404, the policy in RouteRule.customErrorResponsePolicy takes effect. If any of the requests in this example encounter a 500 error code, the policy at UrlMap.defaultCustomErrorResponsePolicy takes effect.
        /// When used in conjunction with pathMatcher.defaultRouteAction.retryPolicy, retries take precedence. Only once all retries are exhausted, the defaultCustomErrorResponsePolicy is applied. While attempting a retry, if load balancer is successful in reaching the service, the defaultCustomErrorResponsePolicy is ignored and the response from the service is returned to the client.
        /// defaultCustomErrorResponsePolicy is supported only for global external Application Load Balancers.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultCustomErrorResponsePolicy")]
        public Input<Inputs.URLMapDefaultCustomErrorResponsePolicyArgs>? DefaultCustomErrorResponsePolicy { get; set; }

        /// <summary>
        /// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions
        /// like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend.
        /// If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService
        /// is set, defaultRouteAction cannot contain any weightedBackendServices.
        /// Only one of defaultRouteAction or defaultUrlRedirect must be set.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultRouteAction")]
        public Input<Inputs.URLMapDefaultRouteActionArgs>? DefaultRouteAction { get; set; }

        /// <summary>
        /// The backend service or backend bucket to use when none of the given rules match.
        /// </summary>
        [Input("defaultService")]
        public Input<string>? DefaultService { get; set; }

        /// <summary>
        /// When none of the specified hostRules match, the request is redirected to a URL specified
        /// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        /// defaultRouteAction must not be set.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultUrlRedirect")]
        public Input<Inputs.URLMapDefaultUrlRedirectArgs>? DefaultUrlRedirect { get; set; }

        /// <summary>
        /// An optional description of this resource. Provide this property when you create
        /// the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies changes to request and response headers that need to take effect for
        /// the selected backendService. The headerAction specified here take effect after
        /// headerAction specified under pathMatcher.
        /// Structure is documented below.
        /// </summary>
        [Input("headerAction")]
        public Input<Inputs.URLMapHeaderActionArgs>? HeaderAction { get; set; }

        [Input("hostRules")]
        private InputList<Inputs.URLMapHostRuleArgs>? _hostRules;

        /// <summary>
        /// The list of HostRules to use against the URL.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.URLMapHostRuleArgs> HostRules
        {
            get => _hostRules ?? (_hostRules = new InputList<Inputs.URLMapHostRuleArgs>());
            set => _hostRules = value;
        }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The
        /// name must be 1-63 characters long, and comply with RFC1035. Specifically, the
        /// name must be 1-63 characters long and match the regular expression
        /// `a-z?` which means the first character must be a lowercase
        /// letter, and all following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pathMatchers")]
        private InputList<Inputs.URLMapPathMatcherArgs>? _pathMatchers;

        /// <summary>
        /// The list of named PathMatchers to use against the URL.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.URLMapPathMatcherArgs> PathMatchers
        {
            get => _pathMatchers ?? (_pathMatchers = new InputList<Inputs.URLMapPathMatcherArgs>());
            set => _pathMatchers = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("tests")]
        private InputList<Inputs.URLMapTestArgs>? _tests;

        /// <summary>
        /// The list of expected URL mapping tests. Request to update this UrlMap will
        /// succeed only if all of the test cases pass. You can specify a maximum of 100
        /// tests per UrlMap.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.URLMapTestArgs> Tests
        {
            get => _tests ?? (_tests = new InputList<Inputs.URLMapTestArgs>());
            set => _tests = value;
        }

        public URLMapArgs()
        {
        }
        public static new URLMapArgs Empty => new URLMapArgs();
    }

    public sealed class URLMapState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// defaultCustomErrorResponsePolicy specifies how the Load Balancer returns error responses when BackendService or BackendBucket responds with an error.
        /// This policy takes effect at the PathMatcher level and applies only when no policy has been defined for the error code at lower levels like RouteRule and PathRule within this PathMatcher. If an error code does not have a policy defined in defaultCustomErrorResponsePolicy, then a policy defined for the error code in UrlMap.defaultCustomErrorResponsePolicy takes effect.
        /// For example, consider a UrlMap with the following configuration:
        /// UrlMap.defaultCustomErrorResponsePolicy is configured with policies for 5xx and 4xx errors
        /// A RouteRule for /coming_soon/ is configured for the error code 404.
        /// If the request is for www.myotherdomain.com and a 404 is encountered, the policy under UrlMap.defaultCustomErrorResponsePolicy takes effect. If a 404 response is encountered for the request www.example.com/current_events/, the pathMatcher's policy takes effect. If however, the request for www.example.com/coming_soon/ encounters a 404, the policy in RouteRule.customErrorResponsePolicy takes effect. If any of the requests in this example encounter a 500 error code, the policy at UrlMap.defaultCustomErrorResponsePolicy takes effect.
        /// When used in conjunction with pathMatcher.defaultRouteAction.retryPolicy, retries take precedence. Only once all retries are exhausted, the defaultCustomErrorResponsePolicy is applied. While attempting a retry, if load balancer is successful in reaching the service, the defaultCustomErrorResponsePolicy is ignored and the response from the service is returned to the client.
        /// defaultCustomErrorResponsePolicy is supported only for global external Application Load Balancers.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultCustomErrorResponsePolicy")]
        public Input<Inputs.URLMapDefaultCustomErrorResponsePolicyGetArgs>? DefaultCustomErrorResponsePolicy { get; set; }

        /// <summary>
        /// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions
        /// like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend.
        /// If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService
        /// is set, defaultRouteAction cannot contain any weightedBackendServices.
        /// Only one of defaultRouteAction or defaultUrlRedirect must be set.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultRouteAction")]
        public Input<Inputs.URLMapDefaultRouteActionGetArgs>? DefaultRouteAction { get; set; }

        /// <summary>
        /// The backend service or backend bucket to use when none of the given rules match.
        /// </summary>
        [Input("defaultService")]
        public Input<string>? DefaultService { get; set; }

        /// <summary>
        /// When none of the specified hostRules match, the request is redirected to a URL specified
        /// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        /// defaultRouteAction must not be set.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultUrlRedirect")]
        public Input<Inputs.URLMapDefaultUrlRedirectGetArgs>? DefaultUrlRedirect { get; set; }

        /// <summary>
        /// An optional description of this resource. Provide this property when you create
        /// the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This
        /// field is used in optimistic locking.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// Specifies changes to request and response headers that need to take effect for
        /// the selected backendService. The headerAction specified here take effect after
        /// headerAction specified under pathMatcher.
        /// Structure is documented below.
        /// </summary>
        [Input("headerAction")]
        public Input<Inputs.URLMapHeaderActionGetArgs>? HeaderAction { get; set; }

        [Input("hostRules")]
        private InputList<Inputs.URLMapHostRuleGetArgs>? _hostRules;

        /// <summary>
        /// The list of HostRules to use against the URL.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.URLMapHostRuleGetArgs> HostRules
        {
            get => _hostRules ?? (_hostRules = new InputList<Inputs.URLMapHostRuleGetArgs>());
            set => _hostRules = value;
        }

        /// <summary>
        /// The unique identifier for the resource.
        /// </summary>
        [Input("mapId")]
        public Input<int>? MapId { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The
        /// name must be 1-63 characters long, and comply with RFC1035. Specifically, the
        /// name must be 1-63 characters long and match the regular expression
        /// `a-z?` which means the first character must be a lowercase
        /// letter, and all following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pathMatchers")]
        private InputList<Inputs.URLMapPathMatcherGetArgs>? _pathMatchers;

        /// <summary>
        /// The list of named PathMatchers to use against the URL.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.URLMapPathMatcherGetArgs> PathMatchers
        {
            get => _pathMatchers ?? (_pathMatchers = new InputList<Inputs.URLMapPathMatcherGetArgs>());
            set => _pathMatchers = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("tests")]
        private InputList<Inputs.URLMapTestGetArgs>? _tests;

        /// <summary>
        /// The list of expected URL mapping tests. Request to update this UrlMap will
        /// succeed only if all of the test cases pass. You can specify a maximum of 100
        /// tests per UrlMap.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.URLMapTestGetArgs> Tests
        {
            get => _tests ?? (_tests = new InputList<Inputs.URLMapTestGetArgs>());
            set => _tests = value;
        }

        public URLMapState()
        {
        }
        public static new URLMapState Empty => new URLMapState();
    }
}
