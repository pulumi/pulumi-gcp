// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Compute Wire Group Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var example_cross_site_network = new Gcp.Compute.CrossSiteNetwork("example-cross-site-network", new()
    ///     {
    ///         Name = "test-cross-site-network",
    ///         Description = "Example cross site network",
    ///     });
    /// 
    ///     var example_test_wire_group = new Gcp.Compute.WireGroup("example-test-wire-group", new()
    ///     {
    ///         Name = "test-wire-group",
    ///         Description = "Example Wire Group",
    ///         CrossSiteNetwork = "test-cross-site-network",
    ///         WireProperties = new Gcp.Compute.Inputs.WireGroupWirePropertiesArgs
    ///         {
    ///             BandwidthUnmetered = 10,
    ///             FaultResponse = "NONE",
    ///         },
    ///         WireGroupProperties = new Gcp.Compute.Inputs.WireGroupWireGroupPropertiesArgs
    ///         {
    ///             Type = "WIRE",
    ///         },
    ///         AdminEnabled = true,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             example_cross_site_network,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WireGroup can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}`
    /// 
    /// * `{{project}}/{{cross_site_network}}/{{name}}`
    /// 
    /// * `{{cross_site_network}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, WireGroup can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/wireGroup:WireGroup default projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/wireGroup:WireGroup default {{project}}/{{cross_site_network}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/wireGroup:WireGroup default {{cross_site_network}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/wireGroup:WireGroup")]
    public partial class WireGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether the wire group is administratively enabled.
        /// </summary>
        [Output("adminEnabled")]
        public Output<bool?> AdminEnabled { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// Required cross site network to which wire group belongs.
        /// </summary>
        [Output("crossSiteNetwork")]
        public Output<string> CrossSiteNetwork { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Endpoints grouped by location, each mapping to interconnect configurations.
        /// Structure is documented below.
        /// </summary>
        [Output("endpoints")]
        public Output<ImmutableArray<Outputs.WireGroupEndpoint>> Endpoints { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The name must be
        /// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
        /// long and match the regular expression `a-z?` which means the first
        /// character must be a lowercase letter, and all following characters must be a dash,
        /// lowercase letter, or digit, except the last character, which cannot be a dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Topology details for the wire group configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("topologies")]
        public Output<ImmutableArray<Outputs.WireGroupTopology>> Topologies { get; private set; } = null!;

        /// <summary>
        /// Properties specific to the wire group.
        /// Structure is documented below.
        /// </summary>
        [Output("wireGroupProperties")]
        public Output<Outputs.WireGroupWireGroupProperties?> WireGroupProperties { get; private set; } = null!;

        /// <summary>
        /// Default properties for wires within the group.
        /// Structure is documented below.
        /// </summary>
        [Output("wireProperties")]
        public Output<Outputs.WireGroupWireProperties?> WireProperties { get; private set; } = null!;

        /// <summary>
        /// The single/redundant wire(s) managed by the wire group.
        /// Structure is documented below.
        /// </summary>
        [Output("wires")]
        public Output<ImmutableArray<Outputs.WireGroupWire>> Wires { get; private set; } = null!;


        /// <summary>
        /// Create a WireGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WireGroup(string name, WireGroupArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/wireGroup:WireGroup", name, args ?? new WireGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WireGroup(string name, Input<string> id, WireGroupState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/wireGroup:WireGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WireGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WireGroup Get(string name, Input<string> id, WireGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new WireGroup(name, id, state, options);
        }
    }

    public sealed class WireGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the wire group is administratively enabled.
        /// </summary>
        [Input("adminEnabled")]
        public Input<bool>? AdminEnabled { get; set; }

        /// <summary>
        /// Required cross site network to which wire group belongs.
        /// </summary>
        [Input("crossSiteNetwork", required: true)]
        public Input<string> CrossSiteNetwork { get; set; } = null!;

        /// <summary>
        /// An optional description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("endpoints")]
        private InputList<Inputs.WireGroupEndpointArgs>? _endpoints;

        /// <summary>
        /// Endpoints grouped by location, each mapping to interconnect configurations.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WireGroupEndpointArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.WireGroupEndpointArgs>());
            set => _endpoints = value;
        }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The name must be
        /// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
        /// long and match the regular expression `a-z?` which means the first
        /// character must be a lowercase letter, and all following characters must be a dash,
        /// lowercase letter, or digit, except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Properties specific to the wire group.
        /// Structure is documented below.
        /// </summary>
        [Input("wireGroupProperties")]
        public Input<Inputs.WireGroupWireGroupPropertiesArgs>? WireGroupProperties { get; set; }

        /// <summary>
        /// Default properties for wires within the group.
        /// Structure is documented below.
        /// </summary>
        [Input("wireProperties")]
        public Input<Inputs.WireGroupWirePropertiesArgs>? WireProperties { get; set; }

        public WireGroupArgs()
        {
        }
        public static new WireGroupArgs Empty => new WireGroupArgs();
    }

    public sealed class WireGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the wire group is administratively enabled.
        /// </summary>
        [Input("adminEnabled")]
        public Input<bool>? AdminEnabled { get; set; }

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// Required cross site network to which wire group belongs.
        /// </summary>
        [Input("crossSiteNetwork")]
        public Input<string>? CrossSiteNetwork { get; set; }

        /// <summary>
        /// An optional description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("endpoints")]
        private InputList<Inputs.WireGroupEndpointGetArgs>? _endpoints;

        /// <summary>
        /// Endpoints grouped by location, each mapping to interconnect configurations.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WireGroupEndpointGetArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.WireGroupEndpointGetArgs>());
            set => _endpoints = value;
        }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The name must be
        /// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
        /// long and match the regular expression `a-z?` which means the first
        /// character must be a lowercase letter, and all following characters must be a dash,
        /// lowercase letter, or digit, except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("topologies")]
        private InputList<Inputs.WireGroupTopologyGetArgs>? _topologies;

        /// <summary>
        /// Topology details for the wire group configuration.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WireGroupTopologyGetArgs> Topologies
        {
            get => _topologies ?? (_topologies = new InputList<Inputs.WireGroupTopologyGetArgs>());
            set => _topologies = value;
        }

        /// <summary>
        /// Properties specific to the wire group.
        /// Structure is documented below.
        /// </summary>
        [Input("wireGroupProperties")]
        public Input<Inputs.WireGroupWireGroupPropertiesGetArgs>? WireGroupProperties { get; set; }

        /// <summary>
        /// Default properties for wires within the group.
        /// Structure is documented below.
        /// </summary>
        [Input("wireProperties")]
        public Input<Inputs.WireGroupWirePropertiesGetArgs>? WireProperties { get; set; }

        [Input("wires")]
        private InputList<Inputs.WireGroupWireGetArgs>? _wires;

        /// <summary>
        /// The single/redundant wire(s) managed by the wire group.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WireGroupWireGetArgs> Wires
        {
            get => _wires ?? (_wires = new InputList<Inputs.WireGroupWireGetArgs>());
            set => _wires = value;
        }

        public WireGroupState()
        {
        }
        public static new WireGroupState Empty => new WireGroupState();
    }
}
