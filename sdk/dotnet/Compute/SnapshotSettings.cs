// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Updates your project's snapshot settings and sets a new default storage location for snapshots.
    /// 
    /// To get more information about SnapshotSettings, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/snapshotSettings)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/compute/docs/disks/snapshot-settings#snapshot_settings_how_to_update)
    /// 
    /// ## Example Usage
    /// 
    /// ### Snapshot Settings Specific Locations
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var tf_test_snapshot_settings = new Gcp.Compute.SnapshotSettings("tf-test-snapshot-settings", new()
    ///     {
    ///         StorageLocation = new Gcp.Compute.Inputs.SnapshotSettingsStorageLocationArgs
    ///         {
    ///             Policy = "SPECIFIC_LOCATIONS",
    ///             Locations = new[]
    ///             {
    ///                 new Gcp.Compute.Inputs.SnapshotSettingsStorageLocationLocationArgs
    ///                 {
    ///                     Name = "us-central1",
    ///                     Location = "us-central1",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SnapshotSettings can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/global/snapshotSettings/`
    /// 
    /// * `{{project}}`
    /// 
    /// When using the `pulumi import` command, SnapshotSettings can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/snapshotSettings:SnapshotSettings default projects/{{project}}/global/snapshotSettings/
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/snapshotSettings:SnapshotSettings default {{project}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/snapshotSettings:SnapshotSettings")]
    public partial class SnapshotSettings : global::Pulumi.CustomResource
    {
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Policy of which storage location is going to be resolved, and additional data
        /// that particularizes how the policy is going to be carried out
        /// Structure is documented below.
        /// </summary>
        [Output("storageLocation")]
        public Output<Outputs.SnapshotSettingsStorageLocation> StorageLocation { get; private set; } = null!;


        /// <summary>
        /// Create a SnapshotSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SnapshotSettings(string name, SnapshotSettingsArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/snapshotSettings:SnapshotSettings", name, args ?? new SnapshotSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SnapshotSettings(string name, Input<string> id, SnapshotSettingsState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/snapshotSettings:SnapshotSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SnapshotSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SnapshotSettings Get(string name, Input<string> id, SnapshotSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new SnapshotSettings(name, id, state, options);
        }
    }

    public sealed class SnapshotSettingsArgs : global::Pulumi.ResourceArgs
    {
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Policy of which storage location is going to be resolved, and additional data
        /// that particularizes how the policy is going to be carried out
        /// Structure is documented below.
        /// </summary>
        [Input("storageLocation", required: true)]
        public Input<Inputs.SnapshotSettingsStorageLocationArgs> StorageLocation { get; set; } = null!;

        public SnapshotSettingsArgs()
        {
        }
        public static new SnapshotSettingsArgs Empty => new SnapshotSettingsArgs();
    }

    public sealed class SnapshotSettingsState : global::Pulumi.ResourceArgs
    {
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Policy of which storage location is going to be resolved, and additional data
        /// that particularizes how the policy is going to be carried out
        /// Structure is documented below.
        /// </summary>
        [Input("storageLocation")]
        public Input<Inputs.SnapshotSettingsStorageLocationGetArgs>? StorageLocation { get; set; }

        public SnapshotSettingsState()
        {
        }
        public static new SnapshotSettingsState Empty => new SnapshotSettingsState();
    }
}
