// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetRegionInstanceGroupManager
    {
        /// <summary>
        /// Get a Compute Region Instance Group Manager within GCE.
        /// For more information, see [the official documentation](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups)
        /// and [API](https://cloud.google.com/compute/docs/reference/rest/v1/regionInstanceGroupManagers)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rigm = Gcp.Compute.GetRegionInstanceGroupManager.Invoke(new()
        ///     {
        ///         Name = "my-igm",
        ///         Region = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRegionInstanceGroupManagerResult> InvokeAsync(GetRegionInstanceGroupManagerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegionInstanceGroupManagerResult>("gcp:compute/getRegionInstanceGroupManager:getRegionInstanceGroupManager", args ?? new GetRegionInstanceGroupManagerArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Compute Region Instance Group Manager within GCE.
        /// For more information, see [the official documentation](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups)
        /// and [API](https://cloud.google.com/compute/docs/reference/rest/v1/regionInstanceGroupManagers)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rigm = Gcp.Compute.GetRegionInstanceGroupManager.Invoke(new()
        ///     {
        ///         Name = "my-igm",
        ///         Region = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegionInstanceGroupManagerResult> Invoke(GetRegionInstanceGroupManagerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionInstanceGroupManagerResult>("gcp:compute/getRegionInstanceGroupManager:getRegionInstanceGroupManager", args ?? new GetRegionInstanceGroupManagerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Compute Region Instance Group Manager within GCE.
        /// For more information, see [the official documentation](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups)
        /// and [API](https://cloud.google.com/compute/docs/reference/rest/v1/regionInstanceGroupManagers)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rigm = Gcp.Compute.GetRegionInstanceGroupManager.Invoke(new()
        ///     {
        ///         Name = "my-igm",
        ///         Region = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegionInstanceGroupManagerResult> Invoke(GetRegionInstanceGroupManagerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionInstanceGroupManagerResult>("gcp:compute/getRegionInstanceGroupManager:getRegionInstanceGroupManager", args ?? new GetRegionInstanceGroupManagerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionInstanceGroupManagerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the instance group. Either `name` or `self_link` must be provided.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// 
        /// * `Region` - (Optional) The region where the managed instance group resides. If not provided, the provider region is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// The self link of the instance group. Either `name` or `self_link` must be provided.
        /// </summary>
        [Input("selfLink")]
        public string? SelfLink { get; set; }

        public GetRegionInstanceGroupManagerArgs()
        {
        }
        public static new GetRegionInstanceGroupManagerArgs Empty => new GetRegionInstanceGroupManagerArgs();
    }

    public sealed class GetRegionInstanceGroupManagerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the instance group. Either `name` or `self_link` must be provided.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// 
        /// * `Region` - (Optional) The region where the managed instance group resides. If not provided, the provider region is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The self link of the instance group. Either `name` or `self_link` must be provided.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        public GetRegionInstanceGroupManagerInvokeArgs()
        {
        }
        public static new GetRegionInstanceGroupManagerInvokeArgs Empty => new GetRegionInstanceGroupManagerInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegionInstanceGroupManagerResult
    {
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerAllInstancesConfigResult> AllInstancesConfigs;
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerAutoHealingPolicyResult> AutoHealingPolicies;
        public readonly string BaseInstanceName;
        public readonly string CreationTimestamp;
        public readonly string Description;
        public readonly string DistributionPolicyTargetShape;
        public readonly ImmutableArray<string> DistributionPolicyZones;
        public readonly string Fingerprint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerInstanceFlexibilityPolicyResult> InstanceFlexibilityPolicies;
        public readonly string InstanceGroup;
        public readonly int InstanceGroupManagerId;
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerInstanceLifecyclePolicyResult> InstanceLifecyclePolicies;
        public readonly string ListManagedInstancesResults;
        public readonly string? Name;
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerNamedPortResult> NamedPorts;
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerParamResult> Params;
        public readonly string? Project;
        public readonly string? Region;
        public readonly string? SelfLink;
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerStandbyPolicyResult> StandbyPolicies;
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerStatefulDiskResult> StatefulDisks;
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerStatefulExternalIpResult> StatefulExternalIps;
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerStatefulInternalIpResult> StatefulInternalIps;
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerStatusResult> Statuses;
        public readonly ImmutableArray<string> TargetPools;
        public readonly int TargetSize;
        public readonly int TargetStoppedSize;
        public readonly int TargetSuspendedSize;
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerUpdatePolicyResult> UpdatePolicies;
        public readonly ImmutableArray<Outputs.GetRegionInstanceGroupManagerVersionResult> Versions;
        public readonly bool WaitForInstances;
        public readonly string WaitForInstancesStatus;

        [OutputConstructor]
        private GetRegionInstanceGroupManagerResult(
            ImmutableArray<Outputs.GetRegionInstanceGroupManagerAllInstancesConfigResult> allInstancesConfigs,

            ImmutableArray<Outputs.GetRegionInstanceGroupManagerAutoHealingPolicyResult> autoHealingPolicies,

            string baseInstanceName,

            string creationTimestamp,

            string description,

            string distributionPolicyTargetShape,

            ImmutableArray<string> distributionPolicyZones,

            string fingerprint,

            string id,

            ImmutableArray<Outputs.GetRegionInstanceGroupManagerInstanceFlexibilityPolicyResult> instanceFlexibilityPolicies,

            string instanceGroup,

            int instanceGroupManagerId,

            ImmutableArray<Outputs.GetRegionInstanceGroupManagerInstanceLifecyclePolicyResult> instanceLifecyclePolicies,

            string listManagedInstancesResults,

            string? name,

            ImmutableArray<Outputs.GetRegionInstanceGroupManagerNamedPortResult> namedPorts,

            ImmutableArray<Outputs.GetRegionInstanceGroupManagerParamResult> @params,

            string? project,

            string? region,

            string? selfLink,

            ImmutableArray<Outputs.GetRegionInstanceGroupManagerStandbyPolicyResult> standbyPolicies,

            ImmutableArray<Outputs.GetRegionInstanceGroupManagerStatefulDiskResult> statefulDisks,

            ImmutableArray<Outputs.GetRegionInstanceGroupManagerStatefulExternalIpResult> statefulExternalIps,

            ImmutableArray<Outputs.GetRegionInstanceGroupManagerStatefulInternalIpResult> statefulInternalIps,

            ImmutableArray<Outputs.GetRegionInstanceGroupManagerStatusResult> statuses,

            ImmutableArray<string> targetPools,

            int targetSize,

            int targetStoppedSize,

            int targetSuspendedSize,

            ImmutableArray<Outputs.GetRegionInstanceGroupManagerUpdatePolicyResult> updatePolicies,

            ImmutableArray<Outputs.GetRegionInstanceGroupManagerVersionResult> versions,

            bool waitForInstances,

            string waitForInstancesStatus)
        {
            AllInstancesConfigs = allInstancesConfigs;
            AutoHealingPolicies = autoHealingPolicies;
            BaseInstanceName = baseInstanceName;
            CreationTimestamp = creationTimestamp;
            Description = description;
            DistributionPolicyTargetShape = distributionPolicyTargetShape;
            DistributionPolicyZones = distributionPolicyZones;
            Fingerprint = fingerprint;
            Id = id;
            InstanceFlexibilityPolicies = instanceFlexibilityPolicies;
            InstanceGroup = instanceGroup;
            InstanceGroupManagerId = instanceGroupManagerId;
            InstanceLifecyclePolicies = instanceLifecyclePolicies;
            ListManagedInstancesResults = listManagedInstancesResults;
            Name = name;
            NamedPorts = namedPorts;
            Params = @params;
            Project = project;
            Region = region;
            SelfLink = selfLink;
            StandbyPolicies = standbyPolicies;
            StatefulDisks = statefulDisks;
            StatefulExternalIps = statefulExternalIps;
            StatefulInternalIps = statefulInternalIps;
            Statuses = statuses;
            TargetPools = targetPools;
            TargetSize = targetSize;
            TargetStoppedSize = targetStoppedSize;
            TargetSuspendedSize = targetSuspendedSize;
            UpdatePolicies = updatePolicies;
            Versions = versions;
            WaitForInstances = waitForInstances;
            WaitForInstancesStatus = waitForInstancesStatus;
        }
    }
}
