// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetRegionDisk
    {
        /// <summary>
        /// Get information about a Google Compute Regional Persistent disks.
        /// 
        /// [the official documentation](https://cloud.google.com/compute/docs/disks) and its [API](https://cloud.google.com/compute/docs/reference/rest/v1/regionDisks).
        /// </summary>
        public static Task<GetRegionDiskResult> InvokeAsync(GetRegionDiskArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegionDiskResult>("gcp:compute/getRegionDisk:getRegionDisk", args ?? new GetRegionDiskArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Google Compute Regional Persistent disks.
        /// 
        /// [the official documentation](https://cloud.google.com/compute/docs/disks) and its [API](https://cloud.google.com/compute/docs/reference/rest/v1/regionDisks).
        /// </summary>
        public static Output<GetRegionDiskResult> Invoke(GetRegionDiskInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionDiskResult>("gcp:compute/getRegionDisk:getRegionDisk", args ?? new GetRegionDiskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionDiskArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of a specific disk.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// A reference to the region where the disk resides.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetRegionDiskArgs()
        {
        }
        public static new GetRegionDiskArgs Empty => new GetRegionDiskArgs();
    }

    public sealed class GetRegionDiskInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of a specific disk.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A reference to the region where the disk resides.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetRegionDiskInvokeArgs()
        {
        }
        public static new GetRegionDiskInvokeArgs Empty => new GetRegionDiskInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegionDiskResult
    {
        public readonly ImmutableArray<Outputs.GetRegionDiskAsyncPrimaryDiskResult> AsyncPrimaryDisks;
        public readonly string CreationTimestamp;
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetRegionDiskDiskEncryptionKeyResult> DiskEncryptionKeys;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly ImmutableArray<Outputs.GetRegionDiskGuestOsFeatureResult> GuestOsFeatures;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Interface;
        public readonly string LabelFingerprint;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string LastAttachTimestamp;
        public readonly string LastDetachTimestamp;
        public readonly ImmutableArray<string> Licenses;
        public readonly string Name;
        public readonly int PhysicalBlockSizeBytes;
        public readonly string? Project;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly string? Region;
        public readonly ImmutableArray<string> ReplicaZones;
        public readonly string SelfLink;
        public readonly int Size;
        public readonly string Snapshot;
        public readonly string SourceDisk;
        public readonly string SourceDiskId;
        public readonly ImmutableArray<Outputs.GetRegionDiskSourceSnapshotEncryptionKeyResult> SourceSnapshotEncryptionKeys;
        public readonly string SourceSnapshotId;
        public readonly string Type;
        public readonly ImmutableArray<string> Users;

        [OutputConstructor]
        private GetRegionDiskResult(
            ImmutableArray<Outputs.GetRegionDiskAsyncPrimaryDiskResult> asyncPrimaryDisks,

            string creationTimestamp,

            string description,

            ImmutableArray<Outputs.GetRegionDiskDiskEncryptionKeyResult> diskEncryptionKeys,

            ImmutableDictionary<string, string> effectiveLabels,

            ImmutableArray<Outputs.GetRegionDiskGuestOsFeatureResult> guestOsFeatures,

            string id,

            string @interface,

            string labelFingerprint,

            ImmutableDictionary<string, string> labels,

            string lastAttachTimestamp,

            string lastDetachTimestamp,

            ImmutableArray<string> licenses,

            string name,

            int physicalBlockSizeBytes,

            string? project,

            ImmutableDictionary<string, string> pulumiLabels,

            string? region,

            ImmutableArray<string> replicaZones,

            string selfLink,

            int size,

            string snapshot,

            string sourceDisk,

            string sourceDiskId,

            ImmutableArray<Outputs.GetRegionDiskSourceSnapshotEncryptionKeyResult> sourceSnapshotEncryptionKeys,

            string sourceSnapshotId,

            string type,

            ImmutableArray<string> users)
        {
            AsyncPrimaryDisks = asyncPrimaryDisks;
            CreationTimestamp = creationTimestamp;
            Description = description;
            DiskEncryptionKeys = diskEncryptionKeys;
            EffectiveLabels = effectiveLabels;
            GuestOsFeatures = guestOsFeatures;
            Id = id;
            Interface = @interface;
            LabelFingerprint = labelFingerprint;
            Labels = labels;
            LastAttachTimestamp = lastAttachTimestamp;
            LastDetachTimestamp = lastDetachTimestamp;
            Licenses = licenses;
            Name = name;
            PhysicalBlockSizeBytes = physicalBlockSizeBytes;
            Project = project;
            PulumiLabels = pulumiLabels;
            Region = region;
            ReplicaZones = replicaZones;
            SelfLink = selfLink;
            Size = size;
            Snapshot = snapshot;
            SourceDisk = sourceDisk;
            SourceDiskId = sourceDiskId;
            SourceSnapshotEncryptionKeys = sourceSnapshotEncryptionKeys;
            SourceSnapshotId = sourceSnapshotId;
            Type = type;
            Users = users;
        }
    }
}
