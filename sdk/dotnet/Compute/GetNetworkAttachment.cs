// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetNetworkAttachment
    {
        /// <summary>
        /// Get a specific network attachment within a region. For more information see
        /// the [official documentation](https://cloud.google.com/vpc/docs/about-network-attachments)
        /// and [API](https://cloud.google.com/compute/docs/reference/rest/v1/networkAttachments/get).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.Compute.GetNetworkAttachment.Invoke(new()
        ///     {
        ///         Project = "my-project",
        ///         Name = "my-network-attachment",
        ///         Region = "europe-west1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNetworkAttachmentResult> InvokeAsync(GetNetworkAttachmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkAttachmentResult>("gcp:compute/getNetworkAttachment:getNetworkAttachment", args ?? new GetNetworkAttachmentArgs(), options.WithDefaults());

        /// <summary>
        /// Get a specific network attachment within a region. For more information see
        /// the [official documentation](https://cloud.google.com/vpc/docs/about-network-attachments)
        /// and [API](https://cloud.google.com/compute/docs/reference/rest/v1/networkAttachments/get).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.Compute.GetNetworkAttachment.Invoke(new()
        ///     {
        ///         Project = "my-project",
        ///         Name = "my-network-attachment",
        ///         Region = "europe-west1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkAttachmentResult> Invoke(GetNetworkAttachmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkAttachmentResult>("gcp:compute/getNetworkAttachment:getNetworkAttachment", args ?? new GetNetworkAttachmentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a specific network attachment within a region. For more information see
        /// the [official documentation](https://cloud.google.com/vpc/docs/about-network-attachments)
        /// and [API](https://cloud.google.com/compute/docs/reference/rest/v1/networkAttachments/get).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.Compute.GetNetworkAttachment.Invoke(new()
        ///     {
        ///         Project = "my-project",
        ///         Name = "my-network-attachment",
        ///         Region = "europe-west1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkAttachmentResult> Invoke(GetNetworkAttachmentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkAttachmentResult>("gcp:compute/getNetworkAttachment:getNetworkAttachment", args ?? new GetNetworkAttachmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkAttachmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network attachment to retrieve.
        /// The name must be unique within the region.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The region in which the network attachment resides.
        /// For example, `europe-west1`.
        /// </summary>
        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        public GetNetworkAttachmentArgs()
        {
        }
        public static new GetNetworkAttachmentArgs Empty => new GetNetworkAttachmentArgs();
    }

    public sealed class GetNetworkAttachmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network attachment to retrieve.
        /// The name must be unique within the region.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region in which the network attachment resides.
        /// For example, `europe-west1`.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public GetNetworkAttachmentInvokeArgs()
        {
        }
        public static new GetNetworkAttachmentInvokeArgs Empty => new GetNetworkAttachmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkAttachmentResult
    {
        public readonly ImmutableArray<Outputs.GetNetworkAttachmentConnectionEndpointResult> ConnectionEndpoints;
        public readonly string ConnectionPreference;
        public readonly string CreationTimestamp;
        public readonly string Description;
        public readonly string Fingerprint;
        public readonly string Id;
        public readonly string Kind;
        public readonly string Name;
        public readonly string Network;
        public readonly ImmutableArray<string> ProducerAcceptLists;
        public readonly ImmutableArray<string> ProducerRejectLists;
        public readonly string? Project;
        public readonly string Region;
        public readonly string SelfLink;
        public readonly string SelfLinkWithId;
        public readonly ImmutableArray<string> Subnetworks;

        [OutputConstructor]
        private GetNetworkAttachmentResult(
            ImmutableArray<Outputs.GetNetworkAttachmentConnectionEndpointResult> connectionEndpoints,

            string connectionPreference,

            string creationTimestamp,

            string description,

            string fingerprint,

            string id,

            string kind,

            string name,

            string network,

            ImmutableArray<string> producerAcceptLists,

            ImmutableArray<string> producerRejectLists,

            string? project,

            string region,

            string selfLink,

            string selfLinkWithId,

            ImmutableArray<string> subnetworks)
        {
            ConnectionEndpoints = connectionEndpoints;
            ConnectionPreference = connectionPreference;
            CreationTimestamp = creationTimestamp;
            Description = description;
            Fingerprint = fingerprint;
            Id = id;
            Kind = kind;
            Name = name;
            Network = network;
            ProducerAcceptLists = producerAcceptLists;
            ProducerRejectLists = producerRejectLists;
            Project = project;
            Region = region;
            SelfLink = selfLink;
            SelfLinkWithId = selfLinkWithId;
            Subnetworks = subnetworks;
        }
    }
}
