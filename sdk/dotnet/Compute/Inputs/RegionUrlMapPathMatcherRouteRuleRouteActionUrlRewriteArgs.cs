// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Inputs
{

    public sealed class RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Before forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite.
        /// The value must be from 1 to 255 characters.
        /// </summary>
        [Input("hostRewrite")]
        public Input<string>? HostRewrite { get; set; }

        /// <summary>
        /// Before forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite.
        /// The value must be from 1 to 1024 characters.
        /// </summary>
        [Input("pathPrefixRewrite")]
        public Input<string>? PathPrefixRewrite { get; set; }

        /// <summary>
        /// If specified, the pattern rewrites the URL path (based on the :path header) using the HTTP template syntax.
        /// A corresponding pathTemplateMatch must be specified. Any template variables must exist in the pathTemplateMatch field.
        /// * At least one variable must be specified in the pathTemplateMatch field
        /// * You can omit variables from the rewritten URL
        /// * The * and ** operators cannot be matched unless they have a corresponding variable name - e.g. {format=*} or {var=**}.
        /// For example, a pathTemplateMatch of /static/{format=**} could be rewritten as /static/content/{format} to prefix
        /// /content to the URL. Variables can also be re-ordered in a rewrite, so that /{country}/{format}/{suffix=**} can be
        /// rewritten as /content/{format}/{country}/{suffix}.
        /// At least one non-empty routeRules[].matchRules[].path_template_match is required.
        /// Only one of pathPrefixRewrite or pathTemplateRewrite may be specified.
        /// </summary>
        [Input("pathTemplateRewrite")]
        public Input<string>? PathTemplateRewrite { get; set; }

        public RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs()
        {
        }
        public static new RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs Empty => new RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs();
    }
}
