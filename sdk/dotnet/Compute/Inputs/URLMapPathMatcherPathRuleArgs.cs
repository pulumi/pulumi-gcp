// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Inputs
{

    public sealed class URLMapPathMatcherPathRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// customErrorResponsePolicy specifies how the Load Balancer returns error responses when BackendServiceor BackendBucket responds with an error.
        /// If a policy for an error code is not configured for the PathRule, a policy for the error code configured in pathMatcher.defaultCustomErrorResponsePolicy is applied. If one is not specified in pathMatcher.defaultCustomErrorResponsePolicy, the policy configured in UrlMap.defaultCustomErrorResponsePolicy takes effect.
        /// For example, consider a UrlMap with the following configuration:
        /// UrlMap.defaultCustomErrorResponsePolicy are configured with policies for 5xx and 4xx errors
        /// A PathRule for /coming_soon/ is configured for the error code 404.
        /// If the request is for www.myotherdomain.com and a 404 is encountered, the policy under UrlMap.defaultCustomErrorResponsePolicy takes effect. If a 404 response is encountered for the request www.example.com/current_events/, the pathMatcher's policy takes effect. If however, the request for www.example.com/coming_soon/ encounters a 404, the policy in PathRule.customErrorResponsePolicy takes effect. If any of the requests in this example encounter a 500 error code, the policy at UrlMap.defaultCustomErrorResponsePolicy takes effect.
        /// customErrorResponsePolicy is supported only for global external Application Load Balancers.
        /// Structure is documented below.
        /// </summary>
        [Input("customErrorResponsePolicy")]
        public Input<Inputs.URLMapPathMatcherPathRuleCustomErrorResponsePolicyArgs>? CustomErrorResponsePolicy { get; set; }

        [Input("paths", required: true)]
        private InputList<string>? _paths;

        /// <summary>
        /// The list of path patterns to match. Each must start with / and the only place a
        /// \* is allowed is at the end following a /. The string fed to the path matcher
        /// does not include any text after the first ? or #, and those chars are not
        /// allowed here.
        /// </summary>
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        /// <summary>
        /// In response to a matching path, the load balancer performs advanced routing
        /// actions like URL rewrites, header transformations, etc. prior to forwarding the
        /// request to the selected backend. If routeAction specifies any
        /// weightedBackendServices, service must not be set. Conversely if service is set,
        /// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
        /// or urlRedirect must be set.
        /// Structure is documented below.
        /// </summary>
        [Input("routeAction")]
        public Input<Inputs.URLMapPathMatcherPathRuleRouteActionArgs>? RouteAction { get; set; }

        /// <summary>
        /// The backend service or backend bucket to use if any of the given paths match.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// When a path pattern is matched, the request is redirected to a URL specified
        /// by urlRedirect. If urlRedirect is specified, service or routeAction must not
        /// be set.
        /// Structure is documented below.
        /// </summary>
        [Input("urlRedirect")]
        public Input<Inputs.URLMapPathMatcherPathRuleUrlRedirectArgs>? UrlRedirect { get; set; }

        public URLMapPathMatcherPathRuleArgs()
        {
        }
        public static new URLMapPathMatcherPathRuleArgs Empty => new URLMapPathMatcherPathRuleArgs();
    }
}
