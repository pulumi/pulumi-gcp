// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Inputs
{

    public sealed class InterconnectApplicationAwareInterconnectGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bandwidth Percentage policy allows you to have granular control over how your Interconnect
        /// bandwidth is utilized among your workloads mapping to different traffic classes.
        /// Structure is documented below.
        /// </summary>
        [Input("bandwidthPercentagePolicy")]
        public Input<Inputs.InterconnectApplicationAwareInterconnectBandwidthPercentagePolicyGetArgs>? BandwidthPercentagePolicy { get; set; }

        /// <summary>
        /// A description for the AAI profile on this interconnect.
        /// </summary>
        [Input("profileDescription")]
        public Input<string>? ProfileDescription { get; set; }

        [Input("shapeAveragePercentages")]
        private InputList<Inputs.InterconnectApplicationAwareInterconnectShapeAveragePercentageGetArgs>? _shapeAveragePercentages;

        /// <summary>
        /// Optional field to specify a list of shape average percentages to be
        /// applied in conjunction with StrictPriorityPolicy or BandwidthPercentagePolicy
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.InterconnectApplicationAwareInterconnectShapeAveragePercentageGetArgs> ShapeAveragePercentages
        {
            get => _shapeAveragePercentages ?? (_shapeAveragePercentages = new InputList<Inputs.InterconnectApplicationAwareInterconnectShapeAveragePercentageGetArgs>());
            set => _shapeAveragePercentages = value;
        }

        /// <summary>
        /// Specify configuration for StrictPriorityPolicy.
        /// </summary>
        [Input("strictPriorityPolicy")]
        public Input<Inputs.InterconnectApplicationAwareInterconnectStrictPriorityPolicyGetArgs>? StrictPriorityPolicy { get; set; }

        public InterconnectApplicationAwareInterconnectGetArgs()
        {
        }
        public static new InterconnectApplicationAwareInterconnectGetArgs Empty => new InterconnectApplicationAwareInterconnectGetArgs();
    }
}
