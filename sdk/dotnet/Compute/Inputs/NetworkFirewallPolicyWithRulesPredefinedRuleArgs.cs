// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Inputs
{

    public sealed class NetworkFirewallPolicyWithRulesPredefinedRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Output)
        /// The Action to perform when the client connection triggers the rule. Can currently be either
        /// "allow", "deny", "apply_security_profile_group" or "goto_next".
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Output)
        /// The direction in which this rule applies. If unspecified an INGRESS rule is created.
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// (Output)
        /// Denotes whether the firewall policy rule is disabled. When set to true,
        /// the firewall policy rule is not enforced and traffic behaves as if it did
        /// not exist. If this is unspecified, the firewall policy rule will be
        /// enabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// (Output)
        /// Denotes whether to enable logging for a particular rule.
        /// If logging is enabled, logs will be exported to the
        /// configured export destination in Stackdriver.
        /// </summary>
        [Input("enableLogging")]
        public Input<bool>? EnableLogging { get; set; }

        [Input("matches")]
        private InputList<Inputs.NetworkFirewallPolicyWithRulesPredefinedRuleMatchArgs>? _matches;

        /// <summary>
        /// (Output)
        /// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.NetworkFirewallPolicyWithRulesPredefinedRuleMatchArgs> Matches
        {
            get => _matches ?? (_matches = new InputList<Inputs.NetworkFirewallPolicyWithRulesPredefinedRuleMatchArgs>());
            set => _matches = value;
        }

        /// <summary>
        /// (Output)
        /// An integer indicating the priority of a rule in the list. The priority must be a value
        /// between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the
        /// highest priority and 2147483647 is the lowest priority.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// (Output)
        /// An optional name for the rule. This field is not a unique identifier
        /// and can be updated.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// (Output)
        /// A fully-qualified URL of a SecurityProfile resource instance.
        /// Example:
        /// https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
        /// Must be specified if action is 'apply_security_profile_group'.
        /// </summary>
        [Input("securityProfileGroup")]
        public Input<string>? SecurityProfileGroup { get; set; }

        [Input("targetSecureTags")]
        private InputList<Inputs.NetworkFirewallPolicyWithRulesPredefinedRuleTargetSecureTagArgs>? _targetSecureTags;

        /// <summary>
        /// (Output)
        /// A list of secure tags that controls which instances the firewall rule
        /// applies to. If &lt;code&gt;targetSecureTag&lt;/code&gt; are specified, then the
        /// firewall rule applies only to instances in the VPC network that have one
        /// of those EFFECTIVE secure tags, if all the target_secure_tag are in
        /// INEFFECTIVE state, then this rule will be ignored.
        /// &lt;code&gt;targetSecureTag&lt;/code&gt; may not be set at the same time as
        /// &lt;code&gt;targetServiceAccounts&lt;/code&gt;.
        /// If neither &lt;code&gt;targetServiceAccounts&lt;/code&gt; nor
        /// &lt;code&gt;targetSecureTag&lt;/code&gt; are specified, the firewall rule applies
        /// to all instances on the specified network.
        /// Maximum number of target label tags allowed is 256.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.NetworkFirewallPolicyWithRulesPredefinedRuleTargetSecureTagArgs> TargetSecureTags
        {
            get => _targetSecureTags ?? (_targetSecureTags = new InputList<Inputs.NetworkFirewallPolicyWithRulesPredefinedRuleTargetSecureTagArgs>());
            set => _targetSecureTags = value;
        }

        [Input("targetServiceAccounts")]
        private InputList<string>? _targetServiceAccounts;

        /// <summary>
        /// (Output)
        /// A list of service accounts indicating the sets of
        /// instances that are applied with this rule.
        /// </summary>
        public InputList<string> TargetServiceAccounts
        {
            get => _targetServiceAccounts ?? (_targetServiceAccounts = new InputList<string>());
            set => _targetServiceAccounts = value;
        }

        /// <summary>
        /// (Output)
        /// Boolean flag indicating if the traffic should be TLS decrypted.
        /// It can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.
        /// </summary>
        [Input("tlsInspect")]
        public Input<bool>? TlsInspect { get; set; }

        public NetworkFirewallPolicyWithRulesPredefinedRuleArgs()
        {
        }
        public static new NetworkFirewallPolicyWithRulesPredefinedRuleArgs Empty => new NetworkFirewallPolicyWithRulesPredefinedRuleArgs();
    }
}
