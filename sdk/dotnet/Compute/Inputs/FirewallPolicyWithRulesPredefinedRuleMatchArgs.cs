// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Inputs
{

    public sealed class FirewallPolicyWithRulesPredefinedRuleMatchArgs : global::Pulumi.ResourceArgs
    {
        [Input("destAddressGroups")]
        private InputList<string>? _destAddressGroups;

        /// <summary>
        /// Address groups which should be matched against the traffic destination.
        /// Maximum number of destination address groups is 10.
        /// </summary>
        public InputList<string> DestAddressGroups
        {
            get => _destAddressGroups ?? (_destAddressGroups = new InputList<string>());
            set => _destAddressGroups = value;
        }

        [Input("destFqdns")]
        private InputList<string>? _destFqdns;

        /// <summary>
        /// Fully Qualified Domain Name (FQDN) which should be matched against
        /// traffic destination. Maximum number of destination fqdn allowed is 100.
        /// </summary>
        public InputList<string> DestFqdns
        {
            get => _destFqdns ?? (_destFqdns = new InputList<string>());
            set => _destFqdns = value;
        }

        [Input("destIpRanges")]
        private InputList<string>? _destIpRanges;

        /// <summary>
        /// Destination IP address range in CIDR format. Required for
        /// EGRESS rules.
        /// </summary>
        public InputList<string> DestIpRanges
        {
            get => _destIpRanges ?? (_destIpRanges = new InputList<string>());
            set => _destIpRanges = value;
        }

        [Input("destRegionCodes")]
        private InputList<string>? _destRegionCodes;

        /// <summary>
        /// Region codes whose IP addresses will be used to match for destination
        /// of traffic. Should be specified as 2 letter country code defined as per
        /// ISO 3166 alpha-2 country codes. ex."US"
        /// Maximum number of destination region codes allowed is 5000.
        /// </summary>
        public InputList<string> DestRegionCodes
        {
            get => _destRegionCodes ?? (_destRegionCodes = new InputList<string>());
            set => _destRegionCodes = value;
        }

        [Input("destThreatIntelligences")]
        private InputList<string>? _destThreatIntelligences;

        /// <summary>
        /// Names of Network Threat Intelligence lists.
        /// The IPs in these lists will be matched against traffic destination.
        /// </summary>
        public InputList<string> DestThreatIntelligences
        {
            get => _destThreatIntelligences ?? (_destThreatIntelligences = new InputList<string>());
            set => _destThreatIntelligences = value;
        }

        [Input("layer4Configs")]
        private InputList<Inputs.FirewallPolicyWithRulesPredefinedRuleMatchLayer4ConfigArgs>? _layer4Configs;

        /// <summary>
        /// Pairs of IP protocols and ports that the rule should match.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.FirewallPolicyWithRulesPredefinedRuleMatchLayer4ConfigArgs> Layer4Configs
        {
            get => _layer4Configs ?? (_layer4Configs = new InputList<Inputs.FirewallPolicyWithRulesPredefinedRuleMatchLayer4ConfigArgs>());
            set => _layer4Configs = value;
        }

        [Input("srcAddressGroups")]
        private InputList<string>? _srcAddressGroups;

        /// <summary>
        /// Address groups which should be matched against the traffic source.
        /// Maximum number of source address groups is 10.
        /// </summary>
        public InputList<string> SrcAddressGroups
        {
            get => _srcAddressGroups ?? (_srcAddressGroups = new InputList<string>());
            set => _srcAddressGroups = value;
        }

        [Input("srcFqdns")]
        private InputList<string>? _srcFqdns;

        /// <summary>
        /// Fully Qualified Domain Name (FQDN) which should be matched against
        /// traffic source. Maximum number of source fqdn allowed is 100.
        /// </summary>
        public InputList<string> SrcFqdns
        {
            get => _srcFqdns ?? (_srcFqdns = new InputList<string>());
            set => _srcFqdns = value;
        }

        [Input("srcIpRanges")]
        private InputList<string>? _srcIpRanges;

        /// <summary>
        /// Source IP address range in CIDR format. Required for
        /// INGRESS rules.
        /// </summary>
        public InputList<string> SrcIpRanges
        {
            get => _srcIpRanges ?? (_srcIpRanges = new InputList<string>());
            set => _srcIpRanges = value;
        }

        [Input("srcRegionCodes")]
        private InputList<string>? _srcRegionCodes;

        /// <summary>
        /// Region codes whose IP addresses will be used to match for source
        /// of traffic. Should be specified as 2 letter country code defined as per
        /// ISO 3166 alpha-2 country codes. ex."US"
        /// Maximum number of source region codes allowed is 5000.
        /// </summary>
        public InputList<string> SrcRegionCodes
        {
            get => _srcRegionCodes ?? (_srcRegionCodes = new InputList<string>());
            set => _srcRegionCodes = value;
        }

        [Input("srcSecureTags")]
        private InputList<Inputs.FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs>? _srcSecureTags;

        /// <summary>
        /// List of secure tag values, which should be matched at the source
        /// of the traffic.
        /// For INGRESS rule, if all the &lt;code&gt;srcSecureTag&lt;/code&gt; are INEFFECTIVE,
        /// and there is no &lt;code&gt;srcIpRange&lt;/code&gt;, this rule will be ignored.
        /// Maximum number of source tag values allowed is 256.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs> SrcSecureTags
        {
            get => _srcSecureTags ?? (_srcSecureTags = new InputList<Inputs.FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs>());
            set => _srcSecureTags = value;
        }

        [Input("srcThreatIntelligences")]
        private InputList<string>? _srcThreatIntelligences;

        /// <summary>
        /// Names of Network Threat Intelligence lists.
        /// The IPs in these lists will be matched against traffic source.
        /// </summary>
        public InputList<string> SrcThreatIntelligences
        {
            get => _srcThreatIntelligences ?? (_srcThreatIntelligences = new InputList<string>());
            set => _srcThreatIntelligences = value;
        }

        public FirewallPolicyWithRulesPredefinedRuleMatchArgs()
        {
        }
        public static new FirewallPolicyWithRulesPredefinedRuleMatchArgs Empty => new FirewallPolicyWithRulesPredefinedRuleMatchArgs();
    }
}
