// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Inputs
{

    public sealed class InstanceFromMachineImageNetworkInterfaceGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessConfigs")]
        private InputList<Inputs.InstanceFromMachineImageNetworkInterfaceAccessConfigGetArgs>? _accessConfigs;

        /// <summary>
        /// Access configurations, i.e. IPs via which this instance can be accessed via the Internet.
        /// </summary>
        public InputList<Inputs.InstanceFromMachineImageNetworkInterfaceAccessConfigGetArgs> AccessConfigs
        {
            get => _accessConfigs ?? (_accessConfigs = new InputList<Inputs.InstanceFromMachineImageNetworkInterfaceAccessConfigGetArgs>());
            set => _accessConfigs = value;
        }

        [Input("aliasIpRanges")]
        private InputList<Inputs.InstanceFromMachineImageNetworkInterfaceAliasIpRangeGetArgs>? _aliasIpRanges;

        /// <summary>
        /// An array of alias IP ranges for this network interface.
        /// </summary>
        public InputList<Inputs.InstanceFromMachineImageNetworkInterfaceAliasIpRangeGetArgs> AliasIpRanges
        {
            get => _aliasIpRanges ?? (_aliasIpRanges = new InputList<Inputs.InstanceFromMachineImageNetworkInterfaceAliasIpRangeGetArgs>());
            set => _aliasIpRanges = value;
        }

        /// <summary>
        /// The prefix length of the primary internal IPv6 range.
        /// </summary>
        [Input("internalIpv6PrefixLength")]
        public Input<int>? InternalIpv6PrefixLength { get; set; }

        [Input("ipv6AccessConfigs")]
        private InputList<Inputs.InstanceFromMachineImageNetworkInterfaceIpv6AccessConfigGetArgs>? _ipv6AccessConfigs;

        /// <summary>
        /// An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
        /// </summary>
        public InputList<Inputs.InstanceFromMachineImageNetworkInterfaceIpv6AccessConfigGetArgs> Ipv6AccessConfigs
        {
            get => _ipv6AccessConfigs ?? (_ipv6AccessConfigs = new InputList<Inputs.InstanceFromMachineImageNetworkInterfaceIpv6AccessConfigGetArgs>());
            set => _ipv6AccessConfigs = value;
        }

        /// <summary>
        /// One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.
        /// </summary>
        [Input("ipv6AccessType")]
        public Input<string>? Ipv6AccessType { get; set; }

        /// <summary>
        /// An IPv6 internal network address for this network interface. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance's subnetwork.
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// A unique name for the resource, required by GCE.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name or SelfLink of the network attached to this interface.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The URL of the network attachment that this interface should connect to in the following format: projects/{projectNumber}/regions/{region_name}/networkAttachments/{network_attachment_name}.
        /// </summary>
        [Input("networkAttachment")]
        public Input<string>? NetworkAttachment { get; set; }

        /// <summary>
        /// The private IP address assigned to the instance.
        /// </summary>
        [Input("networkIp")]
        public Input<string>? NetworkIp { get; set; }

        /// <summary>
        /// The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET, IDPF, MRDMA, and IRDMA
        /// </summary>
        [Input("nicType")]
        public Input<string>? NicType { get; set; }

        /// <summary>
        /// The networking queue count that's specified by users for the network interface. Both Rx and Tx queues will be set to this number. It will be empty if not specified.
        /// </summary>
        [Input("queueCount")]
        public Input<int>? QueueCount { get; set; }

        /// <summary>
        /// A full or partial URL to a security policy to add to this instance. If this field is set to an empty string it will remove the associated security policy.
        /// </summary>
        [Input("securityPolicy")]
        public Input<string>? SecurityPolicy { get; set; }

        /// <summary>
        /// The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.
        /// </summary>
        [Input("stackType")]
        public Input<string>? StackType { get; set; }

        /// <summary>
        /// The name or SelfLink of the subnetwork attached to this interface.
        /// </summary>
        [Input("subnetwork")]
        public Input<string>? Subnetwork { get; set; }

        /// <summary>
        /// The project in which the subnetwork belongs.
        /// </summary>
        [Input("subnetworkProject")]
        public Input<string>? SubnetworkProject { get; set; }

        public InstanceFromMachineImageNetworkInterfaceGetArgs()
        {
        }
        public static new InstanceFromMachineImageNetworkInterfaceGetArgs Empty => new InstanceFromMachineImageNetworkInterfaceGetArgs();
    }
}
