// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Inputs
{

    public sealed class InstanceFromMachineImageBootDiskGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the disk will be auto-deleted when the instance is deleted.
        /// </summary>
        [Input("autoDelete")]
        public Input<bool>? AutoDelete { get; set; }

        /// <summary>
        /// Name with which attached disk will be accessible under /dev/disk/by-id/
        /// </summary>
        [Input("deviceName")]
        public Input<string>? DeviceName { get; set; }

        [Input("diskEncryptionKeyRaw")]
        private Input<string>? _diskEncryptionKeyRaw;

        /// <summary>
        /// A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link, DiskEncryptionKeyRaw and DiskEncryptionKeyRsa may be set.
        /// </summary>
        public Input<string>? DiskEncryptionKeyRaw
        {
            get => _diskEncryptionKeyRaw;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _diskEncryptionKeyRaw = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("diskEncryptionKeyRsa")]
        private Input<string>? _diskEncryptionKeyRsa;

        /// <summary>
        /// Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. Only one of kms_key_self_link, DiskEncryptionKeyRaw and DiskEncryptionKeyRsa may be set.
        /// </summary>
        public Input<string>? DiskEncryptionKeyRsa
        {
            get => _diskEncryptionKeyRsa;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _diskEncryptionKeyRsa = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
        /// </summary>
        [Input("diskEncryptionKeySha256")]
        public Input<string>? DiskEncryptionKeySha256 { get; set; }

        /// <summary>
        /// The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used
        /// </summary>
        [Input("diskEncryptionServiceAccount")]
        public Input<string>? DiskEncryptionServiceAccount { get; set; }

        /// <summary>
        /// Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error. Setting this parameter cause VM recreation.
        /// </summary>
        [Input("forceAttach")]
        public Input<bool>? ForceAttach { get; set; }

        [Input("guestOsFeatures")]
        private InputList<string>? _guestOsFeatures;

        /// <summary>
        /// A list of features to enable on the guest operating system. Applicable only for bootable images.
        /// </summary>
        public InputList<string> GuestOsFeatures
        {
            get => _guestOsFeatures ?? (_guestOsFeatures = new InputList<string>());
            set => _guestOsFeatures = value;
        }

        /// <summary>
        /// Parameters with which a disk was created alongside the instance.
        /// </summary>
        [Input("initializeParams")]
        public Input<Inputs.InstanceFromMachineImageBootDiskInitializeParamsGetArgs>? InitializeParams { get; set; }

        /// <summary>
        /// The disk interface used for attaching this disk. One of SCSI or NVME. (This field is shared with AttachedDisk and only used for specific cases, please don't specify this field without advice from Google.)
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// The SelfLink of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link, DiskEncryptionKeyRaw and DiskEncryptionKeyRsa may be set.
        /// </summary>
        [Input("kmsKeySelfLink")]
        public Input<string>? KmsKeySelfLink { get; set; }

        /// <summary>
        /// Read/write mode for the disk. One of "READ_ONLY" or "READ_WRITE".
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name or SelfLink of the disk attached to this instance.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        public InstanceFromMachineImageBootDiskGetArgs()
        {
        }
        public static new InstanceFromMachineImageBootDiskGetArgs Empty => new InstanceFromMachineImageBootDiskGetArgs();
    }
}
