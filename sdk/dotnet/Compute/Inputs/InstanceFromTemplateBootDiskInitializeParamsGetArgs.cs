// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Inputs
{

    public sealed class InstanceFromTemplateBootDiskInitializeParamsGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The architecture of the disk. One of "X86_64" or "ARM64".
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        /// <summary>
        /// A flag to enable confidential compute mode on boot disk
        /// </summary>
        [Input("enableConfidentialCompute")]
        public Input<bool>? EnableConfidentialCompute { get; set; }

        /// <summary>
        /// The image from which this disk was initialised.
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs assigned to the disk.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle.
        /// </summary>
        [Input("provisionedIops")]
        public Input<int>? ProvisionedIops { get; set; }

        /// <summary>
        /// Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle.
        /// </summary>
        [Input("provisionedThroughput")]
        public Input<int>? ProvisionedThroughput { get; set; }

        [Input("resourceManagerTags")]
        private InputMap<string>? _resourceManagerTags;

        /// <summary>
        /// A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
        /// </summary>
        public InputMap<string> ResourceManagerTags
        {
            get => _resourceManagerTags ?? (_resourceManagerTags = new InputMap<string>());
            set => _resourceManagerTags = value;
        }

        /// <summary>
        /// A list of SelfLinks of resource policies to attach to the instance's boot disk. Modifying this list will cause the instance to recreate. Currently a max of 1 resource policy is supported.
        /// </summary>
        [Input("resourcePolicies")]
        public Input<string>? ResourcePolicies { get; set; }

        /// <summary>
        /// The size of the image in gigabytes.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The snapshot from which this disk was initialised.
        /// </summary>
        [Input("snapshot")]
        public Input<string>? Snapshot { get; set; }

        /// <summary>
        /// The encryption key used to decrypt the source image.
        /// </summary>
        [Input("sourceImageEncryptionKey")]
        public Input<Inputs.InstanceFromTemplateBootDiskInitializeParamsSourceImageEncryptionKeyGetArgs>? SourceImageEncryptionKey { get; set; }

        /// <summary>
        /// The encryption key used to decrypt the source snapshot.
        /// </summary>
        [Input("sourceSnapshotEncryptionKey")]
        public Input<Inputs.InstanceFromTemplateBootDiskInitializeParamsSourceSnapshotEncryptionKeyGetArgs>? SourceSnapshotEncryptionKey { get; set; }

        /// <summary>
        /// The URL of the storage pool in which the new disk is created
        /// </summary>
        [Input("storagePool")]
        public Input<string>? StoragePool { get; set; }

        /// <summary>
        /// The Google Compute Engine disk type. Such as pd-standard, pd-ssd or pd-balanced.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public InstanceFromTemplateBootDiskInitializeParamsGetArgs()
        {
        }
        public static new InstanceFromTemplateBootDiskInitializeParamsGetArgs Empty => new InstanceFromTemplateBootDiskInitializeParamsGetArgs();
    }
}
