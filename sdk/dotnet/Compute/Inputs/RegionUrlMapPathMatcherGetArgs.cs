// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Inputs
{

    public sealed class RegionUrlMapPathMatcherGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A reference to a RegionBackendService resource. This will be used if
        /// none of the pathRules defined by this PathMatcher is matched by
        /// the URL's path portion.
        /// </summary>
        [Input("defaultService")]
        public Input<string>? DefaultService { get; set; }

        /// <summary>
        /// When none of the specified hostRules match, the request is redirected to a URL specified
        /// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        /// defaultRouteAction must not be set.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultUrlRedirect")]
        public Input<Inputs.RegionUrlMapPathMatcherDefaultUrlRedirectGetArgs>? DefaultUrlRedirect { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name to which this PathMatcher is referred by the HostRule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("pathRules")]
        private InputList<Inputs.RegionUrlMapPathMatcherPathRuleGetArgs>? _pathRules;

        /// <summary>
        /// The list of path rules. Use this list instead of routeRules when routing based
        /// on simple path matching is all that's required. The order by which path rules
        /// are specified does not matter. Matches are always done on the longest-path-first
        /// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
        /// irrespective of the order in which those paths appear in this list. Within a
        /// given pathMatcher, only one of pathRules or routeRules must be set.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionUrlMapPathMatcherPathRuleGetArgs> PathRules
        {
            get => _pathRules ?? (_pathRules = new InputList<Inputs.RegionUrlMapPathMatcherPathRuleGetArgs>());
            set => _pathRules = value;
        }

        [Input("routeRules")]
        private InputList<Inputs.RegionUrlMapPathMatcherRouteRuleGetArgs>? _routeRules;

        /// <summary>
        /// The list of ordered HTTP route rules. Use this list instead of pathRules when
        /// advanced route matching and routing actions are desired. The order of specifying
        /// routeRules matters: the first rule that matches will cause its specified routing
        /// action to take effect. Within a given pathMatcher, only one of pathRules or
        /// routeRules must be set. routeRules are not supported in UrlMaps intended for
        /// External load balancers.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionUrlMapPathMatcherRouteRuleGetArgs> RouteRules
        {
            get => _routeRules ?? (_routeRules = new InputList<Inputs.RegionUrlMapPathMatcherRouteRuleGetArgs>());
            set => _routeRules = value;
        }

        public RegionUrlMapPathMatcherGetArgs()
        {
        }
        public static new RegionUrlMapPathMatcherGetArgs Empty => new RegionUrlMapPathMatcherGetArgs();
    }
}
