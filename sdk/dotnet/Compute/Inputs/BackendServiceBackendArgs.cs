// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Inputs
{

    public sealed class BackendServiceBackendArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the balancing mode for this backend.
        /// For global HTTP(S) or TCP/SSL load balancing, the default is
        /// UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S)),
        /// CUSTOM_METRICS (for HTTP(s)) and CONNECTION (for TCP/SSL).
        /// See the [Backend Services Overview](https://cloud.google.com/load-balancing/docs/backend-service#balancing-mode)
        /// for an explanation of load balancing modes.
        /// Default value is `UTILIZATION`.
        /// Possible values are: `UTILIZATION`, `RATE`, `CONNECTION`, `CUSTOM_METRICS`.
        /// </summary>
        [Input("balancingMode")]
        public Input<string>? BalancingMode { get; set; }

        /// <summary>
        /// A multiplier applied to the group's maximum servicing capacity
        /// (based on UTILIZATION, RATE or CONNECTION).
        /// Default value is 1, which means the group will serve up to 100%
        /// of its configured capacity (depending on balancingMode). A
        /// setting of 0 means the group is completely drained, offering
        /// 0% of its available Capacity. Valid range is [0.0,1.0].
        /// </summary>
        [Input("capacityScaler")]
        public Input<double>? CapacityScaler { get; set; }

        [Input("customMetrics")]
        private InputList<Inputs.BackendServiceBackendCustomMetricArgs>? _customMetrics;

        /// <summary>
        /// The set of custom metrics that are used for &lt;code&gt;CUSTOM_METRICS&lt;/code&gt; BalancingMode.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.BackendServiceBackendCustomMetricArgs> CustomMetrics
        {
            get => _customMetrics ?? (_customMetrics = new InputList<Inputs.BackendServiceBackendCustomMetricArgs>());
            set => _customMetrics = value;
        }

        /// <summary>
        /// An optional description of this resource.
        /// Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The fully-qualified URL of an Instance Group or Network Endpoint
        /// Group resource. In case of instance group this defines the list
        /// of instances that serve traffic. Member virtual machine
        /// instances from each instance group must live in the same zone as
        /// the instance group itself. No two backends in a backend service
        /// are allowed to use same Instance Group resource.
        /// For Network Endpoint Groups this defines list of endpoints. All
        /// endpoints of Network Endpoint Group must be hosted on instances
        /// located in the same zone as the Network Endpoint Group.
        /// Backend services cannot mix Instance Group and
        /// Network Endpoint Group backends.
        /// Note that you must specify an Instance Group or Network Endpoint
        /// Group resource using the fully-qualified URL, rather than a
        /// partial URL.
        /// </summary>
        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        /// <summary>
        /// The max number of simultaneous connections for the group. Can
        /// be used with either CONNECTION or UTILIZATION balancing modes.
        /// For CONNECTION mode, either maxConnections or one
        /// of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
        /// as appropriate for group type, must be set.
        /// </summary>
        [Input("maxConnections")]
        public Input<int>? MaxConnections { get; set; }

        /// <summary>
        /// The max number of simultaneous connections that a single backend
        /// network endpoint can handle. This is used to calculate the
        /// capacity of the group. Can be used in either CONNECTION or
        /// UTILIZATION balancing modes.
        /// For CONNECTION mode, either
        /// maxConnections or maxConnectionsPerEndpoint must be set.
        /// </summary>
        [Input("maxConnectionsPerEndpoint")]
        public Input<int>? MaxConnectionsPerEndpoint { get; set; }

        /// <summary>
        /// The max number of simultaneous connections that a single
        /// backend instance can handle. This is used to calculate the
        /// capacity of the group. Can be used in either CONNECTION or
        /// UTILIZATION balancing modes.
        /// For CONNECTION mode, either maxConnections or
        /// maxConnectionsPerInstance must be set.
        /// </summary>
        [Input("maxConnectionsPerInstance")]
        public Input<int>? MaxConnectionsPerInstance { get; set; }

        /// <summary>
        /// Defines a maximum number of in-flight requests for the whole NEG
        /// or instance group. Not available if backend's balancingMode is RATE
        /// or CONNECTION.
        /// </summary>
        [Input("maxInFlightRequests")]
        public Input<int>? MaxInFlightRequests { get; set; }

        /// <summary>
        /// Defines a maximum number of in-flight requests for a single endpoint.
        /// Not available if backend's balancingMode is RATE or CONNECTION.
        /// </summary>
        [Input("maxInFlightRequestsPerEndpoint")]
        public Input<int>? MaxInFlightRequestsPerEndpoint { get; set; }

        /// <summary>
        /// Defines a maximum number of in-flight requests for a single VM.
        /// Not available if backend's balancingMode is RATE or CONNECTION.
        /// </summary>
        [Input("maxInFlightRequestsPerInstance")]
        public Input<int>? MaxInFlightRequestsPerInstance { get; set; }

        /// <summary>
        /// The max requests per second (RPS) of the group.
        /// Can be used with either RATE or UTILIZATION balancing modes,
        /// but required if RATE mode. For RATE mode, either maxRate or one
        /// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
        /// group type, must be set.
        /// </summary>
        [Input("maxRate")]
        public Input<int>? MaxRate { get; set; }

        /// <summary>
        /// The max requests per second (RPS) that a single backend network
        /// endpoint can handle. This is used to calculate the capacity of
        /// the group. Can be used in either balancing mode. For RATE mode,
        /// either maxRate or maxRatePerEndpoint must be set.
        /// </summary>
        [Input("maxRatePerEndpoint")]
        public Input<double>? MaxRatePerEndpoint { get; set; }

        /// <summary>
        /// The max requests per second (RPS) that a single backend
        /// instance can handle. This is used to calculate the capacity of
        /// the group. Can be used in either balancing mode. For RATE mode,
        /// either maxRate or maxRatePerInstance must be set.
        /// </summary>
        [Input("maxRatePerInstance")]
        public Input<double>? MaxRatePerInstance { get; set; }

        /// <summary>
        /// Used when balancingMode is UTILIZATION. This ratio defines the
        /// CPU utilization target for the group. Valid range is [0.0, 1.0].
        /// </summary>
        [Input("maxUtilization")]
        public Input<double>? MaxUtilization { get; set; }

        /// <summary>
        /// This field indicates whether this backend should be fully utilized before sending traffic to backends
        /// with default preference. This field cannot be set when loadBalancingScheme is set to 'EXTERNAL'. The possible values are:
        /// - PREFERRED: Backends with this preference level will be filled up to their capacity limits first,
        /// based on RTT.
        /// - DEFAULT: If preferred backends don't have enough capacity, backends in this layer would be used and
        /// traffic would be assigned based on the load balancing algorithm you use. This is the default
        /// Possible values are: `PREFERRED`, `DEFAULT`.
        /// </summary>
        [Input("preference")]
        public Input<string>? Preference { get; set; }

        /// <summary>
        /// This field specifies how long a connection should be kept alive for:
        /// - LONG: Most of the requests are expected to take more than multiple
        /// seconds to finish.
        /// - SHORT: Most requests are expected to finish with a sub-second latency.
        /// Possible values are: `LONG`, `SHORT`.
        /// </summary>
        [Input("trafficDuration")]
        public Input<string>? TrafficDuration { get; set; }

        public BackendServiceBackendArgs()
        {
        }
        public static new BackendServiceBackendArgs Empty => new BackendServiceBackendArgs();
    }
}
