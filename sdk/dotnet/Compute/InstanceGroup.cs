// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Creates a group of dissimilar Compute Engine virtual machine instances.
    /// For more information, see [the official documentation](https://cloud.google.com/compute/docs/instance-groups/#unmanaged_instance_groups)
    /// and [API](https://cloud.google.com/compute/docs/reference/latest/instanceGroups)
    /// 
    /// ## Example Usage
    /// ### Empty Instance Group
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Gcp.Compute.InstanceGroup("test", new Gcp.Compute.InstanceGroupArgs
    ///         {
    ///             Description = "Test instance group",
    ///             Zone = "us-central1-a",
    ///             Network = google_compute_network.Default.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Example Usage - With instances and named ports
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var webservers = new Gcp.Compute.InstanceGroup("webservers", new Gcp.Compute.InstanceGroupArgs
    ///         {
    ///             Description = "Test instance group",
    ///             Instances = 
    ///             {
    ///                 google_compute_instance.Test.Id,
    ///                 google_compute_instance.Test2.Id,
    ///             },
    ///             NamedPorts = 
    ///             {
    ///                 new Gcp.Compute.Inputs.InstanceGroupNamedPortArgs
    ///                 {
    ///                     Name = "http",
    ///                     Port = 8080,
    ///                 },
    ///                 new Gcp.Compute.Inputs.InstanceGroupNamedPortArgs
    ///                 {
    ///                     Name = "https",
    ///                     Port = 8443,
    ///                 },
    ///             },
    ///             Zone = "us-central1-a",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Example Usage - Recreating an instance group in use
    /// Recreating an instance group that's in use by another resource will give a
    /// `resourceInUseByAnotherResource` error. Use `lifecycle.create_before_destroy`
    /// as shown in this example to avoid this type of error.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var debianImage = Output.Create(Gcp.Compute.GetImage.InvokeAsync(new Gcp.Compute.GetImageArgs
    ///         {
    ///             Family = "debian-9",
    ///             Project = "debian-cloud",
    ///         }));
    ///         var stagingVm = new Gcp.Compute.Instance("stagingVm", new Gcp.Compute.InstanceArgs
    ///         {
    ///             MachineType = "e2-medium",
    ///             Zone = "us-central1-c",
    ///             BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
    ///             {
    ///                 InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
    ///                 {
    ///                     Image = debianImage.Apply(debianImage =&gt; debianImage.SelfLink),
    ///                 },
    ///             },
    ///             NetworkInterfaces = 
    ///             {
    ///                 new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
    ///                 {
    ///                     Network = "default",
    ///                 },
    ///             },
    ///         });
    ///         var stagingGroup = new Gcp.Compute.InstanceGroup("stagingGroup", new Gcp.Compute.InstanceGroupArgs
    ///         {
    ///             Zone = "us-central1-c",
    ///             Instances = 
    ///             {
    ///                 stagingVm.Id,
    ///             },
    ///             NamedPorts = 
    ///             {
    ///                 new Gcp.Compute.Inputs.InstanceGroupNamedPortArgs
    ///                 {
    ///                     Name = "http",
    ///                     Port = 8080,
    ///                 },
    ///                 new Gcp.Compute.Inputs.InstanceGroupNamedPortArgs
    ///                 {
    ///                     Name = "https",
    ///                     Port = 8443,
    ///                 },
    ///             },
    ///         });
    ///         var stagingHealth = new Gcp.Compute.HttpsHealthCheck("stagingHealth", new Gcp.Compute.HttpsHealthCheckArgs
    ///         {
    ///             RequestPath = "/health_check",
    ///         });
    ///         var stagingService = new Gcp.Compute.BackendService("stagingService", new Gcp.Compute.BackendServiceArgs
    ///         {
    ///             PortName = "https",
    ///             Protocol = "HTTPS",
    ///             Backends = 
    ///             {
    ///                 new Gcp.Compute.Inputs.BackendServiceBackendArgs
    ///                 {
    ///                     Group = stagingGroup.Id,
    ///                 },
    ///             },
    ///             HealthChecks = 
    ///             {
    ///                 stagingHealth.Id,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Instance group can be imported using the `zone` and `name` with an optional `project`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/instanceGroup:InstanceGroup webservers us-central1-a/terraform-webservers
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/instanceGroup:InstanceGroup webservers big-project/us-central1-a/terraform-webservers
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/instanceGroup:InstanceGroup webservers projects/big-project/zones/us-central1-a/instanceGroups/terraform-webservers
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/instanceGroup:InstanceGroup")]
    public partial class InstanceGroup : Pulumi.CustomResource
    {
        /// <summary>
        /// An optional textual description of the instance
        /// group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of instances in the group. They should be given
        /// as either self_link or id. When adding instances they must all be in the same
        /// network and zone as the instance group.
        /// </summary>
        [Output("instances")]
        public Output<ImmutableArray<string>> Instances { get; private set; } = null!;

        /// <summary>
        /// The name which the port will be mapped to.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The named port configuration. See the section below
        /// for details on configuration.
        /// </summary>
        [Output("namedPorts")]
        public Output<ImmutableArray<Outputs.InstanceGroupNamedPort>> NamedPorts { get; private set; } = null!;

        /// <summary>
        /// The URL of the network the instance group is in. If
        /// this is different from the network where the instances are in, the creation
        /// fails. Defaults to the network where the instances are in (if neither
        /// `network` nor `instances` is specified, this field will be blank).
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// The number of instances in the group.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// The zone that this instance group should be created in.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a InstanceGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceGroup(string name, InstanceGroupArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:compute/instanceGroup:InstanceGroup", name, args ?? new InstanceGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceGroup(string name, Input<string> id, InstanceGroupState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/instanceGroup:InstanceGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceGroup Get(string name, Input<string> id, InstanceGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new InstanceGroup(name, id, state, options);
        }
    }

    public sealed class InstanceGroupArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional textual description of the instance
        /// group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("instances")]
        private InputList<string>? _instances;

        /// <summary>
        /// List of instances in the group. They should be given
        /// as either self_link or id. When adding instances they must all be in the same
        /// network and zone as the instance group.
        /// </summary>
        public InputList<string> Instances
        {
            get => _instances ?? (_instances = new InputList<string>());
            set => _instances = value;
        }

        /// <summary>
        /// The name which the port will be mapped to.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namedPorts")]
        private InputList<Inputs.InstanceGroupNamedPortArgs>? _namedPorts;

        /// <summary>
        /// The named port configuration. See the section below
        /// for details on configuration.
        /// </summary>
        public InputList<Inputs.InstanceGroupNamedPortArgs> NamedPorts
        {
            get => _namedPorts ?? (_namedPorts = new InputList<Inputs.InstanceGroupNamedPortArgs>());
            set => _namedPorts = value;
        }

        /// <summary>
        /// The URL of the network the instance group is in. If
        /// this is different from the network where the instances are in, the creation
        /// fails. Defaults to the network where the instances are in (if neither
        /// `network` nor `instances` is specified, this field will be blank).
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The zone that this instance group should be created in.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstanceGroupArgs()
        {
        }
    }

    public sealed class InstanceGroupState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional textual description of the instance
        /// group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("instances")]
        private InputList<string>? _instances;

        /// <summary>
        /// List of instances in the group. They should be given
        /// as either self_link or id. When adding instances they must all be in the same
        /// network and zone as the instance group.
        /// </summary>
        public InputList<string> Instances
        {
            get => _instances ?? (_instances = new InputList<string>());
            set => _instances = value;
        }

        /// <summary>
        /// The name which the port will be mapped to.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namedPorts")]
        private InputList<Inputs.InstanceGroupNamedPortGetArgs>? _namedPorts;

        /// <summary>
        /// The named port configuration. See the section below
        /// for details on configuration.
        /// </summary>
        public InputList<Inputs.InstanceGroupNamedPortGetArgs> NamedPorts
        {
            get => _namedPorts ?? (_namedPorts = new InputList<Inputs.InstanceGroupNamedPortGetArgs>());
            set => _namedPorts = value;
        }

        /// <summary>
        /// The URL of the network the instance group is in. If
        /// this is different from the network where the instances are in, the creation
        /// fails. Defaults to the network where the instances are in (if neither
        /// `network` nor `instances` is specified, this field will be blank).
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// The number of instances in the group.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The zone that this instance group should be created in.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstanceGroupState()
        {
        }
    }
}
