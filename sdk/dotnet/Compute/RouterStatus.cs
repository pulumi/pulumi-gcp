// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    [Obsolete(@"gcp.compute.RouterStatus has been deprecated in favor of gcp.compute.getRouterStatus")]
    public static class RouterStatus
    {
        /// <summary>
        /// Get a Cloud Router's status within GCE from its name and region. This data source exposes the
        /// routes learned by a Cloud Router via BGP peers.
        /// 
        /// For more information see [the official documentation](https://cloud.google.com/network-connectivity/docs/router/how-to/viewing-router-details)
        /// and
        /// [API](https://cloud.google.com/compute/docs/reference/rest/v1/routers/getRouterStatus).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_router = Gcp.Compute.GetRouterStatus.Invoke(new()
        ///     {
        ///         Name = "myrouter",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<RouterStatusResult> InvokeAsync(RouterStatusArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<RouterStatusResult>("gcp:compute/routerStatus:RouterStatus", args ?? new RouterStatusArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Cloud Router's status within GCE from its name and region. This data source exposes the
        /// routes learned by a Cloud Router via BGP peers.
        /// 
        /// For more information see [the official documentation](https://cloud.google.com/network-connectivity/docs/router/how-to/viewing-router-details)
        /// and
        /// [API](https://cloud.google.com/compute/docs/reference/rest/v1/routers/getRouterStatus).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_router = Gcp.Compute.GetRouterStatus.Invoke(new()
        ///     {
        ///         Name = "myrouter",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<RouterStatusResult> Invoke(RouterStatusInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<RouterStatusResult>("gcp:compute/routerStatus:RouterStatus", args ?? new RouterStatusInvokeArgs(), options.WithDefaults());
    }


    public sealed class RouterStatusArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the router.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource
        /// belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The region this router has been created in. If
        /// unspecified, this defaults to the region configured in the provider.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public RouterStatusArgs()
        {
        }
        public static new RouterStatusArgs Empty => new RouterStatusArgs();
    }

    public sealed class RouterStatusInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the router.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource
        /// belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region this router has been created in. If
        /// unspecified, this defaults to the region configured in the provider.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public RouterStatusInvokeArgs()
        {
        }
        public static new RouterStatusInvokeArgs Empty => new RouterStatusInvokeArgs();
    }


    [OutputType]
    public sealed class RouterStatusResult
    {
        public readonly ImmutableArray<Outputs.RouterStatusBestRouteResult> BestRoutes;
        public readonly ImmutableArray<Outputs.RouterStatusBestRoutesForRouterResult> BestRoutesForRouters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// The network name or resource link to the parent
        /// network of this subnetwork.
        /// </summary>
        public readonly string Network;
        public readonly string? Project;
        public readonly string Region;

        [OutputConstructor]
        private RouterStatusResult(
            ImmutableArray<Outputs.RouterStatusBestRouteResult> bestRoutes,

            ImmutableArray<Outputs.RouterStatusBestRoutesForRouterResult> bestRoutesForRouters,

            string id,

            string name,

            string network,

            string? project,

            string region)
        {
            BestRoutes = bestRoutes;
            BestRoutesForRouters = bestRoutesForRouters;
            Id = id;
            Name = name;
            Network = network;
            Project = project;
            Region = region;
        }
    }
}
