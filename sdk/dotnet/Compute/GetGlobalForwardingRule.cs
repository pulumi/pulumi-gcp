// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetGlobalForwardingRule
    {
        /// <summary>
        /// Get a global forwarding rule within GCE from its name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_forwarding_rule = Gcp.Compute.GetGlobalForwardingRule.Invoke(new()
        ///     {
        ///         Name = "forwarding-rule-global",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGlobalForwardingRuleResult> InvokeAsync(GetGlobalForwardingRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGlobalForwardingRuleResult>("gcp:compute/getGlobalForwardingRule:getGlobalForwardingRule", args ?? new GetGlobalForwardingRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Get a global forwarding rule within GCE from its name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_forwarding_rule = Gcp.Compute.GetGlobalForwardingRule.Invoke(new()
        ///     {
        ///         Name = "forwarding-rule-global",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGlobalForwardingRuleResult> Invoke(GetGlobalForwardingRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGlobalForwardingRuleResult>("gcp:compute/getGlobalForwardingRule:getGlobalForwardingRule", args ?? new GetGlobalForwardingRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGlobalForwardingRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the global forwarding rule.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetGlobalForwardingRuleArgs()
        {
        }
        public static new GetGlobalForwardingRuleArgs Empty => new GetGlobalForwardingRuleArgs();
    }

    public sealed class GetGlobalForwardingRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the global forwarding rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetGlobalForwardingRuleInvokeArgs()
        {
        }
        public static new GetGlobalForwardingRuleInvokeArgs Empty => new GetGlobalForwardingRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetGlobalForwardingRuleResult
    {
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IpAddress;
        public readonly string IpProtocol;
        public readonly string IpVersion;
        public readonly string LabelFingerprint;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string LoadBalancingScheme;
        public readonly ImmutableArray<Outputs.GetGlobalForwardingRuleMetadataFilterResult> MetadataFilters;
        public readonly string Name;
        public readonly string Network;
        public readonly string PortRange;
        public readonly string? Project;
        public readonly string PscConnectionId;
        public readonly string PscConnectionStatus;
        public readonly string SelfLink;
        public readonly string Target;

        [OutputConstructor]
        private GetGlobalForwardingRuleResult(
            string description,

            string id,

            string ipAddress,

            string ipProtocol,

            string ipVersion,

            string labelFingerprint,

            ImmutableDictionary<string, string> labels,

            string loadBalancingScheme,

            ImmutableArray<Outputs.GetGlobalForwardingRuleMetadataFilterResult> metadataFilters,

            string name,

            string network,

            string portRange,

            string? project,

            string pscConnectionId,

            string pscConnectionStatus,

            string selfLink,

            string target)
        {
            Description = description;
            Id = id;
            IpAddress = ipAddress;
            IpProtocol = ipProtocol;
            IpVersion = ipVersion;
            LabelFingerprint = labelFingerprint;
            Labels = labels;
            LoadBalancingScheme = loadBalancingScheme;
            MetadataFilters = metadataFilters;
            Name = name;
            Network = network;
            PortRange = portRange;
            Project = project;
            PscConnectionId = pscConnectionId;
            PscConnectionStatus = pscConnectionStatus;
            SelfLink = selfLink;
            Target = target;
        }
    }
}
