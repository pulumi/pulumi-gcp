// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Represents a regional Commitment resource.
    /// 
    /// Creating a commitment resource means that you are purchasing a committed
    /// use contract with an explicit start and end time. You can create commitments
    /// based on vCPUs and memory usage and receive discounted rates.
    /// 
    /// To get more information about RegionCommitment, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionCommitments)
    /// * How-to Guides
    ///     * [Committed use discounts for Compute Engine](https://cloud.google.com/compute/docs/instances/committed-use-discounts-overview)
    /// 
    /// ## Example Usage
    /// ### Compute Region Commitment Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foobar = new Gcp.Compute.RegionCommitment("foobar", new()
    ///     {
    ///         Plan = "THIRTY_SIX_MONTH",
    ///         Resources = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionCommitmentResourceArgs
    ///             {
    ///                 Amount = "4",
    ///                 Type = "VCPU",
    ///             },
    ///             new Gcp.Compute.Inputs.RegionCommitmentResourceArgs
    ///             {
    ///                 Amount = "9",
    ///                 Type = "MEMORY",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Compute Region Commitment Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foobar = new Gcp.Compute.RegionCommitment("foobar", new()
    ///     {
    ///         AutoRenew = true,
    ///         Category = "MACHINE",
    ///         Description = "some description",
    ///         Plan = "THIRTY_SIX_MONTH",
    ///         Resources = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionCommitmentResourceArgs
    ///             {
    ///                 Amount = "4",
    ///                 Type = "VCPU",
    ///             },
    ///             new Gcp.Compute.Inputs.RegionCommitmentResourceArgs
    ///             {
    ///                 Amount = "9",
    ///                 Type = "MEMORY",
    ///             },
    ///         },
    ///         Type = "MEMORY_OPTIMIZED",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RegionCommitment can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/regionCommitment:RegionCommitment default projects/{{project}}/regions/{{region}}/commitments/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/regionCommitment:RegionCommitment default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/regionCommitment:RegionCommitment default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/regionCommitment:RegionCommitment default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/regionCommitment:RegionCommitment")]
    public partial class RegionCommitment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether to enable automatic renewal for the commitment.
        /// The default value is false if not specified.
        /// If the field is set to true, the commitment will be automatically renewed for either
        /// one or three years according to the terms of the existing commitment.
        /// </summary>
        [Output("autoRenew")]
        public Output<bool> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// The category of the commitment. Category MACHINE specifies commitments composed of
        /// machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
        /// specifies commitments composed of software licenses, listed in licenseResources.
        /// Note that only MACHINE commitments should have a Type specified.
        /// Possible values are: `LICENSE`, `MACHINE`.
        /// </summary>
        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for the resource.
        /// </summary>
        [Output("commitmentId")]
        public Output<int> CommitmentId { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Commitment end time in RFC3339 text format.
        /// </summary>
        [Output("endTimestamp")]
        public Output<string> EndTimestamp { get; private set; } = null!;

        /// <summary>
        /// The license specification required as part of a license commitment.
        /// Structure is documented below.
        /// </summary>
        [Output("licenseResource")]
        public Output<Outputs.RegionCommitmentLicenseResource?> LicenseResource { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. The name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the last
        /// character, which cannot be a dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The plan for this commitment, which determines duration and discount rate.
        /// The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
        /// Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
        /// </summary>
        [Output("plan")]
        public Output<string> Plan { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// URL of the region where this commitment may be used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// A list of commitment amounts for particular resources.
        /// Note that VCPU and MEMORY resource commitments must occur together.
        /// Structure is documented below.
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<Outputs.RegionCommitmentResource>> Resources { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Commitment start time in RFC3339 text format.
        /// </summary>
        [Output("startTimestamp")]
        public Output<string> StartTimestamp { get; private set; } = null!;

        /// <summary>
        /// Status of the commitment with regards to eventual expiration
        /// (each commitment has an end date defined).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A human-readable explanation of the status.
        /// </summary>
        [Output("statusMessage")]
        public Output<string> StatusMessage { get; private set; } = null!;

        /// <summary>
        /// The type of commitment, which affects the discount rate and the eligible resources.
        /// Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized
        /// machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to
        /// accelerator optimized machines.
        /// Possible values are: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a RegionCommitment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegionCommitment(string name, RegionCommitmentArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/regionCommitment:RegionCommitment", name, args ?? new RegionCommitmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegionCommitment(string name, Input<string> id, RegionCommitmentState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/regionCommitment:RegionCommitment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegionCommitment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegionCommitment Get(string name, Input<string> id, RegionCommitmentState? state = null, CustomResourceOptions? options = null)
        {
            return new RegionCommitment(name, id, state, options);
        }
    }

    public sealed class RegionCommitmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to enable automatic renewal for the commitment.
        /// The default value is false if not specified.
        /// If the field is set to true, the commitment will be automatically renewed for either
        /// one or three years according to the terms of the existing commitment.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The category of the commitment. Category MACHINE specifies commitments composed of
        /// machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
        /// specifies commitments composed of software licenses, listed in licenseResources.
        /// Note that only MACHINE commitments should have a Type specified.
        /// Possible values are: `LICENSE`, `MACHINE`.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The license specification required as part of a license commitment.
        /// Structure is documented below.
        /// </summary>
        [Input("licenseResource")]
        public Input<Inputs.RegionCommitmentLicenseResourceArgs>? LicenseResource { get; set; }

        /// <summary>
        /// Name of the resource. The name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the last
        /// character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The plan for this commitment, which determines duration and discount rate.
        /// The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
        /// Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
        /// </summary>
        [Input("plan", required: true)]
        public Input<string> Plan { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// URL of the region where this commitment may be used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("resources")]
        private InputList<Inputs.RegionCommitmentResourceArgs>? _resources;

        /// <summary>
        /// A list of commitment amounts for particular resources.
        /// Note that VCPU and MEMORY resource commitments must occur together.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionCommitmentResourceArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.RegionCommitmentResourceArgs>());
            set => _resources = value;
        }

        /// <summary>
        /// The type of commitment, which affects the discount rate and the eligible resources.
        /// Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized
        /// machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to
        /// accelerator optimized machines.
        /// Possible values are: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public RegionCommitmentArgs()
        {
        }
        public static new RegionCommitmentArgs Empty => new RegionCommitmentArgs();
    }

    public sealed class RegionCommitmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to enable automatic renewal for the commitment.
        /// The default value is false if not specified.
        /// If the field is set to true, the commitment will be automatically renewed for either
        /// one or three years according to the terms of the existing commitment.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The category of the commitment. Category MACHINE specifies commitments composed of
        /// machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
        /// specifies commitments composed of software licenses, listed in licenseResources.
        /// Note that only MACHINE commitments should have a Type specified.
        /// Possible values are: `LICENSE`, `MACHINE`.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// Unique identifier for the resource.
        /// </summary>
        [Input("commitmentId")]
        public Input<int>? CommitmentId { get; set; }

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Commitment end time in RFC3339 text format.
        /// </summary>
        [Input("endTimestamp")]
        public Input<string>? EndTimestamp { get; set; }

        /// <summary>
        /// The license specification required as part of a license commitment.
        /// Structure is documented below.
        /// </summary>
        [Input("licenseResource")]
        public Input<Inputs.RegionCommitmentLicenseResourceGetArgs>? LicenseResource { get; set; }

        /// <summary>
        /// Name of the resource. The name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the last
        /// character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The plan for this commitment, which determines duration and discount rate.
        /// The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
        /// Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// URL of the region where this commitment may be used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("resources")]
        private InputList<Inputs.RegionCommitmentResourceGetArgs>? _resources;

        /// <summary>
        /// A list of commitment amounts for particular resources.
        /// Note that VCPU and MEMORY resource commitments must occur together.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionCommitmentResourceGetArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.RegionCommitmentResourceGetArgs>());
            set => _resources = value;
        }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// Commitment start time in RFC3339 text format.
        /// </summary>
        [Input("startTimestamp")]
        public Input<string>? StartTimestamp { get; set; }

        /// <summary>
        /// Status of the commitment with regards to eventual expiration
        /// (each commitment has an end date defined).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// A human-readable explanation of the status.
        /// </summary>
        [Input("statusMessage")]
        public Input<string>? StatusMessage { get; set; }

        /// <summary>
        /// The type of commitment, which affects the discount rate and the eligible resources.
        /// Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized
        /// machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to
        /// accelerator optimized machines.
        /// Possible values are: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public RegionCommitmentState()
        {
        }
        public static new RegionCommitmentState Empty => new RegionCommitmentState();
    }
}
