// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetImages
    {
        /// <summary>
        /// Get information about Google Compute Images. Check that your service account has the `compute.imageUser` role if you want to share [custom images](https://cloud.google.com/compute/docs/images/sharing-images-across-projects) from another project. If you want to use [public images][pubimg], do not forget to specify the dedicated project. For more information see
        /// [the official documentation](https://cloud.google.com/compute/docs/images) and its [API](https://cloud.google.com/compute/docs/reference/latest/images).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var debian = Gcp.Compute.GetImages.Invoke(new()
        ///     {
        ///         Filter = "name eq my-image.*",
        ///     });
        /// 
        ///     var @default = new Gcp.Compute.Instance("default", new()
        ///     {
        ///         Name = "test",
        ///         MachineType = "f1-micro",
        ///         Zone = "us-central1-a",
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 Image = debian.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.SelfLink),
        ///             },
        ///         },
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
        ///             {
        ///                 Network = defaultGoogleComputeNetwork.Name,
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetImagesResult> InvokeAsync(GetImagesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImagesResult>("gcp:compute/getImages:getImages", args ?? new GetImagesArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about Google Compute Images. Check that your service account has the `compute.imageUser` role if you want to share [custom images](https://cloud.google.com/compute/docs/images/sharing-images-across-projects) from another project. If you want to use [public images][pubimg], do not forget to specify the dedicated project. For more information see
        /// [the official documentation](https://cloud.google.com/compute/docs/images) and its [API](https://cloud.google.com/compute/docs/reference/latest/images).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var debian = Gcp.Compute.GetImages.Invoke(new()
        ///     {
        ///         Filter = "name eq my-image.*",
        ///     });
        /// 
        ///     var @default = new Gcp.Compute.Instance("default", new()
        ///     {
        ///         Name = "test",
        ///         MachineType = "f1-micro",
        ///         Zone = "us-central1-a",
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 Image = debian.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.SelfLink),
        ///             },
        ///         },
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
        ///             {
        ///                 Network = defaultGoogleComputeNetwork.Name,
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetImagesResult> Invoke(GetImagesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagesResult>("gcp:compute/getImages:getImages", args ?? new GetImagesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about Google Compute Images. Check that your service account has the `compute.imageUser` role if you want to share [custom images](https://cloud.google.com/compute/docs/images/sharing-images-across-projects) from another project. If you want to use [public images][pubimg], do not forget to specify the dedicated project. For more information see
        /// [the official documentation](https://cloud.google.com/compute/docs/images) and its [API](https://cloud.google.com/compute/docs/reference/latest/images).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var debian = Gcp.Compute.GetImages.Invoke(new()
        ///     {
        ///         Filter = "name eq my-image.*",
        ///     });
        /// 
        ///     var @default = new Gcp.Compute.Instance("default", new()
        ///     {
        ///         Name = "test",
        ///         MachineType = "f1-micro",
        ///         Zone = "us-central1-a",
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 Image = debian.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.SelfLink),
        ///             },
        ///         },
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
        ///             {
        ///                 Network = defaultGoogleComputeNetwork.Name,
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetImagesResult> Invoke(GetImagesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagesResult>("gcp:compute/getImages:getImages", args ?? new GetImagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImagesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter for the images to be returned by the data source. Syntax can be found [here](https://cloud.google.com/compute/docs/reference/rest/v1/images/list) in the filter section.
        /// 
        /// - - -
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// The project in which the resource belongs. If it is not
        /// provided, the provider project is used. If you are using a
        /// [public base image][pubimg], be sure to specify the correct Image Project.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetImagesArgs()
        {
        }
        public static new GetImagesArgs Empty => new GetImagesArgs();
    }

    public sealed class GetImagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter for the images to be returned by the data source. Syntax can be found [here](https://cloud.google.com/compute/docs/reference/rest/v1/images/list) in the filter section.
        /// 
        /// - - -
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The project in which the resource belongs. If it is not
        /// provided, the provider project is used. If you are using a
        /// [public base image][pubimg], be sure to specify the correct Image Project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetImagesInvokeArgs()
        {
        }
        public static new GetImagesInvokeArgs Empty => new GetImagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetImagesResult
    {
        public readonly string? Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetImagesImageResult> Images;
        public readonly string? Project;

        [OutputConstructor]
        private GetImagesResult(
            string? filter,

            string id,

            ImmutableArray<Outputs.GetImagesImageResult> images,

            string? project)
        {
            Filter = filter;
            Id = id;
            Images = images;
            Project = project;
        }
    }
}
