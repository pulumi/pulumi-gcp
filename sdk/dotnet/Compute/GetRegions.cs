// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetRegions
    {
        /// <summary>
        /// Provides access to available Google Compute regions for a given project.
        /// See more about [regions and zones](https://cloud.google.com/compute/docs/regions-zones/) in the upstream docs.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var dict = Output.Create(Initialize());
        ///     }
        /// 
        ///     private async Task&lt;IDictionary&lt;string, Output&lt;string&gt;&gt;&gt; Initialize()
        ///     {
        ///         var available = await Gcp.Compute.GetRegions.InvokeAsync();
        ///         var cluster = new List&lt;Gcp.Compute.Subnetwork&gt;();
        ///         for (var rangeIndex = 0; rangeIndex &lt; available.Names.Length; rangeIndex++)
        ///         {
        ///             var range = new { Value = rangeIndex };
        ///             cluster.Add(new Gcp.Compute.Subnetwork($"cluster-{range.Value}", new Gcp.Compute.SubnetworkArgs
        ///             {
        ///                 IpCidrRange = $"10.36.{range.Value}.0/24",
        ///                 Network = "my-network",
        ///                 Region = available.Names[range.Value],
        ///             }));
        ///         }
        /// 
        ///         return new Dictionary&lt;string, Output&lt;string&gt;&gt;
        ///         {
        ///         };
        ///     }
        /// 
        /// }
        /// ```
        /// </summary>
        public static Task<GetRegionsResult> InvokeAsync(GetRegionsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRegionsResult>("gcp:compute/getRegions:getRegions", args ?? new GetRegionsArgs(), options.WithVersion());
    }


    public sealed class GetRegionsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Project from which to list available regions. Defaults to project declared in the provider.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// Allows to filter list of regions based on their current status. Status can be either `UP` or `DOWN`.
        /// Defaults to no filtering (all available regions - both `UP` and `DOWN`).
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetRegionsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRegionsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of regions available in the given project
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string Project;
        public readonly string? Status;

        [OutputConstructor]
        private GetRegionsResult(
            string id,

            ImmutableArray<string> names,

            string project,

            string? status)
        {
            Id = id;
            Names = names;
            Project = project;
            Status = status;
        }
    }
}
