// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetForwardingRule
    {
        /// <summary>
        /// Get a forwarding rule within GCE from its name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var my_forwarding_rule = Output.Create(Gcp.Compute.GetForwardingRule.InvokeAsync(new Gcp.Compute.GetForwardingRuleArgs
        ///         {
        ///             Name = "forwarding-rule-us-east1",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetForwardingRuleResult> InvokeAsync(GetForwardingRuleArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetForwardingRuleResult>("gcp:compute/getForwardingRule:getForwardingRule", args ?? new GetForwardingRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Get a forwarding rule within GCE from its name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var my_forwarding_rule = Output.Create(Gcp.Compute.GetForwardingRule.InvokeAsync(new Gcp.Compute.GetForwardingRuleArgs
        ///         {
        ///             Name = "forwarding-rule-us-east1",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetForwardingRuleResult> Invoke(GetForwardingRuleInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetForwardingRuleResult>("gcp:compute/getForwardingRule:getForwardingRule", args ?? new GetForwardingRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetForwardingRuleArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the forwarding rule.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The region in which the resource belongs. If it
        /// is not provided, the project region is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetForwardingRuleArgs()
        {
        }
    }

    public sealed class GetForwardingRuleInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the forwarding rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region in which the resource belongs. If it
        /// is not provided, the project region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetForwardingRuleInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetForwardingRuleResult
    {
        public readonly bool AllPorts;
        public readonly bool AllowGlobalAccess;
        public readonly string BackendService;
        public readonly string CreationTimestamp;
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IpAddress;
        public readonly string IpProtocol;
        public readonly bool IsMirroringCollector;
        public readonly string LabelFingerprint;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string LoadBalancingScheme;
        public readonly string Name;
        public readonly string Network;
        public readonly string NetworkTier;
        public readonly string PortRange;
        public readonly ImmutableArray<string> Ports;
        public readonly string? Project;
        public readonly string PscConnectionId;
        public readonly string PscConnectionStatus;
        public readonly string? Region;
        public readonly string SelfLink;
        public readonly ImmutableArray<Outputs.GetForwardingRuleServiceDirectoryRegistrationResult> ServiceDirectoryRegistrations;
        public readonly string ServiceLabel;
        public readonly string ServiceName;
        public readonly string Subnetwork;
        public readonly string Target;

        [OutputConstructor]
        private GetForwardingRuleResult(
            bool allPorts,

            bool allowGlobalAccess,

            string backendService,

            string creationTimestamp,

            string description,

            string id,

            string ipAddress,

            string ipProtocol,

            bool isMirroringCollector,

            string labelFingerprint,

            ImmutableDictionary<string, string> labels,

            string loadBalancingScheme,

            string name,

            string network,

            string networkTier,

            string portRange,

            ImmutableArray<string> ports,

            string? project,

            string pscConnectionId,

            string pscConnectionStatus,

            string? region,

            string selfLink,

            ImmutableArray<Outputs.GetForwardingRuleServiceDirectoryRegistrationResult> serviceDirectoryRegistrations,

            string serviceLabel,

            string serviceName,

            string subnetwork,

            string target)
        {
            AllPorts = allPorts;
            AllowGlobalAccess = allowGlobalAccess;
            BackendService = backendService;
            CreationTimestamp = creationTimestamp;
            Description = description;
            Id = id;
            IpAddress = ipAddress;
            IpProtocol = ipProtocol;
            IsMirroringCollector = isMirroringCollector;
            LabelFingerprint = labelFingerprint;
            Labels = labels;
            LoadBalancingScheme = loadBalancingScheme;
            Name = name;
            Network = network;
            NetworkTier = networkTier;
            PortRange = portRange;
            Ports = ports;
            Project = project;
            PscConnectionId = pscConnectionId;
            PscConnectionStatus = pscConnectionStatus;
            Region = region;
            SelfLink = selfLink;
            ServiceDirectoryRegistrations = serviceDirectoryRegistrations;
            ServiceLabel = serviceLabel;
            ServiceName = serviceName;
            Subnetwork = subnetwork;
            Target = target;
        }
    }
}
