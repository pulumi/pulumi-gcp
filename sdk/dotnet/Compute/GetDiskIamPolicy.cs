// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetDiskIamPolicy
    {
        /// <summary>
        /// Retrieves the current IAM policy data for disk
        /// 
        /// 
        /// 
        /// ## example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Compute.GetDiskIamPolicy.Invoke(new()
        ///     {
        ///         Project = google_compute_disk.Default.Project,
        ///         Zone = google_compute_disk.Default.Zone,
        ///         Name = google_compute_disk.Default.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDiskIamPolicyResult> InvokeAsync(GetDiskIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDiskIamPolicyResult>("gcp:compute/getDiskIamPolicy:getDiskIamPolicy", args ?? new GetDiskIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for disk
        /// 
        /// 
        /// 
        /// ## example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Compute.GetDiskIamPolicy.Invoke(new()
        ///     {
        ///         Project = google_compute_disk.Default.Project,
        ///         Zone = google_compute_disk.Default.Zone,
        ///         Name = google_compute_disk.Default.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDiskIamPolicyResult> Invoke(GetDiskIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiskIamPolicyResult>("gcp:compute/getDiskIamPolicy:getDiskIamPolicy", args ?? new GetDiskIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiskIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// A reference to the zone where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
        /// zone is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetDiskIamPolicyArgs()
        {
        }
        public static new GetDiskIamPolicyArgs Empty => new GetDiskIamPolicyArgs();
    }

    public sealed class GetDiskIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A reference to the zone where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
        /// zone is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetDiskIamPolicyInvokeArgs()
        {
        }
        public static new GetDiskIamPolicyInvokeArgs Empty => new GetDiskIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetDiskIamPolicyResult
    {
        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// (Required only by `gcp.compute.DiskIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        public readonly string PolicyData;
        public readonly string Project;
        public readonly string Zone;

        [OutputConstructor]
        private GetDiskIamPolicyResult(
            string etag,

            string id,

            string name,

            string policyData,

            string project,

            string zone)
        {
            Etag = etag;
            Id = id;
            Name = name;
            PolicyData = policyData;
            Project = project;
            Zone = zone;
        }
    }
}
