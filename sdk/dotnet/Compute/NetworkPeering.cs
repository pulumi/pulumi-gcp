// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Manages a network peering within GCE. For more information see
    /// [the official documentation](https://cloud.google.com/compute/docs/vpc/vpc-peering)
    /// and
    /// [API](https://cloud.google.com/compute/docs/reference/latest/networks).
    /// 
    /// &gt; **Note:** Both network must create a peering with each other for the peering to be functional.
    /// 
    /// &gt; **Note:** Subnets IP ranges across peered VPC networks cannot overlap.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_network_peering.html.markdown.
    /// </summary>
    public partial class NetworkPeering : Pulumi.CustomResource
    {
        /// <summary>
        /// If set to `true`, the routes between the two networks will
        /// be created and managed automatically. Defaults to `true`.
        /// </summary>
        [Output("autoCreateRoutes")]
        public Output<bool?> AutoCreateRoutes { get; private set; } = null!;

        [Output("exportCustomRoutes")]
        public Output<bool?> ExportCustomRoutes { get; private set; } = null!;

        [Output("importCustomRoutes")]
        public Output<bool?> ImportCustomRoutes { get; private set; } = null!;

        /// <summary>
        /// Name of the peering.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Resource link of the network to add a peering to.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// Resource link of the peer network.
        /// </summary>
        [Output("peerNetwork")]
        public Output<string> PeerNetwork { get; private set; } = null!;

        /// <summary>
        /// State for the peering.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Details about the current state of the peering.
        /// </summary>
        [Output("stateDetails")]
        public Output<string> StateDetails { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkPeering resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkPeering(string name, NetworkPeeringArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/networkPeering:NetworkPeering", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private NetworkPeering(string name, Input<string> id, NetworkPeeringState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/networkPeering:NetworkPeering", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkPeering resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkPeering Get(string name, Input<string> id, NetworkPeeringState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkPeering(name, id, state, options);
        }
    }

    public sealed class NetworkPeeringArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to `true`, the routes between the two networks will
        /// be created and managed automatically. Defaults to `true`.
        /// </summary>
        [Input("autoCreateRoutes")]
        public Input<bool>? AutoCreateRoutes { get; set; }

        [Input("exportCustomRoutes")]
        public Input<bool>? ExportCustomRoutes { get; set; }

        [Input("importCustomRoutes")]
        public Input<bool>? ImportCustomRoutes { get; set; }

        /// <summary>
        /// Name of the peering.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Resource link of the network to add a peering to.
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// Resource link of the peer network.
        /// </summary>
        [Input("peerNetwork", required: true)]
        public Input<string> PeerNetwork { get; set; } = null!;

        public NetworkPeeringArgs()
        {
        }
    }

    public sealed class NetworkPeeringState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to `true`, the routes between the two networks will
        /// be created and managed automatically. Defaults to `true`.
        /// </summary>
        [Input("autoCreateRoutes")]
        public Input<bool>? AutoCreateRoutes { get; set; }

        [Input("exportCustomRoutes")]
        public Input<bool>? ExportCustomRoutes { get; set; }

        [Input("importCustomRoutes")]
        public Input<bool>? ImportCustomRoutes { get; set; }

        /// <summary>
        /// Name of the peering.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Resource link of the network to add a peering to.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// Resource link of the peer network.
        /// </summary>
        [Input("peerNetwork")]
        public Input<string>? PeerNetwork { get; set; }

        /// <summary>
        /// State for the peering.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Details about the current state of the peering.
        /// </summary>
        [Input("stateDetails")]
        public Input<string>? StateDetails { get; set; }

        public NetworkPeeringState()
        {
        }
    }
}
