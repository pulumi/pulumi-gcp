// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetNetblockIPRanges
    {
        /// <summary>
        /// Use this data source to get the IP addresses from different special IP ranges on Google Cloud Platform.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Cloud Ranges
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var netblock = Gcp.Compute.GetNetblockIPRanges.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["cidrBlocks"] = netblock.Apply(getNetblockIPRangesResult =&gt; getNetblockIPRangesResult.CidrBlocks),
        ///         ["cidrBlocksIpv4"] = netblock.Apply(getNetblockIPRangesResult =&gt; getNetblockIPRangesResult.CidrBlocksIpv4s),
        ///         ["cidrBlocksIpv6"] = netblock.Apply(getNetblockIPRangesResult =&gt; getNetblockIPRangesResult.CidrBlocksIpv6s),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Allow Health Checks
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var legacy_hcs = Gcp.Compute.GetNetblockIPRanges.Invoke(new()
        ///     {
        ///         RangeType = "legacy-health-checkers",
        ///     });
        /// 
        ///     var @default = new Gcp.Compute.Network("default");
        /// 
        ///     var allow_hcs = new Gcp.Compute.Firewall("allow-hcs", new()
        ///     {
        ///         Network = @default.Name,
        ///         Allows = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.FirewallAllowArgs
        ///             {
        ///                 Protocol = "tcp",
        ///                 Ports = new[]
        ///                 {
        ///                     "80",
        ///                 },
        ///             },
        ///         },
        ///         SourceRanges = legacy_hcs.Apply(legacy_hcs =&gt; legacy_hcs.Apply(getNetblockIPRangesResult =&gt; getNetblockIPRangesResult.CidrBlocksIpv4s)),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNetblockIPRangesResult> InvokeAsync(GetNetblockIPRangesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetblockIPRangesResult>("gcp:compute/getNetblockIPRanges:getNetblockIPRanges", args ?? new GetNetblockIPRangesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the IP addresses from different special IP ranges on Google Cloud Platform.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Cloud Ranges
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var netblock = Gcp.Compute.GetNetblockIPRanges.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["cidrBlocks"] = netblock.Apply(getNetblockIPRangesResult =&gt; getNetblockIPRangesResult.CidrBlocks),
        ///         ["cidrBlocksIpv4"] = netblock.Apply(getNetblockIPRangesResult =&gt; getNetblockIPRangesResult.CidrBlocksIpv4s),
        ///         ["cidrBlocksIpv6"] = netblock.Apply(getNetblockIPRangesResult =&gt; getNetblockIPRangesResult.CidrBlocksIpv6s),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Allow Health Checks
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var legacy_hcs = Gcp.Compute.GetNetblockIPRanges.Invoke(new()
        ///     {
        ///         RangeType = "legacy-health-checkers",
        ///     });
        /// 
        ///     var @default = new Gcp.Compute.Network("default");
        /// 
        ///     var allow_hcs = new Gcp.Compute.Firewall("allow-hcs", new()
        ///     {
        ///         Network = @default.Name,
        ///         Allows = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.FirewallAllowArgs
        ///             {
        ///                 Protocol = "tcp",
        ///                 Ports = new[]
        ///                 {
        ///                     "80",
        ///                 },
        ///             },
        ///         },
        ///         SourceRanges = legacy_hcs.Apply(legacy_hcs =&gt; legacy_hcs.Apply(getNetblockIPRangesResult =&gt; getNetblockIPRangesResult.CidrBlocksIpv4s)),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNetblockIPRangesResult> Invoke(GetNetblockIPRangesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetblockIPRangesResult>("gcp:compute/getNetblockIPRanges:getNetblockIPRanges", args ?? new GetNetblockIPRangesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetblockIPRangesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of range for which to provide results.
        /// </summary>
        [Input("rangeType")]
        public string? RangeType { get; set; }

        public GetNetblockIPRangesArgs()
        {
        }
        public static new GetNetblockIPRangesArgs Empty => new GetNetblockIPRangesArgs();
    }

    public sealed class GetNetblockIPRangesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of range for which to provide results.
        /// </summary>
        [Input("rangeType")]
        public Input<string>? RangeType { get; set; }

        public GetNetblockIPRangesInvokeArgs()
        {
        }
        public static new GetNetblockIPRangesInvokeArgs Empty => new GetNetblockIPRangesInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetblockIPRangesResult
    {
        /// <summary>
        /// Retrieve list of all CIDR blocks.
        /// </summary>
        public readonly ImmutableArray<string> CidrBlocks;
        /// <summary>
        /// Retrieve list of the IPv4 CIDR blocks
        /// </summary>
        public readonly ImmutableArray<string> CidrBlocksIpv4s;
        /// <summary>
        /// Retrieve list of the IPv6 CIDR blocks, if available.
        /// </summary>
        public readonly ImmutableArray<string> CidrBlocksIpv6s;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? RangeType;

        [OutputConstructor]
        private GetNetblockIPRangesResult(
            ImmutableArray<string> cidrBlocks,

            ImmutableArray<string> cidrBlocksIpv4s,

            ImmutableArray<string> cidrBlocksIpv6s,

            string id,

            string? rangeType)
        {
            CidrBlocks = cidrBlocks;
            CidrBlocksIpv4s = cidrBlocksIpv4s;
            CidrBlocksIpv6s = cidrBlocksIpv6s;
            Id = id;
            RangeType = rangeType;
        }
    }
}
