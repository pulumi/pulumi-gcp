// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Represents a TargetHttpsProxy resource, which is used by one or more
    /// global forwarding rule to route incoming HTTPS requests to a URL map.
    /// 
    /// To get more information about TargetHttpsProxy, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/v1/targetHttpsProxies)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/compute/docs/load-balancing/http/target-proxies)
    /// 
    /// ## Example Usage
    /// 
    /// ### Target Https Proxy Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultSSLCertificate = new Gcp.Compute.SSLCertificate("default", new()
    ///     {
    ///         Name = "my-certificate",
    ///         PrivateKey = Std.File.Invoke(new()
    ///         {
    ///             Input = "path/to/private.key",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         Certificate = Std.File.Invoke(new()
    ///         {
    ///             Input = "path/to/certificate.crt",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///     });
    /// 
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "http-health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var defaultURLMap = new Gcp.Compute.URLMap("default", new()
    ///     {
    ///         Name = "url-map",
    ///         Description = "a description",
    ///         DefaultService = defaultBackendService.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = defaultBackendService.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/*",
    ///                         },
    ///                         Service = defaultBackendService.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.TargetHttpsProxy("default", new()
    ///     {
    ///         Name = "test-proxy",
    ///         UrlMap = defaultURLMap.Id,
    ///         SslCertificates = new[]
    ///         {
    ///             defaultSSLCertificate.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Target Https Proxy Http Keep Alive Timeout
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultSSLCertificate = new Gcp.Compute.SSLCertificate("default", new()
    ///     {
    ///         Name = "my-certificate",
    ///         PrivateKey = Std.File.Invoke(new()
    ///         {
    ///             Input = "path/to/private.key",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         Certificate = Std.File.Invoke(new()
    ///         {
    ///             Input = "path/to/certificate.crt",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///     });
    /// 
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "http-health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var defaultURLMap = new Gcp.Compute.URLMap("default", new()
    ///     {
    ///         Name = "url-map",
    ///         Description = "a description",
    ///         DefaultService = defaultBackendService.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = defaultBackendService.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/*",
    ///                         },
    ///                         Service = defaultBackendService.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.TargetHttpsProxy("default", new()
    ///     {
    ///         Name = "test-http-keep-alive-timeout-proxy",
    ///         HttpKeepAliveTimeoutSec = 610,
    ///         UrlMap = defaultURLMap.Id,
    ///         SslCertificates = new[]
    ///         {
    ///             defaultSSLCertificate.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Target Https Proxy Mtls
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var defaultTrustConfig = new Gcp.CertificateManager.TrustConfig("default", new()
    ///     {
    ///         Name = "my-trust-config",
    ///         Description = "sample description for the trust config",
    ///         Location = "global",
    ///         TrustStores = new[]
    ///         {
    ///             new Gcp.CertificateManager.Inputs.TrustConfigTrustStoreArgs
    ///             {
    ///                 TrustAnchors = new[]
    ///                 {
    ///                     new Gcp.CertificateManager.Inputs.TrustConfigTrustStoreTrustAnchorArgs
    ///                     {
    ///                         PemCertificate = Std.File.Invoke(new()
    ///                         {
    ///                             Input = "test-fixtures/ca_cert.pem",
    ///                         }).Apply(invoke =&gt; invoke.Result),
    ///                     },
    ///                 },
    ///                 IntermediateCas = new[]
    ///                 {
    ///                     new Gcp.CertificateManager.Inputs.TrustConfigTrustStoreIntermediateCaArgs
    ///                     {
    ///                         PemCertificate = Std.File.Invoke(new()
    ///                         {
    ///                             Input = "test-fixtures/ca_cert.pem",
    ///                         }).Apply(invoke =&gt; invoke.Result),
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    ///     var defaultServerTlsPolicy = new Gcp.NetworkSecurity.ServerTlsPolicy("default", new()
    ///     {
    ///         Name = "my-tls-policy",
    ///         Description = "my description",
    ///         Location = "global",
    ///         AllowOpen = false,
    ///         MtlsPolicy = new Gcp.NetworkSecurity.Inputs.ServerTlsPolicyMtlsPolicyArgs
    ///         {
    ///             ClientValidationMode = "ALLOW_INVALID_OR_MISSING_CLIENT_CERT",
    ///             ClientValidationTrustConfig = Output.Tuple(project, defaultTrustConfig.Name).Apply(values =&gt;
    ///             {
    ///                 var project = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Number)}/locations/global/trustConfigs/{name}";
    ///             }),
    ///         },
    ///     });
    /// 
    ///     var defaultSSLCertificate = new Gcp.Compute.SSLCertificate("default", new()
    ///     {
    ///         Name = "my-certificate",
    ///         PrivateKey = Std.File.Invoke(new()
    ///         {
    ///             Input = "path/to/private.key",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         Certificate = Std.File.Invoke(new()
    ///         {
    ///             Input = "path/to/certificate.crt",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///     });
    /// 
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "http-health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var defaultURLMap = new Gcp.Compute.URLMap("default", new()
    ///     {
    ///         Name = "url-map",
    ///         Description = "a description",
    ///         DefaultService = defaultBackendService.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = defaultBackendService.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/*",
    ///                         },
    ///                         Service = defaultBackendService.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.TargetHttpsProxy("default", new()
    ///     {
    ///         Name = "test-mtls-proxy",
    ///         UrlMap = defaultURLMap.Id,
    ///         SslCertificates = new[]
    ///         {
    ///             defaultSSLCertificate.Id,
    ///         },
    ///         ServerTlsPolicy = defaultServerTlsPolicy.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Target Https Proxy Certificate Manager Certificate
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultCertificate = new Gcp.CertificateManager.Certificate("default", new()
    ///     {
    ///         Name = "my-certificate",
    ///         Scope = "ALL_REGIONS",
    ///         SelfManaged = new Gcp.CertificateManager.Inputs.CertificateSelfManagedArgs
    ///         {
    ///             PemCertificate = Std.File.Invoke(new()
    ///             {
    ///                 Input = "test-fixtures/cert.pem",
    ///             }).Apply(invoke =&gt; invoke.Result),
    ///             PemPrivateKey = Std.File.Invoke(new()
    ///             {
    ///                 Input = "test-fixtures/private-key.pem",
    ///             }).Apply(invoke =&gt; invoke.Result),
    ///         },
    ///     });
    /// 
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///     });
    /// 
    ///     var defaultURLMap = new Gcp.Compute.URLMap("default", new()
    ///     {
    ///         Name = "url-map",
    ///         Description = "a description",
    ///         DefaultService = defaultBackendService.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = defaultBackendService.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/*",
    ///                         },
    ///                         Service = defaultBackendService.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.TargetHttpsProxy("default", new()
    ///     {
    ///         Name = "target-http-proxy",
    ///         UrlMap = defaultURLMap.Id,
    ///         CertificateManagerCertificates = new[]
    ///         {
    ///             defaultCertificate.Id.Apply(id =&gt; $"//certificatemanager.googleapis.com/{id}"),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Target Https Proxy Fingerprint
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultSSLCertificate = new Gcp.Compute.SSLCertificate("default", new()
    ///     {
    ///         Name = "my-certificate",
    ///         PrivateKey = Std.File.Invoke(new()
    ///         {
    ///             Input = "path/to/private.key",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         Certificate = Std.File.Invoke(new()
    ///         {
    ///             Input = "path/to/certificate.crt",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///     });
    /// 
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "http-health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var defaultURLMap = new Gcp.Compute.URLMap("default", new()
    ///     {
    ///         Name = "url-map",
    ///         Description = "a description",
    ///         DefaultService = defaultBackendService.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = defaultBackendService.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/*",
    ///                         },
    ///                         Service = defaultBackendService.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.TargetHttpsProxy("default", new()
    ///     {
    ///         Name = "test-fingerprint-proxy",
    ///         UrlMap = defaultURLMap.Id,
    ///         SslCertificates = new[]
    ///         {
    ///             defaultSSLCertificate.Id,
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["targetHttpsProxyFingerprint"] = @default.Fingerprint,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// TargetHttpsProxy can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/global/targetHttpsProxies/{{name}}`
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, TargetHttpsProxy can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/targetHttpsProxy:TargetHttpsProxy default projects/{{project}}/global/targetHttpsProxies/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/targetHttpsProxy:TargetHttpsProxy default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/targetHttpsProxy:TargetHttpsProxy default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/targetHttpsProxy:TargetHttpsProxy")]
    public partial class TargetHttpsProxy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
        /// Certificate manager certificates only apply when the load balancing scheme is set to INTERNAL_MANAGED.
        /// For EXTERNAL and EXTERNAL_MANAGED, use certificate_map instead.
        /// sslCertificates and certificateManagerCertificates fields can not be defined together.
        /// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the self_link `projects/{project}/locations/{location}/certificates/{resourceName}`
        /// </summary>
        [Output("certificateManagerCertificates")]
        public Output<ImmutableArray<string>> CertificateManagerCertificates { get; private set; } = null!;

        /// <summary>
        /// A reference to the CertificateMap resource uri that identifies a certificate map
        /// associated with the given target proxy. This field is only supported for EXTERNAL and EXTERNAL_MANAGED load balancing schemes.
        /// For INTERNAL_MANAGED, use certificate_manager_certificates instead.
        /// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificateMaps/{resourceName}`.
        /// </summary>
        [Output("certificateMap")]
        public Output<string?> CertificateMap { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
        /// This field will be ignored when inserting a TargetHttpsProxy. An up-to-date fingerprint must be provided in order to
        /// patch the TargetHttpsProxy; otherwise, the request will fail with error 412 conditionNotMet.
        /// To see the latest fingerprint, make a get() request to retrieve the TargetHttpsProxy.
        /// A base64-encoded string.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// Specifies how long to keep a connection open, after completing a response,
        /// while there is no matching traffic (in seconds). If an HTTP keepalive is
        /// not specified, a default value will be used. For Global
        /// external HTTP(S) load balancer, the default value is 610 seconds, the
        /// minimum allowed value is 5 seconds and the maximum allowed value is 1200
        /// seconds. For cross-region internal HTTP(S) load balancer, the default
        /// value is 600 seconds, the minimum allowed value is 5 seconds, and the
        /// maximum allowed value is 600 seconds. For Global external HTTP(S) load
        /// balancer (classic), this option is not available publicly.
        /// </summary>
        [Output("httpKeepAliveTimeoutSec")]
        public Output<int?> HttpKeepAliveTimeoutSec { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is
        /// created. The name must be 1-63 characters long, and comply with
        /// RFC1035. Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the last
        /// character, which cannot be a dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// This field only applies when the forwarding rule that references
        /// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
        /// </summary>
        [Output("proxyBind")]
        public Output<bool> ProxyBind { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the resource.
        /// </summary>
        [Output("proxyId")]
        public Output<int> ProxyId { get; private set; } = null!;

        /// <summary>
        /// Specifies the QUIC override policy for this resource. This determines
        /// whether the load balancer will attempt to negotiate QUIC with clients
        /// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
        /// specified, Google manages whether QUIC is used.
        /// Default value is `NONE`.
        /// Possible values are: `NONE`, `ENABLE`, `DISABLE`.
        /// </summary>
        [Output("quicOverride")]
        public Output<string?> QuicOverride { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// A URL referring to a networksecurity.ServerTlsPolicy
        /// resource that describes how the proxy should authenticate inbound
        /// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
        /// attached to globalForwardingRules with the loadBalancingScheme
        /// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
        /// For details which ServerTlsPolicy resources are accepted with
        /// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
        /// loadBalancingScheme consult ServerTlsPolicy documentation.
        /// If left blank, communications are not encrypted.
        /// If you remove this field from your configuration at the same time as
        /// deleting or recreating a referenced ServerTlsPolicy resource, you will
        /// receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
        /// within the ServerTlsPolicy resource to avoid this.
        /// </summary>
        [Output("serverTlsPolicy")]
        public Output<string?> ServerTlsPolicy { get; private set; } = null!;

        /// <summary>
        /// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
        /// Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
        /// sslCertificates and certificateManagerCertificates can not be defined together.
        /// </summary>
        [Output("sslCertificates")]
        public Output<ImmutableArray<string>> SslCertificates { get; private set; } = null!;

        /// <summary>
        /// A reference to the SslPolicy resource that will be associated with
        /// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
        /// resource will not have any SSL policy configured.
        /// </summary>
        [Output("sslPolicy")]
        public Output<string?> SslPolicy { get; private set; } = null!;

        /// <summary>
        /// Specifies whether TLS 1.3 0-RTT Data (“Early Data”) should be accepted for this service.
        /// Early Data allows a TLS resumption handshake to include the initial application payload
        /// (a HTTP request) alongside the handshake, reducing the effective round trips to “zero”.
        /// This applies to TLS 1.3 connections over TCP (HTTP/2) as well as over UDP (QUIC/h3).
        /// Possible values are: `STRICT`, `PERMISSIVE`, `UNRESTRICTED`, `DISABLED`.
        /// </summary>
        [Output("tlsEarlyData")]
        public Output<string> TlsEarlyData { get; private set; } = null!;

        /// <summary>
        /// A reference to the UrlMap resource that defines the mapping from URL
        /// to the BackendService.
        /// </summary>
        [Output("urlMap")]
        public Output<string> UrlMap { get; private set; } = null!;


        /// <summary>
        /// Create a TargetHttpsProxy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TargetHttpsProxy(string name, TargetHttpsProxyArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/targetHttpsProxy:TargetHttpsProxy", name, args ?? new TargetHttpsProxyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TargetHttpsProxy(string name, Input<string> id, TargetHttpsProxyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/targetHttpsProxy:TargetHttpsProxy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TargetHttpsProxy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TargetHttpsProxy Get(string name, Input<string> id, TargetHttpsProxyState? state = null, CustomResourceOptions? options = null)
        {
            return new TargetHttpsProxy(name, id, state, options);
        }
    }

    public sealed class TargetHttpsProxyArgs : global::Pulumi.ResourceArgs
    {
        [Input("certificateManagerCertificates")]
        private InputList<string>? _certificateManagerCertificates;

        /// <summary>
        /// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
        /// Certificate manager certificates only apply when the load balancing scheme is set to INTERNAL_MANAGED.
        /// For EXTERNAL and EXTERNAL_MANAGED, use certificate_map instead.
        /// sslCertificates and certificateManagerCertificates fields can not be defined together.
        /// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the self_link `projects/{project}/locations/{location}/certificates/{resourceName}`
        /// </summary>
        public InputList<string> CertificateManagerCertificates
        {
            get => _certificateManagerCertificates ?? (_certificateManagerCertificates = new InputList<string>());
            set => _certificateManagerCertificates = value;
        }

        /// <summary>
        /// A reference to the CertificateMap resource uri that identifies a certificate map
        /// associated with the given target proxy. This field is only supported for EXTERNAL and EXTERNAL_MANAGED load balancing schemes.
        /// For INTERNAL_MANAGED, use certificate_manager_certificates instead.
        /// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificateMaps/{resourceName}`.
        /// </summary>
        [Input("certificateMap")]
        public Input<string>? CertificateMap { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies how long to keep a connection open, after completing a response,
        /// while there is no matching traffic (in seconds). If an HTTP keepalive is
        /// not specified, a default value will be used. For Global
        /// external HTTP(S) load balancer, the default value is 610 seconds, the
        /// minimum allowed value is 5 seconds and the maximum allowed value is 1200
        /// seconds. For cross-region internal HTTP(S) load balancer, the default
        /// value is 600 seconds, the minimum allowed value is 5 seconds, and the
        /// maximum allowed value is 600 seconds. For Global external HTTP(S) load
        /// balancer (classic), this option is not available publicly.
        /// </summary>
        [Input("httpKeepAliveTimeoutSec")]
        public Input<int>? HttpKeepAliveTimeoutSec { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is
        /// created. The name must be 1-63 characters long, and comply with
        /// RFC1035. Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the last
        /// character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// This field only applies when the forwarding rule that references
        /// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
        /// </summary>
        [Input("proxyBind")]
        public Input<bool>? ProxyBind { get; set; }

        /// <summary>
        /// Specifies the QUIC override policy for this resource. This determines
        /// whether the load balancer will attempt to negotiate QUIC with clients
        /// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
        /// specified, Google manages whether QUIC is used.
        /// Default value is `NONE`.
        /// Possible values are: `NONE`, `ENABLE`, `DISABLE`.
        /// </summary>
        [Input("quicOverride")]
        public Input<string>? QuicOverride { get; set; }

        /// <summary>
        /// A URL referring to a networksecurity.ServerTlsPolicy
        /// resource that describes how the proxy should authenticate inbound
        /// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
        /// attached to globalForwardingRules with the loadBalancingScheme
        /// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
        /// For details which ServerTlsPolicy resources are accepted with
        /// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
        /// loadBalancingScheme consult ServerTlsPolicy documentation.
        /// If left blank, communications are not encrypted.
        /// If you remove this field from your configuration at the same time as
        /// deleting or recreating a referenced ServerTlsPolicy resource, you will
        /// receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
        /// within the ServerTlsPolicy resource to avoid this.
        /// </summary>
        [Input("serverTlsPolicy")]
        public Input<string>? ServerTlsPolicy { get; set; }

        [Input("sslCertificates")]
        private InputList<string>? _sslCertificates;

        /// <summary>
        /// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
        /// Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
        /// sslCertificates and certificateManagerCertificates can not be defined together.
        /// </summary>
        public InputList<string> SslCertificates
        {
            get => _sslCertificates ?? (_sslCertificates = new InputList<string>());
            set => _sslCertificates = value;
        }

        /// <summary>
        /// A reference to the SslPolicy resource that will be associated with
        /// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
        /// resource will not have any SSL policy configured.
        /// </summary>
        [Input("sslPolicy")]
        public Input<string>? SslPolicy { get; set; }

        /// <summary>
        /// Specifies whether TLS 1.3 0-RTT Data (“Early Data”) should be accepted for this service.
        /// Early Data allows a TLS resumption handshake to include the initial application payload
        /// (a HTTP request) alongside the handshake, reducing the effective round trips to “zero”.
        /// This applies to TLS 1.3 connections over TCP (HTTP/2) as well as over UDP (QUIC/h3).
        /// Possible values are: `STRICT`, `PERMISSIVE`, `UNRESTRICTED`, `DISABLED`.
        /// </summary>
        [Input("tlsEarlyData")]
        public Input<string>? TlsEarlyData { get; set; }

        /// <summary>
        /// A reference to the UrlMap resource that defines the mapping from URL
        /// to the BackendService.
        /// </summary>
        [Input("urlMap", required: true)]
        public Input<string> UrlMap { get; set; } = null!;

        public TargetHttpsProxyArgs()
        {
        }
        public static new TargetHttpsProxyArgs Empty => new TargetHttpsProxyArgs();
    }

    public sealed class TargetHttpsProxyState : global::Pulumi.ResourceArgs
    {
        [Input("certificateManagerCertificates")]
        private InputList<string>? _certificateManagerCertificates;

        /// <summary>
        /// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
        /// Certificate manager certificates only apply when the load balancing scheme is set to INTERNAL_MANAGED.
        /// For EXTERNAL and EXTERNAL_MANAGED, use certificate_map instead.
        /// sslCertificates and certificateManagerCertificates fields can not be defined together.
        /// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the self_link `projects/{project}/locations/{location}/certificates/{resourceName}`
        /// </summary>
        public InputList<string> CertificateManagerCertificates
        {
            get => _certificateManagerCertificates ?? (_certificateManagerCertificates = new InputList<string>());
            set => _certificateManagerCertificates = value;
        }

        /// <summary>
        /// A reference to the CertificateMap resource uri that identifies a certificate map
        /// associated with the given target proxy. This field is only supported for EXTERNAL and EXTERNAL_MANAGED load balancing schemes.
        /// For INTERNAL_MANAGED, use certificate_manager_certificates instead.
        /// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificateMaps/{resourceName}`.
        /// </summary>
        [Input("certificateMap")]
        public Input<string>? CertificateMap { get; set; }

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
        /// This field will be ignored when inserting a TargetHttpsProxy. An up-to-date fingerprint must be provided in order to
        /// patch the TargetHttpsProxy; otherwise, the request will fail with error 412 conditionNotMet.
        /// To see the latest fingerprint, make a get() request to retrieve the TargetHttpsProxy.
        /// A base64-encoded string.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// Specifies how long to keep a connection open, after completing a response,
        /// while there is no matching traffic (in seconds). If an HTTP keepalive is
        /// not specified, a default value will be used. For Global
        /// external HTTP(S) load balancer, the default value is 610 seconds, the
        /// minimum allowed value is 5 seconds and the maximum allowed value is 1200
        /// seconds. For cross-region internal HTTP(S) load balancer, the default
        /// value is 600 seconds, the minimum allowed value is 5 seconds, and the
        /// maximum allowed value is 600 seconds. For Global external HTTP(S) load
        /// balancer (classic), this option is not available publicly.
        /// </summary>
        [Input("httpKeepAliveTimeoutSec")]
        public Input<int>? HttpKeepAliveTimeoutSec { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is
        /// created. The name must be 1-63 characters long, and comply with
        /// RFC1035. Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the last
        /// character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// This field only applies when the forwarding rule that references
        /// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
        /// </summary>
        [Input("proxyBind")]
        public Input<bool>? ProxyBind { get; set; }

        /// <summary>
        /// The unique identifier for the resource.
        /// </summary>
        [Input("proxyId")]
        public Input<int>? ProxyId { get; set; }

        /// <summary>
        /// Specifies the QUIC override policy for this resource. This determines
        /// whether the load balancer will attempt to negotiate QUIC with clients
        /// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
        /// specified, Google manages whether QUIC is used.
        /// Default value is `NONE`.
        /// Possible values are: `NONE`, `ENABLE`, `DISABLE`.
        /// </summary>
        [Input("quicOverride")]
        public Input<string>? QuicOverride { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// A URL referring to a networksecurity.ServerTlsPolicy
        /// resource that describes how the proxy should authenticate inbound
        /// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
        /// attached to globalForwardingRules with the loadBalancingScheme
        /// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
        /// For details which ServerTlsPolicy resources are accepted with
        /// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
        /// loadBalancingScheme consult ServerTlsPolicy documentation.
        /// If left blank, communications are not encrypted.
        /// If you remove this field from your configuration at the same time as
        /// deleting or recreating a referenced ServerTlsPolicy resource, you will
        /// receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
        /// within the ServerTlsPolicy resource to avoid this.
        /// </summary>
        [Input("serverTlsPolicy")]
        public Input<string>? ServerTlsPolicy { get; set; }

        [Input("sslCertificates")]
        private InputList<string>? _sslCertificates;

        /// <summary>
        /// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
        /// Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
        /// sslCertificates and certificateManagerCertificates can not be defined together.
        /// </summary>
        public InputList<string> SslCertificates
        {
            get => _sslCertificates ?? (_sslCertificates = new InputList<string>());
            set => _sslCertificates = value;
        }

        /// <summary>
        /// A reference to the SslPolicy resource that will be associated with
        /// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
        /// resource will not have any SSL policy configured.
        /// </summary>
        [Input("sslPolicy")]
        public Input<string>? SslPolicy { get; set; }

        /// <summary>
        /// Specifies whether TLS 1.3 0-RTT Data (“Early Data”) should be accepted for this service.
        /// Early Data allows a TLS resumption handshake to include the initial application payload
        /// (a HTTP request) alongside the handshake, reducing the effective round trips to “zero”.
        /// This applies to TLS 1.3 connections over TCP (HTTP/2) as well as over UDP (QUIC/h3).
        /// Possible values are: `STRICT`, `PERMISSIVE`, `UNRESTRICTED`, `DISABLED`.
        /// </summary>
        [Input("tlsEarlyData")]
        public Input<string>? TlsEarlyData { get; set; }

        /// <summary>
        /// A reference to the UrlMap resource that defines the mapping from URL
        /// to the BackendService.
        /// </summary>
        [Input("urlMap")]
        public Input<string>? UrlMap { get; set; }

        public TargetHttpsProxyState()
        {
        }
        public static new TargetHttpsProxyState Empty => new TargetHttpsProxyState();
    }
}
