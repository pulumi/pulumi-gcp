// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetInstanceGroupManager
    {
        /// <summary>
        /// Get a Compute Instance Group Manager within GCE.
        /// For more information, see [the official documentation](https://cloud.google.com/compute/docs/instance-groups#managed_instance_groups)
        /// and [API](https://cloud.google.com/compute/docs/reference/latest/instanceGroupManagers)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var igm1 = Gcp.Compute.GetInstanceGroupManager.Invoke(new()
        ///     {
        ///         Name = "my-igm",
        ///         Zone = "us-central1-a",
        ///     });
        /// 
        ///     var igm2 = Gcp.Compute.GetInstanceGroupManager.Invoke(new()
        ///     {
        ///         SelfLink = "https://www.googleapis.com/compute/v1/projects/myproject/zones/us-central1-a/instanceGroupManagers/my-igm",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetInstanceGroupManagerResult> InvokeAsync(GetInstanceGroupManagerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceGroupManagerResult>("gcp:compute/getInstanceGroupManager:getInstanceGroupManager", args ?? new GetInstanceGroupManagerArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Compute Instance Group Manager within GCE.
        /// For more information, see [the official documentation](https://cloud.google.com/compute/docs/instance-groups#managed_instance_groups)
        /// and [API](https://cloud.google.com/compute/docs/reference/latest/instanceGroupManagers)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var igm1 = Gcp.Compute.GetInstanceGroupManager.Invoke(new()
        ///     {
        ///         Name = "my-igm",
        ///         Zone = "us-central1-a",
        ///     });
        /// 
        ///     var igm2 = Gcp.Compute.GetInstanceGroupManager.Invoke(new()
        ///     {
        ///         SelfLink = "https://www.googleapis.com/compute/v1/projects/myproject/zones/us-central1-a/instanceGroupManagers/my-igm",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetInstanceGroupManagerResult> Invoke(GetInstanceGroupManagerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceGroupManagerResult>("gcp:compute/getInstanceGroupManager:getInstanceGroupManager", args ?? new GetInstanceGroupManagerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceGroupManagerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the instance group. Either `name` or `self_link` must be provided.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The self link of the instance group. Either `name` or `self_link` must be provided.
        /// </summary>
        [Input("selfLink")]
        public string? SelfLink { get; set; }

        /// <summary>
        /// The zone of the instance group. If referencing the instance group by name and `zone` is not provided, the provider zone is used.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetInstanceGroupManagerArgs()
        {
        }
        public static new GetInstanceGroupManagerArgs Empty => new GetInstanceGroupManagerArgs();
    }

    public sealed class GetInstanceGroupManagerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the instance group. Either `name` or `self_link` must be provided.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The self link of the instance group. Either `name` or `self_link` must be provided.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// The zone of the instance group. If referencing the instance group by name and `zone` is not provided, the provider zone is used.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetInstanceGroupManagerInvokeArgs()
        {
        }
        public static new GetInstanceGroupManagerInvokeArgs Empty => new GetInstanceGroupManagerInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceGroupManagerResult
    {
        public readonly ImmutableArray<Outputs.GetInstanceGroupManagerAllInstancesConfigResult> AllInstancesConfigs;
        public readonly ImmutableArray<Outputs.GetInstanceGroupManagerAutoHealingPolicyResult> AutoHealingPolicies;
        public readonly string BaseInstanceName;
        public readonly string Description;
        public readonly string Fingerprint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceGroup;
        public readonly string ListManagedInstancesResults;
        public readonly string? Name;
        public readonly ImmutableArray<Outputs.GetInstanceGroupManagerNamedPortResult> NamedPorts;
        public readonly string Operation;
        public readonly string? Project;
        public readonly string? SelfLink;
        public readonly ImmutableArray<Outputs.GetInstanceGroupManagerStatefulDiskResult> StatefulDisks;
        public readonly ImmutableArray<Outputs.GetInstanceGroupManagerStatefulExternalIpResult> StatefulExternalIps;
        public readonly ImmutableArray<Outputs.GetInstanceGroupManagerStatefulInternalIpResult> StatefulInternalIps;
        public readonly ImmutableArray<Outputs.GetInstanceGroupManagerStatusResult> Statuses;
        public readonly ImmutableArray<string> TargetPools;
        public readonly int TargetSize;
        public readonly ImmutableArray<Outputs.GetInstanceGroupManagerUpdatePolicyResult> UpdatePolicies;
        public readonly ImmutableArray<Outputs.GetInstanceGroupManagerVersionResult> Versions;
        public readonly bool WaitForInstances;
        public readonly string WaitForInstancesStatus;
        public readonly string? Zone;

        [OutputConstructor]
        private GetInstanceGroupManagerResult(
            ImmutableArray<Outputs.GetInstanceGroupManagerAllInstancesConfigResult> allInstancesConfigs,

            ImmutableArray<Outputs.GetInstanceGroupManagerAutoHealingPolicyResult> autoHealingPolicies,

            string baseInstanceName,

            string description,

            string fingerprint,

            string id,

            string instanceGroup,

            string listManagedInstancesResults,

            string? name,

            ImmutableArray<Outputs.GetInstanceGroupManagerNamedPortResult> namedPorts,

            string operation,

            string? project,

            string? selfLink,

            ImmutableArray<Outputs.GetInstanceGroupManagerStatefulDiskResult> statefulDisks,

            ImmutableArray<Outputs.GetInstanceGroupManagerStatefulExternalIpResult> statefulExternalIps,

            ImmutableArray<Outputs.GetInstanceGroupManagerStatefulInternalIpResult> statefulInternalIps,

            ImmutableArray<Outputs.GetInstanceGroupManagerStatusResult> statuses,

            ImmutableArray<string> targetPools,

            int targetSize,

            ImmutableArray<Outputs.GetInstanceGroupManagerUpdatePolicyResult> updatePolicies,

            ImmutableArray<Outputs.GetInstanceGroupManagerVersionResult> versions,

            bool waitForInstances,

            string waitForInstancesStatus,

            string? zone)
        {
            AllInstancesConfigs = allInstancesConfigs;
            AutoHealingPolicies = autoHealingPolicies;
            BaseInstanceName = baseInstanceName;
            Description = description;
            Fingerprint = fingerprint;
            Id = id;
            InstanceGroup = instanceGroup;
            ListManagedInstancesResults = listManagedInstancesResults;
            Name = name;
            NamedPorts = namedPorts;
            Operation = operation;
            Project = project;
            SelfLink = selfLink;
            StatefulDisks = statefulDisks;
            StatefulExternalIps = statefulExternalIps;
            StatefulInternalIps = statefulInternalIps;
            Statuses = statuses;
            TargetPools = targetPools;
            TargetSize = targetSize;
            UpdatePolicies = updatePolicies;
            Versions = versions;
            WaitForInstances = waitForInstances;
            WaitForInstancesStatus = waitForInstancesStatus;
            Zone = zone;
        }
    }
}
