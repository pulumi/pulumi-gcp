// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetAddresses
    {
        /// <summary>
        /// List IP addresses in a project. For more information see
        /// the official API [list](https://cloud.google.com/compute/docs/reference/latest/addresses/list) and 
        /// [aggregated lsit](https://cloud.google.com/compute/docs/reference/rest/v1/addresses/aggregatedList) documentation.
        /// </summary>
        public static Task<GetAddressesResult> InvokeAsync(GetAddressesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAddressesResult>("gcp:compute/getAddresses:getAddresses", args ?? new GetAddressesArgs(), options.WithDefaults());

        /// <summary>
        /// List IP addresses in a project. For more information see
        /// the official API [list](https://cloud.google.com/compute/docs/reference/latest/addresses/list) and 
        /// [aggregated lsit](https://cloud.google.com/compute/docs/reference/rest/v1/addresses/aggregatedList) documentation.
        /// </summary>
        public static Output<GetAddressesResult> Invoke(GetAddressesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAddressesResult>("gcp:compute/getAddresses:getAddresses", args ?? new GetAddressesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAddressesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter expression that
        /// filters resources listed in the response. The expression must specify
        /// the field name, an operator, and the value that you want to use for
        /// filtering. The value must be a string, a number, or a boolean. The
        /// operator must be either "=", "!=", "&gt;", "&lt;", "&lt;=", "&gt;=" or ":". For
        /// example, if you are filtering Compute Engine instances, you can
        /// exclude instances named "example-instance" by specifying "name !=
        /// example-instance". The ":" operator can be used with string fields to
        /// match substrings. For non-string fields it is equivalent to the "="
        /// operator. The ":*" comparison can be used to test whether a key has
        /// been defined. For example, to find all objects with "owner" label
        /// use: """ labels.owner:* """ You can also filter nested fields. For
        /// example, you could specify "scheduling.automaticRestart = false" to
        /// include instances only if they are not scheduled for automatic
        /// restarts. You can use filtering on nested fields to filter based on
        /// resource labels. To filter on multiple expressions, provide each
        /// separate expression within parentheses. For example: """
        /// (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake")
        /// """ By default, each expression is an "AND" expression. However, you
        /// can include "AND" and "OR" expressions explicitly. For example: """
        /// (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell")
        /// AND (scheduling.automaticRestart = true)
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// The google project in which addresses are listed.
        /// Defaults to provider's configuration if missing.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// Region that should be considered to search addresses.
        /// All regions are considered if missing.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetAddressesArgs()
        {
        }
        public static new GetAddressesArgs Empty => new GetAddressesArgs();
    }

    public sealed class GetAddressesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter expression that
        /// filters resources listed in the response. The expression must specify
        /// the field name, an operator, and the value that you want to use for
        /// filtering. The value must be a string, a number, or a boolean. The
        /// operator must be either "=", "!=", "&gt;", "&lt;", "&lt;=", "&gt;=" or ":". For
        /// example, if you are filtering Compute Engine instances, you can
        /// exclude instances named "example-instance" by specifying "name !=
        /// example-instance". The ":" operator can be used with string fields to
        /// match substrings. For non-string fields it is equivalent to the "="
        /// operator. The ":*" comparison can be used to test whether a key has
        /// been defined. For example, to find all objects with "owner" label
        /// use: """ labels.owner:* """ You can also filter nested fields. For
        /// example, you could specify "scheduling.automaticRestart = false" to
        /// include instances only if they are not scheduled for automatic
        /// restarts. You can use filtering on nested fields to filter based on
        /// resource labels. To filter on multiple expressions, provide each
        /// separate expression within parentheses. For example: """
        /// (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake")
        /// """ By default, each expression is an "AND" expression. However, you
        /// can include "AND" and "OR" expressions explicitly. For example: """
        /// (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell")
        /// AND (scheduling.automaticRestart = true)
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The google project in which addresses are listed.
        /// Defaults to provider's configuration if missing.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Region that should be considered to search addresses.
        /// All regions are considered if missing.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetAddressesInvokeArgs()
        {
        }
        public static new GetAddressesInvokeArgs Empty => new GetAddressesInvokeArgs();
    }


    [OutputType]
    public sealed class GetAddressesResult
    {
        /// <summary>
        /// A list of addresses matching the filter. Structure is defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAddressesAddressResult> Addresses;
        public readonly string? Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Project;
        /// <summary>
        /// The region in which the address resides.
        /// </summary>
        public readonly string? Region;

        [OutputConstructor]
        private GetAddressesResult(
            ImmutableArray<Outputs.GetAddressesAddressResult> addresses,

            string? filter,

            string id,

            string project,

            string? region)
        {
            Addresses = addresses;
            Filter = filter;
            Id = id;
            Project = project;
            Region = region;
        }
    }
}
