// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetDisk
    {
        /// <summary>
        /// Get information about a Google Compute Persistent disks.
        /// 
        /// [the official documentation](https://cloud.google.com/compute/docs/disks) and its [API](https://cloud.google.com/compute/docs/reference/latest/disks).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var persistent_boot_disk = Gcp.Compute.GetDisk.Invoke(new()
        ///     {
        ///         Name = "persistent-boot-disk",
        ///         Project = "example",
        ///     });
        /// 
        ///     // ...
        ///     var @default = new Gcp.Compute.Instance("default", new()
        ///     {
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             Source = persistent_boot_disk.Apply(getDiskResult =&gt; getDiskResult).Apply(persistent_boot_disk =&gt; persistent_boot_disk.Apply(getDiskResult =&gt; getDiskResult.SelfLink)),
        ///             AutoDelete = false,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDiskResult> InvokeAsync(GetDiskArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDiskResult>("gcp:compute/getDisk:getDisk", args ?? new GetDiskArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Google Compute Persistent disks.
        /// 
        /// [the official documentation](https://cloud.google.com/compute/docs/disks) and its [API](https://cloud.google.com/compute/docs/reference/latest/disks).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var persistent_boot_disk = Gcp.Compute.GetDisk.Invoke(new()
        ///     {
        ///         Name = "persistent-boot-disk",
        ///         Project = "example",
        ///     });
        /// 
        ///     // ...
        ///     var @default = new Gcp.Compute.Instance("default", new()
        ///     {
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             Source = persistent_boot_disk.Apply(getDiskResult =&gt; getDiskResult).Apply(persistent_boot_disk =&gt; persistent_boot_disk.Apply(getDiskResult =&gt; getDiskResult.SelfLink)),
        ///             AutoDelete = false,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDiskResult> Invoke(GetDiskInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiskResult>("gcp:compute/getDisk:getDisk", args ?? new GetDiskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiskArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of a specific disk.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// A reference to the zone where the disk resides.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetDiskArgs()
        {
        }
        public static new GetDiskArgs Empty => new GetDiskArgs();
    }

    public sealed class GetDiskInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of a specific disk.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A reference to the zone where the disk resides.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetDiskInvokeArgs()
        {
        }
        public static new GetDiskInvokeArgs Empty => new GetDiskInvokeArgs();
    }


    [OutputType]
    public sealed class GetDiskResult
    {
        public readonly string CreationTimestamp;
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetDiskDiskEncryptionKeyResult> DiskEncryptionKeys;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Image;
        public readonly string Interface;
        public readonly string LabelFingerprint;
        /// <summary>
        /// A map of labels applied to this disk.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string LastAttachTimestamp;
        public readonly string LastDetachTimestamp;
        public readonly bool MultiWriter;
        public readonly string Name;
        public readonly int PhysicalBlockSizeBytes;
        public readonly string? Project;
        public readonly int ProvisionedIops;
        public readonly ImmutableArray<string> ResourcePolicies;
        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        public readonly string SelfLink;
        public readonly int Size;
        public readonly string Snapshot;
        public readonly string SourceDisk;
        public readonly string SourceDiskId;
        public readonly ImmutableArray<Outputs.GetDiskSourceImageEncryptionKeyResult> SourceImageEncryptionKeys;
        public readonly string SourceImageId;
        public readonly ImmutableArray<Outputs.GetDiskSourceSnapshotEncryptionKeyResult> SourceSnapshotEncryptionKeys;
        public readonly string SourceSnapshotId;
        public readonly string Type;
        public readonly ImmutableArray<string> Users;
        public readonly string? Zone;

        [OutputConstructor]
        private GetDiskResult(
            string creationTimestamp,

            string description,

            ImmutableArray<Outputs.GetDiskDiskEncryptionKeyResult> diskEncryptionKeys,

            string id,

            string image,

            string @interface,

            string labelFingerprint,

            ImmutableDictionary<string, string> labels,

            string lastAttachTimestamp,

            string lastDetachTimestamp,

            bool multiWriter,

            string name,

            int physicalBlockSizeBytes,

            string? project,

            int provisionedIops,

            ImmutableArray<string> resourcePolicies,

            string selfLink,

            int size,

            string snapshot,

            string sourceDisk,

            string sourceDiskId,

            ImmutableArray<Outputs.GetDiskSourceImageEncryptionKeyResult> sourceImageEncryptionKeys,

            string sourceImageId,

            ImmutableArray<Outputs.GetDiskSourceSnapshotEncryptionKeyResult> sourceSnapshotEncryptionKeys,

            string sourceSnapshotId,

            string type,

            ImmutableArray<string> users,

            string? zone)
        {
            CreationTimestamp = creationTimestamp;
            Description = description;
            DiskEncryptionKeys = diskEncryptionKeys;
            Id = id;
            Image = image;
            Interface = @interface;
            LabelFingerprint = labelFingerprint;
            Labels = labels;
            LastAttachTimestamp = lastAttachTimestamp;
            LastDetachTimestamp = lastDetachTimestamp;
            MultiWriter = multiWriter;
            Name = name;
            PhysicalBlockSizeBytes = physicalBlockSizeBytes;
            Project = project;
            ProvisionedIops = provisionedIops;
            ResourcePolicies = resourcePolicies;
            SelfLink = selfLink;
            Size = size;
            Snapshot = snapshot;
            SourceDisk = sourceDisk;
            SourceDiskId = sourceDiskId;
            SourceImageEncryptionKeys = sourceImageEncryptionKeys;
            SourceImageId = sourceImageId;
            SourceSnapshotEncryptionKeys = sourceSnapshotEncryptionKeys;
            SourceSnapshotId = sourceSnapshotId;
            Type = type;
            Users = users;
            Zone = zone;
        }
    }
}
