// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Represents a GlobalForwardingRule resource. Global forwarding rules are
    /// used to forward traffic to the correct load balancer for HTTP load
    /// balancing. Global forwarding rules can only be used for HTTP load
    /// balancing.
    /// 
    /// For more information, see
    /// https://cloud.google.com/compute/docs/load-balancing/http/
    /// 
    /// ## Example Usage
    /// 
    /// ### External Ssl Proxy Lb Mig Backend
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Tls = Pulumi.Tls;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // External SSL proxy load balancer with managed instance group backend
    ///     // VPC
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "ssl-proxy-xlb-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     // backend subnet
    ///     var defaultSubnetwork = new Gcp.Compute.Subnetwork("default", new()
    ///     {
    ///         Name = "ssl-proxy-xlb-subnet",
    ///         IpCidrRange = "10.0.1.0/24",
    ///         Region = "us-central1",
    ///         Network = @default.Id,
    ///     });
    /// 
    ///     // reserved IP address
    ///     var defaultGlobalAddress = new Gcp.Compute.GlobalAddress("default", new()
    ///     {
    ///         Name = "ssl-proxy-xlb-ip",
    ///     });
    /// 
    ///     // Self-signed regional SSL certificate for testing
    ///     var defaultPrivateKey = new Tls.PrivateKey("default", new()
    ///     {
    ///         Algorithm = "RSA",
    ///         RsaBits = 2048,
    ///     });
    /// 
    ///     var defaultSelfSignedCert = new Tls.SelfSignedCert("default", new()
    ///     {
    ///         KeyAlgorithm = defaultPrivateKey.Algorithm,
    ///         PrivateKeyPem = defaultPrivateKey.PrivateKeyPem,
    ///         ValidityPeriodHours = 12,
    ///         EarlyRenewalHours = 3,
    ///         AllowedUses = new[]
    ///         {
    ///             "key_encipherment",
    ///             "digital_signature",
    ///             "server_auth",
    ///         },
    ///         DnsNames = new[]
    ///         {
    ///             "example.com",
    ///         },
    ///         Subject = new Tls.Inputs.SelfSignedCertSubjectArgs
    ///         {
    ///             CommonName = "example.com",
    ///             Organization = "ACME Examples, Inc",
    ///         },
    ///     });
    /// 
    ///     var defaultSSLCertificate = new Gcp.Compute.SSLCertificate("default", new()
    ///     {
    ///         Name = "default-cert",
    ///         PrivateKey = defaultPrivateKey.PrivateKeyPem,
    ///         Certificate = defaultSelfSignedCert.CertPem,
    ///     });
    /// 
    ///     var defaultHealthCheck = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "ssl-proxy-health-check",
    ///         TimeoutSec = 1,
    ///         CheckIntervalSec = 1,
    ///         TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
    ///         {
    ///             Port = 443,
    ///         },
    ///     });
    /// 
    ///     // instance template
    ///     var defaultInstanceTemplate = new Gcp.Compute.InstanceTemplate("default", new()
    ///     {
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateNetworkInterfaceArgs
    ///             {
    ///                 AccessConfigs = new[]
    ///                 {
    ///                     null,
    ///                 },
    ///                 Network = @default.Id,
    ///                 Subnetwork = defaultSubnetwork.Id,
    ///             },
    ///         },
    ///         Name = "ssl-proxy-xlb-mig-template",
    ///         MachineType = "e2-small",
    ///         Tags = new[]
    ///         {
    ///             "allow-health-check",
    ///         },
    ///         Disks = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateDiskArgs
    ///             {
    ///                 SourceImage = "debian-cloud/debian-10",
    ///                 AutoDelete = true,
    ///                 Boot = true,
    ///             },
    ///         },
    ///         Metadata = 
    ///         {
    ///             { "startup-script", @"#! /bin/bash
    /// set -euo pipefail
    /// export DEBIAN_FRONTEND=noninteractive
    /// sudo apt-get update
    /// sudo apt-get install  -y apache2 jq
    /// sudo a2ensite default-ssl
    /// sudo a2enmod ssl
    /// sudo service apache2 restart
    /// NAME=$(curl -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/hostname"")
    /// IP=$(curl -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip"")
    /// METADATA=$(curl -f -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True"" | jq 'del(.[""startup-script""])')
    /// cat &lt;&lt;EOF &gt; /var/www/html/index.html
    /// &lt;h1&gt;SSL Load Balancer&lt;/h1&gt;
    /// &lt;pre&gt;
    /// Name: $NAME
    /// IP: $IP
    /// Metadata: $METADATA
    /// &lt;/pre&gt;
    /// EOF
    /// " },
    ///         },
    ///     });
    /// 
    ///     // MIG
    ///     var defaultInstanceGroupManager = new Gcp.Compute.InstanceGroupManager("default", new()
    ///     {
    ///         Name = "ssl-proxy-xlb-mig1",
    ///         Zone = "us-central1-c",
    ///         NamedPorts = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceGroupManagerNamedPortArgs
    ///             {
    ///                 Name = "tcp",
    ///                 Port = 443,
    ///             },
    ///         },
    ///         Versions = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceGroupManagerVersionArgs
    ///             {
    ///                 InstanceTemplate = defaultInstanceTemplate.Id,
    ///                 Name = "primary",
    ///             },
    ///         },
    ///         BaseInstanceName = "vm",
    ///         TargetSize = 2,
    ///     });
    /// 
    ///     // backend service
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "ssl-proxy-xlb-backend-service",
    ///         Protocol = "SSL",
    ///         PortName = "tcp",
    ///         LoadBalancingScheme = "EXTERNAL",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHealthCheck.Id,
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.BackendServiceBackendArgs
    ///             {
    ///                 Group = defaultInstanceGroupManager.InstanceGroup,
    ///                 BalancingMode = "UTILIZATION",
    ///                 MaxUtilization = 1,
    ///                 CapacityScaler = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultTargetSSLProxy = new Gcp.Compute.TargetSSLProxy("default", new()
    ///     {
    ///         Name = "test-proxy",
    ///         BackendService = defaultBackendService.Id,
    ///         SslCertificates = new[]
    ///         {
    ///             defaultSSLCertificate.Id,
    ///         },
    ///     });
    /// 
    ///     // forwarding rule
    ///     var defaultGlobalForwardingRule = new Gcp.Compute.GlobalForwardingRule("default", new()
    ///     {
    ///         Name = "ssl-proxy-xlb-forwarding-rule",
    ///         IpProtocol = "TCP",
    ///         LoadBalancingScheme = "EXTERNAL",
    ///         PortRange = "443",
    ///         Target = defaultTargetSSLProxy.Id,
    ///         IpAddress = defaultGlobalAddress.Id,
    ///     });
    /// 
    ///     // allow access from health check ranges
    ///     var defaultFirewall = new Gcp.Compute.Firewall("default", new()
    ///     {
    ///         Name = "ssl-proxy-xlb-fw-allow-hc",
    ///         Direction = "INGRESS",
    ///         Network = @default.Id,
    ///         SourceRanges = new[]
    ///         {
    ///             "130.211.0.0/22",
    ///             "35.191.0.0/16",
    ///         },
    ///         Allows = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.FirewallAllowArgs
    ///             {
    ///                 Protocol = "tcp",
    ///             },
    ///         },
    ///         TargetTags = new[]
    ///         {
    ///             "allow-health-check",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### External Tcp Proxy Lb Mig Backend
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // External TCP proxy load balancer with managed instance group backend
    ///     // VPC
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "tcp-proxy-xlb-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     // backend subnet
    ///     var defaultSubnetwork = new Gcp.Compute.Subnetwork("default", new()
    ///     {
    ///         Name = "tcp-proxy-xlb-subnet",
    ///         IpCidrRange = "10.0.1.0/24",
    ///         Region = "us-central1",
    ///         Network = @default.Id,
    ///     });
    /// 
    ///     // reserved IP address
    ///     var defaultGlobalAddress = new Gcp.Compute.GlobalAddress("default", new()
    ///     {
    ///         Name = "tcp-proxy-xlb-ip",
    ///     });
    /// 
    ///     var defaultHealthCheck = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "tcp-proxy-health-check",
    ///         TimeoutSec = 1,
    ///         CheckIntervalSec = 1,
    ///         TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     // instance template
    ///     var defaultInstanceTemplate = new Gcp.Compute.InstanceTemplate("default", new()
    ///     {
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateNetworkInterfaceArgs
    ///             {
    ///                 AccessConfigs = new[]
    ///                 {
    ///                     null,
    ///                 },
    ///                 Network = @default.Id,
    ///                 Subnetwork = defaultSubnetwork.Id,
    ///             },
    ///         },
    ///         Name = "tcp-proxy-xlb-mig-template",
    ///         MachineType = "e2-small",
    ///         Tags = new[]
    ///         {
    ///             "allow-health-check",
    ///         },
    ///         Disks = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateDiskArgs
    ///             {
    ///                 SourceImage = "debian-cloud/debian-10",
    ///                 AutoDelete = true,
    ///                 Boot = true,
    ///             },
    ///         },
    ///         Metadata = 
    ///         {
    ///             { "startup-script", @"#! /bin/bash
    /// set -euo pipefail
    /// export DEBIAN_FRONTEND=noninteractive
    /// apt-get update
    /// apt-get install -y nginx-light jq
    /// NAME=$(curl -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/hostname"")
    /// IP=$(curl -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip"")
    /// METADATA=$(curl -f -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True"" | jq 'del(.[""startup-script""])')
    /// cat &lt;&lt;EOF &gt; /var/www/html/index.html
    /// &lt;pre&gt;
    /// Name: $NAME
    /// IP: $IP
    /// Metadata: $METADATA
    /// &lt;/pre&gt;
    /// EOF
    /// " },
    ///         },
    ///     });
    /// 
    ///     // MIG
    ///     var defaultInstanceGroupManager = new Gcp.Compute.InstanceGroupManager("default", new()
    ///     {
    ///         Name = "tcp-proxy-xlb-mig1",
    ///         Zone = "us-central1-c",
    ///         NamedPorts = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceGroupManagerNamedPortArgs
    ///             {
    ///                 Name = "tcp",
    ///                 Port = 80,
    ///             },
    ///         },
    ///         Versions = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceGroupManagerVersionArgs
    ///             {
    ///                 InstanceTemplate = defaultInstanceTemplate.Id,
    ///                 Name = "primary",
    ///             },
    ///         },
    ///         BaseInstanceName = "vm",
    ///         TargetSize = 2,
    ///     });
    /// 
    ///     // backend service
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "tcp-proxy-xlb-backend-service",
    ///         Protocol = "TCP",
    ///         PortName = "tcp",
    ///         LoadBalancingScheme = "EXTERNAL",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHealthCheck.Id,
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.BackendServiceBackendArgs
    ///             {
    ///                 Group = defaultInstanceGroupManager.InstanceGroup,
    ///                 BalancingMode = "UTILIZATION",
    ///                 MaxUtilization = 1,
    ///                 CapacityScaler = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultTargetTCPProxy = new Gcp.Compute.TargetTCPProxy("default", new()
    ///     {
    ///         Name = "test-proxy-health-check",
    ///         BackendService = defaultBackendService.Id,
    ///     });
    /// 
    ///     // forwarding rule
    ///     var defaultGlobalForwardingRule = new Gcp.Compute.GlobalForwardingRule("default", new()
    ///     {
    ///         Name = "tcp-proxy-xlb-forwarding-rule",
    ///         IpProtocol = "TCP",
    ///         LoadBalancingScheme = "EXTERNAL",
    ///         PortRange = "110",
    ///         Target = defaultTargetTCPProxy.Id,
    ///         IpAddress = defaultGlobalAddress.Id,
    ///     });
    /// 
    ///     // allow access from health check ranges
    ///     var defaultFirewall = new Gcp.Compute.Firewall("default", new()
    ///     {
    ///         Name = "tcp-proxy-xlb-fw-allow-hc",
    ///         Direction = "INGRESS",
    ///         Network = @default.Id,
    ///         SourceRanges = new[]
    ///         {
    ///             "130.211.0.0/22",
    ///             "35.191.0.0/16",
    ///         },
    ///         Allows = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.FirewallAllowArgs
    ///             {
    ///                 Protocol = "tcp",
    ///             },
    ///         },
    ///         TargetTags = new[]
    ///         {
    ///             "allow-health-check",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### External Http Lb Mig Backend Custom Header
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // External HTTP load balancer with a CDN-enabled managed instance group backend
    ///     // and custom request and response headers
    ///     // VPC
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "l7-xlb-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     // backend subnet
    ///     var defaultSubnetwork = new Gcp.Compute.Subnetwork("default", new()
    ///     {
    ///         Name = "l7-xlb-subnet",
    ///         IpCidrRange = "10.0.1.0/24",
    ///         Region = "us-central1",
    ///         Network = @default.Id,
    ///     });
    /// 
    ///     // reserved IP address
    ///     var defaultGlobalAddress = new Gcp.Compute.GlobalAddress("default", new()
    ///     {
    ///         Name = "l7-xlb-static-ip",
    ///     });
    /// 
    ///     // health check
    ///     var defaultHealthCheck = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "l7-xlb-hc",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///         {
    ///             PortSpecification = "USE_SERVING_PORT",
    ///         },
    ///     });
    /// 
    ///     // instance template
    ///     var defaultInstanceTemplate = new Gcp.Compute.InstanceTemplate("default", new()
    ///     {
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateNetworkInterfaceArgs
    ///             {
    ///                 AccessConfigs = new[]
    ///                 {
    ///                     null,
    ///                 },
    ///                 Network = @default.Id,
    ///                 Subnetwork = defaultSubnetwork.Id,
    ///             },
    ///         },
    ///         Name = "l7-xlb-mig-template",
    ///         MachineType = "e2-small",
    ///         Tags = new[]
    ///         {
    ///             "allow-health-check",
    ///         },
    ///         Disks = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateDiskArgs
    ///             {
    ///                 SourceImage = "debian-cloud/debian-10",
    ///                 AutoDelete = true,
    ///                 Boot = true,
    ///             },
    ///         },
    ///         Metadata = 
    ///         {
    ///             { "startup-script", @"#! /bin/bash
    /// set -euo pipefail
    /// 
    /// export DEBIAN_FRONTEND=noninteractive
    /// apt-get update
    /// apt-get install -y nginx-light jq
    /// 
    /// NAME=$(curl -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/hostname"")
    /// IP=$(curl -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip"")
    /// METADATA=$(curl -f -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True"" | jq 'del(.[""startup-script""])')
    /// 
    /// cat &lt;&lt;EOF &gt; /var/www/html/index.html
    /// &lt;pre&gt;
    /// Name: $NAME
    /// IP: $IP
    /// Metadata: $METADATA
    /// &lt;/pre&gt;
    /// EOF
    /// " },
    ///         },
    ///     });
    /// 
    ///     // MIG
    ///     var defaultInstanceGroupManager = new Gcp.Compute.InstanceGroupManager("default", new()
    ///     {
    ///         Name = "l7-xlb-mig1",
    ///         Zone = "us-central1-c",
    ///         NamedPorts = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceGroupManagerNamedPortArgs
    ///             {
    ///                 Name = "http",
    ///                 Port = 8080,
    ///             },
    ///         },
    ///         Versions = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceGroupManagerVersionArgs
    ///             {
    ///                 InstanceTemplate = defaultInstanceTemplate.Id,
    ///                 Name = "primary",
    ///             },
    ///         },
    ///         BaseInstanceName = "vm",
    ///         TargetSize = 2,
    ///     });
    /// 
    ///     // backend service with custom request and response headers
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "l7-xlb-backend-service",
    ///         Protocol = "HTTP",
    ///         PortName = "my-port",
    ///         LoadBalancingScheme = "EXTERNAL",
    ///         TimeoutSec = 10,
    ///         EnableCdn = true,
    ///         CustomRequestHeaders = new[]
    ///         {
    ///             "X-Client-Geo-Location: {client_region_subdivision}, {client_city}",
    ///         },
    ///         CustomResponseHeaders = new[]
    ///         {
    ///             "X-Cache-Hit: {cdn_cache_status}",
    ///         },
    ///         HealthChecks = defaultHealthCheck.Id,
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.BackendServiceBackendArgs
    ///             {
    ///                 Group = defaultInstanceGroupManager.InstanceGroup,
    ///                 BalancingMode = "UTILIZATION",
    ///                 CapacityScaler = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // url map
    ///     var defaultURLMap = new Gcp.Compute.URLMap("default", new()
    ///     {
    ///         Name = "l7-xlb-url-map",
    ///         DefaultService = defaultBackendService.Id,
    ///     });
    /// 
    ///     // http proxy
    ///     var defaultTargetHttpProxy = new Gcp.Compute.TargetHttpProxy("default", new()
    ///     {
    ///         Name = "l7-xlb-target-http-proxy",
    ///         UrlMap = defaultURLMap.Id,
    ///     });
    /// 
    ///     // forwarding rule
    ///     var defaultGlobalForwardingRule = new Gcp.Compute.GlobalForwardingRule("default", new()
    ///     {
    ///         Name = "l7-xlb-forwarding-rule",
    ///         IpProtocol = "TCP",
    ///         LoadBalancingScheme = "EXTERNAL",
    ///         PortRange = "80",
    ///         Target = defaultTargetHttpProxy.Id,
    ///         IpAddress = defaultGlobalAddress.Id,
    ///     });
    /// 
    ///     // allow access from health check ranges
    ///     var defaultFirewall = new Gcp.Compute.Firewall("default", new()
    ///     {
    ///         Name = "l7-xlb-fw-allow-hc",
    ///         Direction = "INGRESS",
    ///         Network = @default.Id,
    ///         SourceRanges = new[]
    ///         {
    ///             "130.211.0.0/22",
    ///             "35.191.0.0/16",
    ///         },
    ///         Allows = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.FirewallAllowArgs
    ///             {
    ///                 Protocol = "tcp",
    ///             },
    ///         },
    ///         TargetTags = new[]
    ///         {
    ///             "allow-health-check",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### Global Forwarding Rule Http
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "check-backend",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    ///     var defaultURLMap = new Gcp.Compute.URLMap("default", new()
    ///     {
    ///         Name = "url-map-target-proxy",
    ///         Description = "a description",
    ///         DefaultService = defaultBackendService.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = defaultBackendService.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/*",
    ///                         },
    ///                         Service = defaultBackendService.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultTargetHttpProxy = new Gcp.Compute.TargetHttpProxy("default", new()
    ///     {
    ///         Name = "target-proxy",
    ///         Description = "a description",
    ///         UrlMap = defaultURLMap.Id,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.GlobalForwardingRule("default", new()
    ///     {
    ///         Name = "global-rule",
    ///         Target = defaultTargetHttpProxy.Id,
    ///         PortRange = "80",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### Global Forwarding Rule Internal
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var debianImage = Gcp.Compute.GetImage.Invoke(new()
    ///     {
    ///         Family = "debian-11",
    ///         Project = "debian-cloud",
    ///     });
    /// 
    ///     var instanceTemplate = new Gcp.Compute.InstanceTemplate("instance_template", new()
    ///     {
    ///         Name = "template-backend",
    ///         MachineType = "e2-medium",
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateNetworkInterfaceArgs
    ///             {
    ///                 Network = "default",
    ///             },
    ///         },
    ///         Disks = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateDiskArgs
    ///             {
    ///                 SourceImage = debianImage.Apply(getImageResult =&gt; getImageResult.SelfLink),
    ///                 AutoDelete = true,
    ///                 Boot = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var igm = new Gcp.Compute.InstanceGroupManager("igm", new()
    ///     {
    ///         Name = "igm-internal",
    ///         Versions = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceGroupManagerVersionArgs
    ///             {
    ///                 InstanceTemplate = instanceTemplate.Id,
    ///                 Name = "primary",
    ///             },
    ///         },
    ///         BaseInstanceName = "internal-glb",
    ///         Zone = "us-central1-f",
    ///         TargetSize = 1,
    ///     });
    /// 
    ///     var defaultHealthCheck = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "check-backend",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///         TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         LoadBalancingScheme = "INTERNAL_SELF_MANAGED",
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.BackendServiceBackendArgs
    ///             {
    ///                 Group = igm.InstanceGroup,
    ///                 BalancingMode = "RATE",
    ///                 CapacityScaler = 0.4,
    ///                 MaxRatePerInstance = 50,
    ///             },
    ///         },
    ///         HealthChecks = defaultHealthCheck.Id,
    ///     });
    /// 
    ///     var defaultURLMap = new Gcp.Compute.URLMap("default", new()
    ///     {
    ///         Name = "url-map-target-proxy",
    ///         Description = "a description",
    ///         DefaultService = defaultBackendService.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = defaultBackendService.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/*",
    ///                         },
    ///                         Service = defaultBackendService.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultTargetHttpProxy = new Gcp.Compute.TargetHttpProxy("default", new()
    ///     {
    ///         Name = "target-proxy",
    ///         Description = "a description",
    ///         UrlMap = defaultURLMap.Id,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.GlobalForwardingRule("default", new()
    ///     {
    ///         Name = "global-rule",
    ///         Target = defaultTargetHttpProxy.Id,
    ///         PortRange = "80",
    ///         LoadBalancingScheme = "INTERNAL_SELF_MANAGED",
    ///         IpAddress = "0.0.0.0",
    ///         MetadataFilters = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.GlobalForwardingRuleMetadataFilterArgs
    ///             {
    ///                 FilterMatchCriteria = "MATCH_ANY",
    ///                 FilterLabels = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.GlobalForwardingRuleMetadataFilterFilterLabelArgs
    ///                     {
    ///                         Name = "PLANET",
    ///                         Value = "MARS",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### Global Forwarding Rule External Managed
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///     });
    /// 
    ///     var defaultURLMap = new Gcp.Compute.URLMap("default", new()
    ///     {
    ///         Name = "url-map-target-proxy",
    ///         Description = "a description",
    ///         DefaultService = defaultBackendService.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = defaultBackendService.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/*",
    ///                         },
    ///                         Service = defaultBackendService.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultTargetHttpProxy = new Gcp.Compute.TargetHttpProxy("default", new()
    ///     {
    ///         Name = "target-proxy",
    ///         Description = "a description",
    ///         UrlMap = defaultURLMap.Id,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.GlobalForwardingRule("default", new()
    ///     {
    ///         Name = "global-rule",
    ///         Target = defaultTargetHttpProxy.Id,
    ///         PortRange = "80",
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### Global Forwarding Rule Hybrid
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var subnetworkCidr = config.Get("subnetworkCidr") ?? "10.0.0.0/24";
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "my-network",
    ///     });
    /// 
    ///     var @internal = new Gcp.Compute.Network("internal", new()
    ///     {
    ///         Name = "my-internal-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var internalSubnetwork = new Gcp.Compute.Subnetwork("internal", new()
    ///     {
    ///         Name = "my-subnetwork",
    ///         Network = @internal.Id,
    ///         IpCidrRange = subnetworkCidr,
    ///         Region = "us-central1",
    ///         PrivateIpGoogleAccess = true,
    ///     });
    /// 
    ///     // Zonal NEG with GCE_VM_IP_PORT
    ///     var defaultNetworkEndpointGroup = new Gcp.Compute.NetworkEndpointGroup("default", new()
    ///     {
    ///         Name = "default-neg",
    ///         Network = @default.Id,
    ///         DefaultPort = 90,
    ///         Zone = "us-central1-a",
    ///         NetworkEndpointType = "GCE_VM_IP_PORT",
    ///     });
    /// 
    ///     // Zonal NEG with GCE_VM_IP
    ///     var internalNetworkEndpointGroup = new Gcp.Compute.NetworkEndpointGroup("internal", new()
    ///     {
    ///         Name = "internal-neg",
    ///         Network = @internal.Id,
    ///         Subnetwork = internalSubnetwork.Id,
    ///         Zone = "us-central1-a",
    ///         NetworkEndpointType = "GCE_VM_IP",
    ///     });
    /// 
    ///     // Hybrid connectivity NEG
    ///     var hybrid = new Gcp.Compute.NetworkEndpointGroup("hybrid", new()
    ///     {
    ///         Name = "hybrid-neg",
    ///         Network = @default.Id,
    ///         DefaultPort = 90,
    ///         Zone = "us-central1-a",
    ///         NetworkEndpointType = "NON_GCP_PRIVATE_IP_PORT",
    ///     });
    /// 
    ///     var hybrid_endpoint = new Gcp.Compute.NetworkEndpoint("hybrid-endpoint", new()
    ///     {
    ///         NetworkEndpointGroup = hybrid.Name,
    ///         Port = hybrid.DefaultPort,
    ///         IpAddress = "127.0.0.1",
    ///     });
    /// 
    ///     var defaultHealthCheck = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         TimeoutSec = 1,
    ///         CheckIntervalSec = 1,
    ///         TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     // Backend service for Zonal NEG
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-default",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.BackendServiceBackendArgs
    ///             {
    ///                 Group = defaultNetworkEndpointGroup.Id,
    ///                 BalancingMode = "RATE",
    ///                 MaxRatePerEndpoint = 10,
    ///             },
    ///         },
    ///         HealthChecks = defaultHealthCheck.Id,
    ///     });
    /// 
    ///     // Backgend service for Hybrid NEG
    ///     var hybridBackendService = new Gcp.Compute.BackendService("hybrid", new()
    ///     {
    ///         Name = "backend-hybrid",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.BackendServiceBackendArgs
    ///             {
    ///                 Group = hybrid.Id,
    ///                 BalancingMode = "RATE",
    ///                 MaxRatePerEndpoint = 10,
    ///             },
    ///         },
    ///         HealthChecks = defaultHealthCheck.Id,
    ///     });
    /// 
    ///     var defaultURLMap = new Gcp.Compute.URLMap("default", new()
    ///     {
    ///         Name = "url-map-target-proxy",
    ///         Description = "a description",
    ///         DefaultService = defaultBackendService.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.URLMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = defaultBackendService.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/*",
    ///                         },
    ///                         Service = defaultBackendService.Id,
    ///                     },
    ///                     new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/hybrid",
    ///                         },
    ///                         Service = hybridBackendService.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultTargetHttpProxy = new Gcp.Compute.TargetHttpProxy("default", new()
    ///     {
    ///         Name = "target-proxy",
    ///         Description = "a description",
    ///         UrlMap = defaultURLMap.Id,
    ///     });
    /// 
    ///     var defaultGlobalForwardingRule = new Gcp.Compute.GlobalForwardingRule("default", new()
    ///     {
    ///         Name = "global-rule",
    ///         Target = defaultTargetHttpProxy.Id,
    ///         PortRange = "80",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### Global Internal Http Lb With Mig Backend
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Global Internal HTTP load balancer with a managed instance group backend
    ///     // VPC network
    ///     var gilbNetwork = new Gcp.Compute.Network("gilb_network", new()
    ///     {
    ///         Name = "l7-gilb-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     // proxy-only subnet
    ///     var proxySubnet = new Gcp.Compute.Subnetwork("proxy_subnet", new()
    ///     {
    ///         Name = "l7-gilb-proxy-subnet",
    ///         IpCidrRange = "10.0.0.0/24",
    ///         Region = "europe-west1",
    ///         Purpose = "GLOBAL_MANAGED_PROXY",
    ///         Role = "ACTIVE",
    ///         Network = gilbNetwork.Id,
    ///     });
    /// 
    ///     // backend subnet
    ///     var gilbSubnet = new Gcp.Compute.Subnetwork("gilb_subnet", new()
    ///     {
    ///         Name = "l7-gilb-subnet",
    ///         IpCidrRange = "10.0.1.0/24",
    ///         Region = "europe-west1",
    ///         Network = gilbNetwork.Id,
    ///     });
    /// 
    ///     // health check
    ///     var defaultHealthCheck = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "l7-gilb-hc",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///         {
    ///             PortSpecification = "USE_SERVING_PORT",
    ///         },
    ///     });
    /// 
    ///     // instance template
    ///     var instanceTemplate = new Gcp.Compute.InstanceTemplate("instance_template", new()
    ///     {
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateNetworkInterfaceArgs
    ///             {
    ///                 AccessConfigs = new[]
    ///                 {
    ///                     null,
    ///                 },
    ///                 Network = gilbNetwork.Id,
    ///                 Subnetwork = gilbSubnet.Id,
    ///             },
    ///         },
    ///         Name = "l7-gilb-mig-template",
    ///         MachineType = "e2-small",
    ///         Tags = new[]
    ///         {
    ///             "http-server",
    ///         },
    ///         Disks = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateDiskArgs
    ///             {
    ///                 SourceImage = "debian-cloud/debian-10",
    ///                 AutoDelete = true,
    ///                 Boot = true,
    ///             },
    ///         },
    ///         Metadata = 
    ///         {
    ///             { "startup-script", @"#! /bin/bash
    /// set -euo pipefail
    /// 
    /// export DEBIAN_FRONTEND=noninteractive
    /// apt-get update
    /// apt-get install -y nginx-light jq
    /// 
    /// NAME=$(curl -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/hostname"")
    /// IP=$(curl -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip"")
    /// METADATA=$(curl -f -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True"" | jq 'del(.[""startup-script""])')
    /// 
    /// cat &lt;&lt;EOF &gt; /var/www/html/index.html
    /// &lt;pre&gt;
    /// Name: $NAME
    /// IP: $IP
    /// Metadata: $METADATA
    /// &lt;/pre&gt;
    /// EOF
    /// " },
    ///         },
    ///     });
    /// 
    ///     // MIG
    ///     var mig = new Gcp.Compute.InstanceGroupManager("mig", new()
    ///     {
    ///         Name = "l7-gilb-mig1",
    ///         Zone = "europe-west1-b",
    ///         Versions = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceGroupManagerVersionArgs
    ///             {
    ///                 InstanceTemplate = instanceTemplate.Id,
    ///                 Name = "primary",
    ///             },
    ///         },
    ///         BaseInstanceName = "vm",
    ///         TargetSize = 2,
    ///     });
    /// 
    ///     // backend service
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "l7-gilb-backend-subnet",
    ///         Protocol = "HTTP",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultHealthCheck.Id,
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.BackendServiceBackendArgs
    ///             {
    ///                 Group = mig.InstanceGroup,
    ///                 BalancingMode = "UTILIZATION",
    ///                 CapacityScaler = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // URL map
    ///     var defaultURLMap = new Gcp.Compute.URLMap("default", new()
    ///     {
    ///         Name = "l7-gilb-url-map",
    ///         DefaultService = defaultBackendService.Id,
    ///     });
    /// 
    ///     // HTTP target proxy
    ///     var @default = new Gcp.Compute.TargetHttpProxy("default", new()
    ///     {
    ///         Name = "l7-gilb-target-http-proxy",
    ///         UrlMap = defaultURLMap.Id,
    ///     });
    /// 
    ///     // forwarding rule
    ///     var googleComputeForwardingRule = new Gcp.Compute.GlobalForwardingRule("google_compute_forwarding_rule", new()
    ///     {
    ///         Name = "l7-gilb-forwarding-rule",
    ///         IpProtocol = "TCP",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         PortRange = "80",
    ///         Target = @default.Id,
    ///         Network = gilbNetwork.Id,
    ///         Subnetwork = gilbSubnet.Id,
    ///     });
    /// 
    ///     // allow all access from IAP and health check ranges
    ///     var fw_iap = new Gcp.Compute.Firewall("fw-iap", new()
    ///     {
    ///         Name = "l7-gilb-fw-allow-iap-hc",
    ///         Direction = "INGRESS",
    ///         Network = gilbNetwork.Id,
    ///         SourceRanges = new[]
    ///         {
    ///             "130.211.0.0/22",
    ///             "35.191.0.0/16",
    ///             "35.235.240.0/20",
    ///         },
    ///         Allows = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.FirewallAllowArgs
    ///             {
    ///                 Protocol = "tcp",
    ///             },
    ///         },
    ///     });
    /// 
    ///     // allow http from proxy subnet to backends
    ///     var fw_gilb_to_backends = new Gcp.Compute.Firewall("fw-gilb-to-backends", new()
    ///     {
    ///         Name = "l7-gilb-fw-allow-gilb-to-backends",
    ///         Direction = "INGRESS",
    ///         Network = gilbNetwork.Id,
    ///         SourceRanges = new[]
    ///         {
    ///             "10.0.0.0/24",
    ///         },
    ///         TargetTags = new[]
    ///         {
    ///             "http-server",
    ///         },
    ///         Allows = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.FirewallAllowArgs
    ///             {
    ///                 Protocol = "tcp",
    ///                 Ports = new[]
    ///                 {
    ///                     "80",
    ///                     "443",
    ///                     "8080",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // test instance
    ///     var vm_test = new Gcp.Compute.Instance("vm-test", new()
    ///     {
    ///         Name = "l7-gilb-test-vm",
    ///         Zone = "europe-west1-b",
    ///         MachineType = "e2-small",
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
    ///             {
    ///                 Network = gilbNetwork.Id,
    ///                 Subnetwork = gilbSubnet.Id,
    ///             },
    ///         },
    ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
    ///         {
    ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
    ///             {
    ///                 Image = "debian-cloud/debian-10",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### Private Service Connect Google Apis
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Name = "my-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var vpcSubnetwork = new Gcp.Compute.Subnetwork("vpc_subnetwork", new()
    ///     {
    ///         Project = network.Project,
    ///         Name = "my-subnetwork",
    ///         IpCidrRange = "10.2.0.0/16",
    ///         Region = "us-central1",
    ///         Network = network.Id,
    ///         PrivateIpGoogleAccess = true,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.GlobalAddress("default", new()
    ///     {
    ///         Project = network.Project,
    ///         Name = "global-psconnect-ip",
    ///         AddressType = "INTERNAL",
    ///         Purpose = "PRIVATE_SERVICE_CONNECT",
    ///         Network = network.Id,
    ///         Address = "100.100.100.106",
    ///     });
    /// 
    ///     var defaultGlobalForwardingRule = new Gcp.Compute.GlobalForwardingRule("default", new()
    ///     {
    ///         Project = network.Project,
    ///         Name = "globalrule",
    ///         Target = "all-apis",
    ///         Network = network.Id,
    ///         IpAddress = @default.Id,
    ///         LoadBalancingScheme = "",
    ///         ServiceDirectoryRegistrations = new Gcp.Compute.Inputs.GlobalForwardingRuleServiceDirectoryRegistrationsArgs
    ///         {
    ///             Namespace = "sd-namespace",
    ///             ServiceDirectoryRegion = "europe-west3",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### Private Service Connect Google Apis No Automate Dns
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Name = "my-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var vpcSubnetwork = new Gcp.Compute.Subnetwork("vpc_subnetwork", new()
    ///     {
    ///         Project = network.Project,
    ///         Name = "my-subnetwork",
    ///         IpCidrRange = "10.2.0.0/16",
    ///         Region = "us-central1",
    ///         Network = network.Id,
    ///         PrivateIpGoogleAccess = true,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.GlobalAddress("default", new()
    ///     {
    ///         Project = network.Project,
    ///         Name = "global-psconnect-ip",
    ///         AddressType = "INTERNAL",
    ///         Purpose = "PRIVATE_SERVICE_CONNECT",
    ///         Network = network.Id,
    ///         Address = "100.100.100.106",
    ///     });
    /// 
    ///     var defaultGlobalForwardingRule = new Gcp.Compute.GlobalForwardingRule("default", new()
    ///     {
    ///         Project = network.Project,
    ///         Name = "globalrule",
    ///         Target = "all-apis",
    ///         Network = network.Id,
    ///         IpAddress = @default.Id,
    ///         LoadBalancingScheme = "",
    ///         NoAutomateDnsZone = false,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// GlobalForwardingRule can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/global/forwardingRules/{{name}}`
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, GlobalForwardingRule can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/globalForwardingRule:GlobalForwardingRule default projects/{{project}}/global/forwardingRules/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/globalForwardingRule:GlobalForwardingRule default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/globalForwardingRule:GlobalForwardingRule default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/globalForwardingRule:GlobalForwardingRule")]
    public partial class GlobalForwardingRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
        /// </summary>
        [Output("allowPscGlobalAccess")]
        public Output<bool?> AllowPscGlobalAccess { get; private set; } = null!;

        /// <summary>
        /// [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
        /// </summary>
        [Output("baseForwardingRule")]
        public Output<string> BaseForwardingRule { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource. Provide this property when
        /// you create the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// IP address for which this forwarding rule accepts traffic. When a client
        /// sends traffic to this IP address, the forwarding rule directs the traffic
        /// to the referenced `target`.
        /// While creating a forwarding rule, specifying an `IPAddress` is
        /// required under the following circumstances:
        /// * When the `target` is set to `targetGrpcProxy` and
        /// `validateForProxyless` is set to `true`, the
        /// `IPAddress` should be set to `0.0.0.0`.
        /// * When the `target` is a Private Service Connect Google APIs
        /// bundle, you must specify an `IPAddress`.
        /// 
        /// Otherwise, you can optionally specify an IP address that references an
        /// existing static (reserved) IP address resource. When omitted, Google Cloud
        /// assigns an ephemeral IP address.
        /// Use one of the following formats to specify an IP address while creating a
        /// forwarding rule:
        /// * IP address number, as in `100.1.2.3`
        /// * IPv6 address range, as in `2600:1234::/96`
        /// * Full resource URL, as in
        /// `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
        /// * Partial URL or by name, as in:
        /// * `projects/project_id/regions/region/addresses/address-name`
        /// * `regions/region/addresses/address-name`
        /// * `global/addresses/address-name`
        /// * `address-name`
        /// 
        /// The forwarding rule's `target`,
        /// and in most cases, also the `loadBalancingScheme`, determine the
        /// type of IP address that you can use. For detailed information, see
        /// [IP address
        /// specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
        /// When reading an `IPAddress`, the API always returns the IP
        /// address number.
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// The IP protocol to which this rule applies.
        /// For protocol forwarding, valid
        /// options are `TCP`, `UDP`, `ESP`,
        /// `AH`, `SCTP`, `ICMP` and
        /// `L3_DEFAULT`.
        /// The valid IP protocols are different for different load balancing products
        /// as described in [Load balancing
        /// features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
        /// Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`.
        /// </summary>
        [Output("ipProtocol")]
        public Output<string> IpProtocol { get; private set; } = null!;

        /// <summary>
        /// The IP Version that will be used by this global forwarding rule.
        /// Possible values are: `IPV4`, `IPV6`.
        /// </summary>
        [Output("ipVersion")]
        public Output<string?> IpVersion { get; private set; } = null!;

        /// <summary>
        /// The fingerprint used for optimistic locking of this resource.  Used
        /// internally during updates.
        /// </summary>
        [Output("labelFingerprint")]
        public Output<string> LabelFingerprint { get; private set; } = null!;

        /// <summary>
        /// Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Specifies the forwarding rule type.
        /// For more information about forwarding rules, refer to
        /// [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
        /// Default value is `EXTERNAL`.
        /// Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
        /// </summary>
        [Output("loadBalancingScheme")]
        public Output<string?> LoadBalancingScheme { get; private set; } = null!;

        /// <summary>
        /// Opaque filter criteria used by Loadbalancer to restrict routing
        /// configuration to a limited set xDS compliant clients. In their xDS
        /// requests to Loadbalancer, xDS clients present node metadata. If a
        /// match takes place, the relevant routing configuration is made available
        /// to those proxies.
        /// For each metadataFilter in this list, if its filterMatchCriteria is set
        /// to MATCH_ANY, at least one of the filterLabels must match the
        /// corresponding label provided in the metadata. If its filterMatchCriteria
        /// is set to MATCH_ALL, then all of its filterLabels must match with
        /// corresponding labels in the provided metadata.
        /// metadataFilters specified here can be overridden by those specified in
        /// the UrlMap that this ForwardingRule references.
        /// metadataFilters only applies to Loadbalancers that have their
        /// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Output("metadataFilters")]
        public Output<ImmutableArray<Outputs.GlobalForwardingRuleMetadataFilter>> MetadataFilters { get; private set; } = null!;

        /// <summary>
        /// Name of the resource; provided by the client when the resource is created.
        /// The name must be 1-63 characters long, and comply with
        /// [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
        /// Specifically, the name must be 1-63 characters long and match the regular
        /// expression `a-z?` which means the first
        /// character must be a lowercase letter, and all following characters must
        /// be a dash, lowercase letter, or digit, except the last character, which
        /// cannot be a dash.
        /// For Private Service Connect forwarding rules that forward traffic to Google
        /// APIs, the forwarding rule name must be a 1-20 characters string with
        /// lowercase letters and numbers and must start with a letter.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// This field is not used for external load balancing.
        /// For Internal TCP/UDP Load Balancing, this field identifies the network that
        /// the load balanced IP should belong to for this Forwarding Rule.
        /// If the subnetwork is specified, the network of the subnetwork will be used.
        /// If neither subnetwork nor this field is specified, the default network will
        /// be used.
        /// For Private Service Connect forwarding rules that forward traffic to Google
        /// APIs, a network must be provided.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
        /// </summary>
        [Output("noAutomateDnsZone")]
        public Output<bool?> NoAutomateDnsZone { get; private set; } = null!;

        /// <summary>
        /// The `portRange` field has the following limitations:
        /// * It requires that the forwarding rule `IPProtocol` be TCP, UDP, or SCTP,
        /// and
        /// * It's applicable only to the following products: external passthrough
        /// Network Load Balancers, internal and external proxy Network Load
        /// Balancers, internal and external Application Load Balancers, external
        /// protocol forwarding, and Classic VPN.
        /// * Some products have restrictions on what ports can be used. See
        /// [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
        /// for details.
        /// For external forwarding rules, two or more forwarding rules cannot use the
        /// same `[IPAddress, IPProtocol]` pair, and cannot have overlapping
        /// `portRange`s.
        /// For internal forwarding rules within the same VPC network, two or more
        /// forwarding rules cannot use the same `[IPAddress, IPProtocol]` pair, and
        /// cannot have overlapping `portRange`s.
        /// </summary>
        [Output("portRange")]
        public Output<string?> PortRange { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The PSC connection id of the PSC Forwarding Rule.
        /// </summary>
        [Output("pscConnectionId")]
        public Output<string> PscConnectionId { get; private set; } = null!;

        /// <summary>
        /// The PSC connection status of the PSC Forwarding Rule. Possible values: `STATUS_UNSPECIFIED`, `PENDING`, `ACCEPTED`, `REJECTED`, `CLOSED`
        /// </summary>
        [Output("pscConnectionStatus")]
        public Output<string> PscConnectionStatus { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Service Directory resources to register this forwarding rule with.
        /// Currently, only supports a single Service Directory resource.
        /// Structure is documented below.
        /// </summary>
        [Output("serviceDirectoryRegistrations")]
        public Output<Outputs.GlobalForwardingRuleServiceDirectoryRegistrations> ServiceDirectoryRegistrations { get; private set; } = null!;

        /// <summary>
        /// If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
        /// </summary>
        [Output("sourceIpRanges")]
        public Output<ImmutableArray<string>> SourceIpRanges { get; private set; } = null!;

        /// <summary>
        /// This field identifies the subnetwork that the load balanced IP should
        /// belong to for this Forwarding Rule, used in internal load balancing and
        /// network load balancing with IPv6.
        /// If the network specified is in auto subnet mode, this field is optional.
        /// However, a subnetwork must be specified if the network is in custom subnet
        /// mode or when creating external forwarding rule with IPv6.
        /// </summary>
        [Output("subnetwork")]
        public Output<string> Subnetwork { get; private set; } = null!;

        /// <summary>
        /// The URL of the target resource to receive the matched traffic.  For
        /// regional forwarding rules, this target must be in the same region as the
        /// forwarding rule. For global forwarding rules, this target must be a global
        /// load balancing resource.
        /// The forwarded traffic must be of a type appropriate to the target object.
        /// *  For load balancers, see the "Target" column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
        /// *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
        /// *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
        /// *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
        /// 
        /// For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("target")]
        public Output<string> Target { get; private set; } = null!;


        /// <summary>
        /// Create a GlobalForwardingRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GlobalForwardingRule(string name, GlobalForwardingRuleArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/globalForwardingRule:GlobalForwardingRule", name, args ?? new GlobalForwardingRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GlobalForwardingRule(string name, Input<string> id, GlobalForwardingRuleState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/globalForwardingRule:GlobalForwardingRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GlobalForwardingRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GlobalForwardingRule Get(string name, Input<string> id, GlobalForwardingRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new GlobalForwardingRule(name, id, state, options);
        }
    }

    public sealed class GlobalForwardingRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
        /// </summary>
        [Input("allowPscGlobalAccess")]
        public Input<bool>? AllowPscGlobalAccess { get; set; }

        /// <summary>
        /// An optional description of this resource. Provide this property when
        /// you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// IP address for which this forwarding rule accepts traffic. When a client
        /// sends traffic to this IP address, the forwarding rule directs the traffic
        /// to the referenced `target`.
        /// While creating a forwarding rule, specifying an `IPAddress` is
        /// required under the following circumstances:
        /// * When the `target` is set to `targetGrpcProxy` and
        /// `validateForProxyless` is set to `true`, the
        /// `IPAddress` should be set to `0.0.0.0`.
        /// * When the `target` is a Private Service Connect Google APIs
        /// bundle, you must specify an `IPAddress`.
        /// 
        /// Otherwise, you can optionally specify an IP address that references an
        /// existing static (reserved) IP address resource. When omitted, Google Cloud
        /// assigns an ephemeral IP address.
        /// Use one of the following formats to specify an IP address while creating a
        /// forwarding rule:
        /// * IP address number, as in `100.1.2.3`
        /// * IPv6 address range, as in `2600:1234::/96`
        /// * Full resource URL, as in
        /// `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
        /// * Partial URL or by name, as in:
        /// * `projects/project_id/regions/region/addresses/address-name`
        /// * `regions/region/addresses/address-name`
        /// * `global/addresses/address-name`
        /// * `address-name`
        /// 
        /// The forwarding rule's `target`,
        /// and in most cases, also the `loadBalancingScheme`, determine the
        /// type of IP address that you can use. For detailed information, see
        /// [IP address
        /// specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
        /// When reading an `IPAddress`, the API always returns the IP
        /// address number.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// The IP protocol to which this rule applies.
        /// For protocol forwarding, valid
        /// options are `TCP`, `UDP`, `ESP`,
        /// `AH`, `SCTP`, `ICMP` and
        /// `L3_DEFAULT`.
        /// The valid IP protocols are different for different load balancing products
        /// as described in [Load balancing
        /// features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
        /// Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`.
        /// </summary>
        [Input("ipProtocol")]
        public Input<string>? IpProtocol { get; set; }

        /// <summary>
        /// The IP Version that will be used by this global forwarding rule.
        /// Possible values are: `IPV4`, `IPV6`.
        /// </summary>
        [Input("ipVersion")]
        public Input<string>? IpVersion { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Specifies the forwarding rule type.
        /// For more information about forwarding rules, refer to
        /// [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
        /// Default value is `EXTERNAL`.
        /// Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
        /// </summary>
        [Input("loadBalancingScheme")]
        public Input<string>? LoadBalancingScheme { get; set; }

        [Input("metadataFilters")]
        private InputList<Inputs.GlobalForwardingRuleMetadataFilterArgs>? _metadataFilters;

        /// <summary>
        /// Opaque filter criteria used by Loadbalancer to restrict routing
        /// configuration to a limited set xDS compliant clients. In their xDS
        /// requests to Loadbalancer, xDS clients present node metadata. If a
        /// match takes place, the relevant routing configuration is made available
        /// to those proxies.
        /// For each metadataFilter in this list, if its filterMatchCriteria is set
        /// to MATCH_ANY, at least one of the filterLabels must match the
        /// corresponding label provided in the metadata. If its filterMatchCriteria
        /// is set to MATCH_ALL, then all of its filterLabels must match with
        /// corresponding labels in the provided metadata.
        /// metadataFilters specified here can be overridden by those specified in
        /// the UrlMap that this ForwardingRule references.
        /// metadataFilters only applies to Loadbalancers that have their
        /// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.GlobalForwardingRuleMetadataFilterArgs> MetadataFilters
        {
            get => _metadataFilters ?? (_metadataFilters = new InputList<Inputs.GlobalForwardingRuleMetadataFilterArgs>());
            set => _metadataFilters = value;
        }

        /// <summary>
        /// Name of the resource; provided by the client when the resource is created.
        /// The name must be 1-63 characters long, and comply with
        /// [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
        /// Specifically, the name must be 1-63 characters long and match the regular
        /// expression `a-z?` which means the first
        /// character must be a lowercase letter, and all following characters must
        /// be a dash, lowercase letter, or digit, except the last character, which
        /// cannot be a dash.
        /// For Private Service Connect forwarding rules that forward traffic to Google
        /// APIs, the forwarding rule name must be a 1-20 characters string with
        /// lowercase letters and numbers and must start with a letter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// This field is not used for external load balancing.
        /// For Internal TCP/UDP Load Balancing, this field identifies the network that
        /// the load balanced IP should belong to for this Forwarding Rule.
        /// If the subnetwork is specified, the network of the subnetwork will be used.
        /// If neither subnetwork nor this field is specified, the default network will
        /// be used.
        /// For Private Service Connect forwarding rules that forward traffic to Google
        /// APIs, a network must be provided.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
        /// </summary>
        [Input("noAutomateDnsZone")]
        public Input<bool>? NoAutomateDnsZone { get; set; }

        /// <summary>
        /// The `portRange` field has the following limitations:
        /// * It requires that the forwarding rule `IPProtocol` be TCP, UDP, or SCTP,
        /// and
        /// * It's applicable only to the following products: external passthrough
        /// Network Load Balancers, internal and external proxy Network Load
        /// Balancers, internal and external Application Load Balancers, external
        /// protocol forwarding, and Classic VPN.
        /// * Some products have restrictions on what ports can be used. See
        /// [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
        /// for details.
        /// For external forwarding rules, two or more forwarding rules cannot use the
        /// same `[IPAddress, IPProtocol]` pair, and cannot have overlapping
        /// `portRange`s.
        /// For internal forwarding rules within the same VPC network, two or more
        /// forwarding rules cannot use the same `[IPAddress, IPProtocol]` pair, and
        /// cannot have overlapping `portRange`s.
        /// </summary>
        [Input("portRange")]
        public Input<string>? PortRange { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Service Directory resources to register this forwarding rule with.
        /// Currently, only supports a single Service Directory resource.
        /// Structure is documented below.
        /// </summary>
        [Input("serviceDirectoryRegistrations")]
        public Input<Inputs.GlobalForwardingRuleServiceDirectoryRegistrationsArgs>? ServiceDirectoryRegistrations { get; set; }

        [Input("sourceIpRanges")]
        private InputList<string>? _sourceIpRanges;

        /// <summary>
        /// If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
        /// </summary>
        public InputList<string> SourceIpRanges
        {
            get => _sourceIpRanges ?? (_sourceIpRanges = new InputList<string>());
            set => _sourceIpRanges = value;
        }

        /// <summary>
        /// This field identifies the subnetwork that the load balanced IP should
        /// belong to for this Forwarding Rule, used in internal load balancing and
        /// network load balancing with IPv6.
        /// If the network specified is in auto subnet mode, this field is optional.
        /// However, a subnetwork must be specified if the network is in custom subnet
        /// mode or when creating external forwarding rule with IPv6.
        /// </summary>
        [Input("subnetwork")]
        public Input<string>? Subnetwork { get; set; }

        /// <summary>
        /// The URL of the target resource to receive the matched traffic.  For
        /// regional forwarding rules, this target must be in the same region as the
        /// forwarding rule. For global forwarding rules, this target must be a global
        /// load balancing resource.
        /// The forwarded traffic must be of a type appropriate to the target object.
        /// *  For load balancers, see the "Target" column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
        /// *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
        /// *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
        /// *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
        /// 
        /// For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        public GlobalForwardingRuleArgs()
        {
        }
        public static new GlobalForwardingRuleArgs Empty => new GlobalForwardingRuleArgs();
    }

    public sealed class GlobalForwardingRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
        /// </summary>
        [Input("allowPscGlobalAccess")]
        public Input<bool>? AllowPscGlobalAccess { get; set; }

        /// <summary>
        /// [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
        /// </summary>
        [Input("baseForwardingRule")]
        public Input<string>? BaseForwardingRule { get; set; }

        /// <summary>
        /// An optional description of this resource. Provide this property when
        /// you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// IP address for which this forwarding rule accepts traffic. When a client
        /// sends traffic to this IP address, the forwarding rule directs the traffic
        /// to the referenced `target`.
        /// While creating a forwarding rule, specifying an `IPAddress` is
        /// required under the following circumstances:
        /// * When the `target` is set to `targetGrpcProxy` and
        /// `validateForProxyless` is set to `true`, the
        /// `IPAddress` should be set to `0.0.0.0`.
        /// * When the `target` is a Private Service Connect Google APIs
        /// bundle, you must specify an `IPAddress`.
        /// 
        /// Otherwise, you can optionally specify an IP address that references an
        /// existing static (reserved) IP address resource. When omitted, Google Cloud
        /// assigns an ephemeral IP address.
        /// Use one of the following formats to specify an IP address while creating a
        /// forwarding rule:
        /// * IP address number, as in `100.1.2.3`
        /// * IPv6 address range, as in `2600:1234::/96`
        /// * Full resource URL, as in
        /// `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
        /// * Partial URL or by name, as in:
        /// * `projects/project_id/regions/region/addresses/address-name`
        /// * `regions/region/addresses/address-name`
        /// * `global/addresses/address-name`
        /// * `address-name`
        /// 
        /// The forwarding rule's `target`,
        /// and in most cases, also the `loadBalancingScheme`, determine the
        /// type of IP address that you can use. For detailed information, see
        /// [IP address
        /// specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
        /// When reading an `IPAddress`, the API always returns the IP
        /// address number.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// The IP protocol to which this rule applies.
        /// For protocol forwarding, valid
        /// options are `TCP`, `UDP`, `ESP`,
        /// `AH`, `SCTP`, `ICMP` and
        /// `L3_DEFAULT`.
        /// The valid IP protocols are different for different load balancing products
        /// as described in [Load balancing
        /// features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
        /// Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`.
        /// </summary>
        [Input("ipProtocol")]
        public Input<string>? IpProtocol { get; set; }

        /// <summary>
        /// The IP Version that will be used by this global forwarding rule.
        /// Possible values are: `IPV4`, `IPV6`.
        /// </summary>
        [Input("ipVersion")]
        public Input<string>? IpVersion { get; set; }

        /// <summary>
        /// The fingerprint used for optimistic locking of this resource.  Used
        /// internally during updates.
        /// </summary>
        [Input("labelFingerprint")]
        public Input<string>? LabelFingerprint { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Specifies the forwarding rule type.
        /// For more information about forwarding rules, refer to
        /// [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
        /// Default value is `EXTERNAL`.
        /// Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
        /// </summary>
        [Input("loadBalancingScheme")]
        public Input<string>? LoadBalancingScheme { get; set; }

        [Input("metadataFilters")]
        private InputList<Inputs.GlobalForwardingRuleMetadataFilterGetArgs>? _metadataFilters;

        /// <summary>
        /// Opaque filter criteria used by Loadbalancer to restrict routing
        /// configuration to a limited set xDS compliant clients. In their xDS
        /// requests to Loadbalancer, xDS clients present node metadata. If a
        /// match takes place, the relevant routing configuration is made available
        /// to those proxies.
        /// For each metadataFilter in this list, if its filterMatchCriteria is set
        /// to MATCH_ANY, at least one of the filterLabels must match the
        /// corresponding label provided in the metadata. If its filterMatchCriteria
        /// is set to MATCH_ALL, then all of its filterLabels must match with
        /// corresponding labels in the provided metadata.
        /// metadataFilters specified here can be overridden by those specified in
        /// the UrlMap that this ForwardingRule references.
        /// metadataFilters only applies to Loadbalancers that have their
        /// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.GlobalForwardingRuleMetadataFilterGetArgs> MetadataFilters
        {
            get => _metadataFilters ?? (_metadataFilters = new InputList<Inputs.GlobalForwardingRuleMetadataFilterGetArgs>());
            set => _metadataFilters = value;
        }

        /// <summary>
        /// Name of the resource; provided by the client when the resource is created.
        /// The name must be 1-63 characters long, and comply with
        /// [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
        /// Specifically, the name must be 1-63 characters long and match the regular
        /// expression `a-z?` which means the first
        /// character must be a lowercase letter, and all following characters must
        /// be a dash, lowercase letter, or digit, except the last character, which
        /// cannot be a dash.
        /// For Private Service Connect forwarding rules that forward traffic to Google
        /// APIs, the forwarding rule name must be a 1-20 characters string with
        /// lowercase letters and numbers and must start with a letter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// This field is not used for external load balancing.
        /// For Internal TCP/UDP Load Balancing, this field identifies the network that
        /// the load balanced IP should belong to for this Forwarding Rule.
        /// If the subnetwork is specified, the network of the subnetwork will be used.
        /// If neither subnetwork nor this field is specified, the default network will
        /// be used.
        /// For Private Service Connect forwarding rules that forward traffic to Google
        /// APIs, a network must be provided.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
        /// </summary>
        [Input("noAutomateDnsZone")]
        public Input<bool>? NoAutomateDnsZone { get; set; }

        /// <summary>
        /// The `portRange` field has the following limitations:
        /// * It requires that the forwarding rule `IPProtocol` be TCP, UDP, or SCTP,
        /// and
        /// * It's applicable only to the following products: external passthrough
        /// Network Load Balancers, internal and external proxy Network Load
        /// Balancers, internal and external Application Load Balancers, external
        /// protocol forwarding, and Classic VPN.
        /// * Some products have restrictions on what ports can be used. See
        /// [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
        /// for details.
        /// For external forwarding rules, two or more forwarding rules cannot use the
        /// same `[IPAddress, IPProtocol]` pair, and cannot have overlapping
        /// `portRange`s.
        /// For internal forwarding rules within the same VPC network, two or more
        /// forwarding rules cannot use the same `[IPAddress, IPProtocol]` pair, and
        /// cannot have overlapping `portRange`s.
        /// </summary>
        [Input("portRange")]
        public Input<string>? PortRange { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The PSC connection id of the PSC Forwarding Rule.
        /// </summary>
        [Input("pscConnectionId")]
        public Input<string>? PscConnectionId { get; set; }

        /// <summary>
        /// The PSC connection status of the PSC Forwarding Rule. Possible values: `STATUS_UNSPECIFIED`, `PENDING`, `ACCEPTED`, `REJECTED`, `CLOSED`
        /// </summary>
        [Input("pscConnectionStatus")]
        public Input<string>? PscConnectionStatus { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// Service Directory resources to register this forwarding rule with.
        /// Currently, only supports a single Service Directory resource.
        /// Structure is documented below.
        /// </summary>
        [Input("serviceDirectoryRegistrations")]
        public Input<Inputs.GlobalForwardingRuleServiceDirectoryRegistrationsGetArgs>? ServiceDirectoryRegistrations { get; set; }

        [Input("sourceIpRanges")]
        private InputList<string>? _sourceIpRanges;

        /// <summary>
        /// If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
        /// </summary>
        public InputList<string> SourceIpRanges
        {
            get => _sourceIpRanges ?? (_sourceIpRanges = new InputList<string>());
            set => _sourceIpRanges = value;
        }

        /// <summary>
        /// This field identifies the subnetwork that the load balanced IP should
        /// belong to for this Forwarding Rule, used in internal load balancing and
        /// network load balancing with IPv6.
        /// If the network specified is in auto subnet mode, this field is optional.
        /// However, a subnetwork must be specified if the network is in custom subnet
        /// mode or when creating external forwarding rule with IPv6.
        /// </summary>
        [Input("subnetwork")]
        public Input<string>? Subnetwork { get; set; }

        /// <summary>
        /// The URL of the target resource to receive the matched traffic.  For
        /// regional forwarding rules, this target must be in the same region as the
        /// forwarding rule. For global forwarding rules, this target must be a global
        /// load balancing resource.
        /// The forwarded traffic must be of a type appropriate to the target object.
        /// *  For load balancers, see the "Target" column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
        /// *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
        /// *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
        /// *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
        /// 
        /// For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        public GlobalForwardingRuleState()
        {
        }
        public static new GlobalForwardingRuleState Empty => new GlobalForwardingRuleState();
    }
}
