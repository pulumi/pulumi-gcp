// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetRouterNat
    {
        /// <summary>
        /// To get more information about Snapshot, see:
        /// 
        /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/routers)
        /// * How-to Guides
        ///     * [Official Documentation](https://cloud.google.com/router/docs/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.Compute.GetRouterNat.Invoke(new()
        ///     {
        ///         Name = "my-nat",
        ///         Router = "my-router",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRouterNatResult> InvokeAsync(GetRouterNatArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouterNatResult>("gcp:compute/getRouterNat:getRouterNat", args ?? new GetRouterNatArgs(), options.WithDefaults());

        /// <summary>
        /// To get more information about Snapshot, see:
        /// 
        /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/routers)
        /// * How-to Guides
        ///     * [Official Documentation](https://cloud.google.com/router/docs/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.Compute.GetRouterNat.Invoke(new()
        ///     {
        ///         Name = "my-nat",
        ///         Router = "my-router",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRouterNatResult> Invoke(GetRouterNatInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouterNatResult>("gcp:compute/getRouterNat:getRouterNat", args ?? new GetRouterNatInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouterNatArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the NAT service. The name must be 1-63 characters long and
        /// comply with RFC1035.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// Region where the router and NAT reside.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// The name of the Cloud Router in which this NAT will be configured.
        /// </summary>
        [Input("router", required: true)]
        public string Router { get; set; } = null!;

        public GetRouterNatArgs()
        {
        }
        public static new GetRouterNatArgs Empty => new GetRouterNatArgs();
    }

    public sealed class GetRouterNatInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the NAT service. The name must be 1-63 characters long and
        /// comply with RFC1035.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Region where the router and NAT reside.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The name of the Cloud Router in which this NAT will be configured.
        /// </summary>
        [Input("router", required: true)]
        public Input<string> Router { get; set; } = null!;

        public GetRouterNatInvokeArgs()
        {
        }
        public static new GetRouterNatInvokeArgs Empty => new GetRouterNatInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouterNatResult
    {
        public readonly ImmutableArray<string> DrainNatIps;
        public readonly bool EnableDynamicPortAllocation;
        public readonly bool EnableEndpointIndependentMapping;
        public readonly int IcmpIdleTimeoutSec;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetRouterNatLogConfigResult> LogConfigs;
        public readonly int MaxPortsPerVm;
        public readonly int MinPortsPerVm;
        public readonly string Name;
        public readonly string NatIpAllocateOption;
        public readonly ImmutableArray<string> NatIps;
        public readonly string? Project;
        public readonly string? Region;
        public readonly string Router;
        public readonly ImmutableArray<Outputs.GetRouterNatRuleResult> Rules;
        public readonly string SourceSubnetworkIpRangesToNat;
        public readonly ImmutableArray<Outputs.GetRouterNatSubnetworkResult> Subnetworks;
        public readonly int TcpEstablishedIdleTimeoutSec;
        public readonly int TcpTransitoryIdleTimeoutSec;
        public readonly int UdpIdleTimeoutSec;

        [OutputConstructor]
        private GetRouterNatResult(
            ImmutableArray<string> drainNatIps,

            bool enableDynamicPortAllocation,

            bool enableEndpointIndependentMapping,

            int icmpIdleTimeoutSec,

            string id,

            ImmutableArray<Outputs.GetRouterNatLogConfigResult> logConfigs,

            int maxPortsPerVm,

            int minPortsPerVm,

            string name,

            string natIpAllocateOption,

            ImmutableArray<string> natIps,

            string? project,

            string? region,

            string router,

            ImmutableArray<Outputs.GetRouterNatRuleResult> rules,

            string sourceSubnetworkIpRangesToNat,

            ImmutableArray<Outputs.GetRouterNatSubnetworkResult> subnetworks,

            int tcpEstablishedIdleTimeoutSec,

            int tcpTransitoryIdleTimeoutSec,

            int udpIdleTimeoutSec)
        {
            DrainNatIps = drainNatIps;
            EnableDynamicPortAllocation = enableDynamicPortAllocation;
            EnableEndpointIndependentMapping = enableEndpointIndependentMapping;
            IcmpIdleTimeoutSec = icmpIdleTimeoutSec;
            Id = id;
            LogConfigs = logConfigs;
            MaxPortsPerVm = maxPortsPerVm;
            MinPortsPerVm = minPortsPerVm;
            Name = name;
            NatIpAllocateOption = natIpAllocateOption;
            NatIps = natIps;
            Project = project;
            Region = region;
            Router = router;
            Rules = rules;
            SourceSubnetworkIpRangesToNat = sourceSubnetworkIpRangesToNat;
            Subnetworks = subnetworks;
            TcpEstablishedIdleTimeoutSec = tcpEstablishedIdleTimeoutSec;
            TcpTransitoryIdleTimeoutSec = tcpTransitoryIdleTimeoutSec;
            UdpIdleTimeoutSec = udpIdleTimeoutSec;
        }
    }
}
