// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// A resource used to set the list of IP addresses to be used in a NAT service and manage the draining of destroyed IPs.
    /// 
    /// &gt; **Note:** This resource is to be used alongside a `gcp.compute.RouterNat` resource,
    /// the router nat resource must have no defined `NatIps` or `DrainNatIps` parameters,
    /// instead using the `InitialNatIps` parameter to set at least one IP for the creation of the resource.
    /// 
    /// To get more information about RouterNatAddress, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/routers)
    /// * How-to Guides
    ///     * [Google Cloud Router](https://cloud.google.com/router/docs/)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// RouterNatAddress can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/regions/{{region}}/routers/{{router}}/{{router_nat}}`
    /// 
    /// * `{{project}}/{{region}}/{{router}}/{{router_nat}}`
    /// 
    /// * `{{region}}/{{router}}/{{router_nat}}`
    /// 
    /// * `{{router}}/{{router_nat}}`
    /// 
    /// When using the `pulumi import` command, RouterNatAddress can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/routerNatAddress:RouterNatAddress default projects/{{project}}/regions/{{region}}/routers/{{router}}/{{router_nat}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/routerNatAddress:RouterNatAddress default {{project}}/{{region}}/{{router}}/{{router_nat}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/routerNatAddress:RouterNatAddress default {{region}}/{{router}}/{{router_nat}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/routerNatAddress:RouterNatAddress default {{router}}/{{router_nat}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/routerNatAddress:RouterNatAddress")]
    public partial class RouterNatAddress : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of URLs of the IP resources to be drained. These IPs must be
        /// valid static external IPs that have been assigned to the NAT.
        /// </summary>
        [Output("drainNatIps")]
        public Output<ImmutableArray<string>> DrainNatIps { get; private set; } = null!;

        /// <summary>
        /// Self-links of NAT IPs to be used in a Nat service. Only valid if the referenced RouterNat
        /// natIpAllocateOption is set to MANUAL_ONLY.
        /// </summary>
        [Output("natIps")]
        public Output<ImmutableArray<string>> NatIps { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Region where the NAT service reside.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The name of the Cloud Router in which the referenced NAT service is configured.
        /// </summary>
        [Output("router")]
        public Output<string> Router { get; private set; } = null!;

        /// <summary>
        /// The name of the Nat service in which this address will be configured.
        /// </summary>
        [Output("routerNat")]
        public Output<string> RouterNat { get; private set; } = null!;


        /// <summary>
        /// Create a RouterNatAddress resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouterNatAddress(string name, RouterNatAddressArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/routerNatAddress:RouterNatAddress", name, args ?? new RouterNatAddressArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouterNatAddress(string name, Input<string> id, RouterNatAddressState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/routerNatAddress:RouterNatAddress", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouterNatAddress resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouterNatAddress Get(string name, Input<string> id, RouterNatAddressState? state = null, CustomResourceOptions? options = null)
        {
            return new RouterNatAddress(name, id, state, options);
        }
    }

    public sealed class RouterNatAddressArgs : global::Pulumi.ResourceArgs
    {
        [Input("drainNatIps")]
        private InputList<string>? _drainNatIps;

        /// <summary>
        /// A list of URLs of the IP resources to be drained. These IPs must be
        /// valid static external IPs that have been assigned to the NAT.
        /// </summary>
        public InputList<string> DrainNatIps
        {
            get => _drainNatIps ?? (_drainNatIps = new InputList<string>());
            set => _drainNatIps = value;
        }

        [Input("natIps", required: true)]
        private InputList<string>? _natIps;

        /// <summary>
        /// Self-links of NAT IPs to be used in a Nat service. Only valid if the referenced RouterNat
        /// natIpAllocateOption is set to MANUAL_ONLY.
        /// </summary>
        public InputList<string> NatIps
        {
            get => _natIps ?? (_natIps = new InputList<string>());
            set => _natIps = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Region where the NAT service reside.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The name of the Cloud Router in which the referenced NAT service is configured.
        /// </summary>
        [Input("router", required: true)]
        public Input<string> Router { get; set; } = null!;

        /// <summary>
        /// The name of the Nat service in which this address will be configured.
        /// </summary>
        [Input("routerNat", required: true)]
        public Input<string> RouterNat { get; set; } = null!;

        public RouterNatAddressArgs()
        {
        }
        public static new RouterNatAddressArgs Empty => new RouterNatAddressArgs();
    }

    public sealed class RouterNatAddressState : global::Pulumi.ResourceArgs
    {
        [Input("drainNatIps")]
        private InputList<string>? _drainNatIps;

        /// <summary>
        /// A list of URLs of the IP resources to be drained. These IPs must be
        /// valid static external IPs that have been assigned to the NAT.
        /// </summary>
        public InputList<string> DrainNatIps
        {
            get => _drainNatIps ?? (_drainNatIps = new InputList<string>());
            set => _drainNatIps = value;
        }

        [Input("natIps")]
        private InputList<string>? _natIps;

        /// <summary>
        /// Self-links of NAT IPs to be used in a Nat service. Only valid if the referenced RouterNat
        /// natIpAllocateOption is set to MANUAL_ONLY.
        /// </summary>
        public InputList<string> NatIps
        {
            get => _natIps ?? (_natIps = new InputList<string>());
            set => _natIps = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Region where the NAT service reside.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The name of the Cloud Router in which the referenced NAT service is configured.
        /// </summary>
        [Input("router")]
        public Input<string>? Router { get; set; }

        /// <summary>
        /// The name of the Nat service in which this address will be configured.
        /// </summary>
        [Input("routerNat")]
        public Input<string>? RouterNat { get; set; }

        public RouterNatAddressState()
        {
        }
        public static new RouterNatAddressState Empty => new RouterNatAddressState();
    }
}
