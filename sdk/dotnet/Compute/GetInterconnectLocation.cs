// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetInterconnectLocation
    {
        /// <summary>
        /// Get the details of a single interconnect location. For more information see
        /// the official [API](https://cloud.google.com/compute/docs/reference/rest/v1/interconnectLocations/get) documentation.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Gcp.Compute.GetInterconnectLocation.Invoke(new()
        ///     {
        ///         Name = "iad-zone1-1",
        ///     });
        /// 
        ///     var thisInterconnect = new Gcp.Compute.Interconnect("this", new()
        ///     {
        ///         Project = @this.Apply(@this =&gt; @this.Apply(getInterconnectLocationResult =&gt; getInterconnectLocationResult.Project)),
        ///         Location = @this.Apply(@this =&gt; @this.Apply(getInterconnectLocationResult =&gt; getInterconnectLocationResult.SelfLink)),
        ///         Name = "my-dedicated-connection-1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInterconnectLocationResult> InvokeAsync(GetInterconnectLocationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInterconnectLocationResult>("gcp:compute/getInterconnectLocation:getInterconnectLocation", args ?? new GetInterconnectLocationArgs(), options.WithDefaults());

        /// <summary>
        /// Get the details of a single interconnect location. For more information see
        /// the official [API](https://cloud.google.com/compute/docs/reference/rest/v1/interconnectLocations/get) documentation.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Gcp.Compute.GetInterconnectLocation.Invoke(new()
        ///     {
        ///         Name = "iad-zone1-1",
        ///     });
        /// 
        ///     var thisInterconnect = new Gcp.Compute.Interconnect("this", new()
        ///     {
        ///         Project = @this.Apply(@this =&gt; @this.Apply(getInterconnectLocationResult =&gt; getInterconnectLocationResult.Project)),
        ///         Location = @this.Apply(@this =&gt; @this.Apply(getInterconnectLocationResult =&gt; getInterconnectLocationResult.SelfLink)),
        ///         Name = "my-dedicated-connection-1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInterconnectLocationResult> Invoke(GetInterconnectLocationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInterconnectLocationResult>("gcp:compute/getInterconnectLocation:getInterconnectLocation", args ?? new GetInterconnectLocationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get the details of a single interconnect location. For more information see
        /// the official [API](https://cloud.google.com/compute/docs/reference/rest/v1/interconnectLocations/get) documentation.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Gcp.Compute.GetInterconnectLocation.Invoke(new()
        ///     {
        ///         Name = "iad-zone1-1",
        ///     });
        /// 
        ///     var thisInterconnect = new Gcp.Compute.Interconnect("this", new()
        ///     {
        ///         Project = @this.Apply(@this =&gt; @this.Apply(getInterconnectLocationResult =&gt; getInterconnectLocationResult.Project)),
        ///         Location = @this.Apply(@this =&gt; @this.Apply(getInterconnectLocationResult =&gt; getInterconnectLocationResult.SelfLink)),
        ///         Name = "my-dedicated-connection-1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInterconnectLocationResult> Invoke(GetInterconnectLocationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInterconnectLocationResult>("gcp:compute/getInterconnectLocation:getInterconnectLocation", args ?? new GetInterconnectLocationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInterconnectLocationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the interconnect location.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetInterconnectLocationArgs()
        {
        }
        public static new GetInterconnectLocationArgs Empty => new GetInterconnectLocationArgs();
    }

    public sealed class GetInterconnectLocationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the interconnect location.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetInterconnectLocationInvokeArgs()
        {
        }
        public static new GetInterconnectLocationInvokeArgs Empty => new GetInterconnectLocationInvokeArgs();
    }


    [OutputType]
    public sealed class GetInterconnectLocationResult
    {
        /// <summary>
        /// The postal address of the Point of Presence.
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// The availability zone for this InterconnectLocation.
        /// </summary>
        public readonly string AvailabilityZone;
        /// <summary>
        /// The city for this location.
        /// </summary>
        public readonly string City;
        /// <summary>
        /// The continent for this location.
        /// </summary>
        public readonly string Continent;
        /// <summary>
        /// A textual description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The name of the provider for this facility.
        /// </summary>
        public readonly string FacilityProvider;
        /// <summary>
        /// A provider-assigned Identifier for this facility.
        /// </summary>
        public readonly string FacilityProviderFacilityId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// The PeeringDB facility ID for this facility.
        /// </summary>
        public readonly string PeeringdbFacilityId;
        public readonly string Project;
        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// The status of this InterconnectLocation.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetInterconnectLocationResult(
            string address,

            string availabilityZone,

            string city,

            string continent,

            string description,

            string facilityProvider,

            string facilityProviderFacilityId,

            string id,

            string name,

            string peeringdbFacilityId,

            string project,

            string selfLink,

            string status)
        {
            Address = address;
            AvailabilityZone = availabilityZone;
            City = city;
            Continent = continent;
            Description = description;
            FacilityProvider = facilityProvider;
            FacilityProviderFacilityId = facilityProviderFacilityId;
            Id = id;
            Name = name;
            PeeringdbFacilityId = peeringdbFacilityId;
            Project = project;
            SelfLink = selfLink;
            Status = status;
        }
    }
}
