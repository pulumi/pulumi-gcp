// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Represents a Target gRPC Proxy resource. A target gRPC proxy is a component
    /// of load balancers intended for load balancing gRPC traffic. Global forwarding
    /// rules reference a target gRPC proxy. The Target gRPC Proxy references
    /// a URL map which specifies how traffic routes to gRPC backend services.
    /// 
    /// To get more information about TargetGrpcProxy, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/targetGrpcProxies)
    /// * How-to Guides
    ///     * [Using Target gRPC Proxies](https://cloud.google.com/traffic-director/docs/proxyless-overview)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// TargetGrpcProxy can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/targetGrpcProxy:TargetGrpcProxy default projects/{{project}}/global/targetGrpcProxies/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/targetGrpcProxy:TargetGrpcProxy default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/targetGrpcProxy:TargetGrpcProxy default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/targetGrpcProxy:TargetGrpcProxy")]
    public partial class TargetGrpcProxy : Pulumi.CustomResource
    {
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
        /// This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to
        /// patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest
        /// fingerprint, make a get() request to retrieve the TargetGrpcProxy. A base64-encoded string.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. Provided by the client when the resource
        /// is created. The name must be 1-63 characters long, and comply
        /// with RFC1035. Specifically, the name must be 1-63 characters long
        /// and match the regular expression `a-z?` which
        /// means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Server-defined URL with id for the resource.
        /// </summary>
        [Output("selfLinkWithId")]
        public Output<string> SelfLinkWithId { get; private set; } = null!;

        /// <summary>
        /// URL to the UrlMap resource that defines the mapping from URL to
        /// the BackendService. The protocol field in the BackendService
        /// must be set to GRPC.
        /// </summary>
        [Output("urlMap")]
        public Output<string?> UrlMap { get; private set; } = null!;

        /// <summary>
        /// If true, indicates that the BackendServices referenced by
        /// the urlMap may be accessed by gRPC applications without using
        /// a sidecar proxy. This will enable configuration checks on urlMap
        /// and its referenced BackendServices to not allow unsupported features.
        /// A gRPC application must use "xds:///" scheme in the target URI
        /// of the service it is connecting to. If false, indicates that the
        /// BackendServices referenced by the urlMap will be accessed by gRPC
        /// applications via a sidecar proxy. In this case, a gRPC application
        /// must not use "xds:///" scheme in the target URI of the service
        /// it is connecting to
        /// </summary>
        [Output("validateForProxyless")]
        public Output<bool?> ValidateForProxyless { get; private set; } = null!;


        /// <summary>
        /// Create a TargetGrpcProxy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TargetGrpcProxy(string name, TargetGrpcProxyArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:compute/targetGrpcProxy:TargetGrpcProxy", name, args ?? new TargetGrpcProxyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TargetGrpcProxy(string name, Input<string> id, TargetGrpcProxyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/targetGrpcProxy:TargetGrpcProxy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TargetGrpcProxy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TargetGrpcProxy Get(string name, Input<string> id, TargetGrpcProxyState? state = null, CustomResourceOptions? options = null)
        {
            return new TargetGrpcProxy(name, id, state, options);
        }
    }

    public sealed class TargetGrpcProxyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource
        /// is created. The name must be 1-63 characters long, and comply
        /// with RFC1035. Specifically, the name must be 1-63 characters long
        /// and match the regular expression `a-z?` which
        /// means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// URL to the UrlMap resource that defines the mapping from URL to
        /// the BackendService. The protocol field in the BackendService
        /// must be set to GRPC.
        /// </summary>
        [Input("urlMap")]
        public Input<string>? UrlMap { get; set; }

        /// <summary>
        /// If true, indicates that the BackendServices referenced by
        /// the urlMap may be accessed by gRPC applications without using
        /// a sidecar proxy. This will enable configuration checks on urlMap
        /// and its referenced BackendServices to not allow unsupported features.
        /// A gRPC application must use "xds:///" scheme in the target URI
        /// of the service it is connecting to. If false, indicates that the
        /// BackendServices referenced by the urlMap will be accessed by gRPC
        /// applications via a sidecar proxy. In this case, a gRPC application
        /// must not use "xds:///" scheme in the target URI of the service
        /// it is connecting to
        /// </summary>
        [Input("validateForProxyless")]
        public Input<bool>? ValidateForProxyless { get; set; }

        public TargetGrpcProxyArgs()
        {
        }
    }

    public sealed class TargetGrpcProxyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
        /// This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to
        /// patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest
        /// fingerprint, make a get() request to retrieve the TargetGrpcProxy. A base64-encoded string.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource
        /// is created. The name must be 1-63 characters long, and comply
        /// with RFC1035. Specifically, the name must be 1-63 characters long
        /// and match the regular expression `a-z?` which
        /// means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// Server-defined URL with id for the resource.
        /// </summary>
        [Input("selfLinkWithId")]
        public Input<string>? SelfLinkWithId { get; set; }

        /// <summary>
        /// URL to the UrlMap resource that defines the mapping from URL to
        /// the BackendService. The protocol field in the BackendService
        /// must be set to GRPC.
        /// </summary>
        [Input("urlMap")]
        public Input<string>? UrlMap { get; set; }

        /// <summary>
        /// If true, indicates that the BackendServices referenced by
        /// the urlMap may be accessed by gRPC applications without using
        /// a sidecar proxy. This will enable configuration checks on urlMap
        /// and its referenced BackendServices to not allow unsupported features.
        /// A gRPC application must use "xds:///" scheme in the target URI
        /// of the service it is connecting to. If false, indicates that the
        /// BackendServices referenced by the urlMap will be accessed by gRPC
        /// applications via a sidecar proxy. In this case, a gRPC application
        /// must not use "xds:///" scheme in the target URI of the service
        /// it is connecting to
        /// </summary>
        [Input("validateForProxyless")]
        public Input<bool>? ValidateForProxyless { get; set; }

        public TargetGrpcProxyState()
        {
        }
    }
}
