// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetBackendService
    {
        /// <summary>
        /// Provide access to a Backend Service's attribute. For more information
        /// see [the official documentation](https://cloud.google.com/compute/docs/load-balancing/http/backend-service)
        /// and the [API](https://cloud.google.com/compute/docs/reference/latest/backendServices).
        /// 
        /// {{% examples %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBackendServiceResult> InvokeAsync(GetBackendServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBackendServiceResult>("gcp:compute/getBackendService:getBackendService", args ?? new GetBackendServiceArgs(), options.WithVersion());
    }


    public sealed class GetBackendServiceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Backend Service.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetBackendServiceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBackendServiceResult
    {
        public readonly int AffinityCookieTtlSec;
        /// <summary>
        /// The set of backends that serve this Backend Service.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackendServiceBackendResult> Backends;
        public readonly ImmutableArray<Outputs.GetBackendServiceCdnPolicyResult> CdnPolicies;
        public readonly ImmutableArray<Outputs.GetBackendServiceCircuitBreakerResult> CircuitBreakers;
        /// <summary>
        /// Time for which instance will be drained (not accept new connections, but still work to finish started ones).
        /// </summary>
        public readonly int ConnectionDrainingTimeoutSec;
        public readonly ImmutableArray<Outputs.GetBackendServiceConsistentHashResult> ConsistentHash;
        public readonly string CreationTimestamp;
        public readonly ImmutableArray<string> CustomRequestHeaders;
        /// <summary>
        /// Textual description for the Backend Service.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether or not Cloud CDN is enabled on the Backend Service.
        /// </summary>
        public readonly bool EnableCdn;
        /// <summary>
        /// The fingerprint of the Backend Service.
        /// </summary>
        public readonly string Fingerprint;
        /// <summary>
        /// The set of HTTP/HTTPS health checks used by the Backend Service.
        /// </summary>
        public readonly ImmutableArray<string> HealthChecks;
        public readonly ImmutableArray<Outputs.GetBackendServiceIapResult> Iaps;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LoadBalancingScheme;
        public readonly string LocalityLbPolicy;
        public readonly ImmutableArray<Outputs.GetBackendServiceLogConfigResult> LogConfigs;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetBackendServiceOutlierDetectionResult> OutlierDetections;
        /// <summary>
        /// The name of a service that has been added to an instance group in this backend.
        /// </summary>
        public readonly string PortName;
        public readonly string? Project;
        /// <summary>
        /// The protocol for incoming requests.
        /// </summary>
        public readonly string Protocol;
        public readonly string SecurityPolicy;
        /// <summary>
        /// The URI of the Backend Service.
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// The Backend Service session stickiness configuration.
        /// </summary>
        public readonly string SessionAffinity;
        /// <summary>
        /// The number of seconds to wait for a backend to respond to a request before considering the request failed.
        /// </summary>
        public readonly int TimeoutSec;

        [OutputConstructor]
        private GetBackendServiceResult(
            int affinityCookieTtlSec,

            ImmutableArray<Outputs.GetBackendServiceBackendResult> backends,

            ImmutableArray<Outputs.GetBackendServiceCdnPolicyResult> cdnPolicies,

            ImmutableArray<Outputs.GetBackendServiceCircuitBreakerResult> circuitBreakers,

            int connectionDrainingTimeoutSec,

            ImmutableArray<Outputs.GetBackendServiceConsistentHashResult> consistentHash,

            string creationTimestamp,

            ImmutableArray<string> customRequestHeaders,

            string description,

            bool enableCdn,

            string fingerprint,

            ImmutableArray<string> healthChecks,

            ImmutableArray<Outputs.GetBackendServiceIapResult> iaps,

            string id,

            string loadBalancingScheme,

            string localityLbPolicy,

            ImmutableArray<Outputs.GetBackendServiceLogConfigResult> logConfigs,

            string name,

            ImmutableArray<Outputs.GetBackendServiceOutlierDetectionResult> outlierDetections,

            string portName,

            string? project,

            string protocol,

            string securityPolicy,

            string selfLink,

            string sessionAffinity,

            int timeoutSec)
        {
            AffinityCookieTtlSec = affinityCookieTtlSec;
            Backends = backends;
            CdnPolicies = cdnPolicies;
            CircuitBreakers = circuitBreakers;
            ConnectionDrainingTimeoutSec = connectionDrainingTimeoutSec;
            ConsistentHash = consistentHash;
            CreationTimestamp = creationTimestamp;
            CustomRequestHeaders = customRequestHeaders;
            Description = description;
            EnableCdn = enableCdn;
            Fingerprint = fingerprint;
            HealthChecks = healthChecks;
            Iaps = iaps;
            Id = id;
            LoadBalancingScheme = loadBalancingScheme;
            LocalityLbPolicy = localityLbPolicy;
            LogConfigs = logConfigs;
            Name = name;
            OutlierDetections = outlierDetections;
            PortName = portName;
            Project = project;
            Protocol = protocol;
            SecurityPolicy = securityPolicy;
            SelfLink = selfLink;
            SessionAffinity = sessionAffinity;
            TimeoutSec = timeoutSec;
        }
    }
}
