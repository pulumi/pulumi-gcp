// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static partial class Invokes
    {
        /// <summary>
        /// Provide access to a Backend Service's attribute. For more information
        /// see [the official documentation](https://cloud.google.com/compute/docs/load-balancing/http/backend-service)
        /// and the [API](https://cloud.google.com/compute/docs/reference/latest/backendServices).
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/d/compute_backend_service.html.markdown.
        /// </summary>
        public static Task<GetBackendServiceResult> GetBackendService(GetBackendServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBackendServiceResult>("gcp:compute/getBackendService:getBackendService", args ?? ResourceArgs.Empty, options.WithVersion());
    }

    public sealed class GetBackendServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Backend Service.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetBackendServiceArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetBackendServiceResult
    {
        public readonly int AffinityCookieTtlSec;
        /// <summary>
        /// The set of backends that serve this Backend Service.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackendServiceBackendsResult> Backends;
        public readonly ImmutableArray<Outputs.GetBackendServiceCdnPoliciesResult> CdnPolicies;
        public readonly ImmutableArray<Outputs.GetBackendServiceCircuitBreakersResult> CircuitBreakers;
        /// <summary>
        /// Time for which instance will be drained (not accept new connections, but still work to finish started ones).
        /// </summary>
        public readonly int ConnectionDrainingTimeoutSec;
        public readonly ImmutableArray<Outputs.GetBackendServiceConsistentHashResult> ConsistentHash;
        public readonly string CreationTimestamp;
        public readonly ImmutableArray<string> CustomRequestHeaders;
        /// <summary>
        /// Textual description for the Backend Service.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether or not Cloud CDN is enabled on the Backend Service.
        /// </summary>
        public readonly bool EnableCdn;
        /// <summary>
        /// The fingerprint of the Backend Service.
        /// </summary>
        public readonly string Fingerprint;
        /// <summary>
        /// The set of HTTP/HTTPS health checks used by the Backend Service.
        /// </summary>
        public readonly ImmutableArray<string> HealthChecks;
        public readonly ImmutableArray<Outputs.GetBackendServiceIapsResult> Iaps;
        public readonly string LoadBalancingScheme;
        public readonly string LocalityLbPolicy;
        public readonly ImmutableArray<Outputs.GetBackendServiceLogConfigsResult> LogConfigs;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetBackendServiceOutlierDetectionsResult> OutlierDetections;
        /// <summary>
        /// The name of a service that has been added to an instance group in this backend.
        /// </summary>
        public readonly string PortName;
        public readonly string? Project;
        /// <summary>
        /// The protocol for incoming requests.
        /// </summary>
        public readonly string Protocol;
        public readonly string SecurityPolicy;
        /// <summary>
        /// The URI of the Backend Service.
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// The Backend Service session stickiness configuration.
        /// </summary>
        public readonly string SessionAffinity;
        /// <summary>
        /// The number of seconds to wait for a backend to respond to a request before considering the request failed.
        /// </summary>
        public readonly int TimeoutSec;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetBackendServiceResult(
            int affinityCookieTtlSec,
            ImmutableArray<Outputs.GetBackendServiceBackendsResult> backends,
            ImmutableArray<Outputs.GetBackendServiceCdnPoliciesResult> cdnPolicies,
            ImmutableArray<Outputs.GetBackendServiceCircuitBreakersResult> circuitBreakers,
            int connectionDrainingTimeoutSec,
            ImmutableArray<Outputs.GetBackendServiceConsistentHashResult> consistentHash,
            string creationTimestamp,
            ImmutableArray<string> customRequestHeaders,
            string description,
            bool enableCdn,
            string fingerprint,
            ImmutableArray<string> healthChecks,
            ImmutableArray<Outputs.GetBackendServiceIapsResult> iaps,
            string loadBalancingScheme,
            string localityLbPolicy,
            ImmutableArray<Outputs.GetBackendServiceLogConfigsResult> logConfigs,
            string name,
            ImmutableArray<Outputs.GetBackendServiceOutlierDetectionsResult> outlierDetections,
            string portName,
            string? project,
            string protocol,
            string securityPolicy,
            string selfLink,
            string sessionAffinity,
            int timeoutSec,
            string id)
        {
            AffinityCookieTtlSec = affinityCookieTtlSec;
            Backends = backends;
            CdnPolicies = cdnPolicies;
            CircuitBreakers = circuitBreakers;
            ConnectionDrainingTimeoutSec = connectionDrainingTimeoutSec;
            ConsistentHash = consistentHash;
            CreationTimestamp = creationTimestamp;
            CustomRequestHeaders = customRequestHeaders;
            Description = description;
            EnableCdn = enableCdn;
            Fingerprint = fingerprint;
            HealthChecks = healthChecks;
            Iaps = iaps;
            LoadBalancingScheme = loadBalancingScheme;
            LocalityLbPolicy = localityLbPolicy;
            LogConfigs = logConfigs;
            Name = name;
            OutlierDetections = outlierDetections;
            PortName = portName;
            Project = project;
            Protocol = protocol;
            SecurityPolicy = securityPolicy;
            SelfLink = selfLink;
            SessionAffinity = sessionAffinity;
            TimeoutSec = timeoutSec;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetBackendServiceBackendsResult
    {
        public readonly string BalancingMode;
        public readonly double CapacityScaler;
        /// <summary>
        /// Textual description for the Backend Service.
        /// </summary>
        public readonly string Description;
        public readonly string Group;
        public readonly int MaxConnections;
        public readonly int MaxConnectionsPerEndpoint;
        public readonly int MaxConnectionsPerInstance;
        public readonly int MaxRate;
        public readonly double MaxRatePerEndpoint;
        public readonly double MaxRatePerInstance;
        public readonly double MaxUtilization;

        [OutputConstructor]
        private GetBackendServiceBackendsResult(
            string balancingMode,
            double capacityScaler,
            string description,
            string group,
            int maxConnections,
            int maxConnectionsPerEndpoint,
            int maxConnectionsPerInstance,
            int maxRate,
            double maxRatePerEndpoint,
            double maxRatePerInstance,
            double maxUtilization)
        {
            BalancingMode = balancingMode;
            CapacityScaler = capacityScaler;
            Description = description;
            Group = group;
            MaxConnections = maxConnections;
            MaxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
            MaxConnectionsPerInstance = maxConnectionsPerInstance;
            MaxRate = maxRate;
            MaxRatePerEndpoint = maxRatePerEndpoint;
            MaxRatePerInstance = maxRatePerInstance;
            MaxUtilization = maxUtilization;
        }
    }

    [OutputType]
    public sealed class GetBackendServiceCdnPoliciesCacheKeyPoliciesResult
    {
        public readonly bool IncludeHost;
        public readonly bool IncludeProtocol;
        public readonly bool IncludeQueryString;
        public readonly ImmutableArray<string> QueryStringBlacklists;
        public readonly ImmutableArray<string> QueryStringWhitelists;

        [OutputConstructor]
        private GetBackendServiceCdnPoliciesCacheKeyPoliciesResult(
            bool includeHost,
            bool includeProtocol,
            bool includeQueryString,
            ImmutableArray<string> queryStringBlacklists,
            ImmutableArray<string> queryStringWhitelists)
        {
            IncludeHost = includeHost;
            IncludeProtocol = includeProtocol;
            IncludeQueryString = includeQueryString;
            QueryStringBlacklists = queryStringBlacklists;
            QueryStringWhitelists = queryStringWhitelists;
        }
    }

    [OutputType]
    public sealed class GetBackendServiceCdnPoliciesResult
    {
        public readonly ImmutableArray<GetBackendServiceCdnPoliciesCacheKeyPoliciesResult> CacheKeyPolicies;
        public readonly int SignedUrlCacheMaxAgeSec;

        [OutputConstructor]
        private GetBackendServiceCdnPoliciesResult(
            ImmutableArray<GetBackendServiceCdnPoliciesCacheKeyPoliciesResult> cacheKeyPolicies,
            int signedUrlCacheMaxAgeSec)
        {
            CacheKeyPolicies = cacheKeyPolicies;
            SignedUrlCacheMaxAgeSec = signedUrlCacheMaxAgeSec;
        }
    }

    [OutputType]
    public sealed class GetBackendServiceCircuitBreakersConnectTimeoutsResult
    {
        public readonly int Nanos;
        public readonly int Seconds;

        [OutputConstructor]
        private GetBackendServiceCircuitBreakersConnectTimeoutsResult(
            int nanos,
            int seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class GetBackendServiceCircuitBreakersResult
    {
        public readonly ImmutableArray<GetBackendServiceCircuitBreakersConnectTimeoutsResult> ConnectTimeouts;
        public readonly int MaxConnections;
        public readonly int MaxPendingRequests;
        public readonly int MaxRequests;
        public readonly int MaxRequestsPerConnection;
        public readonly int MaxRetries;

        [OutputConstructor]
        private GetBackendServiceCircuitBreakersResult(
            ImmutableArray<GetBackendServiceCircuitBreakersConnectTimeoutsResult> connectTimeouts,
            int maxConnections,
            int maxPendingRequests,
            int maxRequests,
            int maxRequestsPerConnection,
            int maxRetries)
        {
            ConnectTimeouts = connectTimeouts;
            MaxConnections = maxConnections;
            MaxPendingRequests = maxPendingRequests;
            MaxRequests = maxRequests;
            MaxRequestsPerConnection = maxRequestsPerConnection;
            MaxRetries = maxRetries;
        }
    }

    [OutputType]
    public sealed class GetBackendServiceConsistentHashHttpCookiesResult
    {
        /// <summary>
        /// The name of the Backend Service.
        /// </summary>
        public readonly string Name;
        public readonly string Path;
        public readonly ImmutableArray<GetBackendServiceConsistentHashHttpCookiesTtlsResult> Ttls;

        [OutputConstructor]
        private GetBackendServiceConsistentHashHttpCookiesResult(
            string name,
            string path,
            ImmutableArray<GetBackendServiceConsistentHashHttpCookiesTtlsResult> ttls)
        {
            Name = name;
            Path = path;
            Ttls = ttls;
        }
    }

    [OutputType]
    public sealed class GetBackendServiceConsistentHashHttpCookiesTtlsResult
    {
        public readonly int Nanos;
        public readonly int Seconds;

        [OutputConstructor]
        private GetBackendServiceConsistentHashHttpCookiesTtlsResult(
            int nanos,
            int seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class GetBackendServiceConsistentHashResult
    {
        public readonly ImmutableArray<GetBackendServiceConsistentHashHttpCookiesResult> HttpCookies;
        public readonly string HttpHeaderName;
        public readonly int MinimumRingSize;

        [OutputConstructor]
        private GetBackendServiceConsistentHashResult(
            ImmutableArray<GetBackendServiceConsistentHashHttpCookiesResult> httpCookies,
            string httpHeaderName,
            int minimumRingSize)
        {
            HttpCookies = httpCookies;
            HttpHeaderName = httpHeaderName;
            MinimumRingSize = minimumRingSize;
        }
    }

    [OutputType]
    public sealed class GetBackendServiceIapsResult
    {
        public readonly string Oauth2ClientId;
        public readonly string Oauth2ClientSecret;
        public readonly string Oauth2ClientSecretSha256;

        [OutputConstructor]
        private GetBackendServiceIapsResult(
            string oauth2ClientId,
            string oauth2ClientSecret,
            string oauth2ClientSecretSha256)
        {
            Oauth2ClientId = oauth2ClientId;
            Oauth2ClientSecret = oauth2ClientSecret;
            Oauth2ClientSecretSha256 = oauth2ClientSecretSha256;
        }
    }

    [OutputType]
    public sealed class GetBackendServiceLogConfigsResult
    {
        public readonly bool Enable;
        public readonly double SampleRate;

        [OutputConstructor]
        private GetBackendServiceLogConfigsResult(
            bool enable,
            double sampleRate)
        {
            Enable = enable;
            SampleRate = sampleRate;
        }
    }

    [OutputType]
    public sealed class GetBackendServiceOutlierDetectionsBaseEjectionTimesResult
    {
        public readonly int Nanos;
        public readonly int Seconds;

        [OutputConstructor]
        private GetBackendServiceOutlierDetectionsBaseEjectionTimesResult(
            int nanos,
            int seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class GetBackendServiceOutlierDetectionsIntervalsResult
    {
        public readonly int Nanos;
        public readonly int Seconds;

        [OutputConstructor]
        private GetBackendServiceOutlierDetectionsIntervalsResult(
            int nanos,
            int seconds)
        {
            Nanos = nanos;
            Seconds = seconds;
        }
    }

    [OutputType]
    public sealed class GetBackendServiceOutlierDetectionsResult
    {
        public readonly ImmutableArray<GetBackendServiceOutlierDetectionsBaseEjectionTimesResult> BaseEjectionTimes;
        public readonly int ConsecutiveErrors;
        public readonly int ConsecutiveGatewayFailure;
        public readonly int EnforcingConsecutiveErrors;
        public readonly int EnforcingConsecutiveGatewayFailure;
        public readonly int EnforcingSuccessRate;
        public readonly ImmutableArray<GetBackendServiceOutlierDetectionsIntervalsResult> Intervals;
        public readonly int MaxEjectionPercent;
        public readonly int SuccessRateMinimumHosts;
        public readonly int SuccessRateRequestVolume;
        public readonly int SuccessRateStdevFactor;

        [OutputConstructor]
        private GetBackendServiceOutlierDetectionsResult(
            ImmutableArray<GetBackendServiceOutlierDetectionsBaseEjectionTimesResult> baseEjectionTimes,
            int consecutiveErrors,
            int consecutiveGatewayFailure,
            int enforcingConsecutiveErrors,
            int enforcingConsecutiveGatewayFailure,
            int enforcingSuccessRate,
            ImmutableArray<GetBackendServiceOutlierDetectionsIntervalsResult> intervals,
            int maxEjectionPercent,
            int successRateMinimumHosts,
            int successRateRequestVolume,
            int successRateStdevFactor)
        {
            BaseEjectionTimes = baseEjectionTimes;
            ConsecutiveErrors = consecutiveErrors;
            ConsecutiveGatewayFailure = consecutiveGatewayFailure;
            EnforcingConsecutiveErrors = enforcingConsecutiveErrors;
            EnforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
            EnforcingSuccessRate = enforcingSuccessRate;
            Intervals = intervals;
            MaxEjectionPercent = maxEjectionPercent;
            SuccessRateMinimumHosts = successRateMinimumHosts;
            SuccessRateRequestVolume = successRateRequestVolume;
            SuccessRateStdevFactor = successRateStdevFactor;
        }
    }
    }
}
