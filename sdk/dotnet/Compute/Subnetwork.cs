// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// A VPC network is a virtual version of the traditional physical networks
    /// that exist within and between physical data centers. A VPC network
    /// provides connectivity for your Compute Engine virtual machine (VM)
    /// instances, Container Engine containers, App Engine Flex services, and
    /// other network-related resources.
    /// 
    /// Each GCP project contains one or more VPC networks. Each VPC network is a
    /// global entity spanning all GCP regions. This global VPC network allows VM
    /// instances and other resources to communicate with each other via internal,
    /// private IP addresses.
    /// 
    /// Each VPC network is subdivided into subnets, and each subnet is contained
    /// within a single region. You can have more than one subnet in a region for
    /// a given VPC network. Each subnet has a contiguous private RFC1918 IP
    /// space. You create instances, containers, and the like in these subnets.
    /// When you create an instance, you must create it in a subnet, and the
    /// instance draws its internal IP address from that subnet.
    /// 
    /// Virtual machine (VM) instances in a VPC network can communicate with
    /// instances in all other subnets of the same VPC network, regardless of
    /// region, using their RFC1918 private IP addresses. You can isolate portions
    /// of the network, even entire subnets, using firewall rules.
    /// 
    /// To get more information about Subnetwork, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks)
    /// * How-to Guides
    ///     * [Cloud Networking](https://cloud.google.com/vpc/docs/using-vpc)
    ///     * [Private Google Access](https://cloud.google.com/vpc/docs/configure-private-google-access)
    /// 
    /// ## Example Usage
    /// 
    /// ### Subnetwork Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var custom_test = new Gcp.Compute.Network("custom-test", new()
    ///     {
    ///         Name = "test-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var network_with_private_secondary_ip_ranges = new Gcp.Compute.Subnetwork("network-with-private-secondary-ip-ranges", new()
    ///     {
    ///         Name = "test-subnetwork",
    ///         IpCidrRange = "10.2.0.0/16",
    ///         Region = "us-central1",
    ///         Network = custom_test.Id,
    ///         SecondaryIpRanges = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.SubnetworkSecondaryIpRangeArgs
    ///             {
    ///                 RangeName = "tf-test-secondary-range-update1",
    ///                 IpCidrRange = "192.168.10.0/24",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Subnetwork Logging Config
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var custom_test = new Gcp.Compute.Network("custom-test", new()
    ///     {
    ///         Name = "log-test-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnet_with_logging = new Gcp.Compute.Subnetwork("subnet-with-logging", new()
    ///     {
    ///         Name = "log-test-subnetwork",
    ///         IpCidrRange = "10.2.0.0/16",
    ///         Region = "us-central1",
    ///         Network = custom_test.Id,
    ///         LogConfig = new Gcp.Compute.Inputs.SubnetworkLogConfigArgs
    ///         {
    ///             AggregationInterval = "INTERVAL_10_MIN",
    ///             FlowSampling = 0.5,
    ///             Metadata = "INCLUDE_ALL_METADATA",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Subnetwork Internal L7lb
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var custom_test = new Gcp.Compute.Network("custom-test", new()
    ///     {
    ///         Name = "l7lb-test-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var network_for_l7lb = new Gcp.Compute.Subnetwork("network-for-l7lb", new()
    ///     {
    ///         Name = "l7lb-test-subnetwork",
    ///         IpCidrRange = "10.0.0.0/22",
    ///         Region = "us-central1",
    ///         Purpose = "REGIONAL_MANAGED_PROXY",
    ///         Role = "ACTIVE",
    ///         Network = custom_test.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Subnetwork Ipv6
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var custom_test = new Gcp.Compute.Network("custom-test", new()
    ///     {
    ///         Name = "ipv6-test-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnetwork_ipv6 = new Gcp.Compute.Subnetwork("subnetwork-ipv6", new()
    ///     {
    ///         Name = "ipv6-test-subnetwork",
    ///         IpCidrRange = "10.0.0.0/22",
    ///         Region = "us-west2",
    ///         StackType = "IPV4_IPV6",
    ///         Ipv6AccessType = "EXTERNAL",
    ///         Network = custom_test.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Subnetwork Internal Ipv6
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var custom_test = new Gcp.Compute.Network("custom-test", new()
    ///     {
    ///         Name = "internal-ipv6-test-network",
    ///         AutoCreateSubnetworks = false,
    ///         EnableUlaInternalIpv6 = true,
    ///     });
    /// 
    ///     var subnetwork_internal_ipv6 = new Gcp.Compute.Subnetwork("subnetwork-internal-ipv6", new()
    ///     {
    ///         Name = "internal-ipv6-test-subnetwork",
    ///         IpCidrRange = "10.0.0.0/22",
    ///         Region = "us-west2",
    ///         StackType = "IPV4_IPV6",
    ///         Ipv6AccessType = "INTERNAL",
    ///         Network = custom_test.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Subnetwork Purpose Private Nat
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var custom_test = new Gcp.Compute.Network("custom-test", new()
    ///     {
    ///         Name = "subnet-purpose-test-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnetwork_purpose_private_nat = new Gcp.Compute.Subnetwork("subnetwork-purpose-private-nat", new()
    ///     {
    ///         Name = "subnet-purpose-test-subnetwork",
    ///         Region = "us-west2",
    ///         IpCidrRange = "192.168.1.0/24",
    ///         Purpose = "PRIVATE_NAT",
    ///         Network = custom_test.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Subnetwork Cidr Overlap
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net_cidr_overlap = new Gcp.Compute.Network("net-cidr-overlap", new()
    ///     {
    ///         Name = "net-cidr-overlap",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnetwork_cidr_overlap = new Gcp.Compute.Subnetwork("subnetwork-cidr-overlap", new()
    ///     {
    ///         Name = "subnet-cidr-overlap",
    ///         Region = "us-west2",
    ///         IpCidrRange = "192.168.1.0/24",
    ///         AllowSubnetCidrRoutesOverlap = true,
    ///         Network = net_cidr_overlap.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Subnetwork Reserved Internal Range
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "network-reserved-internal-range",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var reserved = new Gcp.NetworkConnectivity.InternalRange("reserved", new()
    ///     {
    ///         Name = "reserved",
    ///         Network = @default.Id,
    ///         Usage = "FOR_VPC",
    ///         Peering = "FOR_SELF",
    ///         PrefixLength = 24,
    ///         TargetCidrRanges = new[]
    ///         {
    ///             "10.0.0.0/8",
    ///         },
    ///     });
    /// 
    ///     var subnetwork_reserved_internal_range = new Gcp.Compute.Subnetwork("subnetwork-reserved-internal-range", new()
    ///     {
    ///         Name = "subnetwork-reserved-internal-range",
    ///         Region = "us-central1",
    ///         Network = @default.Id,
    ///         ReservedInternalRange = reserved.Id.Apply(id =&gt; $"networkconnectivity.googleapis.com/{id}"),
    ///     });
    /// 
    /// });
    /// ```
    /// ### Subnetwork Reserved Secondary Range
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "network-reserved-secondary-range",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var reserved = new Gcp.NetworkConnectivity.InternalRange("reserved", new()
    ///     {
    ///         Name = "reserved",
    ///         Network = @default.Id,
    ///         Usage = "FOR_VPC",
    ///         Peering = "FOR_SELF",
    ///         PrefixLength = 24,
    ///         TargetCidrRanges = new[]
    ///         {
    ///             "10.0.0.0/8",
    ///         },
    ///     });
    /// 
    ///     var reservedSecondary = new Gcp.NetworkConnectivity.InternalRange("reserved_secondary", new()
    ///     {
    ///         Name = "reserved-secondary",
    ///         Network = @default.Id,
    ///         Usage = "FOR_VPC",
    ///         Peering = "FOR_SELF",
    ///         PrefixLength = 16,
    ///         TargetCidrRanges = new[]
    ///         {
    ///             "10.0.0.0/8",
    ///         },
    ///     });
    /// 
    ///     var subnetwork_reserved_secondary_range = new Gcp.Compute.Subnetwork("subnetwork-reserved-secondary-range", new()
    ///     {
    ///         Name = "subnetwork-reserved-secondary-range",
    ///         Region = "us-central1",
    ///         Network = @default.Id,
    ///         ReservedInternalRange = reserved.Id.Apply(id =&gt; $"networkconnectivity.googleapis.com/{id}"),
    ///         SecondaryIpRanges = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.SubnetworkSecondaryIpRangeArgs
    ///             {
    ///                 RangeName = "secondary",
    ///                 ReservedInternalRange = reservedSecondary.Id.Apply(id =&gt; $"networkconnectivity.googleapis.com/{id}"),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Subnetwork can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/regions/{{region}}/subnetworks/{{name}}`
    /// 
    /// * `{{project}}/{{region}}/{{name}}`
    /// 
    /// * `{{region}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, Subnetwork can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/subnetwork:Subnetwork default projects/{{project}}/regions/{{region}}/subnetworks/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/subnetwork:Subnetwork default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/subnetwork:Subnetwork default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/subnetwork:Subnetwork default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/subnetwork:Subnetwork")]
    public partial class Subnetwork : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Typically packets destined to IPs within the subnetwork range that do not match
        /// existing resources are dropped and prevented from leaving the VPC.
        /// Setting this field to true will allow these packets to match dynamic routes injected
        /// via BGP even if their destinations match existing subnet ranges.
        /// </summary>
        [Output("allowSubnetCidrRoutesOverlap")]
        public Output<bool> AllowSubnetCidrRoutesOverlap { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource. Provide this property when
        /// you create the resource. This field can be set only at resource
        /// creation time.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The range of external IPv6 addresses that are owned by this subnetwork.
        /// </summary>
        [Output("externalIpv6Prefix")]
        public Output<string> ExternalIpv6Prefix { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource. This field is used internally during updates of this resource.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// The gateway address for default routes to reach destination addresses
        /// outside this subnetwork.
        /// </summary>
        [Output("gatewayAddress")]
        public Output<string> GatewayAddress { get; private set; } = null!;

        /// <summary>
        /// The internal IPv6 address range that is assigned to this subnetwork.
        /// </summary>
        [Output("internalIpv6Prefix")]
        public Output<string> InternalIpv6Prefix { get; private set; } = null!;

        /// <summary>
        /// The range of internal addresses that are owned by this subnetwork.
        /// Provide this property when you create the subnetwork. For example,
        /// 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
        /// non-overlapping within a network. Only IPv4 is supported.
        /// Field is optional when `reserved_internal_range` is defined, otherwise required.
        /// </summary>
        [Output("ipCidrRange")]
        public Output<string> IpCidrRange { get; private set; } = null!;

        /// <summary>
        /// The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation
        /// or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet
        /// cannot enable direct path.
        /// Possible values are: `EXTERNAL`, `INTERNAL`.
        /// </summary>
        [Output("ipv6AccessType")]
        public Output<string?> Ipv6AccessType { get; private set; } = null!;

        /// <summary>
        /// The range of internal IPv6 addresses that are owned by this subnetwork.
        /// </summary>
        [Output("ipv6CidrRange")]
        public Output<string> Ipv6CidrRange { get; private set; } = null!;

        /// <summary>
        /// This field denotes the VPC flow logging options for this subnetwork. If
        /// logging is enabled, logs are exported to Cloud Logging. Flow logging
        /// isn't supported if the subnet `purpose` field is set to subnetwork is
        /// `REGIONAL_MANAGED_PROXY` or `GLOBAL_MANAGED_PROXY`.
        /// Structure is documented below.
        /// </summary>
        [Output("logConfig")]
        public Output<Outputs.SubnetworkLogConfig?> LogConfig { get; private set; } = null!;

        /// <summary>
        /// The name of the resource, provided by the client when initially
        /// creating the resource. The name must be 1-63 characters long, and
        /// comply with RFC1035. Specifically, the name must be 1-63 characters
        /// long and match the regular expression `a-z?` which
        /// means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network this subnet belongs to.
        /// Only networks that are in the distributed mode can have subnetworks.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// When enabled, VMs in this subnetwork without external IP addresses can
        /// access Google APIs and services by using Private Google Access.
        /// </summary>
        [Output("privateIpGoogleAccess")]
        public Output<bool> PrivateIpGoogleAccess { get; private set; } = null!;

        /// <summary>
        /// The private IPv6 google access type for the VMs in this subnet.
        /// </summary>
        [Output("privateIpv6GoogleAccess")]
        public Output<string> PrivateIpv6GoogleAccess { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The purpose of the resource. This field can be either `PRIVATE_RFC_1918`, `REGIONAL_MANAGED_PROXY`, `GLOBAL_MANAGED_PROXY`, `PRIVATE_SERVICE_CONNECT` or `PRIVATE_NAT`.
        /// A subnet with purpose set to `REGIONAL_MANAGED_PROXY` is a user-created subnetwork that is reserved for regional Envoy-based load balancers.
        /// A subnetwork in a given region with purpose set to `GLOBAL_MANAGED_PROXY` is a proxy-only subnet and is shared between all the cross-regional Envoy-based load balancers.
        /// A subnetwork with purpose set to `PRIVATE_SERVICE_CONNECT` reserves the subnet for hosting a Private Service Connect published service.
        /// A subnetwork with purpose set to `PRIVATE_NAT` is used as source range for Private NAT gateways.
        /// Note that `REGIONAL_MANAGED_PROXY` is the preferred setting for all regional Envoy load balancers.
        /// If unspecified, the purpose defaults to `PRIVATE_RFC_1918`.
        /// </summary>
        [Output("purpose")]
        public Output<string> Purpose { get; private set; } = null!;

        /// <summary>
        /// The GCP region for this subnetwork.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The ID of the reserved internal range. Must be prefixed with `networkconnectivity.googleapis.com`
        /// E.g. `networkconnectivity.googleapis.com/projects/{project}/locations/global/internalRanges/{rangeId}`
        /// </summary>
        [Output("reservedInternalRange")]
        public Output<string?> ReservedInternalRange { get; private set; } = null!;

        /// <summary>
        /// The role of subnetwork.
        /// Currently, this field is only used when `purpose` is `REGIONAL_MANAGED_PROXY`.
        /// The value can be set to `ACTIVE` or `BACKUP`.
        /// An `ACTIVE` subnetwork is one that is currently being used for Envoy-based load balancers in a region.
        /// A `BACKUP` subnetwork is one that is ready to be promoted to `ACTIVE` or is currently draining.
        /// Possible values are: `ACTIVE`, `BACKUP`.
        /// </summary>
        [Output("role")]
        public Output<string?> Role { get; private set; } = null!;

        /// <summary>
        /// An array of configurations for secondary IP ranges for VM instances
        /// contained in this subnetwork. The primary IP of such VM must belong
        /// to the primary ipCidrRange of the subnetwork. The alias IPs may belong
        /// to either primary or secondary ranges.
        /// Structure is documented below.
        /// </summary>
        [Output("secondaryIpRanges")]
        public Output<ImmutableArray<Outputs.SubnetworkSecondaryIpRange>> SecondaryIpRanges { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Controls the removal behavior of secondary_ip_range.
        /// When false, removing secondary_ip_range from config will not produce a diff as
        /// the provider will default to the API's value.
        /// When true, the provider will treat removing secondary_ip_range as sending an
        /// empty list of secondary IP ranges to the API.
        /// Defaults to false.
        /// </summary>
        [Output("sendSecondaryIpRangeIfEmpty")]
        public Output<bool?> SendSecondaryIpRangeIfEmpty { get; private set; } = null!;

        /// <summary>
        /// The stack type for this subnet to identify whether the IPv6 feature is enabled or not.
        /// If not specified IPV4_ONLY will be used.
        /// Possible values are: `IPV4_ONLY`, `IPV4_IPV6`.
        /// </summary>
        [Output("stackType")]
        public Output<string> StackType { get; private set; } = null!;


        /// <summary>
        /// Create a Subnetwork resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subnetwork(string name, SubnetworkArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/subnetwork:Subnetwork", name, args ?? new SubnetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Subnetwork(string name, Input<string> id, SubnetworkState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/subnetwork:Subnetwork", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subnetwork resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subnetwork Get(string name, Input<string> id, SubnetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new Subnetwork(name, id, state, options);
        }
    }

    public sealed class SubnetworkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Typically packets destined to IPs within the subnetwork range that do not match
        /// existing resources are dropped and prevented from leaving the VPC.
        /// Setting this field to true will allow these packets to match dynamic routes injected
        /// via BGP even if their destinations match existing subnet ranges.
        /// </summary>
        [Input("allowSubnetCidrRoutesOverlap")]
        public Input<bool>? AllowSubnetCidrRoutesOverlap { get; set; }

        /// <summary>
        /// An optional description of this resource. Provide this property when
        /// you create the resource. This field can be set only at resource
        /// creation time.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The range of external IPv6 addresses that are owned by this subnetwork.
        /// </summary>
        [Input("externalIpv6Prefix")]
        public Input<string>? ExternalIpv6Prefix { get; set; }

        /// <summary>
        /// The range of internal addresses that are owned by this subnetwork.
        /// Provide this property when you create the subnetwork. For example,
        /// 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
        /// non-overlapping within a network. Only IPv4 is supported.
        /// Field is optional when `reserved_internal_range` is defined, otherwise required.
        /// </summary>
        [Input("ipCidrRange")]
        public Input<string>? IpCidrRange { get; set; }

        /// <summary>
        /// The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation
        /// or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet
        /// cannot enable direct path.
        /// Possible values are: `EXTERNAL`, `INTERNAL`.
        /// </summary>
        [Input("ipv6AccessType")]
        public Input<string>? Ipv6AccessType { get; set; }

        /// <summary>
        /// This field denotes the VPC flow logging options for this subnetwork. If
        /// logging is enabled, logs are exported to Cloud Logging. Flow logging
        /// isn't supported if the subnet `purpose` field is set to subnetwork is
        /// `REGIONAL_MANAGED_PROXY` or `GLOBAL_MANAGED_PROXY`.
        /// Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.SubnetworkLogConfigArgs>? LogConfig { get; set; }

        /// <summary>
        /// The name of the resource, provided by the client when initially
        /// creating the resource. The name must be 1-63 characters long, and
        /// comply with RFC1035. Specifically, the name must be 1-63 characters
        /// long and match the regular expression `a-z?` which
        /// means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network this subnet belongs to.
        /// Only networks that are in the distributed mode can have subnetworks.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// When enabled, VMs in this subnetwork without external IP addresses can
        /// access Google APIs and services by using Private Google Access.
        /// </summary>
        [Input("privateIpGoogleAccess")]
        public Input<bool>? PrivateIpGoogleAccess { get; set; }

        /// <summary>
        /// The private IPv6 google access type for the VMs in this subnet.
        /// </summary>
        [Input("privateIpv6GoogleAccess")]
        public Input<string>? PrivateIpv6GoogleAccess { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The purpose of the resource. This field can be either `PRIVATE_RFC_1918`, `REGIONAL_MANAGED_PROXY`, `GLOBAL_MANAGED_PROXY`, `PRIVATE_SERVICE_CONNECT` or `PRIVATE_NAT`.
        /// A subnet with purpose set to `REGIONAL_MANAGED_PROXY` is a user-created subnetwork that is reserved for regional Envoy-based load balancers.
        /// A subnetwork in a given region with purpose set to `GLOBAL_MANAGED_PROXY` is a proxy-only subnet and is shared between all the cross-regional Envoy-based load balancers.
        /// A subnetwork with purpose set to `PRIVATE_SERVICE_CONNECT` reserves the subnet for hosting a Private Service Connect published service.
        /// A subnetwork with purpose set to `PRIVATE_NAT` is used as source range for Private NAT gateways.
        /// Note that `REGIONAL_MANAGED_PROXY` is the preferred setting for all regional Envoy load balancers.
        /// If unspecified, the purpose defaults to `PRIVATE_RFC_1918`.
        /// </summary>
        [Input("purpose")]
        public Input<string>? Purpose { get; set; }

        /// <summary>
        /// The GCP region for this subnetwork.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The ID of the reserved internal range. Must be prefixed with `networkconnectivity.googleapis.com`
        /// E.g. `networkconnectivity.googleapis.com/projects/{project}/locations/global/internalRanges/{rangeId}`
        /// </summary>
        [Input("reservedInternalRange")]
        public Input<string>? ReservedInternalRange { get; set; }

        /// <summary>
        /// The role of subnetwork.
        /// Currently, this field is only used when `purpose` is `REGIONAL_MANAGED_PROXY`.
        /// The value can be set to `ACTIVE` or `BACKUP`.
        /// An `ACTIVE` subnetwork is one that is currently being used for Envoy-based load balancers in a region.
        /// A `BACKUP` subnetwork is one that is ready to be promoted to `ACTIVE` or is currently draining.
        /// Possible values are: `ACTIVE`, `BACKUP`.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("secondaryIpRanges")]
        private InputList<Inputs.SubnetworkSecondaryIpRangeArgs>? _secondaryIpRanges;

        /// <summary>
        /// An array of configurations for secondary IP ranges for VM instances
        /// contained in this subnetwork. The primary IP of such VM must belong
        /// to the primary ipCidrRange of the subnetwork. The alias IPs may belong
        /// to either primary or secondary ranges.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.SubnetworkSecondaryIpRangeArgs> SecondaryIpRanges
        {
            get => _secondaryIpRanges ?? (_secondaryIpRanges = new InputList<Inputs.SubnetworkSecondaryIpRangeArgs>());
            set => _secondaryIpRanges = value;
        }

        /// <summary>
        /// Controls the removal behavior of secondary_ip_range.
        /// When false, removing secondary_ip_range from config will not produce a diff as
        /// the provider will default to the API's value.
        /// When true, the provider will treat removing secondary_ip_range as sending an
        /// empty list of secondary IP ranges to the API.
        /// Defaults to false.
        /// </summary>
        [Input("sendSecondaryIpRangeIfEmpty")]
        public Input<bool>? SendSecondaryIpRangeIfEmpty { get; set; }

        /// <summary>
        /// The stack type for this subnet to identify whether the IPv6 feature is enabled or not.
        /// If not specified IPV4_ONLY will be used.
        /// Possible values are: `IPV4_ONLY`, `IPV4_IPV6`.
        /// </summary>
        [Input("stackType")]
        public Input<string>? StackType { get; set; }

        public SubnetworkArgs()
        {
        }
        public static new SubnetworkArgs Empty => new SubnetworkArgs();
    }

    public sealed class SubnetworkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Typically packets destined to IPs within the subnetwork range that do not match
        /// existing resources are dropped and prevented from leaving the VPC.
        /// Setting this field to true will allow these packets to match dynamic routes injected
        /// via BGP even if their destinations match existing subnet ranges.
        /// </summary>
        [Input("allowSubnetCidrRoutesOverlap")]
        public Input<bool>? AllowSubnetCidrRoutesOverlap { get; set; }

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// An optional description of this resource. Provide this property when
        /// you create the resource. This field can be set only at resource
        /// creation time.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The range of external IPv6 addresses that are owned by this subnetwork.
        /// </summary>
        [Input("externalIpv6Prefix")]
        public Input<string>? ExternalIpv6Prefix { get; set; }

        /// <summary>
        /// Fingerprint of this resource. This field is used internally during updates of this resource.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// The gateway address for default routes to reach destination addresses
        /// outside this subnetwork.
        /// </summary>
        [Input("gatewayAddress")]
        public Input<string>? GatewayAddress { get; set; }

        /// <summary>
        /// The internal IPv6 address range that is assigned to this subnetwork.
        /// </summary>
        [Input("internalIpv6Prefix")]
        public Input<string>? InternalIpv6Prefix { get; set; }

        /// <summary>
        /// The range of internal addresses that are owned by this subnetwork.
        /// Provide this property when you create the subnetwork. For example,
        /// 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
        /// non-overlapping within a network. Only IPv4 is supported.
        /// Field is optional when `reserved_internal_range` is defined, otherwise required.
        /// </summary>
        [Input("ipCidrRange")]
        public Input<string>? IpCidrRange { get; set; }

        /// <summary>
        /// The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation
        /// or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet
        /// cannot enable direct path.
        /// Possible values are: `EXTERNAL`, `INTERNAL`.
        /// </summary>
        [Input("ipv6AccessType")]
        public Input<string>? Ipv6AccessType { get; set; }

        /// <summary>
        /// The range of internal IPv6 addresses that are owned by this subnetwork.
        /// </summary>
        [Input("ipv6CidrRange")]
        public Input<string>? Ipv6CidrRange { get; set; }

        /// <summary>
        /// This field denotes the VPC flow logging options for this subnetwork. If
        /// logging is enabled, logs are exported to Cloud Logging. Flow logging
        /// isn't supported if the subnet `purpose` field is set to subnetwork is
        /// `REGIONAL_MANAGED_PROXY` or `GLOBAL_MANAGED_PROXY`.
        /// Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.SubnetworkLogConfigGetArgs>? LogConfig { get; set; }

        /// <summary>
        /// The name of the resource, provided by the client when initially
        /// creating the resource. The name must be 1-63 characters long, and
        /// comply with RFC1035. Specifically, the name must be 1-63 characters
        /// long and match the regular expression `a-z?` which
        /// means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network this subnet belongs to.
        /// Only networks that are in the distributed mode can have subnetworks.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// When enabled, VMs in this subnetwork without external IP addresses can
        /// access Google APIs and services by using Private Google Access.
        /// </summary>
        [Input("privateIpGoogleAccess")]
        public Input<bool>? PrivateIpGoogleAccess { get; set; }

        /// <summary>
        /// The private IPv6 google access type for the VMs in this subnet.
        /// </summary>
        [Input("privateIpv6GoogleAccess")]
        public Input<string>? PrivateIpv6GoogleAccess { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The purpose of the resource. This field can be either `PRIVATE_RFC_1918`, `REGIONAL_MANAGED_PROXY`, `GLOBAL_MANAGED_PROXY`, `PRIVATE_SERVICE_CONNECT` or `PRIVATE_NAT`.
        /// A subnet with purpose set to `REGIONAL_MANAGED_PROXY` is a user-created subnetwork that is reserved for regional Envoy-based load balancers.
        /// A subnetwork in a given region with purpose set to `GLOBAL_MANAGED_PROXY` is a proxy-only subnet and is shared between all the cross-regional Envoy-based load balancers.
        /// A subnetwork with purpose set to `PRIVATE_SERVICE_CONNECT` reserves the subnet for hosting a Private Service Connect published service.
        /// A subnetwork with purpose set to `PRIVATE_NAT` is used as source range for Private NAT gateways.
        /// Note that `REGIONAL_MANAGED_PROXY` is the preferred setting for all regional Envoy load balancers.
        /// If unspecified, the purpose defaults to `PRIVATE_RFC_1918`.
        /// </summary>
        [Input("purpose")]
        public Input<string>? Purpose { get; set; }

        /// <summary>
        /// The GCP region for this subnetwork.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The ID of the reserved internal range. Must be prefixed with `networkconnectivity.googleapis.com`
        /// E.g. `networkconnectivity.googleapis.com/projects/{project}/locations/global/internalRanges/{rangeId}`
        /// </summary>
        [Input("reservedInternalRange")]
        public Input<string>? ReservedInternalRange { get; set; }

        /// <summary>
        /// The role of subnetwork.
        /// Currently, this field is only used when `purpose` is `REGIONAL_MANAGED_PROXY`.
        /// The value can be set to `ACTIVE` or `BACKUP`.
        /// An `ACTIVE` subnetwork is one that is currently being used for Envoy-based load balancers in a region.
        /// A `BACKUP` subnetwork is one that is ready to be promoted to `ACTIVE` or is currently draining.
        /// Possible values are: `ACTIVE`, `BACKUP`.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("secondaryIpRanges")]
        private InputList<Inputs.SubnetworkSecondaryIpRangeGetArgs>? _secondaryIpRanges;

        /// <summary>
        /// An array of configurations for secondary IP ranges for VM instances
        /// contained in this subnetwork. The primary IP of such VM must belong
        /// to the primary ipCidrRange of the subnetwork. The alias IPs may belong
        /// to either primary or secondary ranges.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.SubnetworkSecondaryIpRangeGetArgs> SecondaryIpRanges
        {
            get => _secondaryIpRanges ?? (_secondaryIpRanges = new InputList<Inputs.SubnetworkSecondaryIpRangeGetArgs>());
            set => _secondaryIpRanges = value;
        }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// Controls the removal behavior of secondary_ip_range.
        /// When false, removing secondary_ip_range from config will not produce a diff as
        /// the provider will default to the API's value.
        /// When true, the provider will treat removing secondary_ip_range as sending an
        /// empty list of secondary IP ranges to the API.
        /// Defaults to false.
        /// </summary>
        [Input("sendSecondaryIpRangeIfEmpty")]
        public Input<bool>? SendSecondaryIpRangeIfEmpty { get; set; }

        /// <summary>
        /// The stack type for this subnet to identify whether the IPv6 feature is enabled or not.
        /// If not specified IPV4_ONLY will be used.
        /// Possible values are: `IPV4_ONLY`, `IPV4_IPV6`.
        /// </summary>
        [Input("stackType")]
        public Input<string>? StackType { get; set; }

        public SubnetworkState()
        {
        }
        public static new SubnetworkState Empty => new SubnetworkState();
    }
}
