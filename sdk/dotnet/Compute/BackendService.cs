// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// A Backend Service defines a group of virtual machines that will serve
    /// traffic for load balancing. This resource is a global backend service,
    /// appropriate for external load balancing or self-managed internal load balancing.
    /// For managed internal load balancing, use a regional backend service instead.
    /// 
    /// Currently self-managed internal load balancing is only available in beta.
    /// 
    /// To get more information about BackendService, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/v1/backendServices)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/compute/docs/load-balancing/http/backend-service)
    /// 
    /// &gt; **Warning:** All arguments including the following potentially sensitive
    /// values will be stored in the raw state as plain text: `iap.oauth2_client_secret`, `iap.oauth2_client_secret_sha256`, `security_settings.aws_v4_authentication.access_key`.
    /// 
    /// ## Example Usage
    /// 
    /// ### Backend Service Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service External Iap
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "tf-test-backend-service-external",
    ///         Protocol = "HTTP",
    ///         LoadBalancingScheme = "EXTERNAL",
    ///         Iap = new Gcp.Compute.Inputs.BackendServiceIapArgs
    ///         {
    ///             Enabled = true,
    ///             Oauth2ClientId = "abc",
    ///             Oauth2ClientSecret = "xyz",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Cache Simple
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///         EnableCdn = true,
    ///         CdnPolicy = new Gcp.Compute.Inputs.BackendServiceCdnPolicyArgs
    ///         {
    ///             SignedUrlCacheMaxAgeSec = 7200,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Cache Include Http Headers
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         EnableCdn = true,
    ///         CdnPolicy = new Gcp.Compute.Inputs.BackendServiceCdnPolicyArgs
    ///         {
    ///             CacheMode = "USE_ORIGIN_HEADERS",
    ///             CacheKeyPolicy = new Gcp.Compute.Inputs.BackendServiceCdnPolicyCacheKeyPolicyArgs
    ///             {
    ///                 IncludeHost = true,
    ///                 IncludeProtocol = true,
    ///                 IncludeQueryString = true,
    ///                 IncludeHttpHeaders = new[]
    ///                 {
    ///                     "X-My-Header-Field",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Cache Include Named Cookies
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         EnableCdn = true,
    ///         CdnPolicy = new Gcp.Compute.Inputs.BackendServiceCdnPolicyArgs
    ///         {
    ///             CacheMode = "CACHE_ALL_STATIC",
    ///             DefaultTtl = 3600,
    ///             ClientTtl = 7200,
    ///             MaxTtl = 10800,
    ///             CacheKeyPolicy = new Gcp.Compute.Inputs.BackendServiceCdnPolicyCacheKeyPolicyArgs
    ///             {
    ///                 IncludeHost = true,
    ///                 IncludeProtocol = true,
    ///                 IncludeQueryString = true,
    ///                 IncludeNamedCookies = new[]
    ///                 {
    ///                     "__next_preview_data",
    ///                     "__prerender_bypass",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Cache
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///         EnableCdn = true,
    ///         CdnPolicy = new Gcp.Compute.Inputs.BackendServiceCdnPolicyArgs
    ///         {
    ///             CacheMode = "CACHE_ALL_STATIC",
    ///             DefaultTtl = 3600,
    ///             ClientTtl = 7200,
    ///             MaxTtl = 10800,
    ///             NegativeCaching = true,
    ///             SignedUrlCacheMaxAgeSec = 7200,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Cache Bypass Cache On Request Headers
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         RequestPath = "/",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         HealthChecks = defaultHttpHealthCheck.Id,
    ///         EnableCdn = true,
    ///         CdnPolicy = new Gcp.Compute.Inputs.BackendServiceCdnPolicyArgs
    ///         {
    ///             CacheMode = "CACHE_ALL_STATIC",
    ///             DefaultTtl = 3600,
    ///             ClientTtl = 7200,
    ///             MaxTtl = 10800,
    ///             NegativeCaching = true,
    ///             SignedUrlCacheMaxAgeSec = 7200,
    ///             BypassCacheOnRequestHeaders = new[]
    ///             {
    ///                 new Gcp.Compute.Inputs.BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs
    ///                 {
    ///                     HeaderName = "Authorization",
    ///                 },
    ///                 new Gcp.Compute.Inputs.BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs
    ///                 {
    ///                     HeaderName = "Proxy-Authorization",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Traffic Director Round Robin
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var healthCheck = new Gcp.Compute.HealthCheck("health_check", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         HealthChecks = healthCheck.Id,
    ///         LoadBalancingScheme = "INTERNAL_SELF_MANAGED",
    ///         LocalityLbPolicy = "ROUND_ROBIN",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Traffic Director Ring Hash
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var healthCheck = new Gcp.Compute.HealthCheck("health_check", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         HealthChecks = healthCheck.Id,
    ///         LoadBalancingScheme = "INTERNAL_SELF_MANAGED",
    ///         LocalityLbPolicy = "RING_HASH",
    ///         SessionAffinity = "HTTP_COOKIE",
    ///         CircuitBreakers = new Gcp.Compute.Inputs.BackendServiceCircuitBreakersArgs
    ///         {
    ///             MaxConnections = 10,
    ///         },
    ///         ConsistentHash = new Gcp.Compute.Inputs.BackendServiceConsistentHashArgs
    ///         {
    ///             HttpCookie = new Gcp.Compute.Inputs.BackendServiceConsistentHashHttpCookieArgs
    ///             {
    ///                 Ttl = new Gcp.Compute.Inputs.BackendServiceConsistentHashHttpCookieTtlArgs
    ///                 {
    ///                     Seconds = 11,
    ///                     Nanos = 1111,
    ///                 },
    ///                 Name = "mycookie",
    ///             },
    ///         },
    ///         OutlierDetection = new Gcp.Compute.Inputs.BackendServiceOutlierDetectionArgs
    ///         {
    ///             ConsecutiveErrors = 2,
    ///             ConsecutiveGatewayFailure = 5,
    ///             EnforcingConsecutiveErrors = 100,
    ///             EnforcingConsecutiveGatewayFailure = 0,
    ///             EnforcingSuccessRate = 100,
    ///             MaxEjectionPercent = 10,
    ///             SuccessRateMinimumHosts = 5,
    ///             SuccessRateRequestVolume = 100,
    ///             SuccessRateStdevFactor = 1900,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Stateful Session Affinity
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var healthCheck = new Gcp.Compute.HealthCheck("health_check", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         HealthChecks = healthCheck.Id,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///         LocalityLbPolicy = "RING_HASH",
    ///         SessionAffinity = "STRONG_COOKIE_AFFINITY",
    ///         StrongSessionAffinityCookie = new Gcp.Compute.Inputs.BackendServiceStrongSessionAffinityCookieArgs
    ///         {
    ///             Ttl = new Gcp.Compute.Inputs.BackendServiceStrongSessionAffinityCookieTtlArgs
    ///             {
    ///                 Seconds = 11,
    ///                 Nanos = 1111,
    ///             },
    ///             Name = "mycookie",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Network Endpoint
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var externalProxy = new Gcp.Compute.GlobalNetworkEndpointGroup("external_proxy", new()
    ///     {
    ///         Name = "network-endpoint",
    ///         NetworkEndpointType = "INTERNET_FQDN_PORT",
    ///         DefaultPort = 443,
    ///     });
    /// 
    ///     var proxy = new Gcp.Compute.GlobalNetworkEndpoint("proxy", new()
    ///     {
    ///         GlobalNetworkEndpointGroup = externalProxy.Id,
    ///         Fqdn = "test.example.com",
    ///         Port = externalProxy.DefaultPort,
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         EnableCdn = true,
    ///         TimeoutSec = 10,
    ///         ConnectionDrainingTimeoutSec = 10,
    ///         CustomRequestHeaders = new[]
    ///         {
    ///             proxy.Fqdn.Apply(fqdn =&gt; $"host: {fqdn}"),
    ///         },
    ///         CustomResponseHeaders = new[]
    ///         {
    ///             "X-Cache-Hit: {cdn_cache_status}",
    ///         },
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.BackendServiceBackendArgs
    ///             {
    ///                 Group = externalProxy.Id,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service External Managed
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHealthCheck = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         HealthChecks = defaultHealthCheck.Id,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Ip Address Selection Policy
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///         IpAddressSelectionPolicy = "IPV6_ONLY",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Custom Metrics
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "network",
    ///     });
    /// 
    ///     // Zonal NEG with GCE_VM_IP_PORT
    ///     var defaultNetworkEndpointGroup = new Gcp.Compute.NetworkEndpointGroup("default", new()
    ///     {
    ///         Name = "network-endpoint",
    ///         Network = @default.Id,
    ///         DefaultPort = 90,
    ///         Zone = "us-central1-a",
    ///         NetworkEndpointType = "GCE_VM_IP_PORT",
    ///     });
    /// 
    ///     var defaultHealthCheck = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         TimeoutSec = 1,
    ///         CheckIntervalSec = 1,
    ///         TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var defaultBackendService = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         HealthChecks = defaultHealthCheck.Id,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///         LocalityLbPolicy = "WEIGHTED_ROUND_ROBIN",
    ///         CustomMetrics = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.BackendServiceCustomMetricArgs
    ///             {
    ///                 Name = "orca.application_utilization",
    ///                 DryRun = false,
    ///             },
    ///         },
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.BackendServiceBackendArgs
    ///             {
    ///                 Group = defaultNetworkEndpointGroup.Id,
    ///                 BalancingMode = "CUSTOM_METRICS",
    ///                 CustomMetrics = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.BackendServiceBackendCustomMetricArgs
    ///                     {
    ///                         Name = "orca.cpu_utilization",
    ///                         MaxUtilization = 0.9,
    ///                         DryRun = true,
    ///                     },
    ///                     new Gcp.Compute.Inputs.BackendServiceBackendCustomMetricArgs
    ///                     {
    ///                         Name = "orca.named_metrics.foo",
    ///                         DryRun = false,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Tls Settings
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHealthCheck = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var defaultBackendAuthenticationConfig = new Gcp.NetworkSecurity.BackendAuthenticationConfig("default", new()
    ///     {
    ///         Name = "authentication",
    ///         WellKnownRoots = "PUBLIC_ROOTS",
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         HealthChecks = defaultHealthCheck.Id,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///         Protocol = "HTTPS",
    ///         TlsSettings = new Gcp.Compute.Inputs.BackendServiceTlsSettingsArgs
    ///         {
    ///             Sni = "example.com",
    ///             SubjectAltNames = new[]
    ///             {
    ///                 new Gcp.Compute.Inputs.BackendServiceTlsSettingsSubjectAltNameArgs
    ///                 {
    ///                     DnsName = "example.com",
    ///                 },
    ///                 new Gcp.Compute.Inputs.BackendServiceTlsSettingsSubjectAltNameArgs
    ///                 {
    ///                     UniformResourceIdentifier = "https://example.com",
    ///                 },
    ///             },
    ///             AuthenticationConfig = defaultBackendAuthenticationConfig.Id.Apply(id =&gt; $"//networksecurity.googleapis.com/{id}"),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// BackendService can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/global/backendServices/{{name}}`
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, BackendService can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/backendService:BackendService default projects/{{project}}/global/backendServices/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/backendService:BackendService default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/backendService:BackendService default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/backendService:BackendService")]
    public partial class BackendService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Lifetime of cookies in seconds if session_affinity is
        /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
        /// only until the end of the browser session (or equivalent). The
        /// maximum allowed value for TTL is one day.
        /// When the load balancing scheme is INTERNAL, this field is not used.
        /// </summary>
        [Output("affinityCookieTtlSec")]
        public Output<int?> AffinityCookieTtlSec { get; private set; } = null!;

        /// <summary>
        /// The set of backends that serve this BackendService.
        /// Structure is documented below.
        /// </summary>
        [Output("backends")]
        public Output<ImmutableArray<Outputs.BackendServiceBackend>> Backends { get; private set; } = null!;

        /// <summary>
        /// Cloud CDN configuration for this BackendService.
        /// Structure is documented below.
        /// </summary>
        [Output("cdnPolicy")]
        public Output<Outputs.BackendServiceCdnPolicy> CdnPolicy { get; private set; } = null!;

        /// <summary>
        /// Settings controlling the volume of connections to a backend service. This field
        /// is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Output("circuitBreakers")]
        public Output<Outputs.BackendServiceCircuitBreakers?> CircuitBreakers { get; private set; } = null!;

        /// <summary>
        /// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
        /// Possible values are: `AUTOMATIC`, `DISABLED`.
        /// </summary>
        [Output("compressionMode")]
        public Output<string?> CompressionMode { get; private set; } = null!;

        /// <summary>
        /// Time for which instance will be drained (not accept new
        /// connections, but still work to finish started).
        /// </summary>
        [Output("connectionDrainingTimeoutSec")]
        public Output<int?> ConnectionDrainingTimeoutSec { get; private set; } = null!;

        /// <summary>
        /// Consistent Hash-based load balancing can be used to provide soft session
        /// affinity based on HTTP headers, cookies or other properties. This load balancing
        /// policy is applicable only for HTTP connections. The affinity to a particular
        /// destination host will be lost when one or more hosts are added/removed from the
        /// destination service. This field specifies parameters that control consistent
        /// hashing. This field only applies if the load_balancing_scheme is set to
        /// INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
        /// set to MAGLEV or RING_HASH.
        /// Structure is documented below.
        /// </summary>
        [Output("consistentHash")]
        public Output<Outputs.BackendServiceConsistentHash?> ConsistentHash { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// List of custom metrics that are used for the WEIGHTED_ROUND_ROBIN locality_lb_policy.
        /// Structure is documented below.
        /// </summary>
        [Output("customMetrics")]
        public Output<ImmutableArray<Outputs.BackendServiceCustomMetric>> CustomMetrics { get; private set; } = null!;

        /// <summary>
        /// Headers that the HTTP/S load balancer should add to proxied
        /// requests.
        /// </summary>
        [Output("customRequestHeaders")]
        public Output<ImmutableArray<string>> CustomRequestHeaders { get; private set; } = null!;

        /// <summary>
        /// Headers that the HTTP/S load balancer should add to proxied
        /// responses.
        /// </summary>
        [Output("customResponseHeaders")]
        public Output<ImmutableArray<string>> CustomResponseHeaders { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The resource URL for the edge security policy associated with this backend service.
        /// </summary>
        [Output("edgeSecurityPolicy")]
        public Output<string?> EdgeSecurityPolicy { get; private set; } = null!;

        /// <summary>
        /// If true, enable Cloud CDN for this BackendService.
        /// </summary>
        [Output("enableCdn")]
        public Output<bool?> EnableCdn { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this
        /// object. This field is used in optimistic locking.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the resource. This identifier is defined by the server.
        /// </summary>
        [Output("generatedId")]
        public Output<int> GeneratedId { get; private set; } = null!;

        /// <summary>
        /// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
        /// for health checking this BackendService. Currently at most one health
        /// check can be specified.
        /// A health check must be specified unless the backend service uses an internet
        /// or serverless NEG as a backend.
        /// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
        /// </summary>
        [Output("healthChecks")]
        public Output<string?> HealthChecks { get; private set; } = null!;

        /// <summary>
        /// Settings for enabling Cloud Identity Aware Proxy.
        /// If OAuth client is not set, the Google-managed OAuth client is used.
        /// Structure is documented below.
        /// </summary>
        [Output("iap")]
        public Output<Outputs.BackendServiceIap> Iap { get; private set; } = null!;

        /// <summary>
        /// Specifies preference of traffic to the backend (from the proxy and from the client for proxyless gRPC).
        /// Possible values are: `IPV4_ONLY`, `PREFER_IPV6`, `IPV6_ONLY`.
        /// </summary>
        [Output("ipAddressSelectionPolicy")]
        public Output<string?> IpAddressSelectionPolicy { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the backend service will be used with internal or
        /// external load balancing. A backend service created for one type of
        /// load balancing cannot be used with the other. For more information, refer to
        /// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
        /// Default value is `EXTERNAL`.
        /// Possible values are: `EXTERNAL`, `INTERNAL_SELF_MANAGED`, `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
        /// </summary>
        [Output("loadBalancingScheme")]
        public Output<string?> LoadBalancingScheme { get; private set; } = null!;

        /// <summary>
        /// A list of locality load balancing policies to be used in order of
        /// preference. Either the policy or the customPolicy field should be set.
        /// Overrides any value set in the localityLbPolicy field.
        /// localityLbPolicies is only supported when the BackendService is referenced
        /// by a URL Map that is referenced by a target gRPC proxy that has the
        /// validateForProxyless field set to true.
        /// Structure is documented below.
        /// </summary>
        [Output("localityLbPolicies")]
        public Output<ImmutableArray<Outputs.BackendServiceLocalityLbPolicy>> LocalityLbPolicies { get; private set; } = null!;

        /// <summary>
        /// The load balancing algorithm used within the scope of the locality.
        /// The possible values are:
        /// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
        /// is selected in round robin order.
        /// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
        /// hosts and picks the host which has fewer active requests.
        /// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
        /// hashing to backends. The algorithm has the property that the
        /// addition/removal of a host from a set of N hosts only affects
        /// 1/N of the requests.
        /// * `RANDOM`: The load balancer selects a random healthy host.
        /// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
        /// connection metadata, i.e., connections are opened
        /// to the same address as the destination address of
        /// the incoming connection before the connection
        /// was redirected to the load balancer.
        /// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
        /// Maglev is not as stable as ring hash but has faster table lookup
        /// build times and host selection times. For more information about
        /// Maglev, refer to https://ai.google/research/pubs/pub44824
        /// * `WEIGHTED_MAGLEV`: Per-instance weighted Load Balancing via health check
        /// reported weights. Only applicable to loadBalancingScheme
        /// EXTERNAL. If set, the Backend Service must
        /// configure a non legacy HTTP-based Health Check, and
        /// health check replies are expected to contain
        /// non-standard HTTP response header field
        /// X-Load-Balancing-Endpoint-Weight to specify the
        /// per-instance weights. If set, Load Balancing is weight
        /// based on the per-instance weights reported in the last
        /// processed health check replies, as long as every
        /// instance either reported a valid weight or had
        /// UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains
        /// equal-weight.
        /// * `WEIGHTED_ROUND_ROBIN`: Per-endpoint weighted round-robin Load Balancing using weights computed
        /// from Backend reported Custom Metrics. If set, the Backend Service
        /// responses are expected to contain non-standard HTTP response header field
        /// X-Endpoint-Load-Metrics. The reported metrics
        /// to use for computing the weights are specified via the
        /// backends[].customMetrics fields.
        /// locality_lb_policy is applicable to either:
        /// * A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2,
        /// and loadBalancingScheme set to INTERNAL_MANAGED.
        /// * A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
        /// * A regional backend service with loadBalancingScheme set to EXTERNAL (External Network
        /// Load Balancing). Only MAGLEV and WEIGHTED_MAGLEV values are possible for External
        /// Network Load Balancing. The default is MAGLEV.
        /// If session_affinity is not NONE, and locality_lb_policy is not set to MAGLEV, WEIGHTED_MAGLEV,
        /// or RING_HASH, session affinity settings will not take effect.
        /// Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced
        /// by a URL map that is bound to target gRPC proxy that has validate_for_proxyless
        /// field set to true.
        /// Possible values are: `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, `MAGLEV`, `WEIGHTED_MAGLEV`, `WEIGHTED_ROUND_ROBIN`.
        /// </summary>
        [Output("localityLbPolicy")]
        public Output<string?> LocalityLbPolicy { get; private set; } = null!;

        /// <summary>
        /// This field denotes the logging options for the load balancer traffic served by this backend service.
        /// If logging is enabled, logs will be exported to Stackdriver.
        /// Structure is documented below.
        /// </summary>
        [Output("logConfig")]
        public Output<Outputs.BackendServiceLogConfig> LogConfig { get; private set; } = null!;

        /// <summary>
        /// Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the
        /// beginning of the stream until the response has been completely processed, including all retries. A stream that
        /// does not complete in this duration is closed.
        /// If not specified, there will be no timeout limit, i.e. the maximum duration is infinite.
        /// This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service.
        /// This field is only allowed when the loadBalancingScheme of the backend service is INTERNAL_SELF_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Output("maxStreamDuration")]
        public Output<Outputs.BackendServiceMaxStreamDuration?> MaxStreamDuration { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is
        /// created. The name must be 1-63 characters long, and comply with
        /// RFC1035. Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the last
        /// character, which cannot be a dash.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
        /// Applicable backend service types can be a global backend service with the
        /// loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Output("outlierDetection")]
        public Output<Outputs.BackendServiceOutlierDetection?> OutlierDetection { get; private set; } = null!;

        /// <summary>
        /// Name of backend port. The same name should appear in the instance
        /// groups referenced by this service. Required when the load balancing
        /// scheme is EXTERNAL.
        /// </summary>
        [Output("portName")]
        public Output<string> PortName { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The protocol this BackendService uses to communicate with backends.
        /// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
        /// types and may result in errors if used with the GA API. **NOTE**: With protocol “UNSPECIFIED”,
        /// the backend service can be used by Layer 4 Internal Load Balancing or Network Load Balancing
        /// with TCP/UDP/L3_DEFAULT Forwarding Rule protocol.
        /// Possible values are: `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, `GRPC`, `UNSPECIFIED`.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// The security policy associated with this backend service.
        /// </summary>
        [Output("securityPolicy")]
        public Output<string?> SecurityPolicy { get; private set; } = null!;

        /// <summary>
        /// The security settings that apply to this backend service. This field is applicable to either
        /// a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
        /// load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
        /// load_balancing_scheme set to INTERNAL_SELF_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Output("securitySettings")]
        public Output<Outputs.BackendServiceSecuritySettings?> SecuritySettings { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// URL to networkservices.ServiceLbPolicy resource.
        /// Can only be set if load balancing scheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED or INTERNAL_SELF_MANAGED and the scope is global.
        /// </summary>
        [Output("serviceLbPolicy")]
        public Output<string?> ServiceLbPolicy { get; private set; } = null!;

        /// <summary>
        /// Type of session affinity to use. The default is NONE. Session affinity is
        /// not applicable if the protocol is UDP.
        /// Possible values are: `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, `STRONG_COOKIE_AFFINITY`.
        /// </summary>
        [Output("sessionAffinity")]
        public Output<string> SessionAffinity { get; private set; } = null!;

        /// <summary>
        /// Describes the HTTP cookie used for stateful session affinity. This field is applicable and required if the sessionAffinity is set to STRONG_COOKIE_AFFINITY.
        /// Structure is documented below.
        /// </summary>
        [Output("strongSessionAffinityCookie")]
        public Output<Outputs.BackendServiceStrongSessionAffinityCookie?> StrongSessionAffinityCookie { get; private set; } = null!;

        /// <summary>
        /// The backend service timeout has a different meaning depending on the type of load balancer.
        /// For more information see, [Backend service settings](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices).
        /// The default is 30 seconds.
        /// The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
        /// </summary>
        [Output("timeoutSec")]
        public Output<int> TimeoutSec { get; private set; } = null!;

        /// <summary>
        /// Configuration for Backend Authenticated TLS and mTLS. May only be specified when the backend protocol is SSL, HTTPS or HTTP2.
        /// Structure is documented below.
        /// </summary>
        [Output("tlsSettings")]
        public Output<Outputs.BackendServiceTlsSettings?> TlsSettings { get; private set; } = null!;


        /// <summary>
        /// Create a BackendService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackendService(string name, BackendServiceArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:compute/backendService:BackendService", name, args ?? new BackendServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackendService(string name, Input<string> id, BackendServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/backendService:BackendService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackendService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackendService Get(string name, Input<string> id, BackendServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new BackendService(name, id, state, options);
        }
    }

    public sealed class BackendServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Lifetime of cookies in seconds if session_affinity is
        /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
        /// only until the end of the browser session (or equivalent). The
        /// maximum allowed value for TTL is one day.
        /// When the load balancing scheme is INTERNAL, this field is not used.
        /// </summary>
        [Input("affinityCookieTtlSec")]
        public Input<int>? AffinityCookieTtlSec { get; set; }

        [Input("backends")]
        private InputList<Inputs.BackendServiceBackendArgs>? _backends;

        /// <summary>
        /// The set of backends that serve this BackendService.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.BackendServiceBackendArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.BackendServiceBackendArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// Cloud CDN configuration for this BackendService.
        /// Structure is documented below.
        /// </summary>
        [Input("cdnPolicy")]
        public Input<Inputs.BackendServiceCdnPolicyArgs>? CdnPolicy { get; set; }

        /// <summary>
        /// Settings controlling the volume of connections to a backend service. This field
        /// is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Input("circuitBreakers")]
        public Input<Inputs.BackendServiceCircuitBreakersArgs>? CircuitBreakers { get; set; }

        /// <summary>
        /// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
        /// Possible values are: `AUTOMATIC`, `DISABLED`.
        /// </summary>
        [Input("compressionMode")]
        public Input<string>? CompressionMode { get; set; }

        /// <summary>
        /// Time for which instance will be drained (not accept new
        /// connections, but still work to finish started).
        /// </summary>
        [Input("connectionDrainingTimeoutSec")]
        public Input<int>? ConnectionDrainingTimeoutSec { get; set; }

        /// <summary>
        /// Consistent Hash-based load balancing can be used to provide soft session
        /// affinity based on HTTP headers, cookies or other properties. This load balancing
        /// policy is applicable only for HTTP connections. The affinity to a particular
        /// destination host will be lost when one or more hosts are added/removed from the
        /// destination service. This field specifies parameters that control consistent
        /// hashing. This field only applies if the load_balancing_scheme is set to
        /// INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
        /// set to MAGLEV or RING_HASH.
        /// Structure is documented below.
        /// </summary>
        [Input("consistentHash")]
        public Input<Inputs.BackendServiceConsistentHashArgs>? ConsistentHash { get; set; }

        [Input("customMetrics")]
        private InputList<Inputs.BackendServiceCustomMetricArgs>? _customMetrics;

        /// <summary>
        /// List of custom metrics that are used for the WEIGHTED_ROUND_ROBIN locality_lb_policy.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.BackendServiceCustomMetricArgs> CustomMetrics
        {
            get => _customMetrics ?? (_customMetrics = new InputList<Inputs.BackendServiceCustomMetricArgs>());
            set => _customMetrics = value;
        }

        [Input("customRequestHeaders")]
        private InputList<string>? _customRequestHeaders;

        /// <summary>
        /// Headers that the HTTP/S load balancer should add to proxied
        /// requests.
        /// </summary>
        public InputList<string> CustomRequestHeaders
        {
            get => _customRequestHeaders ?? (_customRequestHeaders = new InputList<string>());
            set => _customRequestHeaders = value;
        }

        [Input("customResponseHeaders")]
        private InputList<string>? _customResponseHeaders;

        /// <summary>
        /// Headers that the HTTP/S load balancer should add to proxied
        /// responses.
        /// </summary>
        public InputList<string> CustomResponseHeaders
        {
            get => _customResponseHeaders ?? (_customResponseHeaders = new InputList<string>());
            set => _customResponseHeaders = value;
        }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The resource URL for the edge security policy associated with this backend service.
        /// </summary>
        [Input("edgeSecurityPolicy")]
        public Input<string>? EdgeSecurityPolicy { get; set; }

        /// <summary>
        /// If true, enable Cloud CDN for this BackendService.
        /// </summary>
        [Input("enableCdn")]
        public Input<bool>? EnableCdn { get; set; }

        /// <summary>
        /// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
        /// for health checking this BackendService. Currently at most one health
        /// check can be specified.
        /// A health check must be specified unless the backend service uses an internet
        /// or serverless NEG as a backend.
        /// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
        /// </summary>
        [Input("healthChecks")]
        public Input<string>? HealthChecks { get; set; }

        /// <summary>
        /// Settings for enabling Cloud Identity Aware Proxy.
        /// If OAuth client is not set, the Google-managed OAuth client is used.
        /// Structure is documented below.
        /// </summary>
        [Input("iap")]
        public Input<Inputs.BackendServiceIapArgs>? Iap { get; set; }

        /// <summary>
        /// Specifies preference of traffic to the backend (from the proxy and from the client for proxyless gRPC).
        /// Possible values are: `IPV4_ONLY`, `PREFER_IPV6`, `IPV6_ONLY`.
        /// </summary>
        [Input("ipAddressSelectionPolicy")]
        public Input<string>? IpAddressSelectionPolicy { get; set; }

        /// <summary>
        /// Indicates whether the backend service will be used with internal or
        /// external load balancing. A backend service created for one type of
        /// load balancing cannot be used with the other. For more information, refer to
        /// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
        /// Default value is `EXTERNAL`.
        /// Possible values are: `EXTERNAL`, `INTERNAL_SELF_MANAGED`, `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
        /// </summary>
        [Input("loadBalancingScheme")]
        public Input<string>? LoadBalancingScheme { get; set; }

        [Input("localityLbPolicies")]
        private InputList<Inputs.BackendServiceLocalityLbPolicyArgs>? _localityLbPolicies;

        /// <summary>
        /// A list of locality load balancing policies to be used in order of
        /// preference. Either the policy or the customPolicy field should be set.
        /// Overrides any value set in the localityLbPolicy field.
        /// localityLbPolicies is only supported when the BackendService is referenced
        /// by a URL Map that is referenced by a target gRPC proxy that has the
        /// validateForProxyless field set to true.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.BackendServiceLocalityLbPolicyArgs> LocalityLbPolicies
        {
            get => _localityLbPolicies ?? (_localityLbPolicies = new InputList<Inputs.BackendServiceLocalityLbPolicyArgs>());
            set => _localityLbPolicies = value;
        }

        /// <summary>
        /// The load balancing algorithm used within the scope of the locality.
        /// The possible values are:
        /// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
        /// is selected in round robin order.
        /// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
        /// hosts and picks the host which has fewer active requests.
        /// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
        /// hashing to backends. The algorithm has the property that the
        /// addition/removal of a host from a set of N hosts only affects
        /// 1/N of the requests.
        /// * `RANDOM`: The load balancer selects a random healthy host.
        /// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
        /// connection metadata, i.e., connections are opened
        /// to the same address as the destination address of
        /// the incoming connection before the connection
        /// was redirected to the load balancer.
        /// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
        /// Maglev is not as stable as ring hash but has faster table lookup
        /// build times and host selection times. For more information about
        /// Maglev, refer to https://ai.google/research/pubs/pub44824
        /// * `WEIGHTED_MAGLEV`: Per-instance weighted Load Balancing via health check
        /// reported weights. Only applicable to loadBalancingScheme
        /// EXTERNAL. If set, the Backend Service must
        /// configure a non legacy HTTP-based Health Check, and
        /// health check replies are expected to contain
        /// non-standard HTTP response header field
        /// X-Load-Balancing-Endpoint-Weight to specify the
        /// per-instance weights. If set, Load Balancing is weight
        /// based on the per-instance weights reported in the last
        /// processed health check replies, as long as every
        /// instance either reported a valid weight or had
        /// UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains
        /// equal-weight.
        /// * `WEIGHTED_ROUND_ROBIN`: Per-endpoint weighted round-robin Load Balancing using weights computed
        /// from Backend reported Custom Metrics. If set, the Backend Service
        /// responses are expected to contain non-standard HTTP response header field
        /// X-Endpoint-Load-Metrics. The reported metrics
        /// to use for computing the weights are specified via the
        /// backends[].customMetrics fields.
        /// locality_lb_policy is applicable to either:
        /// * A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2,
        /// and loadBalancingScheme set to INTERNAL_MANAGED.
        /// * A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
        /// * A regional backend service with loadBalancingScheme set to EXTERNAL (External Network
        /// Load Balancing). Only MAGLEV and WEIGHTED_MAGLEV values are possible for External
        /// Network Load Balancing. The default is MAGLEV.
        /// If session_affinity is not NONE, and locality_lb_policy is not set to MAGLEV, WEIGHTED_MAGLEV,
        /// or RING_HASH, session affinity settings will not take effect.
        /// Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced
        /// by a URL map that is bound to target gRPC proxy that has validate_for_proxyless
        /// field set to true.
        /// Possible values are: `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, `MAGLEV`, `WEIGHTED_MAGLEV`, `WEIGHTED_ROUND_ROBIN`.
        /// </summary>
        [Input("localityLbPolicy")]
        public Input<string>? LocalityLbPolicy { get; set; }

        /// <summary>
        /// This field denotes the logging options for the load balancer traffic served by this backend service.
        /// If logging is enabled, logs will be exported to Stackdriver.
        /// Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.BackendServiceLogConfigArgs>? LogConfig { get; set; }

        /// <summary>
        /// Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the
        /// beginning of the stream until the response has been completely processed, including all retries. A stream that
        /// does not complete in this duration is closed.
        /// If not specified, there will be no timeout limit, i.e. the maximum duration is infinite.
        /// This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service.
        /// This field is only allowed when the loadBalancingScheme of the backend service is INTERNAL_SELF_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Input("maxStreamDuration")]
        public Input<Inputs.BackendServiceMaxStreamDurationArgs>? MaxStreamDuration { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is
        /// created. The name must be 1-63 characters long, and comply with
        /// RFC1035. Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the last
        /// character, which cannot be a dash.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
        /// Applicable backend service types can be a global backend service with the
        /// loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Input("outlierDetection")]
        public Input<Inputs.BackendServiceOutlierDetectionArgs>? OutlierDetection { get; set; }

        /// <summary>
        /// Name of backend port. The same name should appear in the instance
        /// groups referenced by this service. Required when the load balancing
        /// scheme is EXTERNAL.
        /// </summary>
        [Input("portName")]
        public Input<string>? PortName { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The protocol this BackendService uses to communicate with backends.
        /// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
        /// types and may result in errors if used with the GA API. **NOTE**: With protocol “UNSPECIFIED”,
        /// the backend service can be used by Layer 4 Internal Load Balancing or Network Load Balancing
        /// with TCP/UDP/L3_DEFAULT Forwarding Rule protocol.
        /// Possible values are: `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, `GRPC`, `UNSPECIFIED`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The security policy associated with this backend service.
        /// </summary>
        [Input("securityPolicy")]
        public Input<string>? SecurityPolicy { get; set; }

        /// <summary>
        /// The security settings that apply to this backend service. This field is applicable to either
        /// a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
        /// load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
        /// load_balancing_scheme set to INTERNAL_SELF_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Input("securitySettings")]
        public Input<Inputs.BackendServiceSecuritySettingsArgs>? SecuritySettings { get; set; }

        /// <summary>
        /// URL to networkservices.ServiceLbPolicy resource.
        /// Can only be set if load balancing scheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED or INTERNAL_SELF_MANAGED and the scope is global.
        /// </summary>
        [Input("serviceLbPolicy")]
        public Input<string>? ServiceLbPolicy { get; set; }

        /// <summary>
        /// Type of session affinity to use. The default is NONE. Session affinity is
        /// not applicable if the protocol is UDP.
        /// Possible values are: `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, `STRONG_COOKIE_AFFINITY`.
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// Describes the HTTP cookie used for stateful session affinity. This field is applicable and required if the sessionAffinity is set to STRONG_COOKIE_AFFINITY.
        /// Structure is documented below.
        /// </summary>
        [Input("strongSessionAffinityCookie")]
        public Input<Inputs.BackendServiceStrongSessionAffinityCookieArgs>? StrongSessionAffinityCookie { get; set; }

        /// <summary>
        /// The backend service timeout has a different meaning depending on the type of load balancer.
        /// For more information see, [Backend service settings](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices).
        /// The default is 30 seconds.
        /// The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
        /// </summary>
        [Input("timeoutSec")]
        public Input<int>? TimeoutSec { get; set; }

        /// <summary>
        /// Configuration for Backend Authenticated TLS and mTLS. May only be specified when the backend protocol is SSL, HTTPS or HTTP2.
        /// Structure is documented below.
        /// </summary>
        [Input("tlsSettings")]
        public Input<Inputs.BackendServiceTlsSettingsArgs>? TlsSettings { get; set; }

        public BackendServiceArgs()
        {
        }
        public static new BackendServiceArgs Empty => new BackendServiceArgs();
    }

    public sealed class BackendServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Lifetime of cookies in seconds if session_affinity is
        /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
        /// only until the end of the browser session (or equivalent). The
        /// maximum allowed value for TTL is one day.
        /// When the load balancing scheme is INTERNAL, this field is not used.
        /// </summary>
        [Input("affinityCookieTtlSec")]
        public Input<int>? AffinityCookieTtlSec { get; set; }

        [Input("backends")]
        private InputList<Inputs.BackendServiceBackendGetArgs>? _backends;

        /// <summary>
        /// The set of backends that serve this BackendService.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.BackendServiceBackendGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.BackendServiceBackendGetArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// Cloud CDN configuration for this BackendService.
        /// Structure is documented below.
        /// </summary>
        [Input("cdnPolicy")]
        public Input<Inputs.BackendServiceCdnPolicyGetArgs>? CdnPolicy { get; set; }

        /// <summary>
        /// Settings controlling the volume of connections to a backend service. This field
        /// is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Input("circuitBreakers")]
        public Input<Inputs.BackendServiceCircuitBreakersGetArgs>? CircuitBreakers { get; set; }

        /// <summary>
        /// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
        /// Possible values are: `AUTOMATIC`, `DISABLED`.
        /// </summary>
        [Input("compressionMode")]
        public Input<string>? CompressionMode { get; set; }

        /// <summary>
        /// Time for which instance will be drained (not accept new
        /// connections, but still work to finish started).
        /// </summary>
        [Input("connectionDrainingTimeoutSec")]
        public Input<int>? ConnectionDrainingTimeoutSec { get; set; }

        /// <summary>
        /// Consistent Hash-based load balancing can be used to provide soft session
        /// affinity based on HTTP headers, cookies or other properties. This load balancing
        /// policy is applicable only for HTTP connections. The affinity to a particular
        /// destination host will be lost when one or more hosts are added/removed from the
        /// destination service. This field specifies parameters that control consistent
        /// hashing. This field only applies if the load_balancing_scheme is set to
        /// INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
        /// set to MAGLEV or RING_HASH.
        /// Structure is documented below.
        /// </summary>
        [Input("consistentHash")]
        public Input<Inputs.BackendServiceConsistentHashGetArgs>? ConsistentHash { get; set; }

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        [Input("customMetrics")]
        private InputList<Inputs.BackendServiceCustomMetricGetArgs>? _customMetrics;

        /// <summary>
        /// List of custom metrics that are used for the WEIGHTED_ROUND_ROBIN locality_lb_policy.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.BackendServiceCustomMetricGetArgs> CustomMetrics
        {
            get => _customMetrics ?? (_customMetrics = new InputList<Inputs.BackendServiceCustomMetricGetArgs>());
            set => _customMetrics = value;
        }

        [Input("customRequestHeaders")]
        private InputList<string>? _customRequestHeaders;

        /// <summary>
        /// Headers that the HTTP/S load balancer should add to proxied
        /// requests.
        /// </summary>
        public InputList<string> CustomRequestHeaders
        {
            get => _customRequestHeaders ?? (_customRequestHeaders = new InputList<string>());
            set => _customRequestHeaders = value;
        }

        [Input("customResponseHeaders")]
        private InputList<string>? _customResponseHeaders;

        /// <summary>
        /// Headers that the HTTP/S load balancer should add to proxied
        /// responses.
        /// </summary>
        public InputList<string> CustomResponseHeaders
        {
            get => _customResponseHeaders ?? (_customResponseHeaders = new InputList<string>());
            set => _customResponseHeaders = value;
        }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The resource URL for the edge security policy associated with this backend service.
        /// </summary>
        [Input("edgeSecurityPolicy")]
        public Input<string>? EdgeSecurityPolicy { get; set; }

        /// <summary>
        /// If true, enable Cloud CDN for this BackendService.
        /// </summary>
        [Input("enableCdn")]
        public Input<bool>? EnableCdn { get; set; }

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this
        /// object. This field is used in optimistic locking.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// The unique identifier for the resource. This identifier is defined by the server.
        /// </summary>
        [Input("generatedId")]
        public Input<int>? GeneratedId { get; set; }

        /// <summary>
        /// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
        /// for health checking this BackendService. Currently at most one health
        /// check can be specified.
        /// A health check must be specified unless the backend service uses an internet
        /// or serverless NEG as a backend.
        /// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
        /// </summary>
        [Input("healthChecks")]
        public Input<string>? HealthChecks { get; set; }

        /// <summary>
        /// Settings for enabling Cloud Identity Aware Proxy.
        /// If OAuth client is not set, the Google-managed OAuth client is used.
        /// Structure is documented below.
        /// </summary>
        [Input("iap")]
        public Input<Inputs.BackendServiceIapGetArgs>? Iap { get; set; }

        /// <summary>
        /// Specifies preference of traffic to the backend (from the proxy and from the client for proxyless gRPC).
        /// Possible values are: `IPV4_ONLY`, `PREFER_IPV6`, `IPV6_ONLY`.
        /// </summary>
        [Input("ipAddressSelectionPolicy")]
        public Input<string>? IpAddressSelectionPolicy { get; set; }

        /// <summary>
        /// Indicates whether the backend service will be used with internal or
        /// external load balancing. A backend service created for one type of
        /// load balancing cannot be used with the other. For more information, refer to
        /// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
        /// Default value is `EXTERNAL`.
        /// Possible values are: `EXTERNAL`, `INTERNAL_SELF_MANAGED`, `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
        /// </summary>
        [Input("loadBalancingScheme")]
        public Input<string>? LoadBalancingScheme { get; set; }

        [Input("localityLbPolicies")]
        private InputList<Inputs.BackendServiceLocalityLbPolicyGetArgs>? _localityLbPolicies;

        /// <summary>
        /// A list of locality load balancing policies to be used in order of
        /// preference. Either the policy or the customPolicy field should be set.
        /// Overrides any value set in the localityLbPolicy field.
        /// localityLbPolicies is only supported when the BackendService is referenced
        /// by a URL Map that is referenced by a target gRPC proxy that has the
        /// validateForProxyless field set to true.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.BackendServiceLocalityLbPolicyGetArgs> LocalityLbPolicies
        {
            get => _localityLbPolicies ?? (_localityLbPolicies = new InputList<Inputs.BackendServiceLocalityLbPolicyGetArgs>());
            set => _localityLbPolicies = value;
        }

        /// <summary>
        /// The load balancing algorithm used within the scope of the locality.
        /// The possible values are:
        /// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
        /// is selected in round robin order.
        /// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
        /// hosts and picks the host which has fewer active requests.
        /// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
        /// hashing to backends. The algorithm has the property that the
        /// addition/removal of a host from a set of N hosts only affects
        /// 1/N of the requests.
        /// * `RANDOM`: The load balancer selects a random healthy host.
        /// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
        /// connection metadata, i.e., connections are opened
        /// to the same address as the destination address of
        /// the incoming connection before the connection
        /// was redirected to the load balancer.
        /// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
        /// Maglev is not as stable as ring hash but has faster table lookup
        /// build times and host selection times. For more information about
        /// Maglev, refer to https://ai.google/research/pubs/pub44824
        /// * `WEIGHTED_MAGLEV`: Per-instance weighted Load Balancing via health check
        /// reported weights. Only applicable to loadBalancingScheme
        /// EXTERNAL. If set, the Backend Service must
        /// configure a non legacy HTTP-based Health Check, and
        /// health check replies are expected to contain
        /// non-standard HTTP response header field
        /// X-Load-Balancing-Endpoint-Weight to specify the
        /// per-instance weights. If set, Load Balancing is weight
        /// based on the per-instance weights reported in the last
        /// processed health check replies, as long as every
        /// instance either reported a valid weight or had
        /// UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains
        /// equal-weight.
        /// * `WEIGHTED_ROUND_ROBIN`: Per-endpoint weighted round-robin Load Balancing using weights computed
        /// from Backend reported Custom Metrics. If set, the Backend Service
        /// responses are expected to contain non-standard HTTP response header field
        /// X-Endpoint-Load-Metrics. The reported metrics
        /// to use for computing the weights are specified via the
        /// backends[].customMetrics fields.
        /// locality_lb_policy is applicable to either:
        /// * A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2,
        /// and loadBalancingScheme set to INTERNAL_MANAGED.
        /// * A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
        /// * A regional backend service with loadBalancingScheme set to EXTERNAL (External Network
        /// Load Balancing). Only MAGLEV and WEIGHTED_MAGLEV values are possible for External
        /// Network Load Balancing. The default is MAGLEV.
        /// If session_affinity is not NONE, and locality_lb_policy is not set to MAGLEV, WEIGHTED_MAGLEV,
        /// or RING_HASH, session affinity settings will not take effect.
        /// Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced
        /// by a URL map that is bound to target gRPC proxy that has validate_for_proxyless
        /// field set to true.
        /// Possible values are: `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, `MAGLEV`, `WEIGHTED_MAGLEV`, `WEIGHTED_ROUND_ROBIN`.
        /// </summary>
        [Input("localityLbPolicy")]
        public Input<string>? LocalityLbPolicy { get; set; }

        /// <summary>
        /// This field denotes the logging options for the load balancer traffic served by this backend service.
        /// If logging is enabled, logs will be exported to Stackdriver.
        /// Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.BackendServiceLogConfigGetArgs>? LogConfig { get; set; }

        /// <summary>
        /// Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the
        /// beginning of the stream until the response has been completely processed, including all retries. A stream that
        /// does not complete in this duration is closed.
        /// If not specified, there will be no timeout limit, i.e. the maximum duration is infinite.
        /// This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service.
        /// This field is only allowed when the loadBalancingScheme of the backend service is INTERNAL_SELF_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Input("maxStreamDuration")]
        public Input<Inputs.BackendServiceMaxStreamDurationGetArgs>? MaxStreamDuration { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is
        /// created. The name must be 1-63 characters long, and comply with
        /// RFC1035. Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the last
        /// character, which cannot be a dash.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
        /// Applicable backend service types can be a global backend service with the
        /// loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Input("outlierDetection")]
        public Input<Inputs.BackendServiceOutlierDetectionGetArgs>? OutlierDetection { get; set; }

        /// <summary>
        /// Name of backend port. The same name should appear in the instance
        /// groups referenced by this service. Required when the load balancing
        /// scheme is EXTERNAL.
        /// </summary>
        [Input("portName")]
        public Input<string>? PortName { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The protocol this BackendService uses to communicate with backends.
        /// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
        /// types and may result in errors if used with the GA API. **NOTE**: With protocol “UNSPECIFIED”,
        /// the backend service can be used by Layer 4 Internal Load Balancing or Network Load Balancing
        /// with TCP/UDP/L3_DEFAULT Forwarding Rule protocol.
        /// Possible values are: `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, `GRPC`, `UNSPECIFIED`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The security policy associated with this backend service.
        /// </summary>
        [Input("securityPolicy")]
        public Input<string>? SecurityPolicy { get; set; }

        /// <summary>
        /// The security settings that apply to this backend service. This field is applicable to either
        /// a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
        /// load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
        /// load_balancing_scheme set to INTERNAL_SELF_MANAGED.
        /// Structure is documented below.
        /// </summary>
        [Input("securitySettings")]
        public Input<Inputs.BackendServiceSecuritySettingsGetArgs>? SecuritySettings { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// URL to networkservices.ServiceLbPolicy resource.
        /// Can only be set if load balancing scheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED or INTERNAL_SELF_MANAGED and the scope is global.
        /// </summary>
        [Input("serviceLbPolicy")]
        public Input<string>? ServiceLbPolicy { get; set; }

        /// <summary>
        /// Type of session affinity to use. The default is NONE. Session affinity is
        /// not applicable if the protocol is UDP.
        /// Possible values are: `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, `STRONG_COOKIE_AFFINITY`.
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// Describes the HTTP cookie used for stateful session affinity. This field is applicable and required if the sessionAffinity is set to STRONG_COOKIE_AFFINITY.
        /// Structure is documented below.
        /// </summary>
        [Input("strongSessionAffinityCookie")]
        public Input<Inputs.BackendServiceStrongSessionAffinityCookieGetArgs>? StrongSessionAffinityCookie { get; set; }

        /// <summary>
        /// The backend service timeout has a different meaning depending on the type of load balancer.
        /// For more information see, [Backend service settings](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices).
        /// The default is 30 seconds.
        /// The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
        /// </summary>
        [Input("timeoutSec")]
        public Input<int>? TimeoutSec { get; set; }

        /// <summary>
        /// Configuration for Backend Authenticated TLS and mTLS. May only be specified when the backend protocol is SSL, HTTPS or HTTP2.
        /// Structure is documented below.
        /// </summary>
        [Input("tlsSettings")]
        public Input<Inputs.BackendServiceTlsSettingsGetArgs>? TlsSettings { get; set; }

        public BackendServiceState()
        {
        }
        public static new BackendServiceState Empty => new BackendServiceState();
    }
}
