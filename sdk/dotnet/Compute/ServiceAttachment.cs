// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Represents a ServiceAttachment resource.
    /// 
    /// To get more information about ServiceAttachment, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/beta/serviceAttachments)
    /// * How-to Guides
    ///     * [Configuring Private Service Connect to access services](https://cloud.google.com/vpc/docs/configure-private-service-connect-services)
    /// 
    /// ## Example Usage
    /// 
    /// ### Service Attachment Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var producerServiceHealthCheck = new Gcp.Compute.HealthCheck("producer_service_health_check", new()
    ///     {
    ///         Name = "producer-service-health-check",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///         TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var producerServiceBackend = new Gcp.Compute.RegionBackendService("producer_service_backend", new()
    ///     {
    ///         Name = "producer-service",
    ///         Region = "us-west2",
    ///         HealthChecks = producerServiceHealthCheck.Id,
    ///     });
    /// 
    ///     var pscIlbNetwork = new Gcp.Compute.Network("psc_ilb_network", new()
    ///     {
    ///         Name = "psc-ilb-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var pscIlbProducerSubnetwork = new Gcp.Compute.Subnetwork("psc_ilb_producer_subnetwork", new()
    ///     {
    ///         Name = "psc-ilb-producer-subnetwork",
    ///         Region = "us-west2",
    ///         Network = pscIlbNetwork.Id,
    ///         IpCidrRange = "10.0.0.0/16",
    ///     });
    /// 
    ///     var pscIlbTargetService = new Gcp.Compute.ForwardingRule("psc_ilb_target_service", new()
    ///     {
    ///         Name = "producer-forwarding-rule",
    ///         Region = "us-west2",
    ///         LoadBalancingScheme = "INTERNAL",
    ///         BackendService = producerServiceBackend.Id,
    ///         AllPorts = true,
    ///         Network = pscIlbNetwork.Name,
    ///         Subnetwork = pscIlbProducerSubnetwork.Name,
    ///     });
    /// 
    ///     var pscIlbNat = new Gcp.Compute.Subnetwork("psc_ilb_nat", new()
    ///     {
    ///         Name = "psc-ilb-nat",
    ///         Region = "us-west2",
    ///         Network = pscIlbNetwork.Id,
    ///         Purpose = "PRIVATE_SERVICE_CONNECT",
    ///         IpCidrRange = "10.1.0.0/16",
    ///     });
    /// 
    ///     var pscIlbServiceAttachment = new Gcp.Compute.ServiceAttachment("psc_ilb_service_attachment", new()
    ///     {
    ///         Name = "my-psc-ilb",
    ///         Region = "us-west2",
    ///         Description = "A service attachment configured with Terraform",
    ///         DomainNames = new[]
    ///         {
    ///             "gcp.tfacc.hashicorptest.com.",
    ///         },
    ///         EnableProxyProtocol = true,
    ///         ConnectionPreference = "ACCEPT_AUTOMATIC",
    ///         NatSubnets = new[]
    ///         {
    ///             pscIlbNat.Id,
    ///         },
    ///         TargetService = pscIlbTargetService.Id,
    ///     });
    /// 
    ///     var pscIlbConsumerAddress = new Gcp.Compute.Address("psc_ilb_consumer_address", new()
    ///     {
    ///         Name = "psc-ilb-consumer-address",
    ///         Region = "us-west2",
    ///         Subnetwork = "default",
    ///         AddressType = "INTERNAL",
    ///     });
    /// 
    ///     var pscIlbConsumer = new Gcp.Compute.ForwardingRule("psc_ilb_consumer", new()
    ///     {
    ///         Name = "psc-ilb-consumer-forwarding-rule",
    ///         Region = "us-west2",
    ///         Target = pscIlbServiceAttachment.Id,
    ///         LoadBalancingScheme = "",
    ///         Network = "default",
    ///         IpAddress = pscIlbConsumerAddress.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Service Attachment Explicit Projects
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var producerServiceHealthCheck = new Gcp.Compute.HealthCheck("producer_service_health_check", new()
    ///     {
    ///         Name = "producer-service-health-check",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///         TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var producerServiceBackend = new Gcp.Compute.RegionBackendService("producer_service_backend", new()
    ///     {
    ///         Name = "producer-service",
    ///         Region = "us-west2",
    ///         HealthChecks = producerServiceHealthCheck.Id,
    ///     });
    /// 
    ///     var pscIlbNetwork = new Gcp.Compute.Network("psc_ilb_network", new()
    ///     {
    ///         Name = "psc-ilb-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var pscIlbProducerSubnetwork = new Gcp.Compute.Subnetwork("psc_ilb_producer_subnetwork", new()
    ///     {
    ///         Name = "psc-ilb-producer-subnetwork",
    ///         Region = "us-west2",
    ///         Network = pscIlbNetwork.Id,
    ///         IpCidrRange = "10.0.0.0/16",
    ///     });
    /// 
    ///     var pscIlbTargetService = new Gcp.Compute.ForwardingRule("psc_ilb_target_service", new()
    ///     {
    ///         Name = "producer-forwarding-rule",
    ///         Region = "us-west2",
    ///         LoadBalancingScheme = "INTERNAL",
    ///         BackendService = producerServiceBackend.Id,
    ///         AllPorts = true,
    ///         Network = pscIlbNetwork.Name,
    ///         Subnetwork = pscIlbProducerSubnetwork.Name,
    ///     });
    /// 
    ///     var pscIlbNat = new Gcp.Compute.Subnetwork("psc_ilb_nat", new()
    ///     {
    ///         Name = "psc-ilb-nat",
    ///         Region = "us-west2",
    ///         Network = pscIlbNetwork.Id,
    ///         Purpose = "PRIVATE_SERVICE_CONNECT",
    ///         IpCidrRange = "10.1.0.0/16",
    ///     });
    /// 
    ///     var pscIlbServiceAttachment = new Gcp.Compute.ServiceAttachment("psc_ilb_service_attachment", new()
    ///     {
    ///         Name = "my-psc-ilb",
    ///         Region = "us-west2",
    ///         Description = "A service attachment configured with Terraform",
    ///         DomainNames = new[]
    ///         {
    ///             "gcp.tfacc.hashicorptest.com.",
    ///         },
    ///         EnableProxyProtocol = true,
    ///         ConnectionPreference = "ACCEPT_MANUAL",
    ///         NatSubnets = new[]
    ///         {
    ///             pscIlbNat.Id,
    ///         },
    ///         TargetService = pscIlbTargetService.Id,
    ///         ConsumerRejectLists = new[]
    ///         {
    ///             "673497134629",
    ///             "482878270665",
    ///         },
    ///         ConsumerAcceptLists = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.ServiceAttachmentConsumerAcceptListArgs
    ///             {
    ///                 ProjectIdOrNum = "658859330310",
    ///                 ConnectionLimit = 4,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var pscIlbConsumerAddress = new Gcp.Compute.Address("psc_ilb_consumer_address", new()
    ///     {
    ///         Name = "psc-ilb-consumer-address",
    ///         Region = "us-west2",
    ///         Subnetwork = "default",
    ///         AddressType = "INTERNAL",
    ///     });
    /// 
    ///     var pscIlbConsumer = new Gcp.Compute.ForwardingRule("psc_ilb_consumer", new()
    ///     {
    ///         Name = "psc-ilb-consumer-forwarding-rule",
    ///         Region = "us-west2",
    ///         Target = pscIlbServiceAttachment.Id,
    ///         LoadBalancingScheme = "",
    ///         Network = "default",
    ///         IpAddress = pscIlbConsumerAddress.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Service Attachment Explicit Networks
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pscIlbConsumerNetwork = new Gcp.Compute.Network("psc_ilb_consumer_network", new()
    ///     {
    ///         Name = "psc-ilb-consumer-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var producerServiceHealthCheck = new Gcp.Compute.HealthCheck("producer_service_health_check", new()
    ///     {
    ///         Name = "producer-service-health-check",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///         TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var producerServiceBackend = new Gcp.Compute.RegionBackendService("producer_service_backend", new()
    ///     {
    ///         Name = "producer-service",
    ///         Region = "us-west2",
    ///         HealthChecks = producerServiceHealthCheck.Id,
    ///     });
    /// 
    ///     var pscIlbNetwork = new Gcp.Compute.Network("psc_ilb_network", new()
    ///     {
    ///         Name = "psc-ilb-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var pscIlbProducerSubnetwork = new Gcp.Compute.Subnetwork("psc_ilb_producer_subnetwork", new()
    ///     {
    ///         Name = "psc-ilb-producer-subnetwork",
    ///         Region = "us-west2",
    ///         Network = pscIlbNetwork.Id,
    ///         IpCidrRange = "10.0.0.0/16",
    ///     });
    /// 
    ///     var pscIlbTargetService = new Gcp.Compute.ForwardingRule("psc_ilb_target_service", new()
    ///     {
    ///         Name = "producer-forwarding-rule",
    ///         Region = "us-west2",
    ///         LoadBalancingScheme = "INTERNAL",
    ///         BackendService = producerServiceBackend.Id,
    ///         AllPorts = true,
    ///         Network = pscIlbNetwork.Name,
    ///         Subnetwork = pscIlbProducerSubnetwork.Name,
    ///     });
    /// 
    ///     var pscIlbNat = new Gcp.Compute.Subnetwork("psc_ilb_nat", new()
    ///     {
    ///         Name = "psc-ilb-nat",
    ///         Region = "us-west2",
    ///         Network = pscIlbNetwork.Id,
    ///         Purpose = "PRIVATE_SERVICE_CONNECT",
    ///         IpCidrRange = "10.1.0.0/16",
    ///     });
    /// 
    ///     var pscIlbServiceAttachment = new Gcp.Compute.ServiceAttachment("psc_ilb_service_attachment", new()
    ///     {
    ///         Name = "my-psc-ilb",
    ///         Region = "us-west2",
    ///         Description = "A service attachment configured with Terraform",
    ///         EnableProxyProtocol = false,
    ///         ConnectionPreference = "ACCEPT_MANUAL",
    ///         NatSubnets = new[]
    ///         {
    ///             pscIlbNat.Id,
    ///         },
    ///         TargetService = pscIlbTargetService.Id,
    ///         ConsumerAcceptLists = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.ServiceAttachmentConsumerAcceptListArgs
    ///             {
    ///                 NetworkUrl = pscIlbConsumerNetwork.SelfLink,
    ///                 ConnectionLimit = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var pscIlbConsumerSubnetwork = new Gcp.Compute.Subnetwork("psc_ilb_consumer_subnetwork", new()
    ///     {
    ///         Name = "psc-ilb-consumer-network",
    ///         IpCidrRange = "10.0.0.0/16",
    ///         Region = "us-west2",
    ///         Network = pscIlbConsumerNetwork.Id,
    ///     });
    /// 
    ///     var pscIlbConsumerAddress = new Gcp.Compute.Address("psc_ilb_consumer_address", new()
    ///     {
    ///         Name = "psc-ilb-consumer-address",
    ///         Region = "us-west2",
    ///         Subnetwork = pscIlbConsumerSubnetwork.Id,
    ///         AddressType = "INTERNAL",
    ///     });
    /// 
    ///     var pscIlbConsumer = new Gcp.Compute.ForwardingRule("psc_ilb_consumer", new()
    ///     {
    ///         Name = "psc-ilb-consumer-forwarding-rule",
    ///         Region = "us-west2",
    ///         Target = pscIlbServiceAttachment.Id,
    ///         LoadBalancingScheme = "",
    ///         Network = pscIlbConsumerNetwork.Id,
    ///         Subnetwork = pscIlbConsumerSubnetwork.Id,
    ///         IpAddress = pscIlbConsumerAddress.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Service Attachment Reconcile Connections
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var producerServiceHealthCheck = new Gcp.Compute.HealthCheck("producer_service_health_check", new()
    ///     {
    ///         Name = "producer-service-health-check",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///         TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var producerServiceBackend = new Gcp.Compute.RegionBackendService("producer_service_backend", new()
    ///     {
    ///         Name = "producer-service",
    ///         Region = "us-west2",
    ///         HealthChecks = producerServiceHealthCheck.Id,
    ///     });
    /// 
    ///     var pscIlbNetwork = new Gcp.Compute.Network("psc_ilb_network", new()
    ///     {
    ///         Name = "psc-ilb-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var pscIlbProducerSubnetwork = new Gcp.Compute.Subnetwork("psc_ilb_producer_subnetwork", new()
    ///     {
    ///         Name = "psc-ilb-producer-subnetwork",
    ///         Region = "us-west2",
    ///         Network = pscIlbNetwork.Id,
    ///         IpCidrRange = "10.0.0.0/16",
    ///     });
    /// 
    ///     var pscIlbTargetService = new Gcp.Compute.ForwardingRule("psc_ilb_target_service", new()
    ///     {
    ///         Name = "producer-forwarding-rule",
    ///         Region = "us-west2",
    ///         LoadBalancingScheme = "INTERNAL",
    ///         BackendService = producerServiceBackend.Id,
    ///         AllPorts = true,
    ///         Network = pscIlbNetwork.Name,
    ///         Subnetwork = pscIlbProducerSubnetwork.Name,
    ///     });
    /// 
    ///     var pscIlbNat = new Gcp.Compute.Subnetwork("psc_ilb_nat", new()
    ///     {
    ///         Name = "psc-ilb-nat",
    ///         Region = "us-west2",
    ///         Network = pscIlbNetwork.Id,
    ///         Purpose = "PRIVATE_SERVICE_CONNECT",
    ///         IpCidrRange = "10.1.0.0/16",
    ///     });
    /// 
    ///     var pscIlbServiceAttachment = new Gcp.Compute.ServiceAttachment("psc_ilb_service_attachment", new()
    ///     {
    ///         Name = "my-psc-ilb",
    ///         Region = "us-west2",
    ///         Description = "A service attachment configured with Terraform",
    ///         DomainNames = new[]
    ///         {
    ///             "gcp.tfacc.hashicorptest.com.",
    ///         },
    ///         EnableProxyProtocol = true,
    ///         ConnectionPreference = "ACCEPT_MANUAL",
    ///         NatSubnets = new[]
    ///         {
    ///             pscIlbNat.Id,
    ///         },
    ///         TargetService = pscIlbTargetService.Id,
    ///         ConsumerRejectLists = new[]
    ///         {
    ///             "673497134629",
    ///             "482878270665",
    ///         },
    ///         ConsumerAcceptLists = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.ServiceAttachmentConsumerAcceptListArgs
    ///             {
    ///                 ProjectIdOrNum = "658859330310",
    ///                 ConnectionLimit = 4,
    ///             },
    ///         },
    ///         ReconcileConnections = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ServiceAttachment can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/regions/{{region}}/serviceAttachments/{{name}}`
    /// 
    /// * `{{project}}/{{region}}/{{name}}`
    /// 
    /// * `{{region}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, ServiceAttachment can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/serviceAttachment:ServiceAttachment default projects/{{project}}/regions/{{region}}/serviceAttachments/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/serviceAttachment:ServiceAttachment default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/serviceAttachment:ServiceAttachment default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/serviceAttachment:ServiceAttachment default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/serviceAttachment:ServiceAttachment")]
    public partial class ServiceAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An array of the consumer forwarding rules connected to this service
        /// attachment.
        /// Structure is documented below.
        /// </summary>
        [Output("connectedEndpoints")]
        public Output<ImmutableArray<Outputs.ServiceAttachmentConnectedEndpoint>> ConnectedEndpoints { get; private set; } = null!;

        /// <summary>
        /// The connection preference to use for this service attachment. Valid
        /// values include "ACCEPT_AUTOMATIC", "ACCEPT_MANUAL".
        /// </summary>
        [Output("connectionPreference")]
        public Output<string> ConnectionPreference { get; private set; } = null!;

        /// <summary>
        /// An array of projects that are allowed to connect to this service
        /// attachment.
        /// Structure is documented below.
        /// </summary>
        [Output("consumerAcceptLists")]
        public Output<ImmutableArray<Outputs.ServiceAttachmentConsumerAcceptList>> ConsumerAcceptLists { get; private set; } = null!;

        /// <summary>
        /// An array of projects that are not allowed to connect to this service
        /// attachment.
        /// </summary>
        [Output("consumerRejectLists")]
        public Output<ImmutableArray<string>> ConsumerRejectLists { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If specified, the domain name will be used during the integration between
        /// the PSC connected endpoints and the Cloud DNS. For example, this is a
        /// valid domain name: "p.mycompany.com.". Current max number of domain names
        /// supported is 1.
        /// </summary>
        [Output("domainNames")]
        public Output<ImmutableArray<string>> DomainNames { get; private set; } = null!;

        /// <summary>
        /// If true, enable the proxy protocol which is for supplying client TCP/IP
        /// address data in TCP connections that traverse proxies on their way to
        /// destination servers.
        /// </summary>
        [Output("enableProxyProtocol")]
        public Output<bool> EnableProxyProtocol { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource. This field is used internally during
        /// updates of this resource.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. The name must be 1-63 characters long, and
        /// comply with RFC1035. Specifically, the name must be 1-63 characters
        /// long and match the regular expression `a-z?`
        /// which means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An array of subnets that is provided for NAT in this service attachment.
        /// </summary>
        [Output("natSubnets")]
        public Output<ImmutableArray<string>> NatSubnets { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The number of consumer spokes that connected Private Service Connect endpoints can be propagated to through Network Connectivity Center.
        /// This limit lets the service producer limit how many propagated Private Service Connect connections can be established to this service attachment from a single consumer.
        /// If the connection preference of the service attachment is ACCEPT_MANUAL, the limit applies to each project or network that is listed in the consumer accept list.
        /// If the connection preference of the service attachment is ACCEPT_AUTOMATIC, the limit applies to each project that contains a connected endpoint.
        /// If unspecified, the default propagated connection limit is 250. To explicitly send a zero value, set `send_propagated_connection_limit_if_zero = true`.
        /// </summary>
        [Output("propagatedConnectionLimit")]
        public Output<int> PropagatedConnectionLimit { get; private set; } = null!;

        /// <summary>
        /// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints.
        /// If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified .
        /// If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list.
        /// </summary>
        [Output("reconcileConnections")]
        public Output<bool> ReconcileConnections { get; private set; } = null!;

        /// <summary>
        /// URL of the region where the resource resides.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Controls the behavior of propagated_connection_limit.
        /// When false, setting propagated_connection_limit to zero causes the provider to use to the API's default value.
        /// When true, the provider will set propagated_connection_limit to zero.
        /// Defaults to false.
        /// </summary>
        [Output("sendPropagatedConnectionLimitIfZero")]
        public Output<bool?> SendPropagatedConnectionLimitIfZero { get; private set; } = null!;

        /// <summary>
        /// The URL of a service serving the endpoint identified by this service attachment.
        /// </summary>
        [Output("targetService")]
        public Output<string> TargetService { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceAttachment(string name, ServiceAttachmentArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/serviceAttachment:ServiceAttachment", name, args ?? new ServiceAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceAttachment(string name, Input<string> id, ServiceAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/serviceAttachment:ServiceAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceAttachment Get(string name, Input<string> id, ServiceAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceAttachment(name, id, state, options);
        }
    }

    public sealed class ServiceAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The connection preference to use for this service attachment. Valid
        /// values include "ACCEPT_AUTOMATIC", "ACCEPT_MANUAL".
        /// </summary>
        [Input("connectionPreference", required: true)]
        public Input<string> ConnectionPreference { get; set; } = null!;

        [Input("consumerAcceptLists")]
        private InputList<Inputs.ServiceAttachmentConsumerAcceptListArgs>? _consumerAcceptLists;

        /// <summary>
        /// An array of projects that are allowed to connect to this service
        /// attachment.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ServiceAttachmentConsumerAcceptListArgs> ConsumerAcceptLists
        {
            get => _consumerAcceptLists ?? (_consumerAcceptLists = new InputList<Inputs.ServiceAttachmentConsumerAcceptListArgs>());
            set => _consumerAcceptLists = value;
        }

        [Input("consumerRejectLists")]
        private InputList<string>? _consumerRejectLists;

        /// <summary>
        /// An array of projects that are not allowed to connect to this service
        /// attachment.
        /// </summary>
        public InputList<string> ConsumerRejectLists
        {
            get => _consumerRejectLists ?? (_consumerRejectLists = new InputList<string>());
            set => _consumerRejectLists = value;
        }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domainNames")]
        private InputList<string>? _domainNames;

        /// <summary>
        /// If specified, the domain name will be used during the integration between
        /// the PSC connected endpoints and the Cloud DNS. For example, this is a
        /// valid domain name: "p.mycompany.com.". Current max number of domain names
        /// supported is 1.
        /// </summary>
        public InputList<string> DomainNames
        {
            get => _domainNames ?? (_domainNames = new InputList<string>());
            set => _domainNames = value;
        }

        /// <summary>
        /// If true, enable the proxy protocol which is for supplying client TCP/IP
        /// address data in TCP connections that traverse proxies on their way to
        /// destination servers.
        /// </summary>
        [Input("enableProxyProtocol", required: true)]
        public Input<bool> EnableProxyProtocol { get; set; } = null!;

        /// <summary>
        /// Name of the resource. The name must be 1-63 characters long, and
        /// comply with RFC1035. Specifically, the name must be 1-63 characters
        /// long and match the regular expression `a-z?`
        /// which means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("natSubnets", required: true)]
        private InputList<string>? _natSubnets;

        /// <summary>
        /// An array of subnets that is provided for NAT in this service attachment.
        /// </summary>
        public InputList<string> NatSubnets
        {
            get => _natSubnets ?? (_natSubnets = new InputList<string>());
            set => _natSubnets = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The number of consumer spokes that connected Private Service Connect endpoints can be propagated to through Network Connectivity Center.
        /// This limit lets the service producer limit how many propagated Private Service Connect connections can be established to this service attachment from a single consumer.
        /// If the connection preference of the service attachment is ACCEPT_MANUAL, the limit applies to each project or network that is listed in the consumer accept list.
        /// If the connection preference of the service attachment is ACCEPT_AUTOMATIC, the limit applies to each project that contains a connected endpoint.
        /// If unspecified, the default propagated connection limit is 250. To explicitly send a zero value, set `send_propagated_connection_limit_if_zero = true`.
        /// </summary>
        [Input("propagatedConnectionLimit")]
        public Input<int>? PropagatedConnectionLimit { get; set; }

        /// <summary>
        /// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints.
        /// If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified .
        /// If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list.
        /// </summary>
        [Input("reconcileConnections")]
        public Input<bool>? ReconcileConnections { get; set; }

        /// <summary>
        /// URL of the region where the resource resides.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Controls the behavior of propagated_connection_limit.
        /// When false, setting propagated_connection_limit to zero causes the provider to use to the API's default value.
        /// When true, the provider will set propagated_connection_limit to zero.
        /// Defaults to false.
        /// </summary>
        [Input("sendPropagatedConnectionLimitIfZero")]
        public Input<bool>? SendPropagatedConnectionLimitIfZero { get; set; }

        /// <summary>
        /// The URL of a service serving the endpoint identified by this service attachment.
        /// </summary>
        [Input("targetService", required: true)]
        public Input<string> TargetService { get; set; } = null!;

        public ServiceAttachmentArgs()
        {
        }
        public static new ServiceAttachmentArgs Empty => new ServiceAttachmentArgs();
    }

    public sealed class ServiceAttachmentState : global::Pulumi.ResourceArgs
    {
        [Input("connectedEndpoints")]
        private InputList<Inputs.ServiceAttachmentConnectedEndpointGetArgs>? _connectedEndpoints;

        /// <summary>
        /// An array of the consumer forwarding rules connected to this service
        /// attachment.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ServiceAttachmentConnectedEndpointGetArgs> ConnectedEndpoints
        {
            get => _connectedEndpoints ?? (_connectedEndpoints = new InputList<Inputs.ServiceAttachmentConnectedEndpointGetArgs>());
            set => _connectedEndpoints = value;
        }

        /// <summary>
        /// The connection preference to use for this service attachment. Valid
        /// values include "ACCEPT_AUTOMATIC", "ACCEPT_MANUAL".
        /// </summary>
        [Input("connectionPreference")]
        public Input<string>? ConnectionPreference { get; set; }

        [Input("consumerAcceptLists")]
        private InputList<Inputs.ServiceAttachmentConsumerAcceptListGetArgs>? _consumerAcceptLists;

        /// <summary>
        /// An array of projects that are allowed to connect to this service
        /// attachment.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ServiceAttachmentConsumerAcceptListGetArgs> ConsumerAcceptLists
        {
            get => _consumerAcceptLists ?? (_consumerAcceptLists = new InputList<Inputs.ServiceAttachmentConsumerAcceptListGetArgs>());
            set => _consumerAcceptLists = value;
        }

        [Input("consumerRejectLists")]
        private InputList<string>? _consumerRejectLists;

        /// <summary>
        /// An array of projects that are not allowed to connect to this service
        /// attachment.
        /// </summary>
        public InputList<string> ConsumerRejectLists
        {
            get => _consumerRejectLists ?? (_consumerRejectLists = new InputList<string>());
            set => _consumerRejectLists = value;
        }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domainNames")]
        private InputList<string>? _domainNames;

        /// <summary>
        /// If specified, the domain name will be used during the integration between
        /// the PSC connected endpoints and the Cloud DNS. For example, this is a
        /// valid domain name: "p.mycompany.com.". Current max number of domain names
        /// supported is 1.
        /// </summary>
        public InputList<string> DomainNames
        {
            get => _domainNames ?? (_domainNames = new InputList<string>());
            set => _domainNames = value;
        }

        /// <summary>
        /// If true, enable the proxy protocol which is for supplying client TCP/IP
        /// address data in TCP connections that traverse proxies on their way to
        /// destination servers.
        /// </summary>
        [Input("enableProxyProtocol")]
        public Input<bool>? EnableProxyProtocol { get; set; }

        /// <summary>
        /// Fingerprint of this resource. This field is used internally during
        /// updates of this resource.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// Name of the resource. The name must be 1-63 characters long, and
        /// comply with RFC1035. Specifically, the name must be 1-63 characters
        /// long and match the regular expression `a-z?`
        /// which means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("natSubnets")]
        private InputList<string>? _natSubnets;

        /// <summary>
        /// An array of subnets that is provided for NAT in this service attachment.
        /// </summary>
        public InputList<string> NatSubnets
        {
            get => _natSubnets ?? (_natSubnets = new InputList<string>());
            set => _natSubnets = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The number of consumer spokes that connected Private Service Connect endpoints can be propagated to through Network Connectivity Center.
        /// This limit lets the service producer limit how many propagated Private Service Connect connections can be established to this service attachment from a single consumer.
        /// If the connection preference of the service attachment is ACCEPT_MANUAL, the limit applies to each project or network that is listed in the consumer accept list.
        /// If the connection preference of the service attachment is ACCEPT_AUTOMATIC, the limit applies to each project that contains a connected endpoint.
        /// If unspecified, the default propagated connection limit is 250. To explicitly send a zero value, set `send_propagated_connection_limit_if_zero = true`.
        /// </summary>
        [Input("propagatedConnectionLimit")]
        public Input<int>? PropagatedConnectionLimit { get; set; }

        /// <summary>
        /// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints.
        /// If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified .
        /// If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list.
        /// </summary>
        [Input("reconcileConnections")]
        public Input<bool>? ReconcileConnections { get; set; }

        /// <summary>
        /// URL of the region where the resource resides.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// Controls the behavior of propagated_connection_limit.
        /// When false, setting propagated_connection_limit to zero causes the provider to use to the API's default value.
        /// When true, the provider will set propagated_connection_limit to zero.
        /// Defaults to false.
        /// </summary>
        [Input("sendPropagatedConnectionLimitIfZero")]
        public Input<bool>? SendPropagatedConnectionLimitIfZero { get; set; }

        /// <summary>
        /// The URL of a service serving the endpoint identified by this service attachment.
        /// </summary>
        [Input("targetService")]
        public Input<string>? TargetService { get; set; }

        public ServiceAttachmentState()
        {
        }
        public static new ServiceAttachmentState Empty => new ServiceAttachmentState();
    }
}
