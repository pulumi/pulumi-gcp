// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Gcp.Compute
{
    public static class GetHealthCheck
    {
        /// <summary>
        /// Get information about a HealthCheck.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var healthCheck = Output.Create(Gcp.Compute.GetHealthCheck.InvokeAsync(new Gcp.Compute.GetHealthCheckArgs
        ///         {
        ///             Name = "my-hc",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetHealthCheckResult> InvokeAsync(GetHealthCheckArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetHealthCheckResult>("gcp:compute/getHealthCheck:getHealthCheck", args ?? new GetHealthCheckArgs(), options.WithVersion());

        /// <summary>
        /// Get information about a HealthCheck.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var healthCheck = Output.Create(Gcp.Compute.GetHealthCheck.InvokeAsync(new Gcp.Compute.GetHealthCheckArgs
        ///         {
        ///             Name = "my-hc",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetHealthCheckResult> Invoke(GetHealthCheckInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetHealthCheckResult>("gcp:compute/getHealthCheck:getHealthCheck", args ?? new GetHealthCheckInvokeArgs(), options.WithVersion());
    }


    public sealed class GetHealthCheckArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetHealthCheckArgs()
        {
        }
    }

    public sealed class GetHealthCheckInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetHealthCheckInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetHealthCheckResult
    {
        public readonly int CheckIntervalSec;
        public readonly string CreationTimestamp;
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetHealthCheckGrpcHealthCheckResult> GrpcHealthChecks;
        public readonly int HealthyThreshold;
        public readonly ImmutableArray<Outputs.GetHealthCheckHttp2HealthCheckResult> Http2HealthChecks;
        public readonly ImmutableArray<Outputs.GetHealthCheckHttpHealthCheckResult> HttpHealthChecks;
        public readonly ImmutableArray<Outputs.GetHealthCheckHttpsHealthCheckResult> HttpsHealthChecks;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetHealthCheckLogConfigResult> LogConfigs;
        public readonly string Name;
        public readonly string? Project;
        public readonly string SelfLink;
        public readonly ImmutableArray<Outputs.GetHealthCheckSslHealthCheckResult> SslHealthChecks;
        public readonly ImmutableArray<Outputs.GetHealthCheckTcpHealthCheckResult> TcpHealthChecks;
        public readonly int TimeoutSec;
        public readonly string Type;
        public readonly int UnhealthyThreshold;

        [OutputConstructor]
        private GetHealthCheckResult(
            int checkIntervalSec,

            string creationTimestamp,

            string description,

            ImmutableArray<Outputs.GetHealthCheckGrpcHealthCheckResult> grpcHealthChecks,

            int healthyThreshold,

            ImmutableArray<Outputs.GetHealthCheckHttp2HealthCheckResult> http2HealthChecks,

            ImmutableArray<Outputs.GetHealthCheckHttpHealthCheckResult> httpHealthChecks,

            ImmutableArray<Outputs.GetHealthCheckHttpsHealthCheckResult> httpsHealthChecks,

            string id,

            ImmutableArray<Outputs.GetHealthCheckLogConfigResult> logConfigs,

            string name,

            string? project,

            string selfLink,

            ImmutableArray<Outputs.GetHealthCheckSslHealthCheckResult> sslHealthChecks,

            ImmutableArray<Outputs.GetHealthCheckTcpHealthCheckResult> tcpHealthChecks,

            int timeoutSec,

            string type,

            int unhealthyThreshold)
        {
            CheckIntervalSec = checkIntervalSec;
            CreationTimestamp = creationTimestamp;
            Description = description;
            GrpcHealthChecks = grpcHealthChecks;
            HealthyThreshold = healthyThreshold;
            Http2HealthChecks = http2HealthChecks;
            HttpHealthChecks = httpHealthChecks;
            HttpsHealthChecks = httpsHealthChecks;
            Id = id;
            LogConfigs = logConfigs;
            Name = name;
            Project = project;
            SelfLink = selfLink;
            SslHealthChecks = sslHealthChecks;
            TcpHealthChecks = tcpHealthChecks;
            TimeoutSec = timeoutSec;
            Type = type;
            UnhealthyThreshold = unhealthyThreshold;
        }
    }
}
