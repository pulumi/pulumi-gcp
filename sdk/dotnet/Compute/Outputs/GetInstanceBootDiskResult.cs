// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Outputs
{

    [OutputType]
    public sealed class GetInstanceBootDiskResult
    {
        /// <summary>
        /// Whether the disk will be auto-deleted when the instance is deleted.
        /// </summary>
        public readonly bool AutoDelete;
        /// <summary>
        /// Name with which the attached disk is accessible
        /// under `/dev/disk/by-id/`
        /// </summary>
        public readonly string DeviceName;
        /// <summary>
        /// A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link, DiskEncryptionKeyRaw and DiskEncryptionKeyRsa may be set.
        /// </summary>
        public readonly string DiskEncryptionKeyRaw;
        /// <summary>
        /// Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. Only one of kms_key_self_link, DiskEncryptionKeyRaw and DiskEncryptionKeyRsa may be set.
        /// </summary>
        public readonly string DiskEncryptionKeyRsa;
        /// <summary>
        /// The [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
        /// encoded SHA-256 hash of the [customer-supplied encryption key]
        /// (&lt;https://cloud.google.com/compute/docs/disks/customer-supplied-encryption&gt;) that protects this resource.
        /// </summary>
        public readonly string DiskEncryptionKeySha256;
        /// <summary>
        /// The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used
        /// </summary>
        public readonly string DiskEncryptionServiceAccount;
        /// <summary>
        /// Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error. Setting this parameter cause VM recreation.
        /// </summary>
        public readonly bool ForceAttach;
        /// <summary>
        /// A list of features to enable on the guest operating system. Applicable only for bootable images.
        /// </summary>
        public readonly ImmutableArray<string> GuestOsFeatures;
        /// <summary>
        /// Parameters with which a disk was created alongside the instance.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceBootDiskInitializeParamResult> InitializeParams;
        /// <summary>
        /// The disk interface used for attaching this disk. One of `SCSI` or `NVME`.
        /// </summary>
        public readonly string Interface;
        /// <summary>
        /// The SelfLink of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link, DiskEncryptionKeyRaw and DiskEncryptionKeyRsa may be set.
        /// </summary>
        public readonly string KmsKeySelfLink;
        /// <summary>
        /// Read/write mode for the disk. One of `"READ_ONLY"` or `"READ_WRITE"`.
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// The SelfLink of the disk attached to this instance.
        /// </summary>
        public readonly string Source;

        [OutputConstructor]
        private GetInstanceBootDiskResult(
            bool autoDelete,

            string deviceName,

            string diskEncryptionKeyRaw,

            string diskEncryptionKeyRsa,

            string diskEncryptionKeySha256,

            string diskEncryptionServiceAccount,

            bool forceAttach,

            ImmutableArray<string> guestOsFeatures,

            ImmutableArray<Outputs.GetInstanceBootDiskInitializeParamResult> initializeParams,

            string @interface,

            string kmsKeySelfLink,

            string mode,

            string source)
        {
            AutoDelete = autoDelete;
            DeviceName = deviceName;
            DiskEncryptionKeyRaw = diskEncryptionKeyRaw;
            DiskEncryptionKeyRsa = diskEncryptionKeyRsa;
            DiskEncryptionKeySha256 = diskEncryptionKeySha256;
            DiskEncryptionServiceAccount = diskEncryptionServiceAccount;
            ForceAttach = forceAttach;
            GuestOsFeatures = guestOsFeatures;
            InitializeParams = initializeParams;
            Interface = @interface;
            KmsKeySelfLink = kmsKeySelfLink;
            Mode = mode;
            Source = source;
        }
    }
}
