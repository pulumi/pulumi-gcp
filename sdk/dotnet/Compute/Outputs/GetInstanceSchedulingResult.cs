// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Outputs
{

    [OutputType]
    public sealed class GetInstanceSchedulingResult
    {
        /// <summary>
        /// Specifies if the instance should be
        /// restarted if it was terminated by Compute Engine (not a user).
        /// </summary>
        public readonly bool AutomaticRestart;
        /// <summary>
        /// Describe the type of termination action for `SPOT` VM. Can be `STOP` or `DELETE`.  Read more on [here](https://cloud.google.com/compute/docs/instances/create-use-spot)
        /// </summary>
        public readonly string InstanceTerminationAction;
        public readonly int MinNodeCpus;
        public readonly ImmutableArray<Outputs.GetInstanceSchedulingNodeAffinityResult> NodeAffinities;
        /// <summary>
        /// Describes maintenance behavior for the
        /// instance. One of `MIGRATE` or `TERMINATE`, for more info, read
        /// [here](https://cloud.google.com/compute/docs/instances/setting-instance-scheduling-options)
        /// </summary>
        public readonly string OnHostMaintenance;
        /// <summary>
        /// Whether the instance is preemptible.
        /// </summary>
        public readonly bool Preemptible;
        /// <summary>
        /// Describe the type of preemptible VM.
        /// </summary>
        public readonly string ProvisioningModel;

        [OutputConstructor]
        private GetInstanceSchedulingResult(
            bool automaticRestart,

            string instanceTerminationAction,

            int minNodeCpus,

            ImmutableArray<Outputs.GetInstanceSchedulingNodeAffinityResult> nodeAffinities,

            string onHostMaintenance,

            bool preemptible,

            string provisioningModel)
        {
            AutomaticRestart = automaticRestart;
            InstanceTerminationAction = instanceTerminationAction;
            MinNodeCpus = minNodeCpus;
            NodeAffinities = nodeAffinities;
            OnHostMaintenance = onHostMaintenance;
            Preemptible = preemptible;
            ProvisioningModel = provisioningModel;
        }
    }
}
