// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Outputs
{

    [OutputType]
    public sealed class RegionUrlMapPathMatcher
    {
        /// <summary>
        /// defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
        /// advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
        /// to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
        /// Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
        /// Only one of defaultRouteAction or defaultUrlRedirect must be set.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.RegionUrlMapPathMatcherDefaultRouteAction? DefaultRouteAction;
        /// <summary>
        /// A reference to a RegionBackendService resource. This will be used if
        /// none of the pathRules defined by this PathMatcher is matched by
        /// the URL's path portion.
        /// </summary>
        public readonly string? DefaultService;
        /// <summary>
        /// When none of the specified hostRules match, the request is redirected to a URL specified
        /// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        /// defaultRouteAction must not be set.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.RegionUrlMapPathMatcherDefaultUrlRedirect? DefaultUrlRedirect;
        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Specifies changes to request and response headers that need to take effect for the selected backendService.
        /// headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
        /// headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL.
        /// Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.RegionUrlMapPathMatcherHeaderAction? HeaderAction;
        /// <summary>
        /// The name to which this PathMatcher is referred by the HostRule.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of path rules. Use this list instead of routeRules when routing based
        /// on simple path matching is all that's required. The order by which path rules
        /// are specified does not matter. Matches are always done on the longest-path-first
        /// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
        /// irrespective of the order in which those paths appear in this list. Within a
        /// given pathMatcher, only one of pathRules or routeRules must be set.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.RegionUrlMapPathMatcherPathRule> PathRules;
        /// <summary>
        /// The list of ordered HTTP route rules. Use this list instead of pathRules when
        /// advanced route matching and routing actions are desired. The order of specifying
        /// routeRules matters: the first rule that matches will cause its specified routing
        /// action to take effect. Within a given pathMatcher, only one of pathRules or
        /// routeRules must be set. routeRules are not supported in UrlMaps intended for
        /// External load balancers.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.RegionUrlMapPathMatcherRouteRule> RouteRules;

        [OutputConstructor]
        private RegionUrlMapPathMatcher(
            Outputs.RegionUrlMapPathMatcherDefaultRouteAction? defaultRouteAction,

            string? defaultService,

            Outputs.RegionUrlMapPathMatcherDefaultUrlRedirect? defaultUrlRedirect,

            string? description,

            Outputs.RegionUrlMapPathMatcherHeaderAction? headerAction,

            string name,

            ImmutableArray<Outputs.RegionUrlMapPathMatcherPathRule> pathRules,

            ImmutableArray<Outputs.RegionUrlMapPathMatcherRouteRule> routeRules)
        {
            DefaultRouteAction = defaultRouteAction;
            DefaultService = defaultService;
            DefaultUrlRedirect = defaultUrlRedirect;
            Description = description;
            HeaderAction = headerAction;
            Name = name;
            PathRules = pathRules;
            RouteRules = routeRules;
        }
    }
}
