// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Outputs
{

    [OutputType]
    public sealed class InstanceFromTemplateScheduling
    {
        /// <summary>
        /// Specifies if the instance should be restarted if it was terminated by Compute Engine (not a user).
        /// </summary>
        public readonly bool? AutomaticRestart;
        /// <summary>
        /// Specifies the availability domain, which this instance should be scheduled on.
        /// </summary>
        public readonly int? AvailabilityDomain;
        /// <summary>
        /// Settings for the instance to perform a graceful shutdown.
        /// </summary>
        public readonly Outputs.InstanceFromTemplateSchedulingGracefulShutdown? GracefulShutdown;
        /// <summary>
        /// Specify the time in seconds for host error detection, the value must be within the range of [90, 330] with the increment of 30, if unset, the default behavior of host error recovery will be used.
        /// </summary>
        public readonly int? HostErrorTimeoutSeconds;
        /// <summary>
        /// Specifies the action GCE should take when SPOT VM is preempted.
        /// </summary>
        public readonly string? InstanceTerminationAction;
        /// <summary>
        /// Specifies the maximum amount of time a Local Ssd Vm should wait while
        ///   recovery of the Local Ssd state is attempted. Its value should be in
        ///   between 0 and 168 hours with hour granularity and the default value being 1
        ///   hour.
        /// </summary>
        public readonly Outputs.InstanceFromTemplateSchedulingLocalSsdRecoveryTimeout? LocalSsdRecoveryTimeout;
        /// <summary>
        /// Specifies the frequency of planned maintenance events. The accepted values are: PERIODIC
        /// </summary>
        public readonly string? MaintenanceInterval;
        /// <summary>
        /// The timeout for new network connections to hosts.
        /// </summary>
        public readonly Outputs.InstanceFromTemplateSchedulingMaxRunDuration? MaxRunDuration;
        public readonly int? MinNodeCpus;
        /// <summary>
        /// Specifies node affinities or anti-affinities to determine which sole-tenant nodes your instances and managed instance groups will use as host systems.
        /// </summary>
        public readonly ImmutableArray<Outputs.InstanceFromTemplateSchedulingNodeAffinity> NodeAffinities;
        /// <summary>
        /// Describes maintenance behavior for the instance. One of MIGRATE or TERMINATE,
        /// </summary>
        public readonly string? OnHostMaintenance;
        /// <summary>
        /// Defines the behaviour for instances with the instance_termination_action.
        /// </summary>
        public readonly Outputs.InstanceFromTemplateSchedulingOnInstanceStopAction? OnInstanceStopAction;
        /// <summary>
        /// Whether the instance is preemptible.
        /// </summary>
        public readonly bool? Preemptible;
        /// <summary>
        /// Whether the instance is spot. If this is set as SPOT.
        /// </summary>
        public readonly string? ProvisioningModel;
        /// <summary>
        /// Default is false and there will be 120 seconds between GCE ACPI G2 Soft Off and ACPI G3 Mechanical Off for Standard VMs and 30 seconds for Spot VMs.
        /// </summary>
        public readonly bool? SkipGuestOsShutdown;
        /// <summary>
        /// Specifies the timestamp, when the instance will be terminated,
        /// in RFC3339 text format. If specified, the instance termination action
        /// will be performed at the termination time.
        /// </summary>
        public readonly string? TerminationTime;

        [OutputConstructor]
        private InstanceFromTemplateScheduling(
            bool? automaticRestart,

            int? availabilityDomain,

            Outputs.InstanceFromTemplateSchedulingGracefulShutdown? gracefulShutdown,

            int? hostErrorTimeoutSeconds,

            string? instanceTerminationAction,

            Outputs.InstanceFromTemplateSchedulingLocalSsdRecoveryTimeout? localSsdRecoveryTimeout,

            string? maintenanceInterval,

            Outputs.InstanceFromTemplateSchedulingMaxRunDuration? maxRunDuration,

            int? minNodeCpus,

            ImmutableArray<Outputs.InstanceFromTemplateSchedulingNodeAffinity> nodeAffinities,

            string? onHostMaintenance,

            Outputs.InstanceFromTemplateSchedulingOnInstanceStopAction? onInstanceStopAction,

            bool? preemptible,

            string? provisioningModel,

            bool? skipGuestOsShutdown,

            string? terminationTime)
        {
            AutomaticRestart = automaticRestart;
            AvailabilityDomain = availabilityDomain;
            GracefulShutdown = gracefulShutdown;
            HostErrorTimeoutSeconds = hostErrorTimeoutSeconds;
            InstanceTerminationAction = instanceTerminationAction;
            LocalSsdRecoveryTimeout = localSsdRecoveryTimeout;
            MaintenanceInterval = maintenanceInterval;
            MaxRunDuration = maxRunDuration;
            MinNodeCpus = minNodeCpus;
            NodeAffinities = nodeAffinities;
            OnHostMaintenance = onHostMaintenance;
            OnInstanceStopAction = onInstanceStopAction;
            Preemptible = preemptible;
            ProvisioningModel = provisioningModel;
            SkipGuestOsShutdown = skipGuestOsShutdown;
            TerminationTime = terminationTime;
        }
    }
}
