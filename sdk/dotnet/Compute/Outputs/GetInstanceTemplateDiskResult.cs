// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Outputs
{

    [OutputType]
    public sealed class GetInstanceTemplateDiskResult
    {
        /// <summary>
        /// Whether or not the disk should be auto-deleted.
        /// This defaults to true.
        /// </summary>
        public readonly bool AutoDelete;
        /// <summary>
        /// Indicates that this is a boot disk.
        /// </summary>
        public readonly bool Boot;
        /// <summary>
        /// A unique device name that is reflected into the
        /// /dev/  tree of a Linux operating system running within the instance. If not
        /// specified, the server chooses a default device name to apply to this disk.
        /// </summary>
        public readonly string DeviceName;
        /// <summary>
        /// Encrypts or decrypts a disk using a customer-supplied encryption key.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceTemplateDiskDiskEncryptionKeyResult> DiskEncryptionKeys;
        /// <summary>
        /// Name of the disk. When not provided, this defaults
        /// to the name of the instance.
        /// </summary>
        public readonly string DiskName;
        /// <summary>
        /// The size of the image in gigabytes. If not
        /// specified, it will inherit the size of its base image. For SCRATCH disks,
        /// the size must be exactly 375GB.
        /// </summary>
        public readonly int DiskSizeGb;
        /// <summary>
        /// The GCE disk type. Such as `"pd-ssd"`, `"local-ssd"`,
        /// `"pd-balanced"` or `"pd-standard"`.
        /// </summary>
        public readonly string DiskType;
        /// <summary>
        /// Specifies the disk interface to use for attaching this disk,
        /// which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI
        /// and the request will fail if you attempt to attach a persistent disk in any other format
        /// than SCSI. Local SSDs can use either NVME or SCSI.
        /// </summary>
        public readonly string Interface;
        /// <summary>
        /// (Optional) A set of ket/value label pairs to assign to disk created from
        /// this template
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The mode in which to attach this disk, either READ_WRITE
        /// or READ_ONLY. If you are attaching or creating a boot disk, this must
        /// read-write mode.
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// (Optional) -- A list of short names of resource policies to attach to this disk for automatic snapshot creations. Currently a max of 1 resource policy is supported.
        /// </summary>
        public readonly ImmutableArray<string> ResourcePolicies;
        /// <summary>
        /// The name (**not self_link**)
        /// of the disk (such as those managed by `gcp.compute.Disk`) to attach.
        /// &gt; **Note:** Either `source` or `source_image` is **required** in a disk block unless the disk type is `local-ssd`. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// The image from which to
        /// initialize this disk. This can be one of: the image's `self_link`,
        /// `projects/{project}/global/images/{image}`,
        /// `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
        /// `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
        /// `{project}/{image}`, `{family}`, or `{image}`.
        /// &gt; **Note:** Either `source` or `source_image` is **required** in a disk block unless the disk type is `local-ssd`. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
        /// </summary>
        public readonly string SourceImage;
        public readonly ImmutableArray<Outputs.GetInstanceTemplateDiskSourceImageEncryptionKeyResult> SourceImageEncryptionKeys;
        public readonly string SourceSnapshot;
        public readonly ImmutableArray<Outputs.GetInstanceTemplateDiskSourceSnapshotEncryptionKeyResult> SourceSnapshotEncryptionKeys;
        /// <summary>
        /// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetInstanceTemplateDiskResult(
            bool autoDelete,

            bool boot,

            string deviceName,

            ImmutableArray<Outputs.GetInstanceTemplateDiskDiskEncryptionKeyResult> diskEncryptionKeys,

            string diskName,

            int diskSizeGb,

            string diskType,

            string @interface,

            ImmutableDictionary<string, string> labels,

            string mode,

            ImmutableArray<string> resourcePolicies,

            string source,

            string sourceImage,

            ImmutableArray<Outputs.GetInstanceTemplateDiskSourceImageEncryptionKeyResult> sourceImageEncryptionKeys,

            string sourceSnapshot,

            ImmutableArray<Outputs.GetInstanceTemplateDiskSourceSnapshotEncryptionKeyResult> sourceSnapshotEncryptionKeys,

            string type)
        {
            AutoDelete = autoDelete;
            Boot = boot;
            DeviceName = deviceName;
            DiskEncryptionKeys = diskEncryptionKeys;
            DiskName = diskName;
            DiskSizeGb = diskSizeGb;
            DiskType = diskType;
            Interface = @interface;
            Labels = labels;
            Mode = mode;
            ResourcePolicies = resourcePolicies;
            Source = source;
            SourceImage = sourceImage;
            SourceImageEncryptionKeys = sourceImageEncryptionKeys;
            SourceSnapshot = sourceSnapshot;
            SourceSnapshotEncryptionKeys = sourceSnapshotEncryptionKeys;
            Type = type;
        }
    }
}
