// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Outputs
{

    [OutputType]
    public sealed class RegionNetworkFirewallPolicyWithRulesRuleMatch
    {
        /// <summary>
        /// Address groups which should be matched against the traffic destination.
        /// Maximum number of destination address groups is 10.
        /// </summary>
        public readonly ImmutableArray<string> DestAddressGroups;
        /// <summary>
        /// Fully Qualified Domain Name (FQDN) which should be matched against
        /// traffic destination. Maximum number of destination fqdn allowed is 100.
        /// </summary>
        public readonly ImmutableArray<string> DestFqdns;
        /// <summary>
        /// Destination IP address range in CIDR format. Required for
        /// EGRESS rules.
        /// </summary>
        public readonly ImmutableArray<string> DestIpRanges;
        /// <summary>
        /// Network scope of the traffic destination.
        /// Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
        /// </summary>
        public readonly string? DestNetworkScope;
        /// <summary>
        /// Region codes whose IP addresses will be used to match for destination
        /// of traffic. Should be specified as 2 letter country code defined as per
        /// ISO 3166 alpha-2 country codes. ex."US"
        /// Maximum number of destination region codes allowed is 5000.
        /// </summary>
        public readonly ImmutableArray<string> DestRegionCodes;
        /// <summary>
        /// Names of Network Threat Intelligence lists.
        /// The IPs in these lists will be matched against traffic destination.
        /// </summary>
        public readonly ImmutableArray<string> DestThreatIntelligences;
        /// <summary>
        /// Pairs of IP protocols and ports that the rule should match.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.RegionNetworkFirewallPolicyWithRulesRuleMatchLayer4Config> Layer4Configs;
        /// <summary>
        /// Address groups which should be matched against the traffic source.
        /// Maximum number of source address groups is 10.
        /// </summary>
        public readonly ImmutableArray<string> SrcAddressGroups;
        /// <summary>
        /// Fully Qualified Domain Name (FQDN) which should be matched against
        /// traffic source. Maximum number of source fqdn allowed is 100.
        /// </summary>
        public readonly ImmutableArray<string> SrcFqdns;
        /// <summary>
        /// Source IP address range in CIDR format. Required for
        /// INGRESS rules.
        /// </summary>
        public readonly ImmutableArray<string> SrcIpRanges;
        /// <summary>
        /// Network scope of the traffic source.
        /// Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
        /// </summary>
        public readonly string? SrcNetworkScope;
        /// <summary>
        /// Networks of the traffic source. It can be either a full or partial url.
        /// </summary>
        public readonly ImmutableArray<string> SrcNetworks;
        /// <summary>
        /// Region codes whose IP addresses will be used to match for source
        /// of traffic. Should be specified as 2 letter country code defined as per
        /// ISO 3166 alpha-2 country codes. ex."US"
        /// Maximum number of source region codes allowed is 5000.
        /// </summary>
        public readonly ImmutableArray<string> SrcRegionCodes;
        /// <summary>
        /// List of secure tag values, which should be matched at the source
        /// of the traffic.
        /// For INGRESS rule, if all the &lt;code&gt;srcSecureTag&lt;/code&gt; are INEFFECTIVE,
        /// and there is no &lt;code&gt;srcIpRange&lt;/code&gt;, this rule will be ignored.
        /// Maximum number of source tag values allowed is 256.
        /// Structure is documented below.
        /// 
        /// 
        /// &lt;a name="NestedRuleRuleMatchLayer4Config"&gt;&lt;/a&gt;The `Layer4Config` block supports:
        /// </summary>
        public readonly ImmutableArray<Outputs.RegionNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTag> SrcSecureTags;
        /// <summary>
        /// Names of Network Threat Intelligence lists.
        /// The IPs in these lists will be matched against traffic source.
        /// </summary>
        public readonly ImmutableArray<string> SrcThreatIntelligences;

        [OutputConstructor]
        private RegionNetworkFirewallPolicyWithRulesRuleMatch(
            ImmutableArray<string> destAddressGroups,

            ImmutableArray<string> destFqdns,

            ImmutableArray<string> destIpRanges,

            string? destNetworkScope,

            ImmutableArray<string> destRegionCodes,

            ImmutableArray<string> destThreatIntelligences,

            ImmutableArray<Outputs.RegionNetworkFirewallPolicyWithRulesRuleMatchLayer4Config> layer4Configs,

            ImmutableArray<string> srcAddressGroups,

            ImmutableArray<string> srcFqdns,

            ImmutableArray<string> srcIpRanges,

            string? srcNetworkScope,

            ImmutableArray<string> srcNetworks,

            ImmutableArray<string> srcRegionCodes,

            ImmutableArray<Outputs.RegionNetworkFirewallPolicyWithRulesRuleMatchSrcSecureTag> srcSecureTags,

            ImmutableArray<string> srcThreatIntelligences)
        {
            DestAddressGroups = destAddressGroups;
            DestFqdns = destFqdns;
            DestIpRanges = destIpRanges;
            DestNetworkScope = destNetworkScope;
            DestRegionCodes = destRegionCodes;
            DestThreatIntelligences = destThreatIntelligences;
            Layer4Configs = layer4Configs;
            SrcAddressGroups = srcAddressGroups;
            SrcFqdns = srcFqdns;
            SrcIpRanges = srcIpRanges;
            SrcNetworkScope = srcNetworkScope;
            SrcNetworks = srcNetworks;
            SrcRegionCodes = srcRegionCodes;
            SrcSecureTags = srcSecureTags;
            SrcThreatIntelligences = srcThreatIntelligences;
        }
    }
}
