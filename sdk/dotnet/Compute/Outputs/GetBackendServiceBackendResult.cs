// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Outputs
{

    [OutputType]
    public sealed class GetBackendServiceBackendResult
    {
        /// <summary>
        /// Specifies the balancing mode for this backend.
        /// 
        /// For global HTTP(S) or TCP/SSL load balancing, the default is
        /// UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S)),
        /// CUSTOM_METRICS (for HTTP(s)) and CONNECTION (for TCP/SSL).
        /// 
        /// See the [Backend Services Overview](https://cloud.google.com/load-balancing/docs/backend-service#balancing-mode)
        /// for an explanation of load balancing modes. Default value: "UTILIZATION" Possible values: ["UTILIZATION", "RATE", "CONNECTION", "CUSTOM_METRICS"]
        /// </summary>
        public readonly string BalancingMode;
        /// <summary>
        /// A multiplier applied to the group's maximum servicing capacity
        /// (based on UTILIZATION, RATE or CONNECTION).
        /// 
        /// Default value is 1, which means the group will serve up to 100%
        /// of its configured capacity (depending on balancingMode). A
        /// setting of 0 means the group is completely drained, offering
        /// 0% of its available Capacity. Valid range is [0.0,1.0].
        /// </summary>
        public readonly double CapacityScaler;
        /// <summary>
        /// The set of custom metrics that are used for &lt;code&gt;CUSTOM_METRICS&lt;/code&gt; BalancingMode.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackendServiceBackendCustomMetricResult> CustomMetrics;
        /// <summary>
        /// Textual description for the Backend Service.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The fully-qualified URL of an Instance Group or Network Endpoint
        /// Group resource. In case of instance group this defines the list
        /// of instances that serve traffic. Member virtual machine
        /// instances from each instance group must live in the same zone as
        /// the instance group itself. No two backends in a backend service
        /// are allowed to use same Instance Group resource.
        /// 
        /// For Network Endpoint Groups this defines list of endpoints. All
        /// endpoints of Network Endpoint Group must be hosted on instances
        /// located in the same zone as the Network Endpoint Group.
        /// 
        /// Backend services cannot mix Instance Group and
        /// Network Endpoint Group backends.
        /// 
        /// Note that you must specify an Instance Group or Network Endpoint
        /// Group resource using the fully-qualified URL, rather than a
        /// partial URL.
        /// </summary>
        public readonly string Group;
        /// <summary>
        /// The max number of simultaneous connections for the group. Can
        /// be used with either CONNECTION or UTILIZATION balancing modes.
        /// 
        /// For CONNECTION mode, either maxConnections or one
        /// of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
        /// as appropriate for group type, must be set.
        /// </summary>
        public readonly int MaxConnections;
        /// <summary>
        /// The max number of simultaneous connections that a single backend
        /// network endpoint can handle. This is used to calculate the
        /// capacity of the group. Can be used in either CONNECTION or
        /// UTILIZATION balancing modes.
        /// 
        /// For CONNECTION mode, either
        /// maxConnections or maxConnectionsPerEndpoint must be set.
        /// </summary>
        public readonly int MaxConnectionsPerEndpoint;
        /// <summary>
        /// The max number of simultaneous connections that a single
        /// backend instance can handle. This is used to calculate the
        /// capacity of the group. Can be used in either CONNECTION or
        /// UTILIZATION balancing modes.
        /// 
        /// For CONNECTION mode, either maxConnections or
        /// maxConnectionsPerInstance must be set.
        /// </summary>
        public readonly int MaxConnectionsPerInstance;
        /// <summary>
        /// Defines a maximum number of in-flight requests for the whole NEG
        /// or instance group. Not available if backend's balancingMode is RATE
        /// or CONNECTION.
        /// </summary>
        public readonly int MaxInFlightRequests;
        /// <summary>
        /// Defines a maximum number of in-flight requests for a single endpoint.
        /// Not available if backend's balancingMode is RATE or CONNECTION.
        /// </summary>
        public readonly int MaxInFlightRequestsPerEndpoint;
        /// <summary>
        /// Defines a maximum number of in-flight requests for a single VM.
        /// Not available if backend's balancingMode is RATE or CONNECTION.
        /// </summary>
        public readonly int MaxInFlightRequestsPerInstance;
        /// <summary>
        /// The max requests per second (RPS) of the group.
        /// 
        /// Can be used with either RATE or UTILIZATION balancing modes,
        /// but required if RATE mode. For RATE mode, either maxRate or one
        /// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
        /// group type, must be set.
        /// </summary>
        public readonly int MaxRate;
        /// <summary>
        /// The max requests per second (RPS) that a single backend network
        /// endpoint can handle. This is used to calculate the capacity of
        /// the group. Can be used in either balancing mode. For RATE mode,
        /// either maxRate or maxRatePerEndpoint must be set.
        /// </summary>
        public readonly double MaxRatePerEndpoint;
        /// <summary>
        /// The max requests per second (RPS) that a single backend
        /// instance can handle. This is used to calculate the capacity of
        /// the group. Can be used in either balancing mode. For RATE mode,
        /// either maxRate or maxRatePerInstance must be set.
        /// </summary>
        public readonly double MaxRatePerInstance;
        /// <summary>
        /// Used when balancingMode is UTILIZATION. This ratio defines the
        /// CPU utilization target for the group. Valid range is [0.0, 1.0].
        /// </summary>
        public readonly double MaxUtilization;
        /// <summary>
        /// This field indicates whether this backend should be fully utilized before sending traffic to backends
        /// with default preference. This field cannot be set when loadBalancingScheme is set to 'EXTERNAL'. The possible values are:
        ///   - PREFERRED: Backends with this preference level will be filled up to their capacity limits first,
        ///     based on RTT.
        ///   - DEFAULT: If preferred backends don't have enough capacity, backends in this layer would be used and
        ///     traffic would be assigned based on the load balancing algorithm you use. This is the default Possible values: ["PREFERRED", "DEFAULT"]
        /// </summary>
        public readonly string Preference;
        /// <summary>
        /// This field specifies how long a connection should be kept alive for:
        /// - LONG: Most of the requests are expected to take more than multiple
        ///   seconds to finish.
        /// - SHORT: Most requests are expected to finish with a sub-second latency. Possible values: ["LONG", "SHORT"]
        /// </summary>
        public readonly string TrafficDuration;

        [OutputConstructor]
        private GetBackendServiceBackendResult(
            string balancingMode,

            double capacityScaler,

            ImmutableArray<Outputs.GetBackendServiceBackendCustomMetricResult> customMetrics,

            string description,

            string group,

            int maxConnections,

            int maxConnectionsPerEndpoint,

            int maxConnectionsPerInstance,

            int maxInFlightRequests,

            int maxInFlightRequestsPerEndpoint,

            int maxInFlightRequestsPerInstance,

            int maxRate,

            double maxRatePerEndpoint,

            double maxRatePerInstance,

            double maxUtilization,

            string preference,

            string trafficDuration)
        {
            BalancingMode = balancingMode;
            CapacityScaler = capacityScaler;
            CustomMetrics = customMetrics;
            Description = description;
            Group = group;
            MaxConnections = maxConnections;
            MaxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
            MaxConnectionsPerInstance = maxConnectionsPerInstance;
            MaxInFlightRequests = maxInFlightRequests;
            MaxInFlightRequestsPerEndpoint = maxInFlightRequestsPerEndpoint;
            MaxInFlightRequestsPerInstance = maxInFlightRequestsPerInstance;
            MaxRate = maxRate;
            MaxRatePerEndpoint = maxRatePerEndpoint;
            MaxRatePerInstance = maxRatePerInstance;
            MaxUtilization = maxUtilization;
            Preference = preference;
            TrafficDuration = trafficDuration;
        }
    }
}
