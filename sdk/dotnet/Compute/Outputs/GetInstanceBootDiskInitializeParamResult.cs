// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Outputs
{

    [OutputType]
    public sealed class GetInstanceBootDiskInitializeParamResult
    {
        /// <summary>
        /// The architecture of the disk. One of "X86_64" or "ARM64".
        /// </summary>
        public readonly string Architecture;
        /// <summary>
        /// A flag to enable confidential compute mode on boot disk
        /// </summary>
        public readonly bool EnableConfidentialCompute;
        /// <summary>
        /// The image from which this disk was initialised.
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// A set of key/value label pairs assigned to the disk.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle.
        /// </summary>
        public readonly int ProvisionedIops;
        /// <summary>
        /// Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle.
        /// </summary>
        public readonly int ProvisionedThroughput;
        /// <summary>
        /// A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
        /// </summary>
        public readonly ImmutableDictionary<string, string> ResourceManagerTags;
        /// <summary>
        /// A list of SelfLinks to resource policies attached to the selected `BootDisk`
        /// </summary>
        public readonly ImmutableArray<string> ResourcePolicies;
        /// <summary>
        /// The size of the image in gigabytes.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The snapshot from which this disk was initialised.
        /// </summary>
        public readonly string Snapshot;
        /// <summary>
        /// The encryption key used to decrypt the source image.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceBootDiskInitializeParamSourceImageEncryptionKeyResult> SourceImageEncryptionKeys;
        /// <summary>
        /// The encryption key used to decrypt the source snapshot.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceBootDiskInitializeParamSourceSnapshotEncryptionKeyResult> SourceSnapshotEncryptionKeys;
        /// <summary>
        /// The URL of the storage pool in which the new disk is created
        /// </summary>
        public readonly string StoragePool;
        /// <summary>
        /// The accelerator type resource exposed to this instance. E.g. `nvidia-tesla-k80`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetInstanceBootDiskInitializeParamResult(
            string architecture,

            bool enableConfidentialCompute,

            string image,

            ImmutableDictionary<string, string> labels,

            int provisionedIops,

            int provisionedThroughput,

            ImmutableDictionary<string, string> resourceManagerTags,

            ImmutableArray<string> resourcePolicies,

            int size,

            string snapshot,

            ImmutableArray<Outputs.GetInstanceBootDiskInitializeParamSourceImageEncryptionKeyResult> sourceImageEncryptionKeys,

            ImmutableArray<Outputs.GetInstanceBootDiskInitializeParamSourceSnapshotEncryptionKeyResult> sourceSnapshotEncryptionKeys,

            string storagePool,

            string type)
        {
            Architecture = architecture;
            EnableConfidentialCompute = enableConfidentialCompute;
            Image = image;
            Labels = labels;
            ProvisionedIops = provisionedIops;
            ProvisionedThroughput = provisionedThroughput;
            ResourceManagerTags = resourceManagerTags;
            ResourcePolicies = resourcePolicies;
            Size = size;
            Snapshot = snapshot;
            SourceImageEncryptionKeys = sourceImageEncryptionKeys;
            SourceSnapshotEncryptionKeys = sourceSnapshotEncryptionKeys;
            StoragePool = storagePool;
            Type = type;
        }
    }
}
