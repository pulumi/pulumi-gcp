// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute.Outputs
{

    [OutputType]
    public sealed class RegionAutoscalerAutoscalingPolicyMetric
    {
        public readonly string? Filter;
        /// <summary>
        /// The identifier (type) of the Stackdriver Monitoring metric.
        /// The metric cannot have negative values.
        /// The metric must have a value type of INT64 or DOUBLE.
        /// </summary>
        public readonly string Name;
        public readonly double? SingleInstanceAssignment;
        /// <summary>
        /// The target value of the metric that autoscaler should
        /// maintain. This must be a positive value. A utilization
        /// metric scales number of virtual machines handling requests
        /// to increase or decrease proportionally to the metric.
        /// For example, a good metric to use as a utilizationTarget is
        /// www.googleapis.com/compute/instance/network/received_bytes_count.
        /// The autoscaler will work to keep this value constant for each
        /// of the instances.
        /// </summary>
        public readonly double? Target;
        /// <summary>
        /// Defines how target utilization value is expressed for a
        /// Stackdriver Monitoring metric.
        /// Possible values are `GAUGE`, `DELTA_PER_SECOND`, and `DELTA_PER_MINUTE`.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private RegionAutoscalerAutoscalingPolicyMetric(
            string? filter,

            string name,

            double? singleInstanceAssignment,

            double? target,

            string? type)
        {
            Filter = filter;
            Name = name;
            SingleInstanceAssignment = singleInstanceAssignment;
            Target = target;
            Type = type;
        }
    }
}
