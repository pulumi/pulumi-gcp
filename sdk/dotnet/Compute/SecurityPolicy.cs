// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_security_policy.html.markdown.
    /// </summary>
    public partial class SecurityPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// An optional description of this security policy. Max size is 2048.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// The name of the security policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The set of rules that belong to this policy. There must always be a default
        /// rule (rule with priority 2147483647 and match "\*"). If no rules are provided when creating a
        /// security policy, a default rule with action "allow" will be added. Structure is documented below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.SecurityPolicyRules>> Rules { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityPolicy(string name, SecurityPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:compute/securityPolicy:SecurityPolicy", name, args, MakeResourceOptions(options, ""))
        {
        }

        private SecurityPolicy(string name, Input<string> id, SecurityPolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/securityPolicy:SecurityPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityPolicy Get(string name, Input<string> id, SecurityPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityPolicy(name, id, state, options);
        }
    }

    public sealed class SecurityPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional description of this security policy. Max size is 2048.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the security policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("rules")]
        private InputList<Inputs.SecurityPolicyRulesArgs>? _rules;

        /// <summary>
        /// The set of rules that belong to this policy. There must always be a default
        /// rule (rule with priority 2147483647 and match "\*"). If no rules are provided when creating a
        /// security policy, a default rule with action "allow" will be added. Structure is documented below.
        /// </summary>
        public InputList<Inputs.SecurityPolicyRulesArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.SecurityPolicyRulesArgs>());
            set => _rules = value;
        }

        public SecurityPolicyArgs()
        {
        }
    }

    public sealed class SecurityPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional description of this security policy. Max size is 2048.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Fingerprint of this resource.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// The name of the security policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("rules")]
        private InputList<Inputs.SecurityPolicyRulesGetArgs>? _rules;

        /// <summary>
        /// The set of rules that belong to this policy. There must always be a default
        /// rule (rule with priority 2147483647 and match "\*"). If no rules are provided when creating a
        /// security policy, a default rule with action "allow" will be added. Structure is documented below.
        /// </summary>
        public InputList<Inputs.SecurityPolicyRulesGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.SecurityPolicyRulesGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        public SecurityPolicyState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class SecurityPolicyRulesArgs : Pulumi.ResourceArgs
    {
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// An optional description of this security policy. Max size is 2048.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("match", required: true)]
        public Input<SecurityPolicyRulesMatchArgs> Match { get; set; } = null!;

        [Input("preview")]
        public Input<bool>? Preview { get; set; }

        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        public SecurityPolicyRulesArgs()
        {
        }
    }

    public sealed class SecurityPolicyRulesGetArgs : Pulumi.ResourceArgs
    {
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// An optional description of this security policy. Max size is 2048.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("match", required: true)]
        public Input<SecurityPolicyRulesMatchGetArgs> Match { get; set; } = null!;

        [Input("preview")]
        public Input<bool>? Preview { get; set; }

        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        public SecurityPolicyRulesGetArgs()
        {
        }
    }

    public sealed class SecurityPolicyRulesMatchArgs : Pulumi.ResourceArgs
    {
        [Input("config", required: true)]
        public Input<SecurityPolicyRulesMatchConfigArgs> Config { get; set; } = null!;

        [Input("versionedExpr", required: true)]
        public Input<string> VersionedExpr { get; set; } = null!;

        public SecurityPolicyRulesMatchArgs()
        {
        }
    }

    public sealed class SecurityPolicyRulesMatchConfigArgs : Pulumi.ResourceArgs
    {
        [Input("srcIpRanges", required: true)]
        private InputList<string>? _srcIpRanges;
        public InputList<string> SrcIpRanges
        {
            get => _srcIpRanges ?? (_srcIpRanges = new InputList<string>());
            set => _srcIpRanges = value;
        }

        public SecurityPolicyRulesMatchConfigArgs()
        {
        }
    }

    public sealed class SecurityPolicyRulesMatchConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("srcIpRanges", required: true)]
        private InputList<string>? _srcIpRanges;
        public InputList<string> SrcIpRanges
        {
            get => _srcIpRanges ?? (_srcIpRanges = new InputList<string>());
            set => _srcIpRanges = value;
        }

        public SecurityPolicyRulesMatchConfigGetArgs()
        {
        }
    }

    public sealed class SecurityPolicyRulesMatchGetArgs : Pulumi.ResourceArgs
    {
        [Input("config", required: true)]
        public Input<SecurityPolicyRulesMatchConfigGetArgs> Config { get; set; } = null!;

        [Input("versionedExpr", required: true)]
        public Input<string> VersionedExpr { get; set; } = null!;

        public SecurityPolicyRulesMatchGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class SecurityPolicyRules
    {
        public readonly string Action;
        /// <summary>
        /// An optional description of this security policy. Max size is 2048.
        /// </summary>
        public readonly string? Description;
        public readonly SecurityPolicyRulesMatch Match;
        public readonly bool? Preview;
        public readonly int Priority;

        [OutputConstructor]
        private SecurityPolicyRules(
            string action,
            string? description,
            SecurityPolicyRulesMatch match,
            bool? preview,
            int priority)
        {
            Action = action;
            Description = description;
            Match = match;
            Preview = preview;
            Priority = priority;
        }
    }

    [OutputType]
    public sealed class SecurityPolicyRulesMatch
    {
        public readonly SecurityPolicyRulesMatchConfig Config;
        public readonly string VersionedExpr;

        [OutputConstructor]
        private SecurityPolicyRulesMatch(
            SecurityPolicyRulesMatchConfig config,
            string versionedExpr)
        {
            Config = config;
            VersionedExpr = versionedExpr;
        }
    }

    [OutputType]
    public sealed class SecurityPolicyRulesMatchConfig
    {
        public readonly ImmutableArray<string> SrcIpRanges;

        [OutputConstructor]
        private SecurityPolicyRulesMatchConfig(ImmutableArray<string> srcIpRanges)
        {
            SrcIpRanges = srcIpRanges;
        }
    }
    }
}
