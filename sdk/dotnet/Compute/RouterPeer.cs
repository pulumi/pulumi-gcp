// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// BGP information that must be configured into the routing stack to
    /// establish BGP peering. This information must specify the peer ASN
    /// and either the interface name, IP address, or peer IP address.
    /// Please refer to RFC4273.
    /// 
    /// To get more information about RouterBgpPeer, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/routers)
    /// * How-to Guides
    ///   * [Google Cloud Router](https://cloud.google.com/router/docs/)
    /// 
    /// ## Example Usage
    /// 
    /// ### Router Peer Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var peer = new Gcp.Compute.RouterPeer("peer", new()
    ///     {
    ///         Name = "my-router-peer",
    ///         Router = "my-router",
    ///         Region = "us-central1",
    ///         PeerAsn = 65513,
    ///         AdvertisedRoutePriority = 100,
    ///         Interface = "interface-1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Router Peer Disabled
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var peer = new Gcp.Compute.RouterPeer("peer", new()
    ///     {
    ///         Name = "my-router-peer",
    ///         Router = "my-router",
    ///         Region = "us-central1",
    ///         PeerIpAddress = "169.254.1.2",
    ///         PeerAsn = 65513,
    ///         AdvertisedRoutePriority = 100,
    ///         Interface = "interface-1",
    ///         Enable = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Router Peer Bfd
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var peer = new Gcp.Compute.RouterPeer("peer", new()
    ///     {
    ///         Name = "my-router-peer",
    ///         Router = "my-router",
    ///         Region = "us-central1",
    ///         PeerIpAddress = "169.254.1.2",
    ///         PeerAsn = 65513,
    ///         AdvertisedRoutePriority = 100,
    ///         Interface = "interface-1",
    ///         Bfd = new Gcp.Compute.Inputs.RouterPeerBfdArgs
    ///         {
    ///             MinReceiveInterval = 1000,
    ///             MinTransmitInterval = 1000,
    ///             Multiplier = 5,
    ///             SessionInitializationMode = "ACTIVE",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ## 
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Name = "my-router-net",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnetwork = new Gcp.Compute.Subnetwork("subnetwork", new()
    ///     {
    ///         Name = "my-router-sub",
    ///         Network = network.SelfLink,
    ///         IpCidrRange = "10.0.0.0/16",
    ///         Region = "us-central1",
    ///     });
    /// 
    ///     var addrIntf = new Gcp.Compute.Address("addr_intf", new()
    ///     {
    ///         Name = "my-router-addr-intf",
    ///         Region = subnetwork.Region,
    ///         Subnetwork = subnetwork.Id,
    ///         AddressType = "INTERNAL",
    ///     });
    /// 
    ///     var addrIntfRedundant = new Gcp.Compute.Address("addr_intf_redundant", new()
    ///     {
    ///         Name = "my-router-addr-intf-red",
    ///         Region = subnetwork.Region,
    ///         Subnetwork = subnetwork.Id,
    ///         AddressType = "INTERNAL",
    ///     });
    /// 
    ///     var addrPeer = new Gcp.Compute.Address("addr_peer", new()
    ///     {
    ///         Name = "my-router-addr-peer",
    ///         Region = subnetwork.Region,
    ///         Subnetwork = subnetwork.Id,
    ///         AddressType = "INTERNAL",
    ///     });
    /// 
    ///     var instance = new Gcp.Compute.Instance("instance", new()
    ///     {
    ///         Name = "router-appliance",
    ///         Zone = "us-central1-a",
    ///         MachineType = "e2-medium",
    ///         CanIpForward = true,
    ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
    ///         {
    ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
    ///             {
    ///                 Image = "debian-cloud/debian-11",
    ///             },
    ///         },
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
    ///             {
    ///                 NetworkIp = addrPeer.IPAddress,
    ///                 Subnetwork = subnetwork.SelfLink,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var hub = new Gcp.NetworkConnectivity.Hub("hub", new()
    ///     {
    ///         Name = "my-router-hub",
    ///     });
    /// 
    ///     var spoke = new Gcp.NetworkConnectivity.Spoke("spoke", new()
    ///     {
    ///         Name = "my-router-spoke",
    ///         Location = subnetwork.Region,
    ///         Hub = hub.Id,
    ///         LinkedRouterApplianceInstances = new Gcp.NetworkConnectivity.Inputs.SpokeLinkedRouterApplianceInstancesArgs
    ///         {
    ///             Instances = new[]
    ///             {
    ///                 new Gcp.NetworkConnectivity.Inputs.SpokeLinkedRouterApplianceInstancesInstanceArgs
    ///                 {
    ///                     VirtualMachine = instance.SelfLink,
    ///                     IpAddress = addrPeer.IPAddress,
    ///                 },
    ///             },
    ///             SiteToSiteDataTransfer = false,
    ///         },
    ///     });
    /// 
    ///     var router = new Gcp.Compute.Router("router", new()
    ///     {
    ///         Name = "my-router-router",
    ///         Region = subnetwork.Region,
    ///         Network = network.SelfLink,
    ///         Bgp = new Gcp.Compute.Inputs.RouterBgpArgs
    ///         {
    ///             Asn = 64514,
    ///         },
    ///     });
    /// 
    ///     var interfaceRedundant = new Gcp.Compute.RouterInterface("interface_redundant", new()
    ///     {
    ///         Name = "my-router-intf-red",
    ///         Region = router.Region,
    ///         Router = router.Name,
    ///         Subnetwork = subnetwork.SelfLink,
    ///         PrivateIpAddress = addrIntfRedundant.IPAddress,
    ///     });
    /// 
    ///     var @interface = new Gcp.Compute.RouterInterface("interface", new()
    ///     {
    ///         Name = "my-router-intf",
    ///         Region = router.Region,
    ///         Router = router.Name,
    ///         Subnetwork = subnetwork.SelfLink,
    ///         PrivateIpAddress = addrIntf.IPAddress,
    ///         RedundantInterface = interfaceRedundant.Name,
    ///     });
    /// 
    ///     var peer = new Gcp.Compute.RouterPeer("peer", new()
    ///     {
    ///         Name = "my-router-peer",
    ///         Router = router.Name,
    ///         Region = router.Region,
    ///         Interface = @interface.Name,
    ///         RouterApplianceInstance = instance.SelfLink,
    ///         PeerAsn = 65513,
    ///         PeerIpAddress = addrPeer.IPAddress,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Router Peer md5 authentication key
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foobar = new Gcp.Compute.RouterPeer("foobar", new()
    ///     {
    ///         Name = "%s-peer",
    ///         Router = foobarGoogleComputeRouter.Name,
    ///         Region = foobarGoogleComputeRouter.Region,
    ///         PeerAsn = 65515,
    ///         AdvertisedRoutePriority = 100,
    ///         Interface = foobarGoogleComputeRouterInterface.Name,
    ///         PeerIpAddress = "169.254.3.2",
    ///         Md5AuthenticationKey = new Gcp.Compute.Inputs.RouterPeerMd5AuthenticationKeyArgs
    ///         {
    ///             Name = "%s-peer-key",
    ///             Key = "%s-peer-key-value",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Router peer export and import policies
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Name = "my-router-net",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnetwork = new Gcp.Compute.Subnetwork("subnetwork", new()
    ///     {
    ///         Name = "my-router-subnet",
    ///         Network = network.SelfLink,
    ///         IpCidrRange = "10.0.0.0/16",
    ///         Region = "us-central1",
    ///     });
    /// 
    ///     var address = new Gcp.Compute.Address("address", new()
    ///     {
    ///         Name = "my-router",
    ///         Region = subnetwork.Region,
    ///     });
    /// 
    ///     var vpnGateway = new Gcp.Compute.HaVpnGateway("vpn_gateway", new()
    ///     {
    ///         Name = "my-router-gateway",
    ///         Network = network.SelfLink,
    ///         Region = subnetwork.Region,
    ///     });
    /// 
    ///     var externalGateway = new Gcp.Compute.ExternalVpnGateway("external_gateway", new()
    ///     {
    ///         Name = "my-router-external-gateway",
    ///         RedundancyType = "SINGLE_IP_INTERNALLY_REDUNDANT",
    ///         Description = "An externally managed VPN gateway",
    ///         Interfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.ExternalVpnGatewayInterfaceArgs
    ///             {
    ///                 Id = 0,
    ///                 IpAddress = "8.8.8.8",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var router = new Gcp.Compute.Router("router", new()
    ///     {
    ///         Name = "my-router",
    ///         Region = subnetwork.Region,
    ///         Network = network.SelfLink,
    ///         Bgp = new Gcp.Compute.Inputs.RouterBgpArgs
    ///         {
    ///             Asn = 64514,
    ///         },
    ///     });
    /// 
    ///     var vpnTunnel = new Gcp.Compute.VPNTunnel("vpn_tunnel", new()
    ///     {
    ///         Name = "my-router",
    ///         Region = subnetwork.Region,
    ///         VpnGateway = vpnGateway.Id,
    ///         PeerExternalGateway = externalGateway.Id,
    ///         PeerExternalGatewayInterface = 0,
    ///         SharedSecret = "unguessable",
    ///         Router = router.Name,
    ///         VpnGatewayInterface = 0,
    ///     });
    /// 
    ///     var routerInterface = new Gcp.Compute.RouterInterface("router_interface", new()
    ///     {
    ///         Name = "my-router",
    ///         Router = router.Name,
    ///         Region = router.Region,
    ///         VpnTunnel = vpnTunnel.Name,
    ///     });
    /// 
    ///     var rp_export = new Gcp.Compute.RouterRoutePolicy("rp-export", new()
    ///     {
    ///         Name = "my-router-rp-export",
    ///         Router = router.Name,
    ///         Region = router.Region,
    ///         Type = "ROUTE_POLICY_TYPE_EXPORT",
    ///         Terms = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RouterRoutePolicyTermArgs
    ///             {
    ///                 Priority = 2,
    ///                 Match = new Gcp.Compute.Inputs.RouterRoutePolicyTermMatchArgs
    ///                 {
    ///                     Expression = "destination == '10.0.0.0/12'",
    ///                     Title = "export_expression",
    ///                     Description = "acceptance expression for export",
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.RouterRoutePolicyTermActionArgs
    ///                     {
    ///                         Expression = "accept()",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             routerInterface,
    ///         },
    ///     });
    /// 
    ///     var rp_import = new Gcp.Compute.RouterRoutePolicy("rp-import", new()
    ///     {
    ///         Name = "my-router-rp-import",
    ///         Router = router.Name,
    ///         Region = router.Region,
    ///         Type = "ROUTE_POLICY_TYPE_IMPORT",
    ///         Terms = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RouterRoutePolicyTermArgs
    ///             {
    ///                 Priority = 1,
    ///                 Match = new Gcp.Compute.Inputs.RouterRoutePolicyTermMatchArgs
    ///                 {
    ///                     Expression = "destination == '10.0.0.0/12'",
    ///                     Title = "import_expression",
    ///                     Description = "acceptance expression for import",
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.RouterRoutePolicyTermActionArgs
    ///                     {
    ///                         Expression = "accept()",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             routerInterface,
    ///             rp_export,
    ///         },
    ///     });
    /// 
    ///     var routerPeer = new Gcp.Compute.RouterPeer("router_peer", new()
    ///     {
    ///         Name = "my-router-peer",
    ///         Router = router.Name,
    ///         Region = router.Region,
    ///         PeerAsn = 65515,
    ///         AdvertisedRoutePriority = 100,
    ///         Interface = routerInterface.Name,
    ///         Md5AuthenticationKey = new Gcp.Compute.Inputs.RouterPeerMd5AuthenticationKeyArgs
    ///         {
    ///             Name = "my-router-peer-key",
    ///             Key = "my-router-peer-key-value",
    ///         },
    ///         ImportPolicies = new[]
    ///         {
    ///             rp_import.Name,
    ///         },
    ///         ExportPolicies = new[]
    ///         {
    ///             rp_export.Name,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             rp_export,
    ///             rp_import,
    ///             routerInterface,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RouterBgpPeer can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/regions/{{region}}/routers/{{router}}/{{name}}`
    /// 
    /// * `{{project}}/{{region}}/{{router}}/{{name}}`
    /// 
    /// * `{{region}}/{{router}}/{{name}}`
    /// 
    /// * `{{router}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, RouterBgpPeer can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/routerPeer:RouterPeer default projects/{{project}}/regions/{{region}}/routers/{{router}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/routerPeer:RouterPeer default {{project}}/{{region}}/{{router}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/routerPeer:RouterPeer default {{region}}/{{router}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/routerPeer:RouterPeer default {{router}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/routerPeer:RouterPeer")]
    public partial class RouterPeer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// User-specified flag to indicate which mode to use for advertisement.
        /// Valid values of this enum field are: `DEFAULT`, `CUSTOM`
        /// Default value is `DEFAULT`.
        /// Possible values are: `DEFAULT`, `CUSTOM`.
        /// </summary>
        [Output("advertiseMode")]
        public Output<string?> AdvertiseMode { get; private set; } = null!;

        /// <summary>
        /// User-specified list of prefix groups to advertise in custom
        /// mode, which currently supports the following option:
        /// * `ALL_SUBNETS`: Advertises all of the router's own VPC subnets.
        /// This excludes any routes learned for subnets that use VPC Network
        /// Peering.
        /// 
        /// Note that this field can only be populated if advertiseMode is `CUSTOM`
        /// and overrides the list defined for the router (in the "bgp" message).
        /// These groups are advertised in addition to any specified prefixes.
        /// Leave this field blank to advertise no custom groups.
        /// </summary>
        [Output("advertisedGroups")]
        public Output<ImmutableArray<string>> AdvertisedGroups { get; private set; } = null!;

        /// <summary>
        /// User-specified list of individual IP ranges to advertise in
        /// custom mode. This field can only be populated if advertiseMode
        /// is `CUSTOM` and is advertised to all peers of the router. These IP
        /// ranges will be advertised in addition to any specified groups.
        /// Leave this field blank to advertise no custom IP ranges.
        /// Structure is documented below.
        /// </summary>
        [Output("advertisedIpRanges")]
        public Output<ImmutableArray<Outputs.RouterPeerAdvertisedIpRange>> AdvertisedIpRanges { get; private set; } = null!;

        /// <summary>
        /// The priority of routes advertised to this BGP peer.
        /// Where there is more than one matching route of maximum
        /// length, the routes with the lowest priority value win.
        /// </summary>
        [Output("advertisedRoutePriority")]
        public Output<int?> AdvertisedRoutePriority { get; private set; } = null!;

        /// <summary>
        /// BFD configuration for the BGP peering.
        /// Structure is documented below.
        /// </summary>
        [Output("bfd")]
        public Output<Outputs.RouterPeerBfd> Bfd { get; private set; } = null!;

        /// <summary>
        /// The custom learned route IP address range. Must be a valid CIDR-formatted prefix. If an IP address is provided without a
        /// subnet mask, it is interpreted as, for IPv4, a /32 singular IP address range, and, for IPv6, /128.
        /// </summary>
        [Output("customLearnedIpRanges")]
        public Output<ImmutableArray<Outputs.RouterPeerCustomLearnedIpRange>> CustomLearnedIpRanges { get; private set; } = null!;

        /// <summary>
        /// The user-defined custom learned route priority for a BGP session. This value is applied to all custom learned route
        /// ranges for the session. You can choose a value from 0 to 65335. If you don't provide a value, Google Cloud assigns a
        /// priority of 100 to the ranges.
        /// </summary>
        [Output("customLearnedRoutePriority")]
        public Output<int?> CustomLearnedRoutePriority { get; private set; } = null!;

        /// <summary>
        /// The status of the BGP peer connection. If set to false, any active session
        /// with the peer is terminated and all associated routing information is removed.
        /// If set to true, the peer connection can be established with routing information.
        /// The default is true.
        /// </summary>
        [Output("enable")]
        public Output<bool?> Enable { get; private set; } = null!;

        /// <summary>
        /// Enable IPv4 traffic over BGP Peer. It is enabled by default if the peerIpAddress is version 4.
        /// </summary>
        [Output("enableIpv4")]
        public Output<bool> EnableIpv4 { get; private set; } = null!;

        /// <summary>
        /// Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
        /// </summary>
        [Output("enableIpv6")]
        public Output<bool?> EnableIpv6 { get; private set; } = null!;

        /// <summary>
        /// routers.list of export policies applied to this peer, in the order they must be evaluated.
        /// The name must correspond to an existing policy that has ROUTE_POLICY_TYPE_EXPORT type.
        /// </summary>
        [Output("exportPolicies")]
        public Output<ImmutableArray<string>> ExportPolicies { get; private set; } = null!;

        /// <summary>
        /// routers.list of import policies applied to this peer, in the order they must be evaluated.
        /// The name must correspond to an existing policy that has ROUTE_POLICY_TYPE_IMPORT type.
        /// </summary>
        [Output("importPolicies")]
        public Output<ImmutableArray<string>> ImportPolicies { get; private set; } = null!;

        /// <summary>
        /// Name of the interface the BGP peer is associated with.
        /// </summary>
        [Output("interface")]
        public Output<string> Interface { get; private set; } = null!;

        /// <summary>
        /// IP address of the interface inside Google Cloud Platform.
        /// Only IPv4 is supported.
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// IPv4 address of the interface inside Google Cloud Platform.
        /// </summary>
        [Output("ipv4NexthopAddress")]
        public Output<string> Ipv4NexthopAddress { get; private set; } = null!;

        /// <summary>
        /// IPv6 address of the interface inside Google Cloud Platform.
        /// The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
        /// If you do not specify the next hop addresses, Google Cloud automatically
        /// assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
        /// </summary>
        [Output("ipv6NexthopAddress")]
        public Output<string> Ipv6NexthopAddress { get; private set; } = null!;

        /// <summary>
        /// The resource that configures and manages this BGP peer.
        /// * `MANAGED_BY_USER` is the default value and can be managed by
        /// you or other users
        /// * `MANAGED_BY_ATTACHMENT` is a BGP peer that is configured and
        /// managed by Cloud Interconnect, specifically by an
        /// InterconnectAttachment of type PARTNER. Google automatically
        /// creates, updates, and deletes this type of BGP peer when the
        /// PARTNER InterconnectAttachment is created, updated,
        /// or deleted.
        /// </summary>
        [Output("managementType")]
        public Output<string> ManagementType { get; private set; } = null!;

        /// <summary>
        /// Configuration for MD5 authentication on the BGP session.
        /// Structure is documented below.
        /// </summary>
        [Output("md5AuthenticationKey")]
        public Output<Outputs.RouterPeerMd5AuthenticationKey?> Md5AuthenticationKey { get; private set; } = null!;

        /// <summary>
        /// Name of this BGP peer. The name must be 1-63 characters long,
        /// and comply with RFC1035. Specifically, the name must be 1-63 characters
        /// long and match the regular expression `a-z?` which
        /// means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Peer BGP Autonomous System Number (ASN).
        /// Each BGP interface may use a different value.
        /// </summary>
        [Output("peerAsn")]
        public Output<int> PeerAsn { get; private set; } = null!;

        /// <summary>
        /// IP address of the BGP interface outside Google Cloud Platform.
        /// Only IPv4 is supported. Required if `ip_address` is set.
        /// </summary>
        [Output("peerIpAddress")]
        public Output<string> PeerIpAddress { get; private set; } = null!;

        /// <summary>
        /// IPv4 address of the BGP interface outside Google Cloud Platform.
        /// </summary>
        [Output("peerIpv4NexthopAddress")]
        public Output<string> PeerIpv4NexthopAddress { get; private set; } = null!;

        /// <summary>
        /// IPv6 address of the BGP interface outside Google Cloud Platform.
        /// The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
        /// If you do not specify the next hop addresses, Google Cloud automatically
        /// assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
        /// </summary>
        [Output("peerIpv6NexthopAddress")]
        public Output<string> PeerIpv6NexthopAddress { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Region where the router and BgpPeer reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The name of the Cloud Router in which this BgpPeer will be configured.
        /// </summary>
        [Output("router")]
        public Output<string> Router { get; private set; } = null!;

        /// <summary>
        /// The URI of the VM instance that is used as third-party router appliances
        /// such as Next Gen Firewalls, Virtual Routers, or Router Appliances.
        /// The VM instance must be located in zones contained in the same region as
        /// this Cloud Router. The VM instance is the peer side of the BGP session.
        /// </summary>
        [Output("routerApplianceInstance")]
        public Output<string?> RouterApplianceInstance { get; private set; } = null!;


        /// <summary>
        /// Create a RouterPeer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouterPeer(string name, RouterPeerArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/routerPeer:RouterPeer", name, args ?? new RouterPeerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouterPeer(string name, Input<string> id, RouterPeerState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/routerPeer:RouterPeer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouterPeer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouterPeer Get(string name, Input<string> id, RouterPeerState? state = null, CustomResourceOptions? options = null)
        {
            return new RouterPeer(name, id, state, options);
        }
    }

    public sealed class RouterPeerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User-specified flag to indicate which mode to use for advertisement.
        /// Valid values of this enum field are: `DEFAULT`, `CUSTOM`
        /// Default value is `DEFAULT`.
        /// Possible values are: `DEFAULT`, `CUSTOM`.
        /// </summary>
        [Input("advertiseMode")]
        public Input<string>? AdvertiseMode { get; set; }

        [Input("advertisedGroups")]
        private InputList<string>? _advertisedGroups;

        /// <summary>
        /// User-specified list of prefix groups to advertise in custom
        /// mode, which currently supports the following option:
        /// * `ALL_SUBNETS`: Advertises all of the router's own VPC subnets.
        /// This excludes any routes learned for subnets that use VPC Network
        /// Peering.
        /// 
        /// Note that this field can only be populated if advertiseMode is `CUSTOM`
        /// and overrides the list defined for the router (in the "bgp" message).
        /// These groups are advertised in addition to any specified prefixes.
        /// Leave this field blank to advertise no custom groups.
        /// </summary>
        public InputList<string> AdvertisedGroups
        {
            get => _advertisedGroups ?? (_advertisedGroups = new InputList<string>());
            set => _advertisedGroups = value;
        }

        [Input("advertisedIpRanges")]
        private InputList<Inputs.RouterPeerAdvertisedIpRangeArgs>? _advertisedIpRanges;

        /// <summary>
        /// User-specified list of individual IP ranges to advertise in
        /// custom mode. This field can only be populated if advertiseMode
        /// is `CUSTOM` and is advertised to all peers of the router. These IP
        /// ranges will be advertised in addition to any specified groups.
        /// Leave this field blank to advertise no custom IP ranges.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RouterPeerAdvertisedIpRangeArgs> AdvertisedIpRanges
        {
            get => _advertisedIpRanges ?? (_advertisedIpRanges = new InputList<Inputs.RouterPeerAdvertisedIpRangeArgs>());
            set => _advertisedIpRanges = value;
        }

        /// <summary>
        /// The priority of routes advertised to this BGP peer.
        /// Where there is more than one matching route of maximum
        /// length, the routes with the lowest priority value win.
        /// </summary>
        [Input("advertisedRoutePriority")]
        public Input<int>? AdvertisedRoutePriority { get; set; }

        /// <summary>
        /// BFD configuration for the BGP peering.
        /// Structure is documented below.
        /// </summary>
        [Input("bfd")]
        public Input<Inputs.RouterPeerBfdArgs>? Bfd { get; set; }

        [Input("customLearnedIpRanges")]
        private InputList<Inputs.RouterPeerCustomLearnedIpRangeArgs>? _customLearnedIpRanges;

        /// <summary>
        /// The custom learned route IP address range. Must be a valid CIDR-formatted prefix. If an IP address is provided without a
        /// subnet mask, it is interpreted as, for IPv4, a /32 singular IP address range, and, for IPv6, /128.
        /// </summary>
        public InputList<Inputs.RouterPeerCustomLearnedIpRangeArgs> CustomLearnedIpRanges
        {
            get => _customLearnedIpRanges ?? (_customLearnedIpRanges = new InputList<Inputs.RouterPeerCustomLearnedIpRangeArgs>());
            set => _customLearnedIpRanges = value;
        }

        /// <summary>
        /// The user-defined custom learned route priority for a BGP session. This value is applied to all custom learned route
        /// ranges for the session. You can choose a value from 0 to 65335. If you don't provide a value, Google Cloud assigns a
        /// priority of 100 to the ranges.
        /// </summary>
        [Input("customLearnedRoutePriority")]
        public Input<int>? CustomLearnedRoutePriority { get; set; }

        /// <summary>
        /// The status of the BGP peer connection. If set to false, any active session
        /// with the peer is terminated and all associated routing information is removed.
        /// If set to true, the peer connection can be established with routing information.
        /// The default is true.
        /// </summary>
        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        /// <summary>
        /// Enable IPv4 traffic over BGP Peer. It is enabled by default if the peerIpAddress is version 4.
        /// </summary>
        [Input("enableIpv4")]
        public Input<bool>? EnableIpv4 { get; set; }

        /// <summary>
        /// Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
        /// </summary>
        [Input("enableIpv6")]
        public Input<bool>? EnableIpv6 { get; set; }

        [Input("exportPolicies")]
        private InputList<string>? _exportPolicies;

        /// <summary>
        /// routers.list of export policies applied to this peer, in the order they must be evaluated.
        /// The name must correspond to an existing policy that has ROUTE_POLICY_TYPE_EXPORT type.
        /// </summary>
        public InputList<string> ExportPolicies
        {
            get => _exportPolicies ?? (_exportPolicies = new InputList<string>());
            set => _exportPolicies = value;
        }

        [Input("importPolicies")]
        private InputList<string>? _importPolicies;

        /// <summary>
        /// routers.list of import policies applied to this peer, in the order they must be evaluated.
        /// The name must correspond to an existing policy that has ROUTE_POLICY_TYPE_IMPORT type.
        /// </summary>
        public InputList<string> ImportPolicies
        {
            get => _importPolicies ?? (_importPolicies = new InputList<string>());
            set => _importPolicies = value;
        }

        /// <summary>
        /// Name of the interface the BGP peer is associated with.
        /// </summary>
        [Input("interface", required: true)]
        public Input<string> Interface { get; set; } = null!;

        /// <summary>
        /// IP address of the interface inside Google Cloud Platform.
        /// Only IPv4 is supported.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// IPv4 address of the interface inside Google Cloud Platform.
        /// </summary>
        [Input("ipv4NexthopAddress")]
        public Input<string>? Ipv4NexthopAddress { get; set; }

        /// <summary>
        /// IPv6 address of the interface inside Google Cloud Platform.
        /// The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
        /// If you do not specify the next hop addresses, Google Cloud automatically
        /// assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
        /// </summary>
        [Input("ipv6NexthopAddress")]
        public Input<string>? Ipv6NexthopAddress { get; set; }

        /// <summary>
        /// Configuration for MD5 authentication on the BGP session.
        /// Structure is documented below.
        /// </summary>
        [Input("md5AuthenticationKey")]
        public Input<Inputs.RouterPeerMd5AuthenticationKeyArgs>? Md5AuthenticationKey { get; set; }

        /// <summary>
        /// Name of this BGP peer. The name must be 1-63 characters long,
        /// and comply with RFC1035. Specifically, the name must be 1-63 characters
        /// long and match the regular expression `a-z?` which
        /// means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Peer BGP Autonomous System Number (ASN).
        /// Each BGP interface may use a different value.
        /// </summary>
        [Input("peerAsn", required: true)]
        public Input<int> PeerAsn { get; set; } = null!;

        /// <summary>
        /// IP address of the BGP interface outside Google Cloud Platform.
        /// Only IPv4 is supported. Required if `ip_address` is set.
        /// </summary>
        [Input("peerIpAddress")]
        public Input<string>? PeerIpAddress { get; set; }

        /// <summary>
        /// IPv4 address of the BGP interface outside Google Cloud Platform.
        /// </summary>
        [Input("peerIpv4NexthopAddress")]
        public Input<string>? PeerIpv4NexthopAddress { get; set; }

        /// <summary>
        /// IPv6 address of the BGP interface outside Google Cloud Platform.
        /// The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
        /// If you do not specify the next hop addresses, Google Cloud automatically
        /// assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
        /// </summary>
        [Input("peerIpv6NexthopAddress")]
        public Input<string>? PeerIpv6NexthopAddress { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Region where the router and BgpPeer reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The name of the Cloud Router in which this BgpPeer will be configured.
        /// </summary>
        [Input("router", required: true)]
        public Input<string> Router { get; set; } = null!;

        /// <summary>
        /// The URI of the VM instance that is used as third-party router appliances
        /// such as Next Gen Firewalls, Virtual Routers, or Router Appliances.
        /// The VM instance must be located in zones contained in the same region as
        /// this Cloud Router. The VM instance is the peer side of the BGP session.
        /// </summary>
        [Input("routerApplianceInstance")]
        public Input<string>? RouterApplianceInstance { get; set; }

        public RouterPeerArgs()
        {
        }
        public static new RouterPeerArgs Empty => new RouterPeerArgs();
    }

    public sealed class RouterPeerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User-specified flag to indicate which mode to use for advertisement.
        /// Valid values of this enum field are: `DEFAULT`, `CUSTOM`
        /// Default value is `DEFAULT`.
        /// Possible values are: `DEFAULT`, `CUSTOM`.
        /// </summary>
        [Input("advertiseMode")]
        public Input<string>? AdvertiseMode { get; set; }

        [Input("advertisedGroups")]
        private InputList<string>? _advertisedGroups;

        /// <summary>
        /// User-specified list of prefix groups to advertise in custom
        /// mode, which currently supports the following option:
        /// * `ALL_SUBNETS`: Advertises all of the router's own VPC subnets.
        /// This excludes any routes learned for subnets that use VPC Network
        /// Peering.
        /// 
        /// Note that this field can only be populated if advertiseMode is `CUSTOM`
        /// and overrides the list defined for the router (in the "bgp" message).
        /// These groups are advertised in addition to any specified prefixes.
        /// Leave this field blank to advertise no custom groups.
        /// </summary>
        public InputList<string> AdvertisedGroups
        {
            get => _advertisedGroups ?? (_advertisedGroups = new InputList<string>());
            set => _advertisedGroups = value;
        }

        [Input("advertisedIpRanges")]
        private InputList<Inputs.RouterPeerAdvertisedIpRangeGetArgs>? _advertisedIpRanges;

        /// <summary>
        /// User-specified list of individual IP ranges to advertise in
        /// custom mode. This field can only be populated if advertiseMode
        /// is `CUSTOM` and is advertised to all peers of the router. These IP
        /// ranges will be advertised in addition to any specified groups.
        /// Leave this field blank to advertise no custom IP ranges.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RouterPeerAdvertisedIpRangeGetArgs> AdvertisedIpRanges
        {
            get => _advertisedIpRanges ?? (_advertisedIpRanges = new InputList<Inputs.RouterPeerAdvertisedIpRangeGetArgs>());
            set => _advertisedIpRanges = value;
        }

        /// <summary>
        /// The priority of routes advertised to this BGP peer.
        /// Where there is more than one matching route of maximum
        /// length, the routes with the lowest priority value win.
        /// </summary>
        [Input("advertisedRoutePriority")]
        public Input<int>? AdvertisedRoutePriority { get; set; }

        /// <summary>
        /// BFD configuration for the BGP peering.
        /// Structure is documented below.
        /// </summary>
        [Input("bfd")]
        public Input<Inputs.RouterPeerBfdGetArgs>? Bfd { get; set; }

        [Input("customLearnedIpRanges")]
        private InputList<Inputs.RouterPeerCustomLearnedIpRangeGetArgs>? _customLearnedIpRanges;

        /// <summary>
        /// The custom learned route IP address range. Must be a valid CIDR-formatted prefix. If an IP address is provided without a
        /// subnet mask, it is interpreted as, for IPv4, a /32 singular IP address range, and, for IPv6, /128.
        /// </summary>
        public InputList<Inputs.RouterPeerCustomLearnedIpRangeGetArgs> CustomLearnedIpRanges
        {
            get => _customLearnedIpRanges ?? (_customLearnedIpRanges = new InputList<Inputs.RouterPeerCustomLearnedIpRangeGetArgs>());
            set => _customLearnedIpRanges = value;
        }

        /// <summary>
        /// The user-defined custom learned route priority for a BGP session. This value is applied to all custom learned route
        /// ranges for the session. You can choose a value from 0 to 65335. If you don't provide a value, Google Cloud assigns a
        /// priority of 100 to the ranges.
        /// </summary>
        [Input("customLearnedRoutePriority")]
        public Input<int>? CustomLearnedRoutePriority { get; set; }

        /// <summary>
        /// The status of the BGP peer connection. If set to false, any active session
        /// with the peer is terminated and all associated routing information is removed.
        /// If set to true, the peer connection can be established with routing information.
        /// The default is true.
        /// </summary>
        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        /// <summary>
        /// Enable IPv4 traffic over BGP Peer. It is enabled by default if the peerIpAddress is version 4.
        /// </summary>
        [Input("enableIpv4")]
        public Input<bool>? EnableIpv4 { get; set; }

        /// <summary>
        /// Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
        /// </summary>
        [Input("enableIpv6")]
        public Input<bool>? EnableIpv6 { get; set; }

        [Input("exportPolicies")]
        private InputList<string>? _exportPolicies;

        /// <summary>
        /// routers.list of export policies applied to this peer, in the order they must be evaluated.
        /// The name must correspond to an existing policy that has ROUTE_POLICY_TYPE_EXPORT type.
        /// </summary>
        public InputList<string> ExportPolicies
        {
            get => _exportPolicies ?? (_exportPolicies = new InputList<string>());
            set => _exportPolicies = value;
        }

        [Input("importPolicies")]
        private InputList<string>? _importPolicies;

        /// <summary>
        /// routers.list of import policies applied to this peer, in the order they must be evaluated.
        /// The name must correspond to an existing policy that has ROUTE_POLICY_TYPE_IMPORT type.
        /// </summary>
        public InputList<string> ImportPolicies
        {
            get => _importPolicies ?? (_importPolicies = new InputList<string>());
            set => _importPolicies = value;
        }

        /// <summary>
        /// Name of the interface the BGP peer is associated with.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// IP address of the interface inside Google Cloud Platform.
        /// Only IPv4 is supported.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// IPv4 address of the interface inside Google Cloud Platform.
        /// </summary>
        [Input("ipv4NexthopAddress")]
        public Input<string>? Ipv4NexthopAddress { get; set; }

        /// <summary>
        /// IPv6 address of the interface inside Google Cloud Platform.
        /// The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
        /// If you do not specify the next hop addresses, Google Cloud automatically
        /// assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
        /// </summary>
        [Input("ipv6NexthopAddress")]
        public Input<string>? Ipv6NexthopAddress { get; set; }

        /// <summary>
        /// The resource that configures and manages this BGP peer.
        /// * `MANAGED_BY_USER` is the default value and can be managed by
        /// you or other users
        /// * `MANAGED_BY_ATTACHMENT` is a BGP peer that is configured and
        /// managed by Cloud Interconnect, specifically by an
        /// InterconnectAttachment of type PARTNER. Google automatically
        /// creates, updates, and deletes this type of BGP peer when the
        /// PARTNER InterconnectAttachment is created, updated,
        /// or deleted.
        /// </summary>
        [Input("managementType")]
        public Input<string>? ManagementType { get; set; }

        /// <summary>
        /// Configuration for MD5 authentication on the BGP session.
        /// Structure is documented below.
        /// </summary>
        [Input("md5AuthenticationKey")]
        public Input<Inputs.RouterPeerMd5AuthenticationKeyGetArgs>? Md5AuthenticationKey { get; set; }

        /// <summary>
        /// Name of this BGP peer. The name must be 1-63 characters long,
        /// and comply with RFC1035. Specifically, the name must be 1-63 characters
        /// long and match the regular expression `a-z?` which
        /// means the first character must be a lowercase letter, and all
        /// following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Peer BGP Autonomous System Number (ASN).
        /// Each BGP interface may use a different value.
        /// </summary>
        [Input("peerAsn")]
        public Input<int>? PeerAsn { get; set; }

        /// <summary>
        /// IP address of the BGP interface outside Google Cloud Platform.
        /// Only IPv4 is supported. Required if `ip_address` is set.
        /// </summary>
        [Input("peerIpAddress")]
        public Input<string>? PeerIpAddress { get; set; }

        /// <summary>
        /// IPv4 address of the BGP interface outside Google Cloud Platform.
        /// </summary>
        [Input("peerIpv4NexthopAddress")]
        public Input<string>? PeerIpv4NexthopAddress { get; set; }

        /// <summary>
        /// IPv6 address of the BGP interface outside Google Cloud Platform.
        /// The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
        /// If you do not specify the next hop addresses, Google Cloud automatically
        /// assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
        /// </summary>
        [Input("peerIpv6NexthopAddress")]
        public Input<string>? PeerIpv6NexthopAddress { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Region where the router and BgpPeer reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The name of the Cloud Router in which this BgpPeer will be configured.
        /// </summary>
        [Input("router")]
        public Input<string>? Router { get; set; }

        /// <summary>
        /// The URI of the VM instance that is used as third-party router appliances
        /// such as Next Gen Firewalls, Virtual Routers, or Router Appliances.
        /// The VM instance must be located in zones contained in the same region as
        /// this Cloud Router. The VM instance is the peer side of the BGP session.
        /// </summary>
        [Input("routerApplianceInstance")]
        public Input<string>? RouterApplianceInstance { get; set; }

        public RouterPeerState()
        {
        }
        public static new RouterPeerState Empty => new RouterPeerState();
    }
}
