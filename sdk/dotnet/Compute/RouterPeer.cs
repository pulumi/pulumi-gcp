// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Manages a Cloud Router BGP peer. For more information see
    /// [the official documentation](https://cloud.google.com/compute/docs/cloudrouter)
    /// and
    /// [API](https://cloud.google.com/compute/docs/reference/latest/routers).
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_router_peer.html.markdown.
    /// </summary>
    public partial class RouterPeer : Pulumi.CustomResource
    {
        /// <summary>
        /// User-specified flag to indicate which mode to use for advertisement.
        /// Options include `DEFAULT` or `CUSTOM`.
        /// </summary>
        [Output("advertiseMode")]
        public Output<string?> AdvertiseMode { get; private set; } = null!;

        /// <summary>
        /// User-specified list of prefix groups to advertise in custom mode,
        /// which can take one of the following options:
        /// </summary>
        [Output("advertisedGroups")]
        public Output<ImmutableArray<string>> AdvertisedGroups { get; private set; } = null!;

        /// <summary>
        /// User-specified list of individual IP ranges to advertise in
        /// custom mode. This field can only be populated if `advertise_mode` is `CUSTOM` and overrides
        /// the list defined for the router (in the "bgp" message). These IP ranges are advertised in
        /// addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
        /// </summary>
        [Output("advertisedIpRanges")]
        public Output<ImmutableArray<Outputs.RouterPeerAdvertisedIpRanges>> AdvertisedIpRanges { get; private set; } = null!;

        /// <summary>
        /// The priority of routes advertised to this BGP peer.
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Output("advertisedRoutePriority")]
        public Output<int?> AdvertisedRoutePriority { get; private set; } = null!;

        /// <summary>
        /// The name of the interface the BGP peer is associated with.
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Output("interface")]
        public Output<string> Interface { get; private set; } = null!;

        /// <summary>
        /// IP address of the interface inside Google Cloud Platform.
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// A unique name for BGP peer, required by GCE. Changing
        /// this forces a new peer to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Peer BGP Autonomous System Number (ASN).
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Output("peerAsn")]
        public Output<int> PeerAsn { get; private set; } = null!;

        /// <summary>
        /// IP address of the BGP interface outside Google Cloud.
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Output("peerIpAddress")]
        public Output<string?> PeerIpAddress { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which this peer's router belongs. If it
        /// is not provided, the provider project is used. Changing this forces a new peer to be created.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The region this peer's router sits in. If not specified,
        /// the project region will be used. Changing this forces a new peer to be
        /// created.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The name of the router in which this BGP peer will be configured.
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Output("router")]
        public Output<string> Router { get; private set; } = null!;


        /// <summary>
        /// Create a RouterPeer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouterPeer(string name, RouterPeerArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/routerPeer:RouterPeer", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private RouterPeer(string name, Input<string> id, RouterPeerState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/routerPeer:RouterPeer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouterPeer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouterPeer Get(string name, Input<string> id, RouterPeerState? state = null, CustomResourceOptions? options = null)
        {
            return new RouterPeer(name, id, state, options);
        }
    }

    public sealed class RouterPeerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// User-specified flag to indicate which mode to use for advertisement.
        /// Options include `DEFAULT` or `CUSTOM`.
        /// </summary>
        [Input("advertiseMode")]
        public Input<string>? AdvertiseMode { get; set; }

        [Input("advertisedGroups")]
        private InputList<string>? _advertisedGroups;

        /// <summary>
        /// User-specified list of prefix groups to advertise in custom mode,
        /// which can take one of the following options:
        /// </summary>
        public InputList<string> AdvertisedGroups
        {
            get => _advertisedGroups ?? (_advertisedGroups = new InputList<string>());
            set => _advertisedGroups = value;
        }

        [Input("advertisedIpRanges")]
        private InputList<Inputs.RouterPeerAdvertisedIpRangesArgs>? _advertisedIpRanges;

        /// <summary>
        /// User-specified list of individual IP ranges to advertise in
        /// custom mode. This field can only be populated if `advertise_mode` is `CUSTOM` and overrides
        /// the list defined for the router (in the "bgp" message). These IP ranges are advertised in
        /// addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
        /// </summary>
        public InputList<Inputs.RouterPeerAdvertisedIpRangesArgs> AdvertisedIpRanges
        {
            get => _advertisedIpRanges ?? (_advertisedIpRanges = new InputList<Inputs.RouterPeerAdvertisedIpRangesArgs>());
            set => _advertisedIpRanges = value;
        }

        /// <summary>
        /// The priority of routes advertised to this BGP peer.
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Input("advertisedRoutePriority")]
        public Input<int>? AdvertisedRoutePriority { get; set; }

        /// <summary>
        /// The name of the interface the BGP peer is associated with.
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Input("interface", required: true)]
        public Input<string> Interface { get; set; } = null!;

        /// <summary>
        /// A unique name for BGP peer, required by GCE. Changing
        /// this forces a new peer to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Peer BGP Autonomous System Number (ASN).
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Input("peerAsn", required: true)]
        public Input<int> PeerAsn { get; set; } = null!;

        /// <summary>
        /// IP address of the BGP interface outside Google Cloud.
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Input("peerIpAddress")]
        public Input<string>? PeerIpAddress { get; set; }

        /// <summary>
        /// The ID of the project in which this peer's router belongs. If it
        /// is not provided, the provider project is used. Changing this forces a new peer to be created.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region this peer's router sits in. If not specified,
        /// the project region will be used. Changing this forces a new peer to be
        /// created.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The name of the router in which this BGP peer will be configured.
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Input("router", required: true)]
        public Input<string> Router { get; set; } = null!;

        public RouterPeerArgs()
        {
        }
    }

    public sealed class RouterPeerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// User-specified flag to indicate which mode to use for advertisement.
        /// Options include `DEFAULT` or `CUSTOM`.
        /// </summary>
        [Input("advertiseMode")]
        public Input<string>? AdvertiseMode { get; set; }

        [Input("advertisedGroups")]
        private InputList<string>? _advertisedGroups;

        /// <summary>
        /// User-specified list of prefix groups to advertise in custom mode,
        /// which can take one of the following options:
        /// </summary>
        public InputList<string> AdvertisedGroups
        {
            get => _advertisedGroups ?? (_advertisedGroups = new InputList<string>());
            set => _advertisedGroups = value;
        }

        [Input("advertisedIpRanges")]
        private InputList<Inputs.RouterPeerAdvertisedIpRangesGetArgs>? _advertisedIpRanges;

        /// <summary>
        /// User-specified list of individual IP ranges to advertise in
        /// custom mode. This field can only be populated if `advertise_mode` is `CUSTOM` and overrides
        /// the list defined for the router (in the "bgp" message). These IP ranges are advertised in
        /// addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
        /// </summary>
        public InputList<Inputs.RouterPeerAdvertisedIpRangesGetArgs> AdvertisedIpRanges
        {
            get => _advertisedIpRanges ?? (_advertisedIpRanges = new InputList<Inputs.RouterPeerAdvertisedIpRangesGetArgs>());
            set => _advertisedIpRanges = value;
        }

        /// <summary>
        /// The priority of routes advertised to this BGP peer.
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Input("advertisedRoutePriority")]
        public Input<int>? AdvertisedRoutePriority { get; set; }

        /// <summary>
        /// The name of the interface the BGP peer is associated with.
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// IP address of the interface inside Google Cloud Platform.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// A unique name for BGP peer, required by GCE. Changing
        /// this forces a new peer to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Peer BGP Autonomous System Number (ASN).
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Input("peerAsn")]
        public Input<int>? PeerAsn { get; set; }

        /// <summary>
        /// IP address of the BGP interface outside Google Cloud.
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Input("peerIpAddress")]
        public Input<string>? PeerIpAddress { get; set; }

        /// <summary>
        /// The ID of the project in which this peer's router belongs. If it
        /// is not provided, the provider project is used. Changing this forces a new peer to be created.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region this peer's router sits in. If not specified,
        /// the project region will be used. Changing this forces a new peer to be
        /// created.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The name of the router in which this BGP peer will be configured.
        /// Changing this forces a new peer to be created.
        /// </summary>
        [Input("router")]
        public Input<string>? Router { get; set; }

        public RouterPeerState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class RouterPeerAdvertisedIpRangesArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("range")]
        public Input<string>? Range { get; set; }

        public RouterPeerAdvertisedIpRangesArgs()
        {
        }
    }

    public sealed class RouterPeerAdvertisedIpRangesGetArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("range")]
        public Input<string>? Range { get; set; }

        public RouterPeerAdvertisedIpRangesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class RouterPeerAdvertisedIpRanges
    {
        public readonly string? Description;
        public readonly string? Range;

        [OutputConstructor]
        private RouterPeerAdvertisedIpRanges(
            string? description,
            string? range)
        {
            Description = description;
            Range = range;
        }
    }
    }
}
