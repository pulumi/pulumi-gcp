// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetRegionSslCertificate
    {
        /// <summary>
        /// Get info about a Region Google Compute SSL Certificate from its name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myCert = Gcp.Compute.GetRegionSslCertificate.Invoke(new()
        ///     {
        ///         Name = "my-cert",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["certificate"] = myCert.Apply(getRegionSslCertificateResult =&gt; getRegionSslCertificateResult.Certificate),
        ///         ["certificateId"] = myCert.Apply(getRegionSslCertificateResult =&gt; getRegionSslCertificateResult.CertificateId),
        ///         ["selfLink"] = myCert.Apply(getRegionSslCertificateResult =&gt; getRegionSslCertificateResult.SelfLink),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRegionSslCertificateResult> InvokeAsync(GetRegionSslCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegionSslCertificateResult>("gcp:compute/getRegionSslCertificate:getRegionSslCertificate", args ?? new GetRegionSslCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Get info about a Region Google Compute SSL Certificate from its name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myCert = Gcp.Compute.GetRegionSslCertificate.Invoke(new()
        ///     {
        ///         Name = "my-cert",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["certificate"] = myCert.Apply(getRegionSslCertificateResult =&gt; getRegionSslCertificateResult.Certificate),
        ///         ["certificateId"] = myCert.Apply(getRegionSslCertificateResult =&gt; getRegionSslCertificateResult.CertificateId),
        ///         ["selfLink"] = myCert.Apply(getRegionSslCertificateResult =&gt; getRegionSslCertificateResult.SelfLink),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRegionSslCertificateResult> Invoke(GetRegionSslCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionSslCertificateResult>("gcp:compute/getRegionSslCertificate:getRegionSslCertificate", args ?? new GetRegionSslCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionSslCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the certificate.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The region in which the resource belongs. If it
        /// is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetRegionSslCertificateArgs()
        {
        }
        public static new GetRegionSslCertificateArgs Empty => new GetRegionSslCertificateArgs();
    }

    public sealed class GetRegionSslCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the certificate.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region in which the resource belongs. If it
        /// is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetRegionSslCertificateInvokeArgs()
        {
        }
        public static new GetRegionSslCertificateInvokeArgs Empty => new GetRegionSslCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegionSslCertificateResult
    {
        public readonly string Certificate;
        public readonly int CertificateId;
        public readonly string CreationTimestamp;
        public readonly string Description;
        public readonly string ExpireTime;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string NamePrefix;
        public readonly string PrivateKey;
        public readonly string? Project;
        public readonly string? Region;
        public readonly string SelfLink;

        [OutputConstructor]
        private GetRegionSslCertificateResult(
            string certificate,

            int certificateId,

            string creationTimestamp,

            string description,

            string expireTime,

            string id,

            string name,

            string namePrefix,

            string privateKey,

            string? project,

            string? region,

            string selfLink)
        {
            Certificate = certificate;
            CertificateId = certificateId;
            CreationTimestamp = creationTimestamp;
            Description = description;
            ExpireTime = expireTime;
            Id = id;
            Name = name;
            NamePrefix = namePrefix;
            PrivateKey = privateKey;
            Project = project;
            Region = region;
            SelfLink = selfLink;
        }
    }
}
