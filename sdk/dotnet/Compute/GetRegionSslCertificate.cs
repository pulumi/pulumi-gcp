// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetRegionSslCertificate
    {
        /// <summary>
        /// Get info about a Region Google Compute SSL Certificate from its name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var myCert = Output.Create(Gcp.Compute.GetRegionSslCertificate.InvokeAsync(new Gcp.Compute.GetRegionSslCertificateArgs
        ///         {
        ///             Name = "my-cert",
        ///         }));
        ///         this.Certificate = myCert.Apply(myCert =&gt; myCert.Certificate);
        ///         this.CertificateId = myCert.Apply(myCert =&gt; myCert.CertificateId);
        ///         this.SelfLink = myCert.Apply(myCert =&gt; myCert.SelfLink);
        ///     }
        /// 
        ///     [Output("certificate")]
        ///     public Output&lt;string&gt; Certificate { get; set; }
        ///     [Output("certificateId")]
        ///     public Output&lt;string&gt; CertificateId { get; set; }
        ///     [Output("selfLink")]
        ///     public Output&lt;string&gt; SelfLink { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRegionSslCertificateResult> InvokeAsync(GetRegionSslCertificateArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRegionSslCertificateResult>("gcp:compute/getRegionSslCertificate:getRegionSslCertificate", args ?? new GetRegionSslCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Get info about a Region Google Compute SSL Certificate from its name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var myCert = Output.Create(Gcp.Compute.GetRegionSslCertificate.InvokeAsync(new Gcp.Compute.GetRegionSslCertificateArgs
        ///         {
        ///             Name = "my-cert",
        ///         }));
        ///         this.Certificate = myCert.Apply(myCert =&gt; myCert.Certificate);
        ///         this.CertificateId = myCert.Apply(myCert =&gt; myCert.CertificateId);
        ///         this.SelfLink = myCert.Apply(myCert =&gt; myCert.SelfLink);
        ///     }
        /// 
        ///     [Output("certificate")]
        ///     public Output&lt;string&gt; Certificate { get; set; }
        ///     [Output("certificateId")]
        ///     public Output&lt;string&gt; CertificateId { get; set; }
        ///     [Output("selfLink")]
        ///     public Output&lt;string&gt; SelfLink { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRegionSslCertificateResult> Invoke(GetRegionSslCertificateInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRegionSslCertificateResult>("gcp:compute/getRegionSslCertificate:getRegionSslCertificate", args ?? new GetRegionSslCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionSslCertificateArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the certificate.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The region in which the resource belongs. If it
        /// is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetRegionSslCertificateArgs()
        {
        }
    }

    public sealed class GetRegionSslCertificateInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the certificate.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region in which the resource belongs. If it
        /// is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetRegionSslCertificateInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRegionSslCertificateResult
    {
        public readonly string Certificate;
        public readonly int CertificateId;
        public readonly string CreationTimestamp;
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string NamePrefix;
        public readonly string PrivateKey;
        public readonly string? Project;
        public readonly string? Region;
        public readonly string SelfLink;

        [OutputConstructor]
        private GetRegionSslCertificateResult(
            string certificate,

            int certificateId,

            string creationTimestamp,

            string description,

            string id,

            string name,

            string namePrefix,

            string privateKey,

            string? project,

            string? region,

            string selfLink)
        {
            Certificate = certificate;
            CertificateId = certificateId;
            CreationTimestamp = creationTimestamp;
            Description = description;
            Id = id;
            Name = name;
            NamePrefix = namePrefix;
            PrivateKey = privateKey;
            Project = project;
            Region = region;
            SelfLink = selfLink;
        }
    }
}
