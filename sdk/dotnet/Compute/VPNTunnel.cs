// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_vpn_tunnel.html.markdown.
    /// </summary>
    public partial class VPNTunnel : Pulumi.CustomResource
    {
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("detailedStatus")]
        public Output<string> DetailedStatus { get; private set; } = null!;

        [Output("ikeVersion")]
        public Output<int?> IkeVersion { get; private set; } = null!;

        [Output("labelFingerprint")]
        public Output<string> LabelFingerprint { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        [Output("localTrafficSelectors")]
        public Output<ImmutableArray<string>> LocalTrafficSelectors { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("peerExternalGateway")]
        public Output<string?> PeerExternalGateway { get; private set; } = null!;

        [Output("peerExternalGatewayInterface")]
        public Output<int?> PeerExternalGatewayInterface { get; private set; } = null!;

        [Output("peerGcpGateway")]
        public Output<string?> PeerGcpGateway { get; private set; } = null!;

        [Output("peerIp")]
        public Output<string> PeerIp { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("remoteTrafficSelectors")]
        public Output<ImmutableArray<string>> RemoteTrafficSelectors { get; private set; } = null!;

        [Output("router")]
        public Output<string?> Router { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        [Output("sharedSecret")]
        public Output<string> SharedSecret { get; private set; } = null!;

        [Output("sharedSecretHash")]
        public Output<string> SharedSecretHash { get; private set; } = null!;

        [Output("targetVpnGateway")]
        public Output<string?> TargetVpnGateway { get; private set; } = null!;

        [Output("tunnelId")]
        public Output<string> TunnelId { get; private set; } = null!;

        [Output("vpnGateway")]
        public Output<string?> VpnGateway { get; private set; } = null!;

        [Output("vpnGatewayInterface")]
        public Output<int?> VpnGatewayInterface { get; private set; } = null!;


        /// <summary>
        /// Create a VPNTunnel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VPNTunnel(string name, VPNTunnelArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/vPNTunnel:VPNTunnel", name, args, MakeResourceOptions(options, ""))
        {
        }

        private VPNTunnel(string name, Input<string> id, VPNTunnelState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/vPNTunnel:VPNTunnel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VPNTunnel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VPNTunnel Get(string name, Input<string> id, VPNTunnelState? state = null, CustomResourceOptions? options = null)
        {
            return new VPNTunnel(name, id, state, options);
        }
    }

    public sealed class VPNTunnelArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ikeVersion")]
        public Input<int>? IkeVersion { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("localTrafficSelectors")]
        private InputList<string>? _localTrafficSelectors;
        public InputList<string> LocalTrafficSelectors
        {
            get => _localTrafficSelectors ?? (_localTrafficSelectors = new InputList<string>());
            set => _localTrafficSelectors = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("peerExternalGateway")]
        public Input<string>? PeerExternalGateway { get; set; }

        [Input("peerExternalGatewayInterface")]
        public Input<int>? PeerExternalGatewayInterface { get; set; }

        [Input("peerGcpGateway")]
        public Input<string>? PeerGcpGateway { get; set; }

        [Input("peerIp")]
        public Input<string>? PeerIp { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("remoteTrafficSelectors")]
        private InputList<string>? _remoteTrafficSelectors;
        public InputList<string> RemoteTrafficSelectors
        {
            get => _remoteTrafficSelectors ?? (_remoteTrafficSelectors = new InputList<string>());
            set => _remoteTrafficSelectors = value;
        }

        [Input("router")]
        public Input<string>? Router { get; set; }

        [Input("sharedSecret", required: true)]
        public Input<string> SharedSecret { get; set; } = null!;

        [Input("targetVpnGateway")]
        public Input<string>? TargetVpnGateway { get; set; }

        [Input("vpnGateway")]
        public Input<string>? VpnGateway { get; set; }

        [Input("vpnGatewayInterface")]
        public Input<int>? VpnGatewayInterface { get; set; }

        public VPNTunnelArgs()
        {
        }
    }

    public sealed class VPNTunnelState : Pulumi.ResourceArgs
    {
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("detailedStatus")]
        public Input<string>? DetailedStatus { get; set; }

        [Input("ikeVersion")]
        public Input<int>? IkeVersion { get; set; }

        [Input("labelFingerprint")]
        public Input<string>? LabelFingerprint { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("localTrafficSelectors")]
        private InputList<string>? _localTrafficSelectors;
        public InputList<string> LocalTrafficSelectors
        {
            get => _localTrafficSelectors ?? (_localTrafficSelectors = new InputList<string>());
            set => _localTrafficSelectors = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("peerExternalGateway")]
        public Input<string>? PeerExternalGateway { get; set; }

        [Input("peerExternalGatewayInterface")]
        public Input<int>? PeerExternalGatewayInterface { get; set; }

        [Input("peerGcpGateway")]
        public Input<string>? PeerGcpGateway { get; set; }

        [Input("peerIp")]
        public Input<string>? PeerIp { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("remoteTrafficSelectors")]
        private InputList<string>? _remoteTrafficSelectors;
        public InputList<string> RemoteTrafficSelectors
        {
            get => _remoteTrafficSelectors ?? (_remoteTrafficSelectors = new InputList<string>());
            set => _remoteTrafficSelectors = value;
        }

        [Input("router")]
        public Input<string>? Router { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("sharedSecret")]
        public Input<string>? SharedSecret { get; set; }

        [Input("sharedSecretHash")]
        public Input<string>? SharedSecretHash { get; set; }

        [Input("targetVpnGateway")]
        public Input<string>? TargetVpnGateway { get; set; }

        [Input("tunnelId")]
        public Input<string>? TunnelId { get; set; }

        [Input("vpnGateway")]
        public Input<string>? VpnGateway { get; set; }

        [Input("vpnGatewayInterface")]
        public Input<int>? VpnGatewayInterface { get; set; }

        public VPNTunnelState()
        {
        }
    }
}
