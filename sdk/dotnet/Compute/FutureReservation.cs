// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Represents a future reservation resource in Compute Engine. Future reservations allow users
    /// to reserve capacity for a specified time window, ensuring that resources are available
    /// when needed.
    /// 
    /// Reservations apply only to Compute Engine, Cloud Dataproc, and Google
    /// Kubernetes Engine VM usage.Reservations do not apply to `f1-micro` or
    /// `g1-small` machine types, preemptible VMs, sole tenant nodes, or other
    /// services not listed above
    /// like Cloud SQL and Dataflow.
    /// 
    /// To get more information about FutureReservation, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/futureReservations)
    /// * How-to Guides
    ///     * [Future Reservations Guide](https://cloud.google.com/compute/docs/instances/future-reservations-overview)
    /// 
    /// ## Example Usage
    /// 
    /// ### Future Reservation Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var gceFutureReservation = new Gcp.Compute.FutureReservation("gce_future_reservation", new()
    ///     {
    ///         Name = "gce-future-reservation",
    ///         Project = "my-project-name",
    ///         AutoDeleteAutoCreatedReservations = true,
    ///         PlanningStatus = "DRAFT",
    ///         NamePrefix = "fr-basic",
    ///         TimeWindow = new Gcp.Compute.Inputs.FutureReservationTimeWindowArgs
    ///         {
    ///             StartTime = "2025-11-01T00:00:00Z",
    ///             EndTime = "2025-11-02T00:00:00Z",
    ///         },
    ///         SpecificSkuProperties = new Gcp.Compute.Inputs.FutureReservationSpecificSkuPropertiesArgs
    ///         {
    ///             TotalCount = "1",
    ///             InstanceProperties = new Gcp.Compute.Inputs.FutureReservationSpecificSkuPropertiesInstancePropertiesArgs
    ///             {
    ///                 MachineType = "e2-standard-2",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Future Reservation Aggregate Reservation
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var gceFutureReservation = new Gcp.Compute.FutureReservation("gce_future_reservation", new()
    ///     {
    ///         Name = "gce-future-reservation-aggregate-reservation",
    ///         Project = "my-project-name",
    ///         AutoDeleteAutoCreatedReservations = true,
    ///         PlanningStatus = "DRAFT",
    ///         NamePrefix = "fr-basic",
    ///         TimeWindow = new Gcp.Compute.Inputs.FutureReservationTimeWindowArgs
    ///         {
    ///             StartTime = "2025-11-01T00:00:00Z",
    ///             EndTime = "2025-11-02T00:00:00Z",
    ///         },
    ///         AggregateReservation = new Gcp.Compute.Inputs.FutureReservationAggregateReservationArgs
    ///         {
    ///             VmFamily = "VM_FAMILY_CLOUD_TPU_DEVICE_CT3",
    ///             WorkloadType = "UNSPECIFIED",
    ///             ReservedResources = new[]
    ///             {
    ///                 new Gcp.Compute.Inputs.FutureReservationAggregateReservationReservedResourceArgs
    ///                 {
    ///                     Accelerator = new Gcp.Compute.Inputs.FutureReservationAggregateReservationReservedResourceAcceleratorArgs
    ///                     {
    ///                         AcceleratorCount = 32,
    ///                         AcceleratorType = "projects/my-project-name/zones/us-central1-a/acceleratorTypes/ct3",
    ///                     },
    ///                 },
    ///                 new Gcp.Compute.Inputs.FutureReservationAggregateReservationReservedResourceArgs
    ///                 {
    ///                     Accelerator = new Gcp.Compute.Inputs.FutureReservationAggregateReservationReservedResourceAcceleratorArgs
    ///                     {
    ///                         AcceleratorCount = 2,
    ///                         AcceleratorType = "projects/my-project-name/zones/us-central1-a/acceleratorTypes/ct3",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// FutureReservation can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/zones/{{zone}}/futureReservations/{{name}}`
    /// 
    /// * `{{project}}/{{zone}}/{{name}}`
    /// 
    /// * `{{zone}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, FutureReservation can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/futureReservation:FutureReservation default projects/{{project}}/zones/{{zone}}/futureReservations/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/futureReservation:FutureReservation default {{project}}/{{zone}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/futureReservation:FutureReservation default {{zone}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/futureReservation:FutureReservation default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/futureReservation:FutureReservation")]
    public partial class FutureReservation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Aggregate reservation details for the future reservation.
        /// Structure is documented below.
        /// </summary>
        [Output("aggregateReservation")]
        public Output<Outputs.FutureReservationAggregateReservation?> AggregateReservation { get; private set; } = null!;

        /// <summary>
        /// Future timestamp when the FR auto-created reservations will be deleted by Compute Engine.
        /// </summary>
        [Output("autoCreatedReservationsDeleteTime")]
        public Output<string?> AutoCreatedReservationsDeleteTime { get; private set; } = null!;

        /// <summary>
        /// Specifies the duration of auto-created reservations. It represents relative time to future reservation startTime when auto-created reservations will be automatically deleted by Compute Engine. Duration time unit is represented as a count of seconds and fractions of seconds at nanosecond resolution.
        /// Structure is documented below.
        /// </summary>
        [Output("autoCreatedReservationsDuration")]
        public Output<Outputs.FutureReservationAutoCreatedReservationsDuration?> AutoCreatedReservationsDuration { get; private set; } = null!;

        /// <summary>
        /// Setting for enabling or disabling automatic deletion for auto-created reservation. If set to true, auto-created reservations will be deleted at Future Reservation's end time (default) or at user's defined timestamp if any of the [autoCreatedReservationsDeleteTime, autoCreatedReservationsDuration] values is specified. For keeping auto-created reservation indefinitely, this value should be set to false.
        /// </summary>
        [Output("autoDeleteAutoCreatedReservations")]
        public Output<bool?> AutoDeleteAutoCreatedReservations { get; private set; } = null!;

        /// <summary>
        /// If not present, then FR will not deliver a new commitment or update an existing commitment.
        /// Structure is documented below.
        /// </summary>
        [Output("commitmentInfo")]
        public Output<Outputs.FutureReservationCommitmentInfo?> CommitmentInfo { get; private set; } = null!;

        /// <summary>
        /// The creation timestamp for this future reservation in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// Type of the deployment requested as part of future reservation.
        /// Possible values are: `DENSE`, `FLEXIBLE`.
        /// </summary>
        [Output("deploymentType")]
        public Output<string?> DeploymentType { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is
        /// created. The name must be 1-63 characters long, and comply with
        /// RFC1035. Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the las
        /// character, which cannot be a dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Name prefix for the reservations to be created at the time of delivery. The name prefix must comply with RFC1035. Maximum allowed length for name prefix is 20. Automatically created reservations name format will be -date-####.
        /// </summary>
        [Output("namePrefix")]
        public Output<string?> NamePrefix { get; private set; } = null!;

        /// <summary>
        /// Planning state before being submitted for evaluation
        /// Possible values are: `DRAFT`, `SUBMITTED`.
        /// </summary>
        [Output("planningStatus")]
        public Output<string> PlanningStatus { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The reservation mode which determines reservation-termination behavior and expected pricing.
        /// Possible values are: `CALENDAR`, `DEFAULT`.
        /// </summary>
        [Output("reservationMode")]
        public Output<string?> ReservationMode { get; private set; } = null!;

        /// <summary>
        /// Name of reservations where the capacity is provisioned at the time of delivery of future reservations. If the reservation with the given name does not exist already, it is created automatically at the time of Approval with INACTIVE state till specified start-time. Either provide the reservationName or a namePrefix.
        /// </summary>
        [Output("reservationName")]
        public Output<string?> ReservationName { get; private set; } = null!;

        /// <summary>
        /// Maintenance information for this reservation
        /// Possible values are: `GROUPED`, `INDEPENDENT`.
        /// </summary>
        [Output("schedulingType")]
        public Output<string?> SchedulingType { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Server-defined URL for this resource with the resource id.
        /// </summary>
        [Output("selfLinkWithId")]
        public Output<string> SelfLinkWithId { get; private set; } = null!;

        /// <summary>
        /// Settings for sharing the future reservation
        /// Structure is documented below.
        /// </summary>
        [Output("shareSettings")]
        public Output<Outputs.FutureReservationShareSettings?> ShareSettings { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the auto-created reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from the delivered reservation.
        /// </summary>
        [Output("specificReservationRequired")]
        public Output<bool?> SpecificReservationRequired { get; private set; } = null!;

        /// <summary>
        /// Future Reservation configuration to indicate instance properties and total count.
        /// Structure is documented below.
        /// </summary>
        [Output("specificSkuProperties")]
        public Output<Outputs.FutureReservationSpecificSkuProperties?> SpecificSkuProperties { get; private set; } = null!;

        /// <summary>
        /// [Output only] Status of the Future Reservation
        /// Structure is documented below.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.FutureReservationStatus>> Statuses { get; private set; } = null!;

        /// <summary>
        /// Time window for this Future Reservation.
        /// Structure is documented below.
        /// </summary>
        [Output("timeWindow")]
        public Output<Outputs.FutureReservationTimeWindow> TimeWindow { get; private set; } = null!;

        /// <summary>
        /// URL of the Zone where this future reservation resides.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a FutureReservation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FutureReservation(string name, FutureReservationArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/futureReservation:FutureReservation", name, args ?? new FutureReservationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FutureReservation(string name, Input<string> id, FutureReservationState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/futureReservation:FutureReservation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FutureReservation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FutureReservation Get(string name, Input<string> id, FutureReservationState? state = null, CustomResourceOptions? options = null)
        {
            return new FutureReservation(name, id, state, options);
        }
    }

    public sealed class FutureReservationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Aggregate reservation details for the future reservation.
        /// Structure is documented below.
        /// </summary>
        [Input("aggregateReservation")]
        public Input<Inputs.FutureReservationAggregateReservationArgs>? AggregateReservation { get; set; }

        /// <summary>
        /// Future timestamp when the FR auto-created reservations will be deleted by Compute Engine.
        /// </summary>
        [Input("autoCreatedReservationsDeleteTime")]
        public Input<string>? AutoCreatedReservationsDeleteTime { get; set; }

        /// <summary>
        /// Specifies the duration of auto-created reservations. It represents relative time to future reservation startTime when auto-created reservations will be automatically deleted by Compute Engine. Duration time unit is represented as a count of seconds and fractions of seconds at nanosecond resolution.
        /// Structure is documented below.
        /// </summary>
        [Input("autoCreatedReservationsDuration")]
        public Input<Inputs.FutureReservationAutoCreatedReservationsDurationArgs>? AutoCreatedReservationsDuration { get; set; }

        /// <summary>
        /// Setting for enabling or disabling automatic deletion for auto-created reservation. If set to true, auto-created reservations will be deleted at Future Reservation's end time (default) or at user's defined timestamp if any of the [autoCreatedReservationsDeleteTime, autoCreatedReservationsDuration] values is specified. For keeping auto-created reservation indefinitely, this value should be set to false.
        /// </summary>
        [Input("autoDeleteAutoCreatedReservations")]
        public Input<bool>? AutoDeleteAutoCreatedReservations { get; set; }

        /// <summary>
        /// If not present, then FR will not deliver a new commitment or update an existing commitment.
        /// Structure is documented below.
        /// </summary>
        [Input("commitmentInfo")]
        public Input<Inputs.FutureReservationCommitmentInfoArgs>? CommitmentInfo { get; set; }

        /// <summary>
        /// Type of the deployment requested as part of future reservation.
        /// Possible values are: `DENSE`, `FLEXIBLE`.
        /// </summary>
        [Input("deploymentType")]
        public Input<string>? DeploymentType { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is
        /// created. The name must be 1-63 characters long, and comply with
        /// RFC1035. Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the las
        /// character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Name prefix for the reservations to be created at the time of delivery. The name prefix must comply with RFC1035. Maximum allowed length for name prefix is 20. Automatically created reservations name format will be -date-####.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// Planning state before being submitted for evaluation
        /// Possible values are: `DRAFT`, `SUBMITTED`.
        /// </summary>
        [Input("planningStatus")]
        public Input<string>? PlanningStatus { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The reservation mode which determines reservation-termination behavior and expected pricing.
        /// Possible values are: `CALENDAR`, `DEFAULT`.
        /// </summary>
        [Input("reservationMode")]
        public Input<string>? ReservationMode { get; set; }

        /// <summary>
        /// Name of reservations where the capacity is provisioned at the time of delivery of future reservations. If the reservation with the given name does not exist already, it is created automatically at the time of Approval with INACTIVE state till specified start-time. Either provide the reservationName or a namePrefix.
        /// </summary>
        [Input("reservationName")]
        public Input<string>? ReservationName { get; set; }

        /// <summary>
        /// Maintenance information for this reservation
        /// Possible values are: `GROUPED`, `INDEPENDENT`.
        /// </summary>
        [Input("schedulingType")]
        public Input<string>? SchedulingType { get; set; }

        /// <summary>
        /// Settings for sharing the future reservation
        /// Structure is documented below.
        /// </summary>
        [Input("shareSettings")]
        public Input<Inputs.FutureReservationShareSettingsArgs>? ShareSettings { get; set; }

        /// <summary>
        /// Indicates whether the auto-created reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from the delivered reservation.
        /// </summary>
        [Input("specificReservationRequired")]
        public Input<bool>? SpecificReservationRequired { get; set; }

        /// <summary>
        /// Future Reservation configuration to indicate instance properties and total count.
        /// Structure is documented below.
        /// </summary>
        [Input("specificSkuProperties")]
        public Input<Inputs.FutureReservationSpecificSkuPropertiesArgs>? SpecificSkuProperties { get; set; }

        /// <summary>
        /// Time window for this Future Reservation.
        /// Structure is documented below.
        /// </summary>
        [Input("timeWindow", required: true)]
        public Input<Inputs.FutureReservationTimeWindowArgs> TimeWindow { get; set; } = null!;

        public FutureReservationArgs()
        {
        }
        public static new FutureReservationArgs Empty => new FutureReservationArgs();
    }

    public sealed class FutureReservationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Aggregate reservation details for the future reservation.
        /// Structure is documented below.
        /// </summary>
        [Input("aggregateReservation")]
        public Input<Inputs.FutureReservationAggregateReservationGetArgs>? AggregateReservation { get; set; }

        /// <summary>
        /// Future timestamp when the FR auto-created reservations will be deleted by Compute Engine.
        /// </summary>
        [Input("autoCreatedReservationsDeleteTime")]
        public Input<string>? AutoCreatedReservationsDeleteTime { get; set; }

        /// <summary>
        /// Specifies the duration of auto-created reservations. It represents relative time to future reservation startTime when auto-created reservations will be automatically deleted by Compute Engine. Duration time unit is represented as a count of seconds and fractions of seconds at nanosecond resolution.
        /// Structure is documented below.
        /// </summary>
        [Input("autoCreatedReservationsDuration")]
        public Input<Inputs.FutureReservationAutoCreatedReservationsDurationGetArgs>? AutoCreatedReservationsDuration { get; set; }

        /// <summary>
        /// Setting for enabling or disabling automatic deletion for auto-created reservation. If set to true, auto-created reservations will be deleted at Future Reservation's end time (default) or at user's defined timestamp if any of the [autoCreatedReservationsDeleteTime, autoCreatedReservationsDuration] values is specified. For keeping auto-created reservation indefinitely, this value should be set to false.
        /// </summary>
        [Input("autoDeleteAutoCreatedReservations")]
        public Input<bool>? AutoDeleteAutoCreatedReservations { get; set; }

        /// <summary>
        /// If not present, then FR will not deliver a new commitment or update an existing commitment.
        /// Structure is documented below.
        /// </summary>
        [Input("commitmentInfo")]
        public Input<Inputs.FutureReservationCommitmentInfoGetArgs>? CommitmentInfo { get; set; }

        /// <summary>
        /// The creation timestamp for this future reservation in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// Type of the deployment requested as part of future reservation.
        /// Possible values are: `DENSE`, `FLEXIBLE`.
        /// </summary>
        [Input("deploymentType")]
        public Input<string>? DeploymentType { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is
        /// created. The name must be 1-63 characters long, and comply with
        /// RFC1035. Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the las
        /// character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Name prefix for the reservations to be created at the time of delivery. The name prefix must comply with RFC1035. Maximum allowed length for name prefix is 20. Automatically created reservations name format will be -date-####.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// Planning state before being submitted for evaluation
        /// Possible values are: `DRAFT`, `SUBMITTED`.
        /// </summary>
        [Input("planningStatus")]
        public Input<string>? PlanningStatus { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The reservation mode which determines reservation-termination behavior and expected pricing.
        /// Possible values are: `CALENDAR`, `DEFAULT`.
        /// </summary>
        [Input("reservationMode")]
        public Input<string>? ReservationMode { get; set; }

        /// <summary>
        /// Name of reservations where the capacity is provisioned at the time of delivery of future reservations. If the reservation with the given name does not exist already, it is created automatically at the time of Approval with INACTIVE state till specified start-time. Either provide the reservationName or a namePrefix.
        /// </summary>
        [Input("reservationName")]
        public Input<string>? ReservationName { get; set; }

        /// <summary>
        /// Maintenance information for this reservation
        /// Possible values are: `GROUPED`, `INDEPENDENT`.
        /// </summary>
        [Input("schedulingType")]
        public Input<string>? SchedulingType { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// Server-defined URL for this resource with the resource id.
        /// </summary>
        [Input("selfLinkWithId")]
        public Input<string>? SelfLinkWithId { get; set; }

        /// <summary>
        /// Settings for sharing the future reservation
        /// Structure is documented below.
        /// </summary>
        [Input("shareSettings")]
        public Input<Inputs.FutureReservationShareSettingsGetArgs>? ShareSettings { get; set; }

        /// <summary>
        /// Indicates whether the auto-created reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from the delivered reservation.
        /// </summary>
        [Input("specificReservationRequired")]
        public Input<bool>? SpecificReservationRequired { get; set; }

        /// <summary>
        /// Future Reservation configuration to indicate instance properties and total count.
        /// Structure is documented below.
        /// </summary>
        [Input("specificSkuProperties")]
        public Input<Inputs.FutureReservationSpecificSkuPropertiesGetArgs>? SpecificSkuProperties { get; set; }

        [Input("statuses")]
        private InputList<Inputs.FutureReservationStatusGetArgs>? _statuses;

        /// <summary>
        /// [Output only] Status of the Future Reservation
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.FutureReservationStatusGetArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.FutureReservationStatusGetArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// Time window for this Future Reservation.
        /// Structure is documented below.
        /// </summary>
        [Input("timeWindow")]
        public Input<Inputs.FutureReservationTimeWindowGetArgs>? TimeWindow { get; set; }

        /// <summary>
        /// URL of the Zone where this future reservation resides.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public FutureReservationState()
        {
        }
        public static new FutureReservationState Empty => new FutureReservationState();
    }
}
