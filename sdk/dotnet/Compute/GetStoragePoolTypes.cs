// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetStoragePoolTypes
    {
        public static Task<GetStoragePoolTypesResult> InvokeAsync(GetStoragePoolTypesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStoragePoolTypesResult>("gcp:compute/getStoragePoolTypes:getStoragePoolTypes", args ?? new GetStoragePoolTypesArgs(), options.WithDefaults());

        public static Output<GetStoragePoolTypesResult> Invoke(GetStoragePoolTypesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStoragePoolTypesResult>("gcp:compute/getStoragePoolTypes:getStoragePoolTypes", args ?? new GetStoragePoolTypesInvokeArgs(), options.WithDefaults());

        public static Output<GetStoragePoolTypesResult> Invoke(GetStoragePoolTypesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStoragePoolTypesResult>("gcp:compute/getStoragePoolTypes:getStoragePoolTypes", args ?? new GetStoragePoolTypesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStoragePoolTypesArgs : global::Pulumi.InvokeArgs
    {
        [Input("project")]
        public string? Project { get; set; }

        [Input("storagePoolType", required: true)]
        public string StoragePoolType { get; set; } = null!;

        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetStoragePoolTypesArgs()
        {
        }
        public static new GetStoragePoolTypesArgs Empty => new GetStoragePoolTypesArgs();
    }

    public sealed class GetStoragePoolTypesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("storagePoolType", required: true)]
        public Input<string> StoragePoolType { get; set; } = null!;

        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetStoragePoolTypesInvokeArgs()
        {
        }
        public static new GetStoragePoolTypesInvokeArgs Empty => new GetStoragePoolTypesInvokeArgs();
    }


    [OutputType]
    public sealed class GetStoragePoolTypesResult
    {
        public readonly string CreationTimestamp;
        public readonly ImmutableArray<Outputs.GetStoragePoolTypesDeprecatedResult> Deprecateds;
        public readonly string Description;
        public readonly int Id;
        public readonly string Kind;
        public readonly int MaxPoolProvisionedCapacityGb;
        public readonly int MaxPoolProvisionedIops;
        public readonly int MaxPoolProvisionedThroughput;
        public readonly int MinPoolProvisionedCapacityGb;
        public readonly int MinPoolProvisionedIops;
        public readonly int MinPoolProvisionedThroughput;
        public readonly string Name;
        public readonly string Project;
        public readonly string SelfLink;
        public readonly string SelfLinkWithId;
        public readonly string StoragePoolType;
        public readonly ImmutableArray<string> SupportedDiskTypes;
        public readonly string Zone;

        [OutputConstructor]
        private GetStoragePoolTypesResult(
            string creationTimestamp,

            ImmutableArray<Outputs.GetStoragePoolTypesDeprecatedResult> deprecateds,

            string description,

            int id,

            string kind,

            int maxPoolProvisionedCapacityGb,

            int maxPoolProvisionedIops,

            int maxPoolProvisionedThroughput,

            int minPoolProvisionedCapacityGb,

            int minPoolProvisionedIops,

            int minPoolProvisionedThroughput,

            string name,

            string project,

            string selfLink,

            string selfLinkWithId,

            string storagePoolType,

            ImmutableArray<string> supportedDiskTypes,

            string zone)
        {
            CreationTimestamp = creationTimestamp;
            Deprecateds = deprecateds;
            Description = description;
            Id = id;
            Kind = kind;
            MaxPoolProvisionedCapacityGb = maxPoolProvisionedCapacityGb;
            MaxPoolProvisionedIops = maxPoolProvisionedIops;
            MaxPoolProvisionedThroughput = maxPoolProvisionedThroughput;
            MinPoolProvisionedCapacityGb = minPoolProvisionedCapacityGb;
            MinPoolProvisionedIops = minPoolProvisionedIops;
            MinPoolProvisionedThroughput = minPoolProvisionedThroughput;
            Name = name;
            Project = project;
            SelfLink = selfLink;
            SelfLinkWithId = selfLinkWithId;
            StoragePoolType = storagePoolType;
            SupportedDiskTypes = supportedDiskTypes;
            Zone = zone;
        }
    }
}
