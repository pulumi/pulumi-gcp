// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetSubnetwork
    {
        /// <summary>
        /// Get a subnetwork within GCE from its name and region.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_subnetwork = Gcp.Compute.GetSubnetwork.Invoke(new()
        ///     {
        ///         Name = "default-us-east1",
        ///         Region = "us-east1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSubnetworkResult> InvokeAsync(GetSubnetworkArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubnetworkResult>("gcp:compute/getSubnetwork:getSubnetwork", args ?? new GetSubnetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Get a subnetwork within GCE from its name and region.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_subnetwork = Gcp.Compute.GetSubnetwork.Invoke(new()
        ///     {
        ///         Name = "default-us-east1",
        ///         Region = "us-east1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSubnetworkResult> Invoke(GetSubnetworkInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetworkResult>("gcp:compute/getSubnetwork:getSubnetwork", args ?? new GetSubnetworkInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a subnetwork within GCE from its name and region.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_subnetwork = Gcp.Compute.GetSubnetwork.Invoke(new()
        ///     {
        ///         Name = "default-us-east1",
        ///         Region = "us-east1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSubnetworkResult> Invoke(GetSubnetworkInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetworkResult>("gcp:compute/getSubnetwork:getSubnetwork", args ?? new GetSubnetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubnetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the subnetwork. One of `name` or `self_link`
        /// must be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The region this subnetwork has been created in. If
        /// unspecified, this defaults to the region configured in the provider.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// The self link of the subnetwork. If `self_link` is
        /// specified, `name`, `project`, and `region` are ignored.
        /// </summary>
        [Input("selfLink")]
        public string? SelfLink { get; set; }

        public GetSubnetworkArgs()
        {
        }
        public static new GetSubnetworkArgs Empty => new GetSubnetworkArgs();
    }

    public sealed class GetSubnetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the subnetwork. One of `name` or `self_link`
        /// must be specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region this subnetwork has been created in. If
        /// unspecified, this defaults to the region configured in the provider.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The self link of the subnetwork. If `self_link` is
        /// specified, `name`, `project`, and `region` are ignored.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        public GetSubnetworkInvokeArgs()
        {
        }
        public static new GetSubnetworkInvokeArgs Empty => new GetSubnetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubnetworkResult
    {
        /// <summary>
        /// Description of this subnetwork.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The external IPv6 address range that is assigned to this subnetwork.
        /// </summary>
        public readonly string ExternalIpv6Prefix;
        /// <summary>
        /// The IP address of the gateway.
        /// </summary>
        public readonly string GatewayAddress;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The internal IPv6 address range that is assigned to this subnetwork.
        /// </summary>
        public readonly string InternalIpv6Prefix;
        /// <summary>
        /// The range of IP addresses belonging to this subnetwork
        /// secondary range.
        /// </summary>
        public readonly string IpCidrRange;
        /// <summary>
        /// The access type of IPv6 address this subnet holds. Possible values are: `EXTERNAL`, `INTERNAL`.
        /// </summary>
        public readonly string Ipv6AccessType;
        public readonly string? Name;
        /// <summary>
        /// The network name or resource link to the parent
        /// network of this subnetwork.
        /// </summary>
        public readonly string Network;
        /// <summary>
        /// Whether the VMs in this subnet
        /// can access Google services without assigned external IP
        /// addresses.
        /// </summary>
        public readonly bool PrivateIpGoogleAccess;
        public readonly string Project;
        public readonly string Region;
        /// <summary>
        /// An array of configurations for secondary IP ranges for
        /// VM instances contained in this subnetwork. Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetworkSecondaryIpRangeResult> SecondaryIpRanges;
        public readonly string SelfLink;
        /// <summary>
        /// The stack type for the subnet. Possible values are: `IPV4_ONLY`, `IPV4_IPV6`, `IPV6_ONLY`.
        /// </summary>
        public readonly string StackType;
        /// <summary>
        /// The numeric ID of the resource.
        /// </summary>
        public readonly int SubnetworkId;

        [OutputConstructor]
        private GetSubnetworkResult(
            string description,

            string externalIpv6Prefix,

            string gatewayAddress,

            string id,

            string internalIpv6Prefix,

            string ipCidrRange,

            string ipv6AccessType,

            string? name,

            string network,

            bool privateIpGoogleAccess,

            string project,

            string region,

            ImmutableArray<Outputs.GetSubnetworkSecondaryIpRangeResult> secondaryIpRanges,

            string selfLink,

            string stackType,

            int subnetworkId)
        {
            Description = description;
            ExternalIpv6Prefix = externalIpv6Prefix;
            GatewayAddress = gatewayAddress;
            Id = id;
            InternalIpv6Prefix = internalIpv6Prefix;
            IpCidrRange = ipCidrRange;
            Ipv6AccessType = ipv6AccessType;
            Name = name;
            Network = network;
            PrivateIpGoogleAccess = privateIpGoogleAccess;
            Project = project;
            Region = region;
            SecondaryIpRanges = secondaryIpRanges;
            SelfLink = selfLink;
            StackType = stackType;
            SubnetworkId = subnetworkId;
        }
    }
}
