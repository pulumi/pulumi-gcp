// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static partial class Invokes
    {
        /// <summary>
        /// Get a subnetwork within GCE from its name and region.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/d/compute_subnetwork.html.markdown.
        /// </summary>
        public static Task<GetSubnetworkResult> GetSubnetwork(GetSubnetworkArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSubnetworkResult>("gcp:compute/getSubnetwork:getSubnetwork", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetSubnetworkArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the subnetwork. One of `name` or `self_link`
        /// must be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The region this subnetwork has been created in. If
        /// unspecified, this defaults to the region configured in the provider.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// The self link of the subnetwork. If `self_link` is
        /// specified, `name`, `project`, and `region` are ignored.
        /// </summary>
        [Input("selfLink")]
        public string? SelfLink { get; set; }

        public GetSubnetworkArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetSubnetworkResult
    {
        /// <summary>
        /// Description of this subnetwork.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The IP address of the gateway.
        /// </summary>
        public readonly string GatewayAddress;
        /// <summary>
        /// The range of IP addresses belonging to this subnetwork
        /// secondary range.
        /// </summary>
        public readonly string IpCidrRange;
        public readonly string? Name;
        /// <summary>
        /// The network name or resource link to the parent
        /// network of this subnetwork.
        /// </summary>
        public readonly string Network;
        /// <summary>
        /// Whether the VMs in this subnet
        /// can access Google services without assigned external IP
        /// addresses.
        /// </summary>
        public readonly bool PrivateIpGoogleAccess;
        public readonly string Project;
        public readonly string Region;
        /// <summary>
        /// An array of configurations for secondary IP ranges for
        /// VM instances contained in this subnetwork. Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetworkSecondaryIpRangesResult> SecondaryIpRanges;
        public readonly string SelfLink;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetSubnetworkResult(
            string description,
            string gatewayAddress,
            string ipCidrRange,
            string? name,
            string network,
            bool privateIpGoogleAccess,
            string project,
            string region,
            ImmutableArray<Outputs.GetSubnetworkSecondaryIpRangesResult> secondaryIpRanges,
            string selfLink,
            string id)
        {
            Description = description;
            GatewayAddress = gatewayAddress;
            IpCidrRange = ipCidrRange;
            Name = name;
            Network = network;
            PrivateIpGoogleAccess = privateIpGoogleAccess;
            Project = project;
            Region = region;
            SecondaryIpRanges = secondaryIpRanges;
            SelfLink = selfLink;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetSubnetworkSecondaryIpRangesResult
    {
        /// <summary>
        /// The range of IP addresses belonging to this subnetwork
        /// secondary range.
        /// </summary>
        public readonly string IpCidrRange;
        /// <summary>
        /// The name associated with this subnetwork secondary range, used
        /// when adding an alias IP range to a VM instance.
        /// </summary>
        public readonly string RangeName;

        [OutputConstructor]
        private GetSubnetworkSecondaryIpRangesResult(
            string ipCidrRange,
            string rangeName)
        {
            IpCidrRange = ipCidrRange;
            RangeName = rangeName;
        }
    }
    }
}
