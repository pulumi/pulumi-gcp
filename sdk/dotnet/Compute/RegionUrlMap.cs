// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// UrlMaps are used to route requests to a backend service based on rules
    /// that you define for the host and path of an incoming URL.
    /// 
    /// ## Example Usage
    /// ### Region Url Map Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var @default = new Gcp.Compute.RegionHealthCheck("default", new Gcp.Compute.RegionHealthCheckArgs
    ///         {
    ///             Region = "us-central1",
    ///             CheckIntervalSec = 1,
    ///             TimeoutSec = 1,
    ///             HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///             {
    ///                 Port = 80,
    ///                 RequestPath = "/",
    ///             },
    ///         });
    ///         var login = new Gcp.Compute.RegionBackendService("login", new Gcp.Compute.RegionBackendServiceArgs
    ///         {
    ///             Region = "us-central1",
    ///             Protocol = "HTTP",
    ///             TimeoutSec = 10,
    ///             HealthChecks = 
    ///             {
    ///                 @default.Id,
    ///             },
    ///         });
    ///         var home = new Gcp.Compute.RegionBackendService("home", new Gcp.Compute.RegionBackendServiceArgs
    ///         {
    ///             Region = "us-central1",
    ///             Protocol = "HTTP",
    ///             TimeoutSec = 10,
    ///             HealthChecks = 
    ///             {
    ///                 @default.Id,
    ///             },
    ///         });
    ///         var regionurlmap = new Gcp.Compute.RegionUrlMap("regionurlmap", new Gcp.Compute.RegionUrlMapArgs
    ///         {
    ///             Region = "us-central1",
    ///             Description = "a description",
    ///             DefaultService = home.Id,
    ///             HostRules = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///                 {
    ///                     Hosts = 
    ///                     {
    ///                         "mysite.com",
    ///                     },
    ///                     PathMatcher = "allpaths",
    ///                 },
    ///             },
    ///             PathMatchers = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///                 {
    ///                     Name = "allpaths",
    ///                     DefaultService = home.Id,
    ///                     PathRules = 
    ///                     {
    ///                         new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleArgs
    ///                         {
    ///                             Paths = 
    ///                             {
    ///                                 "/home",
    ///                             },
    ///                             Service = home.Id,
    ///                         },
    ///                         new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleArgs
    ///                         {
    ///                             Paths = 
    ///                             {
    ///                                 "/login",
    ///                             },
    ///                             Service = login.Id,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Tests = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapTestArgs
    ///                 {
    ///                     Service = home.Id,
    ///                     Host = "hi.com",
    ///                     Path = "/home",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Region Url Map L7 Ilb Path
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var @default = new Gcp.Compute.RegionHealthCheck("default", new Gcp.Compute.RegionHealthCheckArgs
    ///         {
    ///             HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///             {
    ///                 Port = 80,
    ///             },
    ///         });
    ///         var home = new Gcp.Compute.RegionBackendService("home", new Gcp.Compute.RegionBackendServiceArgs
    ///         {
    ///             Protocol = "HTTP",
    ///             TimeoutSec = 10,
    ///             HealthChecks = 
    ///             {
    ///                 @default.Id,
    ///             },
    ///             LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         });
    ///         var regionurlmap = new Gcp.Compute.RegionUrlMap("regionurlmap", new Gcp.Compute.RegionUrlMapArgs
    ///         {
    ///             Description = "a description",
    ///             DefaultService = home.Id,
    ///             HostRules = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///                 {
    ///                     Hosts = 
    ///                     {
    ///                         "mysite.com",
    ///                     },
    ///                     PathMatcher = "allpaths",
    ///                 },
    ///             },
    ///             PathMatchers = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///                 {
    ///                     Name = "allpaths",
    ///                     DefaultService = home.Id,
    ///                     PathRules = 
    ///                     {
    ///                         new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleArgs
    ///                         {
    ///                             Paths = 
    ///                             {
    ///                                 "/home",
    ///                             },
    ///                             RouteAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionArgs
    ///                             {
    ///                                 CorsPolicy = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs
    ///                                 {
    ///                                     AllowCredentials = true,
    ///                                     AllowHeaders = 
    ///                                     {
    ///                                         "Allowed content",
    ///                                     },
    ///                                     AllowMethods = 
    ///                                     {
    ///                                         "GET",
    ///                                     },
    ///                                     AllowOrigins = 
    ///                                     {
    ///                                         "Allowed origin",
    ///                                     },
    ///                                     ExposeHeaders = 
    ///                                     {
    ///                                         "Exposed header",
    ///                                     },
    ///                                     MaxAge = 30,
    ///                                     Disabled = false,
    ///                                 },
    ///                                 FaultInjectionPolicy = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs
    ///                                 {
    ///                                     Abort = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs
    ///                                     {
    ///                                         HttpStatus = 234,
    ///                                         Percentage = 5.6,
    ///                                     },
    ///                                     Delay = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs
    ///                                     {
    ///                                         FixedDelay = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs
    ///                                         {
    ///                                             Seconds = "0",
    ///                                             Nanos = 50000,
    ///                                         },
    ///                                         Percentage = 7.8,
    ///                                     },
    ///                                 },
    ///                                 RequestMirrorPolicy = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs
    ///                                 {
    ///                                     BackendService = home.Id,
    ///                                 },
    ///                                 RetryPolicy = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs
    ///                                 {
    ///                                     NumRetries = 4,
    ///                                     PerTryTimeout = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs
    ///                                     {
    ///                                         Seconds = "30",
    ///                                     },
    ///                                     RetryConditions = 
    ///                                     {
    ///                                         "5xx",
    ///                                         "deadline-exceeded",
    ///                                     },
    ///                                 },
    ///                                 Timeout = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs
    ///                                 {
    ///                                     Seconds = "20",
    ///                                     Nanos = 750000000,
    ///                                 },
    ///                                 UrlRewrite = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs
    ///                                 {
    ///                                     HostRewrite = "A replacement header",
    ///                                     PathPrefixRewrite = "A replacement path",
    ///                                 },
    ///                                 WeightedBackendServices = 
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs
    ///                                     {
    ///                                         BackendService = home.Id,
    ///                                         Weight = 400,
    ///                                         HeaderAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs
    ///                                         {
    ///                                             RequestHeadersToRemoves = 
    ///                                             {
    ///                                                 "RemoveMe",
    ///                                             },
    ///                                             RequestHeadersToAdds = 
    ///                                             {
    ///                                                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs
    ///                                                 {
    ///                                                     HeaderName = "AddMe",
    ///                                                     HeaderValue = "MyValue",
    ///                                                     Replace = true,
    ///                                                 },
    ///                                             },
    ///                                             ResponseHeadersToRemoves = 
    ///                                             {
    ///                                                 "RemoveMe",
    ///                                             },
    ///                                             ResponseHeadersToAdds = 
    ///                                             {
    ///                                                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs
    ///                                                 {
    ///                                                     HeaderName = "AddMe",
    ///                                                     HeaderValue = "MyValue",
    ///                                                     Replace = false,
    ///                                                 },
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Tests = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapTestArgs
    ///                 {
    ///                     Service = home.Id,
    ///                     Host = "hi.com",
    ///                     Path = "/home",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Region Url Map L7 Ilb Path Partial
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var @default = new Gcp.Compute.RegionHealthCheck("default", new Gcp.Compute.RegionHealthCheckArgs
    ///         {
    ///             HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///             {
    ///                 Port = 80,
    ///             },
    ///         });
    ///         var home = new Gcp.Compute.RegionBackendService("home", new Gcp.Compute.RegionBackendServiceArgs
    ///         {
    ///             Protocol = "HTTP",
    ///             TimeoutSec = 10,
    ///             HealthChecks = 
    ///             {
    ///                 @default.Id,
    ///             },
    ///             LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         });
    ///         var regionurlmap = new Gcp.Compute.RegionUrlMap("regionurlmap", new Gcp.Compute.RegionUrlMapArgs
    ///         {
    ///             Description = "a description",
    ///             DefaultService = home.Id,
    ///             HostRules = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///                 {
    ///                     Hosts = 
    ///                     {
    ///                         "mysite.com",
    ///                     },
    ///                     PathMatcher = "allpaths",
    ///                 },
    ///             },
    ///             PathMatchers = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///                 {
    ///                     Name = "allpaths",
    ///                     DefaultService = home.Id,
    ///                     PathRules = 
    ///                     {
    ///                         new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleArgs
    ///                         {
    ///                             Paths = 
    ///                             {
    ///                                 "/home",
    ///                             },
    ///                             RouteAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionArgs
    ///                             {
    ///                                 RetryPolicy = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs
    ///                                 {
    ///                                     NumRetries = 4,
    ///                                     PerTryTimeout = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs
    ///                                     {
    ///                                         Seconds = "30",
    ///                                     },
    ///                                     RetryConditions = 
    ///                                     {
    ///                                         "5xx",
    ///                                         "deadline-exceeded",
    ///                                     },
    ///                                 },
    ///                                 Timeout = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs
    ///                                 {
    ///                                     Seconds = "20",
    ///                                     Nanos = 750000000,
    ///                                 },
    ///                                 UrlRewrite = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs
    ///                                 {
    ///                                     HostRewrite = "A replacement header",
    ///                                     PathPrefixRewrite = "A replacement path",
    ///                                 },
    ///                                 WeightedBackendServices = 
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs
    ///                                     {
    ///                                         BackendService = home.Id,
    ///                                         Weight = 400,
    ///                                         HeaderAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs
    ///                                         {
    ///                                             ResponseHeadersToAdds = 
    ///                                             {
    ///                                                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs
    ///                                                 {
    ///                                                     HeaderName = "AddMe",
    ///                                                     HeaderValue = "MyValue",
    ///                                                     Replace = false,
    ///                                                 },
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Tests = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapTestArgs
    ///                 {
    ///                     Service = home.Id,
    ///                     Host = "hi.com",
    ///                     Path = "/home",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Region Url Map L7 Ilb Route
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var @default = new Gcp.Compute.RegionHealthCheck("default", new Gcp.Compute.RegionHealthCheckArgs
    ///         {
    ///             HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///             {
    ///                 Port = 80,
    ///             },
    ///         });
    ///         var home = new Gcp.Compute.RegionBackendService("home", new Gcp.Compute.RegionBackendServiceArgs
    ///         {
    ///             Protocol = "HTTP",
    ///             TimeoutSec = 10,
    ///             HealthChecks = 
    ///             {
    ///                 @default.Id,
    ///             },
    ///             LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         });
    ///         var regionurlmap = new Gcp.Compute.RegionUrlMap("regionurlmap", new Gcp.Compute.RegionUrlMapArgs
    ///         {
    ///             Description = "a description",
    ///             DefaultService = home.Id,
    ///             HostRules = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///                 {
    ///                     Hosts = 
    ///                     {
    ///                         "mysite.com",
    ///                     },
    ///                     PathMatcher = "allpaths",
    ///                 },
    ///             },
    ///             PathMatchers = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///                 {
    ///                     Name = "allpaths",
    ///                     DefaultService = home.Id,
    ///                     RouteRules = 
    ///                     {
    ///                         new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleArgs
    ///                         {
    ///                             Priority = 1,
    ///                             HeaderAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleHeaderActionArgs
    ///                             {
    ///                                 RequestHeadersToRemoves = 
    ///                                 {
    ///                                     "RemoveMe2",
    ///                                 },
    ///                                 RequestHeadersToAdds = 
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs
    ///                                     {
    ///                                         HeaderName = "AddSomethingElse",
    ///                                         HeaderValue = "MyOtherValue",
    ///                                         Replace = true,
    ///                                     },
    ///                                 },
    ///                                 ResponseHeadersToRemoves = 
    ///                                 {
    ///                                     "RemoveMe3",
    ///                                 },
    ///                                 ResponseHeadersToAdds = 
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs
    ///                                     {
    ///                                         HeaderName = "AddMe",
    ///                                         HeaderValue = "MyValue",
    ///                                         Replace = false,
    ///                                     },
    ///                                 },
    ///                             },
    ///                             MatchRules = 
    ///                             {
    ///                                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleArgs
    ///                                 {
    ///                                     FullPathMatch = "a full path",
    ///                                     HeaderMatches = 
    ///                                     {
    ///                                         new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs
    ///                                         {
    ///                                             HeaderName = "someheader",
    ///                                             ExactMatch = "match this exactly",
    ///                                             InvertMatch = true,
    ///                                         },
    ///                                     },
    ///                                     IgnoreCase = true,
    ///                                     MetadataFilters = 
    ///                                     {
    ///                                         new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs
    ///                                         {
    ///                                             FilterMatchCriteria = "MATCH_ANY",
    ///                                             FilterLabels = 
    ///                                             {
    ///                                                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs
    ///                                                 {
    ///                                                     Name = "PLANET",
    ///                                                     Value = "MARS",
    ///                                                 },
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                     QueryParameterMatches = 
    ///                                     {
    ///                                         new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs
    ///                                         {
    ///                                             Name = "a query parameter",
    ///                                             PresentMatch = true,
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                             UrlRedirect = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs
    ///                             {
    ///                                 HostRedirect = "A host",
    ///                                 HttpsRedirect = false,
    ///                                 PathRedirect = "some/path",
    ///                                 RedirectResponseCode = "TEMPORARY_REDIRECT",
    ///                                 StripQuery = true,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Tests = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapTestArgs
    ///                 {
    ///                     Service = home.Id,
    ///                     Host = "hi.com",
    ///                     Path = "/home",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Region Url Map L7 Ilb Route Partial
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var @default = new Gcp.Compute.RegionHealthCheck("default", new Gcp.Compute.RegionHealthCheckArgs
    ///         {
    ///             HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///             {
    ///                 Port = 80,
    ///             },
    ///         });
    ///         var home = new Gcp.Compute.RegionBackendService("home", new Gcp.Compute.RegionBackendServiceArgs
    ///         {
    ///             Protocol = "HTTP",
    ///             TimeoutSec = 10,
    ///             HealthChecks = 
    ///             {
    ///                 @default.Id,
    ///             },
    ///             LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         });
    ///         var regionurlmap = new Gcp.Compute.RegionUrlMap("regionurlmap", new Gcp.Compute.RegionUrlMapArgs
    ///         {
    ///             Description = "a description",
    ///             DefaultService = home.Id,
    ///             HostRules = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///                 {
    ///                     Hosts = 
    ///                     {
    ///                         "mysite.com",
    ///                     },
    ///                     PathMatcher = "allpaths",
    ///                 },
    ///             },
    ///             PathMatchers = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///                 {
    ///                     Name = "allpaths",
    ///                     DefaultService = home.Id,
    ///                     RouteRules = 
    ///                     {
    ///                         new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleArgs
    ///                         {
    ///                             Priority = 1,
    ///                             Service = home.Id,
    ///                             HeaderAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleHeaderActionArgs
    ///                             {
    ///                                 RequestHeadersToRemoves = 
    ///                                 {
    ///                                     "RemoveMe2",
    ///                                 },
    ///                             },
    ///                             MatchRules = 
    ///                             {
    ///                                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleArgs
    ///                                 {
    ///                                     FullPathMatch = "a full path",
    ///                                     HeaderMatches = 
    ///                                     {
    ///                                         new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs
    ///                                         {
    ///                                             HeaderName = "someheader",
    ///                                             ExactMatch = "match this exactly",
    ///                                             InvertMatch = true,
    ///                                         },
    ///                                     },
    ///                                     QueryParameterMatches = 
    ///                                     {
    ///                                         new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs
    ///                                         {
    ///                                             Name = "a query parameter",
    ///                                             PresentMatch = true,
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Tests = 
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapTestArgs
    ///                 {
    ///                     Service = home.Id,
    ///                     Host = "hi.com",
    ///                     Path = "/home",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// RegionUrlMap can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/regionUrlMap:RegionUrlMap default projects/{{project}}/regions/{{region}}/urlMaps/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/regionUrlMap:RegionUrlMap default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/regionUrlMap:RegionUrlMap default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:compute/regionUrlMap:RegionUrlMap default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/regionUrlMap:RegionUrlMap")]
    public partial class RegionUrlMap : Pulumi.CustomResource
    {
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// A reference to a RegionBackendService resource. This will be used if
        /// none of the pathRules defined by this PathMatcher is matched by
        /// the URL's path portion.
        /// </summary>
        [Output("defaultService")]
        public Output<string?> DefaultService { get; private set; } = null!;

        /// <summary>
        /// When none of the specified hostRules match, the request is redirected to a URL specified
        /// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        /// defaultRouteAction must not be set.
        /// Structure is documented below.
        /// </summary>
        [Output("defaultUrlRedirect")]
        public Output<Outputs.RegionUrlMapDefaultUrlRedirect?> DefaultUrlRedirect { get; private set; } = null!;

        /// <summary>
        /// Description of this test case.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource. This field is used internally during updates of this resource.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// The list of HostRules to use against the URL.
        /// Structure is documented below.
        /// </summary>
        [Output("hostRules")]
        public Output<ImmutableArray<Outputs.RegionUrlMapHostRule>> HostRules { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the resource.
        /// </summary>
        [Output("mapId")]
        public Output<int> MapId { get; private set; } = null!;

        /// <summary>
        /// The name of the query parameter to match. The query parameter must exist in the
        /// request, in the absence of which the request match fails.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the PathMatcher to use to match the path portion of
        /// the URL if the hostRule matches the URL's host portion.
        /// </summary>
        [Output("pathMatchers")]
        public Output<ImmutableArray<Outputs.RegionUrlMapPathMatcher>> PathMatchers { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The Region in which the url map should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// The list of expected URL mappings. Requests to update this UrlMap will
        /// succeed only if all of the test cases pass.
        /// Structure is documented below.
        /// </summary>
        [Output("tests")]
        public Output<ImmutableArray<Outputs.RegionUrlMapTest>> Tests { get; private set; } = null!;


        /// <summary>
        /// Create a RegionUrlMap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegionUrlMap(string name, RegionUrlMapArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:compute/regionUrlMap:RegionUrlMap", name, args ?? new RegionUrlMapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegionUrlMap(string name, Input<string> id, RegionUrlMapState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/regionUrlMap:RegionUrlMap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegionUrlMap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegionUrlMap Get(string name, Input<string> id, RegionUrlMapState? state = null, CustomResourceOptions? options = null)
        {
            return new RegionUrlMap(name, id, state, options);
        }
    }

    public sealed class RegionUrlMapArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A reference to a RegionBackendService resource. This will be used if
        /// none of the pathRules defined by this PathMatcher is matched by
        /// the URL's path portion.
        /// </summary>
        [Input("defaultService")]
        public Input<string>? DefaultService { get; set; }

        /// <summary>
        /// When none of the specified hostRules match, the request is redirected to a URL specified
        /// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        /// defaultRouteAction must not be set.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultUrlRedirect")]
        public Input<Inputs.RegionUrlMapDefaultUrlRedirectArgs>? DefaultUrlRedirect { get; set; }

        /// <summary>
        /// Description of this test case.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("hostRules")]
        private InputList<Inputs.RegionUrlMapHostRuleArgs>? _hostRules;

        /// <summary>
        /// The list of HostRules to use against the URL.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionUrlMapHostRuleArgs> HostRules
        {
            get => _hostRules ?? (_hostRules = new InputList<Inputs.RegionUrlMapHostRuleArgs>());
            set => _hostRules = value;
        }

        /// <summary>
        /// The name of the query parameter to match. The query parameter must exist in the
        /// request, in the absence of which the request match fails.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pathMatchers")]
        private InputList<Inputs.RegionUrlMapPathMatcherArgs>? _pathMatchers;

        /// <summary>
        /// The name of the PathMatcher to use to match the path portion of
        /// the URL if the hostRule matches the URL's host portion.
        /// </summary>
        public InputList<Inputs.RegionUrlMapPathMatcherArgs> PathMatchers
        {
            get => _pathMatchers ?? (_pathMatchers = new InputList<Inputs.RegionUrlMapPathMatcherArgs>());
            set => _pathMatchers = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Region in which the url map should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tests")]
        private InputList<Inputs.RegionUrlMapTestArgs>? _tests;

        /// <summary>
        /// The list of expected URL mappings. Requests to update this UrlMap will
        /// succeed only if all of the test cases pass.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionUrlMapTestArgs> Tests
        {
            get => _tests ?? (_tests = new InputList<Inputs.RegionUrlMapTestArgs>());
            set => _tests = value;
        }

        public RegionUrlMapArgs()
        {
        }
    }

    public sealed class RegionUrlMapState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// A reference to a RegionBackendService resource. This will be used if
        /// none of the pathRules defined by this PathMatcher is matched by
        /// the URL's path portion.
        /// </summary>
        [Input("defaultService")]
        public Input<string>? DefaultService { get; set; }

        /// <summary>
        /// When none of the specified hostRules match, the request is redirected to a URL specified
        /// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        /// defaultRouteAction must not be set.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultUrlRedirect")]
        public Input<Inputs.RegionUrlMapDefaultUrlRedirectGetArgs>? DefaultUrlRedirect { get; set; }

        /// <summary>
        /// Description of this test case.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Fingerprint of this resource. This field is used internally during updates of this resource.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        [Input("hostRules")]
        private InputList<Inputs.RegionUrlMapHostRuleGetArgs>? _hostRules;

        /// <summary>
        /// The list of HostRules to use against the URL.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionUrlMapHostRuleGetArgs> HostRules
        {
            get => _hostRules ?? (_hostRules = new InputList<Inputs.RegionUrlMapHostRuleGetArgs>());
            set => _hostRules = value;
        }

        /// <summary>
        /// The unique identifier for the resource.
        /// </summary>
        [Input("mapId")]
        public Input<int>? MapId { get; set; }

        /// <summary>
        /// The name of the query parameter to match. The query parameter must exist in the
        /// request, in the absence of which the request match fails.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pathMatchers")]
        private InputList<Inputs.RegionUrlMapPathMatcherGetArgs>? _pathMatchers;

        /// <summary>
        /// The name of the PathMatcher to use to match the path portion of
        /// the URL if the hostRule matches the URL's host portion.
        /// </summary>
        public InputList<Inputs.RegionUrlMapPathMatcherGetArgs> PathMatchers
        {
            get => _pathMatchers ?? (_pathMatchers = new InputList<Inputs.RegionUrlMapPathMatcherGetArgs>());
            set => _pathMatchers = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Region in which the url map should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("tests")]
        private InputList<Inputs.RegionUrlMapTestGetArgs>? _tests;

        /// <summary>
        /// The list of expected URL mappings. Requests to update this UrlMap will
        /// succeed only if all of the test cases pass.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionUrlMapTestGetArgs> Tests
        {
            get => _tests ?? (_tests = new InputList<Inputs.RegionUrlMapTestGetArgs>());
            set => _tests = value;
        }

        public RegionUrlMapState()
        {
        }
    }
}
