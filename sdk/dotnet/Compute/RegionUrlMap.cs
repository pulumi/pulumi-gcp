// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// UrlMaps are used to route requests to a backend service based on rules
    /// that you define for the host and path of an incoming URL.
    /// 
    /// ## Example Usage
    /// 
    /// ### Region Url Map Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.RegionHealthCheck("default", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "health-check",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///             RequestPath = "/",
    ///         },
    ///     });
    /// 
    ///     var login = new Gcp.Compute.RegionBackendService("login", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "login",
    ///         Protocol = "HTTP",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     var home = new Gcp.Compute.RegionBackendService("home", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "home",
    ///         Protocol = "HTTP",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     var regionurlmap = new Gcp.Compute.RegionUrlMap("regionurlmap", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "regionurlmap",
    ///         Description = "a description",
    ///         DefaultService = home.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = home.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/home",
    ///                         },
    ///                         Service = home.Id,
    ///                     },
    ///                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/login",
    ///                         },
    ///                         Service = login.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tests = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapTestArgs
    ///             {
    ///                 Service = home.Id,
    ///                 Host = "hi.com",
    ///                 Path = "/home",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Region Url Map Default Route Action
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.RegionHealthCheck("default", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "health-check",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///             RequestPath = "/",
    ///         },
    ///     });
    /// 
    ///     var login = new Gcp.Compute.RegionBackendService("login", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "login",
    ///         Protocol = "HTTP",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     var home = new Gcp.Compute.RegionBackendService("home", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "home",
    ///         Protocol = "HTTP",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     var regionurlmap = new Gcp.Compute.RegionUrlMap("regionurlmap", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "regionurlmap",
    ///         Description = "a description",
    ///         DefaultRouteAction = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionArgs
    ///         {
    ///             RetryPolicy = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionRetryPolicyArgs
    ///             {
    ///                 RetryConditions = new[]
    ///                 {
    ///                     "5xx",
    ///                     "gateway-error",
    ///                 },
    ///                 NumRetries = 3,
    ///                 PerTryTimeout = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutArgs
    ///                 {
    ///                     Seconds = "0",
    ///                     Nanos = 500,
    ///                 },
    ///             },
    ///             RequestMirrorPolicy = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionRequestMirrorPolicyArgs
    ///             {
    ///                 BackendService = home.Id,
    ///             },
    ///             WeightedBackendServices = new[]
    ///             {
    ///                 new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionWeightedBackendServiceArgs
    ///                 {
    ///                     BackendService = login.Id,
    ///                     Weight = 200,
    ///                     HeaderAction = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionArgs
    ///                     {
    ///                         RequestHeadersToAdds = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs
    ///                             {
    ///                                 HeaderName = "foo-request-1",
    ///                                 HeaderValue = "bar",
    ///                                 Replace = true,
    ///                             },
    ///                         },
    ///                         RequestHeadersToRemoves = new[]
    ///                         {
    ///                             "fizz",
    ///                         },
    ///                         ResponseHeadersToAdds = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs
    ///                             {
    ///                                 HeaderName = "foo-response-1",
    ///                                 HeaderValue = "bar",
    ///                                 Replace = true,
    ///                             },
    ///                         },
    ///                         ResponseHeadersToRemoves = new[]
    ///                         {
    ///                             "buzz",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionWeightedBackendServiceArgs
    ///                 {
    ///                     BackendService = home.Id,
    ///                     Weight = 100,
    ///                     HeaderAction = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionArgs
    ///                     {
    ///                         RequestHeadersToAdds = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs
    ///                             {
    ///                                 HeaderName = "foo-request-1",
    ///                                 HeaderValue = "bar",
    ///                                 Replace = true,
    ///                             },
    ///                             new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs
    ///                             {
    ///                                 HeaderName = "foo-request-2",
    ///                                 HeaderValue = "bar",
    ///                                 Replace = true,
    ///                             },
    ///                         },
    ///                         RequestHeadersToRemoves = new[]
    ///                         {
    ///                             "fizz",
    ///                         },
    ///                         ResponseHeadersToAdds = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs
    ///                             {
    ///                                 HeaderName = "foo-response-2",
    ///                                 HeaderValue = "bar",
    ///                                 Replace = true,
    ///                             },
    ///                             new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs
    ///                             {
    ///                                 HeaderName = "foo-response-1",
    ///                                 HeaderValue = "bar",
    ///                                 Replace = true,
    ///                             },
    ///                         },
    ///                         ResponseHeadersToRemoves = new[]
    ///                         {
    ///                             "buzz",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             UrlRewrite = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionUrlRewriteArgs
    ///             {
    ///                 HostRewrite = "dev.example.com",
    ///                 PathPrefixRewrite = "/v1/api/",
    ///             },
    ///             CorsPolicy = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionCorsPolicyArgs
    ///             {
    ///                 Disabled = false,
    ///                 AllowCredentials = true,
    ///                 AllowHeaders = new[]
    ///                 {
    ///                     "foobar",
    ///                 },
    ///                 AllowMethods = new[]
    ///                 {
    ///                     "GET",
    ///                     "POST",
    ///                 },
    ///                 AllowOrigins = new[]
    ///                 {
    ///                     "example.com",
    ///                 },
    ///                 ExposeHeaders = new[]
    ///                 {
    ///                     "foobar",
    ///                 },
    ///                 MaxAge = 60,
    ///             },
    ///             FaultInjectionPolicy = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionFaultInjectionPolicyArgs
    ///             {
    ///                 Delay = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayArgs
    ///                 {
    ///                     FixedDelay = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs
    ///                     {
    ///                         Seconds = "0",
    ///                         Nanos = 500,
    ///                     },
    ///                     Percentage = 0.5,
    ///                 },
    ///                 Abort = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortArgs
    ///                 {
    ///                     HttpStatus = 500,
    ///                     Percentage = 0.5,
    ///                 },
    ///             },
    ///             Timeout = new Gcp.Compute.Inputs.RegionUrlMapDefaultRouteActionTimeoutArgs
    ///             {
    ///                 Seconds = "0",
    ///                 Nanos = 500,
    ///             },
    ///         },
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = home.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/home",
    ///                         },
    ///                         Service = home.Id,
    ///                     },
    ///                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/login",
    ///                         },
    ///                         Service = login.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tests = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapTestArgs
    ///             {
    ///                 Service = home.Id,
    ///                 Host = "hi.com",
    ///                 Path = "/home",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Region Url Map L7 Ilb Path
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.RegionHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var home = new Gcp.Compute.RegionBackendService("home", new()
    ///     {
    ///         Name = "home",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///     });
    /// 
    ///     var regionurlmap = new Gcp.Compute.RegionUrlMap("regionurlmap", new()
    ///     {
    ///         Name = "regionurlmap",
    ///         Description = "a description",
    ///         DefaultService = home.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = home.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/home",
    ///                         },
    ///                         RouteAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionArgs
    ///                         {
    ///                             CorsPolicy = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs
    ///                             {
    ///                                 AllowCredentials = true,
    ///                                 AllowHeaders = new[]
    ///                                 {
    ///                                     "Allowed content",
    ///                                 },
    ///                                 AllowMethods = new[]
    ///                                 {
    ///                                     "GET",
    ///                                 },
    ///                                 AllowOrigins = new[]
    ///                                 {
    ///                                     "Allowed origin",
    ///                                 },
    ///                                 ExposeHeaders = new[]
    ///                                 {
    ///                                     "Exposed header",
    ///                                 },
    ///                                 MaxAge = 30,
    ///                                 Disabled = false,
    ///                             },
    ///                             FaultInjectionPolicy = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs
    ///                             {
    ///                                 Abort = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs
    ///                                 {
    ///                                     HttpStatus = 234,
    ///                                     Percentage = 5.6,
    ///                                 },
    ///                                 Delay = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs
    ///                                 {
    ///                                     FixedDelay = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs
    ///                                     {
    ///                                         Seconds = "0",
    ///                                         Nanos = 50000,
    ///                                     },
    ///                                     Percentage = 7.8,
    ///                                 },
    ///                             },
    ///                             RequestMirrorPolicy = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs
    ///                             {
    ///                                 BackendService = home.Id,
    ///                             },
    ///                             RetryPolicy = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs
    ///                             {
    ///                                 NumRetries = 4,
    ///                                 PerTryTimeout = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs
    ///                                 {
    ///                                     Seconds = "30",
    ///                                 },
    ///                                 RetryConditions = new[]
    ///                                 {
    ///                                     "5xx",
    ///                                     "deadline-exceeded",
    ///                                 },
    ///                             },
    ///                             Timeout = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs
    ///                             {
    ///                                 Seconds = "20",
    ///                                 Nanos = 750000000,
    ///                             },
    ///                             UrlRewrite = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs
    ///                             {
    ///                                 HostRewrite = "dev.example.com",
    ///                                 PathPrefixRewrite = "/v1/api/",
    ///                             },
    ///                             WeightedBackendServices = new[]
    ///                             {
    ///                                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs
    ///                                 {
    ///                                     BackendService = home.Id,
    ///                                     Weight = 400,
    ///                                     HeaderAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs
    ///                                     {
    ///                                         RequestHeadersToRemoves = new[]
    ///                                         {
    ///                                             "RemoveMe",
    ///                                         },
    ///                                         RequestHeadersToAdds = new[]
    ///                                         {
    ///                                             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs
    ///                                             {
    ///                                                 HeaderName = "AddMe",
    ///                                                 HeaderValue = "MyValue",
    ///                                                 Replace = true,
    ///                                             },
    ///                                         },
    ///                                         ResponseHeadersToRemoves = new[]
    ///                                         {
    ///                                             "RemoveMe",
    ///                                         },
    ///                                         ResponseHeadersToAdds = new[]
    ///                                         {
    ///                                             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs
    ///                                             {
    ///                                                 HeaderName = "AddMe",
    ///                                                 HeaderValue = "MyValue",
    ///                                                 Replace = false,
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tests = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapTestArgs
    ///             {
    ///                 Service = home.Id,
    ///                 Host = "hi.com",
    ///                 Path = "/home",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Region Url Map L7 Ilb Path Partial
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.RegionHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var home = new Gcp.Compute.RegionBackendService("home", new()
    ///     {
    ///         Name = "home",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///     });
    /// 
    ///     var regionurlmap = new Gcp.Compute.RegionUrlMap("regionurlmap", new()
    ///     {
    ///         Name = "regionurlmap",
    ///         Description = "a description",
    ///         DefaultService = home.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = home.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/home",
    ///                         },
    ///                         RouteAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionArgs
    ///                         {
    ///                             RetryPolicy = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs
    ///                             {
    ///                                 NumRetries = 4,
    ///                                 PerTryTimeout = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs
    ///                                 {
    ///                                     Seconds = "30",
    ///                                 },
    ///                                 RetryConditions = new[]
    ///                                 {
    ///                                     "5xx",
    ///                                     "deadline-exceeded",
    ///                                 },
    ///                             },
    ///                             Timeout = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs
    ///                             {
    ///                                 Seconds = "20",
    ///                                 Nanos = 750000000,
    ///                             },
    ///                             UrlRewrite = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs
    ///                             {
    ///                                 HostRewrite = "dev.example.com",
    ///                                 PathPrefixRewrite = "/v1/api/",
    ///                             },
    ///                             WeightedBackendServices = new[]
    ///                             {
    ///                                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs
    ///                                 {
    ///                                     BackendService = home.Id,
    ///                                     Weight = 400,
    ///                                     HeaderAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs
    ///                                     {
    ///                                         ResponseHeadersToAdds = new[]
    ///                                         {
    ///                                             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs
    ///                                             {
    ///                                                 HeaderName = "AddMe",
    ///                                                 HeaderValue = "MyValue",
    ///                                                 Replace = false,
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tests = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapTestArgs
    ///             {
    ///                 Service = home.Id,
    ///                 Host = "hi.com",
    ///                 Path = "/home",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Region Url Map L7 Ilb Route
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.RegionHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var home = new Gcp.Compute.RegionBackendService("home", new()
    ///     {
    ///         Name = "home",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///     });
    /// 
    ///     var regionurlmap = new Gcp.Compute.RegionUrlMap("regionurlmap", new()
    ///     {
    ///         Name = "regionurlmap",
    ///         Description = "a description",
    ///         DefaultService = home.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = home.Id,
    ///                 RouteRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleArgs
    ///                     {
    ///                         Priority = 1,
    ///                         HeaderAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleHeaderActionArgs
    ///                         {
    ///                             RequestHeadersToRemoves = new[]
    ///                             {
    ///                                 "RemoveMe2",
    ///                             },
    ///                             RequestHeadersToAdds = new[]
    ///                             {
    ///                                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs
    ///                                 {
    ///                                     HeaderName = "AddSomethingElse",
    ///                                     HeaderValue = "MyOtherValue",
    ///                                     Replace = true,
    ///                                 },
    ///                             },
    ///                             ResponseHeadersToRemoves = new[]
    ///                             {
    ///                                 "RemoveMe3",
    ///                             },
    ///                             ResponseHeadersToAdds = new[]
    ///                             {
    ///                                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs
    ///                                 {
    ///                                     HeaderName = "AddMe",
    ///                                     HeaderValue = "MyValue",
    ///                                     Replace = false,
    ///                                 },
    ///                             },
    ///                         },
    ///                         MatchRules = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleArgs
    ///                             {
    ///                                 FullPathMatch = "a full path",
    ///                                 HeaderMatches = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs
    ///                                     {
    ///                                         HeaderName = "someheader",
    ///                                         ExactMatch = "match this exactly",
    ///                                         InvertMatch = true,
    ///                                     },
    ///                                 },
    ///                                 IgnoreCase = true,
    ///                                 MetadataFilters = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs
    ///                                     {
    ///                                         FilterMatchCriteria = "MATCH_ANY",
    ///                                         FilterLabels = new[]
    ///                                         {
    ///                                             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs
    ///                                             {
    ///                                                 Name = "PLANET",
    ///                                                 Value = "MARS",
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                                 QueryParameterMatches = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs
    ///                                     {
    ///                                         Name = "a query parameter",
    ///                                         PresentMatch = true,
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                         UrlRedirect = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs
    ///                         {
    ///                             HostRedirect = "A host",
    ///                             HttpsRedirect = false,
    ///                             PathRedirect = "some/path",
    ///                             RedirectResponseCode = "TEMPORARY_REDIRECT",
    ///                             StripQuery = true,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tests = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapTestArgs
    ///             {
    ///                 Service = home.Id,
    ///                 Host = "hi.com",
    ///                 Path = "/home",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Region Url Map L7 Ilb Route Partial
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.RegionHealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var home = new Gcp.Compute.RegionBackendService("home", new()
    ///     {
    ///         Name = "home",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         HealthChecks = @default.Id,
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///     });
    /// 
    ///     var regionurlmap = new Gcp.Compute.RegionUrlMap("regionurlmap", new()
    ///     {
    ///         Name = "regionurlmap",
    ///         Description = "a description",
    ///         DefaultService = home.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = home.Id,
    ///                 RouteRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleArgs
    ///                     {
    ///                         Priority = 1,
    ///                         Service = home.Id,
    ///                         HeaderAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleHeaderActionArgs
    ///                         {
    ///                             RequestHeadersToRemoves = new[]
    ///                             {
    ///                                 "RemoveMe2",
    ///                             },
    ///                         },
    ///                         MatchRules = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleArgs
    ///                             {
    ///                                 FullPathMatch = "a full path",
    ///                                 HeaderMatches = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs
    ///                                     {
    ///                                         HeaderName = "someheader",
    ///                                         ExactMatch = "match this exactly",
    ///                                         InvertMatch = true,
    ///                                     },
    ///                                 },
    ///                                 QueryParameterMatches = new[]
    ///                                 {
    ///                                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs
    ///                                     {
    ///                                         Name = "a query parameter",
    ///                                         PresentMatch = true,
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tests = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapTestArgs
    ///             {
    ///                 Service = home.Id,
    ///                 Host = "hi.com",
    ///                 Path = "/home",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Int Https Lb Https Redirect
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Tls = Pulumi.Tls;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Internal HTTPS load balancer with HTTP-to-HTTPS redirect
    ///     // VPC network
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "l7-ilb-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     // Proxy-only subnet
    ///     var proxySubnet = new Gcp.Compute.Subnetwork("proxy_subnet", new()
    ///     {
    ///         Name = "l7-ilb-proxy-subnet",
    ///         IpCidrRange = "10.0.0.0/24",
    ///         Region = "europe-west1",
    ///         Purpose = "REGIONAL_MANAGED_PROXY",
    ///         Role = "ACTIVE",
    ///         Network = @default.Id,
    ///     });
    /// 
    ///     // Backend subnet
    ///     var defaultSubnetwork = new Gcp.Compute.Subnetwork("default", new()
    ///     {
    ///         Name = "l7-ilb-subnet",
    ///         IpCidrRange = "10.0.1.0/24",
    ///         Region = "europe-west1",
    ///         Network = @default.Id,
    ///     });
    /// 
    ///     // Reserved internal address
    ///     var defaultAddress = new Gcp.Compute.Address("default", new()
    ///     {
    ///         Name = "l7-ilb-ip",
    ///         Subnetwork = defaultSubnetwork.Id,
    ///         AddressType = "INTERNAL",
    ///         IPAddress = "10.0.1.5",
    ///         Region = "europe-west1",
    ///         Purpose = "SHARED_LOADBALANCER_VIP",
    ///     });
    /// 
    ///     // Self-signed regional SSL certificate for testing
    ///     var defaultPrivateKey = new Tls.PrivateKey("default", new()
    ///     {
    ///         Algorithm = "RSA",
    ///         RsaBits = 2048,
    ///     });
    /// 
    ///     var defaultSelfSignedCert = new Tls.SelfSignedCert("default", new()
    ///     {
    ///         KeyAlgorithm = defaultPrivateKey.Algorithm,
    ///         PrivateKeyPem = defaultPrivateKey.PrivateKeyPem,
    ///         ValidityPeriodHours = 12,
    ///         EarlyRenewalHours = 3,
    ///         AllowedUses = new[]
    ///         {
    ///             "key_encipherment",
    ///             "digital_signature",
    ///             "server_auth",
    ///         },
    ///         DnsNames = new[]
    ///         {
    ///             "example.com",
    ///         },
    ///         Subject = new Tls.Inputs.SelfSignedCertSubjectArgs
    ///         {
    ///             CommonName = "example.com",
    ///             Organization = "ACME Examples, Inc",
    ///         },
    ///     });
    /// 
    ///     var defaultRegionSslCertificate = new Gcp.Compute.RegionSslCertificate("default", new()
    ///     {
    ///         NamePrefix = "my-certificate-",
    ///         PrivateKey = defaultPrivateKey.PrivateKeyPem,
    ///         Certificate = defaultSelfSignedCert.CertPem,
    ///         Region = "europe-west1",
    ///     });
    /// 
    ///     // Regional health check
    ///     var defaultRegionHealthCheck = new Gcp.Compute.RegionHealthCheck("default", new()
    ///     {
    ///         Name = "l7-ilb-hc",
    ///         Region = "europe-west1",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///         {
    ///             PortSpecification = "USE_SERVING_PORT",
    ///         },
    ///     });
    /// 
    ///     // Instance template
    ///     var defaultInstanceTemplate = new Gcp.Compute.InstanceTemplate("default", new()
    ///     {
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateNetworkInterfaceArgs
    ///             {
    ///                 AccessConfigs = new[]
    ///                 {
    ///                     null,
    ///                 },
    ///                 Network = @default.Id,
    ///                 Subnetwork = defaultSubnetwork.Id,
    ///             },
    ///         },
    ///         Name = "l7-ilb-mig-template",
    ///         MachineType = "e2-small",
    ///         Tags = new[]
    ///         {
    ///             "http-server",
    ///         },
    ///         Disks = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceTemplateDiskArgs
    ///             {
    ///                 SourceImage = "debian-cloud/debian-10",
    ///                 AutoDelete = true,
    ///                 Boot = true,
    ///             },
    ///         },
    ///         Metadata = 
    ///         {
    ///             { "startup-script", @"#! /bin/bash
    /// set -euo pipefail
    /// 
    /// export DEBIAN_FRONTEND=noninteractive
    /// apt-get update
    /// apt-get install -y nginx-light jq
    /// 
    /// NAME=$(curl -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/hostname"")
    /// IP=$(curl -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip"")
    /// METADATA=$(curl -f -H ""Metadata-Flavor: Google"" ""http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True"" | jq 'del(.[""startup-script""])')
    /// 
    /// cat &lt;&lt;EOF &gt; /var/www/html/index.html
    /// &lt;pre&gt;
    /// Name: $NAME
    /// IP: $IP
    /// Metadata: $METADATA
    /// &lt;/pre&gt;
    /// EOF
    /// " },
    ///         },
    ///     });
    /// 
    ///     // Regional MIG
    ///     var defaultRegionInstanceGroupManager = new Gcp.Compute.RegionInstanceGroupManager("default", new()
    ///     {
    ///         Name = "l7-ilb-mig1",
    ///         Region = "europe-west1",
    ///         Versions = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionInstanceGroupManagerVersionArgs
    ///             {
    ///                 InstanceTemplate = defaultInstanceTemplate.Id,
    ///                 Name = "primary",
    ///             },
    ///         },
    ///         NamedPorts = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionInstanceGroupManagerNamedPortArgs
    ///             {
    ///                 Name = "http-server",
    ///                 Port = 80,
    ///             },
    ///         },
    ///         BaseInstanceName = "vm",
    ///         TargetSize = 2,
    ///     });
    /// 
    ///     // Regional backend service
    ///     var defaultRegionBackendService = new Gcp.Compute.RegionBackendService("default", new()
    ///     {
    ///         Name = "l7-ilb-backend-service",
    ///         Region = "europe-west1",
    ///         Protocol = "HTTP",
    ///         PortName = "http-server",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         TimeoutSec = 10,
    ///         HealthChecks = defaultRegionHealthCheck.Id,
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionBackendServiceBackendArgs
    ///             {
    ///                 Group = defaultRegionInstanceGroupManager.InstanceGroup,
    ///                 BalancingMode = "UTILIZATION",
    ///                 CapacityScaler = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Regional URL map
    ///     var httpsLb = new Gcp.Compute.RegionUrlMap("https_lb", new()
    ///     {
    ///         Name = "l7-ilb-regional-url-map",
    ///         Region = "europe-west1",
    ///         DefaultService = defaultRegionBackendService.Id,
    ///     });
    /// 
    ///     // Regional target HTTPS proxy
    ///     var defaultRegionTargetHttpsProxy = new Gcp.Compute.RegionTargetHttpsProxy("default", new()
    ///     {
    ///         Name = "l7-ilb-target-https-proxy",
    ///         Region = "europe-west1",
    ///         UrlMap = httpsLb.Id,
    ///         SslCertificates = new[]
    ///         {
    ///             defaultRegionSslCertificate.SelfLink,
    ///         },
    ///     });
    /// 
    ///     // Regional forwarding rule
    ///     var defaultForwardingRule = new Gcp.Compute.ForwardingRule("default", new()
    ///     {
    ///         Name = "l7-ilb-forwarding-rule",
    ///         Region = "europe-west1",
    ///         IpProtocol = "TCP",
    ///         IpAddress = defaultAddress.Id,
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         PortRange = "443",
    ///         Target = defaultRegionTargetHttpsProxy.Id,
    ///         Network = @default.Id,
    ///         Subnetwork = defaultSubnetwork.Id,
    ///         NetworkTier = "PREMIUM",
    ///     });
    /// 
    ///     // Allow all access to health check ranges
    ///     var defaultFirewall = new Gcp.Compute.Firewall("default", new()
    ///     {
    ///         Name = "l7-ilb-fw-allow-hc",
    ///         Direction = "INGRESS",
    ///         Network = @default.Id,
    ///         SourceRanges = new[]
    ///         {
    ///             "130.211.0.0/22",
    ///             "35.191.0.0/16",
    ///             "35.235.240.0/20",
    ///         },
    ///         Allows = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.FirewallAllowArgs
    ///             {
    ///                 Protocol = "tcp",
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Allow http from proxy subnet to backends
    ///     var backends = new Gcp.Compute.Firewall("backends", new()
    ///     {
    ///         Name = "l7-ilb-fw-allow-ilb-to-backends",
    ///         Direction = "INGRESS",
    ///         Network = @default.Id,
    ///         SourceRanges = new[]
    ///         {
    ///             "10.0.0.0/24",
    ///         },
    ///         TargetTags = new[]
    ///         {
    ///             "http-server",
    ///         },
    ///         Allows = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.FirewallAllowArgs
    ///             {
    ///                 Protocol = "tcp",
    ///                 Ports = new[]
    ///                 {
    ///                     "80",
    ///                     "443",
    ///                     "8080",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Test instance
    ///     var defaultInstance = new Gcp.Compute.Instance("default", new()
    ///     {
    ///         Name = "l7-ilb-test-vm",
    ///         Zone = "europe-west1-b",
    ///         MachineType = "e2-small",
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
    ///             {
    ///                 Network = @default.Id,
    ///                 Subnetwork = defaultSubnetwork.Id,
    ///             },
    ///         },
    ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
    ///         {
    ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
    ///             {
    ///                 Image = "debian-cloud/debian-10",
    ///             },
    ///         },
    ///     });
    /// 
    ///     //## HTTP-to-HTTPS redirect ###
    ///     // Regional URL map
    ///     var redirectRegionUrlMap = new Gcp.Compute.RegionUrlMap("redirect", new()
    ///     {
    ///         Name = "l7-ilb-redirect-url-map",
    ///         Region = "europe-west1",
    ///         DefaultService = defaultRegionBackendService.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 PathMatcher = "allpaths",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///             {
    ///                 Name = "allpaths",
    ///                 DefaultService = defaultRegionBackendService.Id,
    ///                 PathRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleArgs
    ///                     {
    ///                         Paths = new[]
    ///                         {
    ///                             "/",
    ///                         },
    ///                         UrlRedirect = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleUrlRedirectArgs
    ///                         {
    ///                             HttpsRedirect = true,
    ///                             HostRedirect = "10.0.1.5:443",
    ///                             RedirectResponseCode = "PERMANENT_REDIRECT",
    ///                             StripQuery = true,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Regional HTTP proxy
    ///     var defaultRegionTargetHttpProxy = new Gcp.Compute.RegionTargetHttpProxy("default", new()
    ///     {
    ///         Name = "l7-ilb-target-http-proxy",
    ///         Region = "europe-west1",
    ///         UrlMap = redirectRegionUrlMap.Id,
    ///     });
    /// 
    ///     // Regional forwarding rule
    ///     var redirect = new Gcp.Compute.ForwardingRule("redirect", new()
    ///     {
    ///         Name = "l7-ilb-redirect",
    ///         Region = "europe-west1",
    ///         IpProtocol = "TCP",
    ///         IpAddress = defaultAddress.Id,
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         PortRange = "80",
    ///         Target = defaultRegionTargetHttpProxy.Id,
    ///         Network = @default.Id,
    ///         Subnetwork = defaultSubnetwork.Id,
    ///         NetworkTier = "PREMIUM",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Region Url Map Path Template Match
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.RegionHealthCheck("default", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "health-check",
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///             RequestPath = "/",
    ///         },
    ///     });
    /// 
    ///     var home_backend = new Gcp.Compute.RegionBackendService("home-backend", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "home-service",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     var cart_backend = new Gcp.Compute.RegionBackendService("cart-backend", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "cart-service",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     var user_backend = new Gcp.Compute.RegionBackendService("user-backend", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "user-service",
    ///         PortName = "http",
    ///         Protocol = "HTTP",
    ///         TimeoutSec = 10,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     var urlmap = new Gcp.Compute.RegionUrlMap("urlmap", new()
    ///     {
    ///         Region = "us-central1",
    ///         Name = "urlmap",
    ///         Description = "a description",
    ///         DefaultService = home_backend.Id,
    ///         HostRules = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
    ///             {
    ///                 Hosts = new[]
    ///                 {
    ///                     "mysite.com",
    ///                 },
    ///                 PathMatcher = "mysite",
    ///             },
    ///         },
    ///         PathMatchers = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
    ///             {
    ///                 Name = "mysite",
    ///                 DefaultService = home_backend.Id,
    ///                 RouteRules = new[]
    ///                 {
    ///                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleArgs
    ///                     {
    ///                         MatchRules = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleArgs
    ///                             {
    ///                                 PathTemplateMatch = "/xyzwebservices/v2/xyz/users/{username=*}/carts/{cartid=**}",
    ///                             },
    ///                         },
    ///                         Service = cart_backend.Id,
    ///                         Priority = 1,
    ///                         RouteAction = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleRouteActionArgs
    ///                         {
    ///                             UrlRewrite = new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs
    ///                             {
    ///                                 PathTemplateRewrite = "/{username}-{cartid}/",
    ///                             },
    ///                         },
    ///                     },
    ///                     new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleArgs
    ///                     {
    ///                         MatchRules = new[]
    ///                         {
    ///                             new Gcp.Compute.Inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleArgs
    ///                             {
    ///                                 PathTemplateMatch = "/xyzwebservices/v2/xyz/users/*/accountinfo/*",
    ///                             },
    ///                         },
    ///                         Service = user_backend.Id,
    ///                         Priority = 2,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RegionUrlMap can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/regions/{{region}}/urlMaps/{{name}}`
    /// 
    /// * `{{project}}/{{region}}/{{name}}`
    /// 
    /// * `{{region}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, RegionUrlMap can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/regionUrlMap:RegionUrlMap default projects/{{project}}/regions/{{region}}/urlMaps/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/regionUrlMap:RegionUrlMap default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/regionUrlMap:RegionUrlMap default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/regionUrlMap:RegionUrlMap default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/regionUrlMap:RegionUrlMap")]
    public partial class RegionUrlMap : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
        /// Only one of defaultRouteAction or defaultUrlRedirect must be set.
        /// URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within defaultRouteAction.
        /// defaultRouteAction has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
        /// Structure is documented below.
        /// </summary>
        [Output("defaultRouteAction")]
        public Output<Outputs.RegionUrlMapDefaultRouteAction?> DefaultRouteAction { get; private set; } = null!;

        /// <summary>
        /// The full or partial URL of the defaultService resource to which traffic is directed if
        /// none of the hostRules match. If defaultRouteAction is additionally specified, advanced
        /// routing actions like URL Rewrites, etc. take effect prior to sending the request to the
        /// backend. However, if defaultService is specified, defaultRouteAction cannot contain any
        /// weightedBackendServices. Conversely, if routeAction specifies any
        /// weightedBackendServices, service must not be specified.  Only one of defaultService,
        /// defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set.
        /// </summary>
        [Output("defaultService")]
        public Output<string?> DefaultService { get; private set; } = null!;

        /// <summary>
        /// When none of the specified hostRules match, the request is redirected to a URL specified
        /// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        /// defaultRouteAction must not be set.
        /// Structure is documented below.
        /// </summary>
        [Output("defaultUrlRedirect")]
        public Output<Outputs.RegionUrlMapDefaultUrlRedirect?> DefaultUrlRedirect { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource. Provide this property when
        /// you create the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource. This field is used internally during
        /// updates of this resource.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// The list of HostRules to use against the URL.
        /// Structure is documented below.
        /// </summary>
        [Output("hostRules")]
        public Output<ImmutableArray<Outputs.RegionUrlMapHostRule>> HostRules { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the resource.
        /// </summary>
        [Output("mapId")]
        public Output<int> MapId { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is
        /// created. The name must be 1-63 characters long, and comply with
        /// RFC1035. Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the last
        /// character, which cannot be a dash.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of named PathMatchers to use against the URL.
        /// Structure is documented below.
        /// </summary>
        [Output("pathMatchers")]
        public Output<ImmutableArray<Outputs.RegionUrlMapPathMatcher>> PathMatchers { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The Region in which the url map should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// The list of expected URL mappings. Requests to update this UrlMap will
        /// succeed only if all of the test cases pass.
        /// Structure is documented below.
        /// </summary>
        [Output("tests")]
        public Output<ImmutableArray<Outputs.RegionUrlMapTest>> Tests { get; private set; } = null!;


        /// <summary>
        /// Create a RegionUrlMap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegionUrlMap(string name, RegionUrlMapArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:compute/regionUrlMap:RegionUrlMap", name, args ?? new RegionUrlMapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegionUrlMap(string name, Input<string> id, RegionUrlMapState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/regionUrlMap:RegionUrlMap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegionUrlMap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegionUrlMap Get(string name, Input<string> id, RegionUrlMapState? state = null, CustomResourceOptions? options = null)
        {
            return new RegionUrlMap(name, id, state, options);
        }
    }

    public sealed class RegionUrlMapArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
        /// Only one of defaultRouteAction or defaultUrlRedirect must be set.
        /// URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within defaultRouteAction.
        /// defaultRouteAction has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultRouteAction")]
        public Input<Inputs.RegionUrlMapDefaultRouteActionArgs>? DefaultRouteAction { get; set; }

        /// <summary>
        /// The full or partial URL of the defaultService resource to which traffic is directed if
        /// none of the hostRules match. If defaultRouteAction is additionally specified, advanced
        /// routing actions like URL Rewrites, etc. take effect prior to sending the request to the
        /// backend. However, if defaultService is specified, defaultRouteAction cannot contain any
        /// weightedBackendServices. Conversely, if routeAction specifies any
        /// weightedBackendServices, service must not be specified.  Only one of defaultService,
        /// defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set.
        /// </summary>
        [Input("defaultService")]
        public Input<string>? DefaultService { get; set; }

        /// <summary>
        /// When none of the specified hostRules match, the request is redirected to a URL specified
        /// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        /// defaultRouteAction must not be set.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultUrlRedirect")]
        public Input<Inputs.RegionUrlMapDefaultUrlRedirectArgs>? DefaultUrlRedirect { get; set; }

        /// <summary>
        /// An optional description of this resource. Provide this property when
        /// you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("hostRules")]
        private InputList<Inputs.RegionUrlMapHostRuleArgs>? _hostRules;

        /// <summary>
        /// The list of HostRules to use against the URL.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionUrlMapHostRuleArgs> HostRules
        {
            get => _hostRules ?? (_hostRules = new InputList<Inputs.RegionUrlMapHostRuleArgs>());
            set => _hostRules = value;
        }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is
        /// created. The name must be 1-63 characters long, and comply with
        /// RFC1035. Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the last
        /// character, which cannot be a dash.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pathMatchers")]
        private InputList<Inputs.RegionUrlMapPathMatcherArgs>? _pathMatchers;

        /// <summary>
        /// The list of named PathMatchers to use against the URL.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionUrlMapPathMatcherArgs> PathMatchers
        {
            get => _pathMatchers ?? (_pathMatchers = new InputList<Inputs.RegionUrlMapPathMatcherArgs>());
            set => _pathMatchers = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Region in which the url map should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tests")]
        private InputList<Inputs.RegionUrlMapTestArgs>? _tests;

        /// <summary>
        /// The list of expected URL mappings. Requests to update this UrlMap will
        /// succeed only if all of the test cases pass.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionUrlMapTestArgs> Tests
        {
            get => _tests ?? (_tests = new InputList<Inputs.RegionUrlMapTestArgs>());
            set => _tests = value;
        }

        public RegionUrlMapArgs()
        {
        }
        public static new RegionUrlMapArgs Empty => new RegionUrlMapArgs();
    }

    public sealed class RegionUrlMapState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
        /// Only one of defaultRouteAction or defaultUrlRedirect must be set.
        /// URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within defaultRouteAction.
        /// defaultRouteAction has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultRouteAction")]
        public Input<Inputs.RegionUrlMapDefaultRouteActionGetArgs>? DefaultRouteAction { get; set; }

        /// <summary>
        /// The full or partial URL of the defaultService resource to which traffic is directed if
        /// none of the hostRules match. If defaultRouteAction is additionally specified, advanced
        /// routing actions like URL Rewrites, etc. take effect prior to sending the request to the
        /// backend. However, if defaultService is specified, defaultRouteAction cannot contain any
        /// weightedBackendServices. Conversely, if routeAction specifies any
        /// weightedBackendServices, service must not be specified.  Only one of defaultService,
        /// defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set.
        /// </summary>
        [Input("defaultService")]
        public Input<string>? DefaultService { get; set; }

        /// <summary>
        /// When none of the specified hostRules match, the request is redirected to a URL specified
        /// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
        /// defaultRouteAction must not be set.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultUrlRedirect")]
        public Input<Inputs.RegionUrlMapDefaultUrlRedirectGetArgs>? DefaultUrlRedirect { get; set; }

        /// <summary>
        /// An optional description of this resource. Provide this property when
        /// you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Fingerprint of this resource. This field is used internally during
        /// updates of this resource.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        [Input("hostRules")]
        private InputList<Inputs.RegionUrlMapHostRuleGetArgs>? _hostRules;

        /// <summary>
        /// The list of HostRules to use against the URL.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionUrlMapHostRuleGetArgs> HostRules
        {
            get => _hostRules ?? (_hostRules = new InputList<Inputs.RegionUrlMapHostRuleGetArgs>());
            set => _hostRules = value;
        }

        /// <summary>
        /// The unique identifier for the resource.
        /// </summary>
        [Input("mapId")]
        public Input<int>? MapId { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is
        /// created. The name must be 1-63 characters long, and comply with
        /// RFC1035. Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?` which means the
        /// first character must be a lowercase letter, and all following
        /// characters must be a dash, lowercase letter, or digit, except the last
        /// character, which cannot be a dash.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pathMatchers")]
        private InputList<Inputs.RegionUrlMapPathMatcherGetArgs>? _pathMatchers;

        /// <summary>
        /// The list of named PathMatchers to use against the URL.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionUrlMapPathMatcherGetArgs> PathMatchers
        {
            get => _pathMatchers ?? (_pathMatchers = new InputList<Inputs.RegionUrlMapPathMatcherGetArgs>());
            set => _pathMatchers = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Region in which the url map should reside.
        /// If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("tests")]
        private InputList<Inputs.RegionUrlMapTestGetArgs>? _tests;

        /// <summary>
        /// The list of expected URL mappings. Requests to update this UrlMap will
        /// succeed only if all of the test cases pass.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RegionUrlMapTestGetArgs> Tests
        {
            get => _tests ?? (_tests = new InputList<Inputs.RegionUrlMapTestGetArgs>());
            set => _tests = value;
        }

        public RegionUrlMapState()
        {
        }
        public static new RegionUrlMapState Empty => new RegionUrlMapState();
    }
}
