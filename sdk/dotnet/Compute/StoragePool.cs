// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// A Hyperdisk Storage Pool is a pre-purchased collection of capacity, throughput, and IOPS
    /// which you can then provision to your applications as needed.
    /// You can use Hyperdisk Storage Pools to create and manage disks in pools and use the disks across multiple workloads.
    /// 
    /// To get more information about StoragePool, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/storagePools)
    /// * How-to Guides
    ///     * [Create Hyperdisk Storage Pools](https://cloud.google.com/compute/docs/disks/create-storage-pools)
    /// 
    /// ## Example Usage
    /// 
    /// ### Compute Storage Pool Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test_storage_pool_basic = new Gcp.Compute.StoragePool("test-storage-pool-basic", new()
    ///     {
    ///         Name = "storage-pool-basic",
    ///         PoolProvisionedCapacityGb = "10240",
    ///         PoolProvisionedThroughput = "100",
    ///         StoragePoolType = "hyperdisk-throughput",
    ///         Zone = "us-central1-a",
    ///         DeletionProtection = false,
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    /// });
    /// ```
    /// ### Compute Storage Pool Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var balanced = Gcp.Compute.GetStoragePoolTypes.Invoke(new()
    ///     {
    ///         Zone = "us-central1-a",
    ///         StoragePoolType = "hyperdisk-balanced",
    ///     });
    /// 
    ///     var test_storage_pool_full = new Gcp.Compute.StoragePool("test-storage-pool-full", new()
    ///     {
    ///         Name = "storage-pool-full",
    ///         Description = "Hyperdisk Balanced storage pool",
    ///         CapacityProvisioningType = "STANDARD",
    ///         PoolProvisionedCapacityGb = "10240",
    ///         PerformanceProvisioningType = "STANDARD",
    ///         PoolProvisionedIops = "10000",
    ///         PoolProvisionedThroughput = "1024",
    ///         StoragePoolType = balanced.Apply(getStoragePoolTypesResult =&gt; getStoragePoolTypesResult.SelfLink),
    ///         DeletionProtection = false,
    ///         Zone = "us-central1-a",
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// StoragePool can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/zones/{{zone}}/storagePools/{{name}}`
    /// 
    /// * `{{project}}/{{zone}}/{{name}}`
    /// 
    /// * `{{zone}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, StoragePool can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/storagePool:StoragePool default projects/{{project}}/zones/{{zone}}/storagePools/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/storagePool:StoragePool default {{project}}/{{zone}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/storagePool:StoragePool default {{zone}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/storagePool:StoragePool default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/storagePool:StoragePool")]
    public partial class StoragePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Provisioning type of the byte capacity of the pool.
        /// Possible values are: `STANDARD`, `ADVANCED`.
        /// </summary>
        [Output("capacityProvisioningType")]
        public Output<string> CapacityProvisioningType { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        [Output("deletionProtection")]
        public Output<bool?> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// A description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The fingerprint used for optimistic locking of this resource.
        /// Used internally during updates.
        /// </summary>
        [Output("labelFingerprint")]
        public Output<string> LabelFingerprint { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created.
        /// The name must be 1-63 characters long, and comply with RFC1035.
        /// Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?`
        /// which means the first character must be a lowercase letter,
        /// and all following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning type of the performance-related parameters of the pool, such as throughput and IOPS.
        /// Possible values are: `STANDARD`, `ADVANCED`.
        /// </summary>
        [Output("performanceProvisioningType")]
        public Output<string> PerformanceProvisioningType { get; private set; } = null!;

        /// <summary>
        /// Size, in GiB, of the storage pool. For more information about the size limits,
        /// see https://cloud.google.com/compute/docs/disks/storage-pools.
        /// </summary>
        [Output("poolProvisionedCapacityGb")]
        public Output<string> PoolProvisionedCapacityGb { get; private set; } = null!;

        /// <summary>
        /// Provisioned IOPS of the storage pool.
        /// Only relevant if the storage pool type is `hyperdisk-balanced`.
        /// </summary>
        [Output("poolProvisionedIops")]
        public Output<string?> PoolProvisionedIops { get; private set; } = null!;

        /// <summary>
        /// Provisioned throughput, in MB/s, of the storage pool.
        /// Only relevant if the storage pool type is `hyperdisk-balanced` or `hyperdisk-throughput`.
        /// </summary>
        [Output("poolProvisionedThroughput")]
        public Output<string> PoolProvisionedThroughput { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Status information for the storage pool resource.
        /// Structure is documented below.
        /// </summary>
        [Output("resourceStatuses")]
        public Output<ImmutableArray<Outputs.StoragePoolResourceStatus>> ResourceStatuses { get; private set; } = null!;

        /// <summary>
        /// Status information for the storage pool resource.
        /// Structure is documented below.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.StoragePoolStatus>> Statuses { get; private set; } = null!;

        /// <summary>
        /// Type of the storage pool. For example, the
        /// following are valid values:
        /// * `https://www.googleapis.com/compute/v1/projects/{project_id}/zones/{zone}/storagePoolTypes/hyperdisk-balanced`
        /// * `hyperdisk-throughput`
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("storagePoolType")]
        public Output<string> StoragePoolType { get; private set; } = null!;

        /// <summary>
        /// A reference to the zone where the storage pool resides.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a StoragePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StoragePool(string name, StoragePoolArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/storagePool:StoragePool", name, args ?? new StoragePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StoragePool(string name, Input<string> id, StoragePoolState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/storagePool:StoragePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StoragePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StoragePool Get(string name, Input<string> id, StoragePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new StoragePool(name, id, state, options);
        }
    }

    public sealed class StoragePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Provisioning type of the byte capacity of the pool.
        /// Possible values are: `STANDARD`, `ADVANCED`.
        /// </summary>
        [Input("capacityProvisioningType")]
        public Input<string>? CapacityProvisioningType { get; set; }

        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// A description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created.
        /// The name must be 1-63 characters long, and comply with RFC1035.
        /// Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?`
        /// which means the first character must be a lowercase letter,
        /// and all following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Provisioning type of the performance-related parameters of the pool, such as throughput and IOPS.
        /// Possible values are: `STANDARD`, `ADVANCED`.
        /// </summary>
        [Input("performanceProvisioningType")]
        public Input<string>? PerformanceProvisioningType { get; set; }

        /// <summary>
        /// Size, in GiB, of the storage pool. For more information about the size limits,
        /// see https://cloud.google.com/compute/docs/disks/storage-pools.
        /// </summary>
        [Input("poolProvisionedCapacityGb", required: true)]
        public Input<string> PoolProvisionedCapacityGb { get; set; } = null!;

        /// <summary>
        /// Provisioned IOPS of the storage pool.
        /// Only relevant if the storage pool type is `hyperdisk-balanced`.
        /// </summary>
        [Input("poolProvisionedIops")]
        public Input<string>? PoolProvisionedIops { get; set; }

        /// <summary>
        /// Provisioned throughput, in MB/s, of the storage pool.
        /// Only relevant if the storage pool type is `hyperdisk-balanced` or `hyperdisk-throughput`.
        /// </summary>
        [Input("poolProvisionedThroughput", required: true)]
        public Input<string> PoolProvisionedThroughput { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Type of the storage pool. For example, the
        /// following are valid values:
        /// * `https://www.googleapis.com/compute/v1/projects/{project_id}/zones/{zone}/storagePoolTypes/hyperdisk-balanced`
        /// * `hyperdisk-throughput`
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("storagePoolType", required: true)]
        public Input<string> StoragePoolType { get; set; } = null!;

        /// <summary>
        /// A reference to the zone where the storage pool resides.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public StoragePoolArgs()
        {
        }
        public static new StoragePoolArgs Empty => new StoragePoolArgs();
    }

    public sealed class StoragePoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Provisioning type of the byte capacity of the pool.
        /// Possible values are: `STANDARD`, `ADVANCED`.
        /// </summary>
        [Input("capacityProvisioningType")]
        public Input<string>? CapacityProvisioningType { get; set; }

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// A description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The fingerprint used for optimistic locking of this resource.
        /// Used internally during updates.
        /// </summary>
        [Input("labelFingerprint")]
        public Input<string>? LabelFingerprint { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created.
        /// The name must be 1-63 characters long, and comply with RFC1035.
        /// Specifically, the name must be 1-63 characters long and match
        /// the regular expression `a-z?`
        /// which means the first character must be a lowercase letter,
        /// and all following characters must be a dash, lowercase letter, or digit,
        /// except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Provisioning type of the performance-related parameters of the pool, such as throughput and IOPS.
        /// Possible values are: `STANDARD`, `ADVANCED`.
        /// </summary>
        [Input("performanceProvisioningType")]
        public Input<string>? PerformanceProvisioningType { get; set; }

        /// <summary>
        /// Size, in GiB, of the storage pool. For more information about the size limits,
        /// see https://cloud.google.com/compute/docs/disks/storage-pools.
        /// </summary>
        [Input("poolProvisionedCapacityGb")]
        public Input<string>? PoolProvisionedCapacityGb { get; set; }

        /// <summary>
        /// Provisioned IOPS of the storage pool.
        /// Only relevant if the storage pool type is `hyperdisk-balanced`.
        /// </summary>
        [Input("poolProvisionedIops")]
        public Input<string>? PoolProvisionedIops { get; set; }

        /// <summary>
        /// Provisioned throughput, in MB/s, of the storage pool.
        /// Only relevant if the storage pool type is `hyperdisk-balanced` or `hyperdisk-throughput`.
        /// </summary>
        [Input("poolProvisionedThroughput")]
        public Input<string>? PoolProvisionedThroughput { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("resourceStatuses")]
        private InputList<Inputs.StoragePoolResourceStatusGetArgs>? _resourceStatuses;

        /// <summary>
        /// Status information for the storage pool resource.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.StoragePoolResourceStatusGetArgs> ResourceStatuses
        {
            get => _resourceStatuses ?? (_resourceStatuses = new InputList<Inputs.StoragePoolResourceStatusGetArgs>());
            set => _resourceStatuses = value;
        }

        [Input("statuses")]
        private InputList<Inputs.StoragePoolStatusGetArgs>? _statuses;

        /// <summary>
        /// Status information for the storage pool resource.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.StoragePoolStatusGetArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.StoragePoolStatusGetArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// Type of the storage pool. For example, the
        /// following are valid values:
        /// * `https://www.googleapis.com/compute/v1/projects/{project_id}/zones/{zone}/storagePoolTypes/hyperdisk-balanced`
        /// * `hyperdisk-throughput`
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("storagePoolType")]
        public Input<string>? StoragePoolType { get; set; }

        /// <summary>
        /// A reference to the zone where the storage pool resides.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public StoragePoolState()
        {
        }
        public static new StoragePoolState Empty => new StoragePoolState();
    }
}
