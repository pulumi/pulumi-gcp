// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_region_disk.html.markdown.
    /// </summary>
    public partial class RegionDisk : Pulumi.CustomResource
    {
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("diskEncryptionKey")]
        public Output<Outputs.RegionDiskDiskEncryptionKey?> DiskEncryptionKey { get; private set; } = null!;

        [Output("labelFingerprint")]
        public Output<string> LabelFingerprint { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        [Output("lastAttachTimestamp")]
        public Output<string> LastAttachTimestamp { get; private set; } = null!;

        [Output("lastDetachTimestamp")]
        public Output<string> LastDetachTimestamp { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("physicalBlockSizeBytes")]
        public Output<int> PhysicalBlockSizeBytes { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("replicaZones")]
        public Output<ImmutableArray<string>> ReplicaZones { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        [Output("snapshot")]
        public Output<string?> Snapshot { get; private set; } = null!;

        [Output("sourceSnapshotEncryptionKey")]
        public Output<Outputs.RegionDiskSourceSnapshotEncryptionKey?> SourceSnapshotEncryptionKey { get; private set; } = null!;

        [Output("sourceSnapshotId")]
        public Output<string> SourceSnapshotId { get; private set; } = null!;

        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        [Output("users")]
        public Output<ImmutableArray<string>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a RegionDisk resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegionDisk(string name, RegionDiskArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/regionDisk:RegionDisk", name, args, MakeResourceOptions(options, ""))
        {
        }

        private RegionDisk(string name, Input<string> id, RegionDiskState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/regionDisk:RegionDisk", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegionDisk resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegionDisk Get(string name, Input<string> id, RegionDiskState? state = null, CustomResourceOptions? options = null)
        {
            return new RegionDisk(name, id, state, options);
        }
    }

    public sealed class RegionDiskArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskEncryptionKey")]
        public Input<Inputs.RegionDiskDiskEncryptionKeyArgs>? DiskEncryptionKey { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("physicalBlockSizeBytes")]
        public Input<int>? PhysicalBlockSizeBytes { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("replicaZones", required: true)]
        private InputList<string>? _replicaZones;
        public InputList<string> ReplicaZones
        {
            get => _replicaZones ?? (_replicaZones = new InputList<string>());
            set => _replicaZones = value;
        }

        [Input("size")]
        public Input<int>? Size { get; set; }

        [Input("snapshot")]
        public Input<string>? Snapshot { get; set; }

        [Input("sourceSnapshotEncryptionKey")]
        public Input<Inputs.RegionDiskSourceSnapshotEncryptionKeyArgs>? SourceSnapshotEncryptionKey { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public RegionDiskArgs()
        {
        }
    }

    public sealed class RegionDiskState : Pulumi.ResourceArgs
    {
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskEncryptionKey")]
        public Input<Inputs.RegionDiskDiskEncryptionKeyGetArgs>? DiskEncryptionKey { get; set; }

        [Input("labelFingerprint")]
        public Input<string>? LabelFingerprint { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("lastAttachTimestamp")]
        public Input<string>? LastAttachTimestamp { get; set; }

        [Input("lastDetachTimestamp")]
        public Input<string>? LastDetachTimestamp { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("physicalBlockSizeBytes")]
        public Input<int>? PhysicalBlockSizeBytes { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("replicaZones")]
        private InputList<string>? _replicaZones;
        public InputList<string> ReplicaZones
        {
            get => _replicaZones ?? (_replicaZones = new InputList<string>());
            set => _replicaZones = value;
        }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("size")]
        public Input<int>? Size { get; set; }

        [Input("snapshot")]
        public Input<string>? Snapshot { get; set; }

        [Input("sourceSnapshotEncryptionKey")]
        public Input<Inputs.RegionDiskSourceSnapshotEncryptionKeyGetArgs>? SourceSnapshotEncryptionKey { get; set; }

        [Input("sourceSnapshotId")]
        public Input<string>? SourceSnapshotId { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("users")]
        private InputList<string>? _users;
        public InputList<string> Users
        {
            get => _users ?? (_users = new InputList<string>());
            set => _users = value;
        }

        public RegionDiskState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class RegionDiskDiskEncryptionKeyArgs : Pulumi.ResourceArgs
    {
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("rawKey")]
        public Input<string>? RawKey { get; set; }

        [Input("sha256")]
        public Input<string>? Sha256 { get; set; }

        public RegionDiskDiskEncryptionKeyArgs()
        {
        }
    }

    public sealed class RegionDiskDiskEncryptionKeyGetArgs : Pulumi.ResourceArgs
    {
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("rawKey")]
        public Input<string>? RawKey { get; set; }

        [Input("sha256")]
        public Input<string>? Sha256 { get; set; }

        public RegionDiskDiskEncryptionKeyGetArgs()
        {
        }
    }

    public sealed class RegionDiskSourceSnapshotEncryptionKeyArgs : Pulumi.ResourceArgs
    {
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("rawKey")]
        public Input<string>? RawKey { get; set; }

        [Input("sha256")]
        public Input<string>? Sha256 { get; set; }

        public RegionDiskSourceSnapshotEncryptionKeyArgs()
        {
        }
    }

    public sealed class RegionDiskSourceSnapshotEncryptionKeyGetArgs : Pulumi.ResourceArgs
    {
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("rawKey")]
        public Input<string>? RawKey { get; set; }

        [Input("sha256")]
        public Input<string>? Sha256 { get; set; }

        public RegionDiskSourceSnapshotEncryptionKeyGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class RegionDiskDiskEncryptionKey
    {
        public readonly string? KmsKeyName;
        public readonly string? RawKey;
        public readonly string Sha256;

        [OutputConstructor]
        private RegionDiskDiskEncryptionKey(
            string? kmsKeyName,
            string? rawKey,
            string sha256)
        {
            KmsKeyName = kmsKeyName;
            RawKey = rawKey;
            Sha256 = sha256;
        }
    }

    [OutputType]
    public sealed class RegionDiskSourceSnapshotEncryptionKey
    {
        public readonly string? KmsKeyName;
        public readonly string? RawKey;
        public readonly string Sha256;

        [OutputConstructor]
        private RegionDiskSourceSnapshotEncryptionKey(
            string? kmsKeyName,
            string? rawKey,
            string sha256)
        {
            KmsKeyName = kmsKeyName;
            RawKey = rawKey;
            Sha256 = sha256;
        }
    }
    }
}
