// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Starts and stops asynchronous persistent disk replication. For more information
    /// see [the official documentation](https://cloud.google.com/compute/docs/disks/async-pd/about)
    /// and the [API](https://cloud.google.com/compute/docs/reference/rest/beta/disks).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primary_disk = new Gcp.Compute.Disk("primary-disk", new()
    ///     {
    ///         Type = "pd-ssd",
    ///         Zone = "europe-west4-a",
    ///         PhysicalBlockSizeBytes = 4096,
    ///     });
    /// 
    ///     var secondary_disk = new Gcp.Compute.Disk("secondary-disk", new()
    ///     {
    ///         Type = "pd-ssd",
    ///         Zone = "europe-west3-a",
    ///         AsyncPrimaryDisk = new Gcp.Compute.Inputs.DiskAsyncPrimaryDiskArgs
    ///         {
    ///             Disk = primary_disk.Id,
    ///         },
    ///         PhysicalBlockSizeBytes = 4096,
    ///     });
    /// 
    ///     var replication = new Gcp.Compute.DiskAsyncReplication("replication", new()
    ///     {
    ///         PrimaryDisk = primary_disk.Id,
    ///         SecondaryDisk = new Gcp.Compute.Inputs.DiskAsyncReplicationSecondaryDiskArgs
    ///         {
    ///             Disk = secondary_disk.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/diskAsyncReplication:DiskAsyncReplication")]
    public partial class DiskAsyncReplication : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The primary disk (source of replication).
        /// </summary>
        [Output("primaryDisk")]
        public Output<string> PrimaryDisk { get; private set; } = null!;

        /// <summary>
        /// The secondary disk (target of replication). You can specify only one value. Structure is documented below.
        /// 
        /// The `secondary_disk` block includes:
        /// </summary>
        [Output("secondaryDisk")]
        public Output<Outputs.DiskAsyncReplicationSecondaryDisk> SecondaryDisk { get; private set; } = null!;


        /// <summary>
        /// Create a DiskAsyncReplication resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DiskAsyncReplication(string name, DiskAsyncReplicationArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/diskAsyncReplication:DiskAsyncReplication", name, args ?? new DiskAsyncReplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DiskAsyncReplication(string name, Input<string> id, DiskAsyncReplicationState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/diskAsyncReplication:DiskAsyncReplication", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DiskAsyncReplication resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DiskAsyncReplication Get(string name, Input<string> id, DiskAsyncReplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new DiskAsyncReplication(name, id, state, options);
        }
    }

    public sealed class DiskAsyncReplicationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The primary disk (source of replication).
        /// </summary>
        [Input("primaryDisk", required: true)]
        public Input<string> PrimaryDisk { get; set; } = null!;

        /// <summary>
        /// The secondary disk (target of replication). You can specify only one value. Structure is documented below.
        /// 
        /// The `secondary_disk` block includes:
        /// </summary>
        [Input("secondaryDisk", required: true)]
        public Input<Inputs.DiskAsyncReplicationSecondaryDiskArgs> SecondaryDisk { get; set; } = null!;

        public DiskAsyncReplicationArgs()
        {
        }
        public static new DiskAsyncReplicationArgs Empty => new DiskAsyncReplicationArgs();
    }

    public sealed class DiskAsyncReplicationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The primary disk (source of replication).
        /// </summary>
        [Input("primaryDisk")]
        public Input<string>? PrimaryDisk { get; set; }

        /// <summary>
        /// The secondary disk (target of replication). You can specify only one value. Structure is documented below.
        /// 
        /// The `secondary_disk` block includes:
        /// </summary>
        [Input("secondaryDisk")]
        public Input<Inputs.DiskAsyncReplicationSecondaryDiskGetArgs>? SecondaryDisk { get; set; }

        public DiskAsyncReplicationState()
        {
        }
        public static new DiskAsyncReplicationState Empty => new DiskAsyncReplicationState();
    }
}
