// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    /// <summary>
    /// Represents a packet mirroring rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (mirror or do_not_mirror).
    /// 
    /// To get more information about NetworkFirewallPolicyPacketMirroringRule, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/networkFirewallPolicies/addPacketMirroringRule)
    /// 
    /// ## Example Usage
    /// 
    /// ### Compute Network Firewall Policy Packet Mirroring Rule
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "fw-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var basicNetworkFirewallPolicy = new Gcp.Compute.NetworkFirewallPolicy("basic_network_firewall_policy", new()
    ///     {
    ///         Name = "fw-policy",
    ///         Description = "Sample global network firewall policy",
    ///         Project = "my-project-name",
    ///     });
    /// 
    ///     var defaultMirroringDeploymentGroup = new Gcp.NetworkSecurity.MirroringDeploymentGroup("default", new()
    ///     {
    ///         MirroringDeploymentGroupId = "deployment-group",
    ///         Location = "global",
    ///         Network = @default.Id,
    ///     });
    /// 
    ///     var defaultMirroringEndpointGroup = new Gcp.NetworkSecurity.MirroringEndpointGroup("default", new()
    ///     {
    ///         MirroringEndpointGroupId = "endpoint-group",
    ///         Location = "global",
    ///         MirroringDeploymentGroup = defaultMirroringDeploymentGroup.Id,
    ///     });
    /// 
    ///     var defaultSecurityProfile = new Gcp.NetworkSecurity.SecurityProfile("default", new()
    ///     {
    ///         Name = "sec-profile",
    ///         Parent = "organizations/123456789",
    ///         Description = "my description",
    ///         Type = "CUSTOM_MIRRORING",
    ///         CustomMirroringProfile = new Gcp.NetworkSecurity.Inputs.SecurityProfileCustomMirroringProfileArgs
    ///         {
    ///             MirroringEndpointGroup = defaultMirroringEndpointGroup.Id,
    ///         },
    ///     });
    /// 
    ///     var securityProfileGroup1 = new Gcp.NetworkSecurity.SecurityProfileGroup("security_profile_group_1", new()
    ///     {
    ///         Name = "sec-profile-group",
    ///         Parent = "organizations/123456789",
    ///         Description = "my description",
    ///         CustomMirroringProfile = defaultSecurityProfile.Id,
    ///     });
    /// 
    ///     var secureTagKey1 = new Gcp.Tags.TagKey("secure_tag_key_1", new()
    ///     {
    ///         Description = "Test tag key description",
    ///         Parent = "organizations/123456789",
    ///         Purpose = "GCE_FIREWALL",
    ///         ShortName = "tag-key",
    ///         PurposeData = 
    ///         {
    ///             { "network", @default.Name.Apply(name =&gt; $"my-project-name/{name}") },
    ///         },
    ///     });
    /// 
    ///     var secureTagValue1 = new Gcp.Tags.TagValue("secure_tag_value_1", new()
    ///     {
    ///         Description = "Test tag value description.",
    ///         Parent = secureTagKey1.Id,
    ///         ShortName = "tag-value",
    ///     });
    /// 
    ///     var primary = new Gcp.Compute.NetworkFirewallPolicyPacketMirroringRule("primary", new()
    ///     {
    ///         Action = "mirror",
    ///         Description = "This is a simple packet mirroring rule description",
    ///         Direction = "INGRESS",
    ///         Disabled = false,
    ///         FirewallPolicy = basicNetworkFirewallPolicy.Name,
    ///         Priority = 1000,
    ///         RuleName = "test-rule",
    ///         Match = new Gcp.Compute.Inputs.NetworkFirewallPolicyPacketMirroringRuleMatchArgs
    ///         {
    ///             SrcIpRanges = new[]
    ///             {
    ///                 "10.100.0.1/32",
    ///             },
    ///             Layer4Configs = new[]
    ///             {
    ///                 new Gcp.Compute.Inputs.NetworkFirewallPolicyPacketMirroringRuleMatchLayer4ConfigArgs
    ///                 {
    ///                     IpProtocol = "all",
    ///                 },
    ///             },
    ///         },
    ///         SecurityProfileGroup = securityProfileGroup1.Id.Apply(id =&gt; $"//networksecurity.googleapis.com/{id}"),
    ///         TargetSecureTags = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArgs
    ///             {
    ///                 Name = secureTagValue1.Name.Apply(name =&gt; $"tagValues/{name}"),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NetworkFirewallPolicyPacketMirroringRule can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/global/firewallPolicies/{{firewall_policy}}/packetMirroringRules/{{priority}}`
    /// 
    /// * `{{project}}/{{firewall_policy}}/{{priority}}`
    /// 
    /// * `{{firewall_policy}}/{{priority}}`
    /// 
    /// When using the `pulumi import` command, NetworkFirewallPolicyPacketMirroringRule can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule default projects/{{project}}/global/firewallPolicies/{{firewall_policy}}/packetMirroringRules/{{priority}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule default {{project}}/{{firewall_policy}}/{{priority}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule default {{firewall_policy}}/{{priority}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule")]
    public partial class NetworkFirewallPolicyPacketMirroringRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Action to perform when the client connection triggers the rule. Valid actions are "mirror", "do_not_mirror", "goto_next".
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// An optional description for this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The direction in which this rule applies.
        /// Possible values are: `INGRESS`, `EGRESS`.
        /// </summary>
        [Output("direction")]
        public Output<string> Direction { get; private set; } = null!;

        /// <summary>
        /// Denotes whether the firewall policy rule is disabled.
        /// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
        /// If this is unspecified, the firewall policy rule will be enabled.
        /// </summary>
        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        /// <summary>
        /// The firewall policy of the resource.
        /// </summary>
        [Output("firewallPolicy")]
        public Output<string> FirewallPolicy { get; private set; } = null!;

        /// <summary>
        /// Type of the resource. Always `compute#packetMirroringRule` for firewall policy packet mirroring rules
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
        /// Structure is documented below.
        /// </summary>
        [Output("match")]
        public Output<Outputs.NetworkFirewallPolicyPacketMirroringRuleMatch> Match { get; private set; } = null!;

        /// <summary>
        /// An integer indicating the priority of a rule in the list.
        /// The priority must be a positive value between 0 and 2147483647.
        /// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// An optional name for the rule. This field is not a unique identifier and can be updated.
        /// </summary>
        [Output("ruleName")]
        public Output<string?> RuleName { get; private set; } = null!;

        /// <summary>
        /// Calculation of the complexity of a single firewall policy rule.
        /// </summary>
        [Output("ruleTupleCount")]
        public Output<int> RuleTupleCount { get; private set; } = null!;

        /// <summary>
        /// A fully-qualified URL of a SecurityProfile resource instance.
        /// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
        /// Must be specified if action = 'mirror' and cannot be specified for other actions.
        /// </summary>
        [Output("securityProfileGroup")]
        public Output<string?> SecurityProfileGroup { get; private set; } = null!;

        /// <summary>
        /// A list of secure tags that controls which instances the firewall rule applies to.
        /// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
        /// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
        /// Structure is documented below.
        /// </summary>
        [Output("targetSecureTags")]
        public Output<ImmutableArray<Outputs.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTag>> TargetSecureTags { get; private set; } = null!;

        /// <summary>
        /// Boolean flag indicating if the traffic should be TLS decrypted.
        /// Can be set only if action = 'mirror' and cannot be set for other actions.
        /// </summary>
        [Output("tlsInspect")]
        public Output<bool?> TlsInspect { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkFirewallPolicyPacketMirroringRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkFirewallPolicyPacketMirroringRule(string name, NetworkFirewallPolicyPacketMirroringRuleArgs args, CustomResourceOptions? options = null)
            : base("gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule", name, args ?? new NetworkFirewallPolicyPacketMirroringRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkFirewallPolicyPacketMirroringRule(string name, Input<string> id, NetworkFirewallPolicyPacketMirroringRuleState? state = null, CustomResourceOptions? options = null)
            : base("gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkFirewallPolicyPacketMirroringRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkFirewallPolicyPacketMirroringRule Get(string name, Input<string> id, NetworkFirewallPolicyPacketMirroringRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkFirewallPolicyPacketMirroringRule(name, id, state, options);
        }
    }

    public sealed class NetworkFirewallPolicyPacketMirroringRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Action to perform when the client connection triggers the rule. Valid actions are "mirror", "do_not_mirror", "goto_next".
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// An optional description for this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The direction in which this rule applies.
        /// Possible values are: `INGRESS`, `EGRESS`.
        /// </summary>
        [Input("direction", required: true)]
        public Input<string> Direction { get; set; } = null!;

        /// <summary>
        /// Denotes whether the firewall policy rule is disabled.
        /// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
        /// If this is unspecified, the firewall policy rule will be enabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// The firewall policy of the resource.
        /// </summary>
        [Input("firewallPolicy", required: true)]
        public Input<string> FirewallPolicy { get; set; } = null!;

        /// <summary>
        /// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
        /// Structure is documented below.
        /// </summary>
        [Input("match", required: true)]
        public Input<Inputs.NetworkFirewallPolicyPacketMirroringRuleMatchArgs> Match { get; set; } = null!;

        /// <summary>
        /// An integer indicating the priority of a rule in the list.
        /// The priority must be a positive value between 0 and 2147483647.
        /// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// An optional name for the rule. This field is not a unique identifier and can be updated.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// A fully-qualified URL of a SecurityProfile resource instance.
        /// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
        /// Must be specified if action = 'mirror' and cannot be specified for other actions.
        /// </summary>
        [Input("securityProfileGroup")]
        public Input<string>? SecurityProfileGroup { get; set; }

        [Input("targetSecureTags")]
        private InputList<Inputs.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArgs>? _targetSecureTags;

        /// <summary>
        /// A list of secure tags that controls which instances the firewall rule applies to.
        /// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
        /// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArgs> TargetSecureTags
        {
            get => _targetSecureTags ?? (_targetSecureTags = new InputList<Inputs.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArgs>());
            set => _targetSecureTags = value;
        }

        /// <summary>
        /// Boolean flag indicating if the traffic should be TLS decrypted.
        /// Can be set only if action = 'mirror' and cannot be set for other actions.
        /// </summary>
        [Input("tlsInspect")]
        public Input<bool>? TlsInspect { get; set; }

        public NetworkFirewallPolicyPacketMirroringRuleArgs()
        {
        }
        public static new NetworkFirewallPolicyPacketMirroringRuleArgs Empty => new NetworkFirewallPolicyPacketMirroringRuleArgs();
    }

    public sealed class NetworkFirewallPolicyPacketMirroringRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Action to perform when the client connection triggers the rule. Valid actions are "mirror", "do_not_mirror", "goto_next".
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTimestamp")]
        public Input<string>? CreationTimestamp { get; set; }

        /// <summary>
        /// An optional description for this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The direction in which this rule applies.
        /// Possible values are: `INGRESS`, `EGRESS`.
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// Denotes whether the firewall policy rule is disabled.
        /// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
        /// If this is unspecified, the firewall policy rule will be enabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// The firewall policy of the resource.
        /// </summary>
        [Input("firewallPolicy")]
        public Input<string>? FirewallPolicy { get; set; }

        /// <summary>
        /// Type of the resource. Always `compute#packetMirroringRule` for firewall policy packet mirroring rules
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
        /// Structure is documented below.
        /// </summary>
        [Input("match")]
        public Input<Inputs.NetworkFirewallPolicyPacketMirroringRuleMatchGetArgs>? Match { get; set; }

        /// <summary>
        /// An integer indicating the priority of a rule in the list.
        /// The priority must be a positive value between 0 and 2147483647.
        /// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// An optional name for the rule. This field is not a unique identifier and can be updated.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// Calculation of the complexity of a single firewall policy rule.
        /// </summary>
        [Input("ruleTupleCount")]
        public Input<int>? RuleTupleCount { get; set; }

        /// <summary>
        /// A fully-qualified URL of a SecurityProfile resource instance.
        /// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
        /// Must be specified if action = 'mirror' and cannot be specified for other actions.
        /// </summary>
        [Input("securityProfileGroup")]
        public Input<string>? SecurityProfileGroup { get; set; }

        [Input("targetSecureTags")]
        private InputList<Inputs.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagGetArgs>? _targetSecureTags;

        /// <summary>
        /// A list of secure tags that controls which instances the firewall rule applies to.
        /// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
        /// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagGetArgs> TargetSecureTags
        {
            get => _targetSecureTags ?? (_targetSecureTags = new InputList<Inputs.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagGetArgs>());
            set => _targetSecureTags = value;
        }

        /// <summary>
        /// Boolean flag indicating if the traffic should be TLS decrypted.
        /// Can be set only if action = 'mirror' and cannot be set for other actions.
        /// </summary>
        [Input("tlsInspect")]
        public Input<bool>? TlsInspect { get; set; }

        public NetworkFirewallPolicyPacketMirroringRuleState()
        {
        }
        public static new NetworkFirewallPolicyPacketMirroringRuleState Empty => new NetworkFirewallPolicyPacketMirroringRuleState();
    }
}
