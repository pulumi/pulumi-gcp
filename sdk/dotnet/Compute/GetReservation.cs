// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetReservation
    {
        /// <summary>
        /// Provides access to available Google Compute Reservation Resources for a given project.
        /// See more about [Reservations of Compute Engine resources](https://cloud.google.com/compute/docs/instances/reservations-overview) in the upstream docs.
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var reservation = Gcp.Compute.GetReservation.Invoke(new()
        ///     {
        ///         Name = "gce-reservation",
        ///         Zone = "us-central1-a",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetReservationResult> InvokeAsync(GetReservationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReservationResult>("gcp:compute/getReservation:getReservation", args ?? new GetReservationArgs(), options.WithDefaults());

        /// <summary>
        /// Provides access to available Google Compute Reservation Resources for a given project.
        /// See more about [Reservations of Compute Engine resources](https://cloud.google.com/compute/docs/instances/reservations-overview) in the upstream docs.
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var reservation = Gcp.Compute.GetReservation.Invoke(new()
        ///     {
        ///         Name = "gce-reservation",
        ///         Zone = "us-central1-a",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetReservationResult> Invoke(GetReservationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReservationResult>("gcp:compute/getReservation:getReservation", args ?? new GetReservationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReservationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Compute Reservation.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Project from which to list the Compute Reservation. Defaults to project declared in the provider.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// Zone where the Compute Reservation resides.
        /// </summary>
        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetReservationArgs()
        {
        }
        public static new GetReservationArgs Empty => new GetReservationArgs();
    }

    public sealed class GetReservationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Compute Reservation.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Project from which to list the Compute Reservation. Defaults to project declared in the provider.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Zone where the Compute Reservation resides.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetReservationInvokeArgs()
        {
        }
        public static new GetReservationInvokeArgs Empty => new GetReservationInvokeArgs();
    }


    [OutputType]
    public sealed class GetReservationResult
    {
        public readonly string Commitment;
        public readonly string CreationTimestamp;
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string? Project;
        public readonly string SelfLink;
        public readonly ImmutableArray<Outputs.GetReservationShareSettingResult> ShareSettings;
        public readonly bool SpecificReservationRequired;
        public readonly ImmutableArray<Outputs.GetReservationSpecificReservationResult> SpecificReservations;
        public readonly string Status;
        public readonly string Zone;

        [OutputConstructor]
        private GetReservationResult(
            string commitment,

            string creationTimestamp,

            string description,

            string id,

            string name,

            string? project,

            string selfLink,

            ImmutableArray<Outputs.GetReservationShareSettingResult> shareSettings,

            bool specificReservationRequired,

            ImmutableArray<Outputs.GetReservationSpecificReservationResult> specificReservations,

            string status,

            string zone)
        {
            Commitment = commitment;
            CreationTimestamp = creationTimestamp;
            Description = description;
            Id = id;
            Name = name;
            Project = project;
            SelfLink = selfLink;
            ShareSettings = shareSettings;
            SpecificReservationRequired = specificReservationRequired;
            SpecificReservations = specificReservations;
            Status = status;
            Zone = zone;
        }
    }
}
