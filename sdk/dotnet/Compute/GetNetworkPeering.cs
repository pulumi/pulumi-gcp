// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Compute
{
    public static class GetNetworkPeering
    {
        /// <summary>
        /// Get information of a specified compute network peering. For more information see
        /// [the official documentation](https://cloud.google.com/compute/docs/vpc/vpc-peering)
        /// and
        /// [API](https://cloud.google.com/compute/docs/reference/latest/networks).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = new Gcp.Compute.Network("default", new()
        ///     {
        ///         AutoCreateSubnetworks = false,
        ///     });
        /// 
        ///     var other = new Gcp.Compute.Network("other", new()
        ///     {
        ///         AutoCreateSubnetworks = false,
        ///     });
        /// 
        ///     var peering1 = new Gcp.Compute.NetworkPeering("peering1", new()
        ///     {
        ///         Network = @default.SelfLink,
        ///         PeerNetwork = other.SelfLink,
        ///     });
        /// 
        ///     var peering2 = new Gcp.Compute.NetworkPeering("peering2", new()
        ///     {
        ///         Network = other.SelfLink,
        ///         PeerNetwork = @default.SelfLink,
        ///     });
        /// 
        ///     var peering1Ds = Gcp.Compute.GetNetworkPeering.Invoke(new()
        ///     {
        ///         Name = peering1.Name,
        ///         Network = peering1.Network,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNetworkPeeringResult> InvokeAsync(GetNetworkPeeringArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkPeeringResult>("gcp:compute/getNetworkPeering:getNetworkPeering", args ?? new GetNetworkPeeringArgs(), options.WithDefaults());

        /// <summary>
        /// Get information of a specified compute network peering. For more information see
        /// [the official documentation](https://cloud.google.com/compute/docs/vpc/vpc-peering)
        /// and
        /// [API](https://cloud.google.com/compute/docs/reference/latest/networks).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = new Gcp.Compute.Network("default", new()
        ///     {
        ///         AutoCreateSubnetworks = false,
        ///     });
        /// 
        ///     var other = new Gcp.Compute.Network("other", new()
        ///     {
        ///         AutoCreateSubnetworks = false,
        ///     });
        /// 
        ///     var peering1 = new Gcp.Compute.NetworkPeering("peering1", new()
        ///     {
        ///         Network = @default.SelfLink,
        ///         PeerNetwork = other.SelfLink,
        ///     });
        /// 
        ///     var peering2 = new Gcp.Compute.NetworkPeering("peering2", new()
        ///     {
        ///         Network = other.SelfLink,
        ///         PeerNetwork = @default.SelfLink,
        ///     });
        /// 
        ///     var peering1Ds = Gcp.Compute.GetNetworkPeering.Invoke(new()
        ///     {
        ///         Name = peering1.Name,
        ///         Network = peering1.Network,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNetworkPeeringResult> Invoke(GetNetworkPeeringInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkPeeringResult>("gcp:compute/getNetworkPeering:getNetworkPeering", args ?? new GetNetworkPeeringInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkPeeringArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the peering.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The primary network of the peering.
        /// </summary>
        [Input("network", required: true)]
        public string Network { get; set; } = null!;

        public GetNetworkPeeringArgs()
        {
        }
        public static new GetNetworkPeeringArgs Empty => new GetNetworkPeeringArgs();
    }

    public sealed class GetNetworkPeeringInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the peering.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The primary network of the peering.
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        public GetNetworkPeeringInvokeArgs()
        {
        }
        public static new GetNetworkPeeringInvokeArgs Empty => new GetNetworkPeeringInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkPeeringResult
    {
        public readonly bool ExportCustomRoutes;
        public readonly bool ExportSubnetRoutesWithPublicIp;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool ImportCustomRoutes;
        public readonly bool ImportSubnetRoutesWithPublicIp;
        public readonly string Name;
        public readonly string Network;
        public readonly string PeerNetwork;
        public readonly string State;
        public readonly string StateDetails;

        [OutputConstructor]
        private GetNetworkPeeringResult(
            bool exportCustomRoutes,

            bool exportSubnetRoutesWithPublicIp,

            string id,

            bool importCustomRoutes,

            bool importSubnetRoutesWithPublicIp,

            string name,

            string network,

            string peerNetwork,

            string state,

            string stateDetails)
        {
            ExportCustomRoutes = exportCustomRoutes;
            ExportSubnetRoutesWithPublicIp = exportSubnetRoutesWithPublicIp;
            Id = id;
            ImportCustomRoutes = importCustomRoutes;
            ImportSubnetRoutesWithPublicIp = importSubnetRoutesWithPublicIp;
            Name = name;
            Network = network;
            PeerNetwork = peerNetwork;
            State = state;
            StateDetails = stateDetails;
        }
    }
}
