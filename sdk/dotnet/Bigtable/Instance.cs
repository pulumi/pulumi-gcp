// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigTable
{
    /// <summary>
    /// Creates a Google Bigtable instance. For more information see
    /// [the official documentation](https://cloud.google.com/bigtable/) and
    /// [API](https://cloud.google.com/bigtable/docs/go/reference).
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/bigtable_instance.html.markdown.
    /// </summary>
    public partial class Instance : Pulumi.CustomResource
    {
        /// <summary>
        /// A block of cluster configuration options. This can be specified 1 or 2 times. See structure below.
        /// </summary>
        [Output("clusters")]
        public Output<ImmutableArray<Outputs.InstanceClusters>> Clusters { get; private set; } = null!;

        /// <summary>
        /// The human-readable display name of the Bigtable instance. Defaults to the instance `name`.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The instance type to create. One of `"DEVELOPMENT"` or `"PRODUCTION"`. Defaults to `"PRODUCTION"`.
        /// </summary>
        [Output("instanceType")]
        public Output<string?> InstanceType { get; private set; } = null!;

        /// <summary>
        /// The name (also called Instance Id in the Cloud Console) of the Cloud Bigtable instance.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:bigtable/instance:Instance", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigtable/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : Pulumi.ResourceArgs
    {
        [Input("clusters")]
        private InputList<Inputs.InstanceClustersArgs>? _clusters;

        /// <summary>
        /// A block of cluster configuration options. This can be specified 1 or 2 times. See structure below.
        /// </summary>
        public InputList<Inputs.InstanceClustersArgs> Clusters
        {
            get => _clusters ?? (_clusters = new InputList<Inputs.InstanceClustersArgs>());
            set => _clusters = value;
        }

        /// <summary>
        /// The human-readable display name of the Bigtable instance. Defaults to the instance `name`.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The instance type to create. One of `"DEVELOPMENT"` or `"PRODUCTION"`. Defaults to `"PRODUCTION"`.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// The name (also called Instance Id in the Cloud Console) of the Cloud Bigtable instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public InstanceArgs()
        {
        }
    }

    public sealed class InstanceState : Pulumi.ResourceArgs
    {
        [Input("clusters")]
        private InputList<Inputs.InstanceClustersGetArgs>? _clusters;

        /// <summary>
        /// A block of cluster configuration options. This can be specified 1 or 2 times. See structure below.
        /// </summary>
        public InputList<Inputs.InstanceClustersGetArgs> Clusters
        {
            get => _clusters ?? (_clusters = new InputList<Inputs.InstanceClustersGetArgs>());
            set => _clusters = value;
        }

        /// <summary>
        /// The human-readable display name of the Bigtable instance. Defaults to the instance `name`.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The instance type to create. One of `"DEVELOPMENT"` or `"PRODUCTION"`. Defaults to `"PRODUCTION"`.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// The name (also called Instance Id in the Cloud Console) of the Cloud Bigtable instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public InstanceState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class InstanceClustersArgs : Pulumi.ResourceArgs
    {
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("numNodes")]
        public Input<int>? NumNodes { get; set; }

        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public InstanceClustersArgs()
        {
        }
    }

    public sealed class InstanceClustersGetArgs : Pulumi.ResourceArgs
    {
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("numNodes")]
        public Input<int>? NumNodes { get; set; }

        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public InstanceClustersGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class InstanceClusters
    {
        public readonly string ClusterId;
        public readonly int? NumNodes;
        public readonly string? StorageType;
        public readonly string Zone;

        [OutputConstructor]
        private InstanceClusters(
            string clusterId,
            int? numNodes,
            string? storageType,
            string zone)
        {
            ClusterId = clusterId;
            NumNodes = numNodes;
            StorageType = storageType;
            Zone = zone;
        }
    }
    }
}
