// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Healthcare
{
    /// <summary>
    /// PipelineJobs are Long Running Operations on Healthcare API to Map or Reconcile
    /// incoming data into FHIR format
    /// 
    /// To get more information about PipelineJob, see:
    /// 
    /// * [API documentation](https://cloud.google.com/healthcare-api/healthcare-data-engine/docs/reference/rest/v1/projects.locations.datasets.pipelineJobs)
    /// * How-to Guides
    ///     * [Creating a PipelineJob](https://cloud.google.com/healthcare-api/private/healthcare-data-engine/docs/reference/rest/v1/projects.locations.datasets.pipelineJobs#PipelineJob)
    /// 
    /// ## Example Usage
    /// 
    /// ### Healthcare Pipeline Job Reconciliation
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var dataset = new Gcp.Healthcare.Dataset("dataset", new()
    ///     {
    ///         Name = "example_dataset",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var fhirstore = new Gcp.Healthcare.FhirStore("fhirstore", new()
    ///     {
    ///         Name = "fhir_store",
    ///         Dataset = dataset.Id,
    ///         Version = "R4",
    ///         EnableUpdateCreate = true,
    ///         DisableReferentialIntegrity = true,
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = "example_bucket_name",
    ///         Location = "us-central1",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var mergeFile = new Gcp.Storage.BucketObject("merge_file", new()
    ///     {
    ///         Name = "merge.wstl",
    ///         Content = " ",
    ///         Bucket = bucket.Name,
    ///     });
    /// 
    ///     var example_pipeline = new Gcp.Healthcare.PipelineJob("example-pipeline", new()
    ///     {
    ///         Name = "example_pipeline_job",
    ///         Location = "us-central1",
    ///         Dataset = dataset.Id,
    ///         DisableLineage = true,
    ///         ReconciliationPipelineJob = new Gcp.Healthcare.Inputs.PipelineJobReconciliationPipelineJobArgs
    ///         {
    ///             MergeConfig = new Gcp.Healthcare.Inputs.PipelineJobReconciliationPipelineJobMergeConfigArgs
    ///             {
    ///                 Description = "sample description for reconciliation rules",
    ///                 WhistleConfigSource = new Gcp.Healthcare.Inputs.PipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceArgs
    ///                 {
    ///                     Uri = Output.Tuple(bucket.Name, mergeFile.Name).Apply(values =&gt;
    ///                     {
    ///                         var bucketName = values.Item1;
    ///                         var mergeFileName = values.Item2;
    ///                         return $"gs://{bucketName}/{mergeFileName}";
    ///                     }),
    ///                     ImportUriPrefix = bucket.Name.Apply(name =&gt; $"gs://{name}"),
    ///                 },
    ///             },
    ///             MatchingUriPrefix = bucket.Name.Apply(name =&gt; $"gs://{name}"),
    ///             FhirStoreDestination = Output.Tuple(dataset.Id, fhirstore.Name).Apply(values =&gt;
    ///             {
    ///                 var id = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"{id}/fhirStores/{name}";
    ///             }),
    ///         },
    ///     });
    /// 
    ///     var hsa = new Gcp.Storage.BucketIAMMember("hsa", new()
    ///     {
    ///         Bucket = bucket.Name,
    ///         Role = "roles/storage.objectUser",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-healthcare.iam.gserviceaccount.com",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Healthcare Pipeline Job Backfill
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dataset = new Gcp.Healthcare.Dataset("dataset", new()
    ///     {
    ///         Name = "example_dataset",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var example_pipeline = new Gcp.Healthcare.PipelineJob("example-pipeline", new()
    ///     {
    ///         Name = "example_backfill_pipeline",
    ///         Location = "us-central1",
    ///         Dataset = dataset.Id,
    ///         BackfillPipelineJob = new Gcp.Healthcare.Inputs.PipelineJobBackfillPipelineJobArgs
    ///         {
    ///             MappingPipelineJob = dataset.Id.Apply(id =&gt; $"{id}/pipelineJobs/example_mapping_pipeline_job"),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Healthcare Pipeline Job Whistle Mapping
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var dataset = new Gcp.Healthcare.Dataset("dataset", new()
    ///     {
    ///         Name = "example_dataset",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var sourceFhirstore = new Gcp.Healthcare.FhirStore("source_fhirstore", new()
    ///     {
    ///         Name = "source_fhir_store",
    ///         Dataset = dataset.Id,
    ///         Version = "R4",
    ///         EnableUpdateCreate = true,
    ///         DisableReferentialIntegrity = true,
    ///     });
    /// 
    ///     var destFhirstore = new Gcp.Healthcare.FhirStore("dest_fhirstore", new()
    ///     {
    ///         Name = "dest_fhir_store",
    ///         Dataset = dataset.Id,
    ///         Version = "R4",
    ///         EnableUpdateCreate = true,
    ///         DisableReferentialIntegrity = true,
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = "example_bucket_name",
    ///         Location = "us-central1",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var mappingFile = new Gcp.Storage.BucketObject("mapping_file", new()
    ///     {
    ///         Name = "mapping.wstl",
    ///         Content = " ",
    ///         Bucket = bucket.Name,
    ///     });
    /// 
    ///     var example_mapping_pipeline = new Gcp.Healthcare.PipelineJob("example-mapping-pipeline", new()
    ///     {
    ///         Name = "example_mapping_pipeline_job",
    ///         Location = "us-central1",
    ///         Dataset = dataset.Id,
    ///         DisableLineage = true,
    ///         Labels = 
    ///         {
    ///             { "example_label_key", "example_label_value" },
    ///         },
    ///         MappingPipelineJob = new Gcp.Healthcare.Inputs.PipelineJobMappingPipelineJobArgs
    ///         {
    ///             MappingConfig = new Gcp.Healthcare.Inputs.PipelineJobMappingPipelineJobMappingConfigArgs
    ///             {
    ///                 WhistleConfigSource = new Gcp.Healthcare.Inputs.PipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceArgs
    ///                 {
    ///                     Uri = Output.Tuple(bucket.Name, mappingFile.Name).Apply(values =&gt;
    ///                     {
    ///                         var bucketName = values.Item1;
    ///                         var mappingFileName = values.Item2;
    ///                         return $"gs://{bucketName}/{mappingFileName}";
    ///                     }),
    ///                     ImportUriPrefix = bucket.Name.Apply(name =&gt; $"gs://{name}"),
    ///                 },
    ///                 Description = "example description for mapping configuration",
    ///             },
    ///             FhirStreamingSource = new Gcp.Healthcare.Inputs.PipelineJobMappingPipelineJobFhirStreamingSourceArgs
    ///             {
    ///                 FhirStore = Output.Tuple(dataset.Id, sourceFhirstore.Name).Apply(values =&gt;
    ///                 {
    ///                     var id = values.Item1;
    ///                     var name = values.Item2;
    ///                     return $"{id}/fhirStores/{name}";
    ///                 }),
    ///                 Description = "example description for streaming fhirstore",
    ///             },
    ///             FhirStoreDestination = Output.Tuple(dataset.Id, destFhirstore.Name).Apply(values =&gt;
    ///             {
    ///                 var id = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"{id}/fhirStores/{name}";
    ///             }),
    ///         },
    ///     });
    /// 
    ///     var hsa = new Gcp.Storage.BucketIAMMember("hsa", new()
    ///     {
    ///         Bucket = bucket.Name,
    ///         Role = "roles/storage.objectUser",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-healthcare.iam.gserviceaccount.com",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Healthcare Pipeline Job Mapping Recon Dest
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var dataset = new Gcp.Healthcare.Dataset("dataset", new()
    ///     {
    ///         Name = "example_dataset",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var destFhirstore = new Gcp.Healthcare.FhirStore("dest_fhirstore", new()
    ///     {
    ///         Name = "dest_fhir_store",
    ///         Dataset = dataset.Id,
    ///         Version = "R4",
    ///         EnableUpdateCreate = true,
    ///         DisableReferentialIntegrity = true,
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = "example_bucket_name",
    ///         Location = "us-central1",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var mergeFile = new Gcp.Storage.BucketObject("merge_file", new()
    ///     {
    ///         Name = "merge.wstl",
    ///         Content = " ",
    ///         Bucket = bucket.Name,
    ///     });
    /// 
    ///     var recon = new Gcp.Healthcare.PipelineJob("recon", new()
    ///     {
    ///         Name = "example_recon_pipeline_job",
    ///         Location = "us-central1",
    ///         Dataset = dataset.Id,
    ///         DisableLineage = true,
    ///         ReconciliationPipelineJob = new Gcp.Healthcare.Inputs.PipelineJobReconciliationPipelineJobArgs
    ///         {
    ///             MergeConfig = new Gcp.Healthcare.Inputs.PipelineJobReconciliationPipelineJobMergeConfigArgs
    ///             {
    ///                 Description = "sample description for reconciliation rules",
    ///                 WhistleConfigSource = new Gcp.Healthcare.Inputs.PipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceArgs
    ///                 {
    ///                     Uri = Output.Tuple(bucket.Name, mergeFile.Name).Apply(values =&gt;
    ///                     {
    ///                         var bucketName = values.Item1;
    ///                         var mergeFileName = values.Item2;
    ///                         return $"gs://{bucketName}/{mergeFileName}";
    ///                     }),
    ///                     ImportUriPrefix = bucket.Name.Apply(name =&gt; $"gs://{name}"),
    ///                 },
    ///             },
    ///             MatchingUriPrefix = bucket.Name.Apply(name =&gt; $"gs://{name}"),
    ///             FhirStoreDestination = Output.Tuple(dataset.Id, destFhirstore.Name).Apply(values =&gt;
    ///             {
    ///                 var id = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"{id}/fhirStores/{name}";
    ///             }),
    ///         },
    ///     });
    /// 
    ///     var sourceFhirstore = new Gcp.Healthcare.FhirStore("source_fhirstore", new()
    ///     {
    ///         Name = "source_fhir_store",
    ///         Dataset = dataset.Id,
    ///         Version = "R4",
    ///         EnableUpdateCreate = true,
    ///         DisableReferentialIntegrity = true,
    ///     });
    /// 
    ///     var mappingFile = new Gcp.Storage.BucketObject("mapping_file", new()
    ///     {
    ///         Name = "mapping.wstl",
    ///         Content = " ",
    ///         Bucket = bucket.Name,
    ///     });
    /// 
    ///     var example_mapping_pipeline = new Gcp.Healthcare.PipelineJob("example-mapping-pipeline", new()
    ///     {
    ///         Name = "example_mapping_pipeline_job",
    ///         Location = "us-central1",
    ///         Dataset = dataset.Id,
    ///         DisableLineage = true,
    ///         Labels = 
    ///         {
    ///             { "example_label_key", "example_label_value" },
    ///         },
    ///         MappingPipelineJob = new Gcp.Healthcare.Inputs.PipelineJobMappingPipelineJobArgs
    ///         {
    ///             MappingConfig = new Gcp.Healthcare.Inputs.PipelineJobMappingPipelineJobMappingConfigArgs
    ///             {
    ///                 WhistleConfigSource = new Gcp.Healthcare.Inputs.PipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceArgs
    ///                 {
    ///                     Uri = Output.Tuple(bucket.Name, mappingFile.Name).Apply(values =&gt;
    ///                     {
    ///                         var bucketName = values.Item1;
    ///                         var mappingFileName = values.Item2;
    ///                         return $"gs://{bucketName}/{mappingFileName}";
    ///                     }),
    ///                     ImportUriPrefix = bucket.Name.Apply(name =&gt; $"gs://{name}"),
    ///                 },
    ///                 Description = "example description for mapping configuration",
    ///             },
    ///             FhirStreamingSource = new Gcp.Healthcare.Inputs.PipelineJobMappingPipelineJobFhirStreamingSourceArgs
    ///             {
    ///                 FhirStore = Output.Tuple(dataset.Id, sourceFhirstore.Name).Apply(values =&gt;
    ///                 {
    ///                     var id = values.Item1;
    ///                     var name = values.Item2;
    ///                     return $"{id}/fhirStores/{name}";
    ///                 }),
    ///                 Description = "example description for streaming fhirstore",
    ///             },
    ///             ReconciliationDestination = true,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             recon,
    ///         },
    ///     });
    /// 
    ///     var hsa = new Gcp.Storage.BucketIAMMember("hsa", new()
    ///     {
    ///         Bucket = bucket.Name,
    ///         Role = "roles/storage.objectUser",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-healthcare.iam.gserviceaccount.com",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// PipelineJob can be imported using any of these accepted formats:
    /// 
    /// * `{{dataset}}/pipelineJobs/{{name}}`
    /// 
    /// * `{{dataset}}/pipelineJobs?pipelineJobId={{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, PipelineJob can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:healthcare/pipelineJob:PipelineJob default {{dataset}}/pipelineJobs/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:healthcare/pipelineJob:PipelineJob default {{dataset}}/pipelineJobs?pipelineJobId={{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:healthcare/pipelineJob:PipelineJob default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:healthcare/pipelineJob:PipelineJob")]
    public partial class PipelineJob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the backfill configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("backfillPipelineJob")]
        public Output<Outputs.PipelineJobBackfillPipelineJob?> BackfillPipelineJob { get; private set; } = null!;

        /// <summary>
        /// Healthcare Dataset under which the Pipeline Job is to run
        /// </summary>
        [Output("dataset")]
        public Output<string> Dataset { get; private set; } = null!;

        /// <summary>
        /// If true, disables writing lineage for the pipeline.
        /// </summary>
        [Output("disableLineage")]
        public Output<bool?> DisableLineage { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// User-supplied key-value pairs used to organize Pipeline Jobs.
        /// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
        /// maximum 128 bytes, and must conform to the following PCRE regular expression:
        /// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
        /// Label values are optional, must be between 1 and 63 characters long, have a
        /// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
        /// regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
        /// No more than 64 labels can be associated with a given pipeline.
        /// An object containing a list of "key": value pairs.
        /// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Location where the Pipeline Job is to run
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies mapping configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("mappingPipelineJob")]
        public Output<Outputs.PipelineJobMappingPipelineJob?> MappingPipelineJob { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the pipeline job. This field is user-assigned.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Specifies reconciliation configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("reconciliationPipelineJob")]
        public Output<Outputs.PipelineJobReconciliationPipelineJob?> ReconciliationPipelineJob { get; private set; } = null!;

        /// <summary>
        /// The fully qualified name of this dataset
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;


        /// <summary>
        /// Create a PipelineJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PipelineJob(string name, PipelineJobArgs args, CustomResourceOptions? options = null)
            : base("gcp:healthcare/pipelineJob:PipelineJob", name, args ?? new PipelineJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PipelineJob(string name, Input<string> id, PipelineJobState? state = null, CustomResourceOptions? options = null)
            : base("gcp:healthcare/pipelineJob:PipelineJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PipelineJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PipelineJob Get(string name, Input<string> id, PipelineJobState? state = null, CustomResourceOptions? options = null)
        {
            return new PipelineJob(name, id, state, options);
        }
    }

    public sealed class PipelineJobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the backfill configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("backfillPipelineJob")]
        public Input<Inputs.PipelineJobBackfillPipelineJobArgs>? BackfillPipelineJob { get; set; }

        /// <summary>
        /// Healthcare Dataset under which the Pipeline Job is to run
        /// </summary>
        [Input("dataset", required: true)]
        public Input<string> Dataset { get; set; } = null!;

        /// <summary>
        /// If true, disables writing lineage for the pipeline.
        /// </summary>
        [Input("disableLineage")]
        public Input<bool>? DisableLineage { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-supplied key-value pairs used to organize Pipeline Jobs.
        /// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
        /// maximum 128 bytes, and must conform to the following PCRE regular expression:
        /// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
        /// Label values are optional, must be between 1 and 63 characters long, have a
        /// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
        /// regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
        /// No more than 64 labels can be associated with a given pipeline.
        /// An object containing a list of "key": value pairs.
        /// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Location where the Pipeline Job is to run
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Specifies mapping configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("mappingPipelineJob")]
        public Input<Inputs.PipelineJobMappingPipelineJobArgs>? MappingPipelineJob { get; set; }

        /// <summary>
        /// Specifies the name of the pipeline job. This field is user-assigned.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies reconciliation configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("reconciliationPipelineJob")]
        public Input<Inputs.PipelineJobReconciliationPipelineJobArgs>? ReconciliationPipelineJob { get; set; }

        public PipelineJobArgs()
        {
        }
        public static new PipelineJobArgs Empty => new PipelineJobArgs();
    }

    public sealed class PipelineJobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the backfill configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("backfillPipelineJob")]
        public Input<Inputs.PipelineJobBackfillPipelineJobGetArgs>? BackfillPipelineJob { get; set; }

        /// <summary>
        /// Healthcare Dataset under which the Pipeline Job is to run
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        /// <summary>
        /// If true, disables writing lineage for the pipeline.
        /// </summary>
        [Input("disableLineage")]
        public Input<bool>? DisableLineage { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-supplied key-value pairs used to organize Pipeline Jobs.
        /// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
        /// maximum 128 bytes, and must conform to the following PCRE regular expression:
        /// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
        /// Label values are optional, must be between 1 and 63 characters long, have a
        /// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
        /// regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
        /// No more than 64 labels can be associated with a given pipeline.
        /// An object containing a list of "key": value pairs.
        /// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Location where the Pipeline Job is to run
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies mapping configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("mappingPipelineJob")]
        public Input<Inputs.PipelineJobMappingPipelineJobGetArgs>? MappingPipelineJob { get; set; }

        /// <summary>
        /// Specifies the name of the pipeline job. This field is user-assigned.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Specifies reconciliation configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("reconciliationPipelineJob")]
        public Input<Inputs.PipelineJobReconciliationPipelineJobGetArgs>? ReconciliationPipelineJob { get; set; }

        /// <summary>
        /// The fully qualified name of this dataset
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        public PipelineJobState()
        {
        }
        public static new PipelineJobState Empty => new PipelineJobState();
    }
}
