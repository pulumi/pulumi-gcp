// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Healthcare
{
    /// <summary>
    /// A DicomStore is a datastore inside a Healthcare dataset that conforms to the DICOM
    /// (https://www.dicomstandard.org/about/) standard for Healthcare information exchange
    /// 
    /// To get more information about DicomStore, see:
    /// 
    /// * [API documentation](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.dicomStores)
    /// * How-to Guides
    ///     * [Creating a DICOM store](https://cloud.google.com/healthcare/docs/how-tos/dicom)
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/healthcare_dicom_store.html.markdown.
    /// </summary>
    public partial class DicomStore : Pulumi.CustomResource
    {
        [Output("dataset")]
        public Output<string> Dataset { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("notificationConfig")]
        public Output<Outputs.DicomStoreNotificationConfig?> NotificationConfig { get; private set; } = null!;

        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;


        /// <summary>
        /// Create a DicomStore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DicomStore(string name, DicomStoreArgs args, CustomResourceOptions? options = null)
            : base("gcp:healthcare/dicomStore:DicomStore", name, args, MakeResourceOptions(options, ""))
        {
        }

        private DicomStore(string name, Input<string> id, DicomStoreState? state = null, CustomResourceOptions? options = null)
            : base("gcp:healthcare/dicomStore:DicomStore", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DicomStore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DicomStore Get(string name, Input<string> id, DicomStoreState? state = null, CustomResourceOptions? options = null)
        {
            return new DicomStore(name, id, state, options);
        }
    }

    public sealed class DicomStoreArgs : Pulumi.ResourceArgs
    {
        [Input("dataset", required: true)]
        public Input<string> Dataset { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationConfig")]
        public Input<Inputs.DicomStoreNotificationConfigArgs>? NotificationConfig { get; set; }

        public DicomStoreArgs()
        {
        }
    }

    public sealed class DicomStoreState : Pulumi.ResourceArgs
    {
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationConfig")]
        public Input<Inputs.DicomStoreNotificationConfigGetArgs>? NotificationConfig { get; set; }

        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        public DicomStoreState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class DicomStoreNotificationConfigArgs : Pulumi.ResourceArgs
    {
        [Input("pubsubTopic", required: true)]
        public Input<string> PubsubTopic { get; set; } = null!;

        public DicomStoreNotificationConfigArgs()
        {
        }
    }

    public sealed class DicomStoreNotificationConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("pubsubTopic", required: true)]
        public Input<string> PubsubTopic { get; set; } = null!;

        public DicomStoreNotificationConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class DicomStoreNotificationConfig
    {
        public readonly string PubsubTopic;

        [OutputConstructor]
        private DicomStoreNotificationConfig(string pubsubTopic)
        {
            PubsubTopic = pubsubTopic;
        }
    }
    }
}
