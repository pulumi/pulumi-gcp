// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataproc
{
    /// <summary>
    /// Manages a job resource within a Dataproc cluster within GCE. For more information see
    /// [the official dataproc documentation](https://cloud.google.com/dataproc/).
    /// 
    /// !&gt; **Note:** This resource does not support 'update' and changing any attributes will cause the resource to be recreated.
    /// </summary>
    public partial class Job : Pulumi.CustomResource
    {
        /// <summary>
        /// If present, the location of miscellaneous control files which may be used as part of job setup and handling. If not present, control files may be placed in the same location as driver_output_uri.
        /// </summary>
        [Output("driverControlsFilesUri")]
        public Output<string> DriverControlsFilesUri { get; private set; } = null!;

        /// <summary>
        /// A URI pointing to the location of the stdout of the job's driver program.
        /// </summary>
        [Output("driverOutputResourceUri")]
        public Output<string> DriverOutputResourceUri { get; private set; } = null!;

        /// <summary>
        /// By default, you can only delete inactive jobs within
        /// Dataproc. Setting this to true, and calling destroy, will ensure that the
        /// job is first cancelled before issuing the delete.
        /// </summary>
        [Output("forceDelete")]
        public Output<bool?> ForceDelete { get; private set; } = null!;

        [Output("hadoopConfig")]
        public Output<Outputs.JobHadoopConfig?> HadoopConfig { get; private set; } = null!;

        [Output("hiveConfig")]
        public Output<Outputs.JobHiveConfig?> HiveConfig { get; private set; } = null!;

        /// <summary>
        /// The list of labels (key/value pairs) to add to the job.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        [Output("pigConfig")]
        public Output<Outputs.JobPigConfig?> PigConfig { get; private set; } = null!;

        [Output("placement")]
        public Output<Outputs.JobPlacement> Placement { get; private set; } = null!;

        /// <summary>
        /// The project in which the `cluster` can be found and jobs
        /// subsequently run against. If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        [Output("pysparkConfig")]
        public Output<Outputs.JobPysparkConfig?> PysparkConfig { get; private set; } = null!;

        [Output("reference")]
        public Output<Outputs.JobReference> Reference { get; private set; } = null!;

        /// <summary>
        /// The Cloud Dataproc region. This essentially determines which clusters are available
        /// for this job to be submitted to. If not specified, defaults to `global`.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// Optional. Job scheduling configuration.
        /// </summary>
        [Output("scheduling")]
        public Output<Outputs.JobScheduling?> Scheduling { get; private set; } = null!;

        [Output("sparkConfig")]
        public Output<Outputs.JobSparkConfig?> SparkConfig { get; private set; } = null!;

        [Output("sparksqlConfig")]
        public Output<Outputs.JobSparksqlConfig?> SparksqlConfig { get; private set; } = null!;

        [Output("status")]
        public Output<Outputs.JobStatus> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Job resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Job(string name, JobArgs args, CustomResourceOptions? options = null)
            : base("gcp:dataproc/job:Job", name, args ?? new JobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Job(string name, Input<string> id, JobState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dataproc/job:Job", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Job resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Job Get(string name, Input<string> id, JobState? state = null, CustomResourceOptions? options = null)
        {
            return new Job(name, id, state, options);
        }
    }

    public sealed class JobArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// By default, you can only delete inactive jobs within
        /// Dataproc. Setting this to true, and calling destroy, will ensure that the
        /// job is first cancelled before issuing the delete.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        [Input("hadoopConfig")]
        public Input<Inputs.JobHadoopConfigArgs>? HadoopConfig { get; set; }

        [Input("hiveConfig")]
        public Input<Inputs.JobHiveConfigArgs>? HiveConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The list of labels (key/value pairs) to add to the job.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("pigConfig")]
        public Input<Inputs.JobPigConfigArgs>? PigConfig { get; set; }

        [Input("placement", required: true)]
        public Input<Inputs.JobPlacementArgs> Placement { get; set; } = null!;

        /// <summary>
        /// The project in which the `cluster` can be found and jobs
        /// subsequently run against. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pysparkConfig")]
        public Input<Inputs.JobPysparkConfigArgs>? PysparkConfig { get; set; }

        [Input("reference")]
        public Input<Inputs.JobReferenceArgs>? Reference { get; set; }

        /// <summary>
        /// The Cloud Dataproc region. This essentially determines which clusters are available
        /// for this job to be submitted to. If not specified, defaults to `global`.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Optional. Job scheduling configuration.
        /// </summary>
        [Input("scheduling")]
        public Input<Inputs.JobSchedulingArgs>? Scheduling { get; set; }

        [Input("sparkConfig")]
        public Input<Inputs.JobSparkConfigArgs>? SparkConfig { get; set; }

        [Input("sparksqlConfig")]
        public Input<Inputs.JobSparksqlConfigArgs>? SparksqlConfig { get; set; }

        public JobArgs()
        {
        }
    }

    public sealed class JobState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If present, the location of miscellaneous control files which may be used as part of job setup and handling. If not present, control files may be placed in the same location as driver_output_uri.
        /// </summary>
        [Input("driverControlsFilesUri")]
        public Input<string>? DriverControlsFilesUri { get; set; }

        /// <summary>
        /// A URI pointing to the location of the stdout of the job's driver program.
        /// </summary>
        [Input("driverOutputResourceUri")]
        public Input<string>? DriverOutputResourceUri { get; set; }

        /// <summary>
        /// By default, you can only delete inactive jobs within
        /// Dataproc. Setting this to true, and calling destroy, will ensure that the
        /// job is first cancelled before issuing the delete.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        [Input("hadoopConfig")]
        public Input<Inputs.JobHadoopConfigGetArgs>? HadoopConfig { get; set; }

        [Input("hiveConfig")]
        public Input<Inputs.JobHiveConfigGetArgs>? HiveConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The list of labels (key/value pairs) to add to the job.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("pigConfig")]
        public Input<Inputs.JobPigConfigGetArgs>? PigConfig { get; set; }

        [Input("placement")]
        public Input<Inputs.JobPlacementGetArgs>? Placement { get; set; }

        /// <summary>
        /// The project in which the `cluster` can be found and jobs
        /// subsequently run against. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pysparkConfig")]
        public Input<Inputs.JobPysparkConfigGetArgs>? PysparkConfig { get; set; }

        [Input("reference")]
        public Input<Inputs.JobReferenceGetArgs>? Reference { get; set; }

        /// <summary>
        /// The Cloud Dataproc region. This essentially determines which clusters are available
        /// for this job to be submitted to. If not specified, defaults to `global`.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Optional. Job scheduling configuration.
        /// </summary>
        [Input("scheduling")]
        public Input<Inputs.JobSchedulingGetArgs>? Scheduling { get; set; }

        [Input("sparkConfig")]
        public Input<Inputs.JobSparkConfigGetArgs>? SparkConfig { get; set; }

        [Input("sparksqlConfig")]
        public Input<Inputs.JobSparksqlConfigGetArgs>? SparksqlConfig { get; set; }

        [Input("status")]
        public Input<Inputs.JobStatusGetArgs>? Status { get; set; }

        public JobState()
        {
        }
    }
}
