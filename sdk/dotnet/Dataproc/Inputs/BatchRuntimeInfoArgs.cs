// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataproc.Inputs
{

    public sealed class BatchRuntimeInfoArgs : global::Pulumi.ResourceArgs
    {
        [Input("approximateUsages")]
        private InputList<Inputs.BatchRuntimeInfoApproximateUsageArgs>? _approximateUsages;

        /// <summary>
        /// (Output)
        /// Approximate workload resource usage, calculated when the workload completes(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.BatchRuntimeInfoApproximateUsageArgs> ApproximateUsages
        {
            get => _approximateUsages ?? (_approximateUsages = new InputList<Inputs.BatchRuntimeInfoApproximateUsageArgs>());
            set => _approximateUsages = value;
        }

        [Input("currentUsages")]
        private InputList<Inputs.BatchRuntimeInfoCurrentUsageArgs>? _currentUsages;

        /// <summary>
        /// (Output)
        /// Snapshot of current workload resource usage(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.BatchRuntimeInfoCurrentUsageArgs> CurrentUsages
        {
            get => _currentUsages ?? (_currentUsages = new InputList<Inputs.BatchRuntimeInfoCurrentUsageArgs>());
            set => _currentUsages = value;
        }

        /// <summary>
        /// (Output)
        /// A URI pointing to the location of the diagnostics tarball.
        /// </summary>
        [Input("diagnosticOutputUri")]
        public Input<string>? DiagnosticOutputUri { get; set; }

        [Input("endpoints")]
        private InputMap<string>? _endpoints;

        /// <summary>
        /// (Output)
        /// Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
        /// </summary>
        public InputMap<string> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputMap<string>());
            set => _endpoints = value;
        }

        /// <summary>
        /// (Output)
        /// A URI pointing to the location of the stdout and stderr of the workload.
        /// </summary>
        [Input("outputUri")]
        public Input<string>? OutputUri { get; set; }

        public BatchRuntimeInfoArgs()
        {
        }
        public static new BatchRuntimeInfoArgs Empty => new BatchRuntimeInfoArgs();
    }
}
