// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataproc
{
    public static class GetMetastoreService
    {
        /// <summary>
        /// Get a Dataproc Metastore service from Google Cloud by its id and location.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.Dataproc.GetMetastoreService.Invoke(new()
        ///     {
        ///         ServiceId = "foo-bar",
        ///         Location = "global",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMetastoreServiceResult> InvokeAsync(GetMetastoreServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetastoreServiceResult>("gcp:dataproc/getMetastoreService:getMetastoreService", args ?? new GetMetastoreServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Dataproc Metastore service from Google Cloud by its id and location.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.Dataproc.GetMetastoreService.Invoke(new()
        ///     {
        ///         ServiceId = "foo-bar",
        ///         Location = "global",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMetastoreServiceResult> Invoke(GetMetastoreServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetastoreServiceResult>("gcp:dataproc/getMetastoreService:getMetastoreService", args ?? new GetMetastoreServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetastoreServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location where the metastore service resides.
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The ID of the metastore service.
        /// </summary>
        [Input("serviceId", required: true)]
        public string ServiceId { get; set; } = null!;

        public GetMetastoreServiceArgs()
        {
        }
        public static new GetMetastoreServiceArgs Empty => new GetMetastoreServiceArgs();
    }

    public sealed class GetMetastoreServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location where the metastore service resides.
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The ID of the metastore service.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public GetMetastoreServiceInvokeArgs()
        {
        }
        public static new GetMetastoreServiceInvokeArgs Empty => new GetMetastoreServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetastoreServiceResult
    {
        public readonly string ArtifactGcsUri;
        public readonly string DatabaseType;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly ImmutableArray<Outputs.GetMetastoreServiceEncryptionConfigResult> EncryptionConfigs;
        public readonly string EndpointUri;
        public readonly ImmutableArray<Outputs.GetMetastoreServiceHiveMetastoreConfigResult> HiveMetastoreConfigs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Location;
        public readonly ImmutableArray<Outputs.GetMetastoreServiceMaintenanceWindowResult> MaintenanceWindows;
        public readonly ImmutableArray<Outputs.GetMetastoreServiceMetadataIntegrationResult> MetadataIntegrations;
        public readonly string Name;
        public readonly string Network;
        public readonly ImmutableArray<Outputs.GetMetastoreServiceNetworkConfigResult> NetworkConfigs;
        public readonly int Port;
        public readonly string? Project;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly string ReleaseChannel;
        public readonly ImmutableArray<Outputs.GetMetastoreServiceScalingConfigResult> ScalingConfigs;
        public readonly string ServiceId;
        public readonly string State;
        public readonly string StateMessage;
        public readonly ImmutableArray<Outputs.GetMetastoreServiceTelemetryConfigResult> TelemetryConfigs;
        public readonly string Tier;
        public readonly string Uid;

        [OutputConstructor]
        private GetMetastoreServiceResult(
            string artifactGcsUri,

            string databaseType,

            ImmutableDictionary<string, string> effectiveLabels,

            ImmutableArray<Outputs.GetMetastoreServiceEncryptionConfigResult> encryptionConfigs,

            string endpointUri,

            ImmutableArray<Outputs.GetMetastoreServiceHiveMetastoreConfigResult> hiveMetastoreConfigs,

            string id,

            ImmutableDictionary<string, string> labels,

            string location,

            ImmutableArray<Outputs.GetMetastoreServiceMaintenanceWindowResult> maintenanceWindows,

            ImmutableArray<Outputs.GetMetastoreServiceMetadataIntegrationResult> metadataIntegrations,

            string name,

            string network,

            ImmutableArray<Outputs.GetMetastoreServiceNetworkConfigResult> networkConfigs,

            int port,

            string? project,

            ImmutableDictionary<string, string> pulumiLabels,

            string releaseChannel,

            ImmutableArray<Outputs.GetMetastoreServiceScalingConfigResult> scalingConfigs,

            string serviceId,

            string state,

            string stateMessage,

            ImmutableArray<Outputs.GetMetastoreServiceTelemetryConfigResult> telemetryConfigs,

            string tier,

            string uid)
        {
            ArtifactGcsUri = artifactGcsUri;
            DatabaseType = databaseType;
            EffectiveLabels = effectiveLabels;
            EncryptionConfigs = encryptionConfigs;
            EndpointUri = endpointUri;
            HiveMetastoreConfigs = hiveMetastoreConfigs;
            Id = id;
            Labels = labels;
            Location = location;
            MaintenanceWindows = maintenanceWindows;
            MetadataIntegrations = metadataIntegrations;
            Name = name;
            Network = network;
            NetworkConfigs = networkConfigs;
            Port = port;
            Project = project;
            PulumiLabels = pulumiLabels;
            ReleaseChannel = releaseChannel;
            ScalingConfigs = scalingConfigs;
            ServiceId = serviceId;
            State = state;
            StateMessage = stateMessage;
            TelemetryConfigs = telemetryConfigs;
            Tier = tier;
            Uid = uid;
        }
    }
}
