// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataproc
{
    public static class GetMetastoreTableIamPolicy
    {
        /// <summary>
        /// Retrieves the current IAM policy data for table
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Dataproc.GetMetastoreTableIamPolicy.Invoke(new()
        ///     {
        ///         Project = dpmsService.Project,
        ///         Location = dpmsService.Location,
        ///         ServiceId = dpmsService.ServiceId,
        ///         DatabaseId = hive.HiveConfig[0].Properties.Database,
        ///         Table = hive.HiveConfig[0].Properties.Table,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMetastoreTableIamPolicyResult> InvokeAsync(GetMetastoreTableIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetastoreTableIamPolicyResult>("gcp:dataproc/getMetastoreTableIamPolicy:getMetastoreTableIamPolicy", args ?? new GetMetastoreTableIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for table
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Dataproc.GetMetastoreTableIamPolicy.Invoke(new()
        ///     {
        ///         Project = dpmsService.Project,
        ///         Location = dpmsService.Location,
        ///         ServiceId = dpmsService.ServiceId,
        ///         DatabaseId = hive.HiveConfig[0].Properties.Database,
        ///         Table = hive.HiveConfig[0].Properties.Table,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMetastoreTableIamPolicyResult> Invoke(GetMetastoreTableIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetastoreTableIamPolicyResult>("gcp:dataproc/getMetastoreTableIamPolicy:getMetastoreTableIamPolicy", args ?? new GetMetastoreTableIamPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for table
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Dataproc.GetMetastoreTableIamPolicy.Invoke(new()
        ///     {
        ///         Project = dpmsService.Project,
        ///         Location = dpmsService.Location,
        ///         ServiceId = dpmsService.ServiceId,
        ///         DatabaseId = hive.HiveConfig[0].Properties.Database,
        ///         Table = hive.HiveConfig[0].Properties.Table,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMetastoreTableIamPolicyResult> Invoke(GetMetastoreTableIamPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetastoreTableIamPolicyResult>("gcp:dataproc/getMetastoreTableIamPolicy:getMetastoreTableIamPolicy", args ?? new GetMetastoreTableIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetastoreTableIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("databaseId", required: true)]
        public string DatabaseId { get; set; } = null!;

        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
        /// location is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("serviceId", required: true)]
        public string ServiceId { get; set; } = null!;

        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("table", required: true)]
        public string Table { get; set; } = null!;

        public GetMetastoreTableIamPolicyArgs()
        {
        }
        public static new GetMetastoreTableIamPolicyArgs Empty => new GetMetastoreTableIamPolicyArgs();
    }

    public sealed class GetMetastoreTableIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
        /// location is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("table", required: true)]
        public Input<string> Table { get; set; } = null!;

        public GetMetastoreTableIamPolicyInvokeArgs()
        {
        }
        public static new GetMetastoreTableIamPolicyInvokeArgs Empty => new GetMetastoreTableIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetastoreTableIamPolicyResult
    {
        public readonly string DatabaseId;
        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        /// <summary>
        /// (Required only by `gcp.dataproc.MetastoreTableIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        public readonly string PolicyData;
        public readonly string Project;
        public readonly string ServiceId;
        public readonly string Table;

        [OutputConstructor]
        private GetMetastoreTableIamPolicyResult(
            string databaseId,

            string etag,

            string id,

            string location,

            string policyData,

            string project,

            string serviceId,

            string table)
        {
            DatabaseId = databaseId;
            Etag = etag;
            Id = id;
            Location = location;
            PolicyData = policyData;
            Project = project;
            ServiceId = serviceId;
            Table = table;
        }
    }
}
