// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataproc.Outputs
{

    [OutputType]
    public sealed class ClusterClusterConfigSecurityConfigKerberosConfig
    {
        /// <summary>
        /// The admin server (IP or hostname) for the
        /// remote trusted realm in a cross realm trust relationship.
        /// </summary>
        public readonly string? CrossRealmTrustAdminServer;
        /// <summary>
        /// The KDC (IP or hostname) for the
        /// remote trusted realm in a cross realm trust relationship.
        /// </summary>
        public readonly string? CrossRealmTrustKdc;
        /// <summary>
        /// The remote realm the Dataproc on-cluster KDC will
        /// trust, should the user enable cross realm trust.
        /// </summary>
        public readonly string? CrossRealmTrustRealm;
        /// <summary>
        /// The Cloud Storage URI of a KMS
        /// encrypted file containing the shared password between the on-cluster Kerberos realm
        /// and the remote trusted realm, in a cross realm trust relationship.
        /// </summary>
        public readonly string? CrossRealmTrustSharedPasswordUri;
        /// <summary>
        /// Flag to indicate whether to Kerberize the cluster.
        /// </summary>
        public readonly bool? EnableKerberos;
        /// <summary>
        /// The Cloud Storage URI of a KMS encrypted file containing
        /// the master key of the KDC database.
        /// </summary>
        public readonly string? KdcDbKeyUri;
        /// <summary>
        /// The Cloud Storage URI of a KMS encrypted file containing
        /// the password to the user provided key. For the self-signed certificate, this password
        /// is generated by Dataproc.
        /// </summary>
        public readonly string? KeyPasswordUri;
        /// <summary>
        /// The Cloud Storage URI of a KMS encrypted file containing
        /// the password to the user provided keystore. For the self-signed certificated, the password
        /// is generated by Dataproc.
        /// </summary>
        public readonly string? KeystorePasswordUri;
        /// <summary>
        /// The Cloud Storage URI of the keystore file used for SSL encryption.
        /// If not provided, Dataproc will provide a self-signed certificate.
        /// </summary>
        public readonly string? KeystoreUri;
        /// <summary>
        /// The URI of the KMS key used to encrypt various sensitive files.
        /// </summary>
        public readonly string KmsKeyUri;
        /// <summary>
        /// The name of the on-cluster Kerberos realm. If not specified, the
        /// uppercased domain of hostnames will be the realm.
        /// </summary>
        public readonly string? Realm;
        /// <summary>
        /// The Cloud Storage URI of a KMS encrypted file
        /// containing the root principal password.
        /// </summary>
        public readonly string RootPrincipalPasswordUri;
        /// <summary>
        /// The lifetime of the ticket granting ticket, in hours.
        /// </summary>
        public readonly int? TgtLifetimeHours;
        /// <summary>
        /// The Cloud Storage URI of a KMS encrypted file
        /// containing the password to the user provided truststore. For the self-signed
        /// certificate, this password is generated by Dataproc.
        /// </summary>
        public readonly string? TruststorePasswordUri;
        /// <summary>
        /// The Cloud Storage URI of the truststore file used for
        /// SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
        /// </summary>
        public readonly string? TruststoreUri;

        [OutputConstructor]
        private ClusterClusterConfigSecurityConfigKerberosConfig(
            string? crossRealmTrustAdminServer,

            string? crossRealmTrustKdc,

            string? crossRealmTrustRealm,

            string? crossRealmTrustSharedPasswordUri,

            bool? enableKerberos,

            string? kdcDbKeyUri,

            string? keyPasswordUri,

            string? keystorePasswordUri,

            string? keystoreUri,

            string kmsKeyUri,

            string? realm,

            string rootPrincipalPasswordUri,

            int? tgtLifetimeHours,

            string? truststorePasswordUri,

            string? truststoreUri)
        {
            CrossRealmTrustAdminServer = crossRealmTrustAdminServer;
            CrossRealmTrustKdc = crossRealmTrustKdc;
            CrossRealmTrustRealm = crossRealmTrustRealm;
            CrossRealmTrustSharedPasswordUri = crossRealmTrustSharedPasswordUri;
            EnableKerberos = enableKerberos;
            KdcDbKeyUri = kdcDbKeyUri;
            KeyPasswordUri = keyPasswordUri;
            KeystorePasswordUri = keystorePasswordUri;
            KeystoreUri = keystoreUri;
            KmsKeyUri = kmsKeyUri;
            Realm = realm;
            RootPrincipalPasswordUri = rootPrincipalPasswordUri;
            TgtLifetimeHours = tgtLifetimeHours;
            TruststorePasswordUri = truststorePasswordUri;
            TruststoreUri = truststoreUri;
        }
    }
}
