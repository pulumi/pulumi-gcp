// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataproc.Outputs
{

    [OutputType]
    public sealed class WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfig
    {
        /// <summary>
        /// Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
        /// </summary>
        public readonly string? CrossRealmTrustAdminServer;
        /// <summary>
        /// Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
        /// </summary>
        public readonly string? CrossRealmTrustKdc;
        /// <summary>
        /// Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
        /// </summary>
        public readonly string? CrossRealmTrustRealm;
        /// <summary>
        /// Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
        /// </summary>
        public readonly string? CrossRealmTrustSharedPassword;
        /// <summary>
        /// Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
        /// </summary>
        public readonly bool? EnableKerberos;
        /// <summary>
        /// Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
        /// </summary>
        public readonly string? KdcDbKey;
        /// <summary>
        /// Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
        /// </summary>
        public readonly string? KeyPassword;
        /// <summary>
        /// Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
        /// </summary>
        public readonly string? Keystore;
        /// <summary>
        /// Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
        /// </summary>
        public readonly string? KeystorePassword;
        /// <summary>
        /// Optional. The uri of the KMS key used to encrypt various sensitive files.
        /// </summary>
        public readonly string? KmsKey;
        /// <summary>
        /// Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
        /// </summary>
        public readonly string? Realm;
        /// <summary>
        /// Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.
        /// </summary>
        public readonly string? RootPrincipalPassword;
        /// <summary>
        /// Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
        /// </summary>
        public readonly int? TgtLifetimeHours;
        /// <summary>
        /// Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
        /// </summary>
        public readonly string? Truststore;
        /// <summary>
        /// Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
        /// The `software_config` block supports:
        /// </summary>
        public readonly string? TruststorePassword;

        [OutputConstructor]
        private WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfig(
            string? crossRealmTrustAdminServer,

            string? crossRealmTrustKdc,

            string? crossRealmTrustRealm,

            string? crossRealmTrustSharedPassword,

            bool? enableKerberos,

            string? kdcDbKey,

            string? keyPassword,

            string? keystore,

            string? keystorePassword,

            string? kmsKey,

            string? realm,

            string? rootPrincipalPassword,

            int? tgtLifetimeHours,

            string? truststore,

            string? truststorePassword)
        {
            CrossRealmTrustAdminServer = crossRealmTrustAdminServer;
            CrossRealmTrustKdc = crossRealmTrustKdc;
            CrossRealmTrustRealm = crossRealmTrustRealm;
            CrossRealmTrustSharedPassword = crossRealmTrustSharedPassword;
            EnableKerberos = enableKerberos;
            KdcDbKey = kdcDbKey;
            KeyPassword = keyPassword;
            Keystore = keystore;
            KeystorePassword = keystorePassword;
            KmsKey = kmsKey;
            Realm = realm;
            RootPrincipalPassword = rootPrincipalPassword;
            TgtLifetimeHours = tgtLifetimeHours;
            Truststore = truststore;
            TruststorePassword = truststorePassword;
        }
    }
}
