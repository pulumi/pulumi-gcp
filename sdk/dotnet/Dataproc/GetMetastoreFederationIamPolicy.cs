// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataproc
{
    public static class GetMetastoreFederationIamPolicy
    {
        /// <summary>
        /// Retrieves the current IAM policy data for federation
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Dataproc.GetMetastoreFederationIamPolicy.Invoke(new()
        ///     {
        ///         Project = @default.Project,
        ///         Location = @default.Location,
        ///         FederationId = @default.FederationId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMetastoreFederationIamPolicyResult> InvokeAsync(GetMetastoreFederationIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetastoreFederationIamPolicyResult>("gcp:dataproc/getMetastoreFederationIamPolicy:getMetastoreFederationIamPolicy", args ?? new GetMetastoreFederationIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for federation
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Dataproc.GetMetastoreFederationIamPolicy.Invoke(new()
        ///     {
        ///         Project = @default.Project,
        ///         Location = @default.Location,
        ///         FederationId = @default.FederationId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMetastoreFederationIamPolicyResult> Invoke(GetMetastoreFederationIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetastoreFederationIamPolicyResult>("gcp:dataproc/getMetastoreFederationIamPolicy:getMetastoreFederationIamPolicy", args ?? new GetMetastoreFederationIamPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for federation
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Dataproc.GetMetastoreFederationIamPolicy.Invoke(new()
        ///     {
        ///         Project = @default.Project,
        ///         Location = @default.Location,
        ///         FederationId = @default.FederationId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMetastoreFederationIamPolicyResult> Invoke(GetMetastoreFederationIamPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetastoreFederationIamPolicyResult>("gcp:dataproc/getMetastoreFederationIamPolicy:getMetastoreFederationIamPolicy", args ?? new GetMetastoreFederationIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetastoreFederationIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("federationId", required: true)]
        public string FederationId { get; set; } = null!;

        /// <summary>
        /// The location where the metastore federation should reside.
        /// Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
        /// location is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetMetastoreFederationIamPolicyArgs()
        {
        }
        public static new GetMetastoreFederationIamPolicyArgs Empty => new GetMetastoreFederationIamPolicyArgs();
    }

    public sealed class GetMetastoreFederationIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("federationId", required: true)]
        public Input<string> FederationId { get; set; } = null!;

        /// <summary>
        /// The location where the metastore federation should reside.
        /// Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
        /// location is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetMetastoreFederationIamPolicyInvokeArgs()
        {
        }
        public static new GetMetastoreFederationIamPolicyInvokeArgs Empty => new GetMetastoreFederationIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetastoreFederationIamPolicyResult
    {
        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        public readonly string Etag;
        public readonly string FederationId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        /// <summary>
        /// (Required only by `gcp.dataproc.MetastoreFederationIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        public readonly string PolicyData;
        public readonly string Project;

        [OutputConstructor]
        private GetMetastoreFederationIamPolicyResult(
            string etag,

            string federationId,

            string id,

            string location,

            string policyData,

            string project)
        {
            Etag = etag;
            FederationId = federationId;
            Id = id;
            Location = location;
            PolicyData = policyData;
            Project = project;
        }
    }
}
