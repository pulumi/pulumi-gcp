// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataproc
{
    /// <summary>
    /// An ApplicationEnvironment contains shared configuration that may be referenced by multiple SparkApplications.
    /// 
    /// To get more information about ApplicationEnvironment, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dataproc-gdc/docs/reference/rest/v1/projects.locations.applicationEnvironments)
    /// * How-to Guides
    ///     * [Dataproc Intro](https://cloud.google.com/dataproc/)
    /// 
    /// ## Example Usage
    /// 
    /// ### Dataprocgdc Applicationenvironment Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var application_environment = new Gcp.Dataproc.GdcApplicationEnvironment("application-environment", new()
    ///     {
    ///         ApplicationEnvironmentId = "dp-tf-e2e-application-environment-basic",
    ///         Serviceinstance = "do-not-delete-dataproc-gdc-instance",
    ///         Project = "my-project",
    ///         Location = "us-west2",
    ///         Namespace = "default",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataprocgdc Applicationenvironment
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var application_environment = new Gcp.Dataproc.GdcApplicationEnvironment("application-environment", new()
    ///     {
    ///         ApplicationEnvironmentId = "dp-tf-e2e-application-environment",
    ///         Serviceinstance = "do-not-delete-dataproc-gdc-instance",
    ///         Project = "my-project",
    ///         Location = "us-west2",
    ///         Namespace = "default",
    ///         DisplayName = "An application environment",
    ///         Labels = 
    ///         {
    ///             { "test-label", "label-value" },
    ///         },
    ///         Annotations = 
    ///         {
    ///             { "an_annotation", "annotation_value" },
    ///         },
    ///         SparkApplicationEnvironmentConfig = new Gcp.Dataproc.Inputs.GdcApplicationEnvironmentSparkApplicationEnvironmentConfigArgs
    ///         {
    ///             DefaultProperties = 
    ///             {
    ///                 { "spark.executor.memory", "4g" },
    ///             },
    ///             DefaultVersion = "1.2",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ApplicationEnvironment can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/serviceInstances/{{serviceinstance}}/applicationEnvironments/{{application_environment_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{serviceinstance}}/{{application_environment_id}}`
    /// 
    /// * `{{location}}/{{serviceinstance}}/{{application_environment_id}}`
    /// 
    /// When using the `pulumi import` command, ApplicationEnvironment can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment default projects/{{project}}/locations/{{location}}/serviceInstances/{{serviceinstance}}/applicationEnvironments/{{application_environment_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment default {{project}}/{{location}}/{{serviceinstance}}/{{application_environment_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment default {{location}}/{{serviceinstance}}/{{application_environment_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment")]
    public partial class GdcApplicationEnvironment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// The id of the application environment
        /// </summary>
        [Output("applicationEnvironmentId")]
        public Output<string?> ApplicationEnvironmentId { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the resource was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// User-provided human-readable name to be used in user interfaces.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location of the application environment
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Identifier. The name of the application environment. Format: projects/{project}/locations/{location}/serviceInstances/{service_instance}/applicationEnvironments/{application_environment_id}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The id of the service instance to which this application environment belongs.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("serviceinstance")]
        public Output<string> Serviceinstance { get; private set; } = null!;

        /// <summary>
        /// Represents the SparkApplicationEnvironmentConfig.
        /// Structure is documented below.
        /// </summary>
        [Output("sparkApplicationEnvironmentConfig")]
        public Output<Outputs.GdcApplicationEnvironmentSparkApplicationEnvironmentConfig?> SparkApplicationEnvironmentConfig { get; private set; } = null!;

        /// <summary>
        /// System generated unique identifier for this application environment, formatted as UUID4.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the resource was most recently updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a GdcApplicationEnvironment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GdcApplicationEnvironment(string name, GdcApplicationEnvironmentArgs args, CustomResourceOptions? options = null)
            : base("gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment", name, args ?? new GdcApplicationEnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GdcApplicationEnvironment(string name, Input<string> id, GdcApplicationEnvironmentState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GdcApplicationEnvironment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GdcApplicationEnvironment Get(string name, Input<string> id, GdcApplicationEnvironmentState? state = null, CustomResourceOptions? options = null)
        {
            return new GdcApplicationEnvironment(name, id, state, options);
        }
    }

    public sealed class GdcApplicationEnvironmentArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The id of the application environment
        /// </summary>
        [Input("applicationEnvironmentId")]
        public Input<string>? ApplicationEnvironmentId { get; set; }

        /// <summary>
        /// User-provided human-readable name to be used in user interfaces.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the application environment
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The id of the service instance to which this application environment belongs.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("serviceinstance", required: true)]
        public Input<string> Serviceinstance { get; set; } = null!;

        /// <summary>
        /// Represents the SparkApplicationEnvironmentConfig.
        /// Structure is documented below.
        /// </summary>
        [Input("sparkApplicationEnvironmentConfig")]
        public Input<Inputs.GdcApplicationEnvironmentSparkApplicationEnvironmentConfigArgs>? SparkApplicationEnvironmentConfig { get; set; }

        public GdcApplicationEnvironmentArgs()
        {
        }
        public static new GdcApplicationEnvironmentArgs Empty => new GdcApplicationEnvironmentArgs();
    }

    public sealed class GdcApplicationEnvironmentState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The id of the application environment
        /// </summary>
        [Input("applicationEnvironmentId")]
        public Input<string>? ApplicationEnvironmentId { get; set; }

        /// <summary>
        /// The timestamp when the resource was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// User-provided human-readable name to be used in user interfaces.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the application environment
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier. The name of the application environment. Format: projects/{project}/locations/{location}/serviceInstances/{service_instance}/applicationEnvironments/{application_environment_id}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The id of the service instance to which this application environment belongs.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("serviceinstance")]
        public Input<string>? Serviceinstance { get; set; }

        /// <summary>
        /// Represents the SparkApplicationEnvironmentConfig.
        /// Structure is documented below.
        /// </summary>
        [Input("sparkApplicationEnvironmentConfig")]
        public Input<Inputs.GdcApplicationEnvironmentSparkApplicationEnvironmentConfigGetArgs>? SparkApplicationEnvironmentConfig { get; set; }

        /// <summary>
        /// System generated unique identifier for this application environment, formatted as UUID4.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The timestamp when the resource was most recently updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public GdcApplicationEnvironmentState()
        {
        }
        public static new GdcApplicationEnvironmentState Empty => new GdcApplicationEnvironmentState();
    }
}
