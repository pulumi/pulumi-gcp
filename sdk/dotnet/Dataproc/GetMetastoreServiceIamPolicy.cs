// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataproc
{
    public static class GetMetastoreServiceIamPolicy
    {
        /// <summary>
        /// Retrieves the current IAM policy data for service
        /// 
        /// 
        /// 
        /// ## example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Dataproc.GetMetastoreServiceIamPolicy.Invoke(new()
        ///     {
        ///         Project = google_dataproc_metastore_service.Default.Project,
        ///         Location = google_dataproc_metastore_service.Default.Location,
        ///         ServiceId = google_dataproc_metastore_service.Default.Service_id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMetastoreServiceIamPolicyResult> InvokeAsync(GetMetastoreServiceIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetastoreServiceIamPolicyResult>("gcp:dataproc/getMetastoreServiceIamPolicy:getMetastoreServiceIamPolicy", args ?? new GetMetastoreServiceIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for service
        /// 
        /// 
        /// 
        /// ## example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Dataproc.GetMetastoreServiceIamPolicy.Invoke(new()
        ///     {
        ///         Project = google_dataproc_metastore_service.Default.Project,
        ///         Location = google_dataproc_metastore_service.Default.Location,
        ///         ServiceId = google_dataproc_metastore_service.Default.Service_id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMetastoreServiceIamPolicyResult> Invoke(GetMetastoreServiceIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetastoreServiceIamPolicyResult>("gcp:dataproc/getMetastoreServiceIamPolicy:getMetastoreServiceIamPolicy", args ?? new GetMetastoreServiceIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetastoreServiceIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location where the metastore service should reside.
        /// The default value is `global`.
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        [Input("serviceId", required: true)]
        public string ServiceId { get; set; } = null!;

        public GetMetastoreServiceIamPolicyArgs()
        {
        }
        public static new GetMetastoreServiceIamPolicyArgs Empty => new GetMetastoreServiceIamPolicyArgs();
    }

    public sealed class GetMetastoreServiceIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location where the metastore service should reside.
        /// The default value is `global`.
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public GetMetastoreServiceIamPolicyInvokeArgs()
        {
        }
        public static new GetMetastoreServiceIamPolicyInvokeArgs Empty => new GetMetastoreServiceIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetastoreServiceIamPolicyResult
    {
        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        /// <summary>
        /// (Required only by `gcp.dataproc.MetastoreServiceIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        public readonly string PolicyData;
        public readonly string Project;
        public readonly string ServiceId;

        [OutputConstructor]
        private GetMetastoreServiceIamPolicyResult(
            string etag,

            string id,

            string location,

            string policyData,

            string project,

            string serviceId)
        {
            Etag = etag;
            Id = id;
            Location = location;
            PolicyData = policyData;
            Project = project;
            ServiceId = serviceId;
        }
    }
}
