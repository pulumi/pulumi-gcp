// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataproc
{
    /// <summary>
    /// A managed metastore service that serves metadata queries.
    /// 
    /// To get more information about Service, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dataproc-metastore/docs/reference/rest/v1/projects.locations.services)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dataproc-metastore/docs/overview)
    /// 
    /// ## Example Usage
    /// ### Dataproc Metastore Service Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Dataproc.MetastoreService("default", new()
    ///     {
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "2.3.6",
    ///         },
    ///         Location = "us-central1",
    ///         MaintenanceWindow = new Gcp.Dataproc.Inputs.MetastoreServiceMaintenanceWindowArgs
    ///         {
    ///             DayOfWeek = "SUNDAY",
    ///             HourOfDay = 2,
    ///         },
    ///         Port = 9080,
    ///         ServiceId = "metastore-srv",
    ///         Tier = "DEVELOPER",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataproc Metastore Service Cmek Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var keyRing = new Gcp.Kms.KeyRing("keyRing", new()
    ///     {
    ///         Location = "us-central1",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var cryptoKey = new Gcp.Kms.CryptoKey("cryptoKey", new()
    ///     {
    ///         KeyRing = keyRing.Id,
    ///         Purpose = "ENCRYPT_DECRYPT",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var @default = new Gcp.Dataproc.MetastoreService("default", new()
    ///     {
    ///         ServiceId = "example-service",
    ///         Location = "us-central1",
    ///         EncryptionConfig = new Gcp.Dataproc.Inputs.MetastoreServiceEncryptionConfigArgs
    ///         {
    ///             KmsKey = cryptoKey.Id,
    ///         },
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "3.1.2",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataproc Metastore Service Private Service Connect
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net = new Gcp.Compute.Network("net", new()
    ///     {
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnet = new Gcp.Compute.Subnetwork("subnet", new()
    ///     {
    ///         Region = "us-central1",
    ///         Network = net.Id,
    ///         IpCidrRange = "10.0.0.0/22",
    ///         PrivateIpGoogleAccess = true,
    ///     });
    /// 
    ///     var @default = new Gcp.Dataproc.MetastoreService("default", new()
    ///     {
    ///         ServiceId = "metastore-srv",
    ///         Location = "us-central1",
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "3.1.2",
    ///         },
    ///         NetworkConfig = new Gcp.Dataproc.Inputs.MetastoreServiceNetworkConfigArgs
    ///         {
    ///             Consumers = new[]
    ///             {
    ///                 new Gcp.Dataproc.Inputs.MetastoreServiceNetworkConfigConsumerArgs
    ///                 {
    ///                     Subnetwork = subnet.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dataproc/metastoreService:MetastoreService default projects/{{project}}/locations/{{location}}/services/{{service_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dataproc/metastoreService:MetastoreService default {{project}}/{{location}}/{{service_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dataproc/metastoreService:MetastoreService default {{location}}/{{service_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:dataproc/metastoreService:MetastoreService")]
    public partial class MetastoreService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
        /// </summary>
        [Output("artifactGcsUri")]
        public Output<string> ArtifactGcsUri { get; private set; } = null!;

        /// <summary>
        /// The database type that the Metastore service stores its data.
        /// Default value is `MYSQL`.
        /// Possible values are `MYSQL` and `SPANNER`.
        /// </summary>
        [Output("databaseType")]
        public Output<string?> DatabaseType { get; private set; } = null!;

        /// <summary>
        /// Information used to configure the Dataproc Metastore service to encrypt
        /// customer data at rest.
        /// Structure is documented below.
        /// </summary>
        [Output("encryptionConfig")]
        public Output<Outputs.MetastoreServiceEncryptionConfig?> EncryptionConfig { get; private set; } = null!;

        /// <summary>
        /// -
        /// The URI of the endpoint used to access the metastore service.
        /// </summary>
        [Output("endpointUri")]
        public Output<string> EndpointUri { get; private set; } = null!;

        /// <summary>
        /// Configuration information specific to running Hive metastore software as the metastore service.
        /// Structure is documented below.
        /// </summary>
        [Output("hiveMetastoreConfig")]
        public Output<Outputs.MetastoreServiceHiveMetastoreConfig?> HiveMetastoreConfig { get; private set; } = null!;

        /// <summary>
        /// User-defined labels for the metastore service.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location where the metastore service should reside.
        /// The default value is `global`.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The one hour maintenance window of the metastore service.
        /// This specifies when the service can be restarted for maintenance purposes in UTC time.
        /// Maintenance window is not needed for services with the `SPANNER` database type.
        /// Structure is documented below.
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<Outputs.MetastoreServiceMaintenanceWindow?> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// The setting that defines how metastore metadata should be integrated with external services and systems.
        /// </summary>
        [Output("metadataIntegration")]
        public Output<Outputs.MetastoreServiceMetadataIntegration?> MetadataIntegration { get; private set; } = null!;

        /// <summary>
        /// The relative resource name of the metastore service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
        /// "projects/{projectNumber}/global/networks/{network_id}".
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// The configuration specifying the network settings for the Dataproc Metastore service.
        /// Structure is documented below.
        /// </summary>
        [Output("networkConfig")]
        public Output<Outputs.MetastoreServiceNetworkConfig?> NetworkConfig { get; private set; } = null!;

        /// <summary>
        /// The TCP port at which the metastore service is reached. Default: 9083.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The release channel of the service. If unspecified, defaults to `STABLE`.
        /// Default value is `STABLE`.
        /// Possible values are `CANARY` and `STABLE`.
        /// </summary>
        [Output("releaseChannel")]
        public Output<string?> ReleaseChannel { get; private set; } = null!;

        /// <summary>
        /// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
        /// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
        /// 3 and 63 characters.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// The current state of the metastore service.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Additional information about the current state of the metastore service, if available.
        /// </summary>
        [Output("stateMessage")]
        public Output<string> StateMessage { get; private set; } = null!;

        /// <summary>
        /// The tier of the service.
        /// Possible values are `DEVELOPER` and `ENTERPRISE`.
        /// </summary>
        [Output("tier")]
        public Output<string> Tier { get; private set; } = null!;

        /// <summary>
        /// The globally unique resource identifier of the metastore service.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a MetastoreService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetastoreService(string name, MetastoreServiceArgs args, CustomResourceOptions? options = null)
            : base("gcp:dataproc/metastoreService:MetastoreService", name, args ?? new MetastoreServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MetastoreService(string name, Input<string> id, MetastoreServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dataproc/metastoreService:MetastoreService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetastoreService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetastoreService Get(string name, Input<string> id, MetastoreServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new MetastoreService(name, id, state, options);
        }
    }

    public sealed class MetastoreServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The database type that the Metastore service stores its data.
        /// Default value is `MYSQL`.
        /// Possible values are `MYSQL` and `SPANNER`.
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        /// <summary>
        /// Information used to configure the Dataproc Metastore service to encrypt
        /// customer data at rest.
        /// Structure is documented below.
        /// </summary>
        [Input("encryptionConfig")]
        public Input<Inputs.MetastoreServiceEncryptionConfigArgs>? EncryptionConfig { get; set; }

        /// <summary>
        /// Configuration information specific to running Hive metastore software as the metastore service.
        /// Structure is documented below.
        /// </summary>
        [Input("hiveMetastoreConfig")]
        public Input<Inputs.MetastoreServiceHiveMetastoreConfigArgs>? HiveMetastoreConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the metastore service.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where the metastore service should reside.
        /// The default value is `global`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The one hour maintenance window of the metastore service.
        /// This specifies when the service can be restarted for maintenance purposes in UTC time.
        /// Maintenance window is not needed for services with the `SPANNER` database type.
        /// Structure is documented below.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.MetastoreServiceMaintenanceWindowArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// The setting that defines how metastore metadata should be integrated with external services and systems.
        /// </summary>
        [Input("metadataIntegration")]
        public Input<Inputs.MetastoreServiceMetadataIntegrationArgs>? MetadataIntegration { get; set; }

        /// <summary>
        /// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
        /// "projects/{projectNumber}/global/networks/{network_id}".
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The configuration specifying the network settings for the Dataproc Metastore service.
        /// Structure is documented below.
        /// </summary>
        [Input("networkConfig")]
        public Input<Inputs.MetastoreServiceNetworkConfigArgs>? NetworkConfig { get; set; }

        /// <summary>
        /// The TCP port at which the metastore service is reached. Default: 9083.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The release channel of the service. If unspecified, defaults to `STABLE`.
        /// Default value is `STABLE`.
        /// Possible values are `CANARY` and `STABLE`.
        /// </summary>
        [Input("releaseChannel")]
        public Input<string>? ReleaseChannel { get; set; }

        /// <summary>
        /// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
        /// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
        /// 3 and 63 characters.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        /// <summary>
        /// The tier of the service.
        /// Possible values are `DEVELOPER` and `ENTERPRISE`.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        public MetastoreServiceArgs()
        {
        }
        public static new MetastoreServiceArgs Empty => new MetastoreServiceArgs();
    }

    public sealed class MetastoreServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
        /// </summary>
        [Input("artifactGcsUri")]
        public Input<string>? ArtifactGcsUri { get; set; }

        /// <summary>
        /// The database type that the Metastore service stores its data.
        /// Default value is `MYSQL`.
        /// Possible values are `MYSQL` and `SPANNER`.
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        /// <summary>
        /// Information used to configure the Dataproc Metastore service to encrypt
        /// customer data at rest.
        /// Structure is documented below.
        /// </summary>
        [Input("encryptionConfig")]
        public Input<Inputs.MetastoreServiceEncryptionConfigGetArgs>? EncryptionConfig { get; set; }

        /// <summary>
        /// -
        /// The URI of the endpoint used to access the metastore service.
        /// </summary>
        [Input("endpointUri")]
        public Input<string>? EndpointUri { get; set; }

        /// <summary>
        /// Configuration information specific to running Hive metastore software as the metastore service.
        /// Structure is documented below.
        /// </summary>
        [Input("hiveMetastoreConfig")]
        public Input<Inputs.MetastoreServiceHiveMetastoreConfigGetArgs>? HiveMetastoreConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the metastore service.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where the metastore service should reside.
        /// The default value is `global`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The one hour maintenance window of the metastore service.
        /// This specifies when the service can be restarted for maintenance purposes in UTC time.
        /// Maintenance window is not needed for services with the `SPANNER` database type.
        /// Structure is documented below.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.MetastoreServiceMaintenanceWindowGetArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// The setting that defines how metastore metadata should be integrated with external services and systems.
        /// </summary>
        [Input("metadataIntegration")]
        public Input<Inputs.MetastoreServiceMetadataIntegrationGetArgs>? MetadataIntegration { get; set; }

        /// <summary>
        /// The relative resource name of the metastore service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
        /// "projects/{projectNumber}/global/networks/{network_id}".
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The configuration specifying the network settings for the Dataproc Metastore service.
        /// Structure is documented below.
        /// </summary>
        [Input("networkConfig")]
        public Input<Inputs.MetastoreServiceNetworkConfigGetArgs>? NetworkConfig { get; set; }

        /// <summary>
        /// The TCP port at which the metastore service is reached. Default: 9083.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The release channel of the service. If unspecified, defaults to `STABLE`.
        /// Default value is `STABLE`.
        /// Possible values are `CANARY` and `STABLE`.
        /// </summary>
        [Input("releaseChannel")]
        public Input<string>? ReleaseChannel { get; set; }

        /// <summary>
        /// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
        /// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
        /// 3 and 63 characters.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// The current state of the metastore service.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Additional information about the current state of the metastore service, if available.
        /// </summary>
        [Input("stateMessage")]
        public Input<string>? StateMessage { get; set; }

        /// <summary>
        /// The tier of the service.
        /// Possible values are `DEVELOPER` and `ENTERPRISE`.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// The globally unique resource identifier of the metastore service.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public MetastoreServiceState()
        {
        }
        public static new MetastoreServiceState Empty => new MetastoreServiceState();
    }
}
