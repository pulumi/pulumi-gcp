// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dataproc
{
    /// <summary>
    /// A managed metastore service that serves metadata queries.
    /// 
    /// To get more information about Service, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dataproc-metastore/docs/reference/rest/v1/projects.locations.services)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dataproc-metastore/docs/overview)
    /// 
    /// ## Example Usage
    /// 
    /// ### Dataproc Metastore Service Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Dataproc.MetastoreService("default", new()
    ///     {
    ///         ServiceId = "metastore-srv",
    ///         Location = "us-central1",
    ///         Port = 9080,
    ///         Tier = "DEVELOPER",
    ///         MaintenanceWindow = new Gcp.Dataproc.Inputs.MetastoreServiceMaintenanceWindowArgs
    ///         {
    ///             HourOfDay = 2,
    ///             DayOfWeek = "SUNDAY",
    ///         },
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "2.3.6",
    ///         },
    ///         Labels = 
    ///         {
    ///             { "env", "test" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataproc Metastore Service Cmek Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var keyRing = new Gcp.Kms.KeyRing("key_ring", new()
    ///     {
    ///         Name = "example-keyring",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var cryptoKey = new Gcp.Kms.CryptoKey("crypto_key", new()
    ///     {
    ///         Name = "example-key",
    ///         KeyRing = keyRing.Id,
    ///         Purpose = "ENCRYPT_DECRYPT",
    ///     });
    /// 
    ///     var @default = new Gcp.Dataproc.MetastoreService("default", new()
    ///     {
    ///         ServiceId = "example-service",
    ///         Location = "us-central1",
    ///         EncryptionConfig = new Gcp.Dataproc.Inputs.MetastoreServiceEncryptionConfigArgs
    ///         {
    ///             KmsKey = cryptoKey.Id,
    ///         },
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "3.1.2",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataproc Metastore Service Private Service Connect
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net = new Gcp.Compute.Network("net", new()
    ///     {
    ///         Name = "my-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnet = new Gcp.Compute.Subnetwork("subnet", new()
    ///     {
    ///         Name = "my-subnetwork",
    ///         Region = "us-central1",
    ///         Network = net.Id,
    ///         IpCidrRange = "10.0.0.0/22",
    ///         PrivateIpGoogleAccess = true,
    ///     });
    /// 
    ///     var @default = new Gcp.Dataproc.MetastoreService("default", new()
    ///     {
    ///         ServiceId = "metastore-srv",
    ///         Location = "us-central1",
    ///         Tier = "DEVELOPER",
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "3.1.2",
    ///         },
    ///         NetworkConfig = new Gcp.Dataproc.Inputs.MetastoreServiceNetworkConfigArgs
    ///         {
    ///             Consumers = new[]
    ///             {
    ///                 new Gcp.Dataproc.Inputs.MetastoreServiceNetworkConfigConsumerArgs
    ///                 {
    ///                     Subnetwork = subnet.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataproc Metastore Service Private Service Connect Custom Routes
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net = new Gcp.Compute.Network("net", new()
    ///     {
    ///         Name = "my-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnet = new Gcp.Compute.Subnetwork("subnet", new()
    ///     {
    ///         Name = "my-subnetwork",
    ///         Region = "us-central1",
    ///         Network = net.Id,
    ///         IpCidrRange = "10.0.0.0/22",
    ///         PrivateIpGoogleAccess = true,
    ///     });
    /// 
    ///     var @default = new Gcp.Dataproc.MetastoreService("default", new()
    ///     {
    ///         ServiceId = "metastore-srv",
    ///         Location = "us-central1",
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "3.1.2",
    ///         },
    ///         NetworkConfig = new Gcp.Dataproc.Inputs.MetastoreServiceNetworkConfigArgs
    ///         {
    ///             Consumers = new[]
    ///             {
    ///                 new Gcp.Dataproc.Inputs.MetastoreServiceNetworkConfigConsumerArgs
    ///                 {
    ///                     Subnetwork = subnet.Id,
    ///                 },
    ///             },
    ///             CustomRoutesEnabled = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataproc Metastore Service Dpms2
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dpms2 = new Gcp.Dataproc.MetastoreService("dpms2", new()
    ///     {
    ///         ServiceId = "ms-dpms2",
    ///         Location = "us-central1",
    ///         DatabaseType = "SPANNER",
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "3.1.2",
    ///         },
    ///         ScalingConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigArgs
    ///         {
    ///             InstanceSize = "EXTRA_SMALL",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataproc Metastore Service Dpms2 Scaling Factor
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dpms2ScalingFactor = new Gcp.Dataproc.MetastoreService("dpms2_scaling_factor", new()
    ///     {
    ///         ServiceId = "ms-dpms2sf",
    ///         Location = "us-central1",
    ///         DatabaseType = "SPANNER",
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "3.1.2",
    ///         },
    ///         ScalingConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigArgs
    ///         {
    ///             ScalingFactor = 2,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataproc Metastore Service Scheduled Backup
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = "backup",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var backup = new Gcp.Dataproc.MetastoreService("backup", new()
    ///     {
    ///         ServiceId = "backup",
    ///         Location = "us-central1",
    ///         Port = 9080,
    ///         Tier = "DEVELOPER",
    ///         MaintenanceWindow = new Gcp.Dataproc.Inputs.MetastoreServiceMaintenanceWindowArgs
    ///         {
    ///             HourOfDay = 2,
    ///             DayOfWeek = "SUNDAY",
    ///         },
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "2.3.6",
    ///         },
    ///         ScheduledBackup = new Gcp.Dataproc.Inputs.MetastoreServiceScheduledBackupArgs
    ///         {
    ///             Enabled = true,
    ///             CronSchedule = "0 0 * * *",
    ///             TimeZone = "UTC",
    ///             BackupLocation = bucket.Name.Apply(name =&gt; $"gs://{name}"),
    ///         },
    ///         Labels = 
    ///         {
    ///             { "env", "test" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataproc Metastore Service Autoscaling Max Scaling Factor
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testResource = new Gcp.Dataproc.MetastoreService("test_resource", new()
    ///     {
    ///         ServiceId = "test-service",
    ///         Location = "us-central1",
    ///         DatabaseType = "SPANNER",
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "3.1.2",
    ///         },
    ///         ScalingConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigArgs
    ///         {
    ///             AutoscalingConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigAutoscalingConfigArgs
    ///             {
    ///                 AutoscalingEnabled = true,
    ///                 LimitConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigAutoscalingConfigLimitConfigArgs
    ///                 {
    ///                     MaxScalingFactor = 1,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataproc Metastore Service Autoscaling Min And Max Scaling Factor
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testResource = new Gcp.Dataproc.MetastoreService("test_resource", new()
    ///     {
    ///         ServiceId = "test-service",
    ///         Location = "us-central1",
    ///         DatabaseType = "SPANNER",
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "3.1.2",
    ///         },
    ///         ScalingConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigArgs
    ///         {
    ///             AutoscalingConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigAutoscalingConfigArgs
    ///             {
    ///                 AutoscalingEnabled = true,
    ///                 LimitConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigAutoscalingConfigLimitConfigArgs
    ///                 {
    ///                     MinScalingFactor = 0.1,
    ///                     MaxScalingFactor = 1,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataproc Metastore Service Autoscaling Min Scaling Factor
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testResource = new Gcp.Dataproc.MetastoreService("test_resource", new()
    ///     {
    ///         ServiceId = "test-service",
    ///         Location = "us-central1",
    ///         DatabaseType = "SPANNER",
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "3.1.2",
    ///         },
    ///         ScalingConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigArgs
    ///         {
    ///             AutoscalingConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigAutoscalingConfigArgs
    ///             {
    ///                 AutoscalingEnabled = true,
    ///                 LimitConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigAutoscalingConfigLimitConfigArgs
    ///                 {
    ///                     MinScalingFactor = 0.1,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataproc Metastore Service Autoscaling No Limit Config
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testResource = new Gcp.Dataproc.MetastoreService("test_resource", new()
    ///     {
    ///         ServiceId = "test-service",
    ///         Location = "us-central1",
    ///         DatabaseType = "SPANNER",
    ///         HiveMetastoreConfig = new Gcp.Dataproc.Inputs.MetastoreServiceHiveMetastoreConfigArgs
    ///         {
    ///             Version = "3.1.2",
    ///         },
    ///         ScalingConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigArgs
    ///         {
    ///             AutoscalingConfig = new Gcp.Dataproc.Inputs.MetastoreServiceScalingConfigAutoscalingConfigArgs
    ///             {
    ///                 AutoscalingEnabled = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/services/{{service_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{service_id}}`
    /// 
    /// * `{{location}}/{{service_id}}`
    /// 
    /// When using the `pulumi import` command, Service can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataproc/metastoreService:MetastoreService default projects/{{project}}/locations/{{location}}/services/{{service_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataproc/metastoreService:MetastoreService default {{project}}/{{location}}/{{service_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataproc/metastoreService:MetastoreService default {{location}}/{{service_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:dataproc/metastoreService:MetastoreService")]
    public partial class MetastoreService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
        /// </summary>
        [Output("artifactGcsUri")]
        public Output<string> ArtifactGcsUri { get; private set; } = null!;

        /// <summary>
        /// The database type that the Metastore service stores its data.
        /// Default value is `MYSQL`.
        /// Possible values are: `MYSQL`, `SPANNER`.
        /// </summary>
        [Output("databaseType")]
        public Output<string?> DatabaseType { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Information used to configure the Dataproc Metastore service to encrypt
        /// customer data at rest.
        /// Structure is documented below.
        /// </summary>
        [Output("encryptionConfig")]
        public Output<Outputs.MetastoreServiceEncryptionConfig?> EncryptionConfig { get; private set; } = null!;

        /// <summary>
        /// The URI of the endpoint used to access the metastore service.
        /// </summary>
        [Output("endpointUri")]
        public Output<string> EndpointUri { get; private set; } = null!;

        /// <summary>
        /// Configuration information specific to running Hive metastore software as the metastore service.
        /// Structure is documented below.
        /// </summary>
        [Output("hiveMetastoreConfig")]
        public Output<Outputs.MetastoreServiceHiveMetastoreConfig?> HiveMetastoreConfig { get; private set; } = null!;

        /// <summary>
        /// User-defined labels for the metastore service.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location where the metastore service should reside.
        /// The default value is `global`.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The one hour maintenance window of the metastore service.
        /// This specifies when the service can be restarted for maintenance purposes in UTC time.
        /// Maintenance window is not needed for services with the `SPANNER` database type.
        /// Structure is documented below.
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<Outputs.MetastoreServiceMaintenanceWindow?> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// The setting that defines how metastore metadata should be integrated with external services and systems.
        /// Structure is documented below.
        /// </summary>
        [Output("metadataIntegration")]
        public Output<Outputs.MetastoreServiceMetadataIntegration?> MetadataIntegration { get; private set; } = null!;

        /// <summary>
        /// The relative resource name of the metastore service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
        /// "projects/{projectNumber}/global/networks/{network_id}".
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// The configuration specifying the network settings for the Dataproc Metastore service.
        /// Structure is documented below.
        /// </summary>
        [Output("networkConfig")]
        public Output<Outputs.MetastoreServiceNetworkConfig?> NetworkConfig { get; private set; } = null!;

        /// <summary>
        /// The TCP port at which the metastore service is reached. Default: 9083.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The release channel of the service. If unspecified, defaults to `STABLE`.
        /// Default value is `STABLE`.
        /// Possible values are: `CANARY`, `STABLE`.
        /// </summary>
        [Output("releaseChannel")]
        public Output<string?> ReleaseChannel { get; private set; } = null!;

        /// <summary>
        /// Represents the scaling configuration of a metastore service.
        /// Structure is documented below.
        /// </summary>
        [Output("scalingConfig")]
        public Output<Outputs.MetastoreServiceScalingConfig?> ScalingConfig { get; private set; } = null!;

        /// <summary>
        /// The configuration of scheduled backup for the metastore service.
        /// Structure is documented below.
        /// </summary>
        [Output("scheduledBackup")]
        public Output<Outputs.MetastoreServiceScheduledBackup?> ScheduledBackup { get; private set; } = null!;

        /// <summary>
        /// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
        /// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
        /// 3 and 63 characters.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// The current state of the metastore service.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Additional information about the current state of the metastore service, if available.
        /// </summary>
        [Output("stateMessage")]
        public Output<string> StateMessage { get; private set; } = null!;

        /// <summary>
        /// The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
        /// Structure is documented below.
        /// </summary>
        [Output("telemetryConfig")]
        public Output<Outputs.MetastoreServiceTelemetryConfig> TelemetryConfig { get; private set; } = null!;

        /// <summary>
        /// The tier of the service.
        /// Possible values are: `DEVELOPER`, `ENTERPRISE`.
        /// </summary>
        [Output("tier")]
        public Output<string> Tier { get; private set; } = null!;

        /// <summary>
        /// The globally unique resource identifier of the metastore service.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a MetastoreService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetastoreService(string name, MetastoreServiceArgs args, CustomResourceOptions? options = null)
            : base("gcp:dataproc/metastoreService:MetastoreService", name, args ?? new MetastoreServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MetastoreService(string name, Input<string> id, MetastoreServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dataproc/metastoreService:MetastoreService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetastoreService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetastoreService Get(string name, Input<string> id, MetastoreServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new MetastoreService(name, id, state, options);
        }
    }

    public sealed class MetastoreServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The database type that the Metastore service stores its data.
        /// Default value is `MYSQL`.
        /// Possible values are: `MYSQL`, `SPANNER`.
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        /// <summary>
        /// Information used to configure the Dataproc Metastore service to encrypt
        /// customer data at rest.
        /// Structure is documented below.
        /// </summary>
        [Input("encryptionConfig")]
        public Input<Inputs.MetastoreServiceEncryptionConfigArgs>? EncryptionConfig { get; set; }

        /// <summary>
        /// Configuration information specific to running Hive metastore software as the metastore service.
        /// Structure is documented below.
        /// </summary>
        [Input("hiveMetastoreConfig")]
        public Input<Inputs.MetastoreServiceHiveMetastoreConfigArgs>? HiveMetastoreConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the metastore service.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where the metastore service should reside.
        /// The default value is `global`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The one hour maintenance window of the metastore service.
        /// This specifies when the service can be restarted for maintenance purposes in UTC time.
        /// Maintenance window is not needed for services with the `SPANNER` database type.
        /// Structure is documented below.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.MetastoreServiceMaintenanceWindowArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// The setting that defines how metastore metadata should be integrated with external services and systems.
        /// Structure is documented below.
        /// </summary>
        [Input("metadataIntegration")]
        public Input<Inputs.MetastoreServiceMetadataIntegrationArgs>? MetadataIntegration { get; set; }

        /// <summary>
        /// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
        /// "projects/{projectNumber}/global/networks/{network_id}".
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The configuration specifying the network settings for the Dataproc Metastore service.
        /// Structure is documented below.
        /// </summary>
        [Input("networkConfig")]
        public Input<Inputs.MetastoreServiceNetworkConfigArgs>? NetworkConfig { get; set; }

        /// <summary>
        /// The TCP port at which the metastore service is reached. Default: 9083.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The release channel of the service. If unspecified, defaults to `STABLE`.
        /// Default value is `STABLE`.
        /// Possible values are: `CANARY`, `STABLE`.
        /// </summary>
        [Input("releaseChannel")]
        public Input<string>? ReleaseChannel { get; set; }

        /// <summary>
        /// Represents the scaling configuration of a metastore service.
        /// Structure is documented below.
        /// </summary>
        [Input("scalingConfig")]
        public Input<Inputs.MetastoreServiceScalingConfigArgs>? ScalingConfig { get; set; }

        /// <summary>
        /// The configuration of scheduled backup for the metastore service.
        /// Structure is documented below.
        /// </summary>
        [Input("scheduledBackup")]
        public Input<Inputs.MetastoreServiceScheduledBackupArgs>? ScheduledBackup { get; set; }

        /// <summary>
        /// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
        /// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
        /// 3 and 63 characters.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        /// <summary>
        /// The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
        /// Structure is documented below.
        /// </summary>
        [Input("telemetryConfig")]
        public Input<Inputs.MetastoreServiceTelemetryConfigArgs>? TelemetryConfig { get; set; }

        /// <summary>
        /// The tier of the service.
        /// Possible values are: `DEVELOPER`, `ENTERPRISE`.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        public MetastoreServiceArgs()
        {
        }
        public static new MetastoreServiceArgs Empty => new MetastoreServiceArgs();
    }

    public sealed class MetastoreServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
        /// </summary>
        [Input("artifactGcsUri")]
        public Input<string>? ArtifactGcsUri { get; set; }

        /// <summary>
        /// The database type that the Metastore service stores its data.
        /// Default value is `MYSQL`.
        /// Possible values are: `MYSQL`, `SPANNER`.
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Information used to configure the Dataproc Metastore service to encrypt
        /// customer data at rest.
        /// Structure is documented below.
        /// </summary>
        [Input("encryptionConfig")]
        public Input<Inputs.MetastoreServiceEncryptionConfigGetArgs>? EncryptionConfig { get; set; }

        /// <summary>
        /// The URI of the endpoint used to access the metastore service.
        /// </summary>
        [Input("endpointUri")]
        public Input<string>? EndpointUri { get; set; }

        /// <summary>
        /// Configuration information specific to running Hive metastore software as the metastore service.
        /// Structure is documented below.
        /// </summary>
        [Input("hiveMetastoreConfig")]
        public Input<Inputs.MetastoreServiceHiveMetastoreConfigGetArgs>? HiveMetastoreConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the metastore service.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where the metastore service should reside.
        /// The default value is `global`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The one hour maintenance window of the metastore service.
        /// This specifies when the service can be restarted for maintenance purposes in UTC time.
        /// Maintenance window is not needed for services with the `SPANNER` database type.
        /// Structure is documented below.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.MetastoreServiceMaintenanceWindowGetArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// The setting that defines how metastore metadata should be integrated with external services and systems.
        /// Structure is documented below.
        /// </summary>
        [Input("metadataIntegration")]
        public Input<Inputs.MetastoreServiceMetadataIntegrationGetArgs>? MetadataIntegration { get; set; }

        /// <summary>
        /// The relative resource name of the metastore service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
        /// "projects/{projectNumber}/global/networks/{network_id}".
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The configuration specifying the network settings for the Dataproc Metastore service.
        /// Structure is documented below.
        /// </summary>
        [Input("networkConfig")]
        public Input<Inputs.MetastoreServiceNetworkConfigGetArgs>? NetworkConfig { get; set; }

        /// <summary>
        /// The TCP port at which the metastore service is reached. Default: 9083.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The release channel of the service. If unspecified, defaults to `STABLE`.
        /// Default value is `STABLE`.
        /// Possible values are: `CANARY`, `STABLE`.
        /// </summary>
        [Input("releaseChannel")]
        public Input<string>? ReleaseChannel { get; set; }

        /// <summary>
        /// Represents the scaling configuration of a metastore service.
        /// Structure is documented below.
        /// </summary>
        [Input("scalingConfig")]
        public Input<Inputs.MetastoreServiceScalingConfigGetArgs>? ScalingConfig { get; set; }

        /// <summary>
        /// The configuration of scheduled backup for the metastore service.
        /// Structure is documented below.
        /// </summary>
        [Input("scheduledBackup")]
        public Input<Inputs.MetastoreServiceScheduledBackupGetArgs>? ScheduledBackup { get; set; }

        /// <summary>
        /// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
        /// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
        /// 3 and 63 characters.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// The current state of the metastore service.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Additional information about the current state of the metastore service, if available.
        /// </summary>
        [Input("stateMessage")]
        public Input<string>? StateMessage { get; set; }

        /// <summary>
        /// The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
        /// Structure is documented below.
        /// </summary>
        [Input("telemetryConfig")]
        public Input<Inputs.MetastoreServiceTelemetryConfigGetArgs>? TelemetryConfig { get; set; }

        /// <summary>
        /// The tier of the service.
        /// Possible values are: `DEVELOPER`, `ENTERPRISE`.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// The globally unique resource identifier of the metastore service.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public MetastoreServiceState()
        {
        }
        public static new MetastoreServiceState Empty => new MetastoreServiceState();
    }
}
