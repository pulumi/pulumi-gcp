// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.PrivilegedAccessManager
{
    /// <summary>
    /// An Entitlement defines the eligibility of a set of users to obtain a predefined access for some time possibly after going through an approval workflow.
    /// 
    /// To get more information about Entitlement, see:
    /// 
    /// * [API documentation](https://cloud.google.com/iam/docs/reference/pam/rest)
    /// * How-to Guides
    ///     * [How to create an Entitlement](https://cloud.google.com/iam/docs/pam-create-entitlements)
    ///     * [Official Documentation](https://cloud.google.com/iam/docs/pam-overview)
    /// 
    /// ## Example Usage
    /// 
    /// ### Privileged Access Manager Entitlement Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var tfentitlement = new Gcp.PrivilegedAccessManager.Entitlement("tfentitlement", new()
    ///     {
    ///         EntitlementId = "example-entitlement",
    ///         Location = "global",
    ///         MaxRequestDuration = "43200s",
    ///         Parent = "projects/my-project-name",
    ///         RequesterJustificationConfig = new Gcp.PrivilegedAccessManager.Inputs.EntitlementRequesterJustificationConfigArgs
    ///         {
    ///             Unstructured = null,
    ///         },
    ///         EligibleUsers = new[]
    ///         {
    ///             new Gcp.PrivilegedAccessManager.Inputs.EntitlementEligibleUserArgs
    ///             {
    ///                 Principals = new[]
    ///                 {
    ///                     "group:test@google.com",
    ///                 },
    ///             },
    ///         },
    ///         PrivilegedAccess = new Gcp.PrivilegedAccessManager.Inputs.EntitlementPrivilegedAccessArgs
    ///         {
    ///             GcpIamAccess = new Gcp.PrivilegedAccessManager.Inputs.EntitlementPrivilegedAccessGcpIamAccessArgs
    ///             {
    ///                 RoleBindings = new[]
    ///                 {
    ///                     new Gcp.PrivilegedAccessManager.Inputs.EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs
    ///                     {
    ///                         Role = "roles/storage.admin",
    ///                         ConditionExpression = "request.time &lt; timestamp(\"2024-04-23T18:30:00.000Z\")",
    ///                     },
    ///                 },
    ///                 Resource = "//cloudresourcemanager.googleapis.com/projects/my-project-name",
    ///                 ResourceType = "cloudresourcemanager.googleapis.com/Project",
    ///             },
    ///         },
    ///         AdditionalNotificationTargets = new Gcp.PrivilegedAccessManager.Inputs.EntitlementAdditionalNotificationTargetsArgs
    ///         {
    ///             AdminEmailRecipients = new[]
    ///             {
    ///                 "user@example.com",
    ///             },
    ///             RequesterEmailRecipients = new[]
    ///             {
    ///                 "user@example.com",
    ///             },
    ///         },
    ///         ApprovalWorkflow = new Gcp.PrivilegedAccessManager.Inputs.EntitlementApprovalWorkflowArgs
    ///         {
    ///             ManualApprovals = new Gcp.PrivilegedAccessManager.Inputs.EntitlementApprovalWorkflowManualApprovalsArgs
    ///             {
    ///                 RequireApproverJustification = true,
    ///                 Steps = new[]
    ///                 {
    ///                     new Gcp.PrivilegedAccessManager.Inputs.EntitlementApprovalWorkflowManualApprovalsStepArgs
    ///                     {
    ///                         ApprovalsNeeded = 1,
    ///                         ApproverEmailRecipients = new[]
    ///                         {
    ///                             "user@example.com",
    ///                         },
    ///                         Approvers = new Gcp.PrivilegedAccessManager.Inputs.EntitlementApprovalWorkflowManualApprovalsStepApproversArgs
    ///                         {
    ///                             Principals = new[]
    ///                             {
    ///                                 "group:test@google.com",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Entitlement can be imported using any of these accepted formats:
    /// 
    /// * `{{parent}}/locations/{{location}}/entitlements/{{entitlement_id}}`
    /// 
    /// When using the `pulumi import` command, Entitlement can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:privilegedaccessmanager/entitlement:entitlement default {{parent}}/locations/{{location}}/entitlements/{{entitlement_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:privilegedaccessmanager/entitlement:entitlement")]
    public partial class Entitlement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AdditionalNotificationTargets includes email addresses to be notified.
        /// </summary>
        [Output("additionalNotificationTargets")]
        public Output<Outputs.EntitlementAdditionalNotificationTargets?> AdditionalNotificationTargets { get; private set; } = null!;

        /// <summary>
        /// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
        /// Different types of approval workflows that can be used to gate privileged access granting.
        /// </summary>
        [Output("approvalWorkflow")]
        public Output<Outputs.EntitlementApprovalWorkflow?> ApprovalWorkflow { get; private set; } = null!;

        /// <summary>
        /// Output only. Create time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Who can create Grants using Entitlement. This list should contain at most one entry
        /// Structure is documented below.
        /// </summary>
        [Output("eligibleUsers")]
        public Output<ImmutableArray<Outputs.EntitlementEligibleUser>> EligibleUsers { get; private set; } = null!;

        /// <summary>
        /// The ID to use for this Entitlement. This will become the last part of the resource name.
        /// This value should be 4-63 characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z].
        /// This value should be unique among all other Entitlements under the specified `parent`.
        /// </summary>
        [Output("entitlementId")]
        public Output<string> EntitlementId { get; private set; } = null!;

        /// <summary>
        /// For Resource freshness validation (https://google.aip.dev/154)
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The region of the Entitlement resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The maximum amount of time for which access would be granted for a request.
        /// A requester can choose to ask for access for less than this duration but never more.
        /// Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours = "7200s", 45 minutes = "2700s"
        /// </summary>
        [Output("maxRequestDuration")]
        public Output<string> MaxRequestDuration { get; private set; } = null!;

        /// <summary>
        /// Output Only. The entitlement's name follows a hierarchical structure, comprising the organization, folder, or project, alongside the region and a unique entitlement ID.
        /// Formats: organizations/{organization-number}/locations/{region}/entitlements/{entitlement-id}, folders/{folder-number}/locations/{region}/entitlements/{entitlement-id}, and projects/{project-id|project-number}/locations/{region}/entitlements/{entitlement-id}.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// Privileged access that this service can be used to gate.
        /// Structure is documented below.
        /// </summary>
        [Output("privilegedAccess")]
        public Output<Outputs.EntitlementPrivilegedAccess> PrivilegedAccess { get; private set; } = null!;

        /// <summary>
        /// Defines the ways in which a requester should provide the justification while requesting for access.
        /// Structure is documented below.
        /// </summary>
        [Output("requesterJustificationConfig")]
        public Output<Outputs.EntitlementRequesterJustificationConfig> RequesterJustificationConfig { get; private set; } = null!;

        /// <summary>
        /// Output only. The current state of the Entitlement.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Output only. Update time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Entitlement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Entitlement(string name, EntitlementArgs args, CustomResourceOptions? options = null)
            : base("gcp:privilegedaccessmanager/entitlement:entitlement", name, args ?? new EntitlementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Entitlement(string name, Input<string> id, EntitlementState? state = null, CustomResourceOptions? options = null)
            : base("gcp:privilegedaccessmanager/entitlement:entitlement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Entitlement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Entitlement Get(string name, Input<string> id, EntitlementState? state = null, CustomResourceOptions? options = null)
        {
            return new Entitlement(name, id, state, options);
        }
    }

    public sealed class EntitlementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AdditionalNotificationTargets includes email addresses to be notified.
        /// </summary>
        [Input("additionalNotificationTargets")]
        public Input<Inputs.EntitlementAdditionalNotificationTargetsArgs>? AdditionalNotificationTargets { get; set; }

        /// <summary>
        /// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
        /// Different types of approval workflows that can be used to gate privileged access granting.
        /// </summary>
        [Input("approvalWorkflow")]
        public Input<Inputs.EntitlementApprovalWorkflowArgs>? ApprovalWorkflow { get; set; }

        [Input("eligibleUsers", required: true)]
        private InputList<Inputs.EntitlementEligibleUserArgs>? _eligibleUsers;

        /// <summary>
        /// Who can create Grants using Entitlement. This list should contain at most one entry
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.EntitlementEligibleUserArgs> EligibleUsers
        {
            get => _eligibleUsers ?? (_eligibleUsers = new InputList<Inputs.EntitlementEligibleUserArgs>());
            set => _eligibleUsers = value;
        }

        /// <summary>
        /// The ID to use for this Entitlement. This will become the last part of the resource name.
        /// This value should be 4-63 characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z].
        /// This value should be unique among all other Entitlements under the specified `parent`.
        /// </summary>
        [Input("entitlementId", required: true)]
        public Input<string> EntitlementId { get; set; } = null!;

        /// <summary>
        /// The region of the Entitlement resource.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The maximum amount of time for which access would be granted for a request.
        /// A requester can choose to ask for access for less than this duration but never more.
        /// Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours = "7200s", 45 minutes = "2700s"
        /// </summary>
        [Input("maxRequestDuration", required: true)]
        public Input<string> MaxRequestDuration { get; set; } = null!;

        /// <summary>
        /// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        /// <summary>
        /// Privileged access that this service can be used to gate.
        /// Structure is documented below.
        /// </summary>
        [Input("privilegedAccess", required: true)]
        public Input<Inputs.EntitlementPrivilegedAccessArgs> PrivilegedAccess { get; set; } = null!;

        /// <summary>
        /// Defines the ways in which a requester should provide the justification while requesting for access.
        /// Structure is documented below.
        /// </summary>
        [Input("requesterJustificationConfig", required: true)]
        public Input<Inputs.EntitlementRequesterJustificationConfigArgs> RequesterJustificationConfig { get; set; } = null!;

        public EntitlementArgs()
        {
        }
        public static new EntitlementArgs Empty => new EntitlementArgs();
    }

    public sealed class EntitlementState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AdditionalNotificationTargets includes email addresses to be notified.
        /// </summary>
        [Input("additionalNotificationTargets")]
        public Input<Inputs.EntitlementAdditionalNotificationTargetsGetArgs>? AdditionalNotificationTargets { get; set; }

        /// <summary>
        /// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
        /// Different types of approval workflows that can be used to gate privileged access granting.
        /// </summary>
        [Input("approvalWorkflow")]
        public Input<Inputs.EntitlementApprovalWorkflowGetArgs>? ApprovalWorkflow { get; set; }

        /// <summary>
        /// Output only. Create time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("eligibleUsers")]
        private InputList<Inputs.EntitlementEligibleUserGetArgs>? _eligibleUsers;

        /// <summary>
        /// Who can create Grants using Entitlement. This list should contain at most one entry
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.EntitlementEligibleUserGetArgs> EligibleUsers
        {
            get => _eligibleUsers ?? (_eligibleUsers = new InputList<Inputs.EntitlementEligibleUserGetArgs>());
            set => _eligibleUsers = value;
        }

        /// <summary>
        /// The ID to use for this Entitlement. This will become the last part of the resource name.
        /// This value should be 4-63 characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z].
        /// This value should be unique among all other Entitlements under the specified `parent`.
        /// </summary>
        [Input("entitlementId")]
        public Input<string>? EntitlementId { get; set; }

        /// <summary>
        /// For Resource freshness validation (https://google.aip.dev/154)
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The region of the Entitlement resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The maximum amount of time for which access would be granted for a request.
        /// A requester can choose to ask for access for less than this duration but never more.
        /// Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours = "7200s", 45 minutes = "2700s"
        /// </summary>
        [Input("maxRequestDuration")]
        public Input<string>? MaxRequestDuration { get; set; }

        /// <summary>
        /// Output Only. The entitlement's name follows a hierarchical structure, comprising the organization, folder, or project, alongside the region and a unique entitlement ID.
        /// Formats: organizations/{organization-number}/locations/{region}/entitlements/{entitlement-id}, folders/{folder-number}/locations/{region}/entitlements/{entitlement-id}, and projects/{project-id|project-number}/locations/{region}/entitlements/{entitlement-id}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// Privileged access that this service can be used to gate.
        /// Structure is documented below.
        /// </summary>
        [Input("privilegedAccess")]
        public Input<Inputs.EntitlementPrivilegedAccessGetArgs>? PrivilegedAccess { get; set; }

        /// <summary>
        /// Defines the ways in which a requester should provide the justification while requesting for access.
        /// Structure is documented below.
        /// </summary>
        [Input("requesterJustificationConfig")]
        public Input<Inputs.EntitlementRequesterJustificationConfigGetArgs>? RequesterJustificationConfig { get; set; }

        /// <summary>
        /// Output only. The current state of the Entitlement.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Output only. Update time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public EntitlementState()
        {
        }
        public static new EntitlementState Empty => new EntitlementState();
    }
}
