// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.PubSub
{
    /// <summary>
    /// A named resource to which messages are sent by publishers.
    /// 
    /// To get more information about Topic, see:
    /// 
    /// * [API documentation](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics)
    /// * How-to Guides
    ///     * [Managing Topics](https://cloud.google.com/pubsub/docs/admin#managing_topics)
    /// 
    /// &gt; **Note:** You can retrieve the email of the Google Managed Pub/Sub Service Account used for forwarding
    /// by using the `gcp.projects.ServiceIdentity` resource.
    /// 
    /// ## Example Usage
    /// 
    /// ### Pubsub Topic Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         MessageRetentionDuration = "86600s",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pubsub Topic Cmek
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var keyRing = new Gcp.Kms.KeyRing("key_ring", new()
    ///     {
    ///         Name = "example-keyring",
    ///         Location = "global",
    ///     });
    /// 
    ///     var cryptoKey = new Gcp.Kms.CryptoKey("crypto_key", new()
    ///     {
    ///         Name = "example-key",
    ///         KeyRing = keyRing.Id,
    ///     });
    /// 
    ///     var example = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///         KmsKeyName = cryptoKey.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pubsub Topic Geo Restricted
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///         MessageStoragePolicy = new Gcp.PubSub.Inputs.TopicMessageStoragePolicyArgs
    ///         {
    ///             AllowedPersistenceRegions = new[]
    ///             {
    ///                 "europe-west3",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pubsub Topic Schema Settings
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.PubSub.Schema("example", new()
    ///     {
    ///         Name = "example",
    ///         Type = "AVRO",
    ///         Definition = @"{
    ///   ""type"" : ""record"",
    ///   ""name"" : ""Avro"",
    ///   ""fields"" : [
    ///     {
    ///       ""name"" : ""StringField"",
    ///       ""type"" : ""string""
    ///     },
    ///     {
    ///       ""name"" : ""IntField"",
    ///       ""type"" : ""int""
    ///     }
    ///   ]
    /// }
    /// ",
    ///     });
    /// 
    ///     var exampleTopic = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///         SchemaSettings = new Gcp.PubSub.Inputs.TopicSchemaSettingsArgs
    ///         {
    ///             Schema = "projects/my-project-name/schemas/example",
    ///             Encoding = "JSON",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             example,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pubsub Topic Ingestion Kinesis
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///         IngestionDataSourceSettings = new Gcp.PubSub.Inputs.TopicIngestionDataSourceSettingsArgs
    ///         {
    ///             AwsKinesis = new Gcp.PubSub.Inputs.TopicIngestionDataSourceSettingsAwsKinesisArgs
    ///             {
    ///                 StreamArn = "arn:aws:kinesis:us-west-2:111111111111:stream/fake-stream-name",
    ///                 ConsumerArn = "arn:aws:kinesis:us-west-2:111111111111:stream/fake-stream-name/consumer/consumer-1:1111111111",
    ///                 AwsRoleArn = "arn:aws:iam::111111111111:role/fake-role-name",
    ///                 GcpServiceAccount = "fake-service-account@fake-gcp-project.iam.gserviceaccount.com",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pubsub Topic Ingestion Cloud Storage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///         IngestionDataSourceSettings = new Gcp.PubSub.Inputs.TopicIngestionDataSourceSettingsArgs
    ///         {
    ///             CloudStorage = new Gcp.PubSub.Inputs.TopicIngestionDataSourceSettingsCloudStorageArgs
    ///             {
    ///                 Bucket = "test-bucket",
    ///                 TextFormat = new Gcp.PubSub.Inputs.TopicIngestionDataSourceSettingsCloudStorageTextFormatArgs
    ///                 {
    ///                     Delimiter = " ",
    ///                 },
    ///                 MinimumObjectCreateTime = "2024-01-01T00:00:00Z",
    ///                 MatchGlob = "foo/**",
    ///             },
    ///             PlatformLogsSettings = new Gcp.PubSub.Inputs.TopicIngestionDataSourceSettingsPlatformLogsSettingsArgs
    ///             {
    ///                 Severity = "WARNING",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Topic can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/topics/{{name}}`
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, Topic can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:pubsub/topic:Topic default projects/{{project}}/topics/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:pubsub/topic:Topic default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:pubsub/topic:Topic default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:pubsub/topic:Topic")]
    public partial class Topic : global::Pulumi.CustomResource
    {
        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Settings for ingestion from a data source into this topic.
        /// Structure is documented below.
        /// </summary>
        [Output("ingestionDataSourceSettings")]
        public Output<Outputs.TopicIngestionDataSourceSettings?> IngestionDataSourceSettings { get; private set; } = null!;

        /// <summary>
        /// The resource name of the Cloud KMS CryptoKey to be used to protect access
        /// to messages published on this topic. Your project's PubSub service account
        /// (`service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com`) must have
        /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
        /// The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`
        /// </summary>
        [Output("kmsKeyName")]
        public Output<string?> KmsKeyName { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs to assign to this Topic.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Indicates the minimum duration to retain a message after it is published
        /// to the topic. If this field is set, messages published to the topic in
        /// the last messageRetentionDuration are always available to subscribers.
        /// For instance, it allows any attached subscription to seek to a timestamp
        /// that is up to messageRetentionDuration in the past. If this field is not
        /// set, message retention is controlled by settings on individual subscriptions.
        /// The rotation period has the format of a decimal number, followed by the
        /// letter `s` (seconds). Cannot be more than 31 days or less than 10 minutes.
        /// </summary>
        [Output("messageRetentionDuration")]
        public Output<string?> MessageRetentionDuration { get; private set; } = null!;

        /// <summary>
        /// Policy constraining the set of Google Cloud Platform regions where
        /// messages published to the topic may be stored. If not present, then no
        /// constraints are in effect.
        /// Structure is documented below.
        /// </summary>
        [Output("messageStoragePolicy")]
        public Output<Outputs.TopicMessageStoragePolicy> MessageStoragePolicy { get; private set; } = null!;

        /// <summary>
        /// Name of the topic.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Settings for validating messages published against a schema.
        /// Structure is documented below.
        /// </summary>
        [Output("schemaSettings")]
        public Output<Outputs.TopicSchemaSettings?> SchemaSettings { get; private set; } = null!;


        /// <summary>
        /// Create a Topic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Topic(string name, TopicArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:pubsub/topic:Topic", name, args ?? new TopicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Topic(string name, Input<string> id, TopicState? state = null, CustomResourceOptions? options = null)
            : base("gcp:pubsub/topic:Topic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Topic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Topic Get(string name, Input<string> id, TopicState? state = null, CustomResourceOptions? options = null)
        {
            return new Topic(name, id, state, options);
        }
    }

    public sealed class TopicArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Settings for ingestion from a data source into this topic.
        /// Structure is documented below.
        /// </summary>
        [Input("ingestionDataSourceSettings")]
        public Input<Inputs.TopicIngestionDataSourceSettingsArgs>? IngestionDataSourceSettings { get; set; }

        /// <summary>
        /// The resource name of the Cloud KMS CryptoKey to be used to protect access
        /// to messages published on this topic. Your project's PubSub service account
        /// (`service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com`) must have
        /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
        /// The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to this Topic.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Indicates the minimum duration to retain a message after it is published
        /// to the topic. If this field is set, messages published to the topic in
        /// the last messageRetentionDuration are always available to subscribers.
        /// For instance, it allows any attached subscription to seek to a timestamp
        /// that is up to messageRetentionDuration in the past. If this field is not
        /// set, message retention is controlled by settings on individual subscriptions.
        /// The rotation period has the format of a decimal number, followed by the
        /// letter `s` (seconds). Cannot be more than 31 days or less than 10 minutes.
        /// </summary>
        [Input("messageRetentionDuration")]
        public Input<string>? MessageRetentionDuration { get; set; }

        /// <summary>
        /// Policy constraining the set of Google Cloud Platform regions where
        /// messages published to the topic may be stored. If not present, then no
        /// constraints are in effect.
        /// Structure is documented below.
        /// </summary>
        [Input("messageStoragePolicy")]
        public Input<Inputs.TopicMessageStoragePolicyArgs>? MessageStoragePolicy { get; set; }

        /// <summary>
        /// Name of the topic.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Settings for validating messages published against a schema.
        /// Structure is documented below.
        /// </summary>
        [Input("schemaSettings")]
        public Input<Inputs.TopicSchemaSettingsArgs>? SchemaSettings { get; set; }

        public TopicArgs()
        {
        }
        public static new TopicArgs Empty => new TopicArgs();
    }

    public sealed class TopicState : global::Pulumi.ResourceArgs
    {
        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Settings for ingestion from a data source into this topic.
        /// Structure is documented below.
        /// </summary>
        [Input("ingestionDataSourceSettings")]
        public Input<Inputs.TopicIngestionDataSourceSettingsGetArgs>? IngestionDataSourceSettings { get; set; }

        /// <summary>
        /// The resource name of the Cloud KMS CryptoKey to be used to protect access
        /// to messages published on this topic. Your project's PubSub service account
        /// (`service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com`) must have
        /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
        /// The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to this Topic.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Indicates the minimum duration to retain a message after it is published
        /// to the topic. If this field is set, messages published to the topic in
        /// the last messageRetentionDuration are always available to subscribers.
        /// For instance, it allows any attached subscription to seek to a timestamp
        /// that is up to messageRetentionDuration in the past. If this field is not
        /// set, message retention is controlled by settings on individual subscriptions.
        /// The rotation period has the format of a decimal number, followed by the
        /// letter `s` (seconds). Cannot be more than 31 days or less than 10 minutes.
        /// </summary>
        [Input("messageRetentionDuration")]
        public Input<string>? MessageRetentionDuration { get; set; }

        /// <summary>
        /// Policy constraining the set of Google Cloud Platform regions where
        /// messages published to the topic may be stored. If not present, then no
        /// constraints are in effect.
        /// Structure is documented below.
        /// </summary>
        [Input("messageStoragePolicy")]
        public Input<Inputs.TopicMessageStoragePolicyGetArgs>? MessageStoragePolicy { get; set; }

        /// <summary>
        /// Name of the topic.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Settings for validating messages published against a schema.
        /// Structure is documented below.
        /// </summary>
        [Input("schemaSettings")]
        public Input<Inputs.TopicSchemaSettingsGetArgs>? SchemaSettings { get; set; }

        public TopicState()
        {
        }
        public static new TopicState Empty => new TopicState();
    }
}
