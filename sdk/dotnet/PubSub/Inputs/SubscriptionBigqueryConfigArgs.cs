// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.PubSub.Inputs
{

    public sealed class SubscriptionBigqueryConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When true and useTopicSchema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery.
        /// Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
        /// </summary>
        [Input("dropUnknownFields")]
        public Input<bool>? DropUnknownFields { get; set; }

        /// <summary>
        /// The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
        /// </summary>
        [Input("table", required: true)]
        public Input<string> Table { get; set; } = null!;

        /// <summary>
        /// When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
        /// </summary>
        [Input("useTopicSchema")]
        public Input<bool>? UseTopicSchema { get; set; }

        /// <summary>
        /// When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
        /// The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
        /// </summary>
        [Input("writeMetadata")]
        public Input<bool>? WriteMetadata { get; set; }

        public SubscriptionBigqueryConfigArgs()
        {
        }
        public static new SubscriptionBigqueryConfigArgs Empty => new SubscriptionBigqueryConfigArgs();
    }
}
