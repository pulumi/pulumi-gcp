// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.PubSub
{
    /// <summary>
    /// A schema is a format that messages must follow,
    /// creating a contract between publisher and subscriber that Pub/Sub will enforce.
    /// 
    /// To get more information about Schema, see:
    /// 
    /// * [API documentation](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas)
    /// * How-to Guides
    ///     * [Creating and managing schemas](https://cloud.google.com/pubsub/docs/schemas)
    /// 
    /// ## Example Usage
    /// ### Pubsub Schema Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Gcp.PubSub.Schema("example", new Gcp.PubSub.SchemaArgs
    ///         {
    ///             Definition = @"{
    ///   ""type"" : ""record"",
    ///   ""name"" : ""Avro"",
    ///   ""fields"" : [
    ///     {
    ///       ""name"" : ""StringField"",
    ///       ""type"" : ""string""
    ///     },
    ///     {
    ///       ""name"" : ""IntField"",
    ///       ""type"" : ""int""
    ///     }
    ///   ]
    /// }
    /// 
    /// ",
    ///             Type = "AVRO",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Pubsub Schema Protobuf
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleSchema = new Gcp.PubSub.Schema("exampleSchema", new Gcp.PubSub.SchemaArgs
    ///         {
    ///             Type = "PROTOCOL_BUFFER",
    ///             Definition = @"syntax = ""proto3"";
    /// message Results {
    /// string message_request = 1;
    /// string message_response = 2;
    /// string timestamp_request = 3;
    /// string timestamp_response = 4;
    /// }",
    ///         });
    ///         var exampleTopic = new Gcp.PubSub.Topic("exampleTopic", new Gcp.PubSub.TopicArgs
    ///         {
    ///             SchemaSettings = new Gcp.PubSub.Inputs.TopicSchemaSettingsArgs
    ///             {
    ///                 Schema = "projects/my-project-name/schemas/example",
    ///                 Encoding = "JSON",
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 exampleSchema,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Schema can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:pubsub/schema:Schema default projects/{{project}}/schemas/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:pubsub/schema:Schema default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:pubsub/schema:Schema default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:pubsub/schema:Schema")]
    public partial class Schema : Pulumi.CustomResource
    {
        /// <summary>
        /// The definition of the schema.
        /// This should contain a string representing the full definition of the schema
        /// that is a valid schema definition of the type specified in type.
        /// </summary>
        [Output("definition")]
        public Output<string?> Definition { get; private set; } = null!;

        /// <summary>
        /// The ID to use for the schema, which will become the final component of the schema's resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The type of the schema definition
        /// Default value is `TYPE_UNSPECIFIED`.
        /// Possible values are `TYPE_UNSPECIFIED`, `PROTOCOL_BUFFER`, and `AVRO`.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Schema resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Schema(string name, SchemaArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:pubsub/schema:Schema", name, args ?? new SchemaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Schema(string name, Input<string> id, SchemaState? state = null, CustomResourceOptions? options = null)
            : base("gcp:pubsub/schema:Schema", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Schema resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Schema Get(string name, Input<string> id, SchemaState? state = null, CustomResourceOptions? options = null)
        {
            return new Schema(name, id, state, options);
        }
    }

    public sealed class SchemaArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The definition of the schema.
        /// This should contain a string representing the full definition of the schema
        /// that is a valid schema definition of the type specified in type.
        /// </summary>
        [Input("definition")]
        public Input<string>? Definition { get; set; }

        /// <summary>
        /// The ID to use for the schema, which will become the final component of the schema's resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The type of the schema definition
        /// Default value is `TYPE_UNSPECIFIED`.
        /// Possible values are `TYPE_UNSPECIFIED`, `PROTOCOL_BUFFER`, and `AVRO`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SchemaArgs()
        {
        }
    }

    public sealed class SchemaState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The definition of the schema.
        /// This should contain a string representing the full definition of the schema
        /// that is a valid schema definition of the type specified in type.
        /// </summary>
        [Input("definition")]
        public Input<string>? Definition { get; set; }

        /// <summary>
        /// The ID to use for the schema, which will become the final component of the schema's resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The type of the schema definition
        /// Default value is `TYPE_UNSPECIFIED`.
        /// Possible values are `TYPE_UNSPECIFIED`, `PROTOCOL_BUFFER`, and `AVRO`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SchemaState()
        {
        }
    }
}
