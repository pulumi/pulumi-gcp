// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.PubSub
{
    /// <summary>
    /// A named resource representing the stream of messages from a single,
    /// specific topic, to be delivered to the subscribing application.
    /// 
    /// To get more information about Subscription, see:
    /// 
    /// * [API documentation](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions)
    /// * How-to Guides
    ///     * [Managing Subscriptions](https://cloud.google.com/pubsub/docs/admin#managing_subscriptions)
    /// 
    /// &gt; **Note:** You can retrieve the email of the Google Managed Pub/Sub Service Account used for forwarding
    /// by using the `gcp.projects.ServiceIdentity` resource.
    /// 
    /// ## Example Usage
    /// 
    /// ### Pubsub Subscription Push
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///     });
    /// 
    ///     var exampleSubscription = new Gcp.PubSub.Subscription("example", new()
    ///     {
    ///         Name = "example-subscription",
    ///         Topic = example.Id,
    ///         AckDeadlineSeconds = 20,
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         PushConfig = new Gcp.PubSub.Inputs.SubscriptionPushConfigArgs
    ///         {
    ///             PushEndpoint = "https://example.com/push",
    ///             Attributes = 
    ///             {
    ///                 { "x-goog-version", "v1" },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pubsub Subscription Pull
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///     });
    /// 
    ///     var exampleSubscription = new Gcp.PubSub.Subscription("example", new()
    ///     {
    ///         Name = "example-subscription",
    ///         Topic = example.Id,
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         MessageRetentionDuration = "1200s",
    ///         RetainAckedMessages = true,
    ///         AckDeadlineSeconds = 20,
    ///         ExpirationPolicy = new Gcp.PubSub.Inputs.SubscriptionExpirationPolicyArgs
    ///         {
    ///             Ttl = "300000.5s",
    ///         },
    ///         RetryPolicy = new Gcp.PubSub.Inputs.SubscriptionRetryPolicyArgs
    ///         {
    ///             MinimumBackoff = "10s",
    ///         },
    ///         EnableMessageOrdering = false,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pubsub Subscription Pull Filter
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///     });
    /// 
    ///     var exampleSubscription = new Gcp.PubSub.Subscription("example", new()
    ///     {
    ///         Name = "example-subscription",
    ///         Topic = example.Id,
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Filter = @"    attributes.foo = ""foo""
    ///     AND attributes.bar = ""bar""
    /// ",
    ///         AckDeadlineSeconds = 20,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pubsub Subscription Dead Letter
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///     });
    /// 
    ///     var exampleDeadLetter = new Gcp.PubSub.Topic("example_dead_letter", new()
    ///     {
    ///         Name = "example-topic-dead-letter",
    ///     });
    /// 
    ///     var exampleSubscription = new Gcp.PubSub.Subscription("example", new()
    ///     {
    ///         Name = "example-subscription",
    ///         Topic = example.Id,
    ///         DeadLetterPolicy = new Gcp.PubSub.Inputs.SubscriptionDeadLetterPolicyArgs
    ///         {
    ///             DeadLetterTopic = exampleDeadLetter.Id,
    ///             MaxDeliveryAttempts = 10,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pubsub Subscription Push Bq
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///     });
    /// 
    ///     var test = new Gcp.BigQuery.Dataset("test", new()
    ///     {
    ///         DatasetId = "example_dataset",
    ///     });
    /// 
    ///     var testTable = new Gcp.BigQuery.Table("test", new()
    ///     {
    ///         TableId = "example_table",
    ///         DatasetId = test.DatasetId,
    ///         Schema = @"[
    ///   {
    ///     ""name"": ""data"",
    ///     ""type"": ""STRING"",
    ///     ""mode"": ""NULLABLE"",
    ///     ""description"": ""The data""
    ///   }
    /// ]
    /// ",
    ///         DeletionProtection = false,
    ///     });
    /// 
    ///     var exampleSubscription = new Gcp.PubSub.Subscription("example", new()
    ///     {
    ///         Name = "example-subscription",
    ///         Topic = example.Id,
    ///         BigqueryConfig = new Gcp.PubSub.Inputs.SubscriptionBigqueryConfigArgs
    ///         {
    ///             Table = Output.Tuple(testTable.Project, testTable.DatasetId, testTable.TableId).Apply(values =&gt;
    ///             {
    ///                 var project = values.Item1;
    ///                 var datasetId = values.Item2;
    ///                 var tableId = values.Item3;
    ///                 return $"{project}.{datasetId}.{tableId}";
    ///             }),
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    /// });
    /// ```
    /// ### Pubsub Subscription Push Bq Table Schema
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///     });
    /// 
    ///     var test = new Gcp.BigQuery.Dataset("test", new()
    ///     {
    ///         DatasetId = "example_dataset",
    ///     });
    /// 
    ///     var testTable = new Gcp.BigQuery.Table("test", new()
    ///     {
    ///         TableId = "example_table",
    ///         DatasetId = test.DatasetId,
    ///         Schema = @"[
    ///   {
    ///     ""name"": ""data"",
    ///     ""type"": ""STRING"",
    ///     ""mode"": ""NULLABLE"",
    ///     ""description"": ""The data""
    ///   }
    /// ]
    /// ",
    ///         DeletionProtection = false,
    ///     });
    /// 
    ///     var exampleSubscription = new Gcp.PubSub.Subscription("example", new()
    ///     {
    ///         Name = "example-subscription",
    ///         Topic = example.Id,
    ///         BigqueryConfig = new Gcp.PubSub.Inputs.SubscriptionBigqueryConfigArgs
    ///         {
    ///             Table = Output.Tuple(testTable.Project, testTable.DatasetId, testTable.TableId).Apply(values =&gt;
    ///             {
    ///                 var project = values.Item1;
    ///                 var datasetId = values.Item2;
    ///                 var tableId = values.Item3;
    ///                 return $"{project}.{datasetId}.{tableId}";
    ///             }),
    ///             UseTableSchema = true,
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    /// });
    /// ```
    /// ### Pubsub Subscription Push Bq Service Account
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///     });
    /// 
    ///     var bqWriteServiceAccount = new Gcp.ServiceAccount.Account("bq_write_service_account", new()
    ///     {
    ///         AccountId = "example-bqw",
    ///         DisplayName = "BQ Write Service Account",
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var bigqueryMetadataViewer = new Gcp.Projects.IAMMember("bigquery_metadata_viewer", new()
    ///     {
    ///         Project = project.Apply(getProjectResult =&gt; getProjectResult.ProjectId),
    ///         Role = "roles/bigquery.metadataViewer",
    ///         Member = bqWriteServiceAccount.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     });
    /// 
    ///     var bigqueryDataEditor = new Gcp.Projects.IAMMember("bigquery_data_editor", new()
    ///     {
    ///         Project = project.Apply(getProjectResult =&gt; getProjectResult.ProjectId),
    ///         Role = "roles/bigquery.dataEditor",
    ///         Member = bqWriteServiceAccount.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     });
    /// 
    ///     var test = new Gcp.BigQuery.Dataset("test", new()
    ///     {
    ///         DatasetId = "example_dataset",
    ///     });
    /// 
    ///     var testTable = new Gcp.BigQuery.Table("test", new()
    ///     {
    ///         DeletionProtection = false,
    ///         TableId = "example_table",
    ///         DatasetId = test.DatasetId,
    ///         Schema = @"[
    ///   {
    ///     ""name"": ""data"",
    ///     ""type"": ""STRING"",
    ///     ""mode"": ""NULLABLE"",
    ///     ""description"": ""The data""
    ///   }
    /// ]
    /// ",
    ///     });
    /// 
    ///     var exampleSubscription = new Gcp.PubSub.Subscription("example", new()
    ///     {
    ///         Name = "example-subscription",
    ///         Topic = example.Id,
    ///         BigqueryConfig = new Gcp.PubSub.Inputs.SubscriptionBigqueryConfigArgs
    ///         {
    ///             Table = Output.Tuple(testTable.Project, testTable.DatasetId, testTable.TableId).Apply(values =&gt;
    ///             {
    ///                 var project = values.Item1;
    ///                 var datasetId = values.Item2;
    ///                 var tableId = values.Item3;
    ///                 return $"{project}.{datasetId}.{tableId}";
    ///             }),
    ///             ServiceAccountEmail = bqWriteServiceAccount.Email,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             bqWriteServiceAccount,
    ///             bigqueryMetadataViewer,
    ///             bigqueryDataEditor,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pubsub Subscription Push Cloudstorage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.Storage.Bucket("example", new()
    ///     {
    ///         Name = "example-bucket",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var exampleTopic = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var admin = new Gcp.Storage.BucketIAMMember("admin", new()
    ///     {
    ///         Bucket = example.Name,
    ///         Role = "roles/storage.admin",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-pubsub.iam.gserviceaccount.com",
    ///     });
    /// 
    ///     var exampleSubscription = new Gcp.PubSub.Subscription("example", new()
    ///     {
    ///         Name = "example-subscription",
    ///         Topic = exampleTopic.Id,
    ///         CloudStorageConfig = new Gcp.PubSub.Inputs.SubscriptionCloudStorageConfigArgs
    ///         {
    ///             Bucket = example.Name,
    ///             FilenamePrefix = "pre-",
    ///             FilenameSuffix = "-_26032",
    ///             FilenameDatetimeFormat = "YYYY-MM-DD/hh_mm_ssZ",
    ///             MaxBytes = 1000,
    ///             MaxDuration = "300s",
    ///             MaxMessages = 1000,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             example,
    ///             admin,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pubsub Subscription Push Cloudstorage Avro
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.Storage.Bucket("example", new()
    ///     {
    ///         Name = "example-bucket",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var exampleTopic = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var admin = new Gcp.Storage.BucketIAMMember("admin", new()
    ///     {
    ///         Bucket = example.Name,
    ///         Role = "roles/storage.admin",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-pubsub.iam.gserviceaccount.com",
    ///     });
    /// 
    ///     var exampleSubscription = new Gcp.PubSub.Subscription("example", new()
    ///     {
    ///         Name = "example-subscription",
    ///         Topic = exampleTopic.Id,
    ///         CloudStorageConfig = new Gcp.PubSub.Inputs.SubscriptionCloudStorageConfigArgs
    ///         {
    ///             Bucket = example.Name,
    ///             FilenamePrefix = "pre-",
    ///             FilenameSuffix = "-_8647",
    ///             FilenameDatetimeFormat = "YYYY-MM-DD/hh_mm_ssZ",
    ///             MaxBytes = 1000,
    ///             MaxDuration = "300s",
    ///             MaxMessages = 1000,
    ///             AvroConfig = new Gcp.PubSub.Inputs.SubscriptionCloudStorageConfigAvroConfigArgs
    ///             {
    ///                 WriteMetadata = true,
    ///                 UseTopicSchema = true,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             example,
    ///             admin,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Pubsub Subscription Push Cloudstorage Service Account
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.Storage.Bucket("example", new()
    ///     {
    ///         Name = "example-bucket",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var exampleTopic = new Gcp.PubSub.Topic("example", new()
    ///     {
    ///         Name = "example-topic",
    ///     });
    /// 
    ///     var storageWriteServiceAccount = new Gcp.ServiceAccount.Account("storage_write_service_account", new()
    ///     {
    ///         AccountId = "example-stw",
    ///         DisplayName = "Storage Write Service Account",
    ///     });
    /// 
    ///     var admin = new Gcp.Storage.BucketIAMMember("admin", new()
    ///     {
    ///         Bucket = example.Name,
    ///         Role = "roles/storage.admin",
    ///         Member = storageWriteServiceAccount.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     });
    /// 
    ///     var exampleSubscription = new Gcp.PubSub.Subscription("example", new()
    ///     {
    ///         Name = "example-subscription",
    ///         Topic = exampleTopic.Id,
    ///         CloudStorageConfig = new Gcp.PubSub.Inputs.SubscriptionCloudStorageConfigArgs
    ///         {
    ///             Bucket = example.Name,
    ///             FilenamePrefix = "pre-",
    ///             FilenameSuffix = "-_50610",
    ///             FilenameDatetimeFormat = "YYYY-MM-DD/hh_mm_ssZ",
    ///             MaxBytes = 1000,
    ///             MaxDuration = "300s",
    ///             ServiceAccountEmail = storageWriteServiceAccount.Email,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             storageWriteServiceAccount,
    ///             example,
    ///             admin,
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Subscription can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/subscriptions/{{name}}`
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, Subscription can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:pubsub/subscription:Subscription default projects/{{project}}/subscriptions/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:pubsub/subscription:Subscription default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:pubsub/subscription:Subscription default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:pubsub/subscription:Subscription")]
    public partial class Subscription : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This value is the maximum time after a subscriber receives a message
        /// before the subscriber should acknowledge the message. After message
        /// delivery but before the ack deadline expires and before the message is
        /// acknowledged, it is an outstanding message and will not be delivered
        /// again during that time (on a best-effort basis).
        /// For pull subscriptions, this value is used as the initial value for
        /// the ack deadline. To override this value for a given message, call
        /// subscriptions.modifyAckDeadline with the corresponding ackId if using
        /// pull. The minimum custom deadline you can specify is 10 seconds. The
        /// maximum custom deadline you can specify is 600 seconds (10 minutes).
        /// If this parameter is 0, a default value of 10 seconds is used.
        /// For push delivery, this value is also used to set the request timeout
        /// for the call to the push endpoint.
        /// If the subscriber never acknowledges the message, the Pub/Sub system
        /// will eventually redeliver the message.
        /// </summary>
        [Output("ackDeadlineSeconds")]
        public Output<int> AckDeadlineSeconds { get; private set; } = null!;

        /// <summary>
        /// If delivery to BigQuery is used with this subscription, this field is used to configure it.
        /// Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
        /// If all three are empty, then the subscriber will pull and ack messages using API methods.
        /// Structure is documented below.
        /// </summary>
        [Output("bigqueryConfig")]
        public Output<Outputs.SubscriptionBigqueryConfig?> BigqueryConfig { get; private set; } = null!;

        /// <summary>
        /// If delivery to Cloud Storage is used with this subscription, this field is used to configure it.
        /// Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
        /// If all three are empty, then the subscriber will pull and ack messages using API methods.
        /// Structure is documented below.
        /// </summary>
        [Output("cloudStorageConfig")]
        public Output<Outputs.SubscriptionCloudStorageConfig?> CloudStorageConfig { get; private set; } = null!;

        /// <summary>
        /// A policy that specifies the conditions for dead lettering messages in
        /// this subscription. If dead_letter_policy is not set, dead lettering
        /// is disabled.
        /// The Cloud Pub/Sub service account associated with this subscription's
        /// parent project (i.e.,
        /// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        /// permission to Acknowledge() messages on this subscription.
        /// Structure is documented below.
        /// </summary>
        [Output("deadLetterPolicy")]
        public Output<Outputs.SubscriptionDeadLetterPolicy?> DeadLetterPolicy { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// If `true`, Pub/Sub provides the following guarantees for the delivery
        /// of a message with a given value of messageId on this Subscriptions':
        /// - The message sent to a subscriber is guaranteed not to be resent before the message's acknowledgement deadline expires.
        /// - An acknowledged message will not be resent to a subscriber.
        /// Note that subscribers may still receive multiple copies of a message when `enable_exactly_once_delivery`
        /// is true if the message was published multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
        /// </summary>
        [Output("enableExactlyOnceDelivery")]
        public Output<bool?> EnableExactlyOnceDelivery { get; private set; } = null!;

        /// <summary>
        /// If `true`, messages published with the same orderingKey in PubsubMessage will be delivered to
        /// the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
        /// may be delivered in any order.
        /// </summary>
        [Output("enableMessageOrdering")]
        public Output<bool?> EnableMessageOrdering { get; private set; } = null!;

        /// <summary>
        /// A policy that specifies the conditions for this subscription's expiration.
        /// A subscription is considered active as long as any connected subscriber
        /// is successfully consuming messages from the subscription or is issuing
        /// operations on the subscription. If expirationPolicy is not set, a default
        /// policy with ttl of 31 days will be used.  If it is set but ttl is "", the
        /// resource never expires.  The minimum allowed value for expirationPolicy.ttl
        /// is 1 day.
        /// Structure is documented below.
        /// </summary>
        [Output("expirationPolicy")]
        public Output<Outputs.SubscriptionExpirationPolicy> ExpirationPolicy { get; private set; } = null!;

        /// <summary>
        /// The subscription only delivers the messages that match the filter.
        /// Pub/Sub automatically acknowledges the messages that don't match the filter. You can filter messages
        /// by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
        /// you can't modify the filter.
        /// </summary>
        [Output("filter")]
        public Output<string?> Filter { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs to assign to this Subscription.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// How long to retain unacknowledged messages in the subscription's
        /// backlog, from the moment a message is published. If
        /// retain_acked_messages is true, then this also configures the retention
        /// of acknowledged messages, and thus configures how far back in time a
        /// subscriptions.seek can be done. Defaults to 7 days. Cannot be more
        /// than 31 days (`"2678400s"`) or less than 10 minutes (`"600s"`).
        /// A duration in seconds with up to nine fractional digits, terminated
        /// by 's'. Example: `"600.5s"`.
        /// </summary>
        [Output("messageRetentionDuration")]
        public Output<string?> MessageRetentionDuration { get; private set; } = null!;

        /// <summary>
        /// Transforms to be applied to messages published to the topic. Transforms are applied in the
        /// order specified.
        /// Structure is documented below.
        /// </summary>
        [Output("messageTransforms")]
        public Output<ImmutableArray<Outputs.SubscriptionMessageTransform>> MessageTransforms { get; private set; } = null!;

        /// <summary>
        /// Name of the subscription.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// If push delivery is used with this subscription, this field is used to
        /// configure it. An empty pushConfig signifies that the subscriber will
        /// pull and ack messages using API methods.
        /// Structure is documented below.
        /// </summary>
        [Output("pushConfig")]
        public Output<Outputs.SubscriptionPushConfig?> PushConfig { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to retain acknowledged messages. If `true`, then
        /// messages are not expunged from the subscription's backlog, even if
        /// they are acknowledged, until they fall out of the
        /// messageRetentionDuration window.
        /// </summary>
        [Output("retainAckedMessages")]
        public Output<bool?> RetainAckedMessages { get; private set; } = null!;

        /// <summary>
        /// A policy that specifies how Pub/Sub retries message delivery for this subscription.
        /// If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
        /// RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
        /// Structure is documented below.
        /// </summary>
        [Output("retryPolicy")]
        public Output<Outputs.SubscriptionRetryPolicy?> RetryPolicy { get; private set; } = null!;

        /// <summary>
        /// A reference to a Topic resource, of the form projects/{project}/topics/{{name}}
        /// (as in the id property of a google_pubsub_topic), or just a topic name if
        /// the topic is in the same project as the subscription.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("topic")]
        public Output<string> Topic { get; private set; } = null!;


        /// <summary>
        /// Create a Subscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subscription(string name, SubscriptionArgs args, CustomResourceOptions? options = null)
            : base("gcp:pubsub/subscription:Subscription", name, args ?? new SubscriptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Subscription(string name, Input<string> id, SubscriptionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:pubsub/subscription:Subscription", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subscription Get(string name, Input<string> id, SubscriptionState? state = null, CustomResourceOptions? options = null)
        {
            return new Subscription(name, id, state, options);
        }
    }

    public sealed class SubscriptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This value is the maximum time after a subscriber receives a message
        /// before the subscriber should acknowledge the message. After message
        /// delivery but before the ack deadline expires and before the message is
        /// acknowledged, it is an outstanding message and will not be delivered
        /// again during that time (on a best-effort basis).
        /// For pull subscriptions, this value is used as the initial value for
        /// the ack deadline. To override this value for a given message, call
        /// subscriptions.modifyAckDeadline with the corresponding ackId if using
        /// pull. The minimum custom deadline you can specify is 10 seconds. The
        /// maximum custom deadline you can specify is 600 seconds (10 minutes).
        /// If this parameter is 0, a default value of 10 seconds is used.
        /// For push delivery, this value is also used to set the request timeout
        /// for the call to the push endpoint.
        /// If the subscriber never acknowledges the message, the Pub/Sub system
        /// will eventually redeliver the message.
        /// </summary>
        [Input("ackDeadlineSeconds")]
        public Input<int>? AckDeadlineSeconds { get; set; }

        /// <summary>
        /// If delivery to BigQuery is used with this subscription, this field is used to configure it.
        /// Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
        /// If all three are empty, then the subscriber will pull and ack messages using API methods.
        /// Structure is documented below.
        /// </summary>
        [Input("bigqueryConfig")]
        public Input<Inputs.SubscriptionBigqueryConfigArgs>? BigqueryConfig { get; set; }

        /// <summary>
        /// If delivery to Cloud Storage is used with this subscription, this field is used to configure it.
        /// Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
        /// If all three are empty, then the subscriber will pull and ack messages using API methods.
        /// Structure is documented below.
        /// </summary>
        [Input("cloudStorageConfig")]
        public Input<Inputs.SubscriptionCloudStorageConfigArgs>? CloudStorageConfig { get; set; }

        /// <summary>
        /// A policy that specifies the conditions for dead lettering messages in
        /// this subscription. If dead_letter_policy is not set, dead lettering
        /// is disabled.
        /// The Cloud Pub/Sub service account associated with this subscription's
        /// parent project (i.e.,
        /// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        /// permission to Acknowledge() messages on this subscription.
        /// Structure is documented below.
        /// </summary>
        [Input("deadLetterPolicy")]
        public Input<Inputs.SubscriptionDeadLetterPolicyArgs>? DeadLetterPolicy { get; set; }

        /// <summary>
        /// If `true`, Pub/Sub provides the following guarantees for the delivery
        /// of a message with a given value of messageId on this Subscriptions':
        /// - The message sent to a subscriber is guaranteed not to be resent before the message's acknowledgement deadline expires.
        /// - An acknowledged message will not be resent to a subscriber.
        /// Note that subscribers may still receive multiple copies of a message when `enable_exactly_once_delivery`
        /// is true if the message was published multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
        /// </summary>
        [Input("enableExactlyOnceDelivery")]
        public Input<bool>? EnableExactlyOnceDelivery { get; set; }

        /// <summary>
        /// If `true`, messages published with the same orderingKey in PubsubMessage will be delivered to
        /// the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
        /// may be delivered in any order.
        /// </summary>
        [Input("enableMessageOrdering")]
        public Input<bool>? EnableMessageOrdering { get; set; }

        /// <summary>
        /// A policy that specifies the conditions for this subscription's expiration.
        /// A subscription is considered active as long as any connected subscriber
        /// is successfully consuming messages from the subscription or is issuing
        /// operations on the subscription. If expirationPolicy is not set, a default
        /// policy with ttl of 31 days will be used.  If it is set but ttl is "", the
        /// resource never expires.  The minimum allowed value for expirationPolicy.ttl
        /// is 1 day.
        /// Structure is documented below.
        /// </summary>
        [Input("expirationPolicy")]
        public Input<Inputs.SubscriptionExpirationPolicyArgs>? ExpirationPolicy { get; set; }

        /// <summary>
        /// The subscription only delivers the messages that match the filter.
        /// Pub/Sub automatically acknowledges the messages that don't match the filter. You can filter messages
        /// by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
        /// you can't modify the filter.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to this Subscription.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// How long to retain unacknowledged messages in the subscription's
        /// backlog, from the moment a message is published. If
        /// retain_acked_messages is true, then this also configures the retention
        /// of acknowledged messages, and thus configures how far back in time a
        /// subscriptions.seek can be done. Defaults to 7 days. Cannot be more
        /// than 31 days (`"2678400s"`) or less than 10 minutes (`"600s"`).
        /// A duration in seconds with up to nine fractional digits, terminated
        /// by 's'. Example: `"600.5s"`.
        /// </summary>
        [Input("messageRetentionDuration")]
        public Input<string>? MessageRetentionDuration { get; set; }

        [Input("messageTransforms")]
        private InputList<Inputs.SubscriptionMessageTransformArgs>? _messageTransforms;

        /// <summary>
        /// Transforms to be applied to messages published to the topic. Transforms are applied in the
        /// order specified.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.SubscriptionMessageTransformArgs> MessageTransforms
        {
            get => _messageTransforms ?? (_messageTransforms = new InputList<Inputs.SubscriptionMessageTransformArgs>());
            set => _messageTransforms = value;
        }

        /// <summary>
        /// Name of the subscription.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// If push delivery is used with this subscription, this field is used to
        /// configure it. An empty pushConfig signifies that the subscriber will
        /// pull and ack messages using API methods.
        /// Structure is documented below.
        /// </summary>
        [Input("pushConfig")]
        public Input<Inputs.SubscriptionPushConfigArgs>? PushConfig { get; set; }

        /// <summary>
        /// Indicates whether to retain acknowledged messages. If `true`, then
        /// messages are not expunged from the subscription's backlog, even if
        /// they are acknowledged, until they fall out of the
        /// messageRetentionDuration window.
        /// </summary>
        [Input("retainAckedMessages")]
        public Input<bool>? RetainAckedMessages { get; set; }

        /// <summary>
        /// A policy that specifies how Pub/Sub retries message delivery for this subscription.
        /// If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
        /// RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
        /// Structure is documented below.
        /// </summary>
        [Input("retryPolicy")]
        public Input<Inputs.SubscriptionRetryPolicyArgs>? RetryPolicy { get; set; }

        /// <summary>
        /// A reference to a Topic resource, of the form projects/{project}/topics/{{name}}
        /// (as in the id property of a google_pubsub_topic), or just a topic name if
        /// the topic is in the same project as the subscription.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("topic", required: true)]
        public Input<string> Topic { get; set; } = null!;

        public SubscriptionArgs()
        {
        }
        public static new SubscriptionArgs Empty => new SubscriptionArgs();
    }

    public sealed class SubscriptionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This value is the maximum time after a subscriber receives a message
        /// before the subscriber should acknowledge the message. After message
        /// delivery but before the ack deadline expires and before the message is
        /// acknowledged, it is an outstanding message and will not be delivered
        /// again during that time (on a best-effort basis).
        /// For pull subscriptions, this value is used as the initial value for
        /// the ack deadline. To override this value for a given message, call
        /// subscriptions.modifyAckDeadline with the corresponding ackId if using
        /// pull. The minimum custom deadline you can specify is 10 seconds. The
        /// maximum custom deadline you can specify is 600 seconds (10 minutes).
        /// If this parameter is 0, a default value of 10 seconds is used.
        /// For push delivery, this value is also used to set the request timeout
        /// for the call to the push endpoint.
        /// If the subscriber never acknowledges the message, the Pub/Sub system
        /// will eventually redeliver the message.
        /// </summary>
        [Input("ackDeadlineSeconds")]
        public Input<int>? AckDeadlineSeconds { get; set; }

        /// <summary>
        /// If delivery to BigQuery is used with this subscription, this field is used to configure it.
        /// Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
        /// If all three are empty, then the subscriber will pull and ack messages using API methods.
        /// Structure is documented below.
        /// </summary>
        [Input("bigqueryConfig")]
        public Input<Inputs.SubscriptionBigqueryConfigGetArgs>? BigqueryConfig { get; set; }

        /// <summary>
        /// If delivery to Cloud Storage is used with this subscription, this field is used to configure it.
        /// Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
        /// If all three are empty, then the subscriber will pull and ack messages using API methods.
        /// Structure is documented below.
        /// </summary>
        [Input("cloudStorageConfig")]
        public Input<Inputs.SubscriptionCloudStorageConfigGetArgs>? CloudStorageConfig { get; set; }

        /// <summary>
        /// A policy that specifies the conditions for dead lettering messages in
        /// this subscription. If dead_letter_policy is not set, dead lettering
        /// is disabled.
        /// The Cloud Pub/Sub service account associated with this subscription's
        /// parent project (i.e.,
        /// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        /// permission to Acknowledge() messages on this subscription.
        /// Structure is documented below.
        /// </summary>
        [Input("deadLetterPolicy")]
        public Input<Inputs.SubscriptionDeadLetterPolicyGetArgs>? DeadLetterPolicy { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// If `true`, Pub/Sub provides the following guarantees for the delivery
        /// of a message with a given value of messageId on this Subscriptions':
        /// - The message sent to a subscriber is guaranteed not to be resent before the message's acknowledgement deadline expires.
        /// - An acknowledged message will not be resent to a subscriber.
        /// Note that subscribers may still receive multiple copies of a message when `enable_exactly_once_delivery`
        /// is true if the message was published multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
        /// </summary>
        [Input("enableExactlyOnceDelivery")]
        public Input<bool>? EnableExactlyOnceDelivery { get; set; }

        /// <summary>
        /// If `true`, messages published with the same orderingKey in PubsubMessage will be delivered to
        /// the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
        /// may be delivered in any order.
        /// </summary>
        [Input("enableMessageOrdering")]
        public Input<bool>? EnableMessageOrdering { get; set; }

        /// <summary>
        /// A policy that specifies the conditions for this subscription's expiration.
        /// A subscription is considered active as long as any connected subscriber
        /// is successfully consuming messages from the subscription or is issuing
        /// operations on the subscription. If expirationPolicy is not set, a default
        /// policy with ttl of 31 days will be used.  If it is set but ttl is "", the
        /// resource never expires.  The minimum allowed value for expirationPolicy.ttl
        /// is 1 day.
        /// Structure is documented below.
        /// </summary>
        [Input("expirationPolicy")]
        public Input<Inputs.SubscriptionExpirationPolicyGetArgs>? ExpirationPolicy { get; set; }

        /// <summary>
        /// The subscription only delivers the messages that match the filter.
        /// Pub/Sub automatically acknowledges the messages that don't match the filter. You can filter messages
        /// by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
        /// you can't modify the filter.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to this Subscription.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// How long to retain unacknowledged messages in the subscription's
        /// backlog, from the moment a message is published. If
        /// retain_acked_messages is true, then this also configures the retention
        /// of acknowledged messages, and thus configures how far back in time a
        /// subscriptions.seek can be done. Defaults to 7 days. Cannot be more
        /// than 31 days (`"2678400s"`) or less than 10 minutes (`"600s"`).
        /// A duration in seconds with up to nine fractional digits, terminated
        /// by 's'. Example: `"600.5s"`.
        /// </summary>
        [Input("messageRetentionDuration")]
        public Input<string>? MessageRetentionDuration { get; set; }

        [Input("messageTransforms")]
        private InputList<Inputs.SubscriptionMessageTransformGetArgs>? _messageTransforms;

        /// <summary>
        /// Transforms to be applied to messages published to the topic. Transforms are applied in the
        /// order specified.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.SubscriptionMessageTransformGetArgs> MessageTransforms
        {
            get => _messageTransforms ?? (_messageTransforms = new InputList<Inputs.SubscriptionMessageTransformGetArgs>());
            set => _messageTransforms = value;
        }

        /// <summary>
        /// Name of the subscription.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// If push delivery is used with this subscription, this field is used to
        /// configure it. An empty pushConfig signifies that the subscriber will
        /// pull and ack messages using API methods.
        /// Structure is documented below.
        /// </summary>
        [Input("pushConfig")]
        public Input<Inputs.SubscriptionPushConfigGetArgs>? PushConfig { get; set; }

        /// <summary>
        /// Indicates whether to retain acknowledged messages. If `true`, then
        /// messages are not expunged from the subscription's backlog, even if
        /// they are acknowledged, until they fall out of the
        /// messageRetentionDuration window.
        /// </summary>
        [Input("retainAckedMessages")]
        public Input<bool>? RetainAckedMessages { get; set; }

        /// <summary>
        /// A policy that specifies how Pub/Sub retries message delivery for this subscription.
        /// If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
        /// RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
        /// Structure is documented below.
        /// </summary>
        [Input("retryPolicy")]
        public Input<Inputs.SubscriptionRetryPolicyGetArgs>? RetryPolicy { get; set; }

        /// <summary>
        /// A reference to a Topic resource, of the form projects/{project}/topics/{{name}}
        /// (as in the id property of a google_pubsub_topic), or just a topic name if
        /// the topic is in the same project as the subscription.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("topic")]
        public Input<string>? Topic { get; set; }

        public SubscriptionState()
        {
        }
        public static new SubscriptionState Empty => new SubscriptionState();
    }
}
