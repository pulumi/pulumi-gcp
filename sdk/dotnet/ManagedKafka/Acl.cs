// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ManagedKafka
{
    /// <summary>
    /// A Managed Service for Apache Kafka ACL. Apache Kafka is a trademark owned by the Apache Software Foundation.
    /// 
    /// ## Example Usage
    /// 
    /// ### Managedkafka Acl Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var cluster = new Gcp.ManagedKafka.Cluster("cluster", new()
    ///     {
    ///         ClusterId = "my-cluster",
    ///         Location = "us-central1",
    ///         CapacityConfig = new Gcp.ManagedKafka.Inputs.ClusterCapacityConfigArgs
    ///         {
    ///             VcpuCount = "3",
    ///             MemoryBytes = "3221225472",
    ///         },
    ///         GcpConfig = new Gcp.ManagedKafka.Inputs.ClusterGcpConfigArgs
    ///         {
    ///             AccessConfig = new Gcp.ManagedKafka.Inputs.ClusterGcpConfigAccessConfigArgs
    ///             {
    ///                 NetworkConfigs = new[]
    ///                 {
    ///                     new Gcp.ManagedKafka.Inputs.ClusterGcpConfigAccessConfigNetworkConfigArgs
    ///                     {
    ///                         Subnet = $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Number)}/regions/us-central1/subnetworks/default",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.ManagedKafka.Acl("example", new()
    ///     {
    ///         AclId = "topic/mytopic",
    ///         Cluster = cluster.ClusterId,
    ///         Location = "us-central1",
    ///         AclEntries = new[]
    ///         {
    ///             new Gcp.ManagedKafka.Inputs.AclAclEntryArgs
    ///             {
    ///                 Principal = "User:admin@my-project.iam.gserviceaccount.com",
    ///                 PermissionType = "ALLOW",
    ///                 Operation = "ALL",
    ///                 Host = "*",
    ///             },
    ///             new Gcp.ManagedKafka.Inputs.AclAclEntryArgs
    ///             {
    ///                 Principal = "User:producer-client@my-project.iam.gserviceaccount.com",
    ///                 PermissionType = "ALLOW",
    ///                 Operation = "WRITE",
    ///                 Host = "*",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Acl can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/acls/{{acl_id}}`
    /// 
    /// When using the `pulumi import` command, Acl can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:managedkafka/acl:Acl default projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/acls/{{acl_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:managedkafka/acl:Acl")]
    public partial class Acl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
        /// Structure is documented below.
        /// </summary>
        [Output("aclEntries")]
        public Output<ImmutableArray<Outputs.AclAclEntry>> AclEntries { get; private set; } = null!;

        /// <summary>
        /// The ID to use for the acl, which will become the final component of the acl's name. The structure of `aclId` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl. `aclId` is structured like one of the following:
        /// For acls on the cluster: `cluster`
        /// For acls on a single resource within the cluster: `topic/{resource_name}` `consumerGroup/{resource_name}` `transactionalId/{resource_name}`
        /// For acls on all resources that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}` `transactionalIdPrefixed/{resource_name}`
        /// For acls on all resources of a given type (i.e. the wildcard literal '*''): `allTopics` (represents `topic/*`) `allConsumerGroups` (represents `consumerGroup/*`) `allTransactionalIds` (represents `transactionalId/*`).
        /// </summary>
        [Output("aclId")]
        public Output<string> AclId { get; private set; } = null!;

        /// <summary>
        /// The cluster name.
        /// </summary>
        [Output("cluster")]
        public Output<string> Cluster { get; private set; } = null!;

        /// <summary>
        /// `etag` is used for concurrency control. An `etag` is returned in the
        /// response to `GetAcl` and `CreateAcl`. Callers are required to put that etag
        /// in the request to `UpdateAcl` to ensure that their change will be applied
        /// to the same version of the acl that exists in the Kafka Cluster.
        /// A terminal 'T' character in the etag indicates that the AclEntries were
        /// truncated due to repeated field limits.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the acl. The `ACL_ID` segment is used when connecting directly to the cluster. Must be in the format `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/acls/ACL_ID`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The acl pattern type derived from the name. One of: LITERAL, PREFIXED.
        /// </summary>
        [Output("patternType")]
        public Output<string> PatternType { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The acl resource name derived from the name. For cluster resource_type, this is always "kafka-cluster". Can be the wildcard literal "*".
        /// </summary>
        [Output("resourceName")]
        public Output<string> ResourceName { get; private set; } = null!;

        /// <summary>
        /// The acl resource type derived from the name. One of: CLUSTER, TOPIC, GROUP, TRANSACTIONAL_ID.
        /// </summary>
        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;


        /// <summary>
        /// Create a Acl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Acl(string name, AclArgs args, CustomResourceOptions? options = null)
            : base("gcp:managedkafka/acl:Acl", name, args ?? new AclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Acl(string name, Input<string> id, AclState? state = null, CustomResourceOptions? options = null)
            : base("gcp:managedkafka/acl:Acl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Acl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Acl Get(string name, Input<string> id, AclState? state = null, CustomResourceOptions? options = null)
        {
            return new Acl(name, id, state, options);
        }
    }

    public sealed class AclArgs : global::Pulumi.ResourceArgs
    {
        [Input("aclEntries", required: true)]
        private InputList<Inputs.AclAclEntryArgs>? _aclEntries;

        /// <summary>
        /// The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AclAclEntryArgs> AclEntries
        {
            get => _aclEntries ?? (_aclEntries = new InputList<Inputs.AclAclEntryArgs>());
            set => _aclEntries = value;
        }

        /// <summary>
        /// The ID to use for the acl, which will become the final component of the acl's name. The structure of `aclId` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl. `aclId` is structured like one of the following:
        /// For acls on the cluster: `cluster`
        /// For acls on a single resource within the cluster: `topic/{resource_name}` `consumerGroup/{resource_name}` `transactionalId/{resource_name}`
        /// For acls on all resources that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}` `transactionalIdPrefixed/{resource_name}`
        /// For acls on all resources of a given type (i.e. the wildcard literal '*''): `allTopics` (represents `topic/*`) `allConsumerGroups` (represents `consumerGroup/*`) `allTransactionalIds` (represents `transactionalId/*`).
        /// </summary>
        [Input("aclId", required: true)]
        public Input<string> AclId { get; set; } = null!;

        /// <summary>
        /// The cluster name.
        /// </summary>
        [Input("cluster", required: true)]
        public Input<string> Cluster { get; set; } = null!;

        /// <summary>
        /// ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public AclArgs()
        {
        }
        public static new AclArgs Empty => new AclArgs();
    }

    public sealed class AclState : global::Pulumi.ResourceArgs
    {
        [Input("aclEntries")]
        private InputList<Inputs.AclAclEntryGetArgs>? _aclEntries;

        /// <summary>
        /// The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AclAclEntryGetArgs> AclEntries
        {
            get => _aclEntries ?? (_aclEntries = new InputList<Inputs.AclAclEntryGetArgs>());
            set => _aclEntries = value;
        }

        /// <summary>
        /// The ID to use for the acl, which will become the final component of the acl's name. The structure of `aclId` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl. `aclId` is structured like one of the following:
        /// For acls on the cluster: `cluster`
        /// For acls on a single resource within the cluster: `topic/{resource_name}` `consumerGroup/{resource_name}` `transactionalId/{resource_name}`
        /// For acls on all resources that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}` `transactionalIdPrefixed/{resource_name}`
        /// For acls on all resources of a given type (i.e. the wildcard literal '*''): `allTopics` (represents `topic/*`) `allConsumerGroups` (represents `consumerGroup/*`) `allTransactionalIds` (represents `transactionalId/*`).
        /// </summary>
        [Input("aclId")]
        public Input<string>? AclId { get; set; }

        /// <summary>
        /// The cluster name.
        /// </summary>
        [Input("cluster")]
        public Input<string>? Cluster { get; set; }

        /// <summary>
        /// `etag` is used for concurrency control. An `etag` is returned in the
        /// response to `GetAcl` and `CreateAcl`. Callers are required to put that etag
        /// in the request to `UpdateAcl` to ensure that their change will be applied
        /// to the same version of the acl that exists in the Kafka Cluster.
        /// A terminal 'T' character in the etag indicates that the AclEntries were
        /// truncated due to repeated field limits.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the acl. The `ACL_ID` segment is used when connecting directly to the cluster. Must be in the format `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/acls/ACL_ID`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The acl pattern type derived from the name. One of: LITERAL, PREFIXED.
        /// </summary>
        [Input("patternType")]
        public Input<string>? PatternType { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The acl resource name derived from the name. For cluster resource_type, this is always "kafka-cluster". Can be the wildcard literal "*".
        /// </summary>
        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        /// <summary>
        /// The acl resource type derived from the name. One of: CLUSTER, TOPIC, GROUP, TRANSACTIONAL_ID.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        public AclState()
        {
        }
        public static new AclState Empty => new AclState();
    }
}
