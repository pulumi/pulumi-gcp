// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ManagedKafka
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Managedkafka Connector Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = new Gcp.Organizations.Project("project", new()
    ///     {
    ///         ProjectId = "tf-test_9394",
    ///         Name = "tf-test_11380",
    ///         OrgId = "123456789",
    ///         BillingAccount = "000000-0000000-0000000-000000",
    ///         DeletionPolicy = "DELETE",
    ///     });
    /// 
    ///     var wait60Seconds = new Time.Index.Sleep("wait_60_seconds", new()
    ///     {
    ///         CreateDuration = "60s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             project,
    ///         },
    ///     });
    /// 
    ///     var compute = new Gcp.Projects.Service("compute", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         ServiceName = "compute.googleapis.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait60Seconds,
    ///         },
    ///     });
    /// 
    ///     var managedkafka = new Gcp.Projects.Service("managedkafka", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         ServiceName = "managedkafka.googleapis.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             compute,
    ///         },
    ///     });
    /// 
    ///     var wait120Seconds = new Time.Index.Sleep("wait_120_seconds", new()
    ///     {
    ///         CreateDuration = "120s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             managedkafka,
    ///         },
    ///     });
    /// 
    ///     var mkcSecondarySubnet = new Gcp.Compute.Subnetwork("mkc_secondary_subnet", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         Name = "my-secondary-subnetwork-00",
    ///         IpCidrRange = "10.5.0.0/16",
    ///         Region = "us-central1",
    ///         Network = "default",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait120Seconds,
    ///         },
    ///     });
    /// 
    ///     var cpsTopic = new Gcp.PubSub.Topic("cps_topic", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         Name = "my-cps-topic",
    ///         MessageRetentionDuration = "86600s",
    ///     });
    /// 
    ///     var gmkCluster = new Gcp.ManagedKafka.Cluster("gmk_cluster", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         ClusterId = "my-cluster",
    ///         Location = "us-central1",
    ///         CapacityConfig = new Gcp.ManagedKafka.Inputs.ClusterCapacityConfigArgs
    ///         {
    ///             VcpuCount = "3",
    ///             MemoryBytes = "3221225472",
    ///         },
    ///         GcpConfig = new Gcp.ManagedKafka.Inputs.ClusterGcpConfigArgs
    ///         {
    ///             AccessConfig = new Gcp.ManagedKafka.Inputs.ClusterGcpConfigAccessConfigArgs
    ///             {
    ///                 NetworkConfigs = new[]
    ///                 {
    ///                     new Gcp.ManagedKafka.Inputs.ClusterGcpConfigAccessConfigNetworkConfigArgs
    ///                     {
    ///                         Subnet = project.ProjectId.Apply(projectId =&gt; $"projects/{projectId}/regions/us-central1/subnetworks/default"),
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             managedkafka,
    ///         },
    ///     });
    /// 
    ///     var gmkTopic = new Gcp.ManagedKafka.Topic("gmk_topic", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         TopicId = "my-topic",
    ///         Cluster = gmkCluster.ClusterId,
    ///         Location = "us-central1",
    ///         PartitionCount = 2,
    ///         ReplicationFactor = 3,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             managedkafka,
    ///         },
    ///     });
    /// 
    ///     var mkcCluster = new Gcp.ManagedKafka.ConnectCluster("mkc_cluster", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         ConnectClusterId = "my-connect-cluster",
    ///         KafkaCluster = Output.Tuple(project.ProjectId, gmkCluster.ClusterId).Apply(values =&gt;
    ///         {
    ///             var projectId = values.Item1;
    ///             var clusterId = values.Item2;
    ///             return $"projects/{projectId}/locations/us-central1/clusters/{clusterId}";
    ///         }),
    ///         Location = "us-central1",
    ///         CapacityConfig = new Gcp.ManagedKafka.Inputs.ConnectClusterCapacityConfigArgs
    ///         {
    ///             VcpuCount = "12",
    ///             MemoryBytes = "21474836480",
    ///         },
    ///         GcpConfig = new Gcp.ManagedKafka.Inputs.ConnectClusterGcpConfigArgs
    ///         {
    ///             AccessConfig = new Gcp.ManagedKafka.Inputs.ConnectClusterGcpConfigAccessConfigArgs
    ///             {
    ///                 NetworkConfigs = new[]
    ///                 {
    ///                     new Gcp.ManagedKafka.Inputs.ConnectClusterGcpConfigAccessConfigNetworkConfigArgs
    ///                     {
    ///                         PrimarySubnet = project.ProjectId.Apply(projectId =&gt; $"projects/{projectId}/regions/us-central1/subnetworks/default"),
    ///                         AdditionalSubnets = new[]
    ///                         {
    ///                             mkcSecondarySubnet.Id,
    ///                         },
    ///                         DnsDomainNames = new[]
    ///                         {
    ///                             Output.Tuple(gmkCluster.ClusterId, project.ProjectId).Apply(values =&gt;
    ///                             {
    ///                                 var clusterId = values.Item1;
    ///                                 var projectId = values.Item2;
    ///                                 return $"{clusterId}.us-central1.managedkafka.{projectId}.cloud.goog";
    ///                             }),
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             managedkafka,
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.ManagedKafka.Connector("example", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         ConnectorId = "my-connector",
    ///         ConnectCluster = mkcCluster.ConnectClusterId,
    ///         Location = "us-central1",
    ///         Configs = 
    ///         {
    ///             { "connector.class", "com.google.pubsub.kafka.sink.CloudPubSubSinkConnector" },
    ///             { "name", "my-connector" },
    ///             { "tasks.max", "1" },
    ///             { "topics", gmkTopic.TopicId },
    ///             { "cps.topic", cpsTopic.Name },
    ///             { "cps.project", project.ProjectId },
    ///             { "value.converter", "org.apache.kafka.connect.storage.StringConverter" },
    ///             { "key.converter", "org.apache.kafka.connect.storage.StringConverter" },
    ///         },
    ///         TaskRestartPolicy = new Gcp.ManagedKafka.Inputs.ConnectorTaskRestartPolicyArgs
    ///         {
    ///             MinimumBackoff = "60s",
    ///             MaximumBackoff = "1800s",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             managedkafka,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Connector can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/connectClusters/{{connect_cluster}}/connectors/{{connector_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{connect_cluster}}/{{connector_id}}`
    /// 
    /// * `{{location}}/{{connect_cluster}}/{{connector_id}}`
    /// 
    /// When using the `pulumi import` command, Connector can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:managedkafka/connector:Connector default projects/{{project}}/locations/{{location}}/connectClusters/{{connect_cluster}}/connectors/{{connector_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:managedkafka/connector:Connector default {{project}}/{{location}}/{{connect_cluster}}/{{connector_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:managedkafka/connector:Connector default {{location}}/{{connect_cluster}}/{{connector_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:managedkafka/connector:Connector")]
    public partial class Connector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
        /// </summary>
        [Output("configs")]
        public Output<ImmutableDictionary<string, string>?> Configs { get; private set; } = null!;

        /// <summary>
        /// The connect cluster name.
        /// </summary>
        [Output("connectCluster")]
        public Output<string> ConnectCluster { get; private set; } = null!;

        /// <summary>
        /// The ID to use for the connector, which will become the final component of the connector's name. This value is structured like: `my-connector-id`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("connectorId")]
        public Output<string> ConnectorId { get; private set; } = null!;

        /// <summary>
        /// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the connector. The `connector` segment is used when connecting directly to the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER/connectors/CONNECTOR_ID`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The current state of the connect. Possible values: `STATE_UNSPECIFIED`, `UNASSIGNED`, `RUNNING`, `PAUSED`, `FAILED`, `RESTARTING`, and `STOPPED`.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won't be restarted.
        /// Structure is documented below.
        /// </summary>
        [Output("taskRestartPolicy")]
        public Output<Outputs.ConnectorTaskRestartPolicy?> TaskRestartPolicy { get; private set; } = null!;


        /// <summary>
        /// Create a Connector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connector(string name, ConnectorArgs args, CustomResourceOptions? options = null)
            : base("gcp:managedkafka/connector:Connector", name, args ?? new ConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connector(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
            : base("gcp:managedkafka/connector:Connector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connector Get(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new Connector(name, id, state, options);
        }
    }

    public sealed class ConnectorArgs : global::Pulumi.ResourceArgs
    {
        [Input("configs")]
        private InputMap<string>? _configs;

        /// <summary>
        /// Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
        /// </summary>
        public InputMap<string> Configs
        {
            get => _configs ?? (_configs = new InputMap<string>());
            set => _configs = value;
        }

        /// <summary>
        /// The connect cluster name.
        /// </summary>
        [Input("connectCluster", required: true)]
        public Input<string> ConnectCluster { get; set; } = null!;

        /// <summary>
        /// The ID to use for the connector, which will become the final component of the connector's name. This value is structured like: `my-connector-id`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("connectorId", required: true)]
        public Input<string> ConnectorId { get; set; } = null!;

        /// <summary>
        /// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won't be restarted.
        /// Structure is documented below.
        /// </summary>
        [Input("taskRestartPolicy")]
        public Input<Inputs.ConnectorTaskRestartPolicyArgs>? TaskRestartPolicy { get; set; }

        public ConnectorArgs()
        {
        }
        public static new ConnectorArgs Empty => new ConnectorArgs();
    }

    public sealed class ConnectorState : global::Pulumi.ResourceArgs
    {
        [Input("configs")]
        private InputMap<string>? _configs;

        /// <summary>
        /// Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
        /// </summary>
        public InputMap<string> Configs
        {
            get => _configs ?? (_configs = new InputMap<string>());
            set => _configs = value;
        }

        /// <summary>
        /// The connect cluster name.
        /// </summary>
        [Input("connectCluster")]
        public Input<string>? ConnectCluster { get; set; }

        /// <summary>
        /// The ID to use for the connector, which will become the final component of the connector's name. This value is structured like: `my-connector-id`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("connectorId")]
        public Input<string>? ConnectorId { get; set; }

        /// <summary>
        /// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the connector. The `connector` segment is used when connecting directly to the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER/connectors/CONNECTOR_ID`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The current state of the connect. Possible values: `STATE_UNSPECIFIED`, `UNASSIGNED`, `RUNNING`, `PAUSED`, `FAILED`, `RESTARTING`, and `STOPPED`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won't be restarted.
        /// Structure is documented below.
        /// </summary>
        [Input("taskRestartPolicy")]
        public Input<Inputs.ConnectorTaskRestartPolicyGetArgs>? TaskRestartPolicy { get; set; }

        public ConnectorState()
        {
        }
        public static new ConnectorState Empty => new ConnectorState();
    }
}
