// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.SecurityCenter
{
    /// <summary>
    /// This is a continuous export that exports findings to a Pub/Sub topic.
    /// 
    /// To get more information about OrganizationNotificationConfig, see:
    /// 
    /// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/organizations.locations.notificationConfigs)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/security-command-center/docs)
    /// 
    /// ## Example Usage
    /// 
    /// ### Scc V2 Organization Notification Config Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sccV2OrganizationNotificationConfig = new Gcp.PubSub.Topic("scc_v2_organization_notification_config", new()
    ///     {
    ///         Name = "my-topic",
    ///     });
    /// 
    ///     var customOrganizationNotificationConfig = new Gcp.SecurityCenter.V2OrganizationNotificationConfig("custom_organization_notification_config", new()
    ///     {
    ///         ConfigId = "my-config",
    ///         Organization = "123456789",
    ///         Location = "global",
    ///         Description = "My custom Cloud Security Command Center Finding Organization Notification Configuration",
    ///         PubsubTopic = sccV2OrganizationNotificationConfig.Id,
    ///         StreamingConfig = new Gcp.SecurityCenter.Inputs.V2OrganizationNotificationConfigStreamingConfigArgs
    ///         {
    ///             Filter = "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// OrganizationNotificationConfig can be imported using any of these accepted formats:
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, OrganizationNotificationConfig can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig")]
    public partial class V2OrganizationNotificationConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This must be unique within the organization.
        /// </summary>
        [Output("configId")]
        public Output<string> ConfigId { get; private set; } = null!;

        /// <summary>
        /// The description of the notification config (max of 1024 characters).
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// location Id is provided by organization. If not provided, Use global as default.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of this notification config, in the format
        /// `organizations/{{organization}}/notificationConfigs/{{config_id}}`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The organization whose Cloud Security Command Center the Notification
        /// Config lives in.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// The Pub/Sub topic to send notifications to. Its format is
        /// "projects/[project_id]/topics/[topic]".
        /// </summary>
        [Output("pubsubTopic")]
        public Output<string> PubsubTopic { get; private set; } = null!;

        /// <summary>
        /// The service account that needs "pubsub.topics.publish" permission to
        /// publish to the Pub/Sub topic.
        /// </summary>
        [Output("serviceAccount")]
        public Output<string> ServiceAccount { get; private set; } = null!;

        /// <summary>
        /// The config for triggering streaming-based notifications.
        /// Structure is documented below.
        /// </summary>
        [Output("streamingConfig")]
        public Output<Outputs.V2OrganizationNotificationConfigStreamingConfig> StreamingConfig { get; private set; } = null!;


        /// <summary>
        /// Create a V2OrganizationNotificationConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public V2OrganizationNotificationConfig(string name, V2OrganizationNotificationConfigArgs args, CustomResourceOptions? options = null)
            : base("gcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig", name, args ?? new V2OrganizationNotificationConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private V2OrganizationNotificationConfig(string name, Input<string> id, V2OrganizationNotificationConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing V2OrganizationNotificationConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static V2OrganizationNotificationConfig Get(string name, Input<string> id, V2OrganizationNotificationConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new V2OrganizationNotificationConfig(name, id, state, options);
        }
    }

    public sealed class V2OrganizationNotificationConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This must be unique within the organization.
        /// </summary>
        [Input("configId", required: true)]
        public Input<string> ConfigId { get; set; } = null!;

        /// <summary>
        /// The description of the notification config (max of 1024 characters).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// location Id is provided by organization. If not provided, Use global as default.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The organization whose Cloud Security Command Center the Notification
        /// Config lives in.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// The Pub/Sub topic to send notifications to. Its format is
        /// "projects/[project_id]/topics/[topic]".
        /// </summary>
        [Input("pubsubTopic", required: true)]
        public Input<string> PubsubTopic { get; set; } = null!;

        /// <summary>
        /// The config for triggering streaming-based notifications.
        /// Structure is documented below.
        /// </summary>
        [Input("streamingConfig", required: true)]
        public Input<Inputs.V2OrganizationNotificationConfigStreamingConfigArgs> StreamingConfig { get; set; } = null!;

        public V2OrganizationNotificationConfigArgs()
        {
        }
        public static new V2OrganizationNotificationConfigArgs Empty => new V2OrganizationNotificationConfigArgs();
    }

    public sealed class V2OrganizationNotificationConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This must be unique within the organization.
        /// </summary>
        [Input("configId")]
        public Input<string>? ConfigId { get; set; }

        /// <summary>
        /// The description of the notification config (max of 1024 characters).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// location Id is provided by organization. If not provided, Use global as default.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of this notification config, in the format
        /// `organizations/{{organization}}/notificationConfigs/{{config_id}}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization whose Cloud Security Command Center the Notification
        /// Config lives in.
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// The Pub/Sub topic to send notifications to. Its format is
        /// "projects/[project_id]/topics/[topic]".
        /// </summary>
        [Input("pubsubTopic")]
        public Input<string>? PubsubTopic { get; set; }

        /// <summary>
        /// The service account that needs "pubsub.topics.publish" permission to
        /// publish to the Pub/Sub topic.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// The config for triggering streaming-based notifications.
        /// Structure is documented below.
        /// </summary>
        [Input("streamingConfig")]
        public Input<Inputs.V2OrganizationNotificationConfigStreamingConfigGetArgs>? StreamingConfig { get; set; }

        public V2OrganizationNotificationConfigState()
        {
        }
        public static new V2OrganizationNotificationConfigState Empty => new V2OrganizationNotificationConfigState();
    }
}
