// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.SecurityCenter
{
    /// <summary>
    /// A Cloud Security Command Center (Cloud SCC) notification configs. A
    /// notification config is a Cloud SCC resource that contains the
    /// configuration to send notifications for create/update events of
    /// findings, assets and etc.
    /// &gt; **Note:** In order to use Cloud SCC resources, your organization must be enrolled
    /// in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
    /// Without doing so, you may run into errors during resource creation.
    /// 
    /// To get more information about NotificationConfig, see:
    /// 
    /// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.notificationConfigs)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/security-command-center/docs)
    /// 
    /// ## Example Usage
    /// ### Scc Notification Config Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var sccNotification = new Gcp.PubSub.Topic("sccNotification", new Gcp.PubSub.TopicArgs
    ///         {
    ///         });
    ///         var customNotificationConfig = new Gcp.SecurityCenter.NotificationConfig("customNotificationConfig", new Gcp.SecurityCenter.NotificationConfigArgs
    ///         {
    ///             ConfigId = "my-config",
    ///             Organization = "123456789",
    ///             Description = "My custom Cloud Security Command Center Finding Notification Configuration",
    ///             PubsubTopic = sccNotification.Id,
    ///             StreamingConfig = new Gcp.SecurityCenter.Inputs.NotificationConfigStreamingConfigArgs
    ///             {
    ///                 Filter = "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// NotificationConfig can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:securitycenter/notificationConfig:NotificationConfig default organizations/{{organization}}/notificationConfigs/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:securitycenter/notificationConfig:NotificationConfig default {{organization}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:securitycenter/notificationConfig:NotificationConfig")]
    public partial class NotificationConfig : Pulumi.CustomResource
    {
        /// <summary>
        /// This must be unique within the organization.
        /// </summary>
        [Output("configId")]
        public Output<string> ConfigId { get; private set; } = null!;

        /// <summary>
        /// The description of the notification config (max of 1024 characters).
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The resource name of this notification config, in the format
        /// 'organizations/{{organization}}/notificationConfigs/{{config_id}}'.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The organization whose Cloud Security Command Center the Notification
        /// Config lives in.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// The Pub/Sub topic to send notifications to. Its format is
        /// "projects/[project_id]/topics/[topic]".
        /// </summary>
        [Output("pubsubTopic")]
        public Output<string> PubsubTopic { get; private set; } = null!;

        /// <summary>
        /// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
        /// </summary>
        [Output("serviceAccount")]
        public Output<string> ServiceAccount { get; private set; } = null!;

        /// <summary>
        /// The config for triggering streaming-based notifications.
        /// Structure is documented below.
        /// </summary>
        [Output("streamingConfig")]
        public Output<Outputs.NotificationConfigStreamingConfig> StreamingConfig { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationConfig(string name, NotificationConfigArgs args, CustomResourceOptions? options = null)
            : base("gcp:securitycenter/notificationConfig:NotificationConfig", name, args ?? new NotificationConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationConfig(string name, Input<string> id, NotificationConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:securitycenter/notificationConfig:NotificationConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationConfig Get(string name, Input<string> id, NotificationConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationConfig(name, id, state, options);
        }
    }

    public sealed class NotificationConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This must be unique within the organization.
        /// </summary>
        [Input("configId", required: true)]
        public Input<string> ConfigId { get; set; } = null!;

        /// <summary>
        /// The description of the notification config (max of 1024 characters).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The organization whose Cloud Security Command Center the Notification
        /// Config lives in.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// The Pub/Sub topic to send notifications to. Its format is
        /// "projects/[project_id]/topics/[topic]".
        /// </summary>
        [Input("pubsubTopic", required: true)]
        public Input<string> PubsubTopic { get; set; } = null!;

        /// <summary>
        /// The config for triggering streaming-based notifications.
        /// Structure is documented below.
        /// </summary>
        [Input("streamingConfig", required: true)]
        public Input<Inputs.NotificationConfigStreamingConfigArgs> StreamingConfig { get; set; } = null!;

        public NotificationConfigArgs()
        {
        }
    }

    public sealed class NotificationConfigState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This must be unique within the organization.
        /// </summary>
        [Input("configId")]
        public Input<string>? ConfigId { get; set; }

        /// <summary>
        /// The description of the notification config (max of 1024 characters).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The resource name of this notification config, in the format
        /// 'organizations/{{organization}}/notificationConfigs/{{config_id}}'.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization whose Cloud Security Command Center the Notification
        /// Config lives in.
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// The Pub/Sub topic to send notifications to. Its format is
        /// "projects/[project_id]/topics/[topic]".
        /// </summary>
        [Input("pubsubTopic")]
        public Input<string>? PubsubTopic { get; set; }

        /// <summary>
        /// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// The config for triggering streaming-based notifications.
        /// Structure is documented below.
        /// </summary>
        [Input("streamingConfig")]
        public Input<Inputs.NotificationConfigStreamingConfigGetArgs>? StreamingConfig { get; set; }

        public NotificationConfigState()
        {
        }
    }
}
