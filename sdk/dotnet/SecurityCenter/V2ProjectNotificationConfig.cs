// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.SecurityCenter
{
    /// <summary>
    /// This is a continuous export that exports findings to a Pub/Sub topic.
    /// 
    /// To get more information about ProjectNotificationConfig, see:
    /// 
    /// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/projects.locations.notificationConfigs)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/security-command-center/docs)
    /// 
    /// ## Example Usage
    /// 
    /// ### Scc V2 Project Notification Config Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sccV2ProjectNotification = new Gcp.PubSub.Topic("scc_v2_project_notification", new()
    ///     {
    ///         Name = "my-topic",
    ///     });
    /// 
    ///     var customNotificationConfig = new Gcp.SecurityCenter.V2ProjectNotificationConfig("custom_notification_config", new()
    ///     {
    ///         ConfigId = "my-config",
    ///         Project = "my-project-name",
    ///         Location = "global",
    ///         Description = "My custom Cloud Security Command Center Finding Notification Configuration",
    ///         PubsubTopic = sccV2ProjectNotification.Id,
    ///         StreamingConfig = new Gcp.SecurityCenter.Inputs.V2ProjectNotificationConfigStreamingConfigArgs
    ///         {
    ///             Filter = "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ProjectNotificationConfig can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/notificationConfigs/{{config_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{config_id}}`
    /// 
    /// * `{{location}}/{{config_id}}`
    /// 
    /// When using the `pulumi import` command, ProjectNotificationConfig can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig default projects/{{project}}/locations/{{location}}/notificationConfigs/{{config_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig default {{project}}/{{location}}/{{config_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig default {{location}}/{{config_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig")]
    public partial class V2ProjectNotificationConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This must be unique within the project.
        /// </summary>
        [Output("configId")]
        public Output<string> ConfigId { get; private set; } = null!;

        /// <summary>
        /// The description of the notification config (max of 1024 characters).
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Location ID of the parent organization. Only global is supported at the moment.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of this notification config, in the format
        /// `projects/{{projectId}}/locations/{{location}}/notificationConfigs/{{config_id}}`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
        /// </summary>
        [Output("pubsubTopic")]
        public Output<string?> PubsubTopic { get; private set; } = null!;

        /// <summary>
        /// The service account that needs "pubsub.topics.publish" permission to
        /// publish to the Pub/Sub topic.
        /// </summary>
        [Output("serviceAccount")]
        public Output<string> ServiceAccount { get; private set; } = null!;

        /// <summary>
        /// The config for triggering streaming-based notifications.
        /// Structure is documented below.
        /// </summary>
        [Output("streamingConfig")]
        public Output<Outputs.V2ProjectNotificationConfigStreamingConfig> StreamingConfig { get; private set; } = null!;


        /// <summary>
        /// Create a V2ProjectNotificationConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public V2ProjectNotificationConfig(string name, V2ProjectNotificationConfigArgs args, CustomResourceOptions? options = null)
            : base("gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig", name, args ?? new V2ProjectNotificationConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private V2ProjectNotificationConfig(string name, Input<string> id, V2ProjectNotificationConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing V2ProjectNotificationConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static V2ProjectNotificationConfig Get(string name, Input<string> id, V2ProjectNotificationConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new V2ProjectNotificationConfig(name, id, state, options);
        }
    }

    public sealed class V2ProjectNotificationConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This must be unique within the project.
        /// </summary>
        [Input("configId", required: true)]
        public Input<string> ConfigId { get; set; } = null!;

        /// <summary>
        /// The description of the notification config (max of 1024 characters).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Location ID of the parent organization. Only global is supported at the moment.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
        /// </summary>
        [Input("pubsubTopic")]
        public Input<string>? PubsubTopic { get; set; }

        /// <summary>
        /// The config for triggering streaming-based notifications.
        /// Structure is documented below.
        /// </summary>
        [Input("streamingConfig", required: true)]
        public Input<Inputs.V2ProjectNotificationConfigStreamingConfigArgs> StreamingConfig { get; set; } = null!;

        public V2ProjectNotificationConfigArgs()
        {
        }
        public static new V2ProjectNotificationConfigArgs Empty => new V2ProjectNotificationConfigArgs();
    }

    public sealed class V2ProjectNotificationConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This must be unique within the project.
        /// </summary>
        [Input("configId")]
        public Input<string>? ConfigId { get; set; }

        /// <summary>
        /// The description of the notification config (max of 1024 characters).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Location ID of the parent organization. Only global is supported at the moment.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of this notification config, in the format
        /// `projects/{{projectId}}/locations/{{location}}/notificationConfigs/{{config_id}}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
        /// </summary>
        [Input("pubsubTopic")]
        public Input<string>? PubsubTopic { get; set; }

        /// <summary>
        /// The service account that needs "pubsub.topics.publish" permission to
        /// publish to the Pub/Sub topic.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// The config for triggering streaming-based notifications.
        /// Structure is documented below.
        /// </summary>
        [Input("streamingConfig")]
        public Input<Inputs.V2ProjectNotificationConfigStreamingConfigGetArgs>? StreamingConfig { get; set; }

        public V2ProjectNotificationConfigState()
        {
        }
        public static new V2ProjectNotificationConfigState Empty => new V2ProjectNotificationConfigState();
    }
}
