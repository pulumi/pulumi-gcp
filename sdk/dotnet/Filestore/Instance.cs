// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Filestore
{
    /// <summary>
    /// A Google Cloud Filestore instance.
    /// 
    /// To get more information about Instance, see:
    /// 
    /// * [API documentation](https://cloud.google.com/filestore/docs/reference/rest/v1beta1/projects.locations.instances/create)
    /// * How-to Guides
    ///     * [Copying Data In/Out](https://cloud.google.com/filestore/docs/copying-data)
    ///     * [Official Documentation](https://cloud.google.com/filestore/docs/creating-instances)
    ///     * [Use with Kubernetes](https://cloud.google.com/filestore/docs/accessing-fileshares)
    /// 
    /// ## Example Usage
    /// 
    /// ### Filestore Instance Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Filestore.Instance("instance", new()
    ///     {
    ///         Name = "test-instance",
    ///         Location = "us-central1-b",
    ///         Tier = "BASIC_HDD",
    ///         FileShares = new Gcp.Filestore.Inputs.InstanceFileSharesArgs
    ///         {
    ///             CapacityGb = 1024,
    ///             Name = "share1",
    ///         },
    ///         Networks = new[]
    ///         {
    ///             new Gcp.Filestore.Inputs.InstanceNetworkArgs
    ///             {
    ///                 Network = "default",
    ///                 Modes = new[]
    ///                 {
    ///                     "MODE_IPV4",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Filestore Instance Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Filestore.Instance("instance", new()
    ///     {
    ///         Name = "test-instance",
    ///         Location = "us-central1-b",
    ///         Tier = "BASIC_SSD",
    ///         FileShares = new Gcp.Filestore.Inputs.InstanceFileSharesArgs
    ///         {
    ///             CapacityGb = 2560,
    ///             Name = "share1",
    ///             NfsExportOptions = new[]
    ///             {
    ///                 new Gcp.Filestore.Inputs.InstanceFileSharesNfsExportOptionArgs
    ///                 {
    ///                     IpRanges = new[]
    ///                     {
    ///                         "10.0.0.0/24",
    ///                     },
    ///                     AccessMode = "READ_WRITE",
    ///                     SquashMode = "NO_ROOT_SQUASH",
    ///                 },
    ///                 new Gcp.Filestore.Inputs.InstanceFileSharesNfsExportOptionArgs
    ///                 {
    ///                     IpRanges = new[]
    ///                     {
    ///                         "10.10.0.0/24",
    ///                     },
    ///                     AccessMode = "READ_ONLY",
    ///                     SquashMode = "ROOT_SQUASH",
    ///                     AnonUid = 123,
    ///                     AnonGid = 456,
    ///                 },
    ///             },
    ///         },
    ///         Networks = new[]
    ///         {
    ///             new Gcp.Filestore.Inputs.InstanceNetworkArgs
    ///             {
    ///                 Network = "default",
    ///                 Modes = new[]
    ///                 {
    ///                     "MODE_IPV4",
    ///                 },
    ///                 ConnectMode = "DIRECT_PEERING",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Filestore Instance Protocol
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Filestore.Instance("instance", new()
    ///     {
    ///         Name = "test-instance",
    ///         Location = "us-central1",
    ///         Tier = "ENTERPRISE",
    ///         Protocol = "NFS_V4_1",
    ///         FileShares = new Gcp.Filestore.Inputs.InstanceFileSharesArgs
    ///         {
    ///             CapacityGb = 1024,
    ///             Name = "share1",
    ///         },
    ///         Networks = new[]
    ///         {
    ///             new Gcp.Filestore.Inputs.InstanceNetworkArgs
    ///             {
    ///                 Network = "default",
    ///                 Modes = new[]
    ///                 {
    ///                     "MODE_IPV4",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Filestore Instance Enterprise
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var filestoreKeyring = new Gcp.Kms.KeyRing("filestore_keyring", new()
    ///     {
    ///         Name = "filestore-keyring",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var filestoreKey = new Gcp.Kms.CryptoKey("filestore_key", new()
    ///     {
    ///         Name = "filestore-key",
    ///         KeyRing = filestoreKeyring.Id,
    ///     });
    /// 
    ///     var instance = new Gcp.Filestore.Instance("instance", new()
    ///     {
    ///         Name = "test-instance",
    ///         Location = "us-central1",
    ///         Tier = "ENTERPRISE",
    ///         FileShares = new Gcp.Filestore.Inputs.InstanceFileSharesArgs
    ///         {
    ///             CapacityGb = 1024,
    ///             Name = "share1",
    ///         },
    ///         Networks = new[]
    ///         {
    ///             new Gcp.Filestore.Inputs.InstanceNetworkArgs
    ///             {
    ///                 Network = "default",
    ///                 Modes = new[]
    ///                 {
    ///                     "MODE_IPV4",
    ///                 },
    ///             },
    ///         },
    ///         KmsKeyName = filestoreKey.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Instance can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/instances/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:filestore/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:filestore/instance:Instance default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:filestore/instance:Instance default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:filestore/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the instance is protected against deletion.
        /// </summary>
        [Output("deletionProtectionEnabled")]
        public Output<bool?> DeletionProtectionEnabled { get; private set; } = null!;

        /// <summary>
        /// The reason for enabling deletion protection.
        /// </summary>
        [Output("deletionProtectionReason")]
        public Output<string?> DeletionProtectionReason { get; private set; } = null!;

        /// <summary>
        /// A description of the instance.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Directory Services configuration. Should only be set if protocol is "NFS_V4_1".
        /// </summary>
        [Output("directoryServices")]
        public Output<Outputs.InstanceDirectoryServices?> DirectoryServices { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Output only fields for replication configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("effectiveReplications")]
        public Output<ImmutableArray<Outputs.InstanceEffectiveReplication>> EffectiveReplications { get; private set; } = null!;

        /// <summary>
        /// Server-specified ETag for the instance resource to prevent
        /// simultaneous updates from overwriting each other.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// File system shares on the instance. For this version, only a
        /// single file share is supported.
        /// Structure is documented below.
        /// </summary>
        [Output("fileShares")]
        public Output<Outputs.InstanceFileShares> FileShares { get; private set; } = null!;

        /// <summary>
        /// Replication configuration, once set, this cannot be updated. Addtionally this should be specified on the replica
        /// instance only, indicating the active as the peer_instance
        /// </summary>
        [Output("initialReplication")]
        public Output<Outputs.InstanceInitialReplication?> InitialReplication { get; private set; } = null!;

        /// <summary>
        /// KMS key name used for data encryption.
        /// </summary>
        [Output("kmsKeyName")]
        public Output<string?> KmsKeyName { get; private set; } = null!;

        /// <summary>
        /// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
        /// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
        /// resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the location of the instance. This can be a region for ENTERPRISE tier instances.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the instance.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// VPC networks to which the instance is connected. For this version,
        /// only a single network is supported.
        /// Structure is documented below.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.InstanceNetwork>> Networks { get; private set; } = null!;

        /// <summary>
        /// Performance configuration for the instance. If not provided, the default performance settings will be used.
        /// </summary>
        [Output("performanceConfig")]
        public Output<Outputs.InstancePerformanceConfig?> PerformanceConfig { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Either NFSv3, for using NFS version 3 as file sharing protocol, or NFSv4.1, for using NFS version 4.1 as file sharing
        /// protocol. NFSv4.1 can be used with HIGH_SCALE_SSD, ZONAL, REGIONAL and ENTERPRISE. The default is NFSv3. Default value:
        /// "NFS_V3" Possible values: ["NFS_V3", "NFS_V4_1"]
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags.
        /// Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored when
        /// empty. The field is immutable and causes resource replacement when mutated. This field is only set at create time and
        /// modifying this field after creation will trigger recreation. To apply tags to an existing resource, see the
        /// 'google_tags_tag_value' resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The service tier of the instance.
        /// Possible values include: STANDARD, PREMIUM, BASIC_HDD, BASIC_SSD, HIGH_SCALE_SSD, ZONAL, REGIONAL and ENTERPRISE
        /// </summary>
        [Output("tier")]
        public Output<string> Tier { get; private set; } = null!;

        /// <summary>
        /// The name of the Filestore zone of the instance.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("gcp:filestore/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:filestore/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the instance is protected against deletion.
        /// </summary>
        [Input("deletionProtectionEnabled")]
        public Input<bool>? DeletionProtectionEnabled { get; set; }

        /// <summary>
        /// The reason for enabling deletion protection.
        /// </summary>
        [Input("deletionProtectionReason")]
        public Input<string>? DeletionProtectionReason { get; set; }

        /// <summary>
        /// A description of the instance.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Directory Services configuration. Should only be set if protocol is "NFS_V4_1".
        /// </summary>
        [Input("directoryServices")]
        public Input<Inputs.InstanceDirectoryServicesArgs>? DirectoryServices { get; set; }

        /// <summary>
        /// File system shares on the instance. For this version, only a
        /// single file share is supported.
        /// Structure is documented below.
        /// </summary>
        [Input("fileShares", required: true)]
        public Input<Inputs.InstanceFileSharesArgs> FileShares { get; set; } = null!;

        /// <summary>
        /// Replication configuration, once set, this cannot be updated. Addtionally this should be specified on the replica
        /// instance only, indicating the active as the peer_instance
        /// </summary>
        [Input("initialReplication")]
        public Input<Inputs.InstanceInitialReplicationArgs>? InitialReplication { get; set; }

        /// <summary>
        /// KMS key name used for data encryption.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
        /// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
        /// resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the location of the instance. This can be a region for ENTERPRISE tier instances.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks", required: true)]
        private InputList<Inputs.InstanceNetworkArgs>? _networks;

        /// <summary>
        /// VPC networks to which the instance is connected. For this version,
        /// only a single network is supported.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.InstanceNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.InstanceNetworkArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// Performance configuration for the instance. If not provided, the default performance settings will be used.
        /// </summary>
        [Input("performanceConfig")]
        public Input<Inputs.InstancePerformanceConfigArgs>? PerformanceConfig { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Either NFSv3, for using NFS version 3 as file sharing protocol, or NFSv4.1, for using NFS version 4.1 as file sharing
        /// protocol. NFSv4.1 can be used with HIGH_SCALE_SSD, ZONAL, REGIONAL and ENTERPRISE. The default is NFSv3. Default value:
        /// "NFS_V3" Possible values: ["NFS_V3", "NFS_V4_1"]
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags.
        /// Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored when
        /// empty. The field is immutable and causes resource replacement when mutated. This field is only set at create time and
        /// modifying this field after creation will trigger recreation. To apply tags to an existing resource, see the
        /// 'google_tags_tag_value' resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The service tier of the instance.
        /// Possible values include: STANDARD, PREMIUM, BASIC_HDD, BASIC_SSD, HIGH_SCALE_SSD, ZONAL, REGIONAL and ENTERPRISE
        /// </summary>
        [Input("tier", required: true)]
        public Input<string> Tier { get; set; } = null!;

        /// <summary>
        /// The name of the Filestore zone of the instance.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Indicates whether the instance is protected against deletion.
        /// </summary>
        [Input("deletionProtectionEnabled")]
        public Input<bool>? DeletionProtectionEnabled { get; set; }

        /// <summary>
        /// The reason for enabling deletion protection.
        /// </summary>
        [Input("deletionProtectionReason")]
        public Input<string>? DeletionProtectionReason { get; set; }

        /// <summary>
        /// A description of the instance.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Directory Services configuration. Should only be set if protocol is "NFS_V4_1".
        /// </summary>
        [Input("directoryServices")]
        public Input<Inputs.InstanceDirectoryServicesGetArgs>? DirectoryServices { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("effectiveReplications")]
        private InputList<Inputs.InstanceEffectiveReplicationGetArgs>? _effectiveReplications;

        /// <summary>
        /// Output only fields for replication configuration.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.InstanceEffectiveReplicationGetArgs> EffectiveReplications
        {
            get => _effectiveReplications ?? (_effectiveReplications = new InputList<Inputs.InstanceEffectiveReplicationGetArgs>());
            set => _effectiveReplications = value;
        }

        /// <summary>
        /// Server-specified ETag for the instance resource to prevent
        /// simultaneous updates from overwriting each other.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// File system shares on the instance. For this version, only a
        /// single file share is supported.
        /// Structure is documented below.
        /// </summary>
        [Input("fileShares")]
        public Input<Inputs.InstanceFileSharesGetArgs>? FileShares { get; set; }

        /// <summary>
        /// Replication configuration, once set, this cannot be updated. Addtionally this should be specified on the replica
        /// instance only, indicating the active as the peer_instance
        /// </summary>
        [Input("initialReplication")]
        public Input<Inputs.InstanceInitialReplicationGetArgs>? InitialReplication { get; set; }

        /// <summary>
        /// KMS key name used for data encryption.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
        /// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
        /// resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the location of the instance. This can be a region for ENTERPRISE tier instances.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.InstanceNetworkGetArgs>? _networks;

        /// <summary>
        /// VPC networks to which the instance is connected. For this version,
        /// only a single network is supported.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.InstanceNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.InstanceNetworkGetArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// Performance configuration for the instance. If not provided, the default performance settings will be used.
        /// </summary>
        [Input("performanceConfig")]
        public Input<Inputs.InstancePerformanceConfigGetArgs>? PerformanceConfig { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Either NFSv3, for using NFS version 3 as file sharing protocol, or NFSv4.1, for using NFS version 4.1 as file sharing
        /// protocol. NFSv4.1 can be used with HIGH_SCALE_SSD, ZONAL, REGIONAL and ENTERPRISE. The default is NFSv3. Default value:
        /// "NFS_V3" Possible values: ["NFS_V3", "NFS_V4_1"]
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags.
        /// Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored when
        /// empty. The field is immutable and causes resource replacement when mutated. This field is only set at create time and
        /// modifying this field after creation will trigger recreation. To apply tags to an existing resource, see the
        /// 'google_tags_tag_value' resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The service tier of the instance.
        /// Possible values include: STANDARD, PREMIUM, BASIC_HDD, BASIC_SSD, HIGH_SCALE_SSD, ZONAL, REGIONAL and ENTERPRISE
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// The name of the Filestore zone of the instance.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
