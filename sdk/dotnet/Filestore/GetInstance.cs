// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Filestore
{
    public static class GetInstance
    {
        /// <summary>
        /// Get info about a Google Cloud Filestore instance.
        /// 
        /// ## Example Usage
        /// 
        /// ```tf
        /// data "google_filestore_instance" "my_instance" {
        ///   name = "my-filestore-instance"
        /// }
        /// 
        /// output "instance_ip_addresses" {
        ///   value = data.google_filestore_instance.my_instance.networks.ip_addresses
        /// }
        /// 
        /// output "instance_connect_mode" {
        ///   value = data.google_filestore_instance.my_instance.networks.connect_mode
        /// }
        /// 
        /// output "instance_file_share_name" {
        ///   value = data.google_filestore_instance.my_instance.file_shares.name
        /// }
        /// ```
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("gcp:filestore/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Get info about a Google Cloud Filestore instance.
        /// 
        /// ## Example Usage
        /// 
        /// ```tf
        /// data "google_filestore_instance" "my_instance" {
        ///   name = "my-filestore-instance"
        /// }
        /// 
        /// output "instance_ip_addresses" {
        ///   value = data.google_filestore_instance.my_instance.networks.ip_addresses
        /// }
        /// 
        /// output "instance_connect_mode" {
        ///   value = data.google_filestore_instance.my_instance.networks.connect_mode
        /// }
        /// 
        /// output "instance_file_share_name" {
        ///   value = data.google_filestore_instance.my_instance.file_shares.name
        /// }
        /// ```
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("gcp:filestore/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the location of the instance. This 
        /// can be a region for ENTERPRISE tier instances. If it is not provided,
        /// the provider region or zone is used.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The name of a Filestore instance.
        /// 
        /// - - -
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the location of the instance. This 
        /// can be a region for ENTERPRISE tier instances. If it is not provided,
        /// the provider region or zone is used.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of a Filestore instance.
        /// 
        /// - - -
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        public readonly string CreateTime;
        public readonly string Description;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly string Etag;
        public readonly ImmutableArray<Outputs.GetInstanceFileShareResult> FileShares;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KmsKeyName;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string? Location;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetInstanceNetworkResult> Networks;
        public readonly string? Project;
        public readonly string Protocol;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly string Tier;
        public readonly string Zone;

        [OutputConstructor]
        private GetInstanceResult(
            string createTime,

            string description,

            ImmutableDictionary<string, string> effectiveLabels,

            string etag,

            ImmutableArray<Outputs.GetInstanceFileShareResult> fileShares,

            string id,

            string kmsKeyName,

            ImmutableDictionary<string, string> labels,

            string? location,

            string name,

            ImmutableArray<Outputs.GetInstanceNetworkResult> networks,

            string? project,

            string protocol,

            ImmutableDictionary<string, string> pulumiLabels,

            string tier,

            string zone)
        {
            CreateTime = createTime;
            Description = description;
            EffectiveLabels = effectiveLabels;
            Etag = etag;
            FileShares = fileShares;
            Id = id;
            KmsKeyName = kmsKeyName;
            Labels = labels;
            Location = location;
            Name = name;
            Networks = networks;
            Project = project;
            Protocol = protocol;
            PulumiLabels = pulumiLabels;
            Tier = tier;
            Zone = zone;
        }
    }
}
