// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Eventarc
{
    /// <summary>
    /// The Eventarc MessageBus resource
    /// 
    /// To get more information about MessageBus, see:
    /// 
    /// * [API documentation](https://cloud.google.com/eventarc/docs/reference/rest/v1/projects.locations.messageBuses)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/eventarc/advanced/docs/publish-events/create-bus)
    /// 
    /// ## Example Usage
    /// 
    /// ### Eventarc Message Bus With Cmek
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testProject = Gcp.Organizations.GetProject.Invoke(new()
    ///     {
    ///         ProjectId = "my-project-name",
    ///     });
    /// 
    ///     var testKeyRing = Gcp.Kms.GetKMSKeyRing.Invoke(new()
    ///     {
    ///         Name = "keyring",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var key = Gcp.Kms.GetKMSCryptoKey.Invoke(new()
    ///     {
    ///         Name = "key",
    ///         KeyRing = testKeyRing.Apply(getKMSKeyRingResult =&gt; getKMSKeyRingResult.Id),
    ///     });
    /// 
    ///     var keyMember = new Gcp.Kms.CryptoKeyIAMMember("key_member", new()
    ///     {
    ///         CryptoKeyId = key.Apply(getKMSCryptoKeyResult =&gt; getKMSCryptoKeyResult.Id),
    ///         Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    ///         Member = $"serviceAccount:service-{testProject.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-eventarc.iam.gserviceaccount.com",
    ///     });
    /// 
    ///     var primary = new Gcp.Eventarc.MessageBus("primary", new()
    ///     {
    ///         Location = "us-central1",
    ///         MessageBusId = "some-message-bus",
    ///         CryptoKeyName = key.Apply(getKMSCryptoKeyResult =&gt; getKMSCryptoKeyResult.Id),
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             keyMember,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// MessageBus can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/messageBuses/{{message_bus_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{message_bus_id}}`
    /// 
    /// * `{{location}}/{{message_bus_id}}`
    /// 
    /// When using the `pulumi import` command, MessageBus can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:eventarc/messageBus:MessageBus default projects/{{project}}/locations/{{location}}/messageBuses/{{message_bus_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:eventarc/messageBus:MessageBus default {{project}}/{{location}}/{{message_bus_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:eventarc/messageBus:MessageBus default {{location}}/{{message_bus_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:eventarc/messageBus:MessageBus")]
    public partial class MessageBus : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. Resource annotations.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Output only. The creation time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Optional. Resource name of a KMS crypto key (managed by the user) used to
        /// encrypt/decrypt their event data.
        /// It must match the pattern
        /// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
        /// </summary>
        [Output("cryptoKeyName")]
        public Output<string?> CryptoKeyName { get; private set; } = null!;

        /// <summary>
        /// Optional. Resource display name.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Output only. This checksum is computed by the server based on the value of other
        /// fields, and might be sent only on update and delete requests to ensure that
        /// the client has an up-to-date value before proceeding.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Optional. Resource labels.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The configuration for Platform Telemetry logging for Eventarc Advanced
        /// resources.
        /// Structure is documented below.
        /// </summary>
        [Output("loggingConfig")]
        public Output<Outputs.MessageBusLoggingConfig> LoggingConfig { get; private set; } = null!;

        /// <summary>
        /// Required. The user-provided ID to be assigned to the MessageBus. It should match the
        /// format `^a-z?$`.
        /// </summary>
        [Output("messageBusId")]
        public Output<string> MessageBusId { get; private set; } = null!;

        /// <summary>
        /// Identifier. Resource name of the form
        /// projects/{project}/locations/{location}/messageBuses/{message_bus}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Output only. Server assigned unique identifier for the channel. The value is a UUID4
        /// string and guaranteed to remain unchanged until the resource is deleted.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Output only. The last-modified time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a MessageBus resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MessageBus(string name, MessageBusArgs args, CustomResourceOptions? options = null)
            : base("gcp:eventarc/messageBus:MessageBus", name, args ?? new MessageBusArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MessageBus(string name, Input<string> id, MessageBusState? state = null, CustomResourceOptions? options = null)
            : base("gcp:eventarc/messageBus:MessageBus", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MessageBus resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MessageBus Get(string name, Input<string> id, MessageBusState? state = null, CustomResourceOptions? options = null)
        {
            return new MessageBus(name, id, state, options);
        }
    }

    public sealed class MessageBusArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. Resource annotations.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Optional. Resource name of a KMS crypto key (managed by the user) used to
        /// encrypt/decrypt their event data.
        /// It must match the pattern
        /// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
        /// </summary>
        [Input("cryptoKeyName")]
        public Input<string>? CryptoKeyName { get; set; }

        /// <summary>
        /// Optional. Resource display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Resource labels.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The configuration for Platform Telemetry logging for Eventarc Advanced
        /// resources.
        /// Structure is documented below.
        /// </summary>
        [Input("loggingConfig")]
        public Input<Inputs.MessageBusLoggingConfigArgs>? LoggingConfig { get; set; }

        /// <summary>
        /// Required. The user-provided ID to be assigned to the MessageBus. It should match the
        /// format `^a-z?$`.
        /// </summary>
        [Input("messageBusId", required: true)]
        public Input<string> MessageBusId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public MessageBusArgs()
        {
        }
        public static new MessageBusArgs Empty => new MessageBusArgs();
    }

    public sealed class MessageBusState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. Resource annotations.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Output only. The creation time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Optional. Resource name of a KMS crypto key (managed by the user) used to
        /// encrypt/decrypt their event data.
        /// It must match the pattern
        /// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
        /// </summary>
        [Input("cryptoKeyName")]
        public Input<string>? CryptoKeyName { get; set; }

        /// <summary>
        /// Optional. Resource display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Output only. This checksum is computed by the server based on the value of other
        /// fields, and might be sent only on update and delete requests to ensure that
        /// the client has an up-to-date value before proceeding.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Resource labels.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The configuration for Platform Telemetry logging for Eventarc Advanced
        /// resources.
        /// Structure is documented below.
        /// </summary>
        [Input("loggingConfig")]
        public Input<Inputs.MessageBusLoggingConfigGetArgs>? LoggingConfig { get; set; }

        /// <summary>
        /// Required. The user-provided ID to be assigned to the MessageBus. It should match the
        /// format `^a-z?$`.
        /// </summary>
        [Input("messageBusId")]
        public Input<string>? MessageBusId { get; set; }

        /// <summary>
        /// Identifier. Resource name of the form
        /// projects/{project}/locations/{location}/messageBuses/{message_bus}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Output only. Server assigned unique identifier for the channel. The value is a UUID4
        /// string and guaranteed to remain unchanged until the resource is deleted.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Output only. The last-modified time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public MessageBusState()
        {
        }
        public static new MessageBusState Empty => new MessageBusState();
    }
}
