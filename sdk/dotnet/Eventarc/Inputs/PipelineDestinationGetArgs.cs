// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Eventarc.Inputs
{

    public sealed class PipelineDestinationGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Represents a config used to authenticate message requests.
        /// Structure is documented below.
        /// </summary>
        [Input("authenticationConfig")]
        public Input<Inputs.PipelineDestinationAuthenticationConfigGetArgs>? AuthenticationConfig { get; set; }

        /// <summary>
        /// Represents a HTTP endpoint destination.
        /// Structure is documented below.
        /// </summary>
        [Input("httpEndpoint")]
        public Input<Inputs.PipelineDestinationHttpEndpointGetArgs>? HttpEndpoint { get; set; }

        /// <summary>
        /// The resource name of the Message Bus to which events should be
        /// published. The Message Bus resource should exist in the same project as
        /// the Pipeline. Format:
        /// `projects/{project}/locations/{location}/messageBuses/{message_bus}`
        /// </summary>
        [Input("messageBus")]
        public Input<string>? MessageBus { get; set; }

        /// <summary>
        /// Represents a network config to be used for destination resolution and
        /// connectivity.
        /// Structure is documented below.
        /// </summary>
        [Input("networkConfig")]
        public Input<Inputs.PipelineDestinationNetworkConfigGetArgs>? NetworkConfig { get; set; }

        /// <summary>
        /// Represents the format of message data.
        /// Structure is documented below.
        /// </summary>
        [Input("outputPayloadFormat")]
        public Input<Inputs.PipelineDestinationOutputPayloadFormatGetArgs>? OutputPayloadFormat { get; set; }

        /// <summary>
        /// The resource name of the Pub/Sub topic to which events should be
        /// published. Format:
        /// `projects/{project}/locations/{location}/topics/{topic}`
        /// </summary>
        [Input("topic")]
        public Input<string>? Topic { get; set; }

        /// <summary>
        /// The resource name of the Workflow whose Executions are triggered by
        /// the events. The Workflow resource should be deployed in the same
        /// project as the Pipeline. Format:
        /// `projects/{project}/locations/{location}/workflows/{workflow}`
        /// </summary>
        [Input("workflow")]
        public Input<string>? Workflow { get; set; }

        public PipelineDestinationGetArgs()
        {
        }
        public static new PipelineDestinationGetArgs Empty => new PipelineDestinationGetArgs();
    }
}
