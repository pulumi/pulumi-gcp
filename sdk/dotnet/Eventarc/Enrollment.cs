// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Eventarc
{
    /// <summary>
    /// The Eventarc Enrollment resource
    /// 
    /// To get more information about Enrollment, see:
    /// 
    /// * [API documentation](https://cloud.google.com/eventarc/docs/reference/rest/v1/projects.locations.enrollments)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/eventarc/advanced/docs/receive-events/create-enrollment)
    /// 
    /// ## Example Usage
    /// 
    /// ### Eventarc Enrollment With Pipeline Destination
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pipeline = new Gcp.Eventarc.Pipeline("pipeline", new()
    ///     {
    ///         Location = "us-central1",
    ///         PipelineId = "some-pipeline",
    ///         Destinations = new[]
    ///         {
    ///             new Gcp.Eventarc.Inputs.PipelineDestinationArgs
    ///             {
    ///                 HttpEndpoint = new Gcp.Eventarc.Inputs.PipelineDestinationHttpEndpointArgs
    ///                 {
    ///                     Uri = "https://10.77.0.0:80/route",
    ///                 },
    ///                 NetworkConfig = new Gcp.Eventarc.Inputs.PipelineDestinationNetworkConfigArgs
    ///                 {
    ///                     NetworkAttachment = "projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var primary = new Gcp.Eventarc.Enrollment("primary", new()
    ///     {
    ///         Location = "us-central1",
    ///         EnrollmentId = "some-enrollment",
    ///         MessageBus = primaryGoogleEventarcMessageBus.Id,
    ///         Destination = pipeline.Id,
    ///         CelMatch = "message.type == 'google.cloud.dataflow.job.v1beta3.statusChanged'",
    ///     });
    /// 
    ///     var messageBus = new Gcp.Eventarc.MessageBus("message_bus", new()
    ///     {
    ///         Location = "us-central1",
    ///         MessageBusId = "some-message-bus",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Enrollment can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/enrollments/{{enrollment_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{enrollment_id}}`
    /// 
    /// * `{{location}}/{{enrollment_id}}`
    /// 
    /// When using the `pulumi import` command, Enrollment can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:eventarc/enrollment:Enrollment default projects/{{project}}/locations/{{location}}/enrollments/{{enrollment_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:eventarc/enrollment:Enrollment default {{project}}/{{location}}/{{enrollment_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:eventarc/enrollment:Enrollment default {{location}}/{{enrollment_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:eventarc/enrollment:Enrollment")]
    public partial class Enrollment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Resource annotations.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `EffectiveAnnotations` for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// A CEL expression identifying which messages this enrollment applies to.
        /// </summary>
        [Output("celMatch")]
        public Output<string> CelMatch { get; private set; } = null!;

        /// <summary>
        /// The creation time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Destination is the Pipeline that the Enrollment is delivering to. It must
        /// point to the full resource name of a Pipeline. Format:
        /// "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
        /// </summary>
        [Output("destination")]
        public Output<string> Destination { get; private set; } = null!;

        /// <summary>
        /// Resource display name.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The user-provided ID to be assigned to the Enrollment. It should match the
        /// format `^a-z?$`.
        /// </summary>
        [Output("enrollmentId")]
        public Output<string> EnrollmentId { get; private set; } = null!;

        /// <summary>
        /// This checksum is computed by the server based on the value of other
        /// fields, and might be sent only on update and delete requests to ensure that
        /// the client has an up-to-date value before proceeding.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Resource labels.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Resource ID segment making up resource `Name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Resource name of the message bus identifying the source of the messages. It
        /// matches the form
        /// projects/{project}/locations/{location}/messageBuses/{messageBus}.
        /// </summary>
        [Output("messageBus")]
        public Output<string> MessageBus { get; private set; } = null!;

        /// <summary>
        /// Resource name of the form
        /// projects/{project}/locations/{location}/enrollments/{enrollment}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Server assigned unique identifier for the channel. The value is a UUID4
        /// string and guaranteed to remain unchanged until the resource is deleted.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The last-modified time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Enrollment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Enrollment(string name, EnrollmentArgs args, CustomResourceOptions? options = null)
            : base("gcp:eventarc/enrollment:Enrollment", name, args ?? new EnrollmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Enrollment(string name, Input<string> id, EnrollmentState? state = null, CustomResourceOptions? options = null)
            : base("gcp:eventarc/enrollment:Enrollment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Enrollment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Enrollment Get(string name, Input<string> id, EnrollmentState? state = null, CustomResourceOptions? options = null)
        {
            return new Enrollment(name, id, state, options);
        }
    }

    public sealed class EnrollmentArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Resource annotations.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `EffectiveAnnotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// A CEL expression identifying which messages this enrollment applies to.
        /// </summary>
        [Input("celMatch", required: true)]
        public Input<string> CelMatch { get; set; } = null!;

        /// <summary>
        /// Destination is the Pipeline that the Enrollment is delivering to. It must
        /// point to the full resource name of a Pipeline. Format:
        /// "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
        /// </summary>
        [Input("destination", required: true)]
        public Input<string> Destination { get; set; } = null!;

        /// <summary>
        /// Resource display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The user-provided ID to be assigned to the Enrollment. It should match the
        /// format `^a-z?$`.
        /// </summary>
        [Input("enrollmentId", required: true)]
        public Input<string> EnrollmentId { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Resource ID segment making up resource `Name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Resource name of the message bus identifying the source of the messages. It
        /// matches the form
        /// projects/{project}/locations/{location}/messageBuses/{messageBus}.
        /// </summary>
        [Input("messageBus", required: true)]
        public Input<string> MessageBus { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public EnrollmentArgs()
        {
        }
        public static new EnrollmentArgs Empty => new EnrollmentArgs();
    }

    public sealed class EnrollmentState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Resource annotations.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `EffectiveAnnotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// A CEL expression identifying which messages this enrollment applies to.
        /// </summary>
        [Input("celMatch")]
        public Input<string>? CelMatch { get; set; }

        /// <summary>
        /// The creation time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Destination is the Pipeline that the Enrollment is delivering to. It must
        /// point to the full resource name of a Pipeline. Format:
        /// "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
        /// </summary>
        [Input("destination")]
        public Input<string>? Destination { get; set; }

        /// <summary>
        /// Resource display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The user-provided ID to be assigned to the Enrollment. It should match the
        /// format `^a-z?$`.
        /// </summary>
        [Input("enrollmentId")]
        public Input<string>? EnrollmentId { get; set; }

        /// <summary>
        /// This checksum is computed by the server based on the value of other
        /// fields, and might be sent only on update and delete requests to ensure that
        /// the client has an up-to-date value before proceeding.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Resource ID segment making up resource `Name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Resource name of the message bus identifying the source of the messages. It
        /// matches the form
        /// projects/{project}/locations/{location}/messageBuses/{messageBus}.
        /// </summary>
        [Input("messageBus")]
        public Input<string>? MessageBus { get; set; }

        /// <summary>
        /// Resource name of the form
        /// projects/{project}/locations/{location}/enrollments/{enrollment}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Server assigned unique identifier for the channel. The value is a UUID4
        /// string and guaranteed to remain unchanged until the resource is deleted.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The last-modified time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public EnrollmentState()
        {
        }
        public static new EnrollmentState Empty => new EnrollmentState();
    }
}
