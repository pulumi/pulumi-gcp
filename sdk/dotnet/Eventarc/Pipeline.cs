// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Eventarc
{
    /// <summary>
    /// The Eventarc Pipeline resource
    /// 
    /// To get more information about Pipeline, see:
    /// 
    /// * [API documentation](https://cloud.google.com/eventarc/docs/reference/rest/v1/projects.locations.pipelines)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/eventarc/advanced/docs/receive-events/create-enrollment)
    /// 
    /// ## Example Usage
    /// 
    /// ### Eventarc Pipeline With Topic Destination
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var topic = new Gcp.PubSub.Topic("topic", new()
    ///     {
    ///         Name = "some-topic",
    ///     });
    /// 
    ///     var primary = new Gcp.Eventarc.Pipeline("primary", new()
    ///     {
    ///         Location = "us-central1",
    ///         PipelineId = "some-pipeline",
    ///         Destinations = new[]
    ///         {
    ///             new Gcp.Eventarc.Inputs.PipelineDestinationArgs
    ///             {
    ///                 Topic = topic.Id,
    ///                 NetworkConfig = new Gcp.Eventarc.Inputs.PipelineDestinationNetworkConfigArgs
    ///                 {
    ///                     NetworkAttachment = "projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment",
    ///                 },
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "test_label", "test-eventarc-label" },
    ///         },
    ///         Annotations = 
    ///         {
    ///             { "test_annotation", "test-eventarc-annotation" },
    ///         },
    ///         DisplayName = "Testing Pipeline",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Eventarc Pipeline With Http Destination
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primary = new Gcp.Eventarc.Pipeline("primary", new()
    ///     {
    ///         Location = "us-central1",
    ///         PipelineId = "some-pipeline",
    ///         Destinations = new[]
    ///         {
    ///             new Gcp.Eventarc.Inputs.PipelineDestinationArgs
    ///             {
    ///                 HttpEndpoint = new Gcp.Eventarc.Inputs.PipelineDestinationHttpEndpointArgs
    ///                 {
    ///                     Uri = "https://10.77.0.0:80/route",
    ///                 },
    ///                 NetworkConfig = new Gcp.Eventarc.Inputs.PipelineDestinationNetworkConfigArgs
    ///                 {
    ///                     NetworkAttachment = "projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Eventarc Pipeline With Workflow Destination
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var workflow = new Gcp.Workflows.Workflow("workflow", new()
    ///     {
    ///         Name = "some-workflow",
    ///         DeletionProtection = false,
    ///         Region = "us-central1",
    ///         SourceContents = @"# This is a sample workflow, feel free to replace it with your source code
    /// #
    /// # This workflow does the following:
    /// # - reads current time and date information from an external API and stores
    /// #   the response in CurrentDateTime variable
    /// # - retrieves a list of Wikipedia articles related to the day of the week
    /// #   from CurrentDateTime
    /// # - returns the list of articles as an output of the workflow
    /// # FYI, In terraform you need to escape the $$ or it will cause errors.
    /// 
    /// - getCurrentTime:
    ///     call: http.get
    ///     args:
    ///         url: ${sys.get_env(""url"")}
    ///     result: CurrentDateTime
    /// - readWikipedia:
    ///     call: http.get
    ///     args:
    ///         url: https://en.wikipedia.org/w/api.php
    ///         query:
    ///             action: opensearch
    ///             search: ${CurrentDateTime.body.dayOfTheWeek}
    ///     result: WikiResult
    /// - returnOutput:
    ///     return: ${WikiResult.body[1]}
    /// ",
    ///     });
    /// 
    ///     var primary = new Gcp.Eventarc.Pipeline("primary", new()
    ///     {
    ///         Location = "us-central1",
    ///         PipelineId = "some-pipeline",
    ///         Destinations = new[]
    ///         {
    ///             new Gcp.Eventarc.Inputs.PipelineDestinationArgs
    ///             {
    ///                 Workflow = workflow.Id,
    ///                 NetworkConfig = new Gcp.Eventarc.Inputs.PipelineDestinationNetworkConfigArgs
    ///                 {
    ///                     NetworkAttachment = "projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Eventarc Pipeline With Oidc And Json Format
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primary = new Gcp.Eventarc.Pipeline("primary", new()
    ///     {
    ///         Location = "us-central1",
    ///         PipelineId = "some-pipeline",
    ///         Destinations = new[]
    ///         {
    ///             new Gcp.Eventarc.Inputs.PipelineDestinationArgs
    ///             {
    ///                 HttpEndpoint = new Gcp.Eventarc.Inputs.PipelineDestinationHttpEndpointArgs
    ///                 {
    ///                     Uri = "https://10.77.0.0:80/route",
    ///                     MessageBindingTemplate = "{\"headers\":{\"new-header-key\": \"new-header-value\"}}",
    ///                 },
    ///                 NetworkConfig = new Gcp.Eventarc.Inputs.PipelineDestinationNetworkConfigArgs
    ///                 {
    ///                     NetworkAttachment = "projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment",
    ///                 },
    ///                 AuthenticationConfig = new Gcp.Eventarc.Inputs.PipelineDestinationAuthenticationConfigArgs
    ///                 {
    ///                     GoogleOidc = new Gcp.Eventarc.Inputs.PipelineDestinationAuthenticationConfigGoogleOidcArgs
    ///                     {
    ///                         ServiceAccount = "my@service-account.com",
    ///                         Audience = "http://www.example.com",
    ///                     },
    ///                 },
    ///                 OutputPayloadFormat = new Gcp.Eventarc.Inputs.PipelineDestinationOutputPayloadFormatArgs
    ///                 {
    ///                     Json = null,
    ///                 },
    ///             },
    ///         },
    ///         InputPayloadFormat = new Gcp.Eventarc.Inputs.PipelineInputPayloadFormatArgs
    ///         {
    ///             Json = null,
    ///         },
    ///         RetryPolicy = new Gcp.Eventarc.Inputs.PipelineRetryPolicyArgs
    ///         {
    ///             MaxRetryDelay = "50s",
    ///             MaxAttempts = 2,
    ///             MinRetryDelay = "40s",
    ///         },
    ///         Mediations = new[]
    ///         {
    ///             new Gcp.Eventarc.Inputs.PipelineMediationArgs
    ///             {
    ///                 Transformation = new Gcp.Eventarc.Inputs.PipelineMediationTransformationArgs
    ///                 {
    ///                     TransformationTemplate = @"{
    /// ""id"": message.id,
    /// ""datacontenttype"": ""application/json"",
    /// ""data"": ""{ \""scrubbed\"": \""true\"" }""
    /// }
    /// ",
    ///                 },
    ///             },
    ///         },
    ///         LoggingConfig = new Gcp.Eventarc.Inputs.PipelineLoggingConfigArgs
    ///         {
    ///             LogSeverity = "DEBUG",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Eventarc Pipeline With Oauth And Protobuf Format
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primary = new Gcp.Eventarc.Pipeline("primary", new()
    ///     {
    ///         Location = "us-central1",
    ///         PipelineId = "some-pipeline",
    ///         Destinations = new[]
    ///         {
    ///             new Gcp.Eventarc.Inputs.PipelineDestinationArgs
    ///             {
    ///                 HttpEndpoint = new Gcp.Eventarc.Inputs.PipelineDestinationHttpEndpointArgs
    ///                 {
    ///                     Uri = "https://10.77.0.0:80/route",
    ///                     MessageBindingTemplate = "{\"headers\":{\"new-header-key\": \"new-header-value\"}}",
    ///                 },
    ///                 NetworkConfig = new Gcp.Eventarc.Inputs.PipelineDestinationNetworkConfigArgs
    ///                 {
    ///                     NetworkAttachment = "projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment",
    ///                 },
    ///                 AuthenticationConfig = new Gcp.Eventarc.Inputs.PipelineDestinationAuthenticationConfigArgs
    ///                 {
    ///                     OauthToken = new Gcp.Eventarc.Inputs.PipelineDestinationAuthenticationConfigOauthTokenArgs
    ///                     {
    ///                         ServiceAccount = "my@service-account.com",
    ///                         Scope = "https://www.googleapis.com/auth/cloud-platform",
    ///                     },
    ///                 },
    ///                 OutputPayloadFormat = new Gcp.Eventarc.Inputs.PipelineDestinationOutputPayloadFormatArgs
    ///                 {
    ///                     Protobuf = new Gcp.Eventarc.Inputs.PipelineDestinationOutputPayloadFormatProtobufArgs
    ///                     {
    ///                         SchemaDefinition = @"syntax = ""proto3"";
    /// message schema {
    /// string name = 1;
    /// string severity = 2;
    /// }
    /// ",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         InputPayloadFormat = new Gcp.Eventarc.Inputs.PipelineInputPayloadFormatArgs
    ///         {
    ///             Protobuf = new Gcp.Eventarc.Inputs.PipelineInputPayloadFormatProtobufArgs
    ///             {
    ///                 SchemaDefinition = @"syntax = ""proto3"";
    /// message schema {
    /// string name = 1;
    /// string severity = 2;
    /// }
    /// ",
    ///             },
    ///         },
    ///         RetryPolicy = new Gcp.Eventarc.Inputs.PipelineRetryPolicyArgs
    ///         {
    ///             MaxRetryDelay = "50s",
    ///             MaxAttempts = 2,
    ///             MinRetryDelay = "40s",
    ///         },
    ///         Mediations = new[]
    ///         {
    ///             new Gcp.Eventarc.Inputs.PipelineMediationArgs
    ///             {
    ///                 Transformation = new Gcp.Eventarc.Inputs.PipelineMediationTransformationArgs
    ///                 {
    ///                     TransformationTemplate = @"{
    /// ""id"": message.id,
    /// ""datacontenttype"": ""application/json"",
    /// ""data"": ""{ \""scrubbed\"": \""true\"" }""
    /// }
    /// ",
    ///                 },
    ///             },
    ///         },
    ///         LoggingConfig = new Gcp.Eventarc.Inputs.PipelineLoggingConfigArgs
    ///         {
    ///             LogSeverity = "DEBUG",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Eventarc Pipeline With Cmek And Avro Format
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primary = new Gcp.Eventarc.Pipeline("primary", new()
    ///     {
    ///         Location = "us-central1",
    ///         PipelineId = "some-pipeline",
    ///         CryptoKeyName = "some-key",
    ///         Destinations = new[]
    ///         {
    ///             new Gcp.Eventarc.Inputs.PipelineDestinationArgs
    ///             {
    ///                 HttpEndpoint = new Gcp.Eventarc.Inputs.PipelineDestinationHttpEndpointArgs
    ///                 {
    ///                     Uri = "https://10.77.0.0:80/route",
    ///                     MessageBindingTemplate = "{\"headers\":{\"new-header-key\": \"new-header-value\"}}",
    ///                 },
    ///                 NetworkConfig = new Gcp.Eventarc.Inputs.PipelineDestinationNetworkConfigArgs
    ///                 {
    ///                     NetworkAttachment = "projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment",
    ///                 },
    ///                 OutputPayloadFormat = new Gcp.Eventarc.Inputs.PipelineDestinationOutputPayloadFormatArgs
    ///                 {
    ///                     Avro = new Gcp.Eventarc.Inputs.PipelineDestinationOutputPayloadFormatAvroArgs
    ///                     {
    ///                         SchemaDefinition = "{\"type\": \"record\", \"name\": \"my_record\", \"fields\": [{\"name\": \"my_field\", \"type\": \"string\"}]}",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         InputPayloadFormat = new Gcp.Eventarc.Inputs.PipelineInputPayloadFormatArgs
    ///         {
    ///             Avro = new Gcp.Eventarc.Inputs.PipelineInputPayloadFormatAvroArgs
    ///             {
    ///                 SchemaDefinition = "{\"type\": \"record\", \"name\": \"my_record\", \"fields\": [{\"name\": \"my_field\", \"type\": \"string\"}]}",
    ///             },
    ///         },
    ///         RetryPolicy = new Gcp.Eventarc.Inputs.PipelineRetryPolicyArgs
    ///         {
    ///             MaxRetryDelay = "50s",
    ///             MaxAttempts = 2,
    ///             MinRetryDelay = "40s",
    ///         },
    ///         Mediations = new[]
    ///         {
    ///             new Gcp.Eventarc.Inputs.PipelineMediationArgs
    ///             {
    ///                 Transformation = new Gcp.Eventarc.Inputs.PipelineMediationTransformationArgs
    ///                 {
    ///                     TransformationTemplate = @"{
    /// ""id"": message.id,
    /// ""datacontenttype"": ""application/json"",
    /// ""data"": ""{ \""scrubbed\"": \""true\"" }""
    /// }
    /// ",
    ///                 },
    ///             },
    ///         },
    ///         LoggingConfig = new Gcp.Eventarc.Inputs.PipelineLoggingConfigArgs
    ///         {
    ///             LogSeverity = "DEBUG",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Pipeline can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/pipelines/{{pipeline_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{pipeline_id}}`
    /// 
    /// * `{{location}}/{{pipeline_id}}`
    /// 
    /// When using the `pulumi import` command, Pipeline can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:eventarc/pipeline:Pipeline default projects/{{project}}/locations/{{location}}/pipelines/{{pipeline_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:eventarc/pipeline:Pipeline default {{project}}/{{location}}/{{pipeline_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:eventarc/pipeline:Pipeline default {{location}}/{{pipeline_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:eventarc/pipeline:Pipeline")]
    public partial class Pipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// User-defined annotations. See https://google.aip.dev/128#annotations. **Note**: This field is non-authoritative, and
        /// will only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for
        /// all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// The creation time.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
        /// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
        /// "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt the event data. If not set, an internal
        /// Google-owned key will be used to encrypt messages. It must match the pattern
        /// "projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}".
        /// </summary>
        [Output("cryptoKeyName")]
        public Output<string?> CryptoKeyName { get; private set; } = null!;

        /// <summary>
        /// List of destinations to which messages will be forwarded. Currently,
        /// exactly one destination is supported per Pipeline.
        /// Structure is documented below.
        /// </summary>
        [Output("destinations")]
        public Output<ImmutableArray<Outputs.PipelineDestination>> Destinations { get; private set; } = null!;

        /// <summary>
        /// Display name of resource.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// This checksum is computed by the server based on the value of
        /// other fields, and might be sent only on create requests to ensure that the
        /// client has an up-to-date value before proceeding.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Represents the format of message data.
        /// </summary>
        [Output("inputPayloadFormat")]
        public Output<Outputs.PipelineInputPayloadFormat?> InputPayloadFormat { get; private set; } = null!;

        /// <summary>
        /// User labels attached to the Pipeline that can be used to group resources. An object containing a list of "key": value
        /// pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will
        /// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
        /// present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The configuration for Platform Telemetry logging for Eventarc Advanced resources.
        /// </summary>
        [Output("loggingConfig")]
        public Output<Outputs.PipelineLoggingConfig> LoggingConfig { get; private set; } = null!;

        /// <summary>
        /// List of mediation operations to be performed on the message. Currently, only one Transformation operation is allowed in
        /// each Pipeline.
        /// </summary>
        [Output("mediations")]
        public Output<ImmutableArray<Outputs.PipelineMediation>> Mediations { get; private set; } = null!;

        /// <summary>
        /// The resource name of the Pipeline. Must be unique within the
        /// location of the project and must be in
        /// `projects/{project}/locations/{location}/pipelines/{pipeline}` format.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The user-provided ID to be assigned to the Pipeline. It should match the
        /// format `^a-z?$`.
        /// </summary>
        [Output("pipelineId")]
        public Output<string> PipelineId { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The retry policy configuration for the Pipeline. The pipeline exponentially backs off in case the destination is non
        /// responsive or returns a retryable error code. The default semantics are as follows: The backoff starts with a 5 second
        /// delay and doubles the delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.). The delay is capped at
        /// 60 seconds by default. Please note that if you set the min_retry_delay and max_retry_delay fields to the same value this
        /// will make the duration between retries constant.
        /// </summary>
        [Output("retryPolicy")]
        public Output<Outputs.PipelineRetryPolicy> RetryPolicy { get; private set; } = null!;

        /// <summary>
        /// Server-assigned unique identifier for the Pipeline. The value
        /// is a UUID4 string and guaranteed to remain unchanged until the resource is
        /// deleted.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The last-modified time.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
        /// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
        /// "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Pipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pipeline(string name, PipelineArgs args, CustomResourceOptions? options = null)
            : base("gcp:eventarc/pipeline:Pipeline", name, args ?? new PipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pipeline(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
            : base("gcp:eventarc/pipeline:Pipeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pipeline Get(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
        {
            return new Pipeline(name, id, state, options);
        }
    }

    public sealed class PipelineArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// User-defined annotations. See https://google.aip.dev/128#annotations. **Note**: This field is non-authoritative, and
        /// will only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for
        /// all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt the event data. If not set, an internal
        /// Google-owned key will be used to encrypt messages. It must match the pattern
        /// "projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}".
        /// </summary>
        [Input("cryptoKeyName")]
        public Input<string>? CryptoKeyName { get; set; }

        [Input("destinations", required: true)]
        private InputList<Inputs.PipelineDestinationArgs>? _destinations;

        /// <summary>
        /// List of destinations to which messages will be forwarded. Currently,
        /// exactly one destination is supported per Pipeline.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.PipelineDestinationArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.PipelineDestinationArgs>());
            set => _destinations = value;
        }

        /// <summary>
        /// Display name of resource.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Represents the format of message data.
        /// </summary>
        [Input("inputPayloadFormat")]
        public Input<Inputs.PipelineInputPayloadFormatArgs>? InputPayloadFormat { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User labels attached to the Pipeline that can be used to group resources. An object containing a list of "key": value
        /// pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will
        /// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
        /// present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The configuration for Platform Telemetry logging for Eventarc Advanced resources.
        /// </summary>
        [Input("loggingConfig")]
        public Input<Inputs.PipelineLoggingConfigArgs>? LoggingConfig { get; set; }

        [Input("mediations")]
        private InputList<Inputs.PipelineMediationArgs>? _mediations;

        /// <summary>
        /// List of mediation operations to be performed on the message. Currently, only one Transformation operation is allowed in
        /// each Pipeline.
        /// </summary>
        public InputList<Inputs.PipelineMediationArgs> Mediations
        {
            get => _mediations ?? (_mediations = new InputList<Inputs.PipelineMediationArgs>());
            set => _mediations = value;
        }

        /// <summary>
        /// The user-provided ID to be assigned to the Pipeline. It should match the
        /// format `^a-z?$`.
        /// </summary>
        [Input("pipelineId", required: true)]
        public Input<string> PipelineId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The retry policy configuration for the Pipeline. The pipeline exponentially backs off in case the destination is non
        /// responsive or returns a retryable error code. The default semantics are as follows: The backoff starts with a 5 second
        /// delay and doubles the delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.). The delay is capped at
        /// 60 seconds by default. Please note that if you set the min_retry_delay and max_retry_delay fields to the same value this
        /// will make the duration between retries constant.
        /// </summary>
        [Input("retryPolicy")]
        public Input<Inputs.PipelineRetryPolicyArgs>? RetryPolicy { get; set; }

        public PipelineArgs()
        {
        }
        public static new PipelineArgs Empty => new PipelineArgs();
    }

    public sealed class PipelineState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// User-defined annotations. See https://google.aip.dev/128#annotations. **Note**: This field is non-authoritative, and
        /// will only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for
        /// all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The creation time.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
        /// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
        /// "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt the event data. If not set, an internal
        /// Google-owned key will be used to encrypt messages. It must match the pattern
        /// "projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}".
        /// </summary>
        [Input("cryptoKeyName")]
        public Input<string>? CryptoKeyName { get; set; }

        [Input("destinations")]
        private InputList<Inputs.PipelineDestinationGetArgs>? _destinations;

        /// <summary>
        /// List of destinations to which messages will be forwarded. Currently,
        /// exactly one destination is supported per Pipeline.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.PipelineDestinationGetArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.PipelineDestinationGetArgs>());
            set => _destinations = value;
        }

        /// <summary>
        /// Display name of resource.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// This checksum is computed by the server based on the value of
        /// other fields, and might be sent only on create requests to ensure that the
        /// client has an up-to-date value before proceeding.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Represents the format of message data.
        /// </summary>
        [Input("inputPayloadFormat")]
        public Input<Inputs.PipelineInputPayloadFormatGetArgs>? InputPayloadFormat { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User labels attached to the Pipeline that can be used to group resources. An object containing a list of "key": value
        /// pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will
        /// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
        /// present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The configuration for Platform Telemetry logging for Eventarc Advanced resources.
        /// </summary>
        [Input("loggingConfig")]
        public Input<Inputs.PipelineLoggingConfigGetArgs>? LoggingConfig { get; set; }

        [Input("mediations")]
        private InputList<Inputs.PipelineMediationGetArgs>? _mediations;

        /// <summary>
        /// List of mediation operations to be performed on the message. Currently, only one Transformation operation is allowed in
        /// each Pipeline.
        /// </summary>
        public InputList<Inputs.PipelineMediationGetArgs> Mediations
        {
            get => _mediations ?? (_mediations = new InputList<Inputs.PipelineMediationGetArgs>());
            set => _mediations = value;
        }

        /// <summary>
        /// The resource name of the Pipeline. Must be unique within the
        /// location of the project and must be in
        /// `projects/{project}/locations/{location}/pipelines/{pipeline}` format.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The user-provided ID to be assigned to the Pipeline. It should match the
        /// format `^a-z?$`.
        /// </summary>
        [Input("pipelineId")]
        public Input<string>? PipelineId { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The retry policy configuration for the Pipeline. The pipeline exponentially backs off in case the destination is non
        /// responsive or returns a retryable error code. The default semantics are as follows: The backoff starts with a 5 second
        /// delay and doubles the delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.). The delay is capped at
        /// 60 seconds by default. Please note that if you set the min_retry_delay and max_retry_delay fields to the same value this
        /// will make the duration between retries constant.
        /// </summary>
        [Input("retryPolicy")]
        public Input<Inputs.PipelineRetryPolicyGetArgs>? RetryPolicy { get; set; }

        /// <summary>
        /// Server-assigned unique identifier for the Pipeline. The value
        /// is a UUID4 string and guaranteed to remain unchanged until the resource is
        /// deleted.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The last-modified time.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
        /// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
        /// "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public PipelineState()
        {
        }
        public static new PipelineState Empty => new PipelineState();
    }
}
