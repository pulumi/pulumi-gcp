// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.MemoryStore
{
    public static class GetInstance
    {
        /// <summary>
        /// Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/memorystore/docs/valkey/reference/rest/v1/projects.locations.instances).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var qa = Gcp.MemoryStore.GetInstance.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("gcp:memorystore/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/memorystore/docs/valkey/reference/rest/v1/projects.locations.instances).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var qa = Gcp.MemoryStore.GetInstance.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("gcp:memorystore/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/memorystore/docs/valkey/reference/rest/v1/projects.locations.instances).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var qa = Gcp.MemoryStore.GetInstance.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("gcp:memorystore/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the memorystore instance.
        /// 'memorystore_instance_id'
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// (optional)
        /// The canonical id of the location.If it is not provided, the provider project is used. For example: us-east1.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// (optional)
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the memorystore instance.
        /// 'memorystore_instance_id'
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// (optional)
        /// The canonical id of the location.If it is not provided, the provider project is used. For example: us-east1.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// (optional)
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        public readonly bool AllowFewerZonesDeployment;
        public readonly string AuthorizationMode;
        public readonly ImmutableArray<Outputs.GetInstanceAutomatedBackupConfigResult> AutomatedBackupConfigs;
        public readonly string BackupCollection;
        public readonly string CreateTime;
        public readonly ImmutableArray<Outputs.GetInstanceCrossInstanceReplicationConfigResult> CrossInstanceReplicationConfigs;
        public readonly bool DeletionProtectionEnabled;
        public readonly ImmutableArray<Outputs.GetInstanceDesiredAutoCreatedEndpointResult> DesiredAutoCreatedEndpoints;
        public readonly ImmutableArray<Outputs.GetInstanceDesiredPscAutoConnectionResult> DesiredPscAutoConnections;
        public readonly ImmutableArray<Outputs.GetInstanceDiscoveryEndpointResult> DiscoveryEndpoints;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly ImmutableArray<Outputs.GetInstanceEndpointResult> Endpoints;
        public readonly ImmutableDictionary<string, string> EngineConfigs;
        public readonly string EngineVersion;
        public readonly ImmutableArray<Outputs.GetInstanceGcsSourceResult> GcsSources;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string KmsKey;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string? Location;
        public readonly ImmutableArray<Outputs.GetInstanceMaintenancePolicyResult> MaintenancePolicies;
        public readonly ImmutableArray<Outputs.GetInstanceMaintenanceScheduleResult> MaintenanceSchedules;
        public readonly ImmutableArray<Outputs.GetInstanceManagedBackupSourceResult> ManagedBackupSources;
        public readonly ImmutableArray<Outputs.GetInstanceManagedServerCaResult> ManagedServerCas;
        public readonly string Mode;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetInstanceNodeConfigResult> NodeConfigs;
        public readonly string NodeType;
        public readonly ImmutableArray<Outputs.GetInstancePersistenceConfigResult> PersistenceConfigs;
        public readonly string? Project;
        public readonly ImmutableArray<Outputs.GetInstancePscAttachmentDetailResult> PscAttachmentDetails;
        public readonly ImmutableArray<Outputs.GetInstancePscAutoConnectionResult> PscAutoConnections;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly int ReplicaCount;
        public readonly int ShardCount;
        public readonly string State;
        public readonly ImmutableArray<Outputs.GetInstanceStateInfoResult> StateInfos;
        public readonly string TransitEncryptionMode;
        public readonly string Uid;
        public readonly string UpdateTime;
        public readonly ImmutableArray<Outputs.GetInstanceZoneDistributionConfigResult> ZoneDistributionConfigs;

        [OutputConstructor]
        private GetInstanceResult(
            bool allowFewerZonesDeployment,

            string authorizationMode,

            ImmutableArray<Outputs.GetInstanceAutomatedBackupConfigResult> automatedBackupConfigs,

            string backupCollection,

            string createTime,

            ImmutableArray<Outputs.GetInstanceCrossInstanceReplicationConfigResult> crossInstanceReplicationConfigs,

            bool deletionProtectionEnabled,

            ImmutableArray<Outputs.GetInstanceDesiredAutoCreatedEndpointResult> desiredAutoCreatedEndpoints,

            ImmutableArray<Outputs.GetInstanceDesiredPscAutoConnectionResult> desiredPscAutoConnections,

            ImmutableArray<Outputs.GetInstanceDiscoveryEndpointResult> discoveryEndpoints,

            ImmutableDictionary<string, string> effectiveLabels,

            ImmutableArray<Outputs.GetInstanceEndpointResult> endpoints,

            ImmutableDictionary<string, string> engineConfigs,

            string engineVersion,

            ImmutableArray<Outputs.GetInstanceGcsSourceResult> gcsSources,

            string id,

            string instanceId,

            string kmsKey,

            ImmutableDictionary<string, string> labels,

            string? location,

            ImmutableArray<Outputs.GetInstanceMaintenancePolicyResult> maintenancePolicies,

            ImmutableArray<Outputs.GetInstanceMaintenanceScheduleResult> maintenanceSchedules,

            ImmutableArray<Outputs.GetInstanceManagedBackupSourceResult> managedBackupSources,

            ImmutableArray<Outputs.GetInstanceManagedServerCaResult> managedServerCas,

            string mode,

            string name,

            ImmutableArray<Outputs.GetInstanceNodeConfigResult> nodeConfigs,

            string nodeType,

            ImmutableArray<Outputs.GetInstancePersistenceConfigResult> persistenceConfigs,

            string? project,

            ImmutableArray<Outputs.GetInstancePscAttachmentDetailResult> pscAttachmentDetails,

            ImmutableArray<Outputs.GetInstancePscAutoConnectionResult> pscAutoConnections,

            ImmutableDictionary<string, string> pulumiLabels,

            int replicaCount,

            int shardCount,

            string state,

            ImmutableArray<Outputs.GetInstanceStateInfoResult> stateInfos,

            string transitEncryptionMode,

            string uid,

            string updateTime,

            ImmutableArray<Outputs.GetInstanceZoneDistributionConfigResult> zoneDistributionConfigs)
        {
            AllowFewerZonesDeployment = allowFewerZonesDeployment;
            AuthorizationMode = authorizationMode;
            AutomatedBackupConfigs = automatedBackupConfigs;
            BackupCollection = backupCollection;
            CreateTime = createTime;
            CrossInstanceReplicationConfigs = crossInstanceReplicationConfigs;
            DeletionProtectionEnabled = deletionProtectionEnabled;
            DesiredAutoCreatedEndpoints = desiredAutoCreatedEndpoints;
            DesiredPscAutoConnections = desiredPscAutoConnections;
            DiscoveryEndpoints = discoveryEndpoints;
            EffectiveLabels = effectiveLabels;
            Endpoints = endpoints;
            EngineConfigs = engineConfigs;
            EngineVersion = engineVersion;
            GcsSources = gcsSources;
            Id = id;
            InstanceId = instanceId;
            KmsKey = kmsKey;
            Labels = labels;
            Location = location;
            MaintenancePolicies = maintenancePolicies;
            MaintenanceSchedules = maintenanceSchedules;
            ManagedBackupSources = managedBackupSources;
            ManagedServerCas = managedServerCas;
            Mode = mode;
            Name = name;
            NodeConfigs = nodeConfigs;
            NodeType = nodeType;
            PersistenceConfigs = persistenceConfigs;
            Project = project;
            PscAttachmentDetails = pscAttachmentDetails;
            PscAutoConnections = pscAutoConnections;
            PulumiLabels = pulumiLabels;
            ReplicaCount = replicaCount;
            ShardCount = shardCount;
            State = state;
            StateInfos = stateInfos;
            TransitEncryptionMode = transitEncryptionMode;
            Uid = uid;
            UpdateTime = updateTime;
            ZoneDistributionConfigs = zoneDistributionConfigs;
        }
    }
}
