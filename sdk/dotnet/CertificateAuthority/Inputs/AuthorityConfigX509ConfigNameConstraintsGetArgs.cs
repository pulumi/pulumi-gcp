// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CertificateAuthority.Inputs
{

    public sealed class AuthorityConfigX509ConfigNameConstraintsGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether or not the name constraints are marked critical.
        /// </summary>
        [Input("critical", required: true)]
        public Input<bool> Critical { get; set; } = null!;

        [Input("excludedDnsNames")]
        private InputList<string>? _excludedDnsNames;

        /// <summary>
        /// Contains excluded DNS names. Any DNS name that can be
        /// constructed by simply adding zero or more labels to
        /// the left-hand side of the name satisfies the name constraint.
        /// For example, `example.com`, `www.example.com`, `www.sub.example.com`
        /// would satisfy `example.com` while `example1.com` does not.
        /// </summary>
        public InputList<string> ExcludedDnsNames
        {
            get => _excludedDnsNames ?? (_excludedDnsNames = new InputList<string>());
            set => _excludedDnsNames = value;
        }

        [Input("excludedEmailAddresses")]
        private InputList<string>? _excludedEmailAddresses;

        /// <summary>
        /// Contains the excluded email addresses. The value can be a particular
        /// email address, a hostname to indicate all email addresses on that host or
        /// a domain with a leading period (e.g. `.example.com`) to indicate
        /// all email addresses in that domain.
        /// </summary>
        public InputList<string> ExcludedEmailAddresses
        {
            get => _excludedEmailAddresses ?? (_excludedEmailAddresses = new InputList<string>());
            set => _excludedEmailAddresses = value;
        }

        [Input("excludedIpRanges")]
        private InputList<string>? _excludedIpRanges;

        /// <summary>
        /// Contains the excluded IP ranges. For IPv4 addresses, the ranges
        /// are expressed using CIDR notation as specified in RFC 4632.
        /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
        /// addresses.
        /// </summary>
        public InputList<string> ExcludedIpRanges
        {
            get => _excludedIpRanges ?? (_excludedIpRanges = new InputList<string>());
            set => _excludedIpRanges = value;
        }

        [Input("excludedUris")]
        private InputList<string>? _excludedUris;

        /// <summary>
        /// Contains the excluded URIs that apply to the host part of the name.
        /// The value can be a hostname or a domain with a
        /// leading period (like `.example.com`)
        /// </summary>
        public InputList<string> ExcludedUris
        {
            get => _excludedUris ?? (_excludedUris = new InputList<string>());
            set => _excludedUris = value;
        }

        [Input("permittedDnsNames")]
        private InputList<string>? _permittedDnsNames;

        /// <summary>
        /// Contains permitted DNS names. Any DNS name that can be
        /// constructed by simply adding zero or more labels to
        /// the left-hand side of the name satisfies the name constraint.
        /// For example, `example.com`, `www.example.com`, `www.sub.example.com`
        /// would satisfy `example.com` while `example1.com` does not.
        /// </summary>
        public InputList<string> PermittedDnsNames
        {
            get => _permittedDnsNames ?? (_permittedDnsNames = new InputList<string>());
            set => _permittedDnsNames = value;
        }

        [Input("permittedEmailAddresses")]
        private InputList<string>? _permittedEmailAddresses;

        /// <summary>
        /// Contains the permitted email addresses. The value can be a particular
        /// email address, a hostname to indicate all email addresses on that host or
        /// a domain with a leading period (e.g. `.example.com`) to indicate
        /// all email addresses in that domain.
        /// </summary>
        public InputList<string> PermittedEmailAddresses
        {
            get => _permittedEmailAddresses ?? (_permittedEmailAddresses = new InputList<string>());
            set => _permittedEmailAddresses = value;
        }

        [Input("permittedIpRanges")]
        private InputList<string>? _permittedIpRanges;

        /// <summary>
        /// Contains the permitted IP ranges. For IPv4 addresses, the ranges
        /// are expressed using CIDR notation as specified in RFC 4632.
        /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
        /// addresses.
        /// </summary>
        public InputList<string> PermittedIpRanges
        {
            get => _permittedIpRanges ?? (_permittedIpRanges = new InputList<string>());
            set => _permittedIpRanges = value;
        }

        [Input("permittedUris")]
        private InputList<string>? _permittedUris;

        /// <summary>
        /// Contains the permitted URIs that apply to the host part of the name.
        /// The value can be a hostname or a domain with a
        /// leading period (like `.example.com`)
        /// </summary>
        public InputList<string> PermittedUris
        {
            get => _permittedUris ?? (_permittedUris = new InputList<string>());
            set => _permittedUris = value;
        }

        public AuthorityConfigX509ConfigNameConstraintsGetArgs()
        {
        }
        public static new AuthorityConfigX509ConfigNameConstraintsGetArgs Empty => new AuthorityConfigX509ConfigNameConstraintsGetArgs();
    }
}
