// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CertificateAuthority
{
    public static class GetCertificateTemplateIamPolicy
    {
        /// <summary>
        /// Retrieves the current IAM policy data for certificatetemplate
        /// 
        /// 
        /// 
        /// ## example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.CertificateAuthority.GetCertificateTemplateIamPolicy.Invoke(new()
        ///     {
        ///         CertificateTemplate = google_privateca_certificate_template.Default.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCertificateTemplateIamPolicyResult> InvokeAsync(GetCertificateTemplateIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateTemplateIamPolicyResult>("gcp:certificateauthority/getCertificateTemplateIamPolicy:getCertificateTemplateIamPolicy", args ?? new GetCertificateTemplateIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for certificatetemplate
        /// 
        /// 
        /// 
        /// ## example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.CertificateAuthority.GetCertificateTemplateIamPolicy.Invoke(new()
        ///     {
        ///         CertificateTemplate = google_privateca_certificate_template.Default.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificateTemplateIamPolicyResult> Invoke(GetCertificateTemplateIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateTemplateIamPolicyResult>("gcp:certificateauthority/getCertificateTemplateIamPolicy:getCertificateTemplateIamPolicy", args ?? new GetCertificateTemplateIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateTemplateIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("certificateTemplate", required: true)]
        public string CertificateTemplate { get; set; } = null!;

        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetCertificateTemplateIamPolicyArgs()
        {
        }
        public static new GetCertificateTemplateIamPolicyArgs Empty => new GetCertificateTemplateIamPolicyArgs();
    }

    public sealed class GetCertificateTemplateIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("certificateTemplate", required: true)]
        public Input<string> CertificateTemplate { get; set; } = null!;

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetCertificateTemplateIamPolicyInvokeArgs()
        {
        }
        public static new GetCertificateTemplateIamPolicyInvokeArgs Empty => new GetCertificateTemplateIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateTemplateIamPolicyResult
    {
        public readonly string CertificateTemplate;
        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        /// <summary>
        /// (Required only by `gcp.certificateauthority.CertificateTemplateIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        public readonly string PolicyData;
        public readonly string Project;

        [OutputConstructor]
        private GetCertificateTemplateIamPolicyResult(
            string certificateTemplate,

            string etag,

            string id,

            string location,

            string policyData,

            string project)
        {
            CertificateTemplate = certificateTemplate;
            Etag = etag;
            Id = id;
            Location = location;
            PolicyData = policyData;
            Project = project;
        }
    }
}
