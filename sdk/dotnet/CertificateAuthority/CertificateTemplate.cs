// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CertificateAuthority
{
    /// <summary>
    /// Certificate Authority Service provides reusable and parameterized templates that you can use for common certificate issuance scenarios. A certificate template represents a relatively static and well-defined certificate issuance schema within an organization.  A certificate template can essentially become a full-fledged vertical certificate issuance framework.
    /// 
    /// For more information, see:
    /// * [Understanding Certificate Templates](https://cloud.google.com/certificate-authority-service/docs/certificate-template)
    /// * [Common configurations and Certificate Profiles](https://cloud.google.com/certificate-authority-service/docs/certificate-profile)
    /// ## Example Usage
    /// ### Basic_certificate_template
    /// An example of a basic privateca certificate template
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var primary = new Gcp.CertificateAuthority.CertificateTemplate("primary", new Gcp.CertificateAuthority.CertificateTemplateArgs
    ///         {
    ///             Description = "An updated sample certificate template",
    ///             IdentityConstraints = new Gcp.CertificateAuthority.Inputs.CertificateTemplateIdentityConstraintsArgs
    ///             {
    ///                 AllowSubjectAltNamesPassthrough = true,
    ///                 AllowSubjectPassthrough = true,
    ///                 CelExpression = new Gcp.CertificateAuthority.Inputs.CertificateTemplateIdentityConstraintsCelExpressionArgs
    ///                 {
    ///                     Description = "Always true",
    ///                     Expression = "true",
    ///                     Location = "any.file.anywhere",
    ///                     Title = "Sample expression",
    ///                 },
    ///             },
    ///             Labels = 
    ///             {
    ///                 { "label-two", "value-two" },
    ///             },
    ///             Location = "us-west1",
    ///             PassthroughExtensions = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePassthroughExtensionsArgs
    ///             {
    ///                 AdditionalExtensions = 
    ///                 {
    ///                     new Gcp.CertificateAuthority.Inputs.CertificateTemplatePassthroughExtensionsAdditionalExtensionArgs
    ///                     {
    ///                         ObjectIdPath = 
    ///                         {
    ///                             1,
    ///                             6,
    ///                         },
    ///                     },
    ///                 },
    ///                 KnownExtensions = 
    ///                 {
    ///                     "EXTENDED_KEY_USAGE",
    ///                 },
    ///             },
    ///             PredefinedValues = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesArgs
    ///             {
    ///                 AdditionalExtensions = 
    ///                 {
    ///                     new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesAdditionalExtensionArgs
    ///                     {
    ///                         Critical = true,
    ///                         ObjectId = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesAdditionalExtensionObjectIdArgs
    ///                         {
    ///                             ObjectIdPath = 
    ///                             {
    ///                                 1,
    ///                                 6,
    ///                             },
    ///                         },
    ///                         Value = "c3RyaW5nCg==",
    ///                     },
    ///                 },
    ///                 AiaOcspServers = 
    ///                 {
    ///                     "string",
    ///                 },
    ///                 CaOptions = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesCaOptionsArgs
    ///                 {
    ///                     IsCa = false,
    ///                     MaxIssuerPathLength = 6,
    ///                 },
    ///                 KeyUsage = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesKeyUsageArgs
    ///                 {
    ///                     BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageArgs
    ///                     {
    ///                         CertSign = false,
    ///                         ContentCommitment = true,
    ///                         CrlSign = false,
    ///                         DataEncipherment = true,
    ///                         DecipherOnly = true,
    ///                         DigitalSignature = true,
    ///                         EncipherOnly = true,
    ///                         KeyAgreement = true,
    ///                         KeyEncipherment = true,
    ///                     },
    ///                     ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageArgs
    ///                     {
    ///                         ClientAuth = true,
    ///                         CodeSigning = true,
    ///                         EmailProtection = true,
    ///                         OcspSigning = true,
    ///                         ServerAuth = true,
    ///                         TimeStamping = true,
    ///                     },
    ///                     UnknownExtendedKeyUsages = 
    ///                     {
    ///                         new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsageArgs
    ///                         {
    ///                             ObjectIdPath = 
    ///                             {
    ///                                 1,
    ///                                 6,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 PolicyIds = 
    ///                 {
    ///                     new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesPolicyIdArgs
    ///                     {
    ///                         ObjectIdPath = 
    ///                         {
    ///                             1,
    ///                             6,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Project = "my-project-name",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// CertificateTemplate can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificateauthority/certificateTemplate:CertificateTemplate default projects/{{project}}/locations/{{location}}/certificateTemplates/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificateauthority/certificateTemplate:CertificateTemplate default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificateauthority/certificateTemplate:CertificateTemplate default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:certificateauthority/certificateTemplate:CertificateTemplate")]
    public partial class CertificateTemplate : Pulumi.CustomResource
    {
        /// <summary>
        /// Output only. The time at which this CertificateTemplate was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
        /// </summary>
        [Output("identityConstraints")]
        public Output<Outputs.CertificateTemplateIdentityConstraints?> IdentityConstraints { get; private set; } = null!;

        /// <summary>
        /// Optional. Labels with user-defined metadata.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name for this CertificateTemplate in the format `projects/*/locations/*/certificateTemplates/*`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
        /// </summary>
        [Output("passthroughExtensions")]
        public Output<Outputs.CertificateTemplatePassthroughExtensions?> PassthroughExtensions { get; private set; } = null!;

        /// <summary>
        /// Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
        /// </summary>
        [Output("predefinedValues")]
        public Output<Outputs.CertificateTemplatePredefinedValues?> PredefinedValues { get; private set; } = null!;

        /// <summary>
        /// The project for the resource
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Output only. The time at which this CertificateTemplate was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateTemplate(string name, CertificateTemplateArgs args, CustomResourceOptions? options = null)
            : base("gcp:certificateauthority/certificateTemplate:CertificateTemplate", name, args ?? new CertificateTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateTemplate(string name, Input<string> id, CertificateTemplateState? state = null, CustomResourceOptions? options = null)
            : base("gcp:certificateauthority/certificateTemplate:CertificateTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateTemplate Get(string name, Input<string> id, CertificateTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CertificateTemplate(name, id, state, options);
        }
    }

    public sealed class CertificateTemplateArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
        /// </summary>
        [Input("identityConstraints")]
        public Input<Inputs.CertificateTemplateIdentityConstraintsArgs>? IdentityConstraints { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels with user-defined metadata.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The resource name for this CertificateTemplate in the format `projects/*/locations/*/certificateTemplates/*`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
        /// </summary>
        [Input("passthroughExtensions")]
        public Input<Inputs.CertificateTemplatePassthroughExtensionsArgs>? PassthroughExtensions { get; set; }

        /// <summary>
        /// Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
        /// </summary>
        [Input("predefinedValues")]
        public Input<Inputs.CertificateTemplatePredefinedValuesArgs>? PredefinedValues { get; set; }

        /// <summary>
        /// The project for the resource
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public CertificateTemplateArgs()
        {
        }
    }

    public sealed class CertificateTemplateState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Output only. The time at which this CertificateTemplate was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
        /// </summary>
        [Input("identityConstraints")]
        public Input<Inputs.CertificateTemplateIdentityConstraintsGetArgs>? IdentityConstraints { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels with user-defined metadata.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name for this CertificateTemplate in the format `projects/*/locations/*/certificateTemplates/*`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
        /// </summary>
        [Input("passthroughExtensions")]
        public Input<Inputs.CertificateTemplatePassthroughExtensionsGetArgs>? PassthroughExtensions { get; set; }

        /// <summary>
        /// Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
        /// </summary>
        [Input("predefinedValues")]
        public Input<Inputs.CertificateTemplatePredefinedValuesGetArgs>? PredefinedValues { get; set; }

        /// <summary>
        /// The project for the resource
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Output only. The time at which this CertificateTemplate was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public CertificateTemplateState()
        {
        }
    }
}
