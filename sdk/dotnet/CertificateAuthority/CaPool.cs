// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CertificateAuthority
{
    /// <summary>
    /// A CaPool represents a group of CertificateAuthorities that form a trust anchor. A CaPool can be used to manage
    /// issuance policies for one or more CertificateAuthority resources and to rotate CA certificates in and out of the
    /// trust anchor.
    /// 
    /// ## Example Usage
    /// 
    /// ### Privateca Capool Basic
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CertificateAuthority.CaPool("default", new()
    ///     {
    ///         Name = "my-pool",
    ///         Location = "us-central1",
    ///         Tier = "ENTERPRISE",
    ///         PublishingOptions = new Gcp.CertificateAuthority.Inputs.CaPoolPublishingOptionsArgs
    ///         {
    ///             PublishCaCert = true,
    ///             PublishCrl = true,
    ///         },
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// ### Privateca Capool All Fields
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CertificateAuthority.CaPool("default", new()
    ///     {
    ///         Name = "my-pool",
    ///         Location = "us-central1",
    ///         Tier = "ENTERPRISE",
    ///         PublishingOptions = new Gcp.CertificateAuthority.Inputs.CaPoolPublishingOptionsArgs
    ///         {
    ///             PublishCaCert = false,
    ///             PublishCrl = true,
    ///             EncodingFormat = "PEM",
    ///         },
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         IssuancePolicy = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyArgs
    ///         {
    ///             AllowedKeyTypes = new[]
    ///             {
    ///                 new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyAllowedKeyTypeArgs
    ///                 {
    ///                     EllipticCurve = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyAllowedKeyTypeEllipticCurveArgs
    ///                     {
    ///                         SignatureAlgorithm = "ECDSA_P256",
    ///                     },
    ///                 },
    ///                 new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyAllowedKeyTypeArgs
    ///                 {
    ///                     Rsa = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyAllowedKeyTypeRsaArgs
    ///                     {
    ///                         MinModulusSize = "5",
    ///                         MaxModulusSize = "10",
    ///                     },
    ///                 },
    ///             },
    ///             MaximumLifetime = "50000s",
    ///             AllowedIssuanceModes = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyAllowedIssuanceModesArgs
    ///             {
    ///                 AllowCsrBasedIssuance = true,
    ///                 AllowConfigBasedIssuance = true,
    ///             },
    ///             IdentityConstraints = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyIdentityConstraintsArgs
    ///             {
    ///                 AllowSubjectPassthrough = true,
    ///                 AllowSubjectAltNamesPassthrough = true,
    ///                 CelExpression = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyIdentityConstraintsCelExpressionArgs
    ///                 {
    ///                     Expression = "subject_alt_names.all(san, san.type == DNS || san.type == EMAIL )",
    ///                     Title = "My title",
    ///                 },
    ///             },
    ///             BaselineValues = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesArgs
    ///             {
    ///                 AiaOcspServers = new[]
    ///                 {
    ///                     "example.com",
    ///                 },
    ///                 AdditionalExtensions = new[]
    ///                 {
    ///                     new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesAdditionalExtensionArgs
    ///                     {
    ///                         Critical = true,
    ///                         Value = "asdf",
    ///                         ObjectId = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesAdditionalExtensionObjectIdArgs
    ///                         {
    ///                             ObjectIdPaths = new[]
    ///                             {
    ///                                 1,
    ///                                 7,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 PolicyIds = new[]
    ///                 {
    ///                     new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesPolicyIdArgs
    ///                     {
    ///                         ObjectIdPaths = new[]
    ///                         {
    ///                             1,
    ///                             5,
    ///                         },
    ///                     },
    ///                     new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesPolicyIdArgs
    ///                     {
    ///                         ObjectIdPaths = new[]
    ///                         {
    ///                             1,
    ///                             5,
    ///                             7,
    ///                         },
    ///                     },
    ///                 },
    ///                 CaOptions = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesCaOptionsArgs
    ///                 {
    ///                     IsCa = true,
    ///                     MaxIssuerPathLength = 10,
    ///                 },
    ///                 KeyUsage = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesKeyUsageArgs
    ///                 {
    ///                     BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageArgs
    ///                     {
    ///                         DigitalSignature = true,
    ///                         ContentCommitment = true,
    ///                         KeyEncipherment = false,
    ///                         DataEncipherment = true,
    ///                         KeyAgreement = true,
    ///                         CertSign = false,
    ///                         CrlSign = true,
    ///                         DecipherOnly = true,
    ///                     },
    ///                     ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageArgs
    ///                     {
    ///                         ServerAuth = true,
    ///                         ClientAuth = false,
    ///                         EmailProtection = true,
    ///                         CodeSigning = true,
    ///                         TimeStamping = true,
    ///                     },
    ///                 },
    ///                 NameConstraints = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesNameConstraintsArgs
    ///                 {
    ///                     Critical = true,
    ///                     PermittedDnsNames = new[]
    ///                     {
    ///                         "*.example1.com",
    ///                         "*.example2.com",
    ///                     },
    ///                     ExcludedDnsNames = new[]
    ///                     {
    ///                         "*.deny.example1.com",
    ///                         "*.deny.example2.com",
    ///                     },
    ///                     PermittedIpRanges = new[]
    ///                     {
    ///                         "10.0.0.0/8",
    ///                         "11.0.0.0/8",
    ///                     },
    ///                     ExcludedIpRanges = new[]
    ///                     {
    ///                         "10.1.1.0/24",
    ///                         "11.1.1.0/24",
    ///                     },
    ///                     PermittedEmailAddresses = new[]
    ///                     {
    ///                         ".example1.com",
    ///                         ".example2.com",
    ///                     },
    ///                     ExcludedEmailAddresses = new[]
    ///                     {
    ///                         ".deny.example1.com",
    ///                         ".deny.example2.com",
    ///                     },
    ///                     PermittedUris = new[]
    ///                     {
    ///                         ".example1.com",
    ///                         ".example2.com",
    ///                     },
    ///                     ExcludedUris = new[]
    ///                     {
    ///                         ".deny.example1.com",
    ///                         ".deny.example2.com",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// CaPool can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/caPools/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, CaPool can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:certificateauthority/caPool:CaPool default projects/{{project}}/locations/{{location}}/caPools/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:certificateauthority/caPool:CaPool default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:certificateauthority/caPool:CaPool default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:certificateauthority/caPool:CaPool")]
    public partial class CaPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The IssuancePolicy to control how Certificates will be issued from this CaPool.
        /// Structure is documented below.
        /// </summary>
        [Output("issuancePolicy")]
        public Output<Outputs.CaPoolIssuancePolicy?> IssuancePolicy { get; private set; } = null!;

        /// <summary>
        /// Labels with user-defined metadata.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
        /// "1.3kg", "count": "3" }.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Location of the CaPool. A full list of valid locations can be found by
        /// running `gcloud privateca locations list`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name for this CaPool.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
        /// Structure is documented below.
        /// </summary>
        [Output("publishingOptions")]
        public Output<Outputs.CaPoolPublishingOptions?> PublishingOptions { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The Tier of this CaPool.
        /// Possible values are: `ENTERPRISE`, `DEVOPS`.
        /// </summary>
        [Output("tier")]
        public Output<string> Tier { get; private set; } = null!;


        /// <summary>
        /// Create a CaPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CaPool(string name, CaPoolArgs args, CustomResourceOptions? options = null)
            : base("gcp:certificateauthority/caPool:CaPool", name, args ?? new CaPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CaPool(string name, Input<string> id, CaPoolState? state = null, CustomResourceOptions? options = null)
            : base("gcp:certificateauthority/caPool:CaPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CaPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CaPool Get(string name, Input<string> id, CaPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new CaPool(name, id, state, options);
        }
    }

    public sealed class CaPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IssuancePolicy to control how Certificates will be issued from this CaPool.
        /// Structure is documented below.
        /// </summary>
        [Input("issuancePolicy")]
        public Input<Inputs.CaPoolIssuancePolicyArgs>? IssuancePolicy { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels with user-defined metadata.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
        /// "1.3kg", "count": "3" }.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Location of the CaPool. A full list of valid locations can be found by
        /// running `gcloud privateca locations list`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name for this CaPool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
        /// Structure is documented below.
        /// </summary>
        [Input("publishingOptions")]
        public Input<Inputs.CaPoolPublishingOptionsArgs>? PublishingOptions { get; set; }

        /// <summary>
        /// The Tier of this CaPool.
        /// Possible values are: `ENTERPRISE`, `DEVOPS`.
        /// </summary>
        [Input("tier", required: true)]
        public Input<string> Tier { get; set; } = null!;

        public CaPoolArgs()
        {
        }
        public static new CaPoolArgs Empty => new CaPoolArgs();
    }

    public sealed class CaPoolState : global::Pulumi.ResourceArgs
    {
        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The IssuancePolicy to control how Certificates will be issued from this CaPool.
        /// Structure is documented below.
        /// </summary>
        [Input("issuancePolicy")]
        public Input<Inputs.CaPoolIssuancePolicyGetArgs>? IssuancePolicy { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels with user-defined metadata.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
        /// "1.3kg", "count": "3" }.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Location of the CaPool. A full list of valid locations can be found by
        /// running `gcloud privateca locations list`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name for this CaPool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
        /// Structure is documented below.
        /// </summary>
        [Input("publishingOptions")]
        public Input<Inputs.CaPoolPublishingOptionsGetArgs>? PublishingOptions { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The Tier of this CaPool.
        /// Possible values are: `ENTERPRISE`, `DEVOPS`.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        public CaPoolState()
        {
        }
        public static new CaPoolState Empty => new CaPoolState();
    }
}
