// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CertificateAuthority
{
    /// <summary>
    /// ## Import
    /// 
    /// CertificateAuthority can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificateauthority/authority:Authority default projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificateauthority/authority:Authority default {{project}}/{{location}}/{{certificate_authority_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificateauthority/authority:Authority default {{location}}/{{certificate_authority_id}}
    /// ```
    /// </summary>
    public partial class Authority : Pulumi.CustomResource
    {
        /// <summary>
        /// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
        /// </summary>
        [Output("accessUrls")]
        public Output<ImmutableArray<Outputs.AuthorityAccessUrl>> AccessUrls { get; private set; } = null!;

        /// <summary>
        /// The user provided Resource ID for this Certificate Authority.
        /// </summary>
        [Output("certificateAuthorityId")]
        public Output<string> CertificateAuthorityId { get; private set; } = null!;

        /// <summary>
        /// The config used to create a self-signed X.509 certificate or CSR.
        /// Structure is documented below.
        /// </summary>
        [Output("config")]
        public Output<Outputs.AuthorityConfig> Config { get; private set; } = null!;

        /// <summary>
        /// The time at which this CertificateAuthority was created. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
        /// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// If set to `true`, the Certificate Authority will be disabled
        /// on delete. If the Certitificate Authorities is not disabled,
        /// it cannot be deleted. Use with care. Defaults to `false`.
        /// </summary>
        [Output("disableOnDelete")]
        public Output<bool?> DisableOnDelete { get; private set; } = null!;

        /// <summary>
        /// The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
        /// such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
        /// (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named
        /// my-bucket, you would simply specify `my-bucket`. If not specified, a managed bucket will be
        /// created.
        /// </summary>
        [Output("gcsBucket")]
        public Output<string?> GcsBucket { get; private set; } = null!;

        /// <summary>
        /// Options that affect all certificates issued by a CertificateAuthority.
        /// Structure is documented below.
        /// </summary>
        [Output("issuingOptions")]
        public Output<Outputs.AuthorityIssuingOptions?> IssuingOptions { get; private set; } = null!;

        /// <summary>
        /// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
        /// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
        /// certificate. Otherwise, it is used to sign a CSR.
        /// Structure is documented below.
        /// </summary>
        [Output("keySpec")]
        public Output<Outputs.AuthorityKeySpec> KeySpec { get; private set; } = null!;

        /// <summary>
        /// Labels with user-defined metadata.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
        /// "1.3kg", "count": "3" }.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
        /// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
        /// fractional digits, terminated by 's'. Example: "3.5s".
        /// </summary>
        [Output("lifetime")]
        public Output<string?> Lifetime { get; private set; } = null!;

        /// <summary>
        /// Location of the CertificateAuthority. A full list of valid locations can be found by
        /// running `gcloud beta privateca locations list`.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name for this CertificateAuthority in the format projects/*/locations/*/certificateAuthorities/*.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such
        /// that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the
        /// current CertificateAuthority's certificate.
        /// </summary>
        [Output("pemCaCertificates")]
        public Output<ImmutableArray<string>> PemCaCertificates { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The State for this CertificateAuthority.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The Tier of this CertificateAuthority. `ENTERPRISE` Certificate Authorities track
        /// server side certificates issued, and support certificate revocation. For more details,
        /// please check the [associated documentation](https://cloud.google.com/certificate-authority-service/docs/tiers).
        /// Default value is `ENTERPRISE`.
        /// Possible values are `ENTERPRISE` and `DEVOPS`.
        /// </summary>
        [Output("tier")]
        public Output<string?> Tier { get; private set; } = null!;

        /// <summary>
        /// The Type of this CertificateAuthority.
        /// &gt; **Note:** For `SUBORDINATE` Certificate Authorities, they need to
        /// be manually activated (via Cloud Console of `gcloud`) before they can
        /// issue certificates.
        /// Default value is `SELF_SIGNED`.
        /// Possible values are `SELF_SIGNED` and `SUBORDINATE`.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// The time at which this CertificateAuthority was updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
        /// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Authority resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Authority(string name, AuthorityArgs args, CustomResourceOptions? options = null)
            : base("gcp:certificateauthority/authority:Authority", name, args ?? new AuthorityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Authority(string name, Input<string> id, AuthorityState? state = null, CustomResourceOptions? options = null)
            : base("gcp:certificateauthority/authority:Authority", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Authority resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Authority Get(string name, Input<string> id, AuthorityState? state = null, CustomResourceOptions? options = null)
        {
            return new Authority(name, id, state, options);
        }
    }

    public sealed class AuthorityArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The user provided Resource ID for this Certificate Authority.
        /// </summary>
        [Input("certificateAuthorityId", required: true)]
        public Input<string> CertificateAuthorityId { get; set; } = null!;

        /// <summary>
        /// The config used to create a self-signed X.509 certificate or CSR.
        /// Structure is documented below.
        /// </summary>
        [Input("config", required: true)]
        public Input<Inputs.AuthorityConfigArgs> Config { get; set; } = null!;

        /// <summary>
        /// If set to `true`, the Certificate Authority will be disabled
        /// on delete. If the Certitificate Authorities is not disabled,
        /// it cannot be deleted. Use with care. Defaults to `false`.
        /// </summary>
        [Input("disableOnDelete")]
        public Input<bool>? DisableOnDelete { get; set; }

        /// <summary>
        /// The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
        /// such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
        /// (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named
        /// my-bucket, you would simply specify `my-bucket`. If not specified, a managed bucket will be
        /// created.
        /// </summary>
        [Input("gcsBucket")]
        public Input<string>? GcsBucket { get; set; }

        /// <summary>
        /// Options that affect all certificates issued by a CertificateAuthority.
        /// Structure is documented below.
        /// </summary>
        [Input("issuingOptions")]
        public Input<Inputs.AuthorityIssuingOptionsArgs>? IssuingOptions { get; set; }

        /// <summary>
        /// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
        /// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
        /// certificate. Otherwise, it is used to sign a CSR.
        /// Structure is documented below.
        /// </summary>
        [Input("keySpec", required: true)]
        public Input<Inputs.AuthorityKeySpecArgs> KeySpec { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels with user-defined metadata.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
        /// "1.3kg", "count": "3" }.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
        /// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
        /// fractional digits, terminated by 's'. Example: "3.5s".
        /// </summary>
        [Input("lifetime")]
        public Input<string>? Lifetime { get; set; }

        /// <summary>
        /// Location of the CertificateAuthority. A full list of valid locations can be found by
        /// running `gcloud beta privateca locations list`.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Tier of this CertificateAuthority. `ENTERPRISE` Certificate Authorities track
        /// server side certificates issued, and support certificate revocation. For more details,
        /// please check the [associated documentation](https://cloud.google.com/certificate-authority-service/docs/tiers).
        /// Default value is `ENTERPRISE`.
        /// Possible values are `ENTERPRISE` and `DEVOPS`.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// The Type of this CertificateAuthority.
        /// &gt; **Note:** For `SUBORDINATE` Certificate Authorities, they need to
        /// be manually activated (via Cloud Console of `gcloud`) before they can
        /// issue certificates.
        /// Default value is `SELF_SIGNED`.
        /// Possible values are `SELF_SIGNED` and `SUBORDINATE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AuthorityArgs()
        {
        }
    }

    public sealed class AuthorityState : Pulumi.ResourceArgs
    {
        [Input("accessUrls")]
        private InputList<Inputs.AuthorityAccessUrlGetArgs>? _accessUrls;

        /// <summary>
        /// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
        /// </summary>
        public InputList<Inputs.AuthorityAccessUrlGetArgs> AccessUrls
        {
            get => _accessUrls ?? (_accessUrls = new InputList<Inputs.AuthorityAccessUrlGetArgs>());
            set => _accessUrls = value;
        }

        /// <summary>
        /// The user provided Resource ID for this Certificate Authority.
        /// </summary>
        [Input("certificateAuthorityId")]
        public Input<string>? CertificateAuthorityId { get; set; }

        /// <summary>
        /// The config used to create a self-signed X.509 certificate or CSR.
        /// Structure is documented below.
        /// </summary>
        [Input("config")]
        public Input<Inputs.AuthorityConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// The time at which this CertificateAuthority was created. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
        /// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// If set to `true`, the Certificate Authority will be disabled
        /// on delete. If the Certitificate Authorities is not disabled,
        /// it cannot be deleted. Use with care. Defaults to `false`.
        /// </summary>
        [Input("disableOnDelete")]
        public Input<bool>? DisableOnDelete { get; set; }

        /// <summary>
        /// The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
        /// such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
        /// (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named
        /// my-bucket, you would simply specify `my-bucket`. If not specified, a managed bucket will be
        /// created.
        /// </summary>
        [Input("gcsBucket")]
        public Input<string>? GcsBucket { get; set; }

        /// <summary>
        /// Options that affect all certificates issued by a CertificateAuthority.
        /// Structure is documented below.
        /// </summary>
        [Input("issuingOptions")]
        public Input<Inputs.AuthorityIssuingOptionsGetArgs>? IssuingOptions { get; set; }

        /// <summary>
        /// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
        /// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
        /// certificate. Otherwise, it is used to sign a CSR.
        /// Structure is documented below.
        /// </summary>
        [Input("keySpec")]
        public Input<Inputs.AuthorityKeySpecGetArgs>? KeySpec { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels with user-defined metadata.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
        /// "1.3kg", "count": "3" }.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
        /// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
        /// fractional digits, terminated by 's'. Example: "3.5s".
        /// </summary>
        [Input("lifetime")]
        public Input<string>? Lifetime { get; set; }

        /// <summary>
        /// Location of the CertificateAuthority. A full list of valid locations can be found by
        /// running `gcloud beta privateca locations list`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name for this CertificateAuthority in the format projects/*/locations/*/certificateAuthorities/*.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pemCaCertificates")]
        private InputList<string>? _pemCaCertificates;

        /// <summary>
        /// This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such
        /// that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the
        /// current CertificateAuthority's certificate.
        /// </summary>
        public InputList<string> PemCaCertificates
        {
            get => _pemCaCertificates ?? (_pemCaCertificates = new InputList<string>());
            set => _pemCaCertificates = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The State for this CertificateAuthority.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The Tier of this CertificateAuthority. `ENTERPRISE` Certificate Authorities track
        /// server side certificates issued, and support certificate revocation. For more details,
        /// please check the [associated documentation](https://cloud.google.com/certificate-authority-service/docs/tiers).
        /// Default value is `ENTERPRISE`.
        /// Possible values are `ENTERPRISE` and `DEVOPS`.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// The Type of this CertificateAuthority.
        /// &gt; **Note:** For `SUBORDINATE` Certificate Authorities, they need to
        /// be manually activated (via Cloud Console of `gcloud`) before they can
        /// issue certificates.
        /// Default value is `SELF_SIGNED`.
        /// Possible values are `SELF_SIGNED` and `SUBORDINATE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The time at which this CertificateAuthority was updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
        /// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public AuthorityState()
        {
        }
    }
}
