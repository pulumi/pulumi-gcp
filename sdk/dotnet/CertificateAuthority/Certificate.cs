// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CertificateAuthority
{
    /// <summary>
    /// ## Import
    /// 
    /// Certificate can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificateauthority/certificate:Certificate default projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority}}/certificates/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificateauthority/certificate:Certificate default {{project}}/{{location}}/{{certificate_authority}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificateauthority/certificate:Certificate default {{location}}/{{certificate_authority}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:certificateauthority/certificate:Certificate")]
    public partial class Certificate : Pulumi.CustomResource
    {
        /// <summary>
        /// Certificate Authority name.
        /// </summary>
        [Output("certificateAuthority")]
        public Output<string> CertificateAuthority { get; private set; } = null!;

        /// <summary>
        /// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
        /// this field is present.
        /// </summary>
        [Output("certificateDescriptions")]
        public Output<ImmutableArray<Outputs.CertificateCertificateDescription>> CertificateDescriptions { get; private set; } = null!;

        /// <summary>
        /// The config used to create a self-signed X.509 certificate or CSR.
        /// Structure is documented below.
        /// </summary>
        [Output("config")]
        public Output<Outputs.CertificateConfig?> Config { get; private set; } = null!;

        /// <summary>
        /// The time that this resource was created on the server. This is in RFC3339 text format.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Labels with user-defined metadata to apply to this resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
        /// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
        /// fractional digits, terminated by 's'. Example: "3.5s".
        /// </summary>
        [Output("lifetime")]
        public Output<string?> Lifetime { get; private set; } = null!;

        /// <summary>
        /// Location of the CertificateAuthority. A full list of valid locations can be found by
        /// running `gcloud beta privateca locations list`.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name for this Certificate .
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Output only. The pem-encoded, signed X.509 certificate.
        /// </summary>
        [Output("pemCertificate")]
        public Output<string> PemCertificate { get; private set; } = null!;

        /// <summary>
        /// Required. Expected to be in leaf-to-root order according to RFC 5246.
        /// </summary>
        [Output("pemCertificates")]
        public Output<ImmutableArray<string>> PemCertificates { get; private set; } = null!;

        /// <summary>
        /// Immutable. A pem-encoded X.509 certificate signing request (CSR).
        /// </summary>
        [Output("pemCsr")]
        public Output<string?> PemCsr { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
        /// this field is present.
        /// </summary>
        [Output("revocationDetails")]
        public Output<ImmutableArray<Outputs.CertificateRevocationDetail>> RevocationDetails { get; private set; } = null!;

        /// <summary>
        /// Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("gcp:certificateauthority/certificate:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
            : base("gcp:certificateauthority/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, state, options);
        }
    }

    public sealed class CertificateArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Certificate Authority name.
        /// </summary>
        [Input("certificateAuthority", required: true)]
        public Input<string> CertificateAuthority { get; set; } = null!;

        /// <summary>
        /// The config used to create a self-signed X.509 certificate or CSR.
        /// Structure is documented below.
        /// </summary>
        [Input("config")]
        public Input<Inputs.CertificateConfigArgs>? Config { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels with user-defined metadata to apply to this resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
        /// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
        /// fractional digits, terminated by 's'. Example: "3.5s".
        /// </summary>
        [Input("lifetime")]
        public Input<string>? Lifetime { get; set; }

        /// <summary>
        /// Location of the CertificateAuthority. A full list of valid locations can be found by
        /// running `gcloud beta privateca locations list`.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name for this Certificate .
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Immutable. A pem-encoded X.509 certificate signing request (CSR).
        /// </summary>
        [Input("pemCsr")]
        public Input<string>? PemCsr { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public CertificateArgs()
        {
        }
    }

    public sealed class CertificateState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Certificate Authority name.
        /// </summary>
        [Input("certificateAuthority")]
        public Input<string>? CertificateAuthority { get; set; }

        [Input("certificateDescriptions")]
        private InputList<Inputs.CertificateCertificateDescriptionGetArgs>? _certificateDescriptions;

        /// <summary>
        /// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
        /// this field is present.
        /// </summary>
        public InputList<Inputs.CertificateCertificateDescriptionGetArgs> CertificateDescriptions
        {
            get => _certificateDescriptions ?? (_certificateDescriptions = new InputList<Inputs.CertificateCertificateDescriptionGetArgs>());
            set => _certificateDescriptions = value;
        }

        /// <summary>
        /// The config used to create a self-signed X.509 certificate or CSR.
        /// Structure is documented below.
        /// </summary>
        [Input("config")]
        public Input<Inputs.CertificateConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// The time that this resource was created on the server. This is in RFC3339 text format.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels with user-defined metadata to apply to this resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
        /// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
        /// fractional digits, terminated by 's'. Example: "3.5s".
        /// </summary>
        [Input("lifetime")]
        public Input<string>? Lifetime { get; set; }

        /// <summary>
        /// Location of the CertificateAuthority. A full list of valid locations can be found by
        /// running `gcloud beta privateca locations list`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name for this Certificate .
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Output only. The pem-encoded, signed X.509 certificate.
        /// </summary>
        [Input("pemCertificate")]
        public Input<string>? PemCertificate { get; set; }

        [Input("pemCertificates")]
        private InputList<string>? _pemCertificates;

        /// <summary>
        /// Required. Expected to be in leaf-to-root order according to RFC 5246.
        /// </summary>
        public InputList<string> PemCertificates
        {
            get => _pemCertificates ?? (_pemCertificates = new InputList<string>());
            set => _pemCertificates = value;
        }

        /// <summary>
        /// Immutable. A pem-encoded X.509 certificate signing request (CSR).
        /// </summary>
        [Input("pemCsr")]
        public Input<string>? PemCsr { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("revocationDetails")]
        private InputList<Inputs.CertificateRevocationDetailGetArgs>? _revocationDetails;

        /// <summary>
        /// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
        /// this field is present.
        /// </summary>
        public InputList<Inputs.CertificateRevocationDetailGetArgs> RevocationDetails
        {
            get => _revocationDetails ?? (_revocationDetails = new InputList<Inputs.CertificateRevocationDetailGetArgs>());
            set => _revocationDetails = value;
        }

        /// <summary>
        /// Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public CertificateState()
        {
        }
    }
}
