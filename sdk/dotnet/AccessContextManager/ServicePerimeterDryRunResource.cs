// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.AccessContextManager
{
    /// <summary>
    /// Allows configuring a single GCP resource that should be inside of the `Spec` block of a dry run service perimeter.
    /// This resource is intended to be used in cases where it is not possible to compile a full list
    /// of projects to include in a `gcp.accesscontextmanager.ServicePerimeter` resource,
    /// to enable them to be added separately.
    /// If your perimeter is NOT in dry-run mode use `gcp.accesscontextmanager.ServicePerimeterResource` instead.
    /// 
    /// &gt; **Note:** If this resource is used alongside a `gcp.accesscontextmanager.ServicePerimeter` resource,
    /// the service perimeter resource must have a `Lifecycle` block with `IgnoreChanges = [spec[0].resources]` so
    /// they don't fight over which resources should be in the policy.
    /// 
    /// To get more information about ServicePerimeterDryRunResource, see:
    /// 
    /// * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters)
    /// * How-to Guides
    ///     * [Service Perimeter Quickstart](https://cloud.google.com/vpc-service-controls/docs/quickstart)
    /// 
    /// &gt; **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
    /// you must specify a `BillingProject` and set `UserProjectOverride` to true
    /// in the provider configuration. Otherwise the ACM API will return a 403 error.
    /// Your account must have the `serviceusage.services.use` permission on the
    /// `BillingProject` you defined.
    /// 
    /// ## Example Usage
    /// 
    /// ### Access Context Manager Service Perimeter Dry Run Resource Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    ///     {
    ///         Parent = "organizations/123456789",
    ///         Title = "my policy",
    ///     });
    /// 
    ///     var service_perimeter_dry_run_resourceServicePerimeter = new Gcp.AccessContextManager.ServicePerimeter("service-perimeter-dry-run-resource", new()
    ///     {
    ///         Parent = access_policy.Name.Apply(name =&gt; $"accessPolicies/{name}"),
    ///         Name = access_policy.Name.Apply(name =&gt; $"accessPolicies/{name}/servicePerimeters/restrict_all"),
    ///         Title = "restrict_all",
    ///         Spec = new Gcp.AccessContextManager.Inputs.ServicePerimeterSpecArgs
    ///         {
    ///             RestrictedServices = new[]
    ///             {
    ///                 "storage.googleapis.com",
    ///             },
    ///         },
    ///         UseExplicitDryRunSpec = true,
    ///     });
    /// 
    ///     var service_perimeter_dry_run_resource = new Gcp.AccessContextManager.ServicePerimeterDryRunResource("service-perimeter-dry-run-resource", new()
    ///     {
    ///         PerimeterName = service_perimeter_dry_run_resourceServicePerimeter.Name,
    ///         Resource = "projects/987654321",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ServicePerimeterDryRunResource can be imported using any of these accepted formats:
    /// 
    /// * `{{perimeter_name}}/{{resource}}`
    /// 
    /// When using the `pulumi import` command, ServicePerimeterDryRunResource can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:accesscontextmanager/servicePerimeterDryRunResource:ServicePerimeterDryRunResource default {{perimeter_name}}/{{resource}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:accesscontextmanager/servicePerimeterDryRunResource:ServicePerimeterDryRunResource")]
    public partial class ServicePerimeterDryRunResource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Access Policy this resource belongs to.
        /// </summary>
        [Output("accessPolicyId")]
        public Output<string> AccessPolicyId { get; private set; } = null!;

        /// <summary>
        /// The perimeter etag is internally used to prevent overwriting the list of perimeter resources on PATCH calls. It is retrieved from the same GET perimeter API call that's used to get the current list of resources. The resource to add or remove is merged into that list and then this etag is sent with the PATCH call along with the updated resource list.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The name of the Service Perimeter to add this resource to.
        /// </summary>
        [Output("perimeterName")]
        public Output<string> PerimeterName { get; private set; } = null!;

        /// <summary>
        /// A GCP resource that is inside of the service perimeter.
        /// Currently only projects are allowed.
        /// Format: projects/{project_number}
        /// </summary>
        [Output("resource")]
        public Output<string> Resource { get; private set; } = null!;


        /// <summary>
        /// Create a ServicePerimeterDryRunResource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServicePerimeterDryRunResource(string name, ServicePerimeterDryRunResourceArgs args, CustomResourceOptions? options = null)
            : base("gcp:accesscontextmanager/servicePerimeterDryRunResource:ServicePerimeterDryRunResource", name, args ?? new ServicePerimeterDryRunResourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServicePerimeterDryRunResource(string name, Input<string> id, ServicePerimeterDryRunResourceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:accesscontextmanager/servicePerimeterDryRunResource:ServicePerimeterDryRunResource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServicePerimeterDryRunResource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServicePerimeterDryRunResource Get(string name, Input<string> id, ServicePerimeterDryRunResourceState? state = null, CustomResourceOptions? options = null)
        {
            return new ServicePerimeterDryRunResource(name, id, state, options);
        }
    }

    public sealed class ServicePerimeterDryRunResourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Service Perimeter to add this resource to.
        /// </summary>
        [Input("perimeterName", required: true)]
        public Input<string> PerimeterName { get; set; } = null!;

        /// <summary>
        /// A GCP resource that is inside of the service perimeter.
        /// Currently only projects are allowed.
        /// Format: projects/{project_number}
        /// </summary>
        [Input("resource", required: true)]
        public Input<string> Resource { get; set; } = null!;

        public ServicePerimeterDryRunResourceArgs()
        {
        }
        public static new ServicePerimeterDryRunResourceArgs Empty => new ServicePerimeterDryRunResourceArgs();
    }

    public sealed class ServicePerimeterDryRunResourceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Access Policy this resource belongs to.
        /// </summary>
        [Input("accessPolicyId")]
        public Input<string>? AccessPolicyId { get; set; }

        /// <summary>
        /// The perimeter etag is internally used to prevent overwriting the list of perimeter resources on PATCH calls. It is retrieved from the same GET perimeter API call that's used to get the current list of resources. The resource to add or remove is merged into that list and then this etag is sent with the PATCH call along with the updated resource list.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The name of the Service Perimeter to add this resource to.
        /// </summary>
        [Input("perimeterName")]
        public Input<string>? PerimeterName { get; set; }

        /// <summary>
        /// A GCP resource that is inside of the service perimeter.
        /// Currently only projects are allowed.
        /// Format: projects/{project_number}
        /// </summary>
        [Input("resource")]
        public Input<string>? Resource { get; set; }

        public ServicePerimeterDryRunResourceState()
        {
        }
        public static new ServicePerimeterDryRunResourceState Empty => new ServicePerimeterDryRunResourceState();
    }
}
