// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.AccessContextManager
{
    public static class GetAccessPolicy
    {
        /// <summary>
        /// Get information about an Access Context Manager AccessPolicy.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy_org = Gcp.AccessContextManager.GetAccessPolicy.Invoke(new()
        ///     {
        ///         Parent = "organizations/1234567",
        ///     });
        /// 
        ///     var policy_scoped = Gcp.AccessContextManager.GetAccessPolicy.Invoke(new()
        ///     {
        ///         Parent = "organizations/1234567",
        ///         Scopes = new[]
        ///         {
        ///             "projects/1234567",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccessPolicyResult> InvokeAsync(GetAccessPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccessPolicyResult>("gcp:accesscontextmanager/getAccessPolicy:getAccessPolicy", args ?? new GetAccessPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about an Access Context Manager AccessPolicy.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy_org = Gcp.AccessContextManager.GetAccessPolicy.Invoke(new()
        ///     {
        ///         Parent = "organizations/1234567",
        ///     });
        /// 
        ///     var policy_scoped = Gcp.AccessContextManager.GetAccessPolicy.Invoke(new()
        ///     {
        ///         Parent = "organizations/1234567",
        ///         Scopes = new[]
        ///         {
        ///             "projects/1234567",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccessPolicyResult> Invoke(GetAccessPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccessPolicyResult>("gcp:accesscontextmanager/getAccessPolicy:getAccessPolicy", args ?? new GetAccessPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about an Access Context Manager AccessPolicy.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy_org = Gcp.AccessContextManager.GetAccessPolicy.Invoke(new()
        ///     {
        ///         Parent = "organizations/1234567",
        ///     });
        /// 
        ///     var policy_scoped = Gcp.AccessContextManager.GetAccessPolicy.Invoke(new()
        ///     {
        ///         Parent = "organizations/1234567",
        ///         Scopes = new[]
        ///         {
        ///             "projects/1234567",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccessPolicyResult> Invoke(GetAccessPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccessPolicyResult>("gcp:accesscontextmanager/getAccessPolicy:getAccessPolicy", args ?? new GetAccessPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccessPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The parent of this AccessPolicy in the Cloud Resource Hierarchy. Format: `organizations/{{organization_id}}`
        /// </summary>
        [Input("parent", required: true)]
        public string Parent { get; set; } = null!;

        [Input("scopes")]
        private List<string>? _scopes;

        /// <summary>
        /// Folder or project on which this policy is applicable. Format: `folders/{{folder_id}}` or `projects/{{project_number}}`
        /// </summary>
        public List<string> Scopes
        {
            get => _scopes ?? (_scopes = new List<string>());
            set => _scopes = value;
        }

        public GetAccessPolicyArgs()
        {
        }
        public static new GetAccessPolicyArgs Empty => new GetAccessPolicyArgs();
    }

    public sealed class GetAccessPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The parent of this AccessPolicy in the Cloud Resource Hierarchy. Format: `organizations/{{organization_id}}`
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// Folder or project on which this policy is applicable. Format: `folders/{{folder_id}}` or `projects/{{project_number}}`
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        public GetAccessPolicyInvokeArgs()
        {
        }
        public static new GetAccessPolicyInvokeArgs Empty => new GetAccessPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccessPolicyResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource name of the AccessPolicy.
        /// </summary>
        public readonly string Name;
        public readonly string Parent;
        public readonly ImmutableArray<string> Scopes;
        /// <summary>
        /// Human readable title. Does not affect behavior.
        /// </summary>
        public readonly string Title;

        [OutputConstructor]
        private GetAccessPolicyResult(
            string id,

            string name,

            string parent,

            ImmutableArray<string> scopes,

            string title)
        {
            Id = id;
            Name = name;
            Parent = parent;
            Scopes = scopes;
            Title = title;
        }
    }
}
