// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.AccessContextManager
{
    /// <summary>
    /// Replace all existing Access Levels in an Access Policy with the Access Levels provided. This is done atomically.
    /// This is a bulk edit of all Access Levels and may override existing Access Levels created by `gcp.accesscontextmanager.AccessLevel`,
    /// thus causing a permadiff if used alongside `gcp.accesscontextmanager.AccessLevel` on the same parent.
    /// 
    /// To get more information about AccessLevels, see:
    /// 
    /// * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)
    /// * How-to Guides
    ///     * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// AccessLevels can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:accesscontextmanager/accessLevels:AccessLevels default {{parent}}/accessLevels
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:accesscontextmanager/accessLevels:AccessLevels default {{parent}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:accesscontextmanager/accessLevels:AccessLevels")]
    public partial class AccessLevels : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The desired Access Levels that should replace all existing Access Levels in the Access Policy.
        /// Structure is documented below.
        /// </summary>
        [Output("accessLevels")]
        public Output<ImmutableArray<Outputs.AccessLevelsAccessLevel>> AccessLevelDetails { get; private set; } = null!;

        /// <summary>
        /// The AccessPolicy this AccessLevel lives in.
        /// Format: accessPolicies/{policy_id}
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;


        /// <summary>
        /// Create a AccessLevels resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessLevels(string name, AccessLevelsArgs args, CustomResourceOptions? options = null)
            : base("gcp:accesscontextmanager/accessLevels:AccessLevels", name, args ?? new AccessLevelsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessLevels(string name, Input<string> id, AccessLevelsState? state = null, CustomResourceOptions? options = null)
            : base("gcp:accesscontextmanager/accessLevels:AccessLevels", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessLevels resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessLevels Get(string name, Input<string> id, AccessLevelsState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessLevels(name, id, state, options);
        }
    }

    public sealed class AccessLevelsArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessLevels")]
        private InputList<Inputs.AccessLevelsAccessLevelArgs>? _accessLevels;

        /// <summary>
        /// The desired Access Levels that should replace all existing Access Levels in the Access Policy.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AccessLevelsAccessLevelArgs> AccessLevelDetails
        {
            get => _accessLevels ?? (_accessLevels = new InputList<Inputs.AccessLevelsAccessLevelArgs>());
            set => _accessLevels = value;
        }

        /// <summary>
        /// The AccessPolicy this AccessLevel lives in.
        /// Format: accessPolicies/{policy_id}
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        public AccessLevelsArgs()
        {
        }
        public static new AccessLevelsArgs Empty => new AccessLevelsArgs();
    }

    public sealed class AccessLevelsState : global::Pulumi.ResourceArgs
    {
        [Input("accessLevels")]
        private InputList<Inputs.AccessLevelsAccessLevelGetArgs>? _accessLevels;

        /// <summary>
        /// The desired Access Levels that should replace all existing Access Levels in the Access Policy.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AccessLevelsAccessLevelGetArgs> AccessLevelDetails
        {
            get => _accessLevels ?? (_accessLevels = new InputList<Inputs.AccessLevelsAccessLevelGetArgs>());
            set => _accessLevels = value;
        }

        /// <summary>
        /// The AccessPolicy this AccessLevel lives in.
        /// Format: accessPolicies/{policy_id}
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        public AccessLevelsState()
        {
        }
        public static new AccessLevelsState Empty => new AccessLevelsState();
    }
}
