// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.AccessContextManager
{
    /// <summary>
    /// Manage a single IngressPolicy in the spec (dry-run) configuration for a service perimeter.
    /// IngressPolicies match requests based on ingressFrom and ingressTo stanzas. For an ingress policy to match,
    /// both the ingressFrom and ingressTo stanzas must be matched. If an IngressPolicy matches a request,
    /// the request is allowed through the perimeter boundary from outside the perimeter.
    /// For example, access from the internet can be allowed either based on an AccessLevel or,
    /// for traffic hosted on Google Cloud, the project of the source network.
    /// For access from private networks, using the project of the hosting network is required.
    /// Individual ingress policies can be limited by restricting which services and/
    /// or actions they match using the ingressTo field.
    /// 
    /// &gt; **Note:** By default, updates to this resource will remove the IngressPolicy from the
    /// from the perimeter and add it back in a non-atomic manner. To ensure that the new IngressPolicy
    /// is added before the old one is removed, add a `lifecycle` block with `create_before_destroy = true` to this resource.
    /// **Note:** If this resource is used alongside a `gcp.accesscontextmanager.ServicePerimeter` resource,
    /// the service perimeter resource must have a `lifecycle` block with `ignore_changes = [spec[0].ingress_policies]` so
    /// they don't fight over which ingress rules should be in the policy.
    /// 
    /// To get more information about ServicePerimeterDryRunIngressPolicy, see:
    /// 
    /// * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters#ingresspolicy)
    /// * How-to Guides
    ///     * [Guide to Ingress and Egress Rules](https://cloud.google.com/vpc-service-controls/docs/ingress-egress-rules)
    /// 
    /// ## Example Usage
    /// </summary>
    [GcpResourceType("gcp:accesscontextmanager/servicePerimeterDryRunIngressPolicy:ServicePerimeterDryRunIngressPolicy")]
    public partial class ServicePerimeterDryRunIngressPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Access Policy this resource belongs to.
        /// </summary>
        [Output("accessPolicyId")]
        public Output<string> AccessPolicyId { get; private set; } = null!;

        /// <summary>
        /// Defines the conditions on the source of a request causing this `IngressPolicy`
        /// to apply.
        /// Structure is documented below.
        /// </summary>
        [Output("ingressFrom")]
        public Output<Outputs.ServicePerimeterDryRunIngressPolicyIngressFrom?> IngressFrom { get; private set; } = null!;

        /// <summary>
        /// Defines the conditions on the `ApiOperation` and request destination that cause
        /// this `IngressPolicy` to apply.
        /// Structure is documented below.
        /// </summary>
        [Output("ingressTo")]
        public Output<Outputs.ServicePerimeterDryRunIngressPolicyIngressTo?> IngressTo { get; private set; } = null!;

        /// <summary>
        /// The name of the Service Perimeter to add this resource to.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("perimeter")]
        public Output<string> Perimeter { get; private set; } = null!;


        /// <summary>
        /// Create a ServicePerimeterDryRunIngressPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServicePerimeterDryRunIngressPolicy(string name, ServicePerimeterDryRunIngressPolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:accesscontextmanager/servicePerimeterDryRunIngressPolicy:ServicePerimeterDryRunIngressPolicy", name, args ?? new ServicePerimeterDryRunIngressPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServicePerimeterDryRunIngressPolicy(string name, Input<string> id, ServicePerimeterDryRunIngressPolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:accesscontextmanager/servicePerimeterDryRunIngressPolicy:ServicePerimeterDryRunIngressPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServicePerimeterDryRunIngressPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServicePerimeterDryRunIngressPolicy Get(string name, Input<string> id, ServicePerimeterDryRunIngressPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ServicePerimeterDryRunIngressPolicy(name, id, state, options);
        }
    }

    public sealed class ServicePerimeterDryRunIngressPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines the conditions on the source of a request causing this `IngressPolicy`
        /// to apply.
        /// Structure is documented below.
        /// </summary>
        [Input("ingressFrom")]
        public Input<Inputs.ServicePerimeterDryRunIngressPolicyIngressFromArgs>? IngressFrom { get; set; }

        /// <summary>
        /// Defines the conditions on the `ApiOperation` and request destination that cause
        /// this `IngressPolicy` to apply.
        /// Structure is documented below.
        /// </summary>
        [Input("ingressTo")]
        public Input<Inputs.ServicePerimeterDryRunIngressPolicyIngressToArgs>? IngressTo { get; set; }

        /// <summary>
        /// The name of the Service Perimeter to add this resource to.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("perimeter", required: true)]
        public Input<string> Perimeter { get; set; } = null!;

        public ServicePerimeterDryRunIngressPolicyArgs()
        {
        }
        public static new ServicePerimeterDryRunIngressPolicyArgs Empty => new ServicePerimeterDryRunIngressPolicyArgs();
    }

    public sealed class ServicePerimeterDryRunIngressPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Access Policy this resource belongs to.
        /// </summary>
        [Input("accessPolicyId")]
        public Input<string>? AccessPolicyId { get; set; }

        /// <summary>
        /// Defines the conditions on the source of a request causing this `IngressPolicy`
        /// to apply.
        /// Structure is documented below.
        /// </summary>
        [Input("ingressFrom")]
        public Input<Inputs.ServicePerimeterDryRunIngressPolicyIngressFromGetArgs>? IngressFrom { get; set; }

        /// <summary>
        /// Defines the conditions on the `ApiOperation` and request destination that cause
        /// this `IngressPolicy` to apply.
        /// Structure is documented below.
        /// </summary>
        [Input("ingressTo")]
        public Input<Inputs.ServicePerimeterDryRunIngressPolicyIngressToGetArgs>? IngressTo { get; set; }

        /// <summary>
        /// The name of the Service Perimeter to add this resource to.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("perimeter")]
        public Input<string>? Perimeter { get; set; }

        public ServicePerimeterDryRunIngressPolicyState()
        {
        }
        public static new ServicePerimeterDryRunIngressPolicyState Empty => new ServicePerimeterDryRunIngressPolicyState();
    }
}
