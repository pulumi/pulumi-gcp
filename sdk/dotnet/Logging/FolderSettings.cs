// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Logging
{
    /// <summary>
    /// Default resource settings control whether CMEK is required for new log buckets. These settings also determine the storage location for the _Default and _Required log buckets, and whether the _Default sink is enabled or disabled.
    /// 
    /// To get more information about FolderSettings, see:
    /// 
    /// * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/TopLevel/getSettings)
    /// * How-to Guides
    ///     * [Configure default settings for organizations and folders](https://cloud.google.com/logging/docs/default-settings)
    /// 
    /// ## Example Usage
    /// ### Logging Folder Settings All
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myFolder = new Gcp.Organizations.Folder("myFolder", new()
    ///     {
    ///         DisplayName = "folder-name",
    ///         Parent = "organizations/123456789",
    ///     });
    /// 
    ///     var settings = Gcp.Logging.GetFolderSettings.Invoke(new()
    ///     {
    ///         Folder = myFolder.FolderId,
    ///     });
    /// 
    ///     var iam = new Gcp.Kms.CryptoKeyIAMMember("iam", new()
    ///     {
    ///         CryptoKeyId = "kms-key",
    ///         Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    ///         Member = $"serviceAccount:{settings.Apply(getFolderSettingsResult =&gt; getFolderSettingsResult.KmsServiceAccountId)}",
    ///     });
    /// 
    ///     var example = new Gcp.Logging.FolderSettings("example", new()
    ///     {
    ///         DisableDefaultSink = true,
    ///         Folder = myFolder.FolderId,
    ///         KmsKeyName = "kms-key",
    ///         StorageLocation = "us-central1",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             iam,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// FolderSettings can be imported using any of these accepted formats* `folders/{{folder}}/settings` * `{{folder}}` When using the `pulumi import` command, FolderSettings can be imported using one of the formats above. For example
    /// 
    /// ```sh
    ///  $ pulumi import gcp:logging/folderSettings:FolderSettings default folders/{{folder}}/settings
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:logging/folderSettings:FolderSettings default {{folder}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:logging/folderSettings:FolderSettings")]
    public partial class FolderSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
        /// </summary>
        [Output("disableDefaultSink")]
        public Output<bool> DisableDefaultSink { get; private set; } = null!;

        /// <summary>
        /// The folder for which to retrieve settings.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("folder")]
        public Output<string> Folder { get; private set; } = null!;

        /// <summary>
        /// The resource name for the configured Cloud KMS key.
        /// </summary>
        [Output("kmsKeyName")]
        public Output<string> KmsKeyName { get; private set; } = null!;

        /// <summary>
        /// The service account that will be used by the Log Router to access your Cloud KMS key.
        /// </summary>
        [Output("kmsServiceAccountId")]
        public Output<string> KmsServiceAccountId { get; private set; } = null!;

        /// <summary>
        /// The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
        /// </summary>
        [Output("loggingServiceAccountId")]
        public Output<string> LoggingServiceAccountId { get; private set; } = null!;

        /// <summary>
        /// The resource name of the settings.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
        /// </summary>
        [Output("storageLocation")]
        public Output<string> StorageLocation { get; private set; } = null!;


        /// <summary>
        /// Create a FolderSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FolderSettings(string name, FolderSettingsArgs args, CustomResourceOptions? options = null)
            : base("gcp:logging/folderSettings:FolderSettings", name, args ?? new FolderSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FolderSettings(string name, Input<string> id, FolderSettingsState? state = null, CustomResourceOptions? options = null)
            : base("gcp:logging/folderSettings:FolderSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FolderSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FolderSettings Get(string name, Input<string> id, FolderSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new FolderSettings(name, id, state, options);
        }
    }

    public sealed class FolderSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
        /// </summary>
        [Input("disableDefaultSink")]
        public Input<bool>? DisableDefaultSink { get; set; }

        /// <summary>
        /// The folder for which to retrieve settings.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("folder", required: true)]
        public Input<string> Folder { get; set; } = null!;

        /// <summary>
        /// The resource name for the configured Cloud KMS key.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        /// <summary>
        /// The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
        /// </summary>
        [Input("storageLocation")]
        public Input<string>? StorageLocation { get; set; }

        public FolderSettingsArgs()
        {
        }
        public static new FolderSettingsArgs Empty => new FolderSettingsArgs();
    }

    public sealed class FolderSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
        /// </summary>
        [Input("disableDefaultSink")]
        public Input<bool>? DisableDefaultSink { get; set; }

        /// <summary>
        /// The folder for which to retrieve settings.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// The resource name for the configured Cloud KMS key.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        /// <summary>
        /// The service account that will be used by the Log Router to access your Cloud KMS key.
        /// </summary>
        [Input("kmsServiceAccountId")]
        public Input<string>? KmsServiceAccountId { get; set; }

        /// <summary>
        /// The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
        /// </summary>
        [Input("loggingServiceAccountId")]
        public Input<string>? LoggingServiceAccountId { get; set; }

        /// <summary>
        /// The resource name of the settings.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
        /// </summary>
        [Input("storageLocation")]
        public Input<string>? StorageLocation { get; set; }

        public FolderSettingsState()
        {
        }
        public static new FolderSettingsState Empty => new FolderSettingsState();
    }
}
