// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Logging
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_sink = new Gcp.Logging.ProjectSink("my-sink", new()
    ///     {
    ///         Destination = "pubsub.googleapis.com/projects/my-project/topics/instance-activity",
    ///         Filter = "resource.type = gce_instance AND severity &gt;= WARNING",
    ///         UniqueWriterIdentity = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// A more complete example follows: this creates a compute instance, as well as a log sink that logs all activity to a
    /// cloud storage bucket. Because we are using `unique_writer_identity`, we must grant it access to the bucket. Note that
    /// this grant requires the "Project IAM Admin" IAM role (`roles/resourcemanager.projectIamAdmin`) granted to the credentials
    /// used with this provider.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Our logged compute instance
    ///     var my_logged_instance = new Gcp.Compute.Instance("my-logged-instance", new()
    ///     {
    ///         MachineType = "e2-medium",
    ///         Zone = "us-central1-a",
    ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
    ///         {
    ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
    ///             {
    ///                 Image = "debian-cloud/debian-11",
    ///             },
    ///         },
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
    ///             {
    ///                 Network = "default",
    ///                 AccessConfigs = new[]
    ///                 {
    ///                     ,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // A bucket to store logs in
    ///     var log_bucket = new Gcp.Storage.Bucket("log-bucket", new()
    ///     {
    ///         Location = "US",
    ///     });
    /// 
    ///     // Our sink; this logs all activity related to our "my-logged-instance" instance
    ///     var instance_sink = new Gcp.Logging.ProjectSink("instance-sink", new()
    ///     {
    ///         Description = "some explanation on what this is",
    ///         Destination = log_bucket.Name.Apply(name =&gt; $"storage.googleapis.com/{name}"),
    ///         Filter = my_logged_instance.InstanceId.Apply(instanceId =&gt; $"resource.type = gce_instance AND resource.labels.instance_id = \"{instanceId}\""),
    ///         UniqueWriterIdentity = true,
    ///     });
    /// 
    ///     // Because our sink uses a unique_writer, we must grant that writer access to the bucket.
    ///     var log_writer = new Gcp.Projects.IAMBinding("log-writer", new()
    ///     {
    ///         Project = "your-project-id",
    ///         Role = "roles/storage.objectCreator",
    ///         Members = new[]
    ///         {
    ///             instance_sink.WriterIdentity,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// The following example uses `exclusions` to filter logs that will not be exported. In this example logs are exported to a [log bucket](https://cloud.google.com/logging/docs/buckets) and there are 2 exclusions configured
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var log_bucket = new Gcp.Logging.ProjectSink("log-bucket", new()
    ///     {
    ///         Destination = "logging.googleapis.com/projects/my-project/locations/global/buckets/_Default",
    ///         Exclusions = new[]
    ///         {
    ///             new Gcp.Logging.Inputs.ProjectSinkExclusionArgs
    ///             {
    ///                 Description = "Exclude logs from namespace-1 in k8s",
    ///                 Filter = "resource.type = k8s_container resource.labels.namespace_name=\"namespace-1\" ",
    ///                 Name = "nsexcllusion1",
    ///             },
    ///             new Gcp.Logging.Inputs.ProjectSinkExclusionArgs
    ///             {
    ///                 Description = "Exclude logs from namespace-2 in k8s",
    ///                 Filter = "resource.type = k8s_container resource.labels.namespace_name=\"namespace-2\" ",
    ///                 Name = "nsexcllusion2",
    ///             },
    ///         },
    ///         UniqueWriterIdentity = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Project-level logging sinks can be imported using their URI, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gcp:logging/projectSink:ProjectSink my_sink projects/my-project/sinks/my-sink
    /// ```
    /// </summary>
    [GcpResourceType("gcp:logging/projectSink:ProjectSink")]
    public partial class ProjectSink : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Options that affect sinks exporting data to BigQuery. Structure documented below.
        /// </summary>
        [Output("bigqueryOptions")]
        public Output<Outputs.ProjectSinkBigqueryOptions> BigqueryOptions { get; private set; } = null!;

        /// <summary>
        /// A description of this exclusion.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The destination of the sink (or, in other words, where logs are written to). Can be a
        /// Cloud Storage bucket, a PubSub topic, a BigQuery dataset or a Cloud Logging bucket . Examples:
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// The writer associated with the sink must have access to write to the above resource.
        /// </summary>
        [Output("destination")]
        public Output<string> Destination { get; private set; } = null!;

        /// <summary>
        /// If set to True, then this exclusion is disabled and it does not exclude any log entries.
        /// </summary>
        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        /// <summary>
        /// Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and one of exclusion_filters it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
        /// </summary>
        [Output("exclusions")]
        public Output<ImmutableArray<Outputs.ProjectSinkExclusion>> Exclusions { get; private set; } = null!;

        /// <summary>
        /// An advanced logs filter that matches the log entries to be excluded. By using the sample function, you can exclude less than 100% of the matching log entries. See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
        /// write a filter.
        /// </summary>
        [Output("filter")]
        public Output<string?> Filter { get; private set; } = null!;

        /// <summary>
        /// A client-assigned identifier, such as `load-balancer-exclusion`. Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project to create the sink in. If omitted, the project associated with the provider is
        /// used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Whether or not to create a unique identity associated with this sink. If `false`
        /// (the default), then the `writer_identity` used is `serviceAccount:cloud-logs@system.gserviceaccount.com`. If `true`,
        /// then a unique service account is created and used for this sink. If you wish to publish logs across projects or utilize
        /// `bigquery_options`, you must set `unique_writer_identity` to true.
        /// </summary>
        [Output("uniqueWriterIdentity")]
        public Output<bool?> UniqueWriterIdentity { get; private set; } = null!;

        /// <summary>
        /// The identity associated with this sink. This identity must be granted write access to the
        /// configured `destination`.
        /// </summary>
        [Output("writerIdentity")]
        public Output<string> WriterIdentity { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectSink resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectSink(string name, ProjectSinkArgs args, CustomResourceOptions? options = null)
            : base("gcp:logging/projectSink:ProjectSink", name, args ?? new ProjectSinkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectSink(string name, Input<string> id, ProjectSinkState? state = null, CustomResourceOptions? options = null)
            : base("gcp:logging/projectSink:ProjectSink", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectSink resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectSink Get(string name, Input<string> id, ProjectSinkState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectSink(name, id, state, options);
        }
    }

    public sealed class ProjectSinkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Options that affect sinks exporting data to BigQuery. Structure documented below.
        /// </summary>
        [Input("bigqueryOptions")]
        public Input<Inputs.ProjectSinkBigqueryOptionsArgs>? BigqueryOptions { get; set; }

        /// <summary>
        /// A description of this exclusion.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The destination of the sink (or, in other words, where logs are written to). Can be a
        /// Cloud Storage bucket, a PubSub topic, a BigQuery dataset or a Cloud Logging bucket . Examples:
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// The writer associated with the sink must have access to write to the above resource.
        /// </summary>
        [Input("destination", required: true)]
        public Input<string> Destination { get; set; } = null!;

        /// <summary>
        /// If set to True, then this exclusion is disabled and it does not exclude any log entries.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("exclusions")]
        private InputList<Inputs.ProjectSinkExclusionArgs>? _exclusions;

        /// <summary>
        /// Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and one of exclusion_filters it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
        /// </summary>
        public InputList<Inputs.ProjectSinkExclusionArgs> Exclusions
        {
            get => _exclusions ?? (_exclusions = new InputList<Inputs.ProjectSinkExclusionArgs>());
            set => _exclusions = value;
        }

        /// <summary>
        /// An advanced logs filter that matches the log entries to be excluded. By using the sample function, you can exclude less than 100% of the matching log entries. See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
        /// write a filter.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// A client-assigned identifier, such as `load-balancer-exclusion`. Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project to create the sink in. If omitted, the project associated with the provider is
        /// used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Whether or not to create a unique identity associated with this sink. If `false`
        /// (the default), then the `writer_identity` used is `serviceAccount:cloud-logs@system.gserviceaccount.com`. If `true`,
        /// then a unique service account is created and used for this sink. If you wish to publish logs across projects or utilize
        /// `bigquery_options`, you must set `unique_writer_identity` to true.
        /// </summary>
        [Input("uniqueWriterIdentity")]
        public Input<bool>? UniqueWriterIdentity { get; set; }

        public ProjectSinkArgs()
        {
        }
        public static new ProjectSinkArgs Empty => new ProjectSinkArgs();
    }

    public sealed class ProjectSinkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Options that affect sinks exporting data to BigQuery. Structure documented below.
        /// </summary>
        [Input("bigqueryOptions")]
        public Input<Inputs.ProjectSinkBigqueryOptionsGetArgs>? BigqueryOptions { get; set; }

        /// <summary>
        /// A description of this exclusion.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The destination of the sink (or, in other words, where logs are written to). Can be a
        /// Cloud Storage bucket, a PubSub topic, a BigQuery dataset or a Cloud Logging bucket . Examples:
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// The writer associated with the sink must have access to write to the above resource.
        /// </summary>
        [Input("destination")]
        public Input<string>? Destination { get; set; }

        /// <summary>
        /// If set to True, then this exclusion is disabled and it does not exclude any log entries.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("exclusions")]
        private InputList<Inputs.ProjectSinkExclusionGetArgs>? _exclusions;

        /// <summary>
        /// Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and one of exclusion_filters it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
        /// </summary>
        public InputList<Inputs.ProjectSinkExclusionGetArgs> Exclusions
        {
            get => _exclusions ?? (_exclusions = new InputList<Inputs.ProjectSinkExclusionGetArgs>());
            set => _exclusions = value;
        }

        /// <summary>
        /// An advanced logs filter that matches the log entries to be excluded. By using the sample function, you can exclude less than 100% of the matching log entries. See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
        /// write a filter.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// A client-assigned identifier, such as `load-balancer-exclusion`. Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project to create the sink in. If omitted, the project associated with the provider is
        /// used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Whether or not to create a unique identity associated with this sink. If `false`
        /// (the default), then the `writer_identity` used is `serviceAccount:cloud-logs@system.gserviceaccount.com`. If `true`,
        /// then a unique service account is created and used for this sink. If you wish to publish logs across projects or utilize
        /// `bigquery_options`, you must set `unique_writer_identity` to true.
        /// </summary>
        [Input("uniqueWriterIdentity")]
        public Input<bool>? UniqueWriterIdentity { get; set; }

        /// <summary>
        /// The identity associated with this sink. This identity must be granted write access to the
        /// configured `destination`.
        /// </summary>
        [Input("writerIdentity")]
        public Input<string>? WriterIdentity { get; set; }

        public ProjectSinkState()
        {
        }
        public static new ProjectSinkState Empty => new ProjectSinkState();
    }
}
