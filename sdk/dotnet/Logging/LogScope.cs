// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Logging
{
    /// <summary>
    /// Describes a group of resources to read log entries from
    /// 
    /// To get more information about LogScope, see:
    /// 
    /// * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.locations.logScopes)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/logging/docs/apis)
    /// 
    /// ## Example Usage
    /// 
    /// ### Logging Log Scope Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var loggingLogScope = new Gcp.Logging.LogScope("logging_log_scope", new()
    ///     {
    ///         Parent = "projects/my-project-name",
    ///         Location = "global",
    ///         Name = "projects/my-project-name/locations/global/logScopes/my-log-scope",
    ///         ResourceNames = new[]
    ///         {
    ///             "projects/my-project-name",
    ///             "projects/my-project-name/locations/global/buckets/_Default/views/view1",
    ///             "projects/my-project-name/locations/global/buckets/_Default/views/view2",
    ///         },
    ///         Description = "A log scope configured with Terraform",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// LogScope can be imported using any of these accepted formats:
    /// 
    /// * `{{parent}}/locations/{{location}}/logScopes/{{name}}`
    /// 
    /// When using the `pulumi import` command, LogScope can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:logging/logScope:LogScope default {{parent}}/locations/{{location}}/logScopes/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:logging/logScope:LogScope")]
    public partial class LogScope : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Output only. The creation timestamp of the log scopes.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Describes this log scopes.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The location of the resource. The only supported location is global so far.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the log scope. For example: \`projects/my-project/locations/global/logScopes/my-log-scope\`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The parent of the resource.
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// Names of one or more parent resources : *  \`projects/[PROJECT_ID]\` May alternatively be one or more views : * \`projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\` A log scope can include a maximum of 50 projects and a maximum of 100 resources in total.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("resourceNames")]
        public Output<ImmutableArray<string>> ResourceNames { get; private set; } = null!;

        /// <summary>
        /// Output only. The last update timestamp of the log scopes.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a LogScope resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogScope(string name, LogScopeArgs args, CustomResourceOptions? options = null)
            : base("gcp:logging/logScope:LogScope", name, args ?? new LogScopeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogScope(string name, Input<string> id, LogScopeState? state = null, CustomResourceOptions? options = null)
            : base("gcp:logging/logScope:LogScope", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogScope resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogScope Get(string name, Input<string> id, LogScopeState? state = null, CustomResourceOptions? options = null)
        {
            return new LogScope(name, id, state, options);
        }
    }

    public sealed class LogScopeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Describes this log scopes.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The location of the resource. The only supported location is global so far.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the log scope. For example: \`projects/my-project/locations/global/logScopes/my-log-scope\`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The parent of the resource.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("resourceNames", required: true)]
        private InputList<string>? _resourceNames;

        /// <summary>
        /// Names of one or more parent resources : *  \`projects/[PROJECT_ID]\` May alternatively be one or more views : * \`projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\` A log scope can include a maximum of 50 projects and a maximum of 100 resources in total.
        /// 
        /// 
        /// - - -
        /// </summary>
        public InputList<string> ResourceNames
        {
            get => _resourceNames ?? (_resourceNames = new InputList<string>());
            set => _resourceNames = value;
        }

        public LogScopeArgs()
        {
        }
        public static new LogScopeArgs Empty => new LogScopeArgs();
    }

    public sealed class LogScopeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Output only. The creation timestamp of the log scopes.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Describes this log scopes.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The location of the resource. The only supported location is global so far.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the log scope. For example: \`projects/my-project/locations/global/logScopes/my-log-scope\`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The parent of the resource.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("resourceNames")]
        private InputList<string>? _resourceNames;

        /// <summary>
        /// Names of one or more parent resources : *  \`projects/[PROJECT_ID]\` May alternatively be one or more views : * \`projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\` A log scope can include a maximum of 50 projects and a maximum of 100 resources in total.
        /// 
        /// 
        /// - - -
        /// </summary>
        public InputList<string> ResourceNames
        {
            get => _resourceNames ?? (_resourceNames = new InputList<string>());
            set => _resourceNames = value;
        }

        /// <summary>
        /// Output only. The last update timestamp of the log scopes.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public LogScopeState()
        {
        }
        public static new LogScopeState Empty => new LogScopeState();
    }
}
