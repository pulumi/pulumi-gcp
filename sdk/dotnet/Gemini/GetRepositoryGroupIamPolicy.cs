// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Gemini
{
    public static class GetRepositoryGroupIamPolicy
    {
        /// <summary>
        /// Retrieves the current IAM policy data for repositorygroup
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Gemini.GetRepositoryGroupIamPolicy.Invoke(new()
        ///     {
        ///         Project = example.Project,
        ///         Location = example.Location,
        ///         CodeRepositoryIndex = example.CodeRepositoryIndex,
        ///         RepositoryGroupId = example.RepositoryGroupId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRepositoryGroupIamPolicyResult> InvokeAsync(GetRepositoryGroupIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryGroupIamPolicyResult>("gcp:gemini/getRepositoryGroupIamPolicy:getRepositoryGroupIamPolicy", args ?? new GetRepositoryGroupIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for repositorygroup
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Gemini.GetRepositoryGroupIamPolicy.Invoke(new()
        ///     {
        ///         Project = example.Project,
        ///         Location = example.Location,
        ///         CodeRepositoryIndex = example.CodeRepositoryIndex,
        ///         RepositoryGroupId = example.RepositoryGroupId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRepositoryGroupIamPolicyResult> Invoke(GetRepositoryGroupIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryGroupIamPolicyResult>("gcp:gemini/getRepositoryGroupIamPolicy:getRepositoryGroupIamPolicy", args ?? new GetRepositoryGroupIamPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for repositorygroup
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Gemini.GetRepositoryGroupIamPolicy.Invoke(new()
        ///     {
        ///         Project = example.Project,
        ///         Location = example.Location,
        ///         CodeRepositoryIndex = example.CodeRepositoryIndex,
        ///         RepositoryGroupId = example.RepositoryGroupId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRepositoryGroupIamPolicyResult> Invoke(GetRepositoryGroupIamPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryGroupIamPolicyResult>("gcp:gemini/getRepositoryGroupIamPolicy:getRepositoryGroupIamPolicy", args ?? new GetRepositoryGroupIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryGroupIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Required. Id of the Code Repository Index. Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("codeRepositoryIndex", required: true)]
        public string CodeRepositoryIndex { get; set; } = null!;

        /// <summary>
        /// The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
        /// location is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("repositoryGroupId", required: true)]
        public string RepositoryGroupId { get; set; } = null!;

        public GetRepositoryGroupIamPolicyArgs()
        {
        }
        public static new GetRepositoryGroupIamPolicyArgs Empty => new GetRepositoryGroupIamPolicyArgs();
    }

    public sealed class GetRepositoryGroupIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Required. Id of the Code Repository Index. Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("codeRepositoryIndex", required: true)]
        public Input<string> CodeRepositoryIndex { get; set; } = null!;

        /// <summary>
        /// The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
        /// location is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("repositoryGroupId", required: true)]
        public Input<string> RepositoryGroupId { get; set; } = null!;

        public GetRepositoryGroupIamPolicyInvokeArgs()
        {
        }
        public static new GetRepositoryGroupIamPolicyInvokeArgs Empty => new GetRepositoryGroupIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryGroupIamPolicyResult
    {
        public readonly string CodeRepositoryIndex;
        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        /// <summary>
        /// (Required only by `gcp.gemini.RepositoryGroupIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        public readonly string PolicyData;
        public readonly string Project;
        public readonly string RepositoryGroupId;

        [OutputConstructor]
        private GetRepositoryGroupIamPolicyResult(
            string codeRepositoryIndex,

            string etag,

            string id,

            string location,

            string policyData,

            string project,

            string repositoryGroupId)
        {
            CodeRepositoryIndex = codeRepositoryIndex;
            Etag = etag;
            Id = id;
            Location = location;
            PolicyData = policyData;
            Project = project;
            RepositoryGroupId = repositoryGroupId;
        }
    }
}
