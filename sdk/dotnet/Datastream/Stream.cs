// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Datastream
{
    /// <summary>
    /// A resource representing streaming data from a source to a destination.
    /// 
    /// To get more information about Stream, see:
    /// 
    /// * [API documentation](https://cloud.google.com/datastream/docs/reference/rest/v1/projects.locations.streams)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/datastream/docs/create-a-stream)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Stream can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:datastream/stream:Stream default projects/{{project}}/locations/{{location}}/streams/{{stream_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:datastream/stream:Stream default {{project}}/{{location}}/{{stream_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:datastream/stream:Stream default {{location}}/{{stream_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:datastream/stream:Stream")]
    public partial class Stream : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
        /// Structure is documented below.
        /// </summary>
        [Output("backfillAll")]
        public Output<Outputs.StreamBackfillAll?> BackfillAll { get; private set; } = null!;

        /// <summary>
        /// Backfill strategy to disable automatic backfill for the Stream's objects.
        /// </summary>
        [Output("backfillNone")]
        public Output<Outputs.StreamBackfillNone?> BackfillNone { get; private set; } = null!;

        /// <summary>
        /// A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
        /// will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
        /// </summary>
        [Output("customerManagedEncryptionKey")]
        public Output<string?> CustomerManagedEncryptionKey { get; private set; } = null!;

        /// <summary>
        /// Desired state of the Stream. Set this field to `RUNNING` to start the stream, and `PAUSED` to pause the stream.
        /// </summary>
        [Output("desiredState")]
        public Output<string?> DesiredState { get; private set; } = null!;

        /// <summary>
        /// Destination connection profile configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("destinationConfig")]
        public Output<Outputs.StreamDestinationConfig> DestinationConfig { get; private set; } = null!;

        /// <summary>
        /// Display name.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Labels.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the location this stream is located in.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The stream's name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Source connection profile configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("sourceConfig")]
        public Output<Outputs.StreamSourceConfig> SourceConfig { get; private set; } = null!;

        /// <summary>
        /// The state of the stream.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The stream identifier.
        /// </summary>
        [Output("streamId")]
        public Output<string> StreamId { get; private set; } = null!;


        /// <summary>
        /// Create a Stream resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Stream(string name, StreamArgs args, CustomResourceOptions? options = null)
            : base("gcp:datastream/stream:Stream", name, args ?? new StreamArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Stream(string name, Input<string> id, StreamState? state = null, CustomResourceOptions? options = null)
            : base("gcp:datastream/stream:Stream", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Stream resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Stream Get(string name, Input<string> id, StreamState? state = null, CustomResourceOptions? options = null)
        {
            return new Stream(name, id, state, options);
        }
    }

    public sealed class StreamArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
        /// Structure is documented below.
        /// </summary>
        [Input("backfillAll")]
        public Input<Inputs.StreamBackfillAllArgs>? BackfillAll { get; set; }

        /// <summary>
        /// Backfill strategy to disable automatic backfill for the Stream's objects.
        /// </summary>
        [Input("backfillNone")]
        public Input<Inputs.StreamBackfillNoneArgs>? BackfillNone { get; set; }

        /// <summary>
        /// A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
        /// will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
        /// </summary>
        [Input("customerManagedEncryptionKey")]
        public Input<string>? CustomerManagedEncryptionKey { get; set; }

        /// <summary>
        /// Desired state of the Stream. Set this field to `RUNNING` to start the stream, and `PAUSED` to pause the stream.
        /// </summary>
        [Input("desiredState")]
        public Input<string>? DesiredState { get; set; }

        /// <summary>
        /// Destination connection profile configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("destinationConfig", required: true)]
        public Input<Inputs.StreamDestinationConfigArgs> DestinationConfig { get; set; } = null!;

        /// <summary>
        /// Display name.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the location this stream is located in.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Source connection profile configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("sourceConfig", required: true)]
        public Input<Inputs.StreamSourceConfigArgs> SourceConfig { get; set; } = null!;

        /// <summary>
        /// The stream identifier.
        /// </summary>
        [Input("streamId", required: true)]
        public Input<string> StreamId { get; set; } = null!;

        public StreamArgs()
        {
        }
        public static new StreamArgs Empty => new StreamArgs();
    }

    public sealed class StreamState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
        /// Structure is documented below.
        /// </summary>
        [Input("backfillAll")]
        public Input<Inputs.StreamBackfillAllGetArgs>? BackfillAll { get; set; }

        /// <summary>
        /// Backfill strategy to disable automatic backfill for the Stream's objects.
        /// </summary>
        [Input("backfillNone")]
        public Input<Inputs.StreamBackfillNoneGetArgs>? BackfillNone { get; set; }

        /// <summary>
        /// A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
        /// will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
        /// </summary>
        [Input("customerManagedEncryptionKey")]
        public Input<string>? CustomerManagedEncryptionKey { get; set; }

        /// <summary>
        /// Desired state of the Stream. Set this field to `RUNNING` to start the stream, and `PAUSED` to pause the stream.
        /// </summary>
        [Input("desiredState")]
        public Input<string>? DesiredState { get; set; }

        /// <summary>
        /// Destination connection profile configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("destinationConfig")]
        public Input<Inputs.StreamDestinationConfigGetArgs>? DestinationConfig { get; set; }

        /// <summary>
        /// Display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the location this stream is located in.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The stream's name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Source connection profile configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("sourceConfig")]
        public Input<Inputs.StreamSourceConfigGetArgs>? SourceConfig { get; set; }

        /// <summary>
        /// The state of the stream.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The stream identifier.
        /// </summary>
        [Input("streamId")]
        public Input<string>? StreamId { get; set; }

        public StreamState()
        {
        }
        public static new StreamState Empty => new StreamState();
    }
}
