// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Datastream
{
    /// <summary>
    /// A resource representing streaming data from a source to a destination.
    /// 
    /// To get more information about Stream, see:
    /// 
    /// * [API documentation](https://cloud.google.com/datastream/docs/reference/rest/v1/projects.locations.streams)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/datastream/docs/create-a-stream)
    /// 
    /// ## Example Usage
    /// ### Datastream Stream Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var instance = new Gcp.Sql.DatabaseInstance("instance", new()
    ///     {
    ///         DatabaseVersion = "MYSQL_8_0",
    ///         Region = "us-central1",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-f1-micro",
    ///             BackupConfiguration = new Gcp.Sql.Inputs.DatabaseInstanceSettingsBackupConfigurationArgs
    ///             {
    ///                 Enabled = true,
    ///                 BinaryLogEnabled = true,
    ///             },
    ///             IpConfiguration = new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationArgs
    ///             {
    ///                 AuthorizedNetworks = new[]
    ///                 {
    ///                     new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs
    ///                     {
    ///                         Value = "34.71.242.81",
    ///                     },
    ///                     new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs
    ///                     {
    ///                         Value = "34.72.28.29",
    ///                     },
    ///                     new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs
    ///                     {
    ///                         Value = "34.67.6.157",
    ///                     },
    ///                     new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs
    ///                     {
    ///                         Value = "34.67.234.134",
    ///                     },
    ///                     new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs
    ///                     {
    ///                         Value = "34.72.239.218",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         DeletionProtection = true,
    ///     });
    /// 
    ///     var db = new Gcp.Sql.Database("db", new()
    ///     {
    ///         Instance = instance.Name,
    ///     });
    /// 
    ///     var pwd = new Random.RandomPassword("pwd", new()
    ///     {
    ///         Length = 16,
    ///         Special = false,
    ///     });
    /// 
    ///     var user = new Gcp.Sql.User("user", new()
    ///     {
    ///         Instance = instance.Name,
    ///         Host = "%",
    ///         Password = pwd.Result,
    ///     });
    /// 
    ///     var sourceConnectionProfile = new Gcp.Datastream.ConnectionProfile("sourceConnectionProfile", new()
    ///     {
    ///         DisplayName = "Source connection profile",
    ///         Location = "us-central1",
    ///         ConnectionProfileId = "source-profile",
    ///         MysqlProfile = new Gcp.Datastream.Inputs.ConnectionProfileMysqlProfileArgs
    ///         {
    ///             Hostname = instance.PublicIpAddress,
    ///             Username = user.Name,
    ///             Password = user.Password,
    ///         },
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var viewer = new Gcp.Storage.BucketIAMMember("viewer", new()
    ///     {
    ///         Bucket = bucket.Name,
    ///         Role = "roles/storage.objectViewer",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-datastream.iam.gserviceaccount.com",
    ///     });
    /// 
    ///     var creator = new Gcp.Storage.BucketIAMMember("creator", new()
    ///     {
    ///         Bucket = bucket.Name,
    ///         Role = "roles/storage.objectCreator",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-datastream.iam.gserviceaccount.com",
    ///     });
    /// 
    ///     var reader = new Gcp.Storage.BucketIAMMember("reader", new()
    ///     {
    ///         Bucket = bucket.Name,
    ///         Role = "roles/storage.legacyBucketReader",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-datastream.iam.gserviceaccount.com",
    ///     });
    /// 
    ///     var destinationConnectionProfile = new Gcp.Datastream.ConnectionProfile("destinationConnectionProfile", new()
    ///     {
    ///         DisplayName = "Connection profile",
    ///         Location = "us-central1",
    ///         ConnectionProfileId = "destination-profile",
    ///         GcsProfile = new Gcp.Datastream.Inputs.ConnectionProfileGcsProfileArgs
    ///         {
    ///             Bucket = bucket.Name,
    ///             RootPath = "/path",
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.Datastream.Stream("default", new()
    ///     {
    ///         StreamId = "my-stream",
    ///         DesiredState = "NOT_STARTED",
    ///         Location = "us-central1",
    ///         DisplayName = "my stream",
    ///         Labels = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///         SourceConfig = new Gcp.Datastream.Inputs.StreamSourceConfigArgs
    ///         {
    ///             SourceConnectionProfile = sourceConnectionProfile.Id,
    ///             MysqlSourceConfig = new Gcp.Datastream.Inputs.StreamSourceConfigMysqlSourceConfigArgs
    ///             {
    ///                 IncludeObjects = new Gcp.Datastream.Inputs.StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs
    ///                 {
    ///                     MysqlDatabases = new[]
    ///                     {
    ///                         new Gcp.Datastream.Inputs.StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArgs
    ///                         {
    ///                             Database = "my-database",
    ///                             MysqlTables = new[]
    ///                             {
    ///                                 new Gcp.Datastream.Inputs.StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArgs
    ///                                 {
    ///                                     Table = "includedTable",
    ///                                     MysqlColumns = new[]
    ///                                     {
    ///                                         new Gcp.Datastream.Inputs.StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs
    ///                                         {
    ///                                             Column = "includedColumn",
    ///                                             DataType = "VARCHAR",
    ///                                             Collation = "utf8mb4",
    ///                                             PrimaryKey = false,
    ///                                             Nullable = false,
    ///                                             OrdinalPosition = 0,
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 ExcludeObjects = new Gcp.Datastream.Inputs.StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs
    ///                 {
    ///                     MysqlDatabases = new[]
    ///                     {
    ///                         new Gcp.Datastream.Inputs.StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs
    ///                         {
    ///                             Database = "my-database",
    ///                             MysqlTables = new[]
    ///                             {
    ///                                 new Gcp.Datastream.Inputs.StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArgs
    ///                                 {
    ///                                     Table = "excludedTable",
    ///                                     MysqlColumns = new[]
    ///                                     {
    ///                                         new Gcp.Datastream.Inputs.StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs
    ///                                         {
    ///                                             Column = "excludedColumn",
    ///                                             DataType = "VARCHAR",
    ///                                             Collation = "utf8mb4",
    ///                                             PrimaryKey = false,
    ///                                             Nullable = false,
    ///                                             OrdinalPosition = 0,
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 MaxConcurrentCdcTasks = 5,
    ///             },
    ///         },
    ///         DestinationConfig = new Gcp.Datastream.Inputs.StreamDestinationConfigArgs
    ///         {
    ///             DestinationConnectionProfile = destinationConnectionProfile.Id,
    ///             GcsDestinationConfig = new Gcp.Datastream.Inputs.StreamDestinationConfigGcsDestinationConfigArgs
    ///             {
    ///                 Path = "mydata",
    ///                 FileRotationMb = 200,
    ///                 FileRotationInterval = "900s",
    ///                 JsonFileFormat = new Gcp.Datastream.Inputs.StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs
    ///                 {
    ///                     SchemaFileFormat = "NO_SCHEMA_FILE",
    ///                     Compression = "GZIP",
    ///                 },
    ///             },
    ///         },
    ///         BackfillAll = new Gcp.Datastream.Inputs.StreamBackfillAllArgs
    ///         {
    ///             MysqlExcludedObjects = new Gcp.Datastream.Inputs.StreamBackfillAllMysqlExcludedObjectsArgs
    ///             {
    ///                 MysqlDatabases = new[]
    ///                 {
    ///                     new Gcp.Datastream.Inputs.StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArgs
    ///                     {
    ///                         Database = "my-database",
    ///                         MysqlTables = new[]
    ///                         {
    ///                             new Gcp.Datastream.Inputs.StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArgs
    ///                             {
    ///                                 Table = "excludedTable",
    ///                                 MysqlColumns = new[]
    ///                                 {
    ///                                     new Gcp.Datastream.Inputs.StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArgs
    ///                                     {
    ///                                         Column = "excludedColumn",
    ///                                         DataType = "VARCHAR",
    ///                                         Collation = "utf8mb4",
    ///                                         PrimaryKey = false,
    ///                                         Nullable = false,
    ///                                         OrdinalPosition = 0,
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Stream can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:datastream/stream:Stream default projects/{{project}}/locations/{{location}}/streams/{{stream_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:datastream/stream:Stream default {{project}}/{{location}}/{{stream_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:datastream/stream:Stream default {{location}}/{{stream_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:datastream/stream:Stream")]
    public partial class Stream : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
        /// Structure is documented below.
        /// </summary>
        [Output("backfillAll")]
        public Output<Outputs.StreamBackfillAll?> BackfillAll { get; private set; } = null!;

        /// <summary>
        /// Backfill strategy to disable automatic backfill for the Stream's objects.
        /// </summary>
        [Output("backfillNone")]
        public Output<Outputs.StreamBackfillNone?> BackfillNone { get; private set; } = null!;

        /// <summary>
        /// Desired state of the Stream. Set this field to `RUNNING` to start the stream, and `PAUSED` to pause the stream.
        /// </summary>
        [Output("desiredState")]
        public Output<string?> DesiredState { get; private set; } = null!;

        /// <summary>
        /// Destination connection profile configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("destinationConfig")]
        public Output<Outputs.StreamDestinationConfig> DestinationConfig { get; private set; } = null!;

        /// <summary>
        /// Display name.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Labels.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the location this stream is located in.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The stream's name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Source connection profile configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("sourceConfig")]
        public Output<Outputs.StreamSourceConfig> SourceConfig { get; private set; } = null!;

        /// <summary>
        /// The state of the stream.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The stream identifier.
        /// </summary>
        [Output("streamId")]
        public Output<string> StreamId { get; private set; } = null!;


        /// <summary>
        /// Create a Stream resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Stream(string name, StreamArgs args, CustomResourceOptions? options = null)
            : base("gcp:datastream/stream:Stream", name, args ?? new StreamArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Stream(string name, Input<string> id, StreamState? state = null, CustomResourceOptions? options = null)
            : base("gcp:datastream/stream:Stream", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Stream resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Stream Get(string name, Input<string> id, StreamState? state = null, CustomResourceOptions? options = null)
        {
            return new Stream(name, id, state, options);
        }
    }

    public sealed class StreamArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
        /// Structure is documented below.
        /// </summary>
        [Input("backfillAll")]
        public Input<Inputs.StreamBackfillAllArgs>? BackfillAll { get; set; }

        /// <summary>
        /// Backfill strategy to disable automatic backfill for the Stream's objects.
        /// </summary>
        [Input("backfillNone")]
        public Input<Inputs.StreamBackfillNoneArgs>? BackfillNone { get; set; }

        /// <summary>
        /// Desired state of the Stream. Set this field to `RUNNING` to start the stream, and `PAUSED` to pause the stream.
        /// </summary>
        [Input("desiredState")]
        public Input<string>? DesiredState { get; set; }

        /// <summary>
        /// Destination connection profile configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("destinationConfig", required: true)]
        public Input<Inputs.StreamDestinationConfigArgs> DestinationConfig { get; set; } = null!;

        /// <summary>
        /// Display name.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the location this stream is located in.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Source connection profile configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("sourceConfig", required: true)]
        public Input<Inputs.StreamSourceConfigArgs> SourceConfig { get; set; } = null!;

        /// <summary>
        /// The stream identifier.
        /// </summary>
        [Input("streamId", required: true)]
        public Input<string> StreamId { get; set; } = null!;

        public StreamArgs()
        {
        }
        public static new StreamArgs Empty => new StreamArgs();
    }

    public sealed class StreamState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
        /// Structure is documented below.
        /// </summary>
        [Input("backfillAll")]
        public Input<Inputs.StreamBackfillAllGetArgs>? BackfillAll { get; set; }

        /// <summary>
        /// Backfill strategy to disable automatic backfill for the Stream's objects.
        /// </summary>
        [Input("backfillNone")]
        public Input<Inputs.StreamBackfillNoneGetArgs>? BackfillNone { get; set; }

        /// <summary>
        /// Desired state of the Stream. Set this field to `RUNNING` to start the stream, and `PAUSED` to pause the stream.
        /// </summary>
        [Input("desiredState")]
        public Input<string>? DesiredState { get; set; }

        /// <summary>
        /// Destination connection profile configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("destinationConfig")]
        public Input<Inputs.StreamDestinationConfigGetArgs>? DestinationConfig { get; set; }

        /// <summary>
        /// Display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the location this stream is located in.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The stream's name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Source connection profile configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("sourceConfig")]
        public Input<Inputs.StreamSourceConfigGetArgs>? SourceConfig { get; set; }

        /// <summary>
        /// The state of the stream.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The stream identifier.
        /// </summary>
        [Input("streamId")]
        public Input<string>? StreamId { get; set; }

        public StreamState()
        {
        }
        public static new StreamState Empty => new StreamState();
    }
}
