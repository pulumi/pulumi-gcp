// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.IdentityPlatform
{
    /// <summary>
    /// Identity Platform configuration for a Cloud project. Identity Platform is an
    /// end-to-end authentication system for third-party users to access apps
    /// and services.
    /// 
    /// This entity is created only once during intialization and cannot be deleted,
    /// individual Identity Providers may be disabled instead.  This resource may only
    /// be created in billing-enabled projects.
    /// 
    /// To get more information about Config, see:
    /// 
    /// * [API documentation](https://cloud.google.com/identity-platform/docs/reference/rest/v2/Config)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/identity-platform/docs)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Config can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:identityplatform/config:Config default projects/{{project}}/config
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:identityplatform/config:Config default projects/{{project}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:identityplatform/config:Config default {{project}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:identityplatform/config:Config")]
    public partial class Config : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of domains authorized for OAuth redirects.
        /// </summary>
        [Output("authorizedDomains")]
        public Output<ImmutableArray<string>> AuthorizedDomains { get; private set; } = null!;

        /// <summary>
        /// Whether anonymous users will be auto-deleted after a period of 30 days
        /// </summary>
        [Output("autodeleteAnonymousUsers")]
        public Output<bool?> AutodeleteAnonymousUsers { get; private set; } = null!;

        /// <summary>
        /// Configuration related to blocking functions.
        /// Structure is documented below.
        /// </summary>
        [Output("blockingFunctions")]
        public Output<Outputs.ConfigBlockingFunctions?> BlockingFunctions { get; private set; } = null!;

        /// <summary>
        /// The name of the Config resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Configuration related to quotas.
        /// Structure is documented below.
        /// </summary>
        [Output("quota")]
        public Output<Outputs.ConfigQuota?> Quota { get; private set; } = null!;

        /// <summary>
        /// Configuration related to local sign in methods.
        /// Structure is documented below.
        /// </summary>
        [Output("signIn")]
        public Output<Outputs.ConfigSignIn> SignIn { get; private set; } = null!;


        /// <summary>
        /// Create a Config resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Config(string name, ConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:identityplatform/config:Config", name, args ?? new ConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Config(string name, Input<string> id, ConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:identityplatform/config:Config", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Config resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Config Get(string name, Input<string> id, ConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new Config(name, id, state, options);
        }
    }

    public sealed class ConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("authorizedDomains")]
        private InputList<string>? _authorizedDomains;

        /// <summary>
        /// List of domains authorized for OAuth redirects.
        /// </summary>
        public InputList<string> AuthorizedDomains
        {
            get => _authorizedDomains ?? (_authorizedDomains = new InputList<string>());
            set => _authorizedDomains = value;
        }

        /// <summary>
        /// Whether anonymous users will be auto-deleted after a period of 30 days
        /// </summary>
        [Input("autodeleteAnonymousUsers")]
        public Input<bool>? AutodeleteAnonymousUsers { get; set; }

        /// <summary>
        /// Configuration related to blocking functions.
        /// Structure is documented below.
        /// </summary>
        [Input("blockingFunctions")]
        public Input<Inputs.ConfigBlockingFunctionsArgs>? BlockingFunctions { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Configuration related to quotas.
        /// Structure is documented below.
        /// </summary>
        [Input("quota")]
        public Input<Inputs.ConfigQuotaArgs>? Quota { get; set; }

        /// <summary>
        /// Configuration related to local sign in methods.
        /// Structure is documented below.
        /// </summary>
        [Input("signIn")]
        public Input<Inputs.ConfigSignInArgs>? SignIn { get; set; }

        public ConfigArgs()
        {
        }
        public static new ConfigArgs Empty => new ConfigArgs();
    }

    public sealed class ConfigState : global::Pulumi.ResourceArgs
    {
        [Input("authorizedDomains")]
        private InputList<string>? _authorizedDomains;

        /// <summary>
        /// List of domains authorized for OAuth redirects.
        /// </summary>
        public InputList<string> AuthorizedDomains
        {
            get => _authorizedDomains ?? (_authorizedDomains = new InputList<string>());
            set => _authorizedDomains = value;
        }

        /// <summary>
        /// Whether anonymous users will be auto-deleted after a period of 30 days
        /// </summary>
        [Input("autodeleteAnonymousUsers")]
        public Input<bool>? AutodeleteAnonymousUsers { get; set; }

        /// <summary>
        /// Configuration related to blocking functions.
        /// Structure is documented below.
        /// </summary>
        [Input("blockingFunctions")]
        public Input<Inputs.ConfigBlockingFunctionsGetArgs>? BlockingFunctions { get; set; }

        /// <summary>
        /// The name of the Config resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Configuration related to quotas.
        /// Structure is documented below.
        /// </summary>
        [Input("quota")]
        public Input<Inputs.ConfigQuotaGetArgs>? Quota { get; set; }

        /// <summary>
        /// Configuration related to local sign in methods.
        /// Structure is documented below.
        /// </summary>
        [Input("signIn")]
        public Input<Inputs.ConfigSignInGetArgs>? SignIn { get; set; }

        public ConfigState()
        {
        }
        public static new ConfigState Empty => new ConfigState();
    }
}
