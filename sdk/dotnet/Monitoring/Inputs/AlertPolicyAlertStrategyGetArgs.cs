// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Monitoring.Inputs
{

    public sealed class AlertPolicyAlertStrategyGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If an alert policy that was active has no data for this long, any open incidents will close.
        /// </summary>
        [Input("autoClose")]
        public Input<string>? AutoClose { get; set; }

        [Input("notificationChannelStrategies")]
        private InputList<Inputs.AlertPolicyAlertStrategyNotificationChannelStrategyGetArgs>? _notificationChannelStrategies;

        /// <summary>
        /// Control over how the notification channels in `notification_channels`
        /// are notified when this alert fires, on a per-channel basis.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AlertPolicyAlertStrategyNotificationChannelStrategyGetArgs> NotificationChannelStrategies
        {
            get => _notificationChannelStrategies ?? (_notificationChannelStrategies = new InputList<Inputs.AlertPolicyAlertStrategyNotificationChannelStrategyGetArgs>());
            set => _notificationChannelStrategies = value;
        }

        [Input("notificationPrompts")]
        private InputList<string>? _notificationPrompts;

        /// <summary>
        /// Control when notifications will be sent out.
        /// Each value may be one of: `NOTIFICATION_PROMPT_UNSPECIFIED`, `OPENED`, `CLOSED`.
        /// </summary>
        public InputList<string> NotificationPrompts
        {
            get => _notificationPrompts ?? (_notificationPrompts = new InputList<string>());
            set => _notificationPrompts = value;
        }

        /// <summary>
        /// Required for alert policies with a LogMatch condition.
        /// This limit is not implemented for alert policies that are not log-based.
        /// Structure is documented below.
        /// </summary>
        [Input("notificationRateLimit")]
        public Input<Inputs.AlertPolicyAlertStrategyNotificationRateLimitGetArgs>? NotificationRateLimit { get; set; }

        public AlertPolicyAlertStrategyGetArgs()
        {
        }
        public static new AlertPolicyAlertStrategyGetArgs Empty => new AlertPolicyAlertStrategyGetArgs();
    }
}
