// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Monitoring.Outputs
{

    [OutputType]
    public sealed class AlertPolicyAlertStrategy
    {
        /// <summary>
        /// If an alert policy that was active has no data for this long, any open incidents will close.
        /// </summary>
        public readonly string? AutoClose;
        /// <summary>
        /// Control over how the notification channels in `NotificationChannels`
        /// are notified when this alert fires, on a per-channel basis.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.AlertPolicyAlertStrategyNotificationChannelStrategy> NotificationChannelStrategies;
        /// <summary>
        /// Control when notifications will be sent out.
        /// Each value may be one of: `NOTIFICATION_PROMPT_UNSPECIFIED`, `OPENED`, `CLOSED`.
        /// </summary>
        public readonly ImmutableArray<string> NotificationPrompts;
        /// <summary>
        /// Required for alert policies with a LogMatch condition.
        /// This limit is not implemented for alert policies that are not log-based.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.AlertPolicyAlertStrategyNotificationRateLimit? NotificationRateLimit;

        [OutputConstructor]
        private AlertPolicyAlertStrategy(
            string? autoClose,

            ImmutableArray<Outputs.AlertPolicyAlertStrategyNotificationChannelStrategy> notificationChannelStrategies,

            ImmutableArray<string> notificationPrompts,

            Outputs.AlertPolicyAlertStrategyNotificationRateLimit? notificationRateLimit)
        {
            AutoClose = autoClose;
            NotificationChannelStrategies = notificationChannelStrategies;
            NotificationPrompts = notificationPrompts;
            NotificationRateLimit = notificationRateLimit;
        }
    }
}
