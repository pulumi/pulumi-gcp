// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Monitoring
{
    /// <summary>
    /// A NotificationChannel is a medium through which an alert is delivered
    /// when a policy violation is detected. Examples of channels include email, SMS,
    /// and third-party messaging applications. Fields containing sensitive information
    /// like authentication tokens or contact info are only partially populated on retrieval.
    /// 
    /// Notification Channels are designed to be flexible and are made up of a supported `type`
    /// and labels to configure that channel. Each `type` has specific labels that need to be
    /// present for that channel to be correctly configured. The labels that are required to be
    /// present for one channel `type` are often different than those required for another.
    /// Due to these loose constraints it's often best to set up a channel through the UI
    /// and import it to the provider when setting up a brand new channel type to determine which
    /// labels are required.
    /// 
    /// A list of supported channels per project the `list` endpoint can be
    /// accessed programmatically or through the api explorer at  https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannelDescriptors/list .
    /// This provides the channel type and all of the required labels that must be passed.
    /// 
    /// To get more information about NotificationChannel, see:
    /// 
    /// * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannels)
    /// * How-to Guides
    ///     * [Notification Options](https://cloud.google.com/monitoring/support/notification-options)
    ///     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
    /// 
    /// ## Example Usage
    /// ### Notification Channel Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var basic = new Gcp.Monitoring.NotificationChannel("basic", new Gcp.Monitoring.NotificationChannelArgs
    ///         {
    ///             DisplayName = "Test Notification Channel",
    ///             Labels = 
    ///             {
    ///                 { "email_address", "fake_email@blahblah.com" },
    ///             },
    ///             Type = "email",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Notification Channel Sensitive
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var @default = new Gcp.Monitoring.NotificationChannel("default", new Gcp.Monitoring.NotificationChannelArgs
    ///         {
    ///             DisplayName = "Test Slack Channel",
    ///             Labels = 
    ///             {
    ///                 { "channel_name", "#foobar" },
    ///             },
    ///             SensitiveLabels = new Gcp.Monitoring.Inputs.NotificationChannelSensitiveLabelsArgs
    ///             {
    ///                 AuthToken = "one",
    ///             },
    ///             Type = "slack",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// NotificationChannel can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:monitoring/notificationChannel:NotificationChannel default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:monitoring/notificationChannel:NotificationChannel")]
    public partial class NotificationChannel : Pulumi.CustomResource
    {
        /// <summary>
        /// An optional human-readable description of this notification channel. This description may provide additional details, beyond the display name, for the channel. This may not exceed 1024 Unicode characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// An optional human-readable name for this notification channel. It is recommended that you specify a non-empty and unique name in order to make it easier to identify the channels in your project, though this is not enforced. The display name is limited to 512 Unicode characters.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Whether notifications are forwarded to the described channel. This makes it possible to disable delivery of notifications to a particular channel without removing the channel from all alerting policies that reference the channel. This is a more convenient approach when the change is temporary and you want to receive notifications from the same set of alerting policies on the channel at some point in the future.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Configuration fields that define the channel and its behavior. The
        /// permissible and required labels are specified in the
        /// NotificationChannelDescriptor corresponding to the type field.
        /// Labels with sensitive data are obfuscated by the API and therefore the provider cannot
        /// determine if there are upstream changes to these fields. They can also be configured via
        /// the sensitive_labels block, but cannot be configured in both places.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The full REST resource name for this channel. The syntax is: projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID] The
        /// [CHANNEL_ID] is automatically assigned by the server on creation.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Different notification type behaviors are configured primarily using the the `labels` field on this
        /// resource. This block contains the labels which contain secrets or passwords so that they can be marked
        /// sensitive and hidden from plan output. The name of the field, eg: password, will be the key
        /// in the `labels` map in the api request.
        /// Credentials may not be specified in both locations and will cause an error. Changing from one location
        /// to a different credential configuration in the config will require an apply to update state.
        /// Structure is documented below.
        /// </summary>
        [Output("sensitiveLabels")]
        public Output<Outputs.NotificationChannelSensitiveLabels?> SensitiveLabels { get; private set; } = null!;

        /// <summary>
        /// The type of the notification channel. This field matches the value of the NotificationChannelDescriptor.type field. See https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannelDescriptors/list to get the list of valid values such as "email", "slack", etc...
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// User-supplied key/value data that does not need to conform to the corresponding NotificationChannelDescriptor's schema, unlike the labels field. This field is intended to be used for organizing and identifying the NotificationChannel objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
        /// </summary>
        [Output("userLabels")]
        public Output<ImmutableDictionary<string, string>?> UserLabels { get; private set; } = null!;

        /// <summary>
        /// Indicates whether this channel has been verified or not. On a ListNotificationChannels or GetNotificationChannel
        /// operation, this field is expected to be populated.If the value is UNVERIFIED, then it indicates that the channel is
        /// non-functioning (it both requires verification and lacks verification); otherwise, it is assumed that the channel
        /// works.If the channel is neither VERIFIED nor UNVERIFIED, it implies that the channel is of a type that does not require
        /// verification or that this specific channel has been exempted from verification because it was created prior to
        /// verification being required for channels of this type.This field cannot be modified using a standard
        /// UpdateNotificationChannel operation. To change the value of this field, you must call VerifyNotificationChannel.
        /// </summary>
        [Output("verificationStatus")]
        public Output<string> VerificationStatus { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationChannel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationChannel(string name, NotificationChannelArgs args, CustomResourceOptions? options = null)
            : base("gcp:monitoring/notificationChannel:NotificationChannel", name, args ?? new NotificationChannelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationChannel(string name, Input<string> id, NotificationChannelState? state = null, CustomResourceOptions? options = null)
            : base("gcp:monitoring/notificationChannel:NotificationChannel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationChannel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationChannel Get(string name, Input<string> id, NotificationChannelState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationChannel(name, id, state, options);
        }
    }

    public sealed class NotificationChannelArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional human-readable description of this notification channel. This description may provide additional details, beyond the display name, for the channel. This may not exceed 1024 Unicode characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An optional human-readable name for this notification channel. It is recommended that you specify a non-empty and unique name in order to make it easier to identify the channels in your project, though this is not enforced. The display name is limited to 512 Unicode characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Whether notifications are forwarded to the described channel. This makes it possible to disable delivery of notifications to a particular channel without removing the channel from all alerting policies that reference the channel. This is a more convenient approach when the change is temporary and you want to receive notifications from the same set of alerting policies on the channel at some point in the future.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Configuration fields that define the channel and its behavior. The
        /// permissible and required labels are specified in the
        /// NotificationChannelDescriptor corresponding to the type field.
        /// Labels with sensitive data are obfuscated by the API and therefore the provider cannot
        /// determine if there are upstream changes to these fields. They can also be configured via
        /// the sensitive_labels block, but cannot be configured in both places.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Different notification type behaviors are configured primarily using the the `labels` field on this
        /// resource. This block contains the labels which contain secrets or passwords so that they can be marked
        /// sensitive and hidden from plan output. The name of the field, eg: password, will be the key
        /// in the `labels` map in the api request.
        /// Credentials may not be specified in both locations and will cause an error. Changing from one location
        /// to a different credential configuration in the config will require an apply to update state.
        /// Structure is documented below.
        /// </summary>
        [Input("sensitiveLabels")]
        public Input<Inputs.NotificationChannelSensitiveLabelsArgs>? SensitiveLabels { get; set; }

        /// <summary>
        /// The type of the notification channel. This field matches the value of the NotificationChannelDescriptor.type field. See https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannelDescriptors/list to get the list of valid values such as "email", "slack", etc...
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("userLabels")]
        private InputMap<string>? _userLabels;

        /// <summary>
        /// User-supplied key/value data that does not need to conform to the corresponding NotificationChannelDescriptor's schema, unlike the labels field. This field is intended to be used for organizing and identifying the NotificationChannel objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
        /// </summary>
        public InputMap<string> UserLabels
        {
            get => _userLabels ?? (_userLabels = new InputMap<string>());
            set => _userLabels = value;
        }

        public NotificationChannelArgs()
        {
        }
    }

    public sealed class NotificationChannelState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional human-readable description of this notification channel. This description may provide additional details, beyond the display name, for the channel. This may not exceed 1024 Unicode characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An optional human-readable name for this notification channel. It is recommended that you specify a non-empty and unique name in order to make it easier to identify the channels in your project, though this is not enforced. The display name is limited to 512 Unicode characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Whether notifications are forwarded to the described channel. This makes it possible to disable delivery of notifications to a particular channel without removing the channel from all alerting policies that reference the channel. This is a more convenient approach when the change is temporary and you want to receive notifications from the same set of alerting policies on the channel at some point in the future.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Configuration fields that define the channel and its behavior. The
        /// permissible and required labels are specified in the
        /// NotificationChannelDescriptor corresponding to the type field.
        /// Labels with sensitive data are obfuscated by the API and therefore the provider cannot
        /// determine if there are upstream changes to these fields. They can also be configured via
        /// the sensitive_labels block, but cannot be configured in both places.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The full REST resource name for this channel. The syntax is: projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID] The
        /// [CHANNEL_ID] is automatically assigned by the server on creation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Different notification type behaviors are configured primarily using the the `labels` field on this
        /// resource. This block contains the labels which contain secrets or passwords so that they can be marked
        /// sensitive and hidden from plan output. The name of the field, eg: password, will be the key
        /// in the `labels` map in the api request.
        /// Credentials may not be specified in both locations and will cause an error. Changing from one location
        /// to a different credential configuration in the config will require an apply to update state.
        /// Structure is documented below.
        /// </summary>
        [Input("sensitiveLabels")]
        public Input<Inputs.NotificationChannelSensitiveLabelsGetArgs>? SensitiveLabels { get; set; }

        /// <summary>
        /// The type of the notification channel. This field matches the value of the NotificationChannelDescriptor.type field. See https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannelDescriptors/list to get the list of valid values such as "email", "slack", etc...
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("userLabels")]
        private InputMap<string>? _userLabels;

        /// <summary>
        /// User-supplied key/value data that does not need to conform to the corresponding NotificationChannelDescriptor's schema, unlike the labels field. This field is intended to be used for organizing and identifying the NotificationChannel objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
        /// </summary>
        public InputMap<string> UserLabels
        {
            get => _userLabels ?? (_userLabels = new InputMap<string>());
            set => _userLabels = value;
        }

        /// <summary>
        /// Indicates whether this channel has been verified or not. On a ListNotificationChannels or GetNotificationChannel
        /// operation, this field is expected to be populated.If the value is UNVERIFIED, then it indicates that the channel is
        /// non-functioning (it both requires verification and lacks verification); otherwise, it is assumed that the channel
        /// works.If the channel is neither VERIFIED nor UNVERIFIED, it implies that the channel is of a type that does not require
        /// verification or that this specific channel has been exempted from verification because it was created prior to
        /// verification being required for channels of this type.This field cannot be modified using a standard
        /// UpdateNotificationChannel operation. To change the value of this field, you must call VerifyNotificationChannel.
        /// </summary>
        [Input("verificationStatus")]
        public Input<string>? VerificationStatus { get; set; }

        public NotificationChannelState()
        {
        }
    }
}
