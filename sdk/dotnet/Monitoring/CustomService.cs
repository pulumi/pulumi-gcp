// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Monitoring
{
    /// <summary>
    /// A Service is a discrete, autonomous, and network-accessible unit,
    /// designed to solve an individual concern (Wikipedia). In Cloud Monitoring,
    /// a Service acts as the root resource under which operational aspects of
    /// the service are accessible
    /// 
    /// 
    /// To get more information about Service, see:
    /// 
    /// * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
    /// * How-to Guides
    ///     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
    ///     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
    /// 
    /// ## Example Usage - Monitoring Service Custom
    /// 
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var custom = new Gcp.Monitoring.CustomService("custom", new Gcp.Monitoring.CustomServiceArgs
    ///         {
    ///             DisplayName = "My Custom Service custom-srv",
    ///             ServiceId = "custom-srv",
    ///             Telemetry = new Gcp.Monitoring.Inputs.CustomServiceTelemetryArgs
    ///             {
    ///                 ResourceName = "//product.googleapis.com/foo/foo/services/test",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class CustomService : Pulumi.CustomResource
    {
        /// <summary>
        /// Name used for UI elements listing this Service.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// An optional service ID to use. If not given, the server will generate a
        /// service ID.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// Configuration for how to query telemetry on a Service.  Structure is documented below.
        /// </summary>
        [Output("telemetry")]
        public Output<Outputs.CustomServiceTelemetry?> Telemetry { get; private set; } = null!;


        /// <summary>
        /// Create a CustomService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomService(string name, CustomServiceArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:monitoring/customService:CustomService", name, args ?? new CustomServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomService(string name, Input<string> id, CustomServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:monitoring/customService:CustomService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomService Get(string name, Input<string> id, CustomServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomService(name, id, state, options);
        }
    }

    public sealed class CustomServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name used for UI elements listing this Service.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// An optional service ID to use. If not given, the server will generate a
        /// service ID.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// Configuration for how to query telemetry on a Service.  Structure is documented below.
        /// </summary>
        [Input("telemetry")]
        public Input<Inputs.CustomServiceTelemetryArgs>? Telemetry { get; set; }

        public CustomServiceArgs()
        {
        }
    }

    public sealed class CustomServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name used for UI elements listing this Service.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// An optional service ID to use. If not given, the server will generate a
        /// service ID.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// Configuration for how to query telemetry on a Service.  Structure is documented below.
        /// </summary>
        [Input("telemetry")]
        public Input<Inputs.CustomServiceTelemetryGetArgs>? Telemetry { get; set; }

        public CustomServiceState()
        {
        }
    }
}
