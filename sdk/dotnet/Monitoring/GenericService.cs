// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Monitoring
{
    /// <summary>
    /// A Service is a discrete, autonomous, and network-accessible unit,
    /// designed to solve an individual concern (Wikipedia). In Cloud Monitoring,
    /// a Service acts as the root resource under which operational aspects of
    /// the service are accessible
    /// 
    /// To get more information about GenericService, see:
    /// 
    /// * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
    /// * How-to Guides
    ///     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
    ///     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
    /// 
    /// ## Example Usage
    /// ### Monitoring Service Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myService = new Gcp.Monitoring.GenericService("myService", new()
    ///     {
    ///         BasicService = new Gcp.Monitoring.Inputs.GenericServiceBasicServiceArgs
    ///         {
    ///             ServiceLabels = 
    ///             {
    ///                 { "moduleId", "another-module-id" },
    ///             },
    ///             ServiceType = "APP_ENGINE",
    ///         },
    ///         DisplayName = "My Service my-service",
    ///         ServiceId = "my-service",
    ///         UserLabels = 
    ///         {
    ///             { "my_key", "my_value" },
    ///             { "my_other_key", "my_other_value" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// GenericService can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:monitoring/genericService:GenericService default projects/{{project}}/services/{{service_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:monitoring/genericService:GenericService default {{project}}/{{service_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:monitoring/genericService:GenericService default {{service_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:monitoring/genericService:GenericService")]
    public partial class GenericService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A well-known service type, defined by its service type and service labels.
        /// Valid values are described at
        /// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
        /// Structure is documented below.
        /// </summary>
        [Output("basicService")]
        public Output<Outputs.GenericServiceBasicService?> BasicService { get; private set; } = null!;

        /// <summary>
        /// Name used for UI elements listing this Service.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// An optional service ID to use. If not given, the server will generate a
        /// service ID.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// Configuration for how to query telemetry on a Service.
        /// </summary>
        [Output("telemetries")]
        public Output<ImmutableArray<Outputs.GenericServiceTelemetry>> Telemetries { get; private set; } = null!;

        /// <summary>
        /// Labels which have been used to annotate the service. Label keys must start
        /// with a letter. Label keys and values may contain lowercase letters,
        /// numbers, underscores, and dashes. Label keys and values have a maximum
        /// length of 63 characters, and must be less than 128 bytes in size. Up to 64
        /// label entries may be stored. For labels which do not have a semantic value,
        /// the empty string may be supplied for the label value.
        /// </summary>
        [Output("userLabels")]
        public Output<ImmutableDictionary<string, string>?> UserLabels { get; private set; } = null!;


        /// <summary>
        /// Create a GenericService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GenericService(string name, GenericServiceArgs args, CustomResourceOptions? options = null)
            : base("gcp:monitoring/genericService:GenericService", name, args ?? new GenericServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GenericService(string name, Input<string> id, GenericServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:monitoring/genericService:GenericService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GenericService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GenericService Get(string name, Input<string> id, GenericServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new GenericService(name, id, state, options);
        }
    }

    public sealed class GenericServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A well-known service type, defined by its service type and service labels.
        /// Valid values are described at
        /// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
        /// Structure is documented below.
        /// </summary>
        [Input("basicService")]
        public Input<Inputs.GenericServiceBasicServiceArgs>? BasicService { get; set; }

        /// <summary>
        /// Name used for UI elements listing this Service.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// An optional service ID to use. If not given, the server will generate a
        /// service ID.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        [Input("userLabels")]
        private InputMap<string>? _userLabels;

        /// <summary>
        /// Labels which have been used to annotate the service. Label keys must start
        /// with a letter. Label keys and values may contain lowercase letters,
        /// numbers, underscores, and dashes. Label keys and values have a maximum
        /// length of 63 characters, and must be less than 128 bytes in size. Up to 64
        /// label entries may be stored. For labels which do not have a semantic value,
        /// the empty string may be supplied for the label value.
        /// </summary>
        public InputMap<string> UserLabels
        {
            get => _userLabels ?? (_userLabels = new InputMap<string>());
            set => _userLabels = value;
        }

        public GenericServiceArgs()
        {
        }
        public static new GenericServiceArgs Empty => new GenericServiceArgs();
    }

    public sealed class GenericServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A well-known service type, defined by its service type and service labels.
        /// Valid values are described at
        /// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
        /// Structure is documented below.
        /// </summary>
        [Input("basicService")]
        public Input<Inputs.GenericServiceBasicServiceGetArgs>? BasicService { get; set; }

        /// <summary>
        /// Name used for UI elements listing this Service.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// An optional service ID to use. If not given, the server will generate a
        /// service ID.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        [Input("telemetries")]
        private InputList<Inputs.GenericServiceTelemetryGetArgs>? _telemetries;

        /// <summary>
        /// Configuration for how to query telemetry on a Service.
        /// </summary>
        public InputList<Inputs.GenericServiceTelemetryGetArgs> Telemetries
        {
            get => _telemetries ?? (_telemetries = new InputList<Inputs.GenericServiceTelemetryGetArgs>());
            set => _telemetries = value;
        }

        [Input("userLabels")]
        private InputMap<string>? _userLabels;

        /// <summary>
        /// Labels which have been used to annotate the service. Label keys must start
        /// with a letter. Label keys and values may contain lowercase letters,
        /// numbers, underscores, and dashes. Label keys and values have a maximum
        /// length of 63 characters, and must be less than 128 bytes in size. Up to 64
        /// label entries may be stored. For labels which do not have a semantic value,
        /// the empty string may be supplied for the label value.
        /// </summary>
        public InputMap<string> UserLabels
        {
            get => _userLabels ?? (_userLabels = new InputMap<string>());
            set => _userLabels = value;
        }

        public GenericServiceState()
        {
        }
        public static new GenericServiceState Empty => new GenericServiceState();
    }
}
