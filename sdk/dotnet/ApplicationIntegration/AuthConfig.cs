// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ApplicationIntegration
{
    /// <summary>
    /// The AuthConfig resource use to hold channels and connection config data.
    /// 
    /// To get more information about AuthConfig, see:
    /// 
    /// * [API documentation](https://cloud.google.com/application-integration/docs/reference/rest/v1/projects.locations.authConfigs)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/application-integration/docs/overview)
    ///     * [Manage authentication profiles](https://cloud.google.com/application-integration/docs/configure-authentication-profiles)
    /// 
    /// ## Example Usage
    /// 
    /// ### Integrations Auth Config Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var client = new Gcp.ApplicationIntegration.Client("client", new()
    ///     {
    ///         Location = "us-west1",
    ///     });
    /// 
    ///     var basicExample = new Gcp.ApplicationIntegration.AuthConfig("basic_example", new()
    ///     {
    ///         Location = "us-west1",
    ///         DisplayName = "test-authconfig",
    ///         Description = "Test auth config created via terraform",
    ///         DecryptedCredential = new Gcp.ApplicationIntegration.Inputs.AuthConfigDecryptedCredentialArgs
    ///         {
    ///             CredentialType = "USERNAME_AND_PASSWORD",
    ///             UsernameAndPassword = new Gcp.ApplicationIntegration.Inputs.AuthConfigDecryptedCredentialUsernameAndPasswordArgs
    ///             {
    ///                 Username = "test-username",
    ///                 Password = "test-password",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// AuthConfig can be imported using any of these accepted formats:
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, AuthConfig can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:applicationintegration/authConfig:AuthConfig default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:applicationintegration/authConfig:AuthConfig")]
    public partial class AuthConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Certificate id for client certificate.
        /// </summary>
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// Raw client certificate
        /// Structure is documented below.
        /// </summary>
        [Output("clientCertificate")]
        public Output<Outputs.AuthConfigClientCertificate?> ClientCertificate { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the auth config is created.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        /// </summary>
        [Output("creatorEmail")]
        public Output<string> CreatorEmail { get; private set; } = null!;

        /// <summary>
        /// Credential type of the encrypted credential.
        /// </summary>
        [Output("credentialType")]
        public Output<string> CredentialType { get; private set; } = null!;

        /// <summary>
        /// Raw auth credentials.
        /// Structure is documented below.
        /// </summary>
        [Output("decryptedCredential")]
        public Output<Outputs.AuthConfigDecryptedCredential?> DecryptedCredential { get; private set; } = null!;

        /// <summary>
        /// A description of the auth config.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the auth config.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Auth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key.
        /// A base64-encoded string.
        /// </summary>
        [Output("encryptedCredential")]
        public Output<string> EncryptedCredential { get; private set; } = null!;

        /// <summary>
        /// User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
        /// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
        /// </summary>
        [Output("expiryNotificationDurations")]
        public Output<ImmutableArray<string>> ExpiryNotificationDurations { get; private set; } = null!;

        /// <summary>
        /// The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        /// </summary>
        [Output("lastModifierEmail")]
        public Output<string> LastModifierEmail { get; private set; } = null!;

        /// <summary>
        /// Location in which client needs to be provisioned.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Resource name of the auth config.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("overrideValidTime")]
        public Output<string?> OverrideValidTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The reason / details of the current status.
        /// </summary>
        [Output("reason")]
        public Output<string> Reason { get; private set; } = null!;

        /// <summary>
        /// The status of the auth config.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the auth config is modified.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// The time until the auth config is valid. Empty or max value is considered the auth config won't expire.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("validTime")]
        public Output<string> ValidTime { get; private set; } = null!;

        /// <summary>
        /// The visibility of the auth config.
        /// Possible values are: `PRIVATE`, `CLIENT_VISIBLE`.
        /// </summary>
        [Output("visibility")]
        public Output<string?> Visibility { get; private set; } = null!;


        /// <summary>
        /// Create a AuthConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthConfig(string name, AuthConfigArgs args, CustomResourceOptions? options = null)
            : base("gcp:applicationintegration/authConfig:AuthConfig", name, args ?? new AuthConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuthConfig(string name, Input<string> id, AuthConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:applicationintegration/authConfig:AuthConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthConfig Get(string name, Input<string> id, AuthConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthConfig(name, id, state, options);
        }
    }

    public sealed class AuthConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Raw client certificate
        /// Structure is documented below.
        /// </summary>
        [Input("clientCertificate")]
        public Input<Inputs.AuthConfigClientCertificateArgs>? ClientCertificate { get; set; }

        /// <summary>
        /// Raw auth credentials.
        /// Structure is documented below.
        /// </summary>
        [Input("decryptedCredential")]
        public Input<Inputs.AuthConfigDecryptedCredentialArgs>? DecryptedCredential { get; set; }

        /// <summary>
        /// A description of the auth config.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the auth config.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("expiryNotificationDurations")]
        private InputList<string>? _expiryNotificationDurations;

        /// <summary>
        /// User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
        /// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
        /// </summary>
        public InputList<string> ExpiryNotificationDurations
        {
            get => _expiryNotificationDurations ?? (_expiryNotificationDurations = new InputList<string>());
            set => _expiryNotificationDurations = value;
        }

        /// <summary>
        /// Location in which client needs to be provisioned.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("overrideValidTime")]
        public Input<string>? OverrideValidTime { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The visibility of the auth config.
        /// Possible values are: `PRIVATE`, `CLIENT_VISIBLE`.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public AuthConfigArgs()
        {
        }
        public static new AuthConfigArgs Empty => new AuthConfigArgs();
    }

    public sealed class AuthConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Certificate id for client certificate.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// Raw client certificate
        /// Structure is documented below.
        /// </summary>
        [Input("clientCertificate")]
        public Input<Inputs.AuthConfigClientCertificateGetArgs>? ClientCertificate { get; set; }

        /// <summary>
        /// The timestamp when the auth config is created.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        /// </summary>
        [Input("creatorEmail")]
        public Input<string>? CreatorEmail { get; set; }

        /// <summary>
        /// Credential type of the encrypted credential.
        /// </summary>
        [Input("credentialType")]
        public Input<string>? CredentialType { get; set; }

        /// <summary>
        /// Raw auth credentials.
        /// Structure is documented below.
        /// </summary>
        [Input("decryptedCredential")]
        public Input<Inputs.AuthConfigDecryptedCredentialGetArgs>? DecryptedCredential { get; set; }

        /// <summary>
        /// A description of the auth config.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the auth config.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Auth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key.
        /// A base64-encoded string.
        /// </summary>
        [Input("encryptedCredential")]
        public Input<string>? EncryptedCredential { get; set; }

        [Input("expiryNotificationDurations")]
        private InputList<string>? _expiryNotificationDurations;

        /// <summary>
        /// User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
        /// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
        /// </summary>
        public InputList<string> ExpiryNotificationDurations
        {
            get => _expiryNotificationDurations ?? (_expiryNotificationDurations = new InputList<string>());
            set => _expiryNotificationDurations = value;
        }

        /// <summary>
        /// The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        /// </summary>
        [Input("lastModifierEmail")]
        public Input<string>? LastModifierEmail { get; set; }

        /// <summary>
        /// Location in which client needs to be provisioned.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Resource name of the auth config.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("overrideValidTime")]
        public Input<string>? OverrideValidTime { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The reason / details of the current status.
        /// </summary>
        [Input("reason")]
        public Input<string>? Reason { get; set; }

        /// <summary>
        /// The status of the auth config.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The timestamp when the auth config is modified.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// The time until the auth config is valid. Empty or max value is considered the auth config won't expire.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("validTime")]
        public Input<string>? ValidTime { get; set; }

        /// <summary>
        /// The visibility of the auth config.
        /// Possible values are: `PRIVATE`, `CLIENT_VISIBLE`.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public AuthConfigState()
        {
        }
        public static new AuthConfigState Empty => new AuthConfigState();
    }
}
