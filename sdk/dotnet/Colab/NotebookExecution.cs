// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Colab
{
    /// <summary>
    /// 'An instance of a notebook Execution'
    /// 
    /// To get more information about NotebookExecution, see:
    /// 
    /// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.notebookExecutionJobs)
    /// * How-to Guides
    ///     * [Schedule a notebook run](https://cloud.google.com/colab/docs/schedule-notebook-run)
    /// 
    /// ## Example Usage
    /// 
    /// ### Colab Notebook Execution Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myRuntimeTemplate = new Gcp.Colab.RuntimeTemplate("my_runtime_template", new()
    ///     {
    ///         Name = "runtime-template-name",
    ///         DisplayName = "Runtime template",
    ///         Location = "us-central1",
    ///         MachineSpec = new Gcp.Colab.Inputs.RuntimeTemplateMachineSpecArgs
    ///         {
    ///             MachineType = "e2-standard-4",
    ///         },
    ///         NetworkSpec = new Gcp.Colab.Inputs.RuntimeTemplateNetworkSpecArgs
    ///         {
    ///             EnableInternetAccess = true,
    ///         },
    ///     });
    /// 
    ///     var outputBucket = new Gcp.Storage.Bucket("output_bucket", new()
    ///     {
    ///         Name = "my_bucket",
    ///         Location = "US",
    ///         ForceDestroy = true,
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var notebook_execution = new Gcp.Colab.NotebookExecution("notebook-execution", new()
    ///     {
    ///         DisplayName = "Notebook execution basic",
    ///         Location = "us-central1",
    ///         DirectNotebookSource = new Gcp.Colab.Inputs.NotebookExecutionDirectNotebookSourceArgs
    ///         {
    ///             Content = Std.Base64encode.Invoke(new()
    ///             {
    ///                 Input = @"    {
    ///       ""cells"": [
    ///         {
    ///           ""cell_type"": ""code"",
    ///           ""execution_count"": null,
    ///           ""metadata"": {},
    ///           ""outputs"": [],
    ///           ""source"": [
    ///             ""print(\""Hello, World!\"")""
    ///           ]
    ///         }
    ///       ],
    ///       ""metadata"": {
    ///         ""kernelspec"": {
    ///           ""display_name"": ""Python 3"",
    ///           ""language"": ""python"",
    ///           ""name"": ""python3""
    ///         },
    ///         ""language_info"": {
    ///           ""codemirror_mode"": {
    ///             ""name"": ""ipython"",
    ///             ""version"": 3
    ///           },
    ///           ""file_extension"": "".py"",
    ///           ""mimetype"": ""text/x-python"",
    ///           ""name"": ""python"",
    ///           ""nbconvert_exporter"": ""python"",
    ///           ""pygments_lexer"": ""ipython3"",
    ///           ""version"": ""3.8.5""
    ///         }
    ///       },
    ///       ""nbformat"": 4,
    ///       ""nbformat_minor"": 4
    ///     }
    /// ",
    ///             }).Apply(invoke =&gt; invoke.Result),
    ///         },
    ///         NotebookRuntimeTemplateResourceName = Output.Tuple(myRuntimeTemplate.Project, myRuntimeTemplate.Location, myRuntimeTemplate.Name).Apply(values =&gt;
    ///         {
    ///             var project = values.Item1;
    ///             var location = values.Item2;
    ///             var name = values.Item3;
    ///             return $"projects/{project}/locations/{location}/notebookRuntimeTemplates/{name}";
    ///         }),
    ///         GcsOutputUri = outputBucket.Name.Apply(name =&gt; $"gs://{name}"),
    ///         ServiceAccount = "my@service-account.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             myRuntimeTemplate,
    ///             outputBucket,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Colab Notebook Execution Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myRuntimeTemplate = new Gcp.Colab.RuntimeTemplate("my_runtime_template", new()
    ///     {
    ///         Name = "runtime-template-name",
    ///         DisplayName = "Runtime template",
    ///         Location = "us-central1",
    ///         MachineSpec = new Gcp.Colab.Inputs.RuntimeTemplateMachineSpecArgs
    ///         {
    ///             MachineType = "e2-standard-4",
    ///         },
    ///         NetworkSpec = new Gcp.Colab.Inputs.RuntimeTemplateNetworkSpecArgs
    ///         {
    ///             EnableInternetAccess = true,
    ///         },
    ///     });
    /// 
    ///     var outputBucket = new Gcp.Storage.Bucket("output_bucket", new()
    ///     {
    ///         Name = "my_bucket",
    ///         Location = "US",
    ///         ForceDestroy = true,
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var notebook = new Gcp.Storage.BucketObject("notebook", new()
    ///     {
    ///         Name = "hello_world.ipynb",
    ///         Bucket = outputBucket.Name,
    ///         Content = @"    {
    ///       ""cells"": [
    ///         {
    ///           ""cell_type"": ""code"",
    ///           ""execution_count"": null,
    ///           ""metadata"": {},
    ///           ""outputs"": [],
    ///           ""source"": [
    ///             ""print(\""Hello, World!\"")""
    ///           ]
    ///         }
    ///       ],
    ///       ""metadata"": {
    ///         ""kernelspec"": {
    ///           ""display_name"": ""Python 3"",
    ///           ""language"": ""python"",
    ///           ""name"": ""python3""
    ///         },
    ///         ""language_info"": {
    ///           ""codemirror_mode"": {
    ///             ""name"": ""ipython"",
    ///             ""version"": 3
    ///           },
    ///           ""file_extension"": "".py"",
    ///           ""mimetype"": ""text/x-python"",
    ///           ""name"": ""python"",
    ///           ""nbconvert_exporter"": ""python"",
    ///           ""pygments_lexer"": ""ipython3"",
    ///           ""version"": ""3.8.5""
    ///         }
    ///       },
    ///       ""nbformat"": 4,
    ///       ""nbformat_minor"": 4
    ///     }
    /// ",
    ///     });
    /// 
    ///     var notebook_execution = new Gcp.Colab.NotebookExecution("notebook-execution", new()
    ///     {
    ///         NotebookExecutionJobId = "colab-notebook-execution",
    ///         DisplayName = "Notebook execution full",
    ///         Location = "us-central1",
    ///         ExecutionTimeout = "86400s",
    ///         GcsNotebookSource = new Gcp.Colab.Inputs.NotebookExecutionGcsNotebookSourceArgs
    ///         {
    ///             Uri = Output.Tuple(notebook.Bucket, notebook.Name).Apply(values =&gt;
    ///             {
    ///                 var bucket = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"gs://{bucket}/{name}";
    ///             }),
    ///             Generation = notebook.Generation,
    ///         },
    ///         ServiceAccount = "my@service-account.com",
    ///         GcsOutputUri = outputBucket.Name.Apply(name =&gt; $"gs://{name}"),
    ///         NotebookRuntimeTemplateResourceName = Output.Tuple(myRuntimeTemplate.Project, myRuntimeTemplate.Location, myRuntimeTemplate.Name).Apply(values =&gt;
    ///         {
    ///             var project = values.Item1;
    ///             var location = values.Item2;
    ///             var name = values.Item3;
    ///             return $"projects/{project}/locations/{location}/notebookRuntimeTemplates/{name}";
    ///         }),
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             notebook,
    ///             outputBucket,
    ///             myRuntimeTemplate,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Colab Notebook Execution Dataform
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myRuntimeTemplate = new Gcp.Colab.RuntimeTemplate("my_runtime_template", new()
    ///     {
    ///         Name = "runtime-template-name",
    ///         DisplayName = "Runtime template",
    ///         Location = "us-central1",
    ///         MachineSpec = new Gcp.Colab.Inputs.RuntimeTemplateMachineSpecArgs
    ///         {
    ///             MachineType = "e2-standard-4",
    ///         },
    ///         NetworkSpec = new Gcp.Colab.Inputs.RuntimeTemplateNetworkSpecArgs
    ///         {
    ///             EnableInternetAccess = true,
    ///         },
    ///     });
    /// 
    ///     var outputBucket = new Gcp.Storage.Bucket("output_bucket", new()
    ///     {
    ///         Name = "my_bucket",
    ///         Location = "US",
    ///         ForceDestroy = true,
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var secret = new Gcp.SecretManager.Secret("secret", new()
    ///     {
    ///         SecretId = "secret",
    ///         Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///         {
    ///             Auto = null,
    ///         },
    ///     });
    /// 
    ///     var secretVersion = new Gcp.SecretManager.SecretVersion("secret_version", new()
    ///     {
    ///         Secret = secret.Id,
    ///         SecretData = "secret-data",
    ///     });
    /// 
    ///     var dataformRepository = new Gcp.Dataform.Repository("dataform_repository", new()
    ///     {
    ///         Name = "dataform-repository",
    ///         DisplayName = "dataform_repository",
    ///         NpmrcEnvironmentVariablesSecretVersion = secretVersion.Id,
    ///         KmsKeyName = "my-crypto-key",
    ///         Labels = 
    ///         {
    ///             { "label_foo1", "label-bar1" },
    ///         },
    ///         GitRemoteSettings = new Gcp.Dataform.Inputs.RepositoryGitRemoteSettingsArgs
    ///         {
    ///             Url = "https://github.com/OWNER/REPOSITORY.git",
    ///             DefaultBranch = "main",
    ///             AuthenticationTokenSecretVersion = secretVersion.Id,
    ///         },
    ///         WorkspaceCompilationOverrides = new Gcp.Dataform.Inputs.RepositoryWorkspaceCompilationOverridesArgs
    ///         {
    ///             DefaultDatabase = "database",
    ///             SchemaSuffix = "_suffix",
    ///             TablePrefix = "prefix_",
    ///         },
    ///     });
    /// 
    ///     var notebook_execution = new Gcp.Colab.NotebookExecution("notebook-execution", new()
    ///     {
    ///         DisplayName = "Notebook execution Dataform",
    ///         Location = "us-central1",
    ///         DataformRepositorySource = new Gcp.Colab.Inputs.NotebookExecutionDataformRepositorySourceArgs
    ///         {
    ///             CommitSha = "randomsha123",
    ///             DataformRepositoryResourceName = Output.Tuple(myRuntimeTemplate.Project, myRuntimeTemplate.Location, dataformRepository.Name).Apply(values =&gt;
    ///             {
    ///                 var project = values.Item1;
    ///                 var location = values.Item2;
    ///                 var name = values.Item3;
    ///                 return $"projects/{project}/locations/{location}/repositories/{name}";
    ///             }),
    ///         },
    ///         NotebookRuntimeTemplateResourceName = Output.Tuple(myRuntimeTemplate.Project, myRuntimeTemplate.Location, myRuntimeTemplate.Name).Apply(values =&gt;
    ///         {
    ///             var project = values.Item1;
    ///             var location = values.Item2;
    ///             var name = values.Item3;
    ///             return $"projects/{project}/locations/{location}/notebookRuntimeTemplates/{name}";
    ///         }),
    ///         GcsOutputUri = outputBucket.Name.Apply(name =&gt; $"gs://{name}"),
    ///         ServiceAccount = "my@service-account.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             myRuntimeTemplate,
    ///             outputBucket,
    ///             secretVersion,
    ///             dataformRepository,
    ///             secret,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NotebookExecution can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{notebook_execution_job_id}}`
    /// 
    /// * `{{location}}/{{notebook_execution_job_id}}`
    /// 
    /// When using the `pulumi import` command, NotebookExecution can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:colab/notebookExecution:NotebookExecution default projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:colab/notebookExecution:NotebookExecution default {{project}}/{{location}}/{{notebook_execution_job_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:colab/notebookExecution:NotebookExecution default {{location}}/{{notebook_execution_job_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:colab/notebookExecution:NotebookExecution")]
    public partial class NotebookExecution : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Dataform Repository containing the input notebook.
        /// Structure is documented below.
        /// </summary>
        [Output("dataformRepositorySource")]
        public Output<Outputs.NotebookExecutionDataformRepositorySource?> DataformRepositorySource { get; private set; } = null!;

        /// <summary>
        /// The content of the input notebook in ipynb format.
        /// Structure is documented below.
        /// </summary>
        [Output("directNotebookSource")]
        public Output<Outputs.NotebookExecutionDirectNotebookSource?> DirectNotebookSource { get; private set; } = null!;

        /// <summary>
        /// Required. The display name of the Notebook Execution.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Max running time of the execution job in seconds (default 86400s / 24 hrs).
        /// </summary>
        [Output("executionTimeout")]
        public Output<string?> ExecutionTimeout { get; private set; } = null!;

        /// <summary>
        /// The user email to run the execution as.
        /// </summary>
        [Output("executionUser")]
        public Output<string?> ExecutionUser { get; private set; } = null!;

        /// <summary>
        /// The Cloud Storage uri for the input notebook.
        /// Structure is documented below.
        /// </summary>
        [Output("gcsNotebookSource")]
        public Output<Outputs.NotebookExecutionGcsNotebookSource?> GcsNotebookSource { get; private set; } = null!;

        /// <summary>
        /// The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
        /// </summary>
        [Output("gcsOutputUri")]
        public Output<string> GcsOutputUri { get; private set; } = null!;

        /// <summary>
        /// The location for the resource: https://cloud.google.com/colab/docs/locations
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// User specified ID for the Notebook Execution Job
        /// </summary>
        [Output("notebookExecutionJobId")]
        public Output<string> NotebookExecutionJobId { get; private set; } = null!;

        /// <summary>
        /// The NotebookRuntimeTemplate to source compute configuration from.
        /// </summary>
        [Output("notebookRuntimeTemplateResourceName")]
        public Output<string?> NotebookRuntimeTemplateResourceName { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The service account to run the execution as.
        /// </summary>
        [Output("serviceAccount")]
        public Output<string?> ServiceAccount { get; private set; } = null!;


        /// <summary>
        /// Create a NotebookExecution resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotebookExecution(string name, NotebookExecutionArgs args, CustomResourceOptions? options = null)
            : base("gcp:colab/notebookExecution:NotebookExecution", name, args ?? new NotebookExecutionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotebookExecution(string name, Input<string> id, NotebookExecutionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:colab/notebookExecution:NotebookExecution", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotebookExecution resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotebookExecution Get(string name, Input<string> id, NotebookExecutionState? state = null, CustomResourceOptions? options = null)
        {
            return new NotebookExecution(name, id, state, options);
        }
    }

    public sealed class NotebookExecutionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Dataform Repository containing the input notebook.
        /// Structure is documented below.
        /// </summary>
        [Input("dataformRepositorySource")]
        public Input<Inputs.NotebookExecutionDataformRepositorySourceArgs>? DataformRepositorySource { get; set; }

        /// <summary>
        /// The content of the input notebook in ipynb format.
        /// Structure is documented below.
        /// </summary>
        [Input("directNotebookSource")]
        public Input<Inputs.NotebookExecutionDirectNotebookSourceArgs>? DirectNotebookSource { get; set; }

        /// <summary>
        /// Required. The display name of the Notebook Execution.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Max running time of the execution job in seconds (default 86400s / 24 hrs).
        /// </summary>
        [Input("executionTimeout")]
        public Input<string>? ExecutionTimeout { get; set; }

        /// <summary>
        /// The user email to run the execution as.
        /// </summary>
        [Input("executionUser")]
        public Input<string>? ExecutionUser { get; set; }

        /// <summary>
        /// The Cloud Storage uri for the input notebook.
        /// Structure is documented below.
        /// </summary>
        [Input("gcsNotebookSource")]
        public Input<Inputs.NotebookExecutionGcsNotebookSourceArgs>? GcsNotebookSource { get; set; }

        /// <summary>
        /// The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
        /// </summary>
        [Input("gcsOutputUri", required: true)]
        public Input<string> GcsOutputUri { get; set; } = null!;

        /// <summary>
        /// The location for the resource: https://cloud.google.com/colab/docs/locations
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// User specified ID for the Notebook Execution Job
        /// </summary>
        [Input("notebookExecutionJobId")]
        public Input<string>? NotebookExecutionJobId { get; set; }

        /// <summary>
        /// The NotebookRuntimeTemplate to source compute configuration from.
        /// </summary>
        [Input("notebookRuntimeTemplateResourceName")]
        public Input<string>? NotebookRuntimeTemplateResourceName { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The service account to run the execution as.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        public NotebookExecutionArgs()
        {
        }
        public static new NotebookExecutionArgs Empty => new NotebookExecutionArgs();
    }

    public sealed class NotebookExecutionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Dataform Repository containing the input notebook.
        /// Structure is documented below.
        /// </summary>
        [Input("dataformRepositorySource")]
        public Input<Inputs.NotebookExecutionDataformRepositorySourceGetArgs>? DataformRepositorySource { get; set; }

        /// <summary>
        /// The content of the input notebook in ipynb format.
        /// Structure is documented below.
        /// </summary>
        [Input("directNotebookSource")]
        public Input<Inputs.NotebookExecutionDirectNotebookSourceGetArgs>? DirectNotebookSource { get; set; }

        /// <summary>
        /// Required. The display name of the Notebook Execution.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Max running time of the execution job in seconds (default 86400s / 24 hrs).
        /// </summary>
        [Input("executionTimeout")]
        public Input<string>? ExecutionTimeout { get; set; }

        /// <summary>
        /// The user email to run the execution as.
        /// </summary>
        [Input("executionUser")]
        public Input<string>? ExecutionUser { get; set; }

        /// <summary>
        /// The Cloud Storage uri for the input notebook.
        /// Structure is documented below.
        /// </summary>
        [Input("gcsNotebookSource")]
        public Input<Inputs.NotebookExecutionGcsNotebookSourceGetArgs>? GcsNotebookSource { get; set; }

        /// <summary>
        /// The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
        /// </summary>
        [Input("gcsOutputUri")]
        public Input<string>? GcsOutputUri { get; set; }

        /// <summary>
        /// The location for the resource: https://cloud.google.com/colab/docs/locations
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// User specified ID for the Notebook Execution Job
        /// </summary>
        [Input("notebookExecutionJobId")]
        public Input<string>? NotebookExecutionJobId { get; set; }

        /// <summary>
        /// The NotebookRuntimeTemplate to source compute configuration from.
        /// </summary>
        [Input("notebookRuntimeTemplateResourceName")]
        public Input<string>? NotebookRuntimeTemplateResourceName { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The service account to run the execution as.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        public NotebookExecutionState()
        {
        }
        public static new NotebookExecutionState Empty => new NotebookExecutionState();
    }
}
