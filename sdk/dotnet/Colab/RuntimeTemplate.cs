// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Colab
{
    /// <summary>
    /// 'A runtime template is a VM configuration that specifies a machine type and other characteristics of the VM,
    ///  as well as common settings such as the network and whether public internet access is enabled. When you create
    ///  a runtime, its VM is created according to the specifications of a runtime template.'
    /// 
    /// To get more information about RuntimeTemplate, see:
    /// 
    /// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.notebookRuntimeTemplates)
    /// * How-to Guides
    ///     * [Create a runtime template](https://cloud.google.com/colab/docs/create-runtime-template)
    /// 
    /// ## Example Usage
    /// 
    /// ### Colab Runtime Template Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var runtime_template = new Gcp.Colab.RuntimeTemplate("runtime-template", new()
    ///     {
    ///         Name = "colab-runtime-template",
    ///         DisplayName = "Runtime template basic",
    ///         Location = "us-central1",
    ///         MachineSpec = new Gcp.Colab.Inputs.RuntimeTemplateMachineSpecArgs
    ///         {
    ///             MachineType = "e2-standard-4",
    ///         },
    ///         NetworkSpec = new Gcp.Colab.Inputs.RuntimeTemplateNetworkSpecArgs
    ///         {
    ///             EnableInternetAccess = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Colab Runtime Template No Name
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var runtime_template = new Gcp.Colab.RuntimeTemplate("runtime-template", new()
    ///     {
    ///         DisplayName = "Runtime template no name",
    ///         Location = "us-central1",
    ///         MachineSpec = new Gcp.Colab.Inputs.RuntimeTemplateMachineSpecArgs
    ///         {
    ///             MachineType = "e2-standard-4",
    ///         },
    ///         NetworkSpec = new Gcp.Colab.Inputs.RuntimeTemplateNetworkSpecArgs
    ///         {
    ///             EnableInternetAccess = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Colab Runtime Template Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myNetwork = new Gcp.Compute.Network("my_network", new()
    ///     {
    ///         Name = "colab-test-default",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var mySubnetwork = new Gcp.Compute.Subnetwork("my_subnetwork", new()
    ///     {
    ///         Name = "colab-test-default",
    ///         Network = myNetwork.Id,
    ///         Region = "us-central1",
    ///         IpCidrRange = "10.0.1.0/24",
    ///     });
    /// 
    ///     var runtime_template = new Gcp.Colab.RuntimeTemplate("runtime-template", new()
    ///     {
    ///         Name = "colab-runtime-template",
    ///         DisplayName = "Runtime template full",
    ///         Location = "us-central1",
    ///         Description = "Full runtime template",
    ///         MachineSpec = new Gcp.Colab.Inputs.RuntimeTemplateMachineSpecArgs
    ///         {
    ///             MachineType = "n1-standard-2",
    ///             AcceleratorType = "NVIDIA_TESLA_T4",
    ///             AcceleratorCount = 1,
    ///         },
    ///         DataPersistentDiskSpec = new Gcp.Colab.Inputs.RuntimeTemplateDataPersistentDiskSpecArgs
    ///         {
    ///             DiskType = "pd-standard",
    ///             DiskSizeGb = "200",
    ///         },
    ///         NetworkSpec = new Gcp.Colab.Inputs.RuntimeTemplateNetworkSpecArgs
    ///         {
    ///             EnableInternetAccess = true,
    ///             Network = myNetwork.Id,
    ///             Subnetwork = mySubnetwork.Id,
    ///         },
    ///         Labels = 
    ///         {
    ///             { "k", "val" },
    ///         },
    ///         IdleShutdownConfig = new Gcp.Colab.Inputs.RuntimeTemplateIdleShutdownConfigArgs
    ///         {
    ///             IdleTimeout = "3600s",
    ///         },
    ///         EucConfig = new Gcp.Colab.Inputs.RuntimeTemplateEucConfigArgs
    ///         {
    ///             EucDisabled = true,
    ///         },
    ///         ShieldedVmConfig = new Gcp.Colab.Inputs.RuntimeTemplateShieldedVmConfigArgs
    ///         {
    ///             EnableSecureBoot = true,
    ///         },
    ///         NetworkTags = new[]
    ///         {
    ///             "abc",
    ///             "def",
    ///         },
    ///         EncryptionSpec = new Gcp.Colab.Inputs.RuntimeTemplateEncryptionSpecArgs
    ///         {
    ///             KmsKeyName = "my-crypto-key",
    ///         },
    ///         SoftwareConfig = new Gcp.Colab.Inputs.RuntimeTemplateSoftwareConfigArgs
    ///         {
    ///             Envs = new[]
    ///             {
    ///                 new Gcp.Colab.Inputs.RuntimeTemplateSoftwareConfigEnvArgs
    ///                 {
    ///                     Name = "TEST",
    ///                     Value = "1",
    ///                 },
    ///             },
    ///             PostStartupScriptConfig = new Gcp.Colab.Inputs.RuntimeTemplateSoftwareConfigPostStartupScriptConfigArgs
    ///             {
    ///                 PostStartupScript = "echo 'hello world'",
    ///                 PostStartupScriptUrl = "gs://colab-enterprise-pss-secure/secure_pss.sh",
    ///                 PostStartupScriptBehavior = "RUN_ONCE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RuntimeTemplate can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/notebookRuntimeTemplates/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, RuntimeTemplate can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:colab/runtimeTemplate:RuntimeTemplate default projects/{{project}}/locations/{{location}}/notebookRuntimeTemplates/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:colab/runtimeTemplate:RuntimeTemplate default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:colab/runtimeTemplate:RuntimeTemplate default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:colab/runtimeTemplate:RuntimeTemplate")]
    public partial class RuntimeTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration for the data disk of the runtime.
        /// Structure is documented below.
        /// </summary>
        [Output("dataPersistentDiskSpec")]
        public Output<Outputs.RuntimeTemplateDataPersistentDiskSpec> DataPersistentDiskSpec { get; private set; } = null!;

        /// <summary>
        /// The description of the Runtime Template.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Required. The display name of the Runtime Template.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Customer-managed encryption key spec for the notebook runtime.
        /// Structure is documented below.
        /// </summary>
        [Output("encryptionSpec")]
        public Output<Outputs.RuntimeTemplateEncryptionSpec?> EncryptionSpec { get; private set; } = null!;

        /// <summary>
        /// EUC configuration of the NotebookRuntimeTemplate.
        /// Structure is documented below.
        /// </summary>
        [Output("eucConfig")]
        public Output<Outputs.RuntimeTemplateEucConfig> EucConfig { get; private set; } = null!;

        /// <summary>
        /// Notebook Idle Shutdown configuration for the runtime.
        /// Structure is documented below.
        /// </summary>
        [Output("idleShutdownConfig")]
        public Output<Outputs.RuntimeTemplateIdleShutdownConfig> IdleShutdownConfig { get; private set; } = null!;

        /// <summary>
        /// Labels to identify and group the runtime template.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The location for the resource: https://cloud.google.com/colab/docs/locations
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// 'The machine configuration of the runtime.'
        /// Structure is documented below.
        /// </summary>
        [Output("machineSpec")]
        public Output<Outputs.RuntimeTemplateMachineSpec> MachineSpec { get; private set; } = null!;

        /// <summary>
        /// The resource name of the Runtime Template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network configuration for the runtime.
        /// Structure is documented below.
        /// </summary>
        [Output("networkSpec")]
        public Output<Outputs.RuntimeTemplateNetworkSpec> NetworkSpec { get; private set; } = null!;

        /// <summary>
        /// Applies the given Compute Engine tags to the runtime.
        /// </summary>
        [Output("networkTags")]
        public Output<ImmutableArray<string>> NetworkTags { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Runtime Shielded VM spec.
        /// Structure is documented below.
        /// </summary>
        [Output("shieldedVmConfig")]
        public Output<Outputs.RuntimeTemplateShieldedVmConfig> ShieldedVmConfig { get; private set; } = null!;

        /// <summary>
        /// The notebook software configuration of the notebook runtime.
        /// Structure is documented below.
        /// </summary>
        [Output("softwareConfig")]
        public Output<Outputs.RuntimeTemplateSoftwareConfig> SoftwareConfig { get; private set; } = null!;


        /// <summary>
        /// Create a RuntimeTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuntimeTemplate(string name, RuntimeTemplateArgs args, CustomResourceOptions? options = null)
            : base("gcp:colab/runtimeTemplate:RuntimeTemplate", name, args ?? new RuntimeTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuntimeTemplate(string name, Input<string> id, RuntimeTemplateState? state = null, CustomResourceOptions? options = null)
            : base("gcp:colab/runtimeTemplate:RuntimeTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuntimeTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuntimeTemplate Get(string name, Input<string> id, RuntimeTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new RuntimeTemplate(name, id, state, options);
        }
    }

    public sealed class RuntimeTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration for the data disk of the runtime.
        /// Structure is documented below.
        /// </summary>
        [Input("dataPersistentDiskSpec")]
        public Input<Inputs.RuntimeTemplateDataPersistentDiskSpecArgs>? DataPersistentDiskSpec { get; set; }

        /// <summary>
        /// The description of the Runtime Template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Required. The display name of the Runtime Template.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Customer-managed encryption key spec for the notebook runtime.
        /// Structure is documented below.
        /// </summary>
        [Input("encryptionSpec")]
        public Input<Inputs.RuntimeTemplateEncryptionSpecArgs>? EncryptionSpec { get; set; }

        /// <summary>
        /// EUC configuration of the NotebookRuntimeTemplate.
        /// Structure is documented below.
        /// </summary>
        [Input("eucConfig")]
        public Input<Inputs.RuntimeTemplateEucConfigArgs>? EucConfig { get; set; }

        /// <summary>
        /// Notebook Idle Shutdown configuration for the runtime.
        /// Structure is documented below.
        /// </summary>
        [Input("idleShutdownConfig")]
        public Input<Inputs.RuntimeTemplateIdleShutdownConfigArgs>? IdleShutdownConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to identify and group the runtime template.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location for the resource: https://cloud.google.com/colab/docs/locations
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// 'The machine configuration of the runtime.'
        /// Structure is documented below.
        /// </summary>
        [Input("machineSpec")]
        public Input<Inputs.RuntimeTemplateMachineSpecArgs>? MachineSpec { get; set; }

        /// <summary>
        /// The resource name of the Runtime Template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network configuration for the runtime.
        /// Structure is documented below.
        /// </summary>
        [Input("networkSpec")]
        public Input<Inputs.RuntimeTemplateNetworkSpecArgs>? NetworkSpec { get; set; }

        [Input("networkTags")]
        private InputList<string>? _networkTags;

        /// <summary>
        /// Applies the given Compute Engine tags to the runtime.
        /// </summary>
        public InputList<string> NetworkTags
        {
            get => _networkTags ?? (_networkTags = new InputList<string>());
            set => _networkTags = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Runtime Shielded VM spec.
        /// Structure is documented below.
        /// </summary>
        [Input("shieldedVmConfig")]
        public Input<Inputs.RuntimeTemplateShieldedVmConfigArgs>? ShieldedVmConfig { get; set; }

        /// <summary>
        /// The notebook software configuration of the notebook runtime.
        /// Structure is documented below.
        /// </summary>
        [Input("softwareConfig")]
        public Input<Inputs.RuntimeTemplateSoftwareConfigArgs>? SoftwareConfig { get; set; }

        public RuntimeTemplateArgs()
        {
        }
        public static new RuntimeTemplateArgs Empty => new RuntimeTemplateArgs();
    }

    public sealed class RuntimeTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration for the data disk of the runtime.
        /// Structure is documented below.
        /// </summary>
        [Input("dataPersistentDiskSpec")]
        public Input<Inputs.RuntimeTemplateDataPersistentDiskSpecGetArgs>? DataPersistentDiskSpec { get; set; }

        /// <summary>
        /// The description of the Runtime Template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Required. The display name of the Runtime Template.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Customer-managed encryption key spec for the notebook runtime.
        /// Structure is documented below.
        /// </summary>
        [Input("encryptionSpec")]
        public Input<Inputs.RuntimeTemplateEncryptionSpecGetArgs>? EncryptionSpec { get; set; }

        /// <summary>
        /// EUC configuration of the NotebookRuntimeTemplate.
        /// Structure is documented below.
        /// </summary>
        [Input("eucConfig")]
        public Input<Inputs.RuntimeTemplateEucConfigGetArgs>? EucConfig { get; set; }

        /// <summary>
        /// Notebook Idle Shutdown configuration for the runtime.
        /// Structure is documented below.
        /// </summary>
        [Input("idleShutdownConfig")]
        public Input<Inputs.RuntimeTemplateIdleShutdownConfigGetArgs>? IdleShutdownConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to identify and group the runtime template.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location for the resource: https://cloud.google.com/colab/docs/locations
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// 'The machine configuration of the runtime.'
        /// Structure is documented below.
        /// </summary>
        [Input("machineSpec")]
        public Input<Inputs.RuntimeTemplateMachineSpecGetArgs>? MachineSpec { get; set; }

        /// <summary>
        /// The resource name of the Runtime Template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network configuration for the runtime.
        /// Structure is documented below.
        /// </summary>
        [Input("networkSpec")]
        public Input<Inputs.RuntimeTemplateNetworkSpecGetArgs>? NetworkSpec { get; set; }

        [Input("networkTags")]
        private InputList<string>? _networkTags;

        /// <summary>
        /// Applies the given Compute Engine tags to the runtime.
        /// </summary>
        public InputList<string> NetworkTags
        {
            get => _networkTags ?? (_networkTags = new InputList<string>());
            set => _networkTags = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Runtime Shielded VM spec.
        /// Structure is documented below.
        /// </summary>
        [Input("shieldedVmConfig")]
        public Input<Inputs.RuntimeTemplateShieldedVmConfigGetArgs>? ShieldedVmConfig { get; set; }

        /// <summary>
        /// The notebook software configuration of the notebook runtime.
        /// Structure is documented below.
        /// </summary>
        [Input("softwareConfig")]
        public Input<Inputs.RuntimeTemplateSoftwareConfigGetArgs>? SoftwareConfig { get; set; }

        public RuntimeTemplateState()
        {
        }
        public static new RuntimeTemplateState Empty => new RuntimeTemplateState();
    }
}
