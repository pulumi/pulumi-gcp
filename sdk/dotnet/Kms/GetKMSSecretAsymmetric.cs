// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Gcp.Kms
{
    public static class GetKMSSecretAsymmetric
    {
        public static Task<GetKMSSecretAsymmetricResult> InvokeAsync(GetKMSSecretAsymmetricArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKMSSecretAsymmetricResult>("gcp:kms/getKMSSecretAsymmetric:getKMSSecretAsymmetric", args ?? new GetKMSSecretAsymmetricArgs(), options.WithVersion());

        public static Output<GetKMSSecretAsymmetricResult> Invoke(GetKMSSecretAsymmetricInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKMSSecretAsymmetricResult>("gcp:kms/getKMSSecretAsymmetric:getKMSSecretAsymmetric", args ?? new GetKMSSecretAsymmetricInvokeArgs(), options.WithVersion());
    }


    public sealed class GetKMSSecretAsymmetricArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ciphertext to be decrypted, encoded in base64
        /// </summary>
        [Input("ciphertext", required: true)]
        public string Ciphertext { get; set; } = null!;

        /// <summary>
        /// The crc32 checksum of the `ciphertext` in hexadecimal notation. If not specified, it will be computed.
        /// </summary>
        [Input("crc32")]
        public string? Crc32 { get; set; }

        /// <summary>
        /// The id of the CryptoKey version that will be used to
        /// decrypt the provided ciphertext. This is represented by the format
        /// `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.
        /// </summary>
        [Input("cryptoKeyVersion", required: true)]
        public string CryptoKeyVersion { get; set; } = null!;

        public GetKMSSecretAsymmetricArgs()
        {
        }
    }

    public sealed class GetKMSSecretAsymmetricInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ciphertext to be decrypted, encoded in base64
        /// </summary>
        [Input("ciphertext", required: true)]
        public Input<string> Ciphertext { get; set; } = null!;

        /// <summary>
        /// The crc32 checksum of the `ciphertext` in hexadecimal notation. If not specified, it will be computed.
        /// </summary>
        [Input("crc32")]
        public Input<string>? Crc32 { get; set; }

        /// <summary>
        /// The id of the CryptoKey version that will be used to
        /// decrypt the provided ciphertext. This is represented by the format
        /// `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.
        /// </summary>
        [Input("cryptoKeyVersion", required: true)]
        public Input<string> CryptoKeyVersion { get; set; } = null!;

        public GetKMSSecretAsymmetricInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKMSSecretAsymmetricResult
    {
        public readonly string Ciphertext;
        /// <summary>
        /// Contains the crc32 checksum of the provided ciphertext.
        /// </summary>
        public readonly string? Crc32;
        public readonly string CryptoKeyVersion;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Contains the result of decrypting the provided ciphertext.
        /// </summary>
        public readonly string Plaintext;

        [OutputConstructor]
        private GetKMSSecretAsymmetricResult(
            string ciphertext,

            string? crc32,

            string cryptoKeyVersion,

            string id,

            string plaintext)
        {
            Ciphertext = ciphertext;
            Crc32 = crc32;
            CryptoKeyVersion = cryptoKeyVersion;
            Id = id;
            Plaintext = plaintext;
        }
    }
}
