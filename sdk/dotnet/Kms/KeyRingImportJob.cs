// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Kms
{
    /// <summary>
    /// A `KeyRingImportJob` can be used to create `CryptoKeys` and `CryptoKeyVersions` using pre-existing
    /// key material, generated outside of Cloud KMS. A `KeyRingImportJob` expires 3 days after it is created.
    /// Once expired, Cloud KMS will no longer be able to import or unwrap any key material that
    /// was wrapped with the `KeyRingImportJob`'s public key.
    /// 
    /// &gt; **Note:** KeyRingImportJobs cannot be deleted from Google Cloud Platform.
    /// Destroying a provider-managed KeyRingImportJob will remove it from state but
    /// *will not delete the resource from the project.*
    /// 
    /// To get more information about KeyRingImportJob, see:
    /// 
    /// * [API documentation](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.importJobs)
    /// * How-to Guides
    ///     * [Importing a key](https://cloud.google.com/kms/docs/importing-a-key)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// KeyRingImportJob can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:kms/keyRingImportJob:KeyRingImportJob default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:kms/keyRingImportJob:KeyRingImportJob")]
    public partial class KeyRingImportJob : Pulumi.CustomResource
    {
        /// <summary>
        /// Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this
        /// statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen
        /// ImportMethod is one with a protection level of HSM.
        /// </summary>
        [Output("attestations")]
        public Output<ImmutableArray<Outputs.KeyRingImportJobAttestation>> Attestations { get; private set; } = null!;

        /// <summary>
        /// The time at which this resource is scheduled for expiration and can no longer be used. This is in RFC3339 text format.
        /// </summary>
        [Output("expireTime")]
        public Output<string> ExpireTime { get; private set; } = null!;

        /// <summary>
        /// It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
        /// </summary>
        [Output("importJobId")]
        public Output<string> ImportJobId { get; private set; } = null!;

        /// <summary>
        /// The wrapping method to be used for incoming key material.
        /// Possible values are `RSA_OAEP_3072_SHA1_AES_256` and `RSA_OAEP_4096_SHA1_AES_256`.
        /// </summary>
        [Output("importMethod")]
        public Output<string> ImportMethod { get; private set; } = null!;

        /// <summary>
        /// The KeyRing that this import job belongs to.
        /// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
        /// </summary>
        [Output("keyRing")]
        public Output<string> KeyRing { get; private set; } = null!;

        /// <summary>
        /// The resource name for this ImportJob in the format projects/*/locations/*/keyRings/*/importJobs/*.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The protection level of the ImportJob. This must match the protectionLevel of the
        /// versionTemplate on the CryptoKey you attempt to import into.
        /// Possible values are `SOFTWARE`, `HSM`, and `EXTERNAL`.
        /// </summary>
        [Output("protectionLevel")]
        public Output<string> ProtectionLevel { get; private set; } = null!;

        /// <summary>
        /// The public key with which to wrap key material prior to import. Only returned if state is 'ACTIVE'.
        /// </summary>
        [Output("publicKeys")]
        public Output<ImmutableArray<Outputs.KeyRingImportJobPublicKey>> PublicKeys { get; private set; } = null!;

        /// <summary>
        /// The current state of the ImportJob, indicating if it can be used.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a KeyRingImportJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeyRingImportJob(string name, KeyRingImportJobArgs args, CustomResourceOptions? options = null)
            : base("gcp:kms/keyRingImportJob:KeyRingImportJob", name, args ?? new KeyRingImportJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KeyRingImportJob(string name, Input<string> id, KeyRingImportJobState? state = null, CustomResourceOptions? options = null)
            : base("gcp:kms/keyRingImportJob:KeyRingImportJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeyRingImportJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeyRingImportJob Get(string name, Input<string> id, KeyRingImportJobState? state = null, CustomResourceOptions? options = null)
        {
            return new KeyRingImportJob(name, id, state, options);
        }
    }

    public sealed class KeyRingImportJobArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
        /// </summary>
        [Input("importJobId", required: true)]
        public Input<string> ImportJobId { get; set; } = null!;

        /// <summary>
        /// The wrapping method to be used for incoming key material.
        /// Possible values are `RSA_OAEP_3072_SHA1_AES_256` and `RSA_OAEP_4096_SHA1_AES_256`.
        /// </summary>
        [Input("importMethod", required: true)]
        public Input<string> ImportMethod { get; set; } = null!;

        /// <summary>
        /// The KeyRing that this import job belongs to.
        /// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
        /// </summary>
        [Input("keyRing", required: true)]
        public Input<string> KeyRing { get; set; } = null!;

        /// <summary>
        /// The protection level of the ImportJob. This must match the protectionLevel of the
        /// versionTemplate on the CryptoKey you attempt to import into.
        /// Possible values are `SOFTWARE`, `HSM`, and `EXTERNAL`.
        /// </summary>
        [Input("protectionLevel", required: true)]
        public Input<string> ProtectionLevel { get; set; } = null!;

        public KeyRingImportJobArgs()
        {
        }
    }

    public sealed class KeyRingImportJobState : Pulumi.ResourceArgs
    {
        [Input("attestations")]
        private InputList<Inputs.KeyRingImportJobAttestationGetArgs>? _attestations;

        /// <summary>
        /// Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this
        /// statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen
        /// ImportMethod is one with a protection level of HSM.
        /// </summary>
        public InputList<Inputs.KeyRingImportJobAttestationGetArgs> Attestations
        {
            get => _attestations ?? (_attestations = new InputList<Inputs.KeyRingImportJobAttestationGetArgs>());
            set => _attestations = value;
        }

        /// <summary>
        /// The time at which this resource is scheduled for expiration and can no longer be used. This is in RFC3339 text format.
        /// </summary>
        [Input("expireTime")]
        public Input<string>? ExpireTime { get; set; }

        /// <summary>
        /// It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
        /// </summary>
        [Input("importJobId")]
        public Input<string>? ImportJobId { get; set; }

        /// <summary>
        /// The wrapping method to be used for incoming key material.
        /// Possible values are `RSA_OAEP_3072_SHA1_AES_256` and `RSA_OAEP_4096_SHA1_AES_256`.
        /// </summary>
        [Input("importMethod")]
        public Input<string>? ImportMethod { get; set; }

        /// <summary>
        /// The KeyRing that this import job belongs to.
        /// Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
        /// </summary>
        [Input("keyRing")]
        public Input<string>? KeyRing { get; set; }

        /// <summary>
        /// The resource name for this ImportJob in the format projects/*/locations/*/keyRings/*/importJobs/*.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The protection level of the ImportJob. This must match the protectionLevel of the
        /// versionTemplate on the CryptoKey you attempt to import into.
        /// Possible values are `SOFTWARE`, `HSM`, and `EXTERNAL`.
        /// </summary>
        [Input("protectionLevel")]
        public Input<string>? ProtectionLevel { get; set; }

        [Input("publicKeys")]
        private InputList<Inputs.KeyRingImportJobPublicKeyGetArgs>? _publicKeys;

        /// <summary>
        /// The public key with which to wrap key material prior to import. Only returned if state is 'ACTIVE'.
        /// </summary>
        public InputList<Inputs.KeyRingImportJobPublicKeyGetArgs> PublicKeys
        {
            get => _publicKeys ?? (_publicKeys = new InputList<Inputs.KeyRingImportJobPublicKeyGetArgs>());
            set => _publicKeys = value;
        }

        /// <summary>
        /// The current state of the ImportJob, indicating if it can be used.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public KeyRingImportJobState()
        {
        }
    }
}
