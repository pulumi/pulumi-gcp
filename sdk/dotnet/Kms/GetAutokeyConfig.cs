// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Kms
{
    public static class GetAutokeyConfig
    {
        /// <summary>
        /// Provides access to Google Cloud Platform KMS AutokeyConfig. A AutokeyConfig is a Cloud KMS resource that helps you safely span the separation of duties to create new Cloud KMS keys for CMEK using Autokey.
        /// 
        /// For more information see
        /// [the official documentation](https://cloud.google.com/kms/docs/reference/rest/v1/folders)
        /// and
        /// [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyHandles).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myAutokeyConfig = Gcp.Kms.GetAutokeyConfig.Invoke(new()
        ///     {
        ///         Folder = "folders/123",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAutokeyConfigResult> InvokeAsync(GetAutokeyConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAutokeyConfigResult>("gcp:kms/getAutokeyConfig:getAutokeyConfig", args ?? new GetAutokeyConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Provides access to Google Cloud Platform KMS AutokeyConfig. A AutokeyConfig is a Cloud KMS resource that helps you safely span the separation of duties to create new Cloud KMS keys for CMEK using Autokey.
        /// 
        /// For more information see
        /// [the official documentation](https://cloud.google.com/kms/docs/reference/rest/v1/folders)
        /// and
        /// [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyHandles).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myAutokeyConfig = Gcp.Kms.GetAutokeyConfig.Invoke(new()
        ///     {
        ///         Folder = "folders/123",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAutokeyConfigResult> Invoke(GetAutokeyConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAutokeyConfigResult>("gcp:kms/getAutokeyConfig:getAutokeyConfig", args ?? new GetAutokeyConfigInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides access to Google Cloud Platform KMS AutokeyConfig. A AutokeyConfig is a Cloud KMS resource that helps you safely span the separation of duties to create new Cloud KMS keys for CMEK using Autokey.
        /// 
        /// For more information see
        /// [the official documentation](https://cloud.google.com/kms/docs/reference/rest/v1/folders)
        /// and
        /// [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyHandles).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myAutokeyConfig = Gcp.Kms.GetAutokeyConfig.Invoke(new()
        ///     {
        ///         Folder = "folders/123",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAutokeyConfigResult> Invoke(GetAutokeyConfigInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAutokeyConfigResult>("gcp:kms/getAutokeyConfig:getAutokeyConfig", args ?? new GetAutokeyConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAutokeyConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The folder in which the AutokeyConfig is configured. If it
        /// is not provided, the provider folder is used.
        /// </summary>
        [Input("folder", required: true)]
        public string Folder { get; set; } = null!;

        public GetAutokeyConfigArgs()
        {
        }
        public static new GetAutokeyConfigArgs Empty => new GetAutokeyConfigArgs();
    }

    public sealed class GetAutokeyConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The folder in which the AutokeyConfig is configured. If it
        /// is not provided, the provider folder is used.
        /// </summary>
        [Input("folder", required: true)]
        public Input<string> Folder { get; set; } = null!;

        public GetAutokeyConfigInvokeArgs()
        {
        }
        public static new GetAutokeyConfigInvokeArgs Empty => new GetAutokeyConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetAutokeyConfigResult
    {
        public readonly string Etag;
        public readonly string Folder;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identifier of the project hosting KMS KeyRings and Keys generated by Autokey. Its format is `projects/{projectId}`.
        /// </summary>
        public readonly string KeyProject;

        [OutputConstructor]
        private GetAutokeyConfigResult(
            string etag,

            string folder,

            string id,

            string keyProject)
        {
            Etag = etag;
            Folder = folder;
            Id = id;
            KeyProject = keyProject;
        }
    }
}
