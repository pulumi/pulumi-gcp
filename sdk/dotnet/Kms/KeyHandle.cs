// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Kms
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Kms Key Handle Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create Folder in GCP Organization
    ///     var autokmsFolder = new Gcp.Organizations.Folder("autokms_folder", new()
    ///     {
    ///         DisplayName = "folder-example",
    ///         Parent = "organizations/123456789",
    ///         DeletionProtection = false,
    ///     });
    /// 
    ///     // Create the key project
    ///     var keyProject = new Gcp.Organizations.Project("key_project", new()
    ///     {
    ///         ProjectId = "key-proj",
    ///         Name = "key-proj",
    ///         FolderId = autokmsFolder.FolderId,
    ///         BillingAccount = "000000-0000000-0000000-000000",
    ///         DeletionPolicy = "DELETE",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             autokmsFolder,
    ///         },
    ///     });
    /// 
    ///     // Create the resource project
    ///     var resourceProject = new Gcp.Organizations.Project("resource_project", new()
    ///     {
    ///         ProjectId = "resources",
    ///         Name = "resources",
    ///         FolderId = autokmsFolder.FolderId,
    ///         BillingAccount = "000000-0000000-0000000-000000",
    ///         DeletionPolicy = "DELETE",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             autokmsFolder,
    ///         },
    ///     });
    /// 
    ///     // Enable the Cloud KMS API
    ///     var kmsApiService = new Gcp.Projects.Service("kms_api_service", new()
    ///     {
    ///         ServiceName = "cloudkms.googleapis.com",
    ///         Project = keyProject.ProjectId,
    ///         DisableOnDestroy = false,
    ///         DisableDependentServices = true,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             keyProject,
    ///         },
    ///     });
    /// 
    ///     // Wait delay after enabling APIs
    ///     var waitEnableServiceApi = new Time.Index.Sleep("wait_enable_service_api", new()
    ///     {
    ///         CreateDuration = "30s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             kmsApiService,
    ///         },
    ///     });
    /// 
    ///     //Create KMS Service Agent
    ///     var kmsServiceAgent = new Gcp.Projects.ServiceIdentity("kms_service_agent", new()
    ///     {
    ///         Service = "cloudkms.googleapis.com",
    ///         Project = keyProject.Number,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             waitEnableServiceApi,
    ///         },
    ///     });
    /// 
    ///     // Wait delay after creating service agent.
    ///     var waitServiceAgent = new Time.Index.Sleep("wait_service_agent", new()
    ///     {
    ///         CreateDuration = "10s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             kmsServiceAgent,
    ///         },
    ///     });
    /// 
    ///     //Grant the KMS Service Agent the Cloud KMS Admin role
    ///     var autokeyProjectAdmin = new Gcp.Projects.IAMMember("autokey_project_admin", new()
    ///     {
    ///         Project = keyProject.ProjectId,
    ///         Role = "roles/cloudkms.admin",
    ///         Member = keyProject.Number.Apply(number =&gt; $"serviceAccount:service-{number}@gcp-sa-cloudkms.iam.gserviceaccount.com"),
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             waitServiceAgent,
    ///         },
    ///     });
    /// 
    ///     // Wait delay after granting IAM permissions
    ///     var waitSrvAccPermissions = new Time.Index.Sleep("wait_srv_acc_permissions", new()
    ///     {
    ///         CreateDuration = "10s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             autokeyProjectAdmin,
    ///         },
    ///     });
    /// 
    ///     var autokeyConfig = new Gcp.Kms.AutokeyConfig("autokey_config", new()
    ///     {
    ///         Folder = autokmsFolder.FolderId,
    ///         KeyProject = keyProject.ProjectId.Apply(projectId =&gt; $"projects/{projectId}"),
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             waitSrvAccPermissions,
    ///         },
    ///     });
    /// 
    ///     // Wait delay for autokey config to take effect
    ///     var waitAutokeyConfig = new Time.Index.Sleep("wait_autokey_config", new()
    ///     {
    ///         CreateDuration = "10s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             autokeyConfig,
    ///         },
    ///     });
    /// 
    ///     var example_keyhandle = new Gcp.Kms.KeyHandle("example-keyhandle", new()
    ///     {
    ///         Project = resourceProject.ProjectId,
    ///         Name = "example-key-handle",
    ///         Location = "global",
    ///         ResourceTypeSelector = "storage.googleapis.com/Bucket",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             waitAutokeyConfig,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// KeyHandle can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/keyHandles/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, KeyHandle can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:kms/keyHandle:KeyHandle default projects/{{project}}/locations/{{location}}/keyHandles/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:kms/keyHandle:KeyHandle default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:kms/keyHandle:KeyHandle default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:kms/keyHandle:KeyHandle")]
    public partial class KeyHandle : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
        /// product/project/location, for example
        /// `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
        /// </summary>
        [Output("kmsKey")]
        public Output<string> KmsKey { get; private set; } = null!;

        /// <summary>
        /// The location for the KeyHandle.
        /// A full list of valid locations can be found by running `gcloud kms locations list`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name for the KeyHandle.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Selector of the resource type where we want to protect resources.
        /// For example, `storage.googleapis.com/Bucket`.
        /// </summary>
        [Output("resourceTypeSelector")]
        public Output<string> ResourceTypeSelector { get; private set; } = null!;


        /// <summary>
        /// Create a KeyHandle resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeyHandle(string name, KeyHandleArgs args, CustomResourceOptions? options = null)
            : base("gcp:kms/keyHandle:KeyHandle", name, args ?? new KeyHandleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KeyHandle(string name, Input<string> id, KeyHandleState? state = null, CustomResourceOptions? options = null)
            : base("gcp:kms/keyHandle:KeyHandle", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeyHandle resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeyHandle Get(string name, Input<string> id, KeyHandleState? state = null, CustomResourceOptions? options = null)
        {
            return new KeyHandle(name, id, state, options);
        }
    }

    public sealed class KeyHandleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The location for the KeyHandle.
        /// A full list of valid locations can be found by running `gcloud kms locations list`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The resource name for the KeyHandle.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Selector of the resource type where we want to protect resources.
        /// For example, `storage.googleapis.com/Bucket`.
        /// </summary>
        [Input("resourceTypeSelector", required: true)]
        public Input<string> ResourceTypeSelector { get; set; } = null!;

        public KeyHandleArgs()
        {
        }
        public static new KeyHandleArgs Empty => new KeyHandleArgs();
    }

    public sealed class KeyHandleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
        /// product/project/location, for example
        /// `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
        /// </summary>
        [Input("kmsKey")]
        public Input<string>? KmsKey { get; set; }

        /// <summary>
        /// The location for the KeyHandle.
        /// A full list of valid locations can be found by running `gcloud kms locations list`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name for the KeyHandle.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Selector of the resource type where we want to protect resources.
        /// For example, `storage.googleapis.com/Bucket`.
        /// </summary>
        [Input("resourceTypeSelector")]
        public Input<string>? ResourceTypeSelector { get; set; }

        public KeyHandleState()
        {
        }
        public static new KeyHandleState Empty => new KeyHandleState();
    }
}
