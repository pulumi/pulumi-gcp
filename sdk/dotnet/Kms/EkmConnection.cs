// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Kms
{
    /// <summary>
    /// `Ekm Connections` are used to control the connection settings for an `EXTERNAL_VPC` CryptoKey.
    /// It is used to connect customer's external key manager to Google Cloud EKM.
    /// 
    /// &gt; **Note:** Ekm Connections cannot be deleted from Google Cloud Platform.
    /// 
    /// To get more information about EkmConnection, see:
    /// 
    /// * [API documentation](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.ekmConnections)
    /// * How-to Guides
    ///     * [Creating a Ekm Connection](https://cloud.google.com/kms/docs/create-ekm-connection)
    /// 
    /// ## Example Usage
    /// 
    /// ### Kms Ekm Connection Basic
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example_ekmconnection = new Gcp.Kms.EkmConnection("example-ekmconnection", new()
    ///     {
    ///         Name = "ekmconnection_example",
    ///         Location = "us-central1",
    ///         KeyManagementMode = "MANUAL",
    ///         ServiceResolvers = new[]
    ///         {
    ///             new Gcp.Kms.Inputs.EkmConnectionServiceResolverArgs
    ///             {
    ///                 ServiceDirectoryService = "projects/project_id/locations/us-central1/namespaces/namespace_name/services/service_name",
    ///                 Hostname = "example-ekm.goog",
    ///                 ServerCertificates = new[]
    ///                 {
    ///                     new Gcp.Kms.Inputs.EkmConnectionServiceResolverServerCertificateArgs
    ///                     {
    ///                         RawDer = "==HAwIBCCAr6gAwIBAgIUWR+EV4lqiV7Ql12VY==",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// EkmConnection can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/ekmConnections/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, EkmConnection can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:kms/ekmConnection:EkmConnection default projects/{{project}}/locations/{{location}}/ekmConnections/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:kms/ekmConnection:EkmConnection default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:kms/ekmConnection:EkmConnection default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:kms/ekmConnection:EkmConnection")]
    public partial class EkmConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Output only. The time at which the EkmConnection was created.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
        /// </summary>
        [Output("cryptoSpacePath")]
        public Output<string> CryptoSpacePath { get; private set; } = null!;

        /// <summary>
        /// Optional. Etag of the currently stored EkmConnection.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
        /// Default value is `MANUAL`.
        /// Possible values are: `MANUAL`, `CLOUD_KMS`.
        /// </summary>
        [Output("keyManagementMode")]
        public Output<string?> KeyManagementMode { get; private set; } = null!;

        /// <summary>
        /// The location for the EkmConnection.
        /// A full list of valid locations can be found by running `gcloud kms locations list`.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name for the EkmConnection.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
        /// Structure is documented below.
        /// </summary>
        [Output("serviceResolvers")]
        public Output<ImmutableArray<Outputs.EkmConnectionServiceResolver>> ServiceResolvers { get; private set; } = null!;


        /// <summary>
        /// Create a EkmConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EkmConnection(string name, EkmConnectionArgs args, CustomResourceOptions? options = null)
            : base("gcp:kms/ekmConnection:EkmConnection", name, args ?? new EkmConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EkmConnection(string name, Input<string> id, EkmConnectionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:kms/ekmConnection:EkmConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EkmConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EkmConnection Get(string name, Input<string> id, EkmConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new EkmConnection(name, id, state, options);
        }
    }

    public sealed class EkmConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
        /// </summary>
        [Input("cryptoSpacePath")]
        public Input<string>? CryptoSpacePath { get; set; }

        /// <summary>
        /// Optional. Etag of the currently stored EkmConnection.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
        /// Default value is `MANUAL`.
        /// Possible values are: `MANUAL`, `CLOUD_KMS`.
        /// </summary>
        [Input("keyManagementMode")]
        public Input<string>? KeyManagementMode { get; set; }

        /// <summary>
        /// The location for the EkmConnection.
        /// A full list of valid locations can be found by running `gcloud kms locations list`.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The resource name for the EkmConnection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("serviceResolvers", required: true)]
        private InputList<Inputs.EkmConnectionServiceResolverArgs>? _serviceResolvers;

        /// <summary>
        /// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.EkmConnectionServiceResolverArgs> ServiceResolvers
        {
            get => _serviceResolvers ?? (_serviceResolvers = new InputList<Inputs.EkmConnectionServiceResolverArgs>());
            set => _serviceResolvers = value;
        }

        public EkmConnectionArgs()
        {
        }
        public static new EkmConnectionArgs Empty => new EkmConnectionArgs();
    }

    public sealed class EkmConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Output only. The time at which the EkmConnection was created.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
        /// </summary>
        [Input("cryptoSpacePath")]
        public Input<string>? CryptoSpacePath { get; set; }

        /// <summary>
        /// Optional. Etag of the currently stored EkmConnection.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
        /// Default value is `MANUAL`.
        /// Possible values are: `MANUAL`, `CLOUD_KMS`.
        /// </summary>
        [Input("keyManagementMode")]
        public Input<string>? KeyManagementMode { get; set; }

        /// <summary>
        /// The location for the EkmConnection.
        /// A full list of valid locations can be found by running `gcloud kms locations list`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name for the EkmConnection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("serviceResolvers")]
        private InputList<Inputs.EkmConnectionServiceResolverGetArgs>? _serviceResolvers;

        /// <summary>
        /// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.EkmConnectionServiceResolverGetArgs> ServiceResolvers
        {
            get => _serviceResolvers ?? (_serviceResolvers = new InputList<Inputs.EkmConnectionServiceResolverGetArgs>());
            set => _serviceResolvers = value;
        }

        public EkmConnectionState()
        {
        }
        public static new EkmConnectionState Empty => new EkmConnectionState();
    }
}
