// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Kms
{
    public static class GetKMSSecretCiphertext
    {
        /// <summary>
        /// !&gt; **Warning:** This data source is deprecated. Use the `gcp.kms.SecretCiphertext` **resource** instead.
        /// 
        /// This data source allows you to encrypt data with Google Cloud KMS and use the
        /// ciphertext within your resource definitions.
        /// 
        /// For more information see
        /// [the official documentation](https://cloud.google.com/kms/docs/encrypt-decrypt).
        /// 
        /// &gt; **NOTE:** Using this data source will allow you to conceal secret data within your
        /// resource definitions, but it does not take care of protecting that data in the
        /// logging output, plan output, or state output.  Please take care to secure your secret
        /// data outside of resource definitions.
        /// 
        /// ## Example Usage
        /// 
        /// First, create a KMS KeyRing and CryptoKey using the resource definitions:
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myKeyRing = new Gcp.Kms.KeyRing("my_key_ring", new()
        ///     {
        ///         Project = "my-project",
        ///         Name = "my-key-ring",
        ///         Location = "us-central1",
        ///     });
        /// 
        ///     var myCryptoKey = new Gcp.Kms.CryptoKey("my_crypto_key", new()
        ///     {
        ///         Name = "my-crypto-key",
        ///         KeyRing = myKeyRing.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// Next, encrypt some sensitive information and use the encrypted data in your resource definitions:
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myPassword = Gcp.Kms.GetKMSSecretCiphertext.Invoke(new()
        ///     {
        ///         CryptoKey = myCryptoKey.Id,
        ///         Plaintext = "my-secret-password",
        ///     });
        /// 
        ///     var instance = new Gcp.Compute.Instance("instance", new()
        ///     {
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
        ///             {
        ///                 AccessConfigs = new[]
        ///                 {
        ///                     null,
        ///                 },
        ///                 Network = "default",
        ///             },
        ///         },
        ///         Name = "test",
        ///         MachineType = "e2-medium",
        ///         Zone = "us-central1-a",
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 Image = "debian-cloud/debian-11",
        ///             },
        ///         },
        ///         Metadata = 
        ///         {
        ///             { "password", myPassword.Apply(getKMSSecretCiphertextResult =&gt; getKMSSecretCiphertextResult.Ciphertext) },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// The resulting instance can then access the encrypted password from its metadata
        /// and decrypt it, e.g. using the [Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/kms/decrypt)):
        /// 
        /// ```bash
        /// $ curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/password \
        /// &gt; | base64 -d | gcloud kms decrypt \
        /// &gt; --project my-project \
        /// &gt; --location us-central1 \
        /// &gt; --keyring my-key-ring \
        /// &gt; --key my-crypto-key \
        /// &gt; --plaintext-file - \
        /// &gt; --ciphertext-file - \
        /// my-secret-password
        /// ```
        /// </summary>
        public static Task<GetKMSSecretCiphertextResult> InvokeAsync(GetKMSSecretCiphertextArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKMSSecretCiphertextResult>("gcp:kms/getKMSSecretCiphertext:getKMSSecretCiphertext", args ?? new GetKMSSecretCiphertextArgs(), options.WithDefaults());

        /// <summary>
        /// !&gt; **Warning:** This data source is deprecated. Use the `gcp.kms.SecretCiphertext` **resource** instead.
        /// 
        /// This data source allows you to encrypt data with Google Cloud KMS and use the
        /// ciphertext within your resource definitions.
        /// 
        /// For more information see
        /// [the official documentation](https://cloud.google.com/kms/docs/encrypt-decrypt).
        /// 
        /// &gt; **NOTE:** Using this data source will allow you to conceal secret data within your
        /// resource definitions, but it does not take care of protecting that data in the
        /// logging output, plan output, or state output.  Please take care to secure your secret
        /// data outside of resource definitions.
        /// 
        /// ## Example Usage
        /// 
        /// First, create a KMS KeyRing and CryptoKey using the resource definitions:
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myKeyRing = new Gcp.Kms.KeyRing("my_key_ring", new()
        ///     {
        ///         Project = "my-project",
        ///         Name = "my-key-ring",
        ///         Location = "us-central1",
        ///     });
        /// 
        ///     var myCryptoKey = new Gcp.Kms.CryptoKey("my_crypto_key", new()
        ///     {
        ///         Name = "my-crypto-key",
        ///         KeyRing = myKeyRing.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// Next, encrypt some sensitive information and use the encrypted data in your resource definitions:
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myPassword = Gcp.Kms.GetKMSSecretCiphertext.Invoke(new()
        ///     {
        ///         CryptoKey = myCryptoKey.Id,
        ///         Plaintext = "my-secret-password",
        ///     });
        /// 
        ///     var instance = new Gcp.Compute.Instance("instance", new()
        ///     {
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
        ///             {
        ///                 AccessConfigs = new[]
        ///                 {
        ///                     null,
        ///                 },
        ///                 Network = "default",
        ///             },
        ///         },
        ///         Name = "test",
        ///         MachineType = "e2-medium",
        ///         Zone = "us-central1-a",
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 Image = "debian-cloud/debian-11",
        ///             },
        ///         },
        ///         Metadata = 
        ///         {
        ///             { "password", myPassword.Apply(getKMSSecretCiphertextResult =&gt; getKMSSecretCiphertextResult.Ciphertext) },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// The resulting instance can then access the encrypted password from its metadata
        /// and decrypt it, e.g. using the [Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/kms/decrypt)):
        /// 
        /// ```bash
        /// $ curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/password \
        /// &gt; | base64 -d | gcloud kms decrypt \
        /// &gt; --project my-project \
        /// &gt; --location us-central1 \
        /// &gt; --keyring my-key-ring \
        /// &gt; --key my-crypto-key \
        /// &gt; --plaintext-file - \
        /// &gt; --ciphertext-file - \
        /// my-secret-password
        /// ```
        /// </summary>
        public static Output<GetKMSSecretCiphertextResult> Invoke(GetKMSSecretCiphertextInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKMSSecretCiphertextResult>("gcp:kms/getKMSSecretCiphertext:getKMSSecretCiphertext", args ?? new GetKMSSecretCiphertextInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKMSSecretCiphertextArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the CryptoKey that will be used to
        /// encrypt the provided plaintext. This is represented by the format
        /// `{projectId}/{location}/{keyRingName}/{cryptoKeyName}`.
        /// </summary>
        [Input("cryptoKey", required: true)]
        public string CryptoKey { get; set; } = null!;

        [Input("plaintext", required: true)]
        private string? _plaintext;

        /// <summary>
        /// The plaintext to be encrypted
        /// </summary>
        public string? Plaintext
        {
            get => _plaintext;
            set => _plaintext = value;
        }

        public GetKMSSecretCiphertextArgs()
        {
        }
        public static new GetKMSSecretCiphertextArgs Empty => new GetKMSSecretCiphertextArgs();
    }

    public sealed class GetKMSSecretCiphertextInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the CryptoKey that will be used to
        /// encrypt the provided plaintext. This is represented by the format
        /// `{projectId}/{location}/{keyRingName}/{cryptoKeyName}`.
        /// </summary>
        [Input("cryptoKey", required: true)]
        public Input<string> CryptoKey { get; set; } = null!;

        [Input("plaintext", required: true)]
        private Input<string>? _plaintext;

        /// <summary>
        /// The plaintext to be encrypted
        /// </summary>
        public Input<string>? Plaintext
        {
            get => _plaintext;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _plaintext = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public GetKMSSecretCiphertextInvokeArgs()
        {
        }
        public static new GetKMSSecretCiphertextInvokeArgs Empty => new GetKMSSecretCiphertextInvokeArgs();
    }


    [OutputType]
    public sealed class GetKMSSecretCiphertextResult
    {
        /// <summary>
        /// Contains the result of encrypting the provided plaintext, encoded in base64.
        /// </summary>
        public readonly string Ciphertext;
        public readonly string CryptoKey;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Plaintext;

        [OutputConstructor]
        private GetKMSSecretCiphertextResult(
            string ciphertext,

            string cryptoKey,

            string id,

            string plaintext)
        {
            Ciphertext = ciphertext;
            CryptoKey = cryptoKey;
            Id = id;
            Plaintext = plaintext;
        }
    }
}
