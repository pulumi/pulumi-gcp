// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Kms
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Kms Project Kaj Policy Config Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a project
    ///     var kmsProject = new Gcp.Organizations.Project("kms_project", new()
    ///     {
    ///         ProjectId = "my-project",
    ///         Name = "my-project",
    ///         OrgId = "123456789",
    ///         BillingAccount = "000000-0000000-0000000-000000",
    ///         DeletionPolicy = "DELETE",
    ///     });
    /// 
    ///     // Enable the Cloud KMS API.
    ///     var kmsApiService = new Gcp.Projects.Service("kms_api_service", new()
    ///     {
    ///         ServiceName = "cloudkms.googleapis.com",
    ///         Project = kmsProject.ProjectId,
    ///         DisableDependentServices = true,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             kmsProject,
    ///         },
    ///     });
    /// 
    ///     var waitEnableServiceApi = new Time.Index.Sleep("wait_enable_service_api", new()
    ///     {
    ///         CreateDuration = "30s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             kmsApiService,
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.Kms.ProjectKajPolicyConfig("example", new()
    ///     {
    ///         Project = kmsProject.ProjectId,
    ///         DefaultKeyAccessJustificationPolicy = new Gcp.Kms.Inputs.ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs
    ///         {
    ///             AllowedAccessReasons = new[]
    ///             {
    ///                 "CUSTOMER_INITIATED_ACCESS",
    ///                 "GOOGLE_INITIATED_SYSTEM_OPERATION",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             waitEnableServiceApi,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ProjectKajPolicyConfig can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/kajPolicyConfig`
    /// 
    /// * `{{project}}`
    /// 
    /// When using the `pulumi import` command, ProjectKajPolicyConfig can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:kms/projectKajPolicyConfig:ProjectKajPolicyConfig default projects/{{project}}/kajPolicyConfig
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:kms/projectKajPolicyConfig:ProjectKajPolicyConfig default {{project}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:kms/projectKajPolicyConfig:ProjectKajPolicyConfig")]
    public partial class ProjectKajPolicyConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The default key access justification policy used when a CryptoKey is
        /// created in this project. This is only used when a Key Access Justifications
        /// policy is not provided in the CreateCryptoKeyRequest.
        /// Structure is documented below.
        /// </summary>
        [Output("defaultKeyAccessJustificationPolicy")]
        public Output<Outputs.ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicy?> DefaultKeyAccessJustificationPolicy { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectKajPolicyConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectKajPolicyConfig(string name, ProjectKajPolicyConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:kms/projectKajPolicyConfig:ProjectKajPolicyConfig", name, args ?? new ProjectKajPolicyConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectKajPolicyConfig(string name, Input<string> id, ProjectKajPolicyConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:kms/projectKajPolicyConfig:ProjectKajPolicyConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectKajPolicyConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectKajPolicyConfig Get(string name, Input<string> id, ProjectKajPolicyConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectKajPolicyConfig(name, id, state, options);
        }
    }

    public sealed class ProjectKajPolicyConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default key access justification policy used when a CryptoKey is
        /// created in this project. This is only used when a Key Access Justifications
        /// policy is not provided in the CreateCryptoKeyRequest.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultKeyAccessJustificationPolicy")]
        public Input<Inputs.ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs>? DefaultKeyAccessJustificationPolicy { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public ProjectKajPolicyConfigArgs()
        {
        }
        public static new ProjectKajPolicyConfigArgs Empty => new ProjectKajPolicyConfigArgs();
    }

    public sealed class ProjectKajPolicyConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default key access justification policy used when a CryptoKey is
        /// created in this project. This is only used when a Key Access Justifications
        /// policy is not provided in the CreateCryptoKeyRequest.
        /// Structure is documented below.
        /// </summary>
        [Input("defaultKeyAccessJustificationPolicy")]
        public Input<Inputs.ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyGetArgs>? DefaultKeyAccessJustificationPolicy { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public ProjectKajPolicyConfigState()
        {
        }
        public static new ProjectKajPolicyConfigState Empty => new ProjectKajPolicyConfigState();
    }
}
