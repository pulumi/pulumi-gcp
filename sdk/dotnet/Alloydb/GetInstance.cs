// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Alloydb
{
    public static class GetInstance
    {
        /// <summary>
        /// Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters.instances).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var qa = Gcp.Alloydb.GetInstance.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("gcp:alloydb/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters.instances).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var qa = Gcp.Alloydb.GetInstance.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("gcp:alloydb/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters.instances).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var qa = Gcp.Alloydb.GetInstance.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("gcp:alloydb/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the alloydb cluster that the instance belongs to.
        /// 'alloydb_cluster_id'
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// The ID of the alloydb instance.
        /// 'alloydb_instance_id'
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// (optional)
        /// The canonical id of the location.If it is not provided, the provider project is used. For example: us-east1.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// (optional)
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the alloydb cluster that the instance belongs to.
        /// 'alloydb_cluster_id'
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The ID of the alloydb instance.
        /// 'alloydb_instance_id'
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// (optional)
        /// The canonical id of the location.If it is not provided, the provider project is used. For example: us-east1.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// (optional)
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        public readonly ImmutableDictionary<string, string> Annotations;
        public readonly string AvailabilityType;
        public readonly ImmutableArray<Outputs.GetInstanceClientConnectionConfigResult> ClientConnectionConfigs;
        public readonly string Cluster;
        public readonly string ClusterId;
        public readonly string CreateTime;
        public readonly ImmutableDictionary<string, string> DatabaseFlags;
        public readonly string DisplayName;
        public readonly ImmutableDictionary<string, string> EffectiveAnnotations;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly string GceZone;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string InstanceType;
        public readonly string IpAddress;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string? Location;
        public readonly ImmutableArray<Outputs.GetInstanceMachineConfigResult> MachineConfigs;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetInstanceNetworkConfigResult> NetworkConfigs;
        public readonly ImmutableArray<Outputs.GetInstanceObservabilityConfigResult> ObservabilityConfigs;
        public readonly ImmutableArray<string> OutboundPublicIpAddresses;
        public readonly string? Project;
        public readonly ImmutableArray<Outputs.GetInstancePscInstanceConfigResult> PscInstanceConfigs;
        public readonly string PublicIpAddress;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly ImmutableArray<Outputs.GetInstanceQueryInsightsConfigResult> QueryInsightsConfigs;
        public readonly ImmutableArray<Outputs.GetInstanceReadPoolConfigResult> ReadPoolConfigs;
        public readonly bool Reconciling;
        public readonly string State;
        public readonly string Uid;
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetInstanceResult(
            ImmutableDictionary<string, string> annotations,

            string availabilityType,

            ImmutableArray<Outputs.GetInstanceClientConnectionConfigResult> clientConnectionConfigs,

            string cluster,

            string clusterId,

            string createTime,

            ImmutableDictionary<string, string> databaseFlags,

            string displayName,

            ImmutableDictionary<string, string> effectiveAnnotations,

            ImmutableDictionary<string, string> effectiveLabels,

            string gceZone,

            string id,

            string instanceId,

            string instanceType,

            string ipAddress,

            ImmutableDictionary<string, string> labels,

            string? location,

            ImmutableArray<Outputs.GetInstanceMachineConfigResult> machineConfigs,

            string name,

            ImmutableArray<Outputs.GetInstanceNetworkConfigResult> networkConfigs,

            ImmutableArray<Outputs.GetInstanceObservabilityConfigResult> observabilityConfigs,

            ImmutableArray<string> outboundPublicIpAddresses,

            string? project,

            ImmutableArray<Outputs.GetInstancePscInstanceConfigResult> pscInstanceConfigs,

            string publicIpAddress,

            ImmutableDictionary<string, string> pulumiLabels,

            ImmutableArray<Outputs.GetInstanceQueryInsightsConfigResult> queryInsightsConfigs,

            ImmutableArray<Outputs.GetInstanceReadPoolConfigResult> readPoolConfigs,

            bool reconciling,

            string state,

            string uid,

            string updateTime)
        {
            Annotations = annotations;
            AvailabilityType = availabilityType;
            ClientConnectionConfigs = clientConnectionConfigs;
            Cluster = cluster;
            ClusterId = clusterId;
            CreateTime = createTime;
            DatabaseFlags = databaseFlags;
            DisplayName = displayName;
            EffectiveAnnotations = effectiveAnnotations;
            EffectiveLabels = effectiveLabels;
            GceZone = gceZone;
            Id = id;
            InstanceId = instanceId;
            InstanceType = instanceType;
            IpAddress = ipAddress;
            Labels = labels;
            Location = location;
            MachineConfigs = machineConfigs;
            Name = name;
            NetworkConfigs = networkConfigs;
            ObservabilityConfigs = observabilityConfigs;
            OutboundPublicIpAddresses = outboundPublicIpAddresses;
            Project = project;
            PscInstanceConfigs = pscInstanceConfigs;
            PublicIpAddress = publicIpAddress;
            PulumiLabels = pulumiLabels;
            QueryInsightsConfigs = queryInsightsConfigs;
            ReadPoolConfigs = readPoolConfigs;
            Reconciling = reconciling;
            State = state;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
