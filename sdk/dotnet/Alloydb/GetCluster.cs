// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Alloydb
{
    public static class GetCluster
    {
        /// <summary>
        /// Use this data source to get information about the available cluster. For more details refer the [API docs](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var qa = Gcp.Alloydb.GetCluster.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("gcp:alloydb/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about the available cluster. For more details refer the [API docs](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var qa = Gcp.Alloydb.GetCluster.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("gcp:alloydb/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about the available cluster. For more details refer the [API docs](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var qa = Gcp.Alloydb.GetCluster.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("gcp:alloydb/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the alloydb cluster that the instance belongs to.
        /// 'alloydb_cluster_id'
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// (optional)
        /// The canonical id of the location.If it is not provided, the provider project is used. For example: us-east1.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// (optional)
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the alloydb cluster that the instance belongs to.
        /// 'alloydb_cluster_id'
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// (optional)
        /// The canonical id of the location.If it is not provided, the provider project is used. For example: us-east1.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// (optional)
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        public readonly ImmutableDictionary<string, string> Annotations;
        public readonly ImmutableArray<Outputs.GetClusterAutomatedBackupPolicyResult> AutomatedBackupPolicies;
        public readonly ImmutableArray<Outputs.GetClusterBackupSourceResult> BackupSources;
        public readonly string ClusterId;
        public readonly string ClusterType;
        public readonly ImmutableArray<Outputs.GetClusterContinuousBackupConfigResult> ContinuousBackupConfigs;
        public readonly ImmutableArray<Outputs.GetClusterContinuousBackupInfoResult> ContinuousBackupInfos;
        public readonly string DatabaseVersion;
        public readonly string DeletionPolicy;
        public readonly string DisplayName;
        public readonly ImmutableDictionary<string, string> EffectiveAnnotations;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly ImmutableArray<Outputs.GetClusterEncryptionConfigResult> EncryptionConfigs;
        public readonly ImmutableArray<Outputs.GetClusterEncryptionInfoResult> EncryptionInfos;
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetClusterInitialUserResult> InitialUsers;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string? Location;
        public readonly ImmutableArray<Outputs.GetClusterMaintenanceUpdatePolicyResult> MaintenanceUpdatePolicies;
        public readonly ImmutableArray<Outputs.GetClusterMigrationSourceResult> MigrationSources;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetClusterNetworkConfigResult> NetworkConfigs;
        public readonly string? Project;
        public readonly ImmutableArray<Outputs.GetClusterPscConfigResult> PscConfigs;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly bool Reconciling;
        public readonly ImmutableArray<Outputs.GetClusterRestoreBackupSourceResult> RestoreBackupSources;
        public readonly ImmutableArray<Outputs.GetClusterRestoreContinuousBackupSourceResult> RestoreContinuousBackupSources;
        public readonly ImmutableArray<Outputs.GetClusterSecondaryConfigResult> SecondaryConfigs;
        public readonly bool SkipAwaitMajorVersionUpgrade;
        public readonly string State;
        public readonly string SubscriptionType;
        public readonly ImmutableArray<Outputs.GetClusterTrialMetadataResult> TrialMetadatas;
        public readonly string Uid;

        [OutputConstructor]
        private GetClusterResult(
            ImmutableDictionary<string, string> annotations,

            ImmutableArray<Outputs.GetClusterAutomatedBackupPolicyResult> automatedBackupPolicies,

            ImmutableArray<Outputs.GetClusterBackupSourceResult> backupSources,

            string clusterId,

            string clusterType,

            ImmutableArray<Outputs.GetClusterContinuousBackupConfigResult> continuousBackupConfigs,

            ImmutableArray<Outputs.GetClusterContinuousBackupInfoResult> continuousBackupInfos,

            string databaseVersion,

            string deletionPolicy,

            string displayName,

            ImmutableDictionary<string, string> effectiveAnnotations,

            ImmutableDictionary<string, string> effectiveLabels,

            ImmutableArray<Outputs.GetClusterEncryptionConfigResult> encryptionConfigs,

            ImmutableArray<Outputs.GetClusterEncryptionInfoResult> encryptionInfos,

            string etag,

            string id,

            ImmutableArray<Outputs.GetClusterInitialUserResult> initialUsers,

            ImmutableDictionary<string, string> labels,

            string? location,

            ImmutableArray<Outputs.GetClusterMaintenanceUpdatePolicyResult> maintenanceUpdatePolicies,

            ImmutableArray<Outputs.GetClusterMigrationSourceResult> migrationSources,

            string name,

            ImmutableArray<Outputs.GetClusterNetworkConfigResult> networkConfigs,

            string? project,

            ImmutableArray<Outputs.GetClusterPscConfigResult> pscConfigs,

            ImmutableDictionary<string, string> pulumiLabels,

            bool reconciling,

            ImmutableArray<Outputs.GetClusterRestoreBackupSourceResult> restoreBackupSources,

            ImmutableArray<Outputs.GetClusterRestoreContinuousBackupSourceResult> restoreContinuousBackupSources,

            ImmutableArray<Outputs.GetClusterSecondaryConfigResult> secondaryConfigs,

            bool skipAwaitMajorVersionUpgrade,

            string state,

            string subscriptionType,

            ImmutableArray<Outputs.GetClusterTrialMetadataResult> trialMetadatas,

            string uid)
        {
            Annotations = annotations;
            AutomatedBackupPolicies = automatedBackupPolicies;
            BackupSources = backupSources;
            ClusterId = clusterId;
            ClusterType = clusterType;
            ContinuousBackupConfigs = continuousBackupConfigs;
            ContinuousBackupInfos = continuousBackupInfos;
            DatabaseVersion = databaseVersion;
            DeletionPolicy = deletionPolicy;
            DisplayName = displayName;
            EffectiveAnnotations = effectiveAnnotations;
            EffectiveLabels = effectiveLabels;
            EncryptionConfigs = encryptionConfigs;
            EncryptionInfos = encryptionInfos;
            Etag = etag;
            Id = id;
            InitialUsers = initialUsers;
            Labels = labels;
            Location = location;
            MaintenanceUpdatePolicies = maintenanceUpdatePolicies;
            MigrationSources = migrationSources;
            Name = name;
            NetworkConfigs = networkConfigs;
            Project = project;
            PscConfigs = pscConfigs;
            PulumiLabels = pulumiLabels;
            Reconciling = reconciling;
            RestoreBackupSources = restoreBackupSources;
            RestoreContinuousBackupSources = restoreContinuousBackupSources;
            SecondaryConfigs = secondaryConfigs;
            SkipAwaitMajorVersionUpgrade = skipAwaitMajorVersionUpgrade;
            State = state;
            SubscriptionType = subscriptionType;
            TrialMetadatas = trialMetadatas;
            Uid = uid;
        }
    }
}
