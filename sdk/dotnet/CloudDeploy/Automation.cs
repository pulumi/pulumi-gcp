// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudDeploy
{
    /// <summary>
    /// An `Automation` enables the automation of manually driven actions for a Delivery Pipeline, which includes Release promotion amongst Targets, Rollout repair and Rollout deployment strategy advancement.
    /// 
    /// To get more information about Automation, see:
    /// 
    /// * [API documentation](https://cloud.google.com/deploy/docs/api/reference/rest/v1/projects.locations.deliveryPipelines.automations)
    /// * How-to Guides
    ///   * [Automate your deployment](https://cloud.google.com/deploy/docs/automation)
    /// 
    /// ## Example Usage
    /// 
    /// ### Clouddeploy Automation Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pipeline = new Gcp.CloudDeploy.DeliveryPipeline("pipeline", new()
    ///     {
    ///         Name = "cd-pipeline",
    ///         Location = "us-central1",
    ///         SerialPipeline = new Gcp.CloudDeploy.Inputs.DeliveryPipelineSerialPipelineArgs
    ///         {
    ///             Stages = new[]
    ///             {
    ///                 new Gcp.CloudDeploy.Inputs.DeliveryPipelineSerialPipelineStageArgs
    ///                 {
    ///                     TargetId = "test",
    ///                     Profiles = new() { },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var b_automation = new Gcp.CloudDeploy.Automation("b-automation", new()
    ///     {
    ///         Name = "cd-automation",
    ///         Project = pipeline.Project,
    ///         Location = pipeline.Location,
    ///         DeliveryPipeline = pipeline.Name,
    ///         ServiceAccount = "my@service-account.com",
    ///         Selector = new Gcp.CloudDeploy.Inputs.AutomationSelectorArgs
    ///         {
    ///             Targets = new[]
    ///             {
    ///                 new Gcp.CloudDeploy.Inputs.AutomationSelectorTargetArgs
    ///                 {
    ///                     Id = "*",
    ///                 },
    ///             },
    ///         },
    ///         Suspended = false,
    ///         Rules = new[]
    ///         {
    ///             new Gcp.CloudDeploy.Inputs.AutomationRuleArgs
    ///             {
    ///                 PromoteReleaseRule = new Gcp.CloudDeploy.Inputs.AutomationRulePromoteReleaseRuleArgs
    ///                 {
    ///                     Id = "promote-release",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Clouddeploy Automation Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pipeline = new Gcp.CloudDeploy.DeliveryPipeline("pipeline", new()
    ///     {
    ///         Name = "cd-pipeline",
    ///         Location = "us-central1",
    ///         SerialPipeline = new Gcp.CloudDeploy.Inputs.DeliveryPipelineSerialPipelineArgs
    ///         {
    ///             Stages = new[]
    ///             {
    ///                 new Gcp.CloudDeploy.Inputs.DeliveryPipelineSerialPipelineStageArgs
    ///                 {
    ///                     TargetId = "test",
    ///                     Profiles = new[]
    ///                     {
    ///                         "test-profile",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var f_automation = new Gcp.CloudDeploy.Automation("f-automation", new()
    ///     {
    ///         Name = "cd-automation",
    ///         Location = "us-central1",
    ///         DeliveryPipeline = pipeline.Name,
    ///         ServiceAccount = "my@service-account.com",
    ///         Annotations = 
    ///         {
    ///             { "my_first_annotation", "example-annotation-1" },
    ///             { "my_second_annotation", "example-annotation-2" },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "my_first_label", "example-label-1" },
    ///             { "my_second_label", "example-label-2" },
    ///         },
    ///         Description = "automation resource",
    ///         Selector = new Gcp.CloudDeploy.Inputs.AutomationSelectorArgs
    ///         {
    ///             Targets = new[]
    ///             {
    ///                 new Gcp.CloudDeploy.Inputs.AutomationSelectorTargetArgs
    ///                 {
    ///                     Id = "test",
    ///                     Labels = 
    ///                     {
    ///                         { "foo", "bar" },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Suspended = true,
    ///         Rules = new[]
    ///         {
    ///             new Gcp.CloudDeploy.Inputs.AutomationRuleArgs
    ///             {
    ///                 PromoteReleaseRule = new Gcp.CloudDeploy.Inputs.AutomationRulePromoteReleaseRuleArgs
    ///                 {
    ///                     Id = "promote-release",
    ///                     Wait = "200s",
    ///                     DestinationTargetId = "@next",
    ///                     DestinationPhase = "stable",
    ///                 },
    ///             },
    ///             new Gcp.CloudDeploy.Inputs.AutomationRuleArgs
    ///             {
    ///                 AdvanceRolloutRule = new Gcp.CloudDeploy.Inputs.AutomationRuleAdvanceRolloutRuleArgs
    ///                 {
    ///                     Id = "advance-rollout",
    ///                     SourcePhases = new[]
    ///                     {
    ///                         "deploy",
    ///                     },
    ///                     Wait = "200s",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Automation can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/deliveryPipelines/{{delivery_pipeline}}/automations/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{delivery_pipeline}}/{{name}}`
    /// 
    /// * `{{location}}/{{delivery_pipeline}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, Automation can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:clouddeploy/automation:Automation default projects/{{project}}/locations/{{location}}/deliveryPipelines/{{delivery_pipeline}}/automations/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:clouddeploy/automation:Automation default {{project}}/{{location}}/{{delivery_pipeline}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:clouddeploy/automation:Automation default {{location}}/{{delivery_pipeline}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:clouddeploy/automation:Automation")]
    public partial class Automation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
        /// must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
        /// optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
        /// beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
        /// and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
        /// labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
        /// details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Output only. Time at which the automation was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The delivery_pipeline for the resource
        /// </summary>
        [Output("deliveryPipeline")]
        public Output<string> DeliveryPipeline { get; private set; } = null!;

        /// <summary>
        /// Optional. Description of the 'Automation'. Max length is 255 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Optional. The weak etag of the `Automation` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
        /// following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
        /// dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
        /// lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
        /// are additionally constrained to be &lt;= 63 characters. **Note**: This field is non-authoritative, and will only manage the
        /// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
        /// resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location for the resource
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Name of the `Automation`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Required. List of Automation rules associated with the Automation resource. Must have at least one rule and limited to 250 rules per Delivery Pipeline. Note: the order of the rules here is not the same as the order of execution.
        /// Structure is documented below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.AutomationRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Required. Selected resources to which the automation will be applied.
        /// Structure is documented below.
        /// </summary>
        [Output("selector")]
        public Output<Outputs.AutomationSelector> Selector { get; private set; } = null!;

        /// <summary>
        /// Required. Email address of the user-managed IAM service account that creates Cloud Deploy release and rollout resources.
        /// </summary>
        [Output("serviceAccount")]
        public Output<string> ServiceAccount { get; private set; } = null!;

        /// <summary>
        /// Optional. When Suspended, automation is deactivated from execution.
        /// </summary>
        [Output("suspended")]
        public Output<bool?> Suspended { get; private set; } = null!;

        /// <summary>
        /// Output only. Unique identifier of the `Automation`.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Output only. Time at which the automation was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Automation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Automation(string name, AutomationArgs args, CustomResourceOptions? options = null)
            : base("gcp:clouddeploy/automation:Automation", name, args ?? new AutomationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Automation(string name, Input<string> id, AutomationState? state = null, CustomResourceOptions? options = null)
            : base("gcp:clouddeploy/automation:Automation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Automation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Automation Get(string name, Input<string> id, AutomationState? state = null, CustomResourceOptions? options = null)
        {
            return new Automation(name, id, state, options);
        }
    }

    public sealed class AutomationArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
        /// must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
        /// optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
        /// beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
        /// and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
        /// labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
        /// details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The delivery_pipeline for the resource
        /// </summary>
        [Input("deliveryPipeline", required: true)]
        public Input<string> DeliveryPipeline { get; set; } = null!;

        /// <summary>
        /// Optional. Description of the 'Automation'. Max length is 255 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
        /// following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
        /// dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
        /// lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
        /// are additionally constrained to be &lt;= 63 characters. **Note**: This field is non-authoritative, and will only manage the
        /// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
        /// resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location for the resource
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Name of the `Automation`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("rules", required: true)]
        private InputList<Inputs.AutomationRuleArgs>? _rules;

        /// <summary>
        /// Required. List of Automation rules associated with the Automation resource. Must have at least one rule and limited to 250 rules per Delivery Pipeline. Note: the order of the rules here is not the same as the order of execution.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AutomationRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.AutomationRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Required. Selected resources to which the automation will be applied.
        /// Structure is documented below.
        /// </summary>
        [Input("selector", required: true)]
        public Input<Inputs.AutomationSelectorArgs> Selector { get; set; } = null!;

        /// <summary>
        /// Required. Email address of the user-managed IAM service account that creates Cloud Deploy release and rollout resources.
        /// </summary>
        [Input("serviceAccount", required: true)]
        public Input<string> ServiceAccount { get; set; } = null!;

        /// <summary>
        /// Optional. When Suspended, automation is deactivated from execution.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        public AutomationArgs()
        {
        }
        public static new AutomationArgs Empty => new AutomationArgs();
    }

    public sealed class AutomationState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
        /// must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
        /// optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
        /// beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
        /// and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
        /// labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
        /// details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Output only. Time at which the automation was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The delivery_pipeline for the resource
        /// </summary>
        [Input("deliveryPipeline")]
        public Input<string>? DeliveryPipeline { get; set; }

        /// <summary>
        /// Optional. Description of the 'Automation'. Max length is 255 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Optional. The weak etag of the `Automation` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
        /// following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
        /// dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
        /// lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
        /// are additionally constrained to be &lt;= 63 characters. **Note**: This field is non-authoritative, and will only manage the
        /// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
        /// resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location for the resource
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the `Automation`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("rules")]
        private InputList<Inputs.AutomationRuleGetArgs>? _rules;

        /// <summary>
        /// Required. List of Automation rules associated with the Automation resource. Must have at least one rule and limited to 250 rules per Delivery Pipeline. Note: the order of the rules here is not the same as the order of execution.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AutomationRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.AutomationRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Required. Selected resources to which the automation will be applied.
        /// Structure is documented below.
        /// </summary>
        [Input("selector")]
        public Input<Inputs.AutomationSelectorGetArgs>? Selector { get; set; }

        /// <summary>
        /// Required. Email address of the user-managed IAM service account that creates Cloud Deploy release and rollout resources.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// Optional. When Suspended, automation is deactivated from execution.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        /// <summary>
        /// Output only. Unique identifier of the `Automation`.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Output only. Time at which the automation was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public AutomationState()
        {
        }
        public static new AutomationState Empty => new AutomationState();
    }
}
