// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudDeploy
{
    /// <summary>
    /// A Cloud Deploy `CustomTargetType` defines a type of custom target that can be referenced in a
    /// Cloud Deploy `Target` in order to facilitate deploying to other systems besides the supported runtimes.
    /// 
    /// To get more information about CustomTargetType, see:
    /// 
    /// * [API documentation](https://cloud.google.com/deploy/docs/api/reference/rest/v1/projects.locations.customTargetTypes)
    /// * How-to Guides
    ///     * [Define and use a custom target type](https://cloud.google.com/deploy/docs/deploy-app-custom-target)
    /// 
    /// ## Example Usage
    /// 
    /// ### Clouddeploy Custom Target Type Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var custom_target_type = new Gcp.CloudDeploy.CustomTargetType("custom-target-type", new()
    ///     {
    ///         Location = "us-central1",
    ///         Name = "my-custom-target-type",
    ///         Description = "My custom target type",
    ///         Annotations = 
    ///         {
    ///             { "my_first_annotation", "example-annotation-1" },
    ///             { "my_second_annotation", "example-annotation-2" },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "my_first_label", "example-label-1" },
    ///             { "my_second_label", "example-label-2" },
    ///         },
    ///         CustomActions = new Gcp.CloudDeploy.Inputs.CustomTargetTypeCustomActionsArgs
    ///         {
    ///             RenderAction = "renderAction",
    ///             DeployAction = "deployAction",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Clouddeploy Custom Target Type Git Skaffold Modules
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var custom_target_type = new Gcp.CloudDeploy.CustomTargetType("custom-target-type", new()
    ///     {
    ///         Location = "us-central1",
    ///         Name = "my-custom-target-type",
    ///         Description = "My custom target type",
    ///         CustomActions = new Gcp.CloudDeploy.Inputs.CustomTargetTypeCustomActionsArgs
    ///         {
    ///             RenderAction = "renderAction",
    ///             DeployAction = "deployAction",
    ///             IncludeSkaffoldModules = new[]
    ///             {
    ///                 new Gcp.CloudDeploy.Inputs.CustomTargetTypeCustomActionsIncludeSkaffoldModuleArgs
    ///                 {
    ///                     Configs = new[]
    ///                     {
    ///                         "my-config",
    ///                     },
    ///                     Git = new Gcp.CloudDeploy.Inputs.CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs
    ///                     {
    ///                         Repo = "http://github.com/example/example-repo.git",
    ///                         Path = "configs/skaffold.yaml",
    ///                         Ref = "main",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Clouddeploy Custom Target Type Gcs Skaffold Modules
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var custom_target_type = new Gcp.CloudDeploy.CustomTargetType("custom-target-type", new()
    ///     {
    ///         Location = "us-central1",
    ///         Name = "my-custom-target-type",
    ///         Description = "My custom target type",
    ///         CustomActions = new Gcp.CloudDeploy.Inputs.CustomTargetTypeCustomActionsArgs
    ///         {
    ///             RenderAction = "renderAction",
    ///             DeployAction = "deployAction",
    ///             IncludeSkaffoldModules = new[]
    ///             {
    ///                 new Gcp.CloudDeploy.Inputs.CustomTargetTypeCustomActionsIncludeSkaffoldModuleArgs
    ///                 {
    ///                     Configs = new[]
    ///                     {
    ///                         "my-config",
    ///                     },
    ///                     GoogleCloudStorage = new Gcp.CloudDeploy.Inputs.CustomTargetTypeCustomActionsIncludeSkaffoldModuleGoogleCloudStorageArgs
    ///                     {
    ///                         Source = "gs://example-bucket/dir/configs/*",
    ///                         Path = "skaffold.yaml",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// CustomTargetType can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/customTargetTypes/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, CustomTargetType can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:clouddeploy/customTargetType:CustomTargetType default projects/{{project}}/locations/{{location}}/customTargetTypes/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:clouddeploy/customTargetType:CustomTargetType default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:clouddeploy/customTargetType:CustomTargetType default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:clouddeploy/customTargetType:CustomTargetType")]
    public partial class CustomTargetType : global::Pulumi.CustomResource
    {
        /// <summary>
        /// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Time at which the `CustomTargetType` was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Configures render and deploy for the `CustomTargetType` using Skaffold custom actions.
        /// Structure is documented below.
        /// </summary>
        [Output("customActions")]
        public Output<Outputs.CustomTargetTypeCustomActions?> CustomActions { get; private set; } = null!;

        /// <summary>
        /// Resource id of the `CustomTargetType`.
        /// </summary>
        [Output("customTargetTypeId")]
        public Output<string> CustomTargetTypeId { get; private set; } = null!;

        /// <summary>
        /// Description of the `CustomTargetType`. Max length is 255 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The weak etag of the `CustomTargetType` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;= 128 bytes.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location of the source.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Name of the `CustomTargetType`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the `CustomTargetType`.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Time at which the `CustomTargetType` was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a CustomTargetType resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomTargetType(string name, CustomTargetTypeArgs args, CustomResourceOptions? options = null)
            : base("gcp:clouddeploy/customTargetType:CustomTargetType", name, args ?? new CustomTargetTypeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomTargetType(string name, Input<string> id, CustomTargetTypeState? state = null, CustomResourceOptions? options = null)
            : base("gcp:clouddeploy/customTargetType:CustomTargetType", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomTargetType resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomTargetType Get(string name, Input<string> id, CustomTargetTypeState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomTargetType(name, id, state, options);
        }
    }

    public sealed class CustomTargetTypeArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Configures render and deploy for the `CustomTargetType` using Skaffold custom actions.
        /// Structure is documented below.
        /// </summary>
        [Input("customActions")]
        public Input<Inputs.CustomTargetTypeCustomActionsArgs>? CustomActions { get; set; }

        /// <summary>
        /// Description of the `CustomTargetType`. Max length is 255 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;= 128 bytes.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the source.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Name of the `CustomTargetType`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public CustomTargetTypeArgs()
        {
        }
        public static new CustomTargetTypeArgs Empty => new CustomTargetTypeArgs();
    }

    public sealed class CustomTargetTypeState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Time at which the `CustomTargetType` was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Configures render and deploy for the `CustomTargetType` using Skaffold custom actions.
        /// Structure is documented below.
        /// </summary>
        [Input("customActions")]
        public Input<Inputs.CustomTargetTypeCustomActionsGetArgs>? CustomActions { get; set; }

        /// <summary>
        /// Resource id of the `CustomTargetType`.
        /// </summary>
        [Input("customTargetTypeId")]
        public Input<string>? CustomTargetTypeId { get; set; }

        /// <summary>
        /// Description of the `CustomTargetType`. Max length is 255 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The weak etag of the `CustomTargetType` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;= 128 bytes.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the source.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the `CustomTargetType`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Unique identifier of the `CustomTargetType`.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Time at which the `CustomTargetType` was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public CustomTargetTypeState()
        {
        }
        public static new CustomTargetTypeState Empty => new CustomTargetTypeState();
    }
}
