// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudDeploy
{
    /// <summary>
    /// A `DeployPolicy` inhibits manual or DeployPolicy-driven actions within a Delivery Pipeline or Target.
    /// 
    /// To get more information about DeployPolicy, see:
    /// 
    /// * [API documentation](https://cloud.google.com/deploy/docs/api/reference/rest/v1/projects.locations.deployPolicies)
    /// * How-to Guides
    ///     * [Restrict deploy behavior using policies](https://cloud.google.com/deploy/docs/deploy-policy)
    /// 
    /// ## Example Usage
    /// 
    /// ### Clouddeploy Deploy Policy Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var b_deploy_policy = new Gcp.CloudDeploy.DeployPolicy("b-deploy-policy", new()
    ///     {
    ///         Name = "cd-policy",
    ///         Location = "us-central1",
    ///         Selectors = new[]
    ///         {
    ///             new Gcp.CloudDeploy.Inputs.DeployPolicySelectorArgs
    ///             {
    ///                 DeliveryPipeline = new Gcp.CloudDeploy.Inputs.DeployPolicySelectorDeliveryPipelineArgs
    ///                 {
    ///                     Id = "cd-pipeline",
    ///                 },
    ///             },
    ///         },
    ///         Rules = new[]
    ///         {
    ///             new Gcp.CloudDeploy.Inputs.DeployPolicyRuleArgs
    ///             {
    ///                 RolloutRestriction = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionArgs
    ///                 {
    ///                     Id = "rule",
    ///                     TimeWindows = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsArgs
    ///                     {
    ///                         TimeZone = "America/Los_Angeles",
    ///                         WeeklyWindows = new[]
    ///                         {
    ///                             new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs
    ///                             {
    ///                                 StartTime = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs
    ///                                 {
    ///                                     Hours = 12,
    ///                                     Minutes = 0,
    ///                                 },
    ///                                 EndTime = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs
    ///                                 {
    ///                                     Hours = 13,
    ///                                     Minutes = 0,
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Clouddeploy Deploy Policy Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var f_deploy_policy = new Gcp.CloudDeploy.DeployPolicy("f-deploy-policy", new()
    ///     {
    ///         Name = "cd-policy",
    ///         Location = "us-central1",
    ///         Annotations = 
    ///         {
    ///             { "my_first_annotation", "example-annotation-1" },
    ///             { "my_second_annotation", "example-annotation-2" },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "my_first_label", "example-label-1" },
    ///             { "my_second_label", "example-label-2" },
    ///         },
    ///         Description = "policy resource",
    ///         Selectors = new[]
    ///         {
    ///             new Gcp.CloudDeploy.Inputs.DeployPolicySelectorArgs
    ///             {
    ///                 DeliveryPipeline = new Gcp.CloudDeploy.Inputs.DeployPolicySelectorDeliveryPipelineArgs
    ///                 {
    ///                     Id = "cd-pipeline",
    ///                     Labels = 
    ///                     {
    ///                         { "foo", "bar" },
    ///                     },
    ///                 },
    ///             },
    ///             new Gcp.CloudDeploy.Inputs.DeployPolicySelectorArgs
    ///             {
    ///                 Target = new Gcp.CloudDeploy.Inputs.DeployPolicySelectorTargetArgs
    ///                 {
    ///                     Id = "dev",
    ///                     Labels = 
    ///                     {
    ///                         { "foo", "bar" },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Suspended = true,
    ///         Rules = new[]
    ///         {
    ///             new Gcp.CloudDeploy.Inputs.DeployPolicyRuleArgs
    ///             {
    ///                 RolloutRestriction = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionArgs
    ///                 {
    ///                     Id = "rule",
    ///                     TimeWindows = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsArgs
    ///                     {
    ///                         TimeZone = "America/Los_Angeles",
    ///                         WeeklyWindows = new[]
    ///                         {
    ///                             new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs
    ///                             {
    ///                                 StartTime = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs
    ///                                 {
    ///                                     Hours = 12,
    ///                                     Minutes = 0,
    ///                                     Seconds = 0,
    ///                                     Nanos = 0,
    ///                                 },
    ///                                 EndTime = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs
    ///                                 {
    ///                                     Hours = 13,
    ///                                     Minutes = 0,
    ///                                     Seconds = 0,
    ///                                     Nanos = 0,
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Gcp.CloudDeploy.Inputs.DeployPolicyRuleArgs
    ///             {
    ///                 RolloutRestriction = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionArgs
    ///                 {
    ///                     Id = "rule2",
    ///                     Invokers = new[]
    ///                     {
    ///                         "USER",
    ///                     },
    ///                     Actions = new[]
    ///                     {
    ///                         "CREATE",
    ///                     },
    ///                     TimeWindows = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsArgs
    ///                     {
    ///                         TimeZone = "America/Los_Angeles",
    ///                         WeeklyWindows = new[]
    ///                         {
    ///                             new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs
    ///                             {
    ///                                 StartTime = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs
    ///                                 {
    ///                                     Hours = 13,
    ///                                     Minutes = 0,
    ///                                     Seconds = 0,
    ///                                     Nanos = 0,
    ///                                 },
    ///                                 EndTime = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs
    ///                                 {
    ///                                     Hours = 14,
    ///                                     Minutes = 0,
    ///                                     Seconds = 0,
    ///                                     Nanos = 0,
    ///                                 },
    ///                                 DaysOfWeeks = new[]
    ///                                 {
    ///                                     "MONDAY",
    ///                                 },
    ///                             },
    ///                         },
    ///                         OneTimeWindows = new[]
    ///                         {
    ///                             new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowArgs
    ///                             {
    ///                                 StartTime = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowStartTimeArgs
    ///                                 {
    ///                                     Hours = 15,
    ///                                     Minutes = 0,
    ///                                     Seconds = 0,
    ///                                     Nanos = 0,
    ///                                 },
    ///                                 EndTime = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowEndTimeArgs
    ///                                 {
    ///                                     Hours = 16,
    ///                                     Minutes = 0,
    ///                                     Seconds = 0,
    ///                                     Nanos = 0,
    ///                                 },
    ///                                 StartDate = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowStartDateArgs
    ///                                 {
    ///                                     Year = 2019,
    ///                                     Month = 1,
    ///                                     Day = 1,
    ///                                 },
    ///                                 EndDate = new Gcp.CloudDeploy.Inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowEndDateArgs
    ///                                 {
    ///                                     Year = 2019,
    ///                                     Month = 12,
    ///                                     Day = 31,
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DeployPolicy can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, DeployPolicy can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:clouddeploy/deployPolicy:DeployPolicy")]
    public partial class DeployPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
        /// must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
        /// optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
        /// beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
        /// and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
        /// labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
        /// details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Output only. Time at which the DeployPolicy was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Optional. The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
        /// following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
        /// dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
        /// lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
        /// are additionally constrained to be &lt;= 63 characters. **Note**: This field is non-authoritative, and will only manage the
        /// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
        /// resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location for the resource
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Name of the `DeployPolicy`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Required. Rules to apply. At least one rule must be present.
        /// Structure is documented below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.DeployPolicyRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
        /// Structure is documented below.
        /// </summary>
        [Output("selectors")]
        public Output<ImmutableArray<Outputs.DeployPolicySelector>> Selectors { get; private set; } = null!;

        /// <summary>
        /// Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
        /// </summary>
        [Output("suspended")]
        public Output<bool?> Suspended { get; private set; } = null!;

        /// <summary>
        /// Output only. Unique identifier of the `DeployPolicy`.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Output only. Time at which the DeployPolicy was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a DeployPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeployPolicy(string name, DeployPolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:clouddeploy/deployPolicy:DeployPolicy", name, args ?? new DeployPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeployPolicy(string name, Input<string> id, DeployPolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:clouddeploy/deployPolicy:DeployPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeployPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeployPolicy Get(string name, Input<string> id, DeployPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new DeployPolicy(name, id, state, options);
        }
    }

    public sealed class DeployPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
        /// must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
        /// optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
        /// beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
        /// and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
        /// labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
        /// details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
        /// following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
        /// dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
        /// lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
        /// are additionally constrained to be &lt;= 63 characters. **Note**: This field is non-authoritative, and will only manage the
        /// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
        /// resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location for the resource
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Name of the `DeployPolicy`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("rules", required: true)]
        private InputList<Inputs.DeployPolicyRuleArgs>? _rules;

        /// <summary>
        /// Required. Rules to apply. At least one rule must be present.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DeployPolicyRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.DeployPolicyRuleArgs>());
            set => _rules = value;
        }

        [Input("selectors", required: true)]
        private InputList<Inputs.DeployPolicySelectorArgs>? _selectors;

        /// <summary>
        /// Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DeployPolicySelectorArgs> Selectors
        {
            get => _selectors ?? (_selectors = new InputList<Inputs.DeployPolicySelectorArgs>());
            set => _selectors = value;
        }

        /// <summary>
        /// Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        public DeployPolicyArgs()
        {
        }
        public static new DeployPolicyArgs Empty => new DeployPolicyArgs();
    }

    public sealed class DeployPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
        /// must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
        /// optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
        /// beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
        /// and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
        /// labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
        /// details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Output only. Time at which the DeployPolicy was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Optional. The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
        /// following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
        /// dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
        /// lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
        /// are additionally constrained to be &lt;= 63 characters. **Note**: This field is non-authoritative, and will only manage the
        /// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
        /// resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location for the resource
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the `DeployPolicy`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("rules")]
        private InputList<Inputs.DeployPolicyRuleGetArgs>? _rules;

        /// <summary>
        /// Required. Rules to apply. At least one rule must be present.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DeployPolicyRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.DeployPolicyRuleGetArgs>());
            set => _rules = value;
        }

        [Input("selectors")]
        private InputList<Inputs.DeployPolicySelectorGetArgs>? _selectors;

        /// <summary>
        /// Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DeployPolicySelectorGetArgs> Selectors
        {
            get => _selectors ?? (_selectors = new InputList<Inputs.DeployPolicySelectorGetArgs>());
            set => _selectors = value;
        }

        /// <summary>
        /// Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        /// <summary>
        /// Output only. Unique identifier of the `DeployPolicy`.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Output only. Time at which the DeployPolicy was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public DeployPolicyState()
        {
        }
        public static new DeployPolicyState Empty => new DeployPolicyState();
    }
}
