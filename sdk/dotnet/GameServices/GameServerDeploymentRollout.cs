// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.GameServices
{
    /// <summary>
    /// This represents the rollout state. This is part of the game server
    /// deployment.
    /// 
    /// To get more information about GameServerDeploymentRollout, see:
    /// 
    /// * [API documentation](https://cloud.google.com/game-servers/docs/reference/rest/v1beta/GameServerDeploymentRollout)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/game-servers/docs)
    /// 
    /// ## Example Usage
    /// ### Game Service Deployment Rollout Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var defaultGameServerDeployment = new Gcp.GameServices.GameServerDeployment("defaultGameServerDeployment", new Gcp.GameServices.GameServerDeploymentArgs
    ///         {
    ///             DeploymentId = "tf-test-deployment",
    ///             Description = "a deployment description",
    ///         });
    ///         var defaultGameServerConfig = new Gcp.GameServices.GameServerConfig("defaultGameServerConfig", new Gcp.GameServices.GameServerConfigArgs
    ///         {
    ///             ConfigId = "tf-test-config",
    ///             DeploymentId = defaultGameServerDeployment.DeploymentId,
    ///             Description = "a config description",
    ///             FleetConfigs = 
    ///             {
    ///                 new Gcp.GameServices.Inputs.GameServerConfigFleetConfigArgs
    ///                 {
    ///                     Name = "some-non-guid",
    ///                     FleetSpec = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         { "replicas", 1 },
    ///                         { "scheduling", "Packed" },
    ///                         { "template", new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             { "metadata", new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 { "name", "tf-test-game-server-template" },
    ///                             } },
    ///                             { "spec", new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 { "ports", new[]
    ///                                     {
    ///                                         new Dictionary&lt;string, object?&gt;
    ///                                         {
    ///                                             { "name", "default" },
    ///                                             { "portPolicy", "Dynamic" },
    ///                                             { "containerPort", 7654 },
    ///                                             { "protocol", "UDP" },
    ///                                         },
    ///                                     }
    ///                                  },
    ///                                 { "template", new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     { "spec", new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         { "containers", new[]
    ///                                             {
    ///                                                 new Dictionary&lt;string, object?&gt;
    ///                                                 {
    ///                                                     { "name", "simple-udp-server" },
    ///                                                     { "image", "gcr.io/agones-images/udp-server:0.14" },
    ///                                                 },
    ///                                             }
    ///                                          },
    ///                                     } },
    ///                                 } },
    ///                             } },
    ///                         } },
    ///                     }),
    ///                 },
    ///             },
    ///         });
    ///         var defaultGameServerDeploymentRollout = new Gcp.GameServices.GameServerDeploymentRollout("defaultGameServerDeploymentRollout", new Gcp.GameServices.GameServerDeploymentRolloutArgs
    ///         {
    ///             DeploymentId = defaultGameServerDeployment.DeploymentId,
    ///             DefaultGameServerConfig = defaultGameServerConfig.Name,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// GameServerDeploymentRollout can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout default projects/{{project}}/locations/global/gameServerDeployments/{{deployment_id}}/rollout
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout default {{project}}/{{deployment_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout default {{deployment_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout")]
    public partial class GameServerDeploymentRollout : Pulumi.CustomResource
    {
        /// <summary>
        /// This field points to the game server config that is
        /// applied by default to all realms and clusters. For example,
        /// `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
        /// </summary>
        [Output("defaultGameServerConfig")]
        public Output<string> DefaultGameServerConfig { get; private set; } = null!;

        /// <summary>
        /// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
        /// </summary>
        [Output("deploymentId")]
        public Output<string> DeploymentId { get; private set; } = null!;

        /// <summary>
        /// The game_server_config_overrides contains the per game server config
        /// overrides. The overrides are processed in the order they are listed. As
        /// soon as a match is found for a cluster, the rest of the list is not
        /// processed.
        /// Structure is documented below.
        /// </summary>
        [Output("gameServerConfigOverrides")]
        public Output<ImmutableArray<Outputs.GameServerDeploymentRolloutGameServerConfigOverride>> GameServerConfigOverrides { get; private set; } = null!;

        /// <summary>
        /// The resource id of the game server deployment eg:
        /// 'projects/my-project/locations/global/gameServerDeployments/my-deployment/rollout'.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a GameServerDeploymentRollout resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GameServerDeploymentRollout(string name, GameServerDeploymentRolloutArgs args, CustomResourceOptions? options = null)
            : base("gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout", name, args ?? new GameServerDeploymentRolloutArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GameServerDeploymentRollout(string name, Input<string> id, GameServerDeploymentRolloutState? state = null, CustomResourceOptions? options = null)
            : base("gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GameServerDeploymentRollout resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GameServerDeploymentRollout Get(string name, Input<string> id, GameServerDeploymentRolloutState? state = null, CustomResourceOptions? options = null)
        {
            return new GameServerDeploymentRollout(name, id, state, options);
        }
    }

    public sealed class GameServerDeploymentRolloutArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This field points to the game server config that is
        /// applied by default to all realms and clusters. For example,
        /// `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
        /// </summary>
        [Input("defaultGameServerConfig", required: true)]
        public Input<string> DefaultGameServerConfig { get; set; } = null!;

        /// <summary>
        /// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
        /// </summary>
        [Input("deploymentId", required: true)]
        public Input<string> DeploymentId { get; set; } = null!;

        [Input("gameServerConfigOverrides")]
        private InputList<Inputs.GameServerDeploymentRolloutGameServerConfigOverrideArgs>? _gameServerConfigOverrides;

        /// <summary>
        /// The game_server_config_overrides contains the per game server config
        /// overrides. The overrides are processed in the order they are listed. As
        /// soon as a match is found for a cluster, the rest of the list is not
        /// processed.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.GameServerDeploymentRolloutGameServerConfigOverrideArgs> GameServerConfigOverrides
        {
            get => _gameServerConfigOverrides ?? (_gameServerConfigOverrides = new InputList<Inputs.GameServerDeploymentRolloutGameServerConfigOverrideArgs>());
            set => _gameServerConfigOverrides = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GameServerDeploymentRolloutArgs()
        {
        }
    }

    public sealed class GameServerDeploymentRolloutState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This field points to the game server config that is
        /// applied by default to all realms and clusters. For example,
        /// `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
        /// </summary>
        [Input("defaultGameServerConfig")]
        public Input<string>? DefaultGameServerConfig { get; set; }

        /// <summary>
        /// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
        /// </summary>
        [Input("deploymentId")]
        public Input<string>? DeploymentId { get; set; }

        [Input("gameServerConfigOverrides")]
        private InputList<Inputs.GameServerDeploymentRolloutGameServerConfigOverrideGetArgs>? _gameServerConfigOverrides;

        /// <summary>
        /// The game_server_config_overrides contains the per game server config
        /// overrides. The overrides are processed in the order they are listed. As
        /// soon as a match is found for a cluster, the rest of the list is not
        /// processed.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.GameServerDeploymentRolloutGameServerConfigOverrideGetArgs> GameServerConfigOverrides
        {
            get => _gameServerConfigOverrides ?? (_gameServerConfigOverrides = new InputList<Inputs.GameServerDeploymentRolloutGameServerConfigOverrideGetArgs>());
            set => _gameServerConfigOverrides = value;
        }

        /// <summary>
        /// The resource id of the game server deployment eg:
        /// 'projects/my-project/locations/global/gameServerDeployments/my-deployment/rollout'.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GameServerDeploymentRolloutState()
        {
        }
    }
}
