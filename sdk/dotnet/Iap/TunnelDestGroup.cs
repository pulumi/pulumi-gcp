// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Iap
{
    /// <summary>
    /// Tunnel destination groups represent resources that have the same tunnel access restrictions.
    /// 
    /// To get more information about TunnelDestGroup, see:
    /// 
    /// * [API documentation](https://cloud.google.com/iap/docs/reference/rest/v1/projects.iap_tunnel.locations.destGroups)
    /// * How-to Guides
    ///     * [Set up IAP TCP forwarding with an IP address or hostname in a Google Cloud or non-Google Cloud environment](https://cloud.google.com/iap/docs/tcp-by-host)
    /// 
    /// ## Example Usage
    /// 
    /// ### Iap Destgroup
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var destGroup = new Gcp.Iap.TunnelDestGroup("dest_group", new()
    ///     {
    ///         Region = "us-central1",
    ///         GroupName = "testgroup_2067",
    ///         Cidrs = new[]
    ///         {
    ///             "10.1.0.0/16",
    ///             "192.168.10.0/24",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// TunnelDestGroup can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{group_name}}`
    /// 
    /// * `{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{group_name}}`
    /// 
    /// * `{{project}}/{{region}}/{{group_name}}`
    /// 
    /// * `{{region}}/destGroups/{{group_name}}`
    /// 
    /// * `{{region}}/{{group_name}}`
    /// 
    /// * `{{group_name}}`
    /// 
    /// When using the `pulumi import` command, TunnelDestGroup can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default projects/{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{group_name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{project}}/iap_tunnel/locations/{{region}}/destGroups/{{group_name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{project}}/{{region}}/{{group_name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{region}}/destGroups/{{group_name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{region}}/{{group_name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{group_name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:iap/tunnelDestGroup:TunnelDestGroup")]
    public partial class TunnelDestGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of CIDRs that this group applies to.
        /// </summary>
        [Output("cidrs")]
        public Output<ImmutableArray<string>> Cidrs { get; private set; } = null!;

        /// <summary>
        /// List of FQDNs that this group applies to.
        /// </summary>
        [Output("fqdns")]
        public Output<ImmutableArray<string>> Fqdns { get; private set; } = null!;

        /// <summary>
        /// Unique tunnel destination group name.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("groupName")]
        public Output<string> GroupName { get; private set; } = null!;

        /// <summary>
        /// Full resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The region of the tunnel group. Must be the same as the network resources in the group.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a TunnelDestGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TunnelDestGroup(string name, TunnelDestGroupArgs args, CustomResourceOptions? options = null)
            : base("gcp:iap/tunnelDestGroup:TunnelDestGroup", name, args ?? new TunnelDestGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TunnelDestGroup(string name, Input<string> id, TunnelDestGroupState? state = null, CustomResourceOptions? options = null)
            : base("gcp:iap/tunnelDestGroup:TunnelDestGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TunnelDestGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TunnelDestGroup Get(string name, Input<string> id, TunnelDestGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new TunnelDestGroup(name, id, state, options);
        }
    }

    public sealed class TunnelDestGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("cidrs")]
        private InputList<string>? _cidrs;

        /// <summary>
        /// List of CIDRs that this group applies to.
        /// </summary>
        public InputList<string> Cidrs
        {
            get => _cidrs ?? (_cidrs = new InputList<string>());
            set => _cidrs = value;
        }

        [Input("fqdns")]
        private InputList<string>? _fqdns;

        /// <summary>
        /// List of FQDNs that this group applies to.
        /// </summary>
        public InputList<string> Fqdns
        {
            get => _fqdns ?? (_fqdns = new InputList<string>());
            set => _fqdns = value;
        }

        /// <summary>
        /// Unique tunnel destination group name.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("groupName", required: true)]
        public Input<string> GroupName { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the tunnel group. Must be the same as the network resources in the group.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public TunnelDestGroupArgs()
        {
        }
        public static new TunnelDestGroupArgs Empty => new TunnelDestGroupArgs();
    }

    public sealed class TunnelDestGroupState : global::Pulumi.ResourceArgs
    {
        [Input("cidrs")]
        private InputList<string>? _cidrs;

        /// <summary>
        /// List of CIDRs that this group applies to.
        /// </summary>
        public InputList<string> Cidrs
        {
            get => _cidrs ?? (_cidrs = new InputList<string>());
            set => _cidrs = value;
        }

        [Input("fqdns")]
        private InputList<string>? _fqdns;

        /// <summary>
        /// List of FQDNs that this group applies to.
        /// </summary>
        public InputList<string> Fqdns
        {
            get => _fqdns ?? (_fqdns = new InputList<string>());
            set => _fqdns = value;
        }

        /// <summary>
        /// Unique tunnel destination group name.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// Full resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the tunnel group. Must be the same as the network resources in the group.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public TunnelDestGroupState()
        {
        }
        public static new TunnelDestGroupState Empty => new TunnelDestGroupState();
    }
}
