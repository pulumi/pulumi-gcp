// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Iap
{
    public static class GetTunnelDestGroupIamPolicy
    {
        /// <summary>
        /// Retrieves the current IAM policy data for tunneldestgroup
        /// 
        /// 
        /// 
        /// ## example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Iap.GetTunnelDestGroupIamPolicy.Invoke(new()
        ///     {
        ///         Project = destGroup.Project,
        ///         Region = destGroup.Region,
        ///         DestGroup = destGroup.GroupName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTunnelDestGroupIamPolicyResult> InvokeAsync(GetTunnelDestGroupIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTunnelDestGroupIamPolicyResult>("gcp:iap/getTunnelDestGroupIamPolicy:getTunnelDestGroupIamPolicy", args ?? new GetTunnelDestGroupIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for tunneldestgroup
        /// 
        /// 
        /// 
        /// ## example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Iap.GetTunnelDestGroupIamPolicy.Invoke(new()
        ///     {
        ///         Project = destGroup.Project,
        ///         Region = destGroup.Region,
        ///         DestGroup = destGroup.GroupName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTunnelDestGroupIamPolicyResult> Invoke(GetTunnelDestGroupIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTunnelDestGroupIamPolicyResult>("gcp:iap/getTunnelDestGroupIamPolicy:getTunnelDestGroupIamPolicy", args ?? new GetTunnelDestGroupIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTunnelDestGroupIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        [Input("destGroup", required: true)]
        public string DestGroup { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The region of the tunnel group. Must be the same as the network resources in the group.
        /// Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
        /// region is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetTunnelDestGroupIamPolicyArgs()
        {
        }
        public static new GetTunnelDestGroupIamPolicyArgs Empty => new GetTunnelDestGroupIamPolicyArgs();
    }

    public sealed class GetTunnelDestGroupIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("destGroup", required: true)]
        public Input<string> DestGroup { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the tunnel group. Must be the same as the network resources in the group.
        /// Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
        /// region is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetTunnelDestGroupIamPolicyInvokeArgs()
        {
        }
        public static new GetTunnelDestGroupIamPolicyInvokeArgs Empty => new GetTunnelDestGroupIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetTunnelDestGroupIamPolicyResult
    {
        public readonly string DestGroup;
        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Required only by `gcp.iap.TunnelDestGroupIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        public readonly string PolicyData;
        public readonly string Project;
        public readonly string Region;

        [OutputConstructor]
        private GetTunnelDestGroupIamPolicyResult(
            string destGroup,

            string etag,

            string id,

            string policyData,

            string project,

            string region)
        {
            DestGroup = destGroup;
            Etag = etag;
            Id = id;
            PolicyData = policyData;
            Project = project;
            Region = region;
        }
    }
}
