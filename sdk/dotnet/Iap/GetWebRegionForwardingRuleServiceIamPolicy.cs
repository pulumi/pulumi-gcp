// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Iap
{
    public static class GetWebRegionForwardingRuleServiceIamPolicy
    {
        /// <summary>
        /// Retrieves the current IAM policy data for webregionforwardingruleservice
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Iap.GetWebRegionForwardingRuleServiceIamPolicy.Invoke(new()
        ///     {
        ///         Project = @default.Project,
        ///         Region = @default.Region,
        ///         ForwardingRuleRegionServiceName = @default.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWebRegionForwardingRuleServiceIamPolicyResult> InvokeAsync(GetWebRegionForwardingRuleServiceIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWebRegionForwardingRuleServiceIamPolicyResult>("gcp:iap/getWebRegionForwardingRuleServiceIamPolicy:getWebRegionForwardingRuleServiceIamPolicy", args ?? new GetWebRegionForwardingRuleServiceIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for webregionforwardingruleservice
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Iap.GetWebRegionForwardingRuleServiceIamPolicy.Invoke(new()
        ///     {
        ///         Project = @default.Project,
        ///         Region = @default.Region,
        ///         ForwardingRuleRegionServiceName = @default.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWebRegionForwardingRuleServiceIamPolicyResult> Invoke(GetWebRegionForwardingRuleServiceIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWebRegionForwardingRuleServiceIamPolicyResult>("gcp:iap/getWebRegionForwardingRuleServiceIamPolicy:getWebRegionForwardingRuleServiceIamPolicy", args ?? new GetWebRegionForwardingRuleServiceIamPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for webregionforwardingruleservice
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Iap.GetWebRegionForwardingRuleServiceIamPolicy.Invoke(new()
        ///     {
        ///         Project = @default.Project,
        ///         Region = @default.Region,
        ///         ForwardingRuleRegionServiceName = @default.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWebRegionForwardingRuleServiceIamPolicyResult> Invoke(GetWebRegionForwardingRuleServiceIamPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetWebRegionForwardingRuleServiceIamPolicyResult>("gcp:iap/getWebRegionForwardingRuleServiceIamPolicy:getWebRegionForwardingRuleServiceIamPolicy", args ?? new GetWebRegionForwardingRuleServiceIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWebRegionForwardingRuleServiceIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("forwardingRuleRegionServiceName", required: true)]
        public string ForwardingRuleRegionServiceName { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
        /// region is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetWebRegionForwardingRuleServiceIamPolicyArgs()
        {
        }
        public static new GetWebRegionForwardingRuleServiceIamPolicyArgs Empty => new GetWebRegionForwardingRuleServiceIamPolicyArgs();
    }

    public sealed class GetWebRegionForwardingRuleServiceIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("forwardingRuleRegionServiceName", required: true)]
        public Input<string> ForwardingRuleRegionServiceName { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
        /// region is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetWebRegionForwardingRuleServiceIamPolicyInvokeArgs()
        {
        }
        public static new GetWebRegionForwardingRuleServiceIamPolicyInvokeArgs Empty => new GetWebRegionForwardingRuleServiceIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetWebRegionForwardingRuleServiceIamPolicyResult
    {
        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        public readonly string Etag;
        public readonly string ForwardingRuleRegionServiceName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Required only by `gcp.iap.WebRegionForwardingRuleServiceIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        public readonly string PolicyData;
        public readonly string Project;
        public readonly string Region;

        [OutputConstructor]
        private GetWebRegionForwardingRuleServiceIamPolicyResult(
            string etag,

            string forwardingRuleRegionServiceName,

            string id,

            string policyData,

            string project,

            string region)
        {
            Etag = etag;
            ForwardingRuleRegionServiceName = forwardingRuleRegionServiceName;
            Id = id;
            PolicyData = policyData;
            Project = project;
            Region = region;
        }
    }
}
