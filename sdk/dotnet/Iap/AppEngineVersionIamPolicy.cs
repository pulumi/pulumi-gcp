// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Iap
{
    /// <summary>
    /// Three different resources help you manage your IAM policy for Identity-Aware Proxy AppEngineVersion. Each of these resources serves a different use case:
    /// 
    /// * `gcp.iap.AppEngineVersionIamPolicy`: Authoritative. Sets the IAM policy for the appengineversion and replaces any existing policy already attached.
    /// * `gcp.iap.AppEngineVersionIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the appengineversion are preserved.
    /// * `gcp.iap.AppEngineVersionIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the appengineversion are preserved.
    /// 
    /// &gt; **Note:** `gcp.iap.AppEngineVersionIamPolicy` **cannot** be used in conjunction with `gcp.iap.AppEngineVersionIamBinding` and `gcp.iap.AppEngineVersionIamMember` or they will fight over what your policy should be.
    /// 
    /// &gt; **Note:** `gcp.iap.AppEngineVersionIamBinding` resources **can be** used in conjunction with `gcp.iap.AppEngineVersionIamMember` resources **only if** they do not grant privilege to the same role.
    /// 
    /// 
    /// 
    /// ## google\_iap\_app\_engine\_version\_iam\_policy
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var admin = Output.Create(Gcp.Organizations.GetIAMPolicy.InvokeAsync(new Gcp.Organizations.GetIAMPolicyArgs
    ///         {
    ///             Binding = 
    ///             {
    ///                 
    ///                 {
    ///                     { "role", "roles/iap.httpsResourceAccessor" },
    ///                     { "members", 
    ///                     {
    ///                         "user:jane@example.com",
    ///                     } },
    ///                 },
    ///             },
    ///         }));
    ///         var policy = new Gcp.Iap.AppEngineVersionIamPolicy("policy", new Gcp.Iap.AppEngineVersionIamPolicyArgs
    ///         {
    ///             Project = google_app_engine_standard_app_version.Version.Project,
    ///             AppId = google_app_engine_standard_app_version.Version.Project,
    ///             Service = google_app_engine_standard_app_version.Version.Service,
    ///             VersionId = google_app_engine_standard_app_version.Version.Version_id,
    ///             PolicyData = admin.Apply(admin =&gt; admin.PolicyData),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// With IAM Conditions:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var admin = Output.Create(Gcp.Organizations.GetIAMPolicy.InvokeAsync(new Gcp.Organizations.GetIAMPolicyArgs
    ///         {
    ///             Binding = 
    ///             {
    ///                 
    ///                 {
    ///                     { "role", "roles/iap.httpsResourceAccessor" },
    ///                     { "members", 
    ///                     {
    ///                         "user:jane@example.com",
    ///                     } },
    ///                     { "condition", 
    ///                     {
    ///                         { "title", "expires_after_2019_12_31" },
    ///                         { "description", "Expiring at midnight of 2019-12-31" },
    ///                         { "expression", "request.time &lt; timestamp(\"2020-01-01T00:00:00Z\")" },
    ///                     } },
    ///                 },
    ///             },
    ///         }));
    ///         var policy = new Gcp.Iap.AppEngineVersionIamPolicy("policy", new Gcp.Iap.AppEngineVersionIamPolicyArgs
    ///         {
    ///             Project = google_app_engine_standard_app_version.Version.Project,
    ///             AppId = google_app_engine_standard_app_version.Version.Project,
    ///             Service = google_app_engine_standard_app_version.Version.Service,
    ///             VersionId = google_app_engine_standard_app_version.Version.Version_id,
    ///             PolicyData = admin.Apply(admin =&gt; admin.PolicyData),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## google\_iap\_app\_engine\_version\_iam\_binding
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var binding = new Gcp.Iap.AppEngineVersionIamBinding("binding", new Gcp.Iap.AppEngineVersionIamBindingArgs
    ///         {
    ///             AppId = google_app_engine_standard_app_version.Version.Project,
    ///             Members = 
    ///             {
    ///                 "user:jane@example.com",
    ///             },
    ///             Project = google_app_engine_standard_app_version.Version.Project,
    ///             Role = "roles/iap.httpsResourceAccessor",
    ///             Service = google_app_engine_standard_app_version.Version.Service,
    ///             VersionId = google_app_engine_standard_app_version.Version.Version_id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// With IAM Conditions:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var binding = new Gcp.Iap.AppEngineVersionIamBinding("binding", new Gcp.Iap.AppEngineVersionIamBindingArgs
    ///         {
    ///             AppId = google_app_engine_standard_app_version.Version.Project,
    ///             Condition = new Gcp.Iap.Inputs.AppEngineVersionIamBindingConditionArgs
    ///             {
    ///                 Description = "Expiring at midnight of 2019-12-31",
    ///                 Expression = "request.time &lt; timestamp(\"2020-01-01T00:00:00Z\")",
    ///                 Title = "expires_after_2019_12_31",
    ///             },
    ///             Members = 
    ///             {
    ///                 "user:jane@example.com",
    ///             },
    ///             Project = google_app_engine_standard_app_version.Version.Project,
    ///             Role = "roles/iap.httpsResourceAccessor",
    ///             Service = google_app_engine_standard_app_version.Version.Service,
    ///             VersionId = google_app_engine_standard_app_version.Version.Version_id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## google\_iap\_app\_engine\_version\_iam\_member
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var member = new Gcp.Iap.AppEngineVersionIamMember("member", new Gcp.Iap.AppEngineVersionIamMemberArgs
    ///         {
    ///             AppId = google_app_engine_standard_app_version.Version.Project,
    ///             Member = "user:jane@example.com",
    ///             Project = google_app_engine_standard_app_version.Version.Project,
    ///             Role = "roles/iap.httpsResourceAccessor",
    ///             Service = google_app_engine_standard_app_version.Version.Service,
    ///             VersionId = google_app_engine_standard_app_version.Version.Version_id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// With IAM Conditions:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var member = new Gcp.Iap.AppEngineVersionIamMember("member", new Gcp.Iap.AppEngineVersionIamMemberArgs
    ///         {
    ///             AppId = google_app_engine_standard_app_version.Version.Project,
    ///             Condition = new Gcp.Iap.Inputs.AppEngineVersionIamMemberConditionArgs
    ///             {
    ///                 Description = "Expiring at midnight of 2019-12-31",
    ///                 Expression = "request.time &lt; timestamp(\"2020-01-01T00:00:00Z\")",
    ///                 Title = "expires_after_2019_12_31",
    ///             },
    ///             Member = "user:jane@example.com",
    ///             Project = google_app_engine_standard_app_version.Version.Project,
    ///             Role = "roles/iap.httpsResourceAccessor",
    ///             Service = google_app_engine_standard_app_version.Version.Service,
    ///             VersionId = google_app_engine_standard_app_version.Version.Version_id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class AppEngineVersionIamPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// Id of the App Engine application. Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        [Output("policyData")]
        public Output<string> PolicyData { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Service id of the App Engine application Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;

        /// <summary>
        /// Version id of the App Engine application Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Output("versionId")]
        public Output<string> VersionId { get; private set; } = null!;


        /// <summary>
        /// Create a AppEngineVersionIamPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppEngineVersionIamPolicy(string name, AppEngineVersionIamPolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:iap/appEngineVersionIamPolicy:AppEngineVersionIamPolicy", name, args ?? new AppEngineVersionIamPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppEngineVersionIamPolicy(string name, Input<string> id, AppEngineVersionIamPolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:iap/appEngineVersionIamPolicy:AppEngineVersionIamPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppEngineVersionIamPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppEngineVersionIamPolicy Get(string name, Input<string> id, AppEngineVersionIamPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new AppEngineVersionIamPolicy(name, id, state, options);
        }
    }

    public sealed class AppEngineVersionIamPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the App Engine application. Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        [Input("policyData", required: true)]
        public Input<string> PolicyData { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Service id of the App Engine application Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        /// <summary>
        /// Version id of the App Engine application Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("versionId", required: true)]
        public Input<string> VersionId { get; set; } = null!;

        public AppEngineVersionIamPolicyArgs()
        {
        }
    }

    public sealed class AppEngineVersionIamPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the App Engine application. Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        [Input("policyData")]
        public Input<string>? PolicyData { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Service id of the App Engine application Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// Version id of the App Engine application Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        public AppEngineVersionIamPolicyState()
        {
        }
    }
}
