// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigTable
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.BigTable.Instance("instance", new()
    ///     {
    ///         Name = "tf-instance",
    ///         Clusters = new[]
    ///         {
    ///             new Gcp.BigTable.Inputs.InstanceClusterArgs
    ///             {
    ///                 ClusterId = "tf-instance-cluster",
    ///                 Zone = "us-central1-b",
    ///                 NumNodes = 3,
    ///                 StorageType = "HDD",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var table = new Gcp.BigTable.Table("table", new()
    ///     {
    ///         Name = "tf-table",
    ///         InstanceName = instance.Name,
    ///         SplitKeys = new[]
    ///         {
    ///             "a",
    ///             "b",
    ///             "c",
    ///         },
    ///         ColumnFamilies = new[]
    ///         {
    ///             new Gcp.BigTable.Inputs.TableColumnFamilyArgs
    ///             {
    ///                 Family = "family-first",
    ///             },
    ///             new Gcp.BigTable.Inputs.TableColumnFamilyArgs
    ///             {
    ///                 Family = "family-second",
    ///             },
    ///         },
    ///         ChangeStreamRetention = "24h0m0s",
    ///     });
    /// 
    ///     var authorizedView = new Gcp.BigTable.AuthorizedView("authorized_view", new()
    ///     {
    ///         Name = "tf-authorized-view",
    ///         InstanceName = instance.Name,
    ///         TableName = table.Name,
    ///         SubsetView = new Gcp.BigTable.Inputs.AuthorizedViewSubsetViewArgs
    ///         {
    ///             RowPrefixes = new[]
    ///             {
    ///                 Std.Base64encode.Invoke(new()
    ///                 {
    ///                     Input = "prefix#",
    ///                 }).Apply(invoke =&gt; invoke.Result),
    ///             },
    ///             FamilySubsets = new[]
    ///             {
    ///                 new Gcp.BigTable.Inputs.AuthorizedViewSubsetViewFamilySubsetArgs
    ///                 {
    ///                     FamilyName = "family-first",
    ///                     Qualifiers = new[]
    ///                     {
    ///                         Std.Base64encode.Invoke(new()
    ///                         {
    ///                             Input = "qualifier",
    ///                         }).Apply(invoke =&gt; invoke.Result),
    ///                         Std.Base64encode.Invoke(new()
    ///                         {
    ///                             Input = "qualifier-second",
    ///                         }).Apply(invoke =&gt; invoke.Result),
    ///                     },
    ///                 },
    ///                 new Gcp.BigTable.Inputs.AuthorizedViewSubsetViewFamilySubsetArgs
    ///                 {
    ///                     FamilyName = "family-second",
    ///                     QualifierPrefixes = new[]
    ///                     {
    ///                         "",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Bigtable Authorized Views can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/instances/{{instance_name}}/tables/{{table_name}}/authorizedViews/{{name}}`
    /// 
    /// * `{{project}}/{{instance_name}}/{{table_name}}/{{name}}`
    /// 
    /// * `{{instance_name}}/{{table_name}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, Bigtable Authorized Views can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigtable/authorizedView:AuthorizedView default projects/{{project}}/instances/{{instance_name}}/tables/{{table_name}}/authorizedViews/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigtable/authorizedView:AuthorizedView default {{project}}/{{instance_name}}/{{table_name}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigtable/authorizedView:AuthorizedView default {{instance_name}}/{{table_name}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:bigtable/authorizedView:AuthorizedView")]
    public partial class AuthorizedView : global::Pulumi.CustomResource
    {
        [Output("deletionProtection")]
        public Output<string> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// The name of the Bigtable instance in which the authorized view belongs.
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;

        /// <summary>
        /// The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// An AuthorizedView permitting access to an explicit subset of a Table. Structure is documented below.
        /// </summary>
        [Output("subsetView")]
        public Output<Outputs.AuthorizedViewSubsetView?> SubsetView { get; private set; } = null!;

        /// <summary>
        /// The name of the Bigtable table in which the authorized view belongs.
        /// </summary>
        [Output("tableName")]
        public Output<string> TableName { get; private set; } = null!;


        /// <summary>
        /// Create a AuthorizedView resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthorizedView(string name, AuthorizedViewArgs args, CustomResourceOptions? options = null)
            : base("gcp:bigtable/authorizedView:AuthorizedView", name, args ?? new AuthorizedViewArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuthorizedView(string name, Input<string> id, AuthorizedViewState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigtable/authorizedView:AuthorizedView", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthorizedView resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthorizedView Get(string name, Input<string> id, AuthorizedViewState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthorizedView(name, id, state, options);
        }
    }

    public sealed class AuthorizedViewArgs : global::Pulumi.ResourceArgs
    {
        [Input("deletionProtection")]
        public Input<string>? DeletionProtection { get; set; }

        /// <summary>
        /// The name of the Bigtable instance in which the authorized view belongs.
        /// </summary>
        [Input("instanceName", required: true)]
        public Input<string> InstanceName { get; set; } = null!;

        /// <summary>
        /// The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// An AuthorizedView permitting access to an explicit subset of a Table. Structure is documented below.
        /// </summary>
        [Input("subsetView")]
        public Input<Inputs.AuthorizedViewSubsetViewArgs>? SubsetView { get; set; }

        /// <summary>
        /// The name of the Bigtable table in which the authorized view belongs.
        /// </summary>
        [Input("tableName", required: true)]
        public Input<string> TableName { get; set; } = null!;

        public AuthorizedViewArgs()
        {
        }
        public static new AuthorizedViewArgs Empty => new AuthorizedViewArgs();
    }

    public sealed class AuthorizedViewState : global::Pulumi.ResourceArgs
    {
        [Input("deletionProtection")]
        public Input<string>? DeletionProtection { get; set; }

        /// <summary>
        /// The name of the Bigtable instance in which the authorized view belongs.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// An AuthorizedView permitting access to an explicit subset of a Table. Structure is documented below.
        /// </summary>
        [Input("subsetView")]
        public Input<Inputs.AuthorizedViewSubsetViewGetArgs>? SubsetView { get; set; }

        /// <summary>
        /// The name of the Bigtable table in which the authorized view belongs.
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        public AuthorizedViewState()
        {
        }
        public static new AuthorizedViewState Empty => new AuthorizedViewState();
    }
}
