// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigTable
{
    /// <summary>
    /// A materialized view object that can be referenced in SQL queries.
    /// 
    /// To get more information about MaterializedView, see:
    /// 
    /// * [API documentation](https://cloud.google.com/bigtable/docs/reference/admin/rest/v2/projects.instances.materializedViews)
    /// 
    /// ## Example Usage
    /// 
    /// ### Bigtable Materialized View
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.BigTable.Instance("instance", new()
    ///     {
    ///         Name = "bt-instance",
    ///         Clusters = new[]
    ///         {
    ///             new Gcp.BigTable.Inputs.InstanceClusterArgs
    ///             {
    ///                 ClusterId = "cluster-1",
    ///                 Zone = "us-east1-b",
    ///                 NumNodes = 3,
    ///                 StorageType = "HDD",
    ///             },
    ///         },
    ///         DeletionProtection = true,
    ///     });
    /// 
    ///     var table = new Gcp.BigTable.Table("table", new()
    ///     {
    ///         Name = "bt-table",
    ///         InstanceName = instance.Name,
    ///         ColumnFamilies = new[]
    ///         {
    ///             new Gcp.BigTable.Inputs.TableColumnFamilyArgs
    ///             {
    ///                 Family = "CF",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var materializedView = new Gcp.BigTable.MaterializedView("materialized_view", new()
    ///     {
    ///         MaterializedViewId = "bt-materialized-view",
    ///         Instance = instance.Name,
    ///         DeletionProtection = false,
    ///         Query = @"SELECT _key, COUNT(CF['col1']) as Count
    /// FROM ` + ""`bt-table`"" + `
    /// GROUP BY _key
    /// ",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             table,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// MaterializedView can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/instances/{{instance}}/materializedViews/{{materialized_view_id}}`
    /// 
    /// * `{{project}}/{{instance}}/{{materialized_view_id}}`
    /// 
    /// * `{{instance}}/{{materialized_view_id}}`
    /// 
    /// When using the `pulumi import` command, MaterializedView can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigtable/materializedView:MaterializedView default projects/{{project}}/instances/{{instance}}/materializedViews/{{materialized_view_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigtable/materializedView:MaterializedView default {{project}}/{{instance}}/{{materialized_view_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigtable/materializedView:MaterializedView default {{instance}}/{{materialized_view_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:bigtable/materializedView:MaterializedView")]
    public partial class MaterializedView : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set to true to make the MaterializedView protected against deletion.
        /// </summary>
        [Output("deletionProtection")]
        public Output<bool?> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// The name of the instance to create the materialized view within.
        /// </summary>
        [Output("instance")]
        public Output<string?> Instance { get; private set; } = null!;

        /// <summary>
        /// The unique name of the materialized view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("materializedViewId")]
        public Output<string> MaterializedViewId { get; private set; } = null!;

        /// <summary>
        /// The unique name of the requested materialized view. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/materializedViews/&lt;materializedViewId&gt;`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The materialized view's select query.
        /// </summary>
        [Output("query")]
        public Output<string> Query { get; private set; } = null!;


        /// <summary>
        /// Create a MaterializedView resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MaterializedView(string name, MaterializedViewArgs args, CustomResourceOptions? options = null)
            : base("gcp:bigtable/materializedView:MaterializedView", name, args ?? new MaterializedViewArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MaterializedView(string name, Input<string> id, MaterializedViewState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigtable/materializedView:MaterializedView", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MaterializedView resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MaterializedView Get(string name, Input<string> id, MaterializedViewState? state = null, CustomResourceOptions? options = null)
        {
            return new MaterializedView(name, id, state, options);
        }
    }

    public sealed class MaterializedViewArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set to true to make the MaterializedView protected against deletion.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The name of the instance to create the materialized view within.
        /// </summary>
        [Input("instance")]
        public Input<string>? Instance { get; set; }

        /// <summary>
        /// The unique name of the materialized view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("materializedViewId", required: true)]
        public Input<string> MaterializedViewId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The materialized view's select query.
        /// </summary>
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        public MaterializedViewArgs()
        {
        }
        public static new MaterializedViewArgs Empty => new MaterializedViewArgs();
    }

    public sealed class MaterializedViewState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set to true to make the MaterializedView protected against deletion.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The name of the instance to create the materialized view within.
        /// </summary>
        [Input("instance")]
        public Input<string>? Instance { get; set; }

        /// <summary>
        /// The unique name of the materialized view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("materializedViewId")]
        public Input<string>? MaterializedViewId { get; set; }

        /// <summary>
        /// The unique name of the requested materialized view. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/materializedViews/&lt;materializedViewId&gt;`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The materialized view's select query.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        public MaterializedViewState()
        {
        }
        public static new MaterializedViewState Empty => new MaterializedViewState();
    }
}
