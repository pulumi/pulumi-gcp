// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigTable
{
    /// <summary>
    /// A schema bundle object that can be referenced in SQL queries.
    /// 
    /// To get more information about SchemaBundle, see:
    /// 
    /// * [API documentation](https://cloud.google.com/bigtable/docs/reference/admin/rest/v2/projects.instances.tables.schemaBundles)
    /// 
    /// ## Example Usage
    /// 
    /// ### Bigtable Schema Bundle
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.BigTable.Instance("instance", new()
    ///     {
    ///         Name = "bt-instance",
    ///         Clusters = new[]
    ///         {
    ///             new Gcp.BigTable.Inputs.InstanceClusterArgs
    ///             {
    ///                 ClusterId = "cluster-1",
    ///                 Zone = "us-east1-b",
    ///                 NumNodes = 1,
    ///                 StorageType = "HDD",
    ///             },
    ///         },
    ///         DeletionProtection = false,
    ///     });
    /// 
    ///     var table = new Gcp.BigTable.Table("table", new()
    ///     {
    ///         Name = "bt-table",
    ///         InstanceName = instance.Name,
    ///         ColumnFamilies = new[]
    ///         {
    ///             new Gcp.BigTable.Inputs.TableColumnFamilyArgs
    ///             {
    ///                 Family = "CF",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var schemaBundle = new Gcp.BigTable.SchemaBundle("schema_bundle", new()
    ///     {
    ///         SchemaBundleId = "bt-schema-bundle",
    ///         Instance = instance.Name,
    ///         Table = table.Name,
    ///         ProtoSchema = new Gcp.BigTable.Inputs.SchemaBundleProtoSchemaArgs
    ///         {
    ///             ProtoDescriptors = Std.Filebase64.Invoke(new()
    ///             {
    ///                 Input = "test-fixtures/proto_schema_bundle.pb",
    ///             }).Apply(invoke =&gt; invoke.Result),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SchemaBundle can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/instances/{{instance}}/tables/{{table}}/schemaBundles/{{schema_bundle_id}}`
    /// 
    /// * `{{project}}/{{instance}}/{{table}}/{{schema_bundle_id}}`
    /// 
    /// * `{{instance}}/{{table}}/{{schema_bundle_id}}`
    /// 
    /// When using the `pulumi import` command, SchemaBundle can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigtable/schemaBundle:SchemaBundle default projects/{{project}}/instances/{{instance}}/tables/{{table}}/schemaBundles/{{schema_bundle_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigtable/schemaBundle:SchemaBundle default {{project}}/{{instance}}/{{table}}/{{schema_bundle_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigtable/schemaBundle:SchemaBundle default {{instance}}/{{table}}/{{schema_bundle_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:bigtable/schemaBundle:SchemaBundle")]
    public partial class SchemaBundle : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If true, allow backwards incompatible changes.
        /// </summary>
        [Output("ignoreWarnings")]
        public Output<bool?> IgnoreWarnings { get; private set; } = null!;

        /// <summary>
        /// The name of the instance to create the schema bundle within.
        /// </summary>
        [Output("instance")]
        public Output<string?> Instance { get; private set; } = null!;

        /// <summary>
        /// The unique name of the requested schema bundle. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;/schemaBundles/&lt;schemaBundleId&gt;`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// File descriptor set, generated by protoc.
        /// To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
        /// $ protoc --include_imports --include_source_info test.proto -o out.pb
        /// Structure is documented below.
        /// </summary>
        [Output("protoSchema")]
        public Output<Outputs.SchemaBundleProtoSchema> ProtoSchema { get; private set; } = null!;

        /// <summary>
        /// The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
        /// </summary>
        [Output("schemaBundleId")]
        public Output<string> SchemaBundleId { get; private set; } = null!;

        /// <summary>
        /// The name of the table to create the schema bundle within.
        /// </summary>
        [Output("table")]
        public Output<string?> Table { get; private set; } = null!;


        /// <summary>
        /// Create a SchemaBundle resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SchemaBundle(string name, SchemaBundleArgs args, CustomResourceOptions? options = null)
            : base("gcp:bigtable/schemaBundle:SchemaBundle", name, args ?? new SchemaBundleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SchemaBundle(string name, Input<string> id, SchemaBundleState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigtable/schemaBundle:SchemaBundle", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SchemaBundle resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SchemaBundle Get(string name, Input<string> id, SchemaBundleState? state = null, CustomResourceOptions? options = null)
        {
            return new SchemaBundle(name, id, state, options);
        }
    }

    public sealed class SchemaBundleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If true, allow backwards incompatible changes.
        /// </summary>
        [Input("ignoreWarnings")]
        public Input<bool>? IgnoreWarnings { get; set; }

        /// <summary>
        /// The name of the instance to create the schema bundle within.
        /// </summary>
        [Input("instance")]
        public Input<string>? Instance { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// File descriptor set, generated by protoc.
        /// To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
        /// $ protoc --include_imports --include_source_info test.proto -o out.pb
        /// Structure is documented below.
        /// </summary>
        [Input("protoSchema", required: true)]
        public Input<Inputs.SchemaBundleProtoSchemaArgs> ProtoSchema { get; set; } = null!;

        /// <summary>
        /// The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
        /// </summary>
        [Input("schemaBundleId", required: true)]
        public Input<string> SchemaBundleId { get; set; } = null!;

        /// <summary>
        /// The name of the table to create the schema bundle within.
        /// </summary>
        [Input("table")]
        public Input<string>? Table { get; set; }

        public SchemaBundleArgs()
        {
        }
        public static new SchemaBundleArgs Empty => new SchemaBundleArgs();
    }

    public sealed class SchemaBundleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If true, allow backwards incompatible changes.
        /// </summary>
        [Input("ignoreWarnings")]
        public Input<bool>? IgnoreWarnings { get; set; }

        /// <summary>
        /// The name of the instance to create the schema bundle within.
        /// </summary>
        [Input("instance")]
        public Input<string>? Instance { get; set; }

        /// <summary>
        /// The unique name of the requested schema bundle. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;/schemaBundles/&lt;schemaBundleId&gt;`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// File descriptor set, generated by protoc.
        /// To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
        /// $ protoc --include_imports --include_source_info test.proto -o out.pb
        /// Structure is documented below.
        /// </summary>
        [Input("protoSchema")]
        public Input<Inputs.SchemaBundleProtoSchemaGetArgs>? ProtoSchema { get; set; }

        /// <summary>
        /// The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
        /// </summary>
        [Input("schemaBundleId")]
        public Input<string>? SchemaBundleId { get; set; }

        /// <summary>
        /// The name of the table to create the schema bundle within.
        /// </summary>
        [Input("table")]
        public Input<string>? Table { get; set; }

        public SchemaBundleState()
        {
        }
        public static new SchemaBundleState Empty => new SchemaBundleState();
    }
}
