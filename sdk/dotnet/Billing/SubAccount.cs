// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Billing
{
    /// <summary>
    /// ## Import
    /// 
    /// Billing Subaccounts can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:billing/subAccount:SubAccount default billingAccounts/{billing_account_id}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:billing/subAccount:SubAccount")]
    public partial class SubAccount : Pulumi.CustomResource
    {
        /// <summary>
        /// The billing account id.
        /// </summary>
        [Output("billingAccountId")]
        public Output<string> BillingAccountId { get; private set; } = null!;

        [Output("deletionPolicy")]
        public Output<string?> DeletionPolicy { get; private set; } = null!;

        /// <summary>
        /// The display name of the billing account.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The name of the master billing account that the subaccount
        /// will be created under in the form `{billing_account_id}` or `billingAccounts/{billing_account_id}`.
        /// </summary>
        [Output("masterBillingAccount")]
        public Output<string> MasterBillingAccount { get; private set; } = null!;

        /// <summary>
        /// The resource name of the billing account in the form `billingAccounts/{billing_account_id}`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// `true` if the billing account is open, `false` if the billing account is closed.
        /// </summary>
        [Output("open")]
        public Output<bool> Open { get; private set; } = null!;


        /// <summary>
        /// Create a SubAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SubAccount(string name, SubAccountArgs args, CustomResourceOptions? options = null)
            : base("gcp:billing/subAccount:SubAccount", name, args ?? new SubAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SubAccount(string name, Input<string> id, SubAccountState? state = null, CustomResourceOptions? options = null)
            : base("gcp:billing/subAccount:SubAccount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SubAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SubAccount Get(string name, Input<string> id, SubAccountState? state = null, CustomResourceOptions? options = null)
        {
            return new SubAccount(name, id, state, options);
        }
    }

    public sealed class SubAccountArgs : Pulumi.ResourceArgs
    {
        [Input("deletionPolicy")]
        public Input<string>? DeletionPolicy { get; set; }

        /// <summary>
        /// The display name of the billing account.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The name of the master billing account that the subaccount
        /// will be created under in the form `{billing_account_id}` or `billingAccounts/{billing_account_id}`.
        /// </summary>
        [Input("masterBillingAccount", required: true)]
        public Input<string> MasterBillingAccount { get; set; } = null!;

        public SubAccountArgs()
        {
        }
    }

    public sealed class SubAccountState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The billing account id.
        /// </summary>
        [Input("billingAccountId")]
        public Input<string>? BillingAccountId { get; set; }

        [Input("deletionPolicy")]
        public Input<string>? DeletionPolicy { get; set; }

        /// <summary>
        /// The display name of the billing account.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The name of the master billing account that the subaccount
        /// will be created under in the form `{billing_account_id}` or `billingAccounts/{billing_account_id}`.
        /// </summary>
        [Input("masterBillingAccount")]
        public Input<string>? MasterBillingAccount { get; set; }

        /// <summary>
        /// The resource name of the billing account in the form `billingAccounts/{billing_account_id}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `true` if the billing account is open, `false` if the billing account is closed.
        /// </summary>
        [Input("open")]
        public Input<bool>? Open { get; set; }

        public SubAccountState()
        {
        }
    }
}
