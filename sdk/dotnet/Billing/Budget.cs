// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Billing
{
    /// <summary>
    /// Budget configuration for a billing account.
    /// 
    /// To get more information about Budget, see:
    /// 
    /// * [API documentation](https://cloud.google.com/billing/docs/reference/budget/rest/v1/billingAccounts.budgets)
    /// * How-to Guides
    ///     * [Creating a budget](https://cloud.google.com/billing/docs/how-to/budgets)
    /// 
    /// &gt; **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
    /// you must specify a `billing_project` and set `user_project_override` to true
    /// in the provider configuration. Otherwise the Billing Budgets API will return a 403 error.
    /// Your account must have the `serviceusage.services.use` permission on the
    /// `billing_project` you defined.
    /// 
    /// ## Example Usage
    /// ### Billing Budget Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var account = Output.Create(Gcp.Organizations.GetBillingAccount.InvokeAsync(new Gcp.Organizations.GetBillingAccountArgs
    ///         {
    ///             BillingAccount = "000000-0000000-0000000-000000",
    ///         }));
    ///         var budget = new Gcp.Billing.Budget("budget", new Gcp.Billing.BudgetArgs
    ///         {
    ///             BillingAccount = account.Apply(account =&gt; account.Id),
    ///             DisplayName = "Example Billing Budget",
    ///             Amount = new Gcp.Billing.Inputs.BudgetAmountArgs
    ///             {
    ///                 SpecifiedAmount = new Gcp.Billing.Inputs.BudgetAmountSpecifiedAmountArgs
    ///                 {
    ///                     CurrencyCode = "USD",
    ///                     Units = "100000",
    ///                 },
    ///             },
    ///             ThresholdRules = 
    ///             {
    ///                 new Gcp.Billing.Inputs.BudgetThresholdRuleArgs
    ///                 {
    ///                     ThresholdPercent = 0.5,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Billing Budget Lastperiod
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var account = Output.Create(Gcp.Organizations.GetBillingAccount.InvokeAsync(new Gcp.Organizations.GetBillingAccountArgs
    ///         {
    ///             BillingAccount = "000000-0000000-0000000-000000",
    ///         }));
    ///         var project = Output.Create(Gcp.Organizations.GetProject.InvokeAsync());
    ///         var budget = new Gcp.Billing.Budget("budget", new Gcp.Billing.BudgetArgs
    ///         {
    ///             BillingAccount = account.Apply(account =&gt; account.Id),
    ///             DisplayName = "Example Billing Budget",
    ///             BudgetFilter = new Gcp.Billing.Inputs.BudgetBudgetFilterArgs
    ///             {
    ///                 Projects = 
    ///                 {
    ///                     project.Apply(project =&gt; $"projects/{project.Number}"),
    ///                 },
    ///             },
    ///             Amount = new Gcp.Billing.Inputs.BudgetAmountArgs
    ///             {
    ///                 LastPeriodAmount = true,
    ///             },
    ///             ThresholdRules = 
    ///             {
    ///                 new Gcp.Billing.Inputs.BudgetThresholdRuleArgs
    ///                 {
    ///                     ThresholdPercent = 10,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Billing Budget Filter
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var account = Output.Create(Gcp.Organizations.GetBillingAccount.InvokeAsync(new Gcp.Organizations.GetBillingAccountArgs
    ///         {
    ///             BillingAccount = "000000-0000000-0000000-000000",
    ///         }));
    ///         var project = Output.Create(Gcp.Organizations.GetProject.InvokeAsync());
    ///         var budget = new Gcp.Billing.Budget("budget", new Gcp.Billing.BudgetArgs
    ///         {
    ///             BillingAccount = account.Apply(account =&gt; account.Id),
    ///             DisplayName = "Example Billing Budget",
    ///             BudgetFilter = new Gcp.Billing.Inputs.BudgetBudgetFilterArgs
    ///             {
    ///                 Projects = 
    ///                 {
    ///                     project.Apply(project =&gt; $"projects/{project.Number}"),
    ///                 },
    ///                 CreditTypesTreatment = "EXCLUDE_ALL_CREDITS",
    ///                 Services = 
    ///                 {
    ///                     "services/24E6-581D-38E5",
    ///                 },
    ///             },
    ///             Amount = new Gcp.Billing.Inputs.BudgetAmountArgs
    ///             {
    ///                 SpecifiedAmount = new Gcp.Billing.Inputs.BudgetAmountSpecifiedAmountArgs
    ///                 {
    ///                     CurrencyCode = "USD",
    ///                     Units = "100000",
    ///                 },
    ///             },
    ///             ThresholdRules = 
    ///             {
    ///                 new Gcp.Billing.Inputs.BudgetThresholdRuleArgs
    ///                 {
    ///                     ThresholdPercent = 0.5,
    ///                 },
    ///                 new Gcp.Billing.Inputs.BudgetThresholdRuleArgs
    ///                 {
    ///                     ThresholdPercent = 0.9,
    ///                     SpendBasis = "FORECASTED_SPEND",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Billing Budget Notify
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var account = Output.Create(Gcp.Organizations.GetBillingAccount.InvokeAsync(new Gcp.Organizations.GetBillingAccountArgs
    ///         {
    ///             BillingAccount = "000000-0000000-0000000-000000",
    ///         }));
    ///         var project = Output.Create(Gcp.Organizations.GetProject.InvokeAsync());
    ///         var notificationChannel = new Gcp.Monitoring.NotificationChannel("notificationChannel", new Gcp.Monitoring.NotificationChannelArgs
    ///         {
    ///             DisplayName = "Example Notification Channel",
    ///             Type = "email",
    ///             Labels = 
    ///             {
    ///                 { "email_address", "address@example.com" },
    ///             },
    ///         });
    ///         var budget = new Gcp.Billing.Budget("budget", new Gcp.Billing.BudgetArgs
    ///         {
    ///             BillingAccount = account.Apply(account =&gt; account.Id),
    ///             DisplayName = "Example Billing Budget",
    ///             BudgetFilter = new Gcp.Billing.Inputs.BudgetBudgetFilterArgs
    ///             {
    ///                 Projects = 
    ///                 {
    ///                     project.Apply(project =&gt; $"projects/{project.Number}"),
    ///                 },
    ///             },
    ///             Amount = new Gcp.Billing.Inputs.BudgetAmountArgs
    ///             {
    ///                 SpecifiedAmount = new Gcp.Billing.Inputs.BudgetAmountSpecifiedAmountArgs
    ///                 {
    ///                     CurrencyCode = "USD",
    ///                     Units = "100000",
    ///                 },
    ///             },
    ///             ThresholdRules = 
    ///             {
    ///                 new Gcp.Billing.Inputs.BudgetThresholdRuleArgs
    ///                 {
    ///                     ThresholdPercent = 1,
    ///                 },
    ///                 new Gcp.Billing.Inputs.BudgetThresholdRuleArgs
    ///                 {
    ///                     ThresholdPercent = 1,
    ///                     SpendBasis = "FORECASTED_SPEND",
    ///                 },
    ///             },
    ///             AllUpdatesRule = new Gcp.Billing.Inputs.BudgetAllUpdatesRuleArgs
    ///             {
    ///                 MonitoringNotificationChannels = 
    ///                 {
    ///                     notificationChannel.Id,
    ///                 },
    ///                 DisableDefaultIamRecipients = true,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource does not support import.
    /// </summary>
    [GcpResourceType("gcp:billing/budget:Budget")]
    public partial class Budget : Pulumi.CustomResource
    {
        /// <summary>
        /// Defines notifications that are sent on every update to the
        /// billing account's spend, regardless of the thresholds defined
        /// using threshold rules.
        /// Structure is documented below.
        /// </summary>
        [Output("allUpdatesRule")]
        public Output<Outputs.BudgetAllUpdatesRule?> AllUpdatesRule { get; private set; } = null!;

        /// <summary>
        /// The budgeted amount for each usage period.
        /// Structure is documented below.
        /// </summary>
        [Output("amount")]
        public Output<Outputs.BudgetAmount> Amount { get; private set; } = null!;

        /// <summary>
        /// ID of the billing account to set a budget on.
        /// </summary>
        [Output("billingAccount")]
        public Output<string> BillingAccount { get; private set; } = null!;

        /// <summary>
        /// Filters that define which resources are used to compute the actual
        /// spend against the budget.
        /// Structure is documented below.
        /// </summary>
        [Output("budgetFilter")]
        public Output<Outputs.BudgetBudgetFilter> BudgetFilter { get; private set; } = null!;

        /// <summary>
        /// User data for display name in UI. Must be &lt;= 60 chars.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
        /// billingAccounts/{billingAccountId}/budgets/{budgetId}.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Rules that trigger alerts (notifications of thresholds being
        /// crossed) when spend exceeds the specified percentages of the
        /// budget.
        /// Structure is documented below.
        /// </summary>
        [Output("thresholdRules")]
        public Output<ImmutableArray<Outputs.BudgetThresholdRule>> ThresholdRules { get; private set; } = null!;


        /// <summary>
        /// Create a Budget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Budget(string name, BudgetArgs args, CustomResourceOptions? options = null)
            : base("gcp:billing/budget:Budget", name, args ?? new BudgetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Budget(string name, Input<string> id, BudgetState? state = null, CustomResourceOptions? options = null)
            : base("gcp:billing/budget:Budget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Budget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Budget Get(string name, Input<string> id, BudgetState? state = null, CustomResourceOptions? options = null)
        {
            return new Budget(name, id, state, options);
        }
    }

    public sealed class BudgetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines notifications that are sent on every update to the
        /// billing account's spend, regardless of the thresholds defined
        /// using threshold rules.
        /// Structure is documented below.
        /// </summary>
        [Input("allUpdatesRule")]
        public Input<Inputs.BudgetAllUpdatesRuleArgs>? AllUpdatesRule { get; set; }

        /// <summary>
        /// The budgeted amount for each usage period.
        /// Structure is documented below.
        /// </summary>
        [Input("amount", required: true)]
        public Input<Inputs.BudgetAmountArgs> Amount { get; set; } = null!;

        /// <summary>
        /// ID of the billing account to set a budget on.
        /// </summary>
        [Input("billingAccount", required: true)]
        public Input<string> BillingAccount { get; set; } = null!;

        /// <summary>
        /// Filters that define which resources are used to compute the actual
        /// spend against the budget.
        /// Structure is documented below.
        /// </summary>
        [Input("budgetFilter")]
        public Input<Inputs.BudgetBudgetFilterArgs>? BudgetFilter { get; set; }

        /// <summary>
        /// User data for display name in UI. Must be &lt;= 60 chars.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("thresholdRules", required: true)]
        private InputList<Inputs.BudgetThresholdRuleArgs>? _thresholdRules;

        /// <summary>
        /// Rules that trigger alerts (notifications of thresholds being
        /// crossed) when spend exceeds the specified percentages of the
        /// budget.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.BudgetThresholdRuleArgs> ThresholdRules
        {
            get => _thresholdRules ?? (_thresholdRules = new InputList<Inputs.BudgetThresholdRuleArgs>());
            set => _thresholdRules = value;
        }

        public BudgetArgs()
        {
        }
    }

    public sealed class BudgetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines notifications that are sent on every update to the
        /// billing account's spend, regardless of the thresholds defined
        /// using threshold rules.
        /// Structure is documented below.
        /// </summary>
        [Input("allUpdatesRule")]
        public Input<Inputs.BudgetAllUpdatesRuleGetArgs>? AllUpdatesRule { get; set; }

        /// <summary>
        /// The budgeted amount for each usage period.
        /// Structure is documented below.
        /// </summary>
        [Input("amount")]
        public Input<Inputs.BudgetAmountGetArgs>? Amount { get; set; }

        /// <summary>
        /// ID of the billing account to set a budget on.
        /// </summary>
        [Input("billingAccount")]
        public Input<string>? BillingAccount { get; set; }

        /// <summary>
        /// Filters that define which resources are used to compute the actual
        /// spend against the budget.
        /// Structure is documented below.
        /// </summary>
        [Input("budgetFilter")]
        public Input<Inputs.BudgetBudgetFilterGetArgs>? BudgetFilter { get; set; }

        /// <summary>
        /// User data for display name in UI. Must be &lt;= 60 chars.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
        /// billingAccounts/{billingAccountId}/budgets/{budgetId}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("thresholdRules")]
        private InputList<Inputs.BudgetThresholdRuleGetArgs>? _thresholdRules;

        /// <summary>
        /// Rules that trigger alerts (notifications of thresholds being
        /// crossed) when spend exceeds the specified percentages of the
        /// budget.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.BudgetThresholdRuleGetArgs> ThresholdRules
        {
            get => _thresholdRules ?? (_thresholdRules = new InputList<Inputs.BudgetThresholdRuleGetArgs>());
            set => _thresholdRules = value;
        }

        public BudgetState()
        {
        }
    }
}
