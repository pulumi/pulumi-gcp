// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CertificateManager.Outputs
{

    [OutputType]
    public sealed class GetCertificatesCertificateResult
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        public readonly string Description;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        /// <summary>
        /// Set of label tags associated with the Certificate resource.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field 'effective_labels' for all of the labels present on the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The Certificate Manager location. If not specified, "global" is used.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Configuration and state of a Managed Certificate.
        /// Certificate Manager provisions and renews Managed Certificates
        /// automatically, for as long as it's authorized to do so.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificatesCertificateManagedResult> Manageds;
        /// <summary>
        /// A user-defined name of the certificate. Certificate names must be unique
        /// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
        /// and all following characters must be a dash, underscore, letter or digit.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// The combination of labels configured directly on the resource
        ///  and default labels configured on the provider.
        /// </summary>
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        /// <summary>
        /// The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6)
        /// </summary>
        public readonly ImmutableArray<string> SanDnsnames;
        /// <summary>
        /// The scope of the certificate.
        /// 
        /// DEFAULT: Certificates with default scope are served from core Google data centers.
        /// If unsure, choose this option.
        /// 
        /// EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates, served from Edge Points of Presence.
        /// See https://cloud.google.com/vpc/docs/edge-locations.
        /// 
        /// ALL_REGIONS: Certificates with ALL_REGIONS scope are served from all GCP regions (You can only use ALL_REGIONS with global certs).
        /// See https://cloud.google.com/compute/docs/regions-zones.
        /// 
        /// CLIENT_AUTH: Certificates with CLIENT_AUTH scope are used by a load balancer (TLS client) to be presented to the backend (TLS server) when backend mTLS is configured.
        /// See https://cloud.google.com/load-balancing/docs/backend-authenticated-tls-backend-mtls#client-certificate.
        /// </summary>
        public readonly string Scope;

        [OutputConstructor]
        private GetCertificatesCertificateResult(
            string description,

            ImmutableDictionary<string, string> effectiveLabels,

            ImmutableDictionary<string, string> labels,

            string location,

            ImmutableArray<Outputs.GetCertificatesCertificateManagedResult> manageds,

            string name,

            string project,

            ImmutableDictionary<string, string> pulumiLabels,

            ImmutableArray<string> sanDnsnames,

            string scope)
        {
            Description = description;
            EffectiveLabels = effectiveLabels;
            Labels = labels;
            Location = location;
            Manageds = manageds;
            Name = name;
            Project = project;
            PulumiLabels = pulumiLabels;
            SanDnsnames = sanDnsnames;
            Scope = scope;
        }
    }
}
