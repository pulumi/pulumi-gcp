// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CertificateManager
{
    /// <summary>
    /// CertificateMapEntry is a list of certificate configurations,
    /// that have been issued for a particular hostname
    /// 
    /// &gt; **Warning:** These resources require allow-listing to use, and are not openly available to all Cloud customers. Engage with your Cloud account team to discuss how to onboard.
    /// 
    /// ## Example Usage
    /// ### Certificate Manager Certificate Map Entry Full
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var certificateMap = new Gcp.CertificateManager.CertificateMap("certificateMap", new Gcp.CertificateManager.CertificateMapArgs
    ///         {
    ///             Description = "My acceptance test certificate map",
    ///             Labels = 
    ///             {
    ///                 { "terraform", "true" },
    ///                 { "acc-test", "true" },
    ///             },
    ///         });
    ///         var instance = new Gcp.CertificateManager.DnsAuthorization("instance", new Gcp.CertificateManager.DnsAuthorizationArgs
    ///         {
    ///             Description = "The default dnss",
    ///             Domain = "subdomain.hashicorptest.com",
    ///         });
    ///         var instance2 = new Gcp.CertificateManager.DnsAuthorization("instance2", new Gcp.CertificateManager.DnsAuthorizationArgs
    ///         {
    ///             Description = "The default dnss",
    ///             Domain = "subdomain2.hashicorptest.com",
    ///         });
    ///         var certificate = new Gcp.CertificateManager.Certificate("certificate", new Gcp.CertificateManager.CertificateArgs
    ///         {
    ///             Description = "The default cert",
    ///             Scope = "DEFAULT",
    ///             Managed = new Gcp.CertificateManager.Inputs.CertificateManagedArgs
    ///             {
    ///                 Domains = 
    ///                 {
    ///                     instance.Domain,
    ///                     instance2.Domain,
    ///                 },
    ///                 DnsAuthorizations = 
    ///                 {
    ///                     instance.Id,
    ///                     instance2.Id,
    ///                 },
    ///             },
    ///         });
    ///         var @default = new Gcp.CertificateManager.CertificateMapEntry("default", new Gcp.CertificateManager.CertificateMapEntryArgs
    ///         {
    ///             Description = "My acceptance test certificate map entry",
    ///             Map = certificateMap.Name,
    ///             Labels = 
    ///             {
    ///                 { "terraform", "true" },
    ///                 { "acc-test", "true" },
    ///             },
    ///             Certificates = 
    ///             {
    ///                 certificate.Id,
    ///             },
    ///             Matcher = "PRIMARY",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// CertificateMapEntry can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificatemanager/certificateMapEntry:CertificateMapEntry default projects/{{project}}/locations/global/certificateMaps/{{map}}/certificateMapEntries/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificatemanager/certificateMapEntry:CertificateMapEntry default {{project}}/{{map}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificatemanager/certificateMapEntry:CertificateMapEntry default {{map}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:certificatemanager/certificateMapEntry:CertificateMapEntry")]
    public partial class CertificateMapEntry : Pulumi.CustomResource
    {
        /// <summary>
        /// A set of Certificates defines for the given hostname.
        /// There can be defined up to fifteen certificates in each Certificate Map Entry.
        /// Each certificate must match pattern projects/*/locations/*/certificates/*.
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableArray<string>> Certificates { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp of a Certificate Map Entry. Timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
        /// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// CertificateMapEntry is a list of certificate configurations,
        /// that have been issued for a particular hostname
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A Hostname (FQDN, e.g. example.com) or a wildcard hostname expression (*.example.com)
        /// for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for
        /// selecting a proper certificate.
        /// </summary>
        [Output("hostname")]
        public Output<string?> Hostname { get; private set; } = null!;

        /// <summary>
        /// Set of labels associated with a Certificate Map Entry.
        /// An object containing a list of "key": value pairs.
        /// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// A map entry that is inputted into the cetrificate map
        /// </summary>
        [Output("map")]
        public Output<string> Map { get; private set; } = null!;

        /// <summary>
        /// A predefined matcher for particular cases, other than SNI selection
        /// Possible values are `MATCHER_UNSPECIFIED` and `PRIMARY`.
        /// </summary>
        [Output("matcher")]
        public Output<string?> Matcher { get; private set; } = null!;

        /// <summary>
        /// A user-defined name of the Certificate Map Entry. Certificate Map Entry
        /// names must be unique globally and match pattern
        /// 'projects/*/locations/*/certificateMaps/*/certificateMapEntries/*'
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// A serving state of this Certificate Map Entry. The status is undefined. The configuration is serving. Update is in
        /// progress. Some frontends may serve this configuration.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Update timestamp of a Certificate Map Entry. Timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
        /// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateMapEntry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateMapEntry(string name, CertificateMapEntryArgs args, CustomResourceOptions? options = null)
            : base("gcp:certificatemanager/certificateMapEntry:CertificateMapEntry", name, args ?? new CertificateMapEntryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateMapEntry(string name, Input<string> id, CertificateMapEntryState? state = null, CustomResourceOptions? options = null)
            : base("gcp:certificatemanager/certificateMapEntry:CertificateMapEntry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateMapEntry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateMapEntry Get(string name, Input<string> id, CertificateMapEntryState? state = null, CustomResourceOptions? options = null)
        {
            return new CertificateMapEntry(name, id, state, options);
        }
    }

    public sealed class CertificateMapEntryArgs : Pulumi.ResourceArgs
    {
        [Input("certificates", required: true)]
        private InputList<string>? _certificates;

        /// <summary>
        /// A set of Certificates defines for the given hostname.
        /// There can be defined up to fifteen certificates in each Certificate Map Entry.
        /// Each certificate must match pattern projects/*/locations/*/certificates/*.
        /// </summary>
        public InputList<string> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<string>());
            set => _certificates = value;
        }

        /// <summary>
        /// CertificateMapEntry is a list of certificate configurations,
        /// that have been issued for a particular hostname
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A Hostname (FQDN, e.g. example.com) or a wildcard hostname expression (*.example.com)
        /// for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for
        /// selecting a proper certificate.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of labels associated with a Certificate Map Entry.
        /// An object containing a list of "key": value pairs.
        /// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// A map entry that is inputted into the cetrificate map
        /// </summary>
        [Input("map", required: true)]
        public Input<string> Map { get; set; } = null!;

        /// <summary>
        /// A predefined matcher for particular cases, other than SNI selection
        /// Possible values are `MATCHER_UNSPECIFIED` and `PRIMARY`.
        /// </summary>
        [Input("matcher")]
        public Input<string>? Matcher { get; set; }

        /// <summary>
        /// A user-defined name of the Certificate Map Entry. Certificate Map Entry
        /// names must be unique globally and match pattern
        /// 'projects/*/locations/*/certificateMaps/*/certificateMapEntries/*'
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public CertificateMapEntryArgs()
        {
        }
    }

    public sealed class CertificateMapEntryState : Pulumi.ResourceArgs
    {
        [Input("certificates")]
        private InputList<string>? _certificates;

        /// <summary>
        /// A set of Certificates defines for the given hostname.
        /// There can be defined up to fifteen certificates in each Certificate Map Entry.
        /// Each certificate must match pattern projects/*/locations/*/certificates/*.
        /// </summary>
        public InputList<string> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<string>());
            set => _certificates = value;
        }

        /// <summary>
        /// Creation timestamp of a Certificate Map Entry. Timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
        /// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// CertificateMapEntry is a list of certificate configurations,
        /// that have been issued for a particular hostname
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A Hostname (FQDN, e.g. example.com) or a wildcard hostname expression (*.example.com)
        /// for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for
        /// selecting a proper certificate.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of labels associated with a Certificate Map Entry.
        /// An object containing a list of "key": value pairs.
        /// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// A map entry that is inputted into the cetrificate map
        /// </summary>
        [Input("map")]
        public Input<string>? Map { get; set; }

        /// <summary>
        /// A predefined matcher for particular cases, other than SNI selection
        /// Possible values are `MATCHER_UNSPECIFIED` and `PRIMARY`.
        /// </summary>
        [Input("matcher")]
        public Input<string>? Matcher { get; set; }

        /// <summary>
        /// A user-defined name of the Certificate Map Entry. Certificate Map Entry
        /// names must be unique globally and match pattern
        /// 'projects/*/locations/*/certificateMaps/*/certificateMapEntries/*'
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A serving state of this Certificate Map Entry. The status is undefined. The configuration is serving. Update is in
        /// progress. Some frontends may serve this configuration.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Update timestamp of a Certificate Map Entry. Timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
        /// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public CertificateMapEntryState()
        {
        }
    }
}
