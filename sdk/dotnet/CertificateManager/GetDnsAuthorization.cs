// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CertificateManager
{
    public static class GetDnsAuthorization
    {
        /// <summary>
        /// Use this data source to get information about a Certificate Manager DNS Authorization. For more details, see the [API documentation](https://cloud.google.com/certificate-manager/docs/reference/certificate-manager/rest/v1/projects.locations.dnsAuthorizations).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.CertificateManager.GetDnsAuthorization.Invoke(new()
        ///     {
        ///         Name = "my-dns-auth",
        ///         Location = "global",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDnsAuthorizationResult> InvokeAsync(GetDnsAuthorizationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDnsAuthorizationResult>("gcp:certificatemanager/getDnsAuthorization:getDnsAuthorization", args ?? new GetDnsAuthorizationArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Certificate Manager DNS Authorization. For more details, see the [API documentation](https://cloud.google.com/certificate-manager/docs/reference/certificate-manager/rest/v1/projects.locations.dnsAuthorizations).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.CertificateManager.GetDnsAuthorization.Invoke(new()
        ///     {
        ///         Name = "my-dns-auth",
        ///         Location = "global",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDnsAuthorizationResult> Invoke(GetDnsAuthorizationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsAuthorizationResult>("gcp:certificatemanager/getDnsAuthorization:getDnsAuthorization", args ?? new GetDnsAuthorizationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Certificate Manager DNS Authorization. For more details, see the [API documentation](https://cloud.google.com/certificate-manager/docs/reference/certificate-manager/rest/v1/projects.locations.dnsAuthorizations).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.CertificateManager.GetDnsAuthorization.Invoke(new()
        ///     {
        ///         Name = "my-dns-auth",
        ///         Location = "global",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDnsAuthorizationResult> Invoke(GetDnsAuthorizationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsAuthorizationResult>("gcp:certificatemanager/getDnsAuthorization:getDnsAuthorization", args ?? new GetDnsAuthorizationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDnsAuthorizationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the DNS Authorization.
        /// </summary>
        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        /// <summary>
        /// The Certificate Manager location. If not specified, "global" is used.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The name of the DNS Authorization.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetDnsAuthorizationArgs()
        {
        }
        public static new GetDnsAuthorizationArgs Empty => new GetDnsAuthorizationArgs();
    }

    public sealed class GetDnsAuthorizationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the DNS Authorization.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// The Certificate Manager location. If not specified, "global" is used.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the DNS Authorization.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDnsAuthorizationInvokeArgs()
        {
        }
        public static new GetDnsAuthorizationInvokeArgs Empty => new GetDnsAuthorizationInvokeArgs();
    }


    [OutputType]
    public sealed class GetDnsAuthorizationResult
    {
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetDnsAuthorizationDnsResourceRecordResult> DnsResourceRecords;
        public readonly string Domain;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string? Location;
        public readonly string Name;
        public readonly string? Project;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly string Type;

        [OutputConstructor]
        private GetDnsAuthorizationResult(
            string description,

            ImmutableArray<Outputs.GetDnsAuthorizationDnsResourceRecordResult> dnsResourceRecords,

            string domain,

            ImmutableDictionary<string, string> effectiveLabels,

            string id,

            ImmutableDictionary<string, string> labels,

            string? location,

            string name,

            string? project,

            ImmutableDictionary<string, string> pulumiLabels,

            string type)
        {
            Description = description;
            DnsResourceRecords = dnsResourceRecords;
            Domain = domain;
            EffectiveLabels = effectiveLabels;
            Id = id;
            Labels = labels;
            Location = location;
            Name = name;
            Project = project;
            PulumiLabels = pulumiLabels;
            Type = type;
        }
    }
}
