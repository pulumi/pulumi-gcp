// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CertificateManager
{
    public static class GetCertificates
    {
        /// <summary>
        /// List all certificates within Google Certificate Manager for a given project, region or filter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.CertificateManager.GetCertificates.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// ### With A Filter
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.CertificateManager.GetCertificates.Invoke(new()
        ///     {
        ///         Filter = "name:projects/PROJECT_ID/locations/REGION/certificates/certificate-name-*",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCertificatesResult> InvokeAsync(GetCertificatesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificatesResult>("gcp:certificatemanager/getCertificates:getCertificates", args ?? new GetCertificatesArgs(), options.WithDefaults());

        /// <summary>
        /// List all certificates within Google Certificate Manager for a given project, region or filter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.CertificateManager.GetCertificates.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// ### With A Filter
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.CertificateManager.GetCertificates.Invoke(new()
        ///     {
        ///         Filter = "name:projects/PROJECT_ID/locations/REGION/certificates/certificate-name-*",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificatesResult> Invoke(GetCertificatesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificatesResult>("gcp:certificatemanager/getCertificates:getCertificates", args ?? new GetCertificatesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// List all certificates within Google Certificate Manager for a given project, region or filter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.CertificateManager.GetCertificates.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// ### With A Filter
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Gcp.CertificateManager.GetCertificates.Invoke(new()
        ///     {
        ///         Filter = "name:projects/PROJECT_ID/locations/REGION/certificates/certificate-name-*",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificatesResult> Invoke(GetCertificatesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificatesResult>("gcp:certificatemanager/getCertificates:getCertificates", args ?? new GetCertificatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter expression to restrict the certificates returned.
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// The region in which the resource belongs. If it is not provided, `GLOBAL` is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetCertificatesArgs()
        {
        }
        public static new GetCertificatesArgs Empty => new GetCertificatesArgs();
    }

    public sealed class GetCertificatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter expression to restrict the certificates returned.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The region in which the resource belongs. If it is not provided, `GLOBAL` is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetCertificatesInvokeArgs()
        {
        }
        public static new GetCertificatesInvokeArgs Empty => new GetCertificatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificatesResult
    {
        public readonly ImmutableArray<Outputs.GetCertificatesCertificateResult> Certificates;
        public readonly string? Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Region;

        [OutputConstructor]
        private GetCertificatesResult(
            ImmutableArray<Outputs.GetCertificatesCertificateResult> certificates,

            string? filter,

            string id,

            string? region)
        {
            Certificates = certificates;
            Filter = filter;
            Id = id;
            Region = region;
        }
    }
}
