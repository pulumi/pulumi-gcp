// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CertificateManager
{
    /// <summary>
    /// DnsAuthorization represents a HTTP-reachable backend for a DnsAuthorization.
    /// 
    /// ## Example Usage
    /// ### Certificate Manager Dns Authorization Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CertificateManager.DnsAuthorization("default", new()
    ///     {
    ///         Description = "The default dnss",
    ///         Domain = "%{random_suffix}.hashicorptest.com",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["recordNameToInsert"] = 
    ///         {
    ///             { "google_certificate_manager_dns_authorization.default.dns_resource_record.0.name", new[]
    ///             {
    ///                 null,
    ///             } },
    ///             { "value", "" },
    ///         },
    ///         ["recordTypeToInsert"] = 
    ///         {
    ///             { "google_certificate_manager_dns_authorization.default.dns_resource_record.0.type", new[]
    ///             {
    ///                 null,
    ///             } },
    ///             { "value", "" },
    ///         },
    ///         ["recordDataToInsert"] = 
    ///         {
    ///             { "google_certificate_manager_dns_authorization.default.dns_resource_record.0.data", new[]
    ///             {
    ///                 null,
    ///             } },
    ///             { "value", "" },
    ///         },
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DnsAuthorization can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificatemanager/dnsAuthorization:DnsAuthorization default projects/{{project}}/locations/global/dnsAuthorizations/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificatemanager/dnsAuthorization:DnsAuthorization default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:certificatemanager/dnsAuthorization:DnsAuthorization default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:certificatemanager/dnsAuthorization:DnsAuthorization")]
    public partial class DnsAuthorization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The structure describing the DNS Resource Record that needs to be added
        /// to DNS configuration for the authorization to be usable by
        /// certificate.
        /// Structure is documented below.
        /// </summary>
        [Output("dnsResourceRecords")]
        public Output<ImmutableArray<Outputs.DnsAuthorizationDnsResourceRecord>> DnsResourceRecords { get; private set; } = null!;

        /// <summary>
        /// A domain which is being authorized. A DnsAuthorization resource covers a
        /// single domain and its wildcard, e.g. authorization for "example.com" can
        /// be used to issue certificates for "example.com" and "*.example.com".
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Set of label tags associated with the DNS Authorization resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the resource; provided by the client when the resource is created.
        /// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
        /// and all following characters must be a dash, underscore, letter or digit.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a DnsAuthorization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsAuthorization(string name, DnsAuthorizationArgs args, CustomResourceOptions? options = null)
            : base("gcp:certificatemanager/dnsAuthorization:DnsAuthorization", name, args ?? new DnsAuthorizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsAuthorization(string name, Input<string> id, DnsAuthorizationState? state = null, CustomResourceOptions? options = null)
            : base("gcp:certificatemanager/dnsAuthorization:DnsAuthorization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsAuthorization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsAuthorization Get(string name, Input<string> id, DnsAuthorizationState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsAuthorization(name, id, state, options);
        }
    }

    public sealed class DnsAuthorizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A domain which is being authorized. A DnsAuthorization resource covers a
        /// single domain and its wildcard, e.g. authorization for "example.com" can
        /// be used to issue certificates for "example.com" and "*.example.com".
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the DNS Authorization resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the resource; provided by the client when the resource is created.
        /// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
        /// and all following characters must be a dash, underscore, letter or digit.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public DnsAuthorizationArgs()
        {
        }
        public static new DnsAuthorizationArgs Empty => new DnsAuthorizationArgs();
    }

    public sealed class DnsAuthorizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dnsResourceRecords")]
        private InputList<Inputs.DnsAuthorizationDnsResourceRecordGetArgs>? _dnsResourceRecords;

        /// <summary>
        /// The structure describing the DNS Resource Record that needs to be added
        /// to DNS configuration for the authorization to be usable by
        /// certificate.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DnsAuthorizationDnsResourceRecordGetArgs> DnsResourceRecords
        {
            get => _dnsResourceRecords ?? (_dnsResourceRecords = new InputList<Inputs.DnsAuthorizationDnsResourceRecordGetArgs>());
            set => _dnsResourceRecords = value;
        }

        /// <summary>
        /// A domain which is being authorized. A DnsAuthorization resource covers a
        /// single domain and its wildcard, e.g. authorization for "example.com" can
        /// be used to issue certificates for "example.com" and "*.example.com".
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the DNS Authorization resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the resource; provided by the client when the resource is created.
        /// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
        /// and all following characters must be a dash, underscore, letter or digit.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public DnsAuthorizationState()
        {
        }
        public static new DnsAuthorizationState Empty => new DnsAuthorizationState();
    }
}
