// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQuery
{
    /// <summary>
    /// Creates a table resource in a dataset for Google BigQuery. For more information see
    /// [the official documentation](https://cloud.google.com/bigquery/docs/) and
    /// [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables).
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/bigquery_table.html.markdown.
    /// </summary>
    public partial class Table : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies column names to use for data clustering.
        /// Up to four top-level columns are allowed, and should be specified in
        /// descending priority order.
        /// </summary>
        [Output("clusterings")]
        public Output<ImmutableArray<string>> Clusterings { get; private set; } = null!;

        /// <summary>
        /// The time when this table was created, in milliseconds since the epoch.
        /// </summary>
        [Output("creationTime")]
        public Output<int> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The dataset ID to create the table in.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Output("datasetId")]
        public Output<string> DatasetId { get; private set; } = null!;

        /// <summary>
        /// The field description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies how the table should be encrypted.
        /// If left blank, the table will be encrypted with a Google-managed key; that process
        /// is transparent to the user.  Structure is documented below.
        /// </summary>
        [Output("encryptionConfiguration")]
        public Output<Outputs.TableEncryptionConfiguration?> EncryptionConfiguration { get; private set; } = null!;

        /// <summary>
        /// A hash of the resource.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The time when this table expires, in
        /// milliseconds since the epoch. If not present, the table will persist
        /// indefinitely. Expired tables will be deleted and their storage
        /// reclaimed.
        /// </summary>
        [Output("expirationTime")]
        public Output<int> ExpirationTime { get; private set; } = null!;

        /// <summary>
        /// Describes the data format,
        /// location, and other properties of a table stored outside of BigQuery.
        /// By defining these properties, the data source can then be queried as
        /// if it were a standard BigQuery table. Structure is documented below.
        /// </summary>
        [Output("externalDataConfiguration")]
        public Output<Outputs.TableExternalDataConfiguration?> ExternalDataConfiguration { get; private set; } = null!;

        /// <summary>
        /// A descriptive name for the table.
        /// </summary>
        [Output("friendlyName")]
        public Output<string?> FriendlyName { get; private set; } = null!;

        /// <summary>
        /// A mapping of labels to assign to the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The time when this table was last modified, in milliseconds since the epoch.
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<int> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// The geographic location where the table resides. This value is inherited from the dataset.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The size of this table in bytes, excluding any data in the streaming buffer.
        /// </summary>
        [Output("numBytes")]
        public Output<int> NumBytes { get; private set; } = null!;

        /// <summary>
        /// The number of bytes in the table that are considered "long-term storage".
        /// </summary>
        [Output("numLongTermBytes")]
        public Output<int> NumLongTermBytes { get; private set; } = null!;

        /// <summary>
        /// The number of rows of data in this table, excluding any data in the streaming buffer.
        /// </summary>
        [Output("numRows")]
        public Output<int> NumRows { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// If specified, configures range-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Output("rangePartitioning")]
        public Output<Outputs.TableRangePartitioning?> RangePartitioning { get; private set; } = null!;

        /// <summary>
        /// A JSON schema for the table. Schema is required
        /// for CSV and JSON formats and is disallowed for Google Cloud
        /// Bigtable, Cloud Datastore backups, and Avro formats when using
        /// external tables. For more information see the
        /// [BigQuery API documentation](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#resource).
        /// ~&gt;**NOTE**: Because this field expects a JSON string, any changes to the
        /// string will create a diff, even if the JSON itself hasn't changed.
        /// If the API returns a different value for the same schema, e.g. it
        /// switched the order of values or replaced `STRUCT` field type with `RECORD`
        /// field type, we currently cannot suppress the recurring diff this causes.
        /// As a workaround, we recommend using the schema as returned by the API.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// A unique ID for the resource.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Output("tableId")]
        public Output<string> TableId { get; private set; } = null!;

        /// <summary>
        /// If specified, configures time-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Output("timePartitioning")]
        public Output<Outputs.TableTimePartitioning?> TimePartitioning { get; private set; } = null!;

        /// <summary>
        /// The only type supported is DAY, which will generate
        /// one partition per day based on data loading time.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// If specified, configures this table as a view.
        /// Structure is documented below.
        /// </summary>
        [Output("view")]
        public Output<Outputs.TableView?> View { get; private set; } = null!;


        /// <summary>
        /// Create a Table resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Table(string name, TableArgs args, CustomResourceOptions? options = null)
            : base("gcp:bigquery/table:Table", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Table(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigquery/table:Table", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Table resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Table Get(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
        {
            return new Table(name, id, state, options);
        }
    }

    public sealed class TableArgs : Pulumi.ResourceArgs
    {
        [Input("clusterings")]
        private InputList<string>? _clusterings;

        /// <summary>
        /// Specifies column names to use for data clustering.
        /// Up to four top-level columns are allowed, and should be specified in
        /// descending priority order.
        /// </summary>
        public InputList<string> Clusterings
        {
            get => _clusterings ?? (_clusterings = new InputList<string>());
            set => _clusterings = value;
        }

        /// <summary>
        /// The dataset ID to create the table in.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        /// <summary>
        /// The field description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies how the table should be encrypted.
        /// If left blank, the table will be encrypted with a Google-managed key; that process
        /// is transparent to the user.  Structure is documented below.
        /// </summary>
        [Input("encryptionConfiguration")]
        public Input<Inputs.TableEncryptionConfigurationArgs>? EncryptionConfiguration { get; set; }

        /// <summary>
        /// The time when this table expires, in
        /// milliseconds since the epoch. If not present, the table will persist
        /// indefinitely. Expired tables will be deleted and their storage
        /// reclaimed.
        /// </summary>
        [Input("expirationTime")]
        public Input<int>? ExpirationTime { get; set; }

        /// <summary>
        /// Describes the data format,
        /// location, and other properties of a table stored outside of BigQuery.
        /// By defining these properties, the data source can then be queried as
        /// if it were a standard BigQuery table. Structure is documented below.
        /// </summary>
        [Input("externalDataConfiguration")]
        public Input<Inputs.TableExternalDataConfigurationArgs>? ExternalDataConfiguration { get; set; }

        /// <summary>
        /// A descriptive name for the table.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A mapping of labels to assign to the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// If specified, configures range-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Input("rangePartitioning")]
        public Input<Inputs.TableRangePartitioningArgs>? RangePartitioning { get; set; }

        /// <summary>
        /// A JSON schema for the table. Schema is required
        /// for CSV and JSON formats and is disallowed for Google Cloud
        /// Bigtable, Cloud Datastore backups, and Avro formats when using
        /// external tables. For more information see the
        /// [BigQuery API documentation](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#resource).
        /// ~&gt;**NOTE**: Because this field expects a JSON string, any changes to the
        /// string will create a diff, even if the JSON itself hasn't changed.
        /// If the API returns a different value for the same schema, e.g. it
        /// switched the order of values or replaced `STRUCT` field type with `RECORD`
        /// field type, we currently cannot suppress the recurring diff this causes.
        /// As a workaround, we recommend using the schema as returned by the API.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// A unique ID for the resource.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("tableId", required: true)]
        public Input<string> TableId { get; set; } = null!;

        /// <summary>
        /// If specified, configures time-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Input("timePartitioning")]
        public Input<Inputs.TableTimePartitioningArgs>? TimePartitioning { get; set; }

        /// <summary>
        /// If specified, configures this table as a view.
        /// Structure is documented below.
        /// </summary>
        [Input("view")]
        public Input<Inputs.TableViewArgs>? View { get; set; }

        public TableArgs()
        {
        }
    }

    public sealed class TableState : Pulumi.ResourceArgs
    {
        [Input("clusterings")]
        private InputList<string>? _clusterings;

        /// <summary>
        /// Specifies column names to use for data clustering.
        /// Up to four top-level columns are allowed, and should be specified in
        /// descending priority order.
        /// </summary>
        public InputList<string> Clusterings
        {
            get => _clusterings ?? (_clusterings = new InputList<string>());
            set => _clusterings = value;
        }

        /// <summary>
        /// The time when this table was created, in milliseconds since the epoch.
        /// </summary>
        [Input("creationTime")]
        public Input<int>? CreationTime { get; set; }

        /// <summary>
        /// The dataset ID to create the table in.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("datasetId")]
        public Input<string>? DatasetId { get; set; }

        /// <summary>
        /// The field description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies how the table should be encrypted.
        /// If left blank, the table will be encrypted with a Google-managed key; that process
        /// is transparent to the user.  Structure is documented below.
        /// </summary>
        [Input("encryptionConfiguration")]
        public Input<Inputs.TableEncryptionConfigurationGetArgs>? EncryptionConfiguration { get; set; }

        /// <summary>
        /// A hash of the resource.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The time when this table expires, in
        /// milliseconds since the epoch. If not present, the table will persist
        /// indefinitely. Expired tables will be deleted and their storage
        /// reclaimed.
        /// </summary>
        [Input("expirationTime")]
        public Input<int>? ExpirationTime { get; set; }

        /// <summary>
        /// Describes the data format,
        /// location, and other properties of a table stored outside of BigQuery.
        /// By defining these properties, the data source can then be queried as
        /// if it were a standard BigQuery table. Structure is documented below.
        /// </summary>
        [Input("externalDataConfiguration")]
        public Input<Inputs.TableExternalDataConfigurationGetArgs>? ExternalDataConfiguration { get; set; }

        /// <summary>
        /// A descriptive name for the table.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A mapping of labels to assign to the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The time when this table was last modified, in milliseconds since the epoch.
        /// </summary>
        [Input("lastModifiedTime")]
        public Input<int>? LastModifiedTime { get; set; }

        /// <summary>
        /// The geographic location where the table resides. This value is inherited from the dataset.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The size of this table in bytes, excluding any data in the streaming buffer.
        /// </summary>
        [Input("numBytes")]
        public Input<int>? NumBytes { get; set; }

        /// <summary>
        /// The number of bytes in the table that are considered "long-term storage".
        /// </summary>
        [Input("numLongTermBytes")]
        public Input<int>? NumLongTermBytes { get; set; }

        /// <summary>
        /// The number of rows of data in this table, excluding any data in the streaming buffer.
        /// </summary>
        [Input("numRows")]
        public Input<int>? NumRows { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// If specified, configures range-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Input("rangePartitioning")]
        public Input<Inputs.TableRangePartitioningGetArgs>? RangePartitioning { get; set; }

        /// <summary>
        /// A JSON schema for the table. Schema is required
        /// for CSV and JSON formats and is disallowed for Google Cloud
        /// Bigtable, Cloud Datastore backups, and Avro formats when using
        /// external tables. For more information see the
        /// [BigQuery API documentation](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#resource).
        /// ~&gt;**NOTE**: Because this field expects a JSON string, any changes to the
        /// string will create a diff, even if the JSON itself hasn't changed.
        /// If the API returns a different value for the same schema, e.g. it
        /// switched the order of values or replaced `STRUCT` field type with `RECORD`
        /// field type, we currently cannot suppress the recurring diff this causes.
        /// As a workaround, we recommend using the schema as returned by the API.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// A unique ID for the resource.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("tableId")]
        public Input<string>? TableId { get; set; }

        /// <summary>
        /// If specified, configures time-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Input("timePartitioning")]
        public Input<Inputs.TableTimePartitioningGetArgs>? TimePartitioning { get; set; }

        /// <summary>
        /// The only type supported is DAY, which will generate
        /// one partition per day based on data loading time.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// If specified, configures this table as a view.
        /// Structure is documented below.
        /// </summary>
        [Input("view")]
        public Input<Inputs.TableViewGetArgs>? View { get; set; }

        public TableState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class TableEncryptionConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The self link or full name of a key which should be used to
        /// encrypt this table.  Note that the default bigquery service account will need to have
        /// encrypt/decrypt permissions on this key - you may want to see the
        /// `gcp.bigquery.getDefaultServiceAccount` datasource and the
        /// `gcp.kms.CryptoKeyIAMBinding` resource.
        /// </summary>
        [Input("kmsKeyName", required: true)]
        public Input<string> KmsKeyName { get; set; } = null!;

        public TableEncryptionConfigurationArgs()
        {
        }
    }

    public sealed class TableEncryptionConfigurationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The self link or full name of a key which should be used to
        /// encrypt this table.  Note that the default bigquery service account will need to have
        /// encrypt/decrypt permissions on this key - you may want to see the
        /// `gcp.bigquery.getDefaultServiceAccount` datasource and the
        /// `gcp.kms.CryptoKeyIAMBinding` resource.
        /// </summary>
        [Input("kmsKeyName", required: true)]
        public Input<string> KmsKeyName { get; set; } = null!;

        public TableEncryptionConfigurationGetArgs()
        {
        }
    }

    public sealed class TableExternalDataConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// - Let BigQuery try to autodetect the schema
        /// and format of the table.
        /// </summary>
        [Input("autodetect", required: true)]
        public Input<bool> Autodetect { get; set; } = null!;

        /// <summary>
        /// The compression type of the data source.
        /// Valid values are "NONE" or "GZIP".
        /// </summary>
        [Input("compression")]
        public Input<string>? Compression { get; set; }

        /// <summary>
        /// Additional properties to set if
        /// `source_format` is set to "CSV". Structure is documented below.
        /// </summary>
        [Input("csvOptions")]
        public Input<TableExternalDataConfigurationCsvOptionsArgs>? CsvOptions { get; set; }

        /// <summary>
        /// Additional options if
        /// `source_format` is set to "GOOGLE_SHEETS". Structure is
        /// documented below.
        /// </summary>
        [Input("googleSheetsOptions")]
        public Input<TableExternalDataConfigurationGoogleSheetsOptionsArgs>? GoogleSheetsOptions { get; set; }

        /// <summary>
        /// Indicates if BigQuery should
        /// allow extra values that are not represented in the table schema.
        /// If true, the extra values are ignored. If false, records with
        /// extra columns are treated as bad records, and if there are too
        /// many bad records, an invalid error is returned in the job result.
        /// The default value is false.
        /// </summary>
        [Input("ignoreUnknownValues")]
        public Input<bool>? IgnoreUnknownValues { get; set; }

        /// <summary>
        /// The maximum number of bad records that
        /// BigQuery can ignore when reading data.
        /// </summary>
        [Input("maxBadRecords")]
        public Input<int>? MaxBadRecords { get; set; }

        /// <summary>
        /// The data format. Supported values are:
        /// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
        /// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
        /// the `scopes` must include
        /// "https://www.googleapis.com/auth/drive.readonly".
        /// </summary>
        [Input("sourceFormat", required: true)]
        public Input<string> SourceFormat { get; set; } = null!;

        [Input("sourceUris", required: true)]
        private InputList<string>? _sourceUris;

        /// <summary>
        /// A list of the fully-qualified URIs that point to
        /// your data in Google Cloud.
        /// </summary>
        public InputList<string> SourceUris
        {
            get => _sourceUris ?? (_sourceUris = new InputList<string>());
            set => _sourceUris = value;
        }

        public TableExternalDataConfigurationArgs()
        {
        }
    }

    public sealed class TableExternalDataConfigurationCsvOptionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates if BigQuery should accept rows
        /// that are missing trailing optional columns.
        /// </summary>
        [Input("allowJaggedRows")]
        public Input<bool>? AllowJaggedRows { get; set; }

        /// <summary>
        /// Indicates if BigQuery should allow
        /// quoted data sections that contain newline characters in a CSV file.
        /// The default value is false.
        /// </summary>
        [Input("allowQuotedNewlines")]
        public Input<bool>? AllowQuotedNewlines { get; set; }

        /// <summary>
        /// The character encoding of the data. The supported
        /// values are UTF-8 or ISO-8859-1.
        /// </summary>
        [Input("encoding")]
        public Input<string>? Encoding { get; set; }

        /// <summary>
        /// The separator for fields in a CSV file.
        /// </summary>
        [Input("fieldDelimiter")]
        public Input<string>? FieldDelimiter { get; set; }

        [Input("quote", required: true)]
        public Input<string> Quote { get; set; } = null!;

        /// <summary>
        /// The number of rows at the top of the sheet
        /// that BigQuery will skip when reading the data. At least one of `range` or
        /// `skip_leading_rows` must be set.
        /// </summary>
        [Input("skipLeadingRows")]
        public Input<int>? SkipLeadingRows { get; set; }

        public TableExternalDataConfigurationCsvOptionsArgs()
        {
        }
    }

    public sealed class TableExternalDataConfigurationCsvOptionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates if BigQuery should accept rows
        /// that are missing trailing optional columns.
        /// </summary>
        [Input("allowJaggedRows")]
        public Input<bool>? AllowJaggedRows { get; set; }

        /// <summary>
        /// Indicates if BigQuery should allow
        /// quoted data sections that contain newline characters in a CSV file.
        /// The default value is false.
        /// </summary>
        [Input("allowQuotedNewlines")]
        public Input<bool>? AllowQuotedNewlines { get; set; }

        /// <summary>
        /// The character encoding of the data. The supported
        /// values are UTF-8 or ISO-8859-1.
        /// </summary>
        [Input("encoding")]
        public Input<string>? Encoding { get; set; }

        /// <summary>
        /// The separator for fields in a CSV file.
        /// </summary>
        [Input("fieldDelimiter")]
        public Input<string>? FieldDelimiter { get; set; }

        [Input("quote", required: true)]
        public Input<string> Quote { get; set; } = null!;

        /// <summary>
        /// The number of rows at the top of the sheet
        /// that BigQuery will skip when reading the data. At least one of `range` or
        /// `skip_leading_rows` must be set.
        /// </summary>
        [Input("skipLeadingRows")]
        public Input<int>? SkipLeadingRows { get; set; }

        public TableExternalDataConfigurationCsvOptionsGetArgs()
        {
        }
    }

    public sealed class TableExternalDataConfigurationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// - Let BigQuery try to autodetect the schema
        /// and format of the table.
        /// </summary>
        [Input("autodetect", required: true)]
        public Input<bool> Autodetect { get; set; } = null!;

        /// <summary>
        /// The compression type of the data source.
        /// Valid values are "NONE" or "GZIP".
        /// </summary>
        [Input("compression")]
        public Input<string>? Compression { get; set; }

        /// <summary>
        /// Additional properties to set if
        /// `source_format` is set to "CSV". Structure is documented below.
        /// </summary>
        [Input("csvOptions")]
        public Input<TableExternalDataConfigurationCsvOptionsGetArgs>? CsvOptions { get; set; }

        /// <summary>
        /// Additional options if
        /// `source_format` is set to "GOOGLE_SHEETS". Structure is
        /// documented below.
        /// </summary>
        [Input("googleSheetsOptions")]
        public Input<TableExternalDataConfigurationGoogleSheetsOptionsGetArgs>? GoogleSheetsOptions { get; set; }

        /// <summary>
        /// Indicates if BigQuery should
        /// allow extra values that are not represented in the table schema.
        /// If true, the extra values are ignored. If false, records with
        /// extra columns are treated as bad records, and if there are too
        /// many bad records, an invalid error is returned in the job result.
        /// The default value is false.
        /// </summary>
        [Input("ignoreUnknownValues")]
        public Input<bool>? IgnoreUnknownValues { get; set; }

        /// <summary>
        /// The maximum number of bad records that
        /// BigQuery can ignore when reading data.
        /// </summary>
        [Input("maxBadRecords")]
        public Input<int>? MaxBadRecords { get; set; }

        /// <summary>
        /// The data format. Supported values are:
        /// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
        /// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
        /// the `scopes` must include
        /// "https://www.googleapis.com/auth/drive.readonly".
        /// </summary>
        [Input("sourceFormat", required: true)]
        public Input<string> SourceFormat { get; set; } = null!;

        [Input("sourceUris", required: true)]
        private InputList<string>? _sourceUris;

        /// <summary>
        /// A list of the fully-qualified URIs that point to
        /// your data in Google Cloud.
        /// </summary>
        public InputList<string> SourceUris
        {
            get => _sourceUris ?? (_sourceUris = new InputList<string>());
            set => _sourceUris = value;
        }

        public TableExternalDataConfigurationGetArgs()
        {
        }
    }

    public sealed class TableExternalDataConfigurationGoogleSheetsOptionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Information required to partition based on ranges.
        /// Structure is documented below.
        /// </summary>
        [Input("range")]
        public Input<string>? Range { get; set; }

        /// <summary>
        /// The number of rows at the top of the sheet
        /// that BigQuery will skip when reading the data. At least one of `range` or
        /// `skip_leading_rows` must be set.
        /// </summary>
        [Input("skipLeadingRows")]
        public Input<int>? SkipLeadingRows { get; set; }

        public TableExternalDataConfigurationGoogleSheetsOptionsArgs()
        {
        }
    }

    public sealed class TableExternalDataConfigurationGoogleSheetsOptionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Information required to partition based on ranges.
        /// Structure is documented below.
        /// </summary>
        [Input("range")]
        public Input<string>? Range { get; set; }

        /// <summary>
        /// The number of rows at the top of the sheet
        /// that BigQuery will skip when reading the data. At least one of `range` or
        /// `skip_leading_rows` must be set.
        /// </summary>
        [Input("skipLeadingRows")]
        public Input<int>? SkipLeadingRows { get; set; }

        public TableExternalDataConfigurationGoogleSheetsOptionsGetArgs()
        {
        }
    }

    public sealed class TableRangePartitioningArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The field used to determine how to create a range-based
        /// partition.
        /// </summary>
        [Input("field", required: true)]
        public Input<string> Field { get; set; } = null!;

        /// <summary>
        /// Information required to partition based on ranges.
        /// Structure is documented below.
        /// </summary>
        [Input("range", required: true)]
        public Input<TableRangePartitioningRangeArgs> Range { get; set; } = null!;

        public TableRangePartitioningArgs()
        {
        }
    }

    public sealed class TableRangePartitioningGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The field used to determine how to create a range-based
        /// partition.
        /// </summary>
        [Input("field", required: true)]
        public Input<string> Field { get; set; } = null!;

        /// <summary>
        /// Information required to partition based on ranges.
        /// Structure is documented below.
        /// </summary>
        [Input("range", required: true)]
        public Input<TableRangePartitioningRangeGetArgs> Range { get; set; } = null!;

        public TableRangePartitioningGetArgs()
        {
        }
    }

    public sealed class TableRangePartitioningRangeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// End of the range partitioning, exclusive.
        /// </summary>
        [Input("end", required: true)]
        public Input<int> End { get; set; } = null!;

        /// <summary>
        /// The width of each range within the partition.
        /// </summary>
        [Input("interval", required: true)]
        public Input<int> Interval { get; set; } = null!;

        /// <summary>
        /// Start of the range partitioning, inclusive.
        /// </summary>
        [Input("start", required: true)]
        public Input<int> Start { get; set; } = null!;

        public TableRangePartitioningRangeArgs()
        {
        }
    }

    public sealed class TableRangePartitioningRangeGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// End of the range partitioning, exclusive.
        /// </summary>
        [Input("end", required: true)]
        public Input<int> End { get; set; } = null!;

        /// <summary>
        /// The width of each range within the partition.
        /// </summary>
        [Input("interval", required: true)]
        public Input<int> Interval { get; set; } = null!;

        /// <summary>
        /// Start of the range partitioning, inclusive.
        /// </summary>
        [Input("start", required: true)]
        public Input<int> Start { get; set; } = null!;

        public TableRangePartitioningRangeGetArgs()
        {
        }
    }

    public sealed class TableTimePartitioningArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of milliseconds for which to keep the
        /// storage for a partition.
        /// </summary>
        [Input("expirationMs")]
        public Input<int>? ExpirationMs { get; set; }

        /// <summary>
        /// The field used to determine how to create a range-based
        /// partition.
        /// </summary>
        [Input("field")]
        public Input<string>? Field { get; set; }

        /// <summary>
        /// If set to true, queries over this table
        /// require a partition filter that can be used for partition elimination to be
        /// specified.
        /// </summary>
        [Input("requirePartitionFilter")]
        public Input<bool>? RequirePartitionFilter { get; set; }

        /// <summary>
        /// The only type supported is DAY, which will generate
        /// one partition per day based on data loading time.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public TableTimePartitioningArgs()
        {
        }
    }

    public sealed class TableTimePartitioningGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of milliseconds for which to keep the
        /// storage for a partition.
        /// </summary>
        [Input("expirationMs")]
        public Input<int>? ExpirationMs { get; set; }

        /// <summary>
        /// The field used to determine how to create a range-based
        /// partition.
        /// </summary>
        [Input("field")]
        public Input<string>? Field { get; set; }

        /// <summary>
        /// If set to true, queries over this table
        /// require a partition filter that can be used for partition elimination to be
        /// specified.
        /// </summary>
        [Input("requirePartitionFilter")]
        public Input<bool>? RequirePartitionFilter { get; set; }

        /// <summary>
        /// The only type supported is DAY, which will generate
        /// one partition per day based on data loading time.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public TableTimePartitioningGetArgs()
        {
        }
    }

    public sealed class TableViewArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A query that BigQuery executes when the view is referenced.
        /// </summary>
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        /// <summary>
        /// Specifies whether to use BigQuery's legacy SQL for this view.
        /// The default value is true. If set to false, the view will use BigQuery's standard SQL.
        /// </summary>
        [Input("useLegacySql")]
        public Input<bool>? UseLegacySql { get; set; }

        public TableViewArgs()
        {
        }
    }

    public sealed class TableViewGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A query that BigQuery executes when the view is referenced.
        /// </summary>
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        /// <summary>
        /// Specifies whether to use BigQuery's legacy SQL for this view.
        /// The default value is true. If set to false, the view will use BigQuery's standard SQL.
        /// </summary>
        [Input("useLegacySql")]
        public Input<bool>? UseLegacySql { get; set; }

        public TableViewGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class TableEncryptionConfiguration
    {
        /// <summary>
        /// The self link or full name of a key which should be used to
        /// encrypt this table.  Note that the default bigquery service account will need to have
        /// encrypt/decrypt permissions on this key - you may want to see the
        /// `gcp.bigquery.getDefaultServiceAccount` datasource and the
        /// `gcp.kms.CryptoKeyIAMBinding` resource.
        /// </summary>
        public readonly string KmsKeyName;

        [OutputConstructor]
        private TableEncryptionConfiguration(string kmsKeyName)
        {
            KmsKeyName = kmsKeyName;
        }
    }

    [OutputType]
    public sealed class TableExternalDataConfiguration
    {
        /// <summary>
        /// - Let BigQuery try to autodetect the schema
        /// and format of the table.
        /// </summary>
        public readonly bool Autodetect;
        /// <summary>
        /// The compression type of the data source.
        /// Valid values are "NONE" or "GZIP".
        /// </summary>
        public readonly string? Compression;
        /// <summary>
        /// Additional properties to set if
        /// `source_format` is set to "CSV". Structure is documented below.
        /// </summary>
        public readonly TableExternalDataConfigurationCsvOptions? CsvOptions;
        /// <summary>
        /// Additional options if
        /// `source_format` is set to "GOOGLE_SHEETS". Structure is
        /// documented below.
        /// </summary>
        public readonly TableExternalDataConfigurationGoogleSheetsOptions? GoogleSheetsOptions;
        /// <summary>
        /// Indicates if BigQuery should
        /// allow extra values that are not represented in the table schema.
        /// If true, the extra values are ignored. If false, records with
        /// extra columns are treated as bad records, and if there are too
        /// many bad records, an invalid error is returned in the job result.
        /// The default value is false.
        /// </summary>
        public readonly bool? IgnoreUnknownValues;
        /// <summary>
        /// The maximum number of bad records that
        /// BigQuery can ignore when reading data.
        /// </summary>
        public readonly int? MaxBadRecords;
        /// <summary>
        /// The data format. Supported values are:
        /// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
        /// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
        /// the `scopes` must include
        /// "https://www.googleapis.com/auth/drive.readonly".
        /// </summary>
        public readonly string SourceFormat;
        /// <summary>
        /// A list of the fully-qualified URIs that point to
        /// your data in Google Cloud.
        /// </summary>
        public readonly ImmutableArray<string> SourceUris;

        [OutputConstructor]
        private TableExternalDataConfiguration(
            bool autodetect,
            string? compression,
            TableExternalDataConfigurationCsvOptions? csvOptions,
            TableExternalDataConfigurationGoogleSheetsOptions? googleSheetsOptions,
            bool? ignoreUnknownValues,
            int? maxBadRecords,
            string sourceFormat,
            ImmutableArray<string> sourceUris)
        {
            Autodetect = autodetect;
            Compression = compression;
            CsvOptions = csvOptions;
            GoogleSheetsOptions = googleSheetsOptions;
            IgnoreUnknownValues = ignoreUnknownValues;
            MaxBadRecords = maxBadRecords;
            SourceFormat = sourceFormat;
            SourceUris = sourceUris;
        }
    }

    [OutputType]
    public sealed class TableExternalDataConfigurationCsvOptions
    {
        /// <summary>
        /// Indicates if BigQuery should accept rows
        /// that are missing trailing optional columns.
        /// </summary>
        public readonly bool? AllowJaggedRows;
        /// <summary>
        /// Indicates if BigQuery should allow
        /// quoted data sections that contain newline characters in a CSV file.
        /// The default value is false.
        /// </summary>
        public readonly bool? AllowQuotedNewlines;
        /// <summary>
        /// The character encoding of the data. The supported
        /// values are UTF-8 or ISO-8859-1.
        /// </summary>
        public readonly string? Encoding;
        /// <summary>
        /// The separator for fields in a CSV file.
        /// </summary>
        public readonly string? FieldDelimiter;
        public readonly string Quote;
        /// <summary>
        /// The number of rows at the top of the sheet
        /// that BigQuery will skip when reading the data. At least one of `range` or
        /// `skip_leading_rows` must be set.
        /// </summary>
        public readonly int? SkipLeadingRows;

        [OutputConstructor]
        private TableExternalDataConfigurationCsvOptions(
            bool? allowJaggedRows,
            bool? allowQuotedNewlines,
            string? encoding,
            string? fieldDelimiter,
            string quote,
            int? skipLeadingRows)
        {
            AllowJaggedRows = allowJaggedRows;
            AllowQuotedNewlines = allowQuotedNewlines;
            Encoding = encoding;
            FieldDelimiter = fieldDelimiter;
            Quote = quote;
            SkipLeadingRows = skipLeadingRows;
        }
    }

    [OutputType]
    public sealed class TableExternalDataConfigurationGoogleSheetsOptions
    {
        /// <summary>
        /// Information required to partition based on ranges.
        /// Structure is documented below.
        /// </summary>
        public readonly string? Range;
        /// <summary>
        /// The number of rows at the top of the sheet
        /// that BigQuery will skip when reading the data. At least one of `range` or
        /// `skip_leading_rows` must be set.
        /// </summary>
        public readonly int? SkipLeadingRows;

        [OutputConstructor]
        private TableExternalDataConfigurationGoogleSheetsOptions(
            string? range,
            int? skipLeadingRows)
        {
            Range = range;
            SkipLeadingRows = skipLeadingRows;
        }
    }

    [OutputType]
    public sealed class TableRangePartitioning
    {
        /// <summary>
        /// The field used to determine how to create a range-based
        /// partition.
        /// </summary>
        public readonly string Field;
        /// <summary>
        /// Information required to partition based on ranges.
        /// Structure is documented below.
        /// </summary>
        public readonly TableRangePartitioningRange Range;

        [OutputConstructor]
        private TableRangePartitioning(
            string field,
            TableRangePartitioningRange range)
        {
            Field = field;
            Range = range;
        }
    }

    [OutputType]
    public sealed class TableRangePartitioningRange
    {
        /// <summary>
        /// End of the range partitioning, exclusive.
        /// </summary>
        public readonly int End;
        /// <summary>
        /// The width of each range within the partition.
        /// </summary>
        public readonly int Interval;
        /// <summary>
        /// Start of the range partitioning, inclusive.
        /// </summary>
        public readonly int Start;

        [OutputConstructor]
        private TableRangePartitioningRange(
            int end,
            int interval,
            int start)
        {
            End = end;
            Interval = interval;
            Start = start;
        }
    }

    [OutputType]
    public sealed class TableTimePartitioning
    {
        /// <summary>
        /// Number of milliseconds for which to keep the
        /// storage for a partition.
        /// </summary>
        public readonly int? ExpirationMs;
        /// <summary>
        /// The field used to determine how to create a range-based
        /// partition.
        /// </summary>
        public readonly string? Field;
        /// <summary>
        /// If set to true, queries over this table
        /// require a partition filter that can be used for partition elimination to be
        /// specified.
        /// </summary>
        public readonly bool? RequirePartitionFilter;
        /// <summary>
        /// The only type supported is DAY, which will generate
        /// one partition per day based on data loading time.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private TableTimePartitioning(
            int? expirationMs,
            string? field,
            bool? requirePartitionFilter,
            string type)
        {
            ExpirationMs = expirationMs;
            Field = field;
            RequirePartitionFilter = requirePartitionFilter;
            Type = type;
        }
    }

    [OutputType]
    public sealed class TableView
    {
        /// <summary>
        /// A query that BigQuery executes when the view is referenced.
        /// </summary>
        public readonly string Query;
        /// <summary>
        /// Specifies whether to use BigQuery's legacy SQL for this view.
        /// The default value is true. If set to false, the view will use BigQuery's standard SQL.
        /// </summary>
        public readonly bool? UseLegacySql;

        [OutputConstructor]
        private TableView(
            string query,
            bool? useLegacySql)
        {
            Query = query;
            UseLegacySql = useLegacySql;
        }
    }
    }
}
