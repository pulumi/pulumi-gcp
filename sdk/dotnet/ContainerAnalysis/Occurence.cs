// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ContainerAnalysis
{
    /// <summary>
    /// An occurrence is an instance of a Note, or type of analysis that
    /// can be done for a resource.
    /// 
    /// To get more information about Occurrence, see:
    /// 
    /// * [API documentation](https://cloud.google.com/container-analysis/api/reference/rest/)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/container-analysis/)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Occurrence can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:containeranalysis/occurence:Occurence default projects/{{project}}/occurrences/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:containeranalysis/occurence:Occurence default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:containeranalysis/occurence:Occurence default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:containeranalysis/occurence:Occurence")]
    public partial class Occurence : Pulumi.CustomResource
    {
        /// <summary>
        /// Occurrence that represents a single "attestation". The authenticity
        /// of an attestation can be verified using the attached signature.
        /// If the verifier trusts the public key of the signer, then verifying
        /// the signature is sufficient to establish trust. In this circumstance,
        /// the authority to which this attestation is attached is primarily
        /// useful for lookup (how to find this attestation if you already
        /// know the authority and artifact to be verified) and intent (for
        /// which authority this attestation was intended to sign.
        /// Structure is documented below.
        /// </summary>
        [Output("attestation")]
        public Output<Outputs.OccurenceAttestation> Attestation { get; private set; } = null!;

        /// <summary>
        /// The time when the repository was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
        /// in list requests.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The name of the occurrence.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The analysis note associated with this occurrence, in the form of
        /// projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
        /// filter in list requests.
        /// </summary>
        [Output("noteName")]
        public Output<string> NoteName { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// A description of actions that can be taken to remedy the note.
        /// </summary>
        [Output("remediation")]
        public Output<string?> Remediation { get; private set; } = null!;

        /// <summary>
        /// Required. Immutable. A URI that represents the resource for which
        /// the occurrence applies. For example,
        /// https://gcr.io/project/image@sha256:123abc for a Docker image.
        /// </summary>
        [Output("resourceUri")]
        public Output<string> ResourceUri { get; private set; } = null!;

        /// <summary>
        /// The time when the repository was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Occurence resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Occurence(string name, OccurenceArgs args, CustomResourceOptions? options = null)
            : base("gcp:containeranalysis/occurence:Occurence", name, args ?? new OccurenceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Occurence(string name, Input<string> id, OccurenceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:containeranalysis/occurence:Occurence", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Occurence resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Occurence Get(string name, Input<string> id, OccurenceState? state = null, CustomResourceOptions? options = null)
        {
            return new Occurence(name, id, state, options);
        }
    }

    public sealed class OccurenceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Occurrence that represents a single "attestation". The authenticity
        /// of an attestation can be verified using the attached signature.
        /// If the verifier trusts the public key of the signer, then verifying
        /// the signature is sufficient to establish trust. In this circumstance,
        /// the authority to which this attestation is attached is primarily
        /// useful for lookup (how to find this attestation if you already
        /// know the authority and artifact to be verified) and intent (for
        /// which authority this attestation was intended to sign.
        /// Structure is documented below.
        /// </summary>
        [Input("attestation", required: true)]
        public Input<Inputs.OccurenceAttestationArgs> Attestation { get; set; } = null!;

        /// <summary>
        /// The analysis note associated with this occurrence, in the form of
        /// projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
        /// filter in list requests.
        /// </summary>
        [Input("noteName", required: true)]
        public Input<string> NoteName { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A description of actions that can be taken to remedy the note.
        /// </summary>
        [Input("remediation")]
        public Input<string>? Remediation { get; set; }

        /// <summary>
        /// Required. Immutable. A URI that represents the resource for which
        /// the occurrence applies. For example,
        /// https://gcr.io/project/image@sha256:123abc for a Docker image.
        /// </summary>
        [Input("resourceUri", required: true)]
        public Input<string> ResourceUri { get; set; } = null!;

        public OccurenceArgs()
        {
        }
    }

    public sealed class OccurenceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Occurrence that represents a single "attestation". The authenticity
        /// of an attestation can be verified using the attached signature.
        /// If the verifier trusts the public key of the signer, then verifying
        /// the signature is sufficient to establish trust. In this circumstance,
        /// the authority to which this attestation is attached is primarily
        /// useful for lookup (how to find this attestation if you already
        /// know the authority and artifact to be verified) and intent (for
        /// which authority this attestation was intended to sign.
        /// Structure is documented below.
        /// </summary>
        [Input("attestation")]
        public Input<Inputs.OccurenceAttestationGetArgs>? Attestation { get; set; }

        /// <summary>
        /// The time when the repository was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
        /// in list requests.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The name of the occurrence.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The analysis note associated with this occurrence, in the form of
        /// projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
        /// filter in list requests.
        /// </summary>
        [Input("noteName")]
        public Input<string>? NoteName { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A description of actions that can be taken to remedy the note.
        /// </summary>
        [Input("remediation")]
        public Input<string>? Remediation { get; set; }

        /// <summary>
        /// Required. Immutable. A URI that represents the resource for which
        /// the occurrence applies. For example,
        /// https://gcr.io/project/image@sha256:123abc for a Docker image.
        /// </summary>
        [Input("resourceUri")]
        public Input<string>? ResourceUri { get; set; }

        /// <summary>
        /// The time when the repository was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public OccurenceState()
        {
        }
    }
}
