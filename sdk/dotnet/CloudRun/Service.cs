// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudRun
{
    /// <summary>
    /// Service acts as a top-level container that manages a set of Routes and
    /// Configurations which implement a network service. Service exists to provide a
    /// singular abstraction which can be access controlled, reasoned about, and
    /// which encapsulates software lifecycle decisions such as rollout policy and
    /// team resource ownership. Service acts only as an orchestrator of the
    /// underlying Routes and Configurations (much as a kubernetes Deployment
    /// orchestrates ReplicaSets).
    /// 
    /// The Service's controller will track the statuses of its owned Configuration
    /// and Route, reflecting their statuses and conditions as its own.
    /// 
    /// See also:
    /// https://github.com/knative/specs/blob/main/specs/serving/overview.md
    /// 
    /// To get more information about Service, see:
    /// 
    /// * [API documentation](https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/run/docs/)
    /// 
    /// &gt; **Warning:** `google_cloudrun_service` creates a Managed Google Cloud Run Service. If you need to create
    /// a Cloud Run Service on Anthos(GKE/VMWare) then you will need to create it using the kubernetes alpha provider.
    /// Have a look at the Cloud Run Anthos example below.
    /// 
    /// ## Example Usage
    /// ### Cloud Run Service Pubsub
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var @default = new Gcp.CloudRun.Service("default", new Gcp.CloudRun.ServiceArgs
    ///         {
    ///             Location = "us-central1",
    ///             Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///             {
    ///                 Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///                 {
    ///                     Containers = 
    ///                     {
    ///                         new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                         {
    ///                             Image = "gcr.io/cloudrun/hello",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Traffics = 
    ///             {
    ///                 new Gcp.CloudRun.Inputs.ServiceTrafficArgs
    ///                 {
    ///                     Percent = 100,
    ///                     LatestRevision = true,
    ///                 },
    ///             },
    ///         });
    ///         var sa = new Gcp.ServiceAccount.Account("sa", new Gcp.ServiceAccount.AccountArgs
    ///         {
    ///             AccountId = "cloud-run-pubsub-invoker",
    ///             DisplayName = "Cloud Run Pub/Sub Invoker",
    ///         });
    ///         var binding = new Gcp.CloudRun.IamBinding("binding", new Gcp.CloudRun.IamBindingArgs
    ///         {
    ///             Location = @default.Location,
    ///             Service = @default.Name,
    ///             Role = "roles/run.invoker",
    ///             Members = 
    ///             {
    ///                 sa.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///             },
    ///         });
    ///         var project = new Gcp.Projects.IAMBinding("project", new Gcp.Projects.IAMBindingArgs
    ///         {
    ///             Role = "roles/iam.serviceAccountTokenCreator",
    ///             Members = 
    ///             {
    ///                 sa.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///             },
    ///         });
    ///         var topic = new Gcp.PubSub.Topic("topic", new Gcp.PubSub.TopicArgs
    ///         {
    ///         });
    ///         var subscription = new Gcp.PubSub.Subscription("subscription", new Gcp.PubSub.SubscriptionArgs
    ///         {
    ///             Topic = topic.Name,
    ///             PushConfig = new Gcp.PubSub.Inputs.SubscriptionPushConfigArgs
    ///             {
    ///                 PushEndpoint = @default.Statuses.Apply(statuses =&gt; statuses[0].Url),
    ///                 OidcToken = new Gcp.PubSub.Inputs.SubscriptionPushConfigOidcTokenArgs
    ///                 {
    ///                     ServiceAccountEmail = sa.Email,
    ///                 },
    ///                 Attributes = 
    ///                 {
    ///                     { "x-goog-version", "v1" },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Cloud Run Service Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var @default = new Gcp.CloudRun.Service("default", new Gcp.CloudRun.ServiceArgs
    ///         {
    ///             Location = "us-central1",
    ///             Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///             {
    ///                 Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///                 {
    ///                     Containers = 
    ///                     {
    ///                         new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                         {
    ///                             Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Traffics = 
    ///             {
    ///                 new Gcp.CloudRun.Inputs.ServiceTrafficArgs
    ///                 {
    ///                     LatestRevision = true,
    ///                     Percent = 100,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Cloud Run Service Sql
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var instance = new Gcp.Sql.DatabaseInstance("instance", new Gcp.Sql.DatabaseInstanceArgs
    ///         {
    ///             Region = "us-east1",
    ///             DatabaseVersion = "MYSQL_5_7",
    ///             Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///             {
    ///                 Tier = "db-f1-micro",
    ///             },
    ///             DeletionProtection = true,
    ///         });
    ///         var @default = new Gcp.CloudRun.Service("default", new Gcp.CloudRun.ServiceArgs
    ///         {
    ///             Location = "us-central1",
    ///             Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///             {
    ///                 Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///                 {
    ///                     Containers = 
    ///                     {
    ///                         new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                         {
    ///                             Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                         },
    ///                     },
    ///                 },
    ///                 Metadata = new Gcp.CloudRun.Inputs.ServiceTemplateMetadataArgs
    ///                 {
    ///                     Annotations = 
    ///                     {
    ///                         { "autoscaling.knative.dev/maxScale", "1000" },
    ///                         { "run.googleapis.com/cloudsql-instances", instance.ConnectionName },
    ///                         { "run.googleapis.com/client-name", "demo" },
    ///                     },
    ///                 },
    ///             },
    ///             AutogenerateRevisionName = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Cloud Run Service Noauth
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var @default = new Gcp.CloudRun.Service("default", new Gcp.CloudRun.ServiceArgs
    ///         {
    ///             Location = "us-central1",
    ///             Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///             {
    ///                 Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///                 {
    ///                     Containers = 
    ///                     {
    ///                         new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                         {
    ///                             Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         var noauthIAMPolicy = Output.Create(Gcp.Organizations.GetIAMPolicy.InvokeAsync(new Gcp.Organizations.GetIAMPolicyArgs
    ///         {
    ///             Bindings = 
    ///             {
    ///                 new Gcp.Organizations.Inputs.GetIAMPolicyBindingArgs
    ///                 {
    ///                     Role = "roles/run.invoker",
    ///                     Members = 
    ///                     {
    ///                         "allUsers",
    ///                     },
    ///                 },
    ///             },
    ///         }));
    ///         var noauthIamPolicy = new Gcp.CloudRun.IamPolicy("noauthIamPolicy", new Gcp.CloudRun.IamPolicyArgs
    ///         {
    ///             Location = @default.Location,
    ///             Project = @default.Project,
    ///             Service = @default.Name,
    ///             PolicyData = noauthIAMPolicy.Apply(noauthIAMPolicy =&gt; noauthIAMPolicy.PolicyData),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Cloud Run Service Multiple Environment Variables
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var @default = new Gcp.CloudRun.Service("default", new Gcp.CloudRun.ServiceArgs
    ///         {
    ///             Location = "us-central1",
    ///             Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///             {
    ///                 Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///                 {
    ///                     Containers = 
    ///                     {
    ///                         new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                         {
    ///                             Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                             Envs = 
    ///                             {
    ///                                 new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerEnvArgs
    ///                                 {
    ///                                     Name = "SOURCE",
    ///                                     Value = "remote",
    ///                                 },
    ///                                 new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerEnvArgs
    ///                                 {
    ///                                     Name = "TARGET",
    ///                                     Value = "home",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Metadata = new Gcp.CloudRun.Inputs.ServiceMetadataArgs
    ///             {
    ///                 Annotations = 
    ///                 {
    ///                     { "generated-by", "magic-modules" },
    ///                 },
    ///             },
    ///             Traffics = 
    ///             {
    ///                 new Gcp.CloudRun.Inputs.ServiceTrafficArgs
    ///                 {
    ///                     Percent = 100,
    ///                     LatestRevision = true,
    ///                 },
    ///             },
    ///             AutogenerateRevisionName = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Cloud Run Service Traffic Split
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var @default = new Gcp.CloudRun.Service("default", new Gcp.CloudRun.ServiceArgs
    ///         {
    ///             Location = "us-central1",
    ///             Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///             {
    ///                 Metadata = new Gcp.CloudRun.Inputs.ServiceTemplateMetadataArgs
    ///                 {
    ///                     Name = "cloudrun-srv-green",
    ///                 },
    ///                 Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///                 {
    ///                     Containers = 
    ///                     {
    ///                         new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                         {
    ///                             Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Traffics = 
    ///             {
    ///                 new Gcp.CloudRun.Inputs.ServiceTrafficArgs
    ///                 {
    ///                     Percent = 25,
    ///                     RevisionName = "cloudrun-srv-green",
    ///                 },
    ///                 new Gcp.CloudRun.Inputs.ServiceTrafficArgs
    ///                 {
    ///                     Percent = 75,
    ///                     RevisionName = "cloudrun-srv-blue",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Cloud Run Service Secret Environment Variables
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var project = Output.Create(Gcp.Organizations.GetProject.InvokeAsync());
    ///         var secret = new Gcp.SecretManager.Secret("secret", new Gcp.SecretManager.SecretArgs
    ///         {
    ///             SecretId = "secret",
    ///             Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///             {
    ///                 Automatic = true,
    ///             },
    ///         });
    ///         var secret_version_data = new Gcp.SecretManager.SecretVersion("secret-version-data", new Gcp.SecretManager.SecretVersionArgs
    ///         {
    ///             Secret = secret.Name,
    ///             SecretData = "secret-data",
    ///         });
    ///         var secret_access = new Gcp.SecretManager.SecretIamMember("secret-access", new Gcp.SecretManager.SecretIamMemberArgs
    ///         {
    ///             SecretId = secret.Id,
    ///             Role = "roles/secretmanager.secretAccessor",
    ///             Member = project.Apply(project =&gt; $"serviceAccount:{project.Number}-compute@developer.gserviceaccount.com"),
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 secret,
    ///             },
    ///         });
    ///         var @default = new Gcp.CloudRun.Service("default", new Gcp.CloudRun.ServiceArgs
    ///         {
    ///             Location = "us-central1",
    ///             Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///             {
    ///                 Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///                 {
    ///                     Containers = 
    ///                     {
    ///                         new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                         {
    ///                             Image = "gcr.io/cloudrun/hello",
    ///                             Envs = 
    ///                             {
    ///                                 new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerEnvArgs
    ///                                 {
    ///                                     Name = "SECRET_ENV_VAR",
    ///                                     ValueFrom = new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerEnvValueFromArgs
    ///                                     {
    ///                                         SecretKeyRef = new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs
    ///                                         {
    ///                                             Name = secret.SecretId,
    ///                                             Key = "1",
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Metadata = new Gcp.CloudRun.Inputs.ServiceMetadataArgs
    ///             {
    ///                 Annotations = 
    ///                 {
    ///                     { "generated-by", "magic-modules" },
    ///                 },
    ///             },
    ///             Traffics = 
    ///             {
    ///                 new Gcp.CloudRun.Inputs.ServiceTrafficArgs
    ///                 {
    ///                     Percent = 100,
    ///                     LatestRevision = true,
    ///                 },
    ///             },
    ///             AutogenerateRevisionName = true,
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 secret_version_data,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Cloud Run Service Secret Volumes
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var project = Output.Create(Gcp.Organizations.GetProject.InvokeAsync());
    ///         var secret = new Gcp.SecretManager.Secret("secret", new Gcp.SecretManager.SecretArgs
    ///         {
    ///             SecretId = "secret",
    ///             Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///             {
    ///                 Automatic = true,
    ///             },
    ///         });
    ///         var secret_version_data = new Gcp.SecretManager.SecretVersion("secret-version-data", new Gcp.SecretManager.SecretVersionArgs
    ///         {
    ///             Secret = secret.Name,
    ///             SecretData = "secret-data",
    ///         });
    ///         var secret_access = new Gcp.SecretManager.SecretIamMember("secret-access", new Gcp.SecretManager.SecretIamMemberArgs
    ///         {
    ///             SecretId = secret.Id,
    ///             Role = "roles/secretmanager.secretAccessor",
    ///             Member = project.Apply(project =&gt; $"serviceAccount:{project.Number}-compute@developer.gserviceaccount.com"),
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 secret,
    ///             },
    ///         });
    ///         var @default = new Gcp.CloudRun.Service("default", new Gcp.CloudRun.ServiceArgs
    ///         {
    ///             Location = "us-central1",
    ///             Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///             {
    ///                 Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///                 {
    ///                     Containers = 
    ///                     {
    ///                         new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                         {
    ///                             Image = "gcr.io/cloudrun/hello",
    ///                             VolumeMounts = 
    ///                             {
    ///                                 new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerVolumeMountArgs
    ///                                 {
    ///                                     Name = "a-volume",
    ///                                     MountPath = "/secrets",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     Volumes = 
    ///                     {
    ///                         new Gcp.CloudRun.Inputs.ServiceTemplateSpecVolumeArgs
    ///                         {
    ///                             Name = "a-volume",
    ///                             Secret = new Gcp.CloudRun.Inputs.ServiceTemplateSpecVolumeSecretArgs
    ///                             {
    ///                                 SecretName = secret.SecretId,
    ///                                 DefaultMode = 292,
    ///                                 Items = 
    ///                                 {
    ///                                     new Gcp.CloudRun.Inputs.ServiceTemplateSpecVolumeSecretItemArgs
    ///                                     {
    ///                                         Key = "1",
    ///                                         Path = "my-secret",
    ///                                         Mode = 256,
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Metadata = new Gcp.CloudRun.Inputs.ServiceMetadataArgs
    ///             {
    ///                 Annotations = 
    ///                 {
    ///                     { "generated-by", "magic-modules" },
    ///                 },
    ///             },
    ///             Traffics = 
    ///             {
    ///                 new Gcp.CloudRun.Inputs.ServiceTrafficArgs
    ///                 {
    ///                     Percent = 100,
    ///                     LatestRevision = true,
    ///                 },
    ///             },
    ///             AutogenerateRevisionName = true,
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 secret_version_data,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Eventarc Basic Tf
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var projectProject = Output.Create(Gcp.Organizations.GetProject.InvokeAsync());
    ///         // Enable Cloud Run API
    ///         var run = new Gcp.Projects.Service("run", new Gcp.Projects.ServiceArgs
    ///         {
    ///             Service = "run.googleapis.com",
    ///             DisableOnDestroy = false,
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///         });
    ///         // Enable Eventarc API
    ///         var eventarc = new Gcp.Projects.Service("eventarc", new Gcp.Projects.ServiceArgs
    ///         {
    ///             Service = "eventarc.googleapis.com",
    ///             DisableOnDestroy = false,
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///         });
    ///         // Deploy Cloud Run service
    ///         var @default = new Gcp.CloudRun.Service("default", new Gcp.CloudRun.ServiceArgs
    ///         {
    ///             Location = "us-east1",
    ///             Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///             {
    ///                 Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///                 {
    ///                     Containers = 
    ///                     {
    ///                         new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                         {
    ///                             Image = "gcr.io/cloudrun/hello",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Traffics = 
    ///             {
    ///                 new Gcp.CloudRun.Inputs.ServiceTrafficArgs
    ///                 {
    ///                     Percent = 100,
    ///                     LatestRevision = true,
    ///                 },
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///             DependsOn = 
    ///             {
    ///                 run,
    ///             },
    ///         });
    ///         // Make Cloud Run service publicly accessible
    ///         var allUsers = new Gcp.CloudRun.IamMember("allUsers", new Gcp.CloudRun.IamMemberArgs
    ///         {
    ///             Service = @default.Name,
    ///             Location = @default.Location,
    ///             Role = "roles/run.invoker",
    ///             Member = "allUsers",
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///         });
    ///         // Create a Pub/Sub trigger
    ///         var trigger_pubsub_tf = new Gcp.Eventarc.Trigger("trigger-pubsub-tf", new Gcp.Eventarc.TriggerArgs
    ///         {
    ///             Location = @default.Location,
    ///             MatchingCriterias = 
    ///             {
    ///                 new Gcp.Eventarc.Inputs.TriggerMatchingCriteriaArgs
    ///                 {
    ///                     Attribute = "type",
    ///                     Value = "google.cloud.pubsub.topic.v1.messagePublished",
    ///                 },
    ///             },
    ///             Destination = new Gcp.Eventarc.Inputs.TriggerDestinationArgs
    ///             {
    ///                 CloudRunService = new Gcp.Eventarc.Inputs.TriggerDestinationCloudRunServiceArgs
    ///                 {
    ///                     Service = @default.Name,
    ///                     Region = @default.Location,
    ///                 },
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///             DependsOn = 
    ///             {
    ///                 eventarc,
    ///             },
    ///         });
    ///         // Give default Compute service account eventarc.eventReceiver role
    ///         var projectIAMBinding = new Gcp.Projects.IAMBinding("projectIAMBinding", new Gcp.Projects.IAMBindingArgs
    ///         {
    ///             Project = projectProject.Apply(projectProject =&gt; projectProject.Id),
    ///             Role = "roles/eventarc.eventReceiver",
    ///             Members = 
    ///             {
    ///                 projectProject.Apply(projectProject =&gt; $"serviceAccount:{projectProject.Number}-compute@developer.gserviceaccount.com"),
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///         });
    ///         // Create an AuditLog for Cloud Storage trigger
    ///         var trigger_auditlog_tf = new Gcp.Eventarc.Trigger("trigger-auditlog-tf", new Gcp.Eventarc.TriggerArgs
    ///         {
    ///             Location = @default.Location,
    ///             Project = projectProject.Apply(projectProject =&gt; projectProject.Id),
    ///             MatchingCriterias = 
    ///             {
    ///                 new Gcp.Eventarc.Inputs.TriggerMatchingCriteriaArgs
    ///                 {
    ///                     Attribute = "type",
    ///                     Value = "google.cloud.audit.log.v1.written",
    ///                 },
    ///                 new Gcp.Eventarc.Inputs.TriggerMatchingCriteriaArgs
    ///                 {
    ///                     Attribute = "serviceName",
    ///                     Value = "storage.googleapis.com",
    ///                 },
    ///                 new Gcp.Eventarc.Inputs.TriggerMatchingCriteriaArgs
    ///                 {
    ///                     Attribute = "methodName",
    ///                     Value = "storage.objects.create",
    ///                 },
    ///             },
    ///             Destination = new Gcp.Eventarc.Inputs.TriggerDestinationArgs
    ///             {
    ///                 CloudRunService = new Gcp.Eventarc.Inputs.TriggerDestinationCloudRunServiceArgs
    ///                 {
    ///                     Service = @default.Name,
    ///                     Region = @default.Location,
    ///                 },
    ///             },
    ///             ServiceAccount = projectProject.Apply(projectProject =&gt; $"{projectProject.Number}-compute@developer.gserviceaccount.com"),
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///             DependsOn = 
    ///             {
    ///                 eventarc,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:cloudrun/service:Service default locations/{{location}}/namespaces/{{project}}/services/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:cloudrun/service:Service default {{location}}/{{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:cloudrun/service:Service default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:cloudrun/service:Service")]
    public partial class Service : Pulumi.CustomResource
    {
        /// <summary>
        /// If set to `true`, the revision name (template.metadata.name) will be omitted and
        /// autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
        /// is also set.
        /// (For legacy support, if `template.metadata.name` is unset in state while
        /// this field is set to false, the revision name will still autogenerate.)
        /// </summary>
        [Output("autogenerateRevisionName")]
        public Output<bool?> AutogenerateRevisionName { get; private set; } = null!;

        /// <summary>
        /// The location of the cloud run instance. eg us-central1
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Metadata associated with this Service, including name, namespace, labels,
        /// and annotations.
        /// Structure is documented below.
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.ServiceMetadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// Volume's name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The current status of the Service.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.ServiceStatus>> Statuses { get; private set; } = null!;

        /// <summary>
        /// template holds the latest specification for the Revision to
        /// be stamped out. The template references the container image, and may also
        /// include labels and annotations that should be attached to the Revision.
        /// To correlate a Revision, and/or to force a Revision to be created when the
        /// spec doesn't otherwise change, a nonce label may be provided in the
        /// template metadata. For more details, see:
        /// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
        /// Cloud Run does not currently support referencing a build that is
        /// responsible for materializing the container image from source.
        /// Structure is documented below.
        /// </summary>
        [Output("template")]
        public Output<Outputs.ServiceTemplate?> Template { get; private set; } = null!;

        /// <summary>
        /// Traffic specifies how to distribute traffic over a collection of Knative Revisions
        /// and Configurations
        /// Structure is documented below.
        /// </summary>
        [Output("traffics")]
        public Output<ImmutableArray<Outputs.ServiceTraffic>> Traffics { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("gcp:cloudrun/service:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:cloudrun/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to `true`, the revision name (template.metadata.name) will be omitted and
        /// autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
        /// is also set.
        /// (For legacy support, if `template.metadata.name` is unset in state while
        /// this field is set to false, the revision name will still autogenerate.)
        /// </summary>
        [Input("autogenerateRevisionName")]
        public Input<bool>? AutogenerateRevisionName { get; set; }

        /// <summary>
        /// The location of the cloud run instance. eg us-central1
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Metadata associated with this Service, including name, namespace, labels,
        /// and annotations.
        /// Structure is documented below.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ServiceMetadataArgs>? Metadata { get; set; }

        /// <summary>
        /// Volume's name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// template holds the latest specification for the Revision to
        /// be stamped out. The template references the container image, and may also
        /// include labels and annotations that should be attached to the Revision.
        /// To correlate a Revision, and/or to force a Revision to be created when the
        /// spec doesn't otherwise change, a nonce label may be provided in the
        /// template metadata. For more details, see:
        /// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
        /// Cloud Run does not currently support referencing a build that is
        /// responsible for materializing the container image from source.
        /// Structure is documented below.
        /// </summary>
        [Input("template")]
        public Input<Inputs.ServiceTemplateArgs>? Template { get; set; }

        [Input("traffics")]
        private InputList<Inputs.ServiceTrafficArgs>? _traffics;

        /// <summary>
        /// Traffic specifies how to distribute traffic over a collection of Knative Revisions
        /// and Configurations
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ServiceTrafficArgs> Traffics
        {
            get => _traffics ?? (_traffics = new InputList<Inputs.ServiceTrafficArgs>());
            set => _traffics = value;
        }

        public ServiceArgs()
        {
        }
    }

    public sealed class ServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to `true`, the revision name (template.metadata.name) will be omitted and
        /// autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
        /// is also set.
        /// (For legacy support, if `template.metadata.name` is unset in state while
        /// this field is set to false, the revision name will still autogenerate.)
        /// </summary>
        [Input("autogenerateRevisionName")]
        public Input<bool>? AutogenerateRevisionName { get; set; }

        /// <summary>
        /// The location of the cloud run instance. eg us-central1
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Metadata associated with this Service, including name, namespace, labels,
        /// and annotations.
        /// Structure is documented below.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ServiceMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// Volume's name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("statuses")]
        private InputList<Inputs.ServiceStatusGetArgs>? _statuses;

        /// <summary>
        /// The current status of the Service.
        /// </summary>
        public InputList<Inputs.ServiceStatusGetArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.ServiceStatusGetArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// template holds the latest specification for the Revision to
        /// be stamped out. The template references the container image, and may also
        /// include labels and annotations that should be attached to the Revision.
        /// To correlate a Revision, and/or to force a Revision to be created when the
        /// spec doesn't otherwise change, a nonce label may be provided in the
        /// template metadata. For more details, see:
        /// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
        /// Cloud Run does not currently support referencing a build that is
        /// responsible for materializing the container image from source.
        /// Structure is documented below.
        /// </summary>
        [Input("template")]
        public Input<Inputs.ServiceTemplateGetArgs>? Template { get; set; }

        [Input("traffics")]
        private InputList<Inputs.ServiceTrafficGetArgs>? _traffics;

        /// <summary>
        /// Traffic specifies how to distribute traffic over a collection of Knative Revisions
        /// and Configurations
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ServiceTrafficGetArgs> Traffics
        {
            get => _traffics ?? (_traffics = new InputList<Inputs.ServiceTrafficGetArgs>());
            set => _traffics = value;
        }

        public ServiceState()
        {
        }
    }
}
