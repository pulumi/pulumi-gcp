// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudRun
{
    /// <summary>
    /// A Cloud Run service has a unique endpoint and autoscales containers.
    /// 
    /// To get more information about Service, see:
    /// 
    /// * [API documentation](https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/run/docs/)
    /// 
    /// &gt; **Warning:** We recommend using the `gcp.cloudrunv2.Service` resource which offers a better
    /// developer experience and broader support of Cloud Run features.
    /// 
    /// ## Example Usage
    /// ### Cloud Run Service Pubsub
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRun.Service("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///         {
    ///             Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///             {
    ///                 Containers = new[]
    ///                 {
    ///                     new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                     {
    ///                         Image = "gcr.io/cloudrun/hello",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Traffics = new[]
    ///         {
    ///             new Gcp.CloudRun.Inputs.ServiceTrafficArgs
    ///             {
    ///                 Percent = 100,
    ///                 LatestRevision = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var sa = new Gcp.ServiceAccount.Account("sa", new()
    ///     {
    ///         AccountId = "cloud-run-pubsub-invoker",
    ///         DisplayName = "Cloud Run Pub/Sub Invoker",
    ///     });
    /// 
    ///     var binding = new Gcp.CloudRun.IamBinding("binding", new()
    ///     {
    ///         Location = @default.Location,
    ///         Service = @default.Name,
    ///         Role = "roles/run.invoker",
    ///         Members = new[]
    ///         {
    ///             sa.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///         },
    ///     });
    /// 
    ///     var project = new Gcp.Projects.IAMBinding("project", new()
    ///     {
    ///         Role = "roles/iam.serviceAccountTokenCreator",
    ///         Members = new[]
    ///         {
    ///             sa.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///         },
    ///     });
    /// 
    ///     var topic = new Gcp.PubSub.Topic("topic");
    /// 
    ///     var subscription = new Gcp.PubSub.Subscription("subscription", new()
    ///     {
    ///         Topic = topic.Name,
    ///         PushConfig = new Gcp.PubSub.Inputs.SubscriptionPushConfigArgs
    ///         {
    ///             PushEndpoint = @default.Statuses.Apply(statuses =&gt; statuses[0].Url),
    ///             OidcToken = new Gcp.PubSub.Inputs.SubscriptionPushConfigOidcTokenArgs
    ///             {
    ///                 ServiceAccountEmail = sa.Email,
    ///             },
    ///             Attributes = 
    ///             {
    ///                 { "x-goog-version", "v1" },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloud Run Service Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRun.Service("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///         {
    ///             Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///             {
    ///                 Containers = new[]
    ///                 {
    ///                     new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                     {
    ///                         Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Traffics = new[]
    ///         {
    ///             new Gcp.CloudRun.Inputs.ServiceTrafficArgs
    ///             {
    ///                 LatestRevision = true,
    ///                 Percent = 100,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloud Run Service Sql
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Sql.DatabaseInstance("instance", new()
    ///     {
    ///         Region = "us-east1",
    ///         DatabaseVersion = "MYSQL_5_7",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-f1-micro",
    ///         },
    ///         DeletionProtection = true,
    ///     });
    /// 
    ///     var @default = new Gcp.CloudRun.Service("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///         {
    ///             Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///             {
    ///                 Containers = new[]
    ///                 {
    ///                     new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                     {
    ///                         Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                     },
    ///                 },
    ///             },
    ///             Metadata = new Gcp.CloudRun.Inputs.ServiceTemplateMetadataArgs
    ///             {
    ///                 Annotations = 
    ///                 {
    ///                     { "autoscaling.knative.dev/maxScale", "1000" },
    ///                     { "run.googleapis.com/cloudsql-instances", instance.ConnectionName },
    ///                     { "run.googleapis.com/client-name", "demo" },
    ///                 },
    ///             },
    ///         },
    ///         AutogenerateRevisionName = true,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloud Run Service Noauth
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRun.Service("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///         {
    ///             Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///             {
    ///                 Containers = new[]
    ///                 {
    ///                     new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                     {
    ///                         Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var noauthIAMPolicy = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    ///     {
    ///         Bindings = new[]
    ///         {
    ///             new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
    ///             {
    ///                 Role = "roles/run.invoker",
    ///                 Members = new[]
    ///                 {
    ///                     "allUsers",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var noauthIamPolicy = new Gcp.CloudRun.IamPolicy("noauthIamPolicy", new()
    ///     {
    ///         Location = @default.Location,
    ///         Project = @default.Project,
    ///         Service = @default.Name,
    ///         PolicyData = noauthIAMPolicy.Apply(getIAMPolicyResult =&gt; getIAMPolicyResult.PolicyData),
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloud Run Service Probes
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRun.Service("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///         {
    ///             Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///             {
    ///                 Containers = new[]
    ///                 {
    ///                     new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                     {
    ///                         Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                         StartupProbe = new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerStartupProbeArgs
    ///                         {
    ///                             InitialDelaySeconds = 0,
    ///                             TimeoutSeconds = 1,
    ///                             PeriodSeconds = 3,
    ///                             FailureThreshold = 1,
    ///                             TcpSocket = new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerStartupProbeTcpSocketArgs
    ///                             {
    ///                                 Port = 8080,
    ///                             },
    ///                         },
    ///                         LivenessProbe = new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerLivenessProbeArgs
    ///                         {
    ///                             HttpGet = new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerLivenessProbeHttpGetArgs
    ///                             {
    ///                                 Path = "/",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Traffics = new[]
    ///         {
    ///             new Gcp.CloudRun.Inputs.ServiceTrafficArgs
    ///             {
    ///                 Percent = 100,
    ///                 LatestRevision = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloud Run Service Multicontainer
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRun.Service("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Metadata = new Gcp.CloudRun.Inputs.ServiceMetadataArgs
    ///         {
    ///             Annotations = 
    ///             {
    ///                 { "run.googleapis.com/launch-stage", "BETA" },
    ///             },
    ///         },
    ///         Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///         {
    ///             Metadata = new Gcp.CloudRun.Inputs.ServiceTemplateMetadataArgs
    ///             {
    ///                 Annotations = 
    ///                 {
    ///                     { "run.googleapis.com/container-dependencies", JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["hello-1"] = new[]
    ///                         {
    ///                             "hello-2",
    ///                         },
    ///                     }) },
    ///                 },
    ///             },
    ///             Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///             {
    ///                 Containers = new[]
    ///                 {
    ///                     new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                     {
    ///                         Name = "hello-1",
    ///                         Ports = new[]
    ///                         {
    ///                             new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerPortArgs
    ///                             {
    ///                                 ContainerPort = 8080,
    ///                             },
    ///                         },
    ///                         Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                         VolumeMounts = new[]
    ///                         {
    ///                             new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerVolumeMountArgs
    ///                             {
    ///                                 Name = "shared-volume",
    ///                                 MountPath = "/mnt/shared",
    ///                             },
    ///                         },
    ///                     },
    ///                     new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                     {
    ///                         Name = "hello-2",
    ///                         Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                         Envs = new[]
    ///                         {
    ///                             new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerEnvArgs
    ///                             {
    ///                                 Name = "PORT",
    ///                                 Value = "8081",
    ///                             },
    ///                         },
    ///                         StartupProbe = new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerStartupProbeArgs
    ///                         {
    ///                             HttpGet = new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerStartupProbeHttpGetArgs
    ///                             {
    ///                                 Port = 8081,
    ///                             },
    ///                         },
    ///                         VolumeMounts = new[]
    ///                         {
    ///                             new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerVolumeMountArgs
    ///                             {
    ///                                 Name = "shared-volume",
    ///                                 MountPath = "/mnt/shared",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 Volumes = new[]
    ///                 {
    ///                     new Gcp.CloudRun.Inputs.ServiceTemplateSpecVolumeArgs
    ///                     {
    ///                         Name = "shared-volume",
    ///                         EmptyDir = new Gcp.CloudRun.Inputs.ServiceTemplateSpecVolumeEmptyDirArgs
    ///                         {
    ///                             Medium = "Memory",
    ///                             SizeLimit = "128Mi",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:cloudrun/service:Service default locations/{{location}}/namespaces/{{project}}/services/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:cloudrun/service:Service default {{location}}/{{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:cloudrun/service:Service default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:cloudrun/service:Service")]
    public partial class Service : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If set to `true`, the revision name (template.metadata.name) will be omitted and
        /// autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
        /// is also set.
        /// (For legacy support, if `template.metadata.name` is unset in state while
        /// this field is set to false, the revision name will still autogenerate.)
        /// </summary>
        [Output("autogenerateRevisionName")]
        public Output<bool?> AutogenerateRevisionName { get; private set; } = null!;

        /// <summary>
        /// The location of the cloud run instance. eg us-central1
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Optional metadata for this Revision, including labels and annotations.
        /// Name will be generated by the Configuration. To set minimum instances
        /// for this revision, use the "autoscaling.knative.dev/minScale" annotation
        /// key. To set maximum instances for this revision, use the
        /// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
        /// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
        /// annotation key.
        /// Structure is documented below.
        /// 
        /// (Optional)
        /// Metadata associated with this Service, including name, namespace, labels,
        /// and annotations.
        /// Structure is documented below.
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.ServiceMetadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// Name must be unique within a Google Cloud project and region.
        /// Is required when creating resources. Name is primarily intended
        /// for creation idempotence and configuration definition. Cannot be updated.
        /// More info: http://kubernetes.io/docs/user-guide/identifiers#names
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// Status of the condition, one of True, False, Unknown.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.ServiceStatus>> Statuses { get; private set; } = null!;

        /// <summary>
        /// template holds the latest specification for the Revision to be stamped out. The template references the container image,
        /// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
        /// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
        /// metadata. For more details, see:
        /// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions Cloud Run
        /// does not currently support referencing a build that is responsible for materializing the container image from source.
        /// </summary>
        [Output("template")]
        public Output<Outputs.ServiceTemplate?> Template { get; private set; } = null!;

        /// <summary>
        /// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
        /// </summary>
        [Output("traffics")]
        public Output<ImmutableArray<Outputs.ServiceTraffic>> Traffics { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("gcp:cloudrun/service:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:cloudrun/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to `true`, the revision name (template.metadata.name) will be omitted and
        /// autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
        /// is also set.
        /// (For legacy support, if `template.metadata.name` is unset in state while
        /// this field is set to false, the revision name will still autogenerate.)
        /// </summary>
        [Input("autogenerateRevisionName")]
        public Input<bool>? AutogenerateRevisionName { get; set; }

        /// <summary>
        /// The location of the cloud run instance. eg us-central1
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Optional metadata for this Revision, including labels and annotations.
        /// Name will be generated by the Configuration. To set minimum instances
        /// for this revision, use the "autoscaling.knative.dev/minScale" annotation
        /// key. To set maximum instances for this revision, use the
        /// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
        /// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
        /// annotation key.
        /// Structure is documented below.
        /// 
        /// (Optional)
        /// Metadata associated with this Service, including name, namespace, labels,
        /// and annotations.
        /// Structure is documented below.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ServiceMetadataArgs>? Metadata { get; set; }

        /// <summary>
        /// Name must be unique within a Google Cloud project and region.
        /// Is required when creating resources. Name is primarily intended
        /// for creation idempotence and configuration definition. Cannot be updated.
        /// More info: http://kubernetes.io/docs/user-guide/identifiers#names
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// template holds the latest specification for the Revision to be stamped out. The template references the container image,
        /// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
        /// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
        /// metadata. For more details, see:
        /// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions Cloud Run
        /// does not currently support referencing a build that is responsible for materializing the container image from source.
        /// </summary>
        [Input("template")]
        public Input<Inputs.ServiceTemplateArgs>? Template { get; set; }

        [Input("traffics")]
        private InputList<Inputs.ServiceTrafficArgs>? _traffics;

        /// <summary>
        /// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
        /// </summary>
        public InputList<Inputs.ServiceTrafficArgs> Traffics
        {
            get => _traffics ?? (_traffics = new InputList<Inputs.ServiceTrafficArgs>());
            set => _traffics = value;
        }

        public ServiceArgs()
        {
        }
        public static new ServiceArgs Empty => new ServiceArgs();
    }

    public sealed class ServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to `true`, the revision name (template.metadata.name) will be omitted and
        /// autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
        /// is also set.
        /// (For legacy support, if `template.metadata.name` is unset in state while
        /// this field is set to false, the revision name will still autogenerate.)
        /// </summary>
        [Input("autogenerateRevisionName")]
        public Input<bool>? AutogenerateRevisionName { get; set; }

        /// <summary>
        /// The location of the cloud run instance. eg us-central1
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Optional metadata for this Revision, including labels and annotations.
        /// Name will be generated by the Configuration. To set minimum instances
        /// for this revision, use the "autoscaling.knative.dev/minScale" annotation
        /// key. To set maximum instances for this revision, use the
        /// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
        /// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
        /// annotation key.
        /// Structure is documented below.
        /// 
        /// (Optional)
        /// Metadata associated with this Service, including name, namespace, labels,
        /// and annotations.
        /// Structure is documented below.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ServiceMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// Name must be unique within a Google Cloud project and region.
        /// Is required when creating resources. Name is primarily intended
        /// for creation idempotence and configuration definition. Cannot be updated.
        /// More info: http://kubernetes.io/docs/user-guide/identifiers#names
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("statuses")]
        private InputList<Inputs.ServiceStatusGetArgs>? _statuses;

        /// <summary>
        /// (Output)
        /// Status of the condition, one of True, False, Unknown.
        /// </summary>
        public InputList<Inputs.ServiceStatusGetArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.ServiceStatusGetArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// template holds the latest specification for the Revision to be stamped out. The template references the container image,
        /// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
        /// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
        /// metadata. For more details, see:
        /// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions Cloud Run
        /// does not currently support referencing a build that is responsible for materializing the container image from source.
        /// </summary>
        [Input("template")]
        public Input<Inputs.ServiceTemplateGetArgs>? Template { get; set; }

        [Input("traffics")]
        private InputList<Inputs.ServiceTrafficGetArgs>? _traffics;

        /// <summary>
        /// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
        /// </summary>
        public InputList<Inputs.ServiceTrafficGetArgs> Traffics
        {
            get => _traffics ?? (_traffics = new InputList<Inputs.ServiceTrafficGetArgs>());
            set => _traffics = value;
        }

        public ServiceState()
        {
        }
        public static new ServiceState Empty => new ServiceState();
    }
}
