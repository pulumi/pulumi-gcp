// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudRun
{
    public static class GetLocations
    {
        /// <summary>
        /// Get Cloud Run locations available for a project. 
        /// 
        /// To get more information about Cloud Run, see:
        /// 
        /// * [API documentation](https://cloud.google.com/run/docs/reference/rest/v1/projects.locations)
        /// * How-to Guides
        ///     * [Official Documentation](https://cloud.google.com/run/docs/)
        ///     
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var available = Output.Create(Gcp.CloudRun.GetLocations.InvokeAsync());
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetLocationsResult> InvokeAsync(GetLocationsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLocationsResult>("gcp:cloudrun/getLocations:getLocations", args ?? new GetLocationsArgs(), options.WithDefaults());

        /// <summary>
        /// Get Cloud Run locations available for a project. 
        /// 
        /// To get more information about Cloud Run, see:
        /// 
        /// * [API documentation](https://cloud.google.com/run/docs/reference/rest/v1/projects.locations)
        /// * How-to Guides
        ///     * [Official Documentation](https://cloud.google.com/run/docs/)
        ///     
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var available = Output.Create(Gcp.CloudRun.GetLocations.InvokeAsync());
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetLocationsResult> Invoke(GetLocationsInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetLocationsResult>("gcp:cloudrun/getLocations:getLocations", args ?? new GetLocationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLocationsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The project to list versions for. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetLocationsArgs()
        {
        }
    }

    public sealed class GetLocationsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The project to list versions for. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetLocationsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLocationsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of Cloud Run locations available for the given project.
        /// </summary>
        public readonly ImmutableArray<string> Locations;
        public readonly string Project;

        [OutputConstructor]
        private GetLocationsResult(
            string id,

            ImmutableArray<string> locations,

            string project)
        {
            Id = id;
            Locations = locations;
            Project = project;
        }
    }
}
