// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudRun
{
    /// <summary>
    /// Resource to hold the state and status of a user's domain mapping.
    /// 
    /// 
    /// To get more information about DomainMapping, see:
    /// 
    /// * [API documentation](https://cloud.google.com/run/docs/reference/rest/v1alpha1/projects.locations.domainmappings)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/run/docs/mapping-custom-domains)
    /// 
    /// ## Example Usage - Cloud Run Domain Mapping Basic
    /// 
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var defaultService = new Gcp.CloudRun.Service("defaultService", new Gcp.CloudRun.ServiceArgs
    ///         {
    ///             Location = "us-central1",
    ///             Metadata = new Gcp.CloudRun.Inputs.ServiceMetadataArgs
    ///             {
    ///                 Namespace = "my-project-name",
    ///             },
    ///             Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
    ///             {
    ///                 Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
    ///                 {
    ///                     Containers = 
    ///                     {
    ///                         new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
    ///                         {
    ///                             Image = "gcr.io/cloudrun/hello",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         var defaultDomainMapping = new Gcp.CloudRun.DomainMapping("defaultDomainMapping", new Gcp.CloudRun.DomainMappingArgs
    ///         {
    ///             Location = "us-central1",
    ///             Metadata = new Gcp.CloudRun.Inputs.DomainMappingMetadataArgs
    ///             {
    ///                 Namespace = "my-project-name",
    ///             },
    ///             Spec = new Gcp.CloudRun.Inputs.DomainMappingSpecArgs
    ///             {
    ///                 RouteName = defaultService.Name,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class DomainMapping : Pulumi.CustomResource
    {
        /// <summary>
        /// The location of the cloud run instance. eg us-central1
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Metadata associated with this DomainMapping.  Structure is documented below.
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.DomainMappingMetadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// Name should be a verified domain
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The spec for this DomainMapping.  Structure is documented below.
        /// </summary>
        [Output("spec")]
        public Output<Outputs.DomainMappingSpec> Spec { get; private set; } = null!;

        /// <summary>
        /// The current status of the DomainMapping.
        /// </summary>
        [Output("status")]
        public Output<Outputs.DomainMappingStatus> Status { get; private set; } = null!;


        /// <summary>
        /// Create a DomainMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainMapping(string name, DomainMappingArgs args, CustomResourceOptions? options = null)
            : base("gcp:cloudrun/domainMapping:DomainMapping", name, args ?? new DomainMappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainMapping(string name, Input<string> id, DomainMappingState? state = null, CustomResourceOptions? options = null)
            : base("gcp:cloudrun/domainMapping:DomainMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainMapping Get(string name, Input<string> id, DomainMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainMapping(name, id, state, options);
        }
    }

    public sealed class DomainMappingArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The location of the cloud run instance. eg us-central1
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Metadata associated with this DomainMapping.  Structure is documented below.
        /// </summary>
        [Input("metadata", required: true)]
        public Input<Inputs.DomainMappingMetadataArgs> Metadata { get; set; } = null!;

        /// <summary>
        /// Name should be a verified domain
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The spec for this DomainMapping.  Structure is documented below.
        /// </summary>
        [Input("spec", required: true)]
        public Input<Inputs.DomainMappingSpecArgs> Spec { get; set; } = null!;

        public DomainMappingArgs()
        {
        }
    }

    public sealed class DomainMappingState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The location of the cloud run instance. eg us-central1
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Metadata associated with this DomainMapping.  Structure is documented below.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.DomainMappingMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// Name should be a verified domain
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The spec for this DomainMapping.  Structure is documented below.
        /// </summary>
        [Input("spec")]
        public Input<Inputs.DomainMappingSpecGetArgs>? Spec { get; set; }

        /// <summary>
        /// The current status of the DomainMapping.
        /// </summary>
        [Input("status")]
        public Input<Inputs.DomainMappingStatusGetArgs>? Status { get; set; }

        public DomainMappingState()
        {
        }
    }
}
