// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.IntegrationConnectors
{
    /// <summary>
    /// An Integration connectors Connection.
    /// 
    /// To get more information about Connection, see:
    /// 
    /// * [API documentation](https://cloud.google.com/integration-connectors/docs/reference/rest/v1/projects.locations.connections)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/integration-connectors/docs/createconnection)
    /// 
    /// ## Example Usage
    /// ### Integration Connectors Connection Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testProject = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var pubsubconnection = new Gcp.IntegrationConnectors.Connection("pubsubconnection", new()
    ///     {
    ///         ConfigVariables = new[]
    ///         {
    ///             new Gcp.IntegrationConnectors.Inputs.ConnectionConfigVariableArgs
    ///             {
    ///                 Key = "project_id",
    ///                 StringValue = "connectors-example",
    ///             },
    ///             new Gcp.IntegrationConnectors.Inputs.ConnectionConfigVariableArgs
    ///             {
    ///                 Key = "topic_id",
    ///                 StringValue = "test",
    ///             },
    ///         },
    ///         ConnectorVersion = $"projects/{testProject.Apply(getProjectResult =&gt; getProjectResult.ProjectId)}/locations/global/providers/gcp/connectors/pubsub/versions/1",
    ///         Description = "tf created description",
    ///         Location = "us-central1",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Integration Connectors Connection Advanced
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testProject = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var secret_basic = new Gcp.SecretManager.Secret("secret-basic", new()
    ///     {
    ///         SecretId = "test-secret",
    ///         Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///         {
    ///             UserManaged = new Gcp.SecretManager.Inputs.SecretReplicationUserManagedArgs
    ///             {
    ///                 Replicas = new[]
    ///                 {
    ///                     new Gcp.SecretManager.Inputs.SecretReplicationUserManagedReplicaArgs
    ///                     {
    ///                         Location = "us-central1",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var secret_version_basic = new Gcp.SecretManager.SecretVersion("secret-version-basic", new()
    ///     {
    ///         Secret = secret_basic.Id,
    ///         SecretData = "dummypassword",
    ///     });
    /// 
    ///     var secretIam = new Gcp.SecretManager.SecretIamMember("secretIam", new()
    ///     {
    ///         SecretId = secret_basic.Id,
    ///         Role = "roles/secretmanager.admin",
    ///         Member = $"serviceAccount:{testProject.Apply(getProjectResult =&gt; getProjectResult.Number)}-compute@developer.gserviceaccount.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             secret_version_basic,
    ///         },
    ///     });
    /// 
    ///     var zendeskconnection = new Gcp.IntegrationConnectors.Connection("zendeskconnection", new()
    ///     {
    ///         Description = "tf updated description",
    ///         Location = "us-central1",
    ///         ServiceAccount = $"{testProject.Apply(getProjectResult =&gt; getProjectResult.Number)}-compute@developer.gserviceaccount.com",
    ///         ConnectorVersion = $"projects/{testProject.Apply(getProjectResult =&gt; getProjectResult.ProjectId)}/locations/global/providers/zendesk/connectors/zendesk/versions/1",
    ///         ConfigVariables = new[]
    ///         {
    ///             new Gcp.IntegrationConnectors.Inputs.ConnectionConfigVariableArgs
    ///             {
    ///                 Key = "proxy_enabled",
    ///                 BooleanValue = false,
    ///             },
    ///             new Gcp.IntegrationConnectors.Inputs.ConnectionConfigVariableArgs
    ///             {
    ///                 Key = "sample_integer_value",
    ///                 IntegerValue = 1,
    ///             },
    ///             new Gcp.IntegrationConnectors.Inputs.ConnectionConfigVariableArgs
    ///             {
    ///                 Key = "sample_encryption_key_value",
    ///                 EncryptionKeyValue = new Gcp.IntegrationConnectors.Inputs.ConnectionConfigVariableEncryptionKeyValueArgs
    ///                 {
    ///                     Type = "GOOGLE_MANAGED",
    ///                     KmsKeyName = "sampleKMSKkey",
    ///                 },
    ///             },
    ///             new Gcp.IntegrationConnectors.Inputs.ConnectionConfigVariableArgs
    ///             {
    ///                 Key = "sample_secret_value",
    ///                 SecretValue = new Gcp.IntegrationConnectors.Inputs.ConnectionConfigVariableSecretValueArgs
    ///                 {
    ///                     SecretVersion = secret_version_basic.Name,
    ///                 },
    ///             },
    ///         },
    ///         Suspended = false,
    ///         AuthConfig = new Gcp.IntegrationConnectors.Inputs.ConnectionAuthConfigArgs
    ///         {
    ///             AdditionalVariables = new[]
    ///             {
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionAuthConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_string",
    ///                     StringValue = "sampleString",
    ///                 },
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionAuthConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_boolean",
    ///                     BooleanValue = false,
    ///                 },
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionAuthConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_integer",
    ///                     IntegerValue = 1,
    ///                 },
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionAuthConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_secret_value",
    ///                     SecretValue = new Gcp.IntegrationConnectors.Inputs.ConnectionAuthConfigAdditionalVariableSecretValueArgs
    ///                     {
    ///                         SecretVersion = secret_version_basic.Name,
    ///                     },
    ///                 },
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionAuthConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_encryption_key_value",
    ///                     EncryptionKeyValue = new Gcp.IntegrationConnectors.Inputs.ConnectionAuthConfigAdditionalVariableEncryptionKeyValueArgs
    ///                     {
    ///                         Type = "GOOGLE_MANAGED",
    ///                         KmsKeyName = "sampleKMSKkey",
    ///                     },
    ///                 },
    ///             },
    ///             AuthType = "USER_PASSWORD",
    ///             AuthKey = "sampleAuthKey",
    ///             UserPassword = new Gcp.IntegrationConnectors.Inputs.ConnectionAuthConfigUserPasswordArgs
    ///             {
    ///                 Username = "user@xyz.com",
    ///                 Password = new Gcp.IntegrationConnectors.Inputs.ConnectionAuthConfigUserPasswordPasswordArgs
    ///                 {
    ///                     SecretVersion = secret_version_basic.Name,
    ///                 },
    ///             },
    ///         },
    ///         DestinationConfigs = new[]
    ///         {
    ///             new Gcp.IntegrationConnectors.Inputs.ConnectionDestinationConfigArgs
    ///             {
    ///                 Key = "url",
    ///                 Destinations = new[]
    ///                 {
    ///                     new Gcp.IntegrationConnectors.Inputs.ConnectionDestinationConfigDestinationArgs
    ///                     {
    ///                         Host = "https://test.zendesk.com",
    ///                         Port = 80,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         LockConfig = new Gcp.IntegrationConnectors.Inputs.ConnectionLockConfigArgs
    ///         {
    ///             Locked = false,
    ///             Reason = "Its not locked",
    ///         },
    ///         LogConfig = new Gcp.IntegrationConnectors.Inputs.ConnectionLogConfigArgs
    ///         {
    ///             Enabled = true,
    ///         },
    ///         NodeConfig = new Gcp.IntegrationConnectors.Inputs.ConnectionNodeConfigArgs
    ///         {
    ///             MinNodeCount = 2,
    ///             MaxNodeCount = 50,
    ///         },
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         SslConfig = new Gcp.IntegrationConnectors.Inputs.ConnectionSslConfigArgs
    ///         {
    ///             AdditionalVariables = new[]
    ///             {
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionSslConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_string",
    ///                     StringValue = "sampleString",
    ///                 },
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionSslConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_boolean",
    ///                     BooleanValue = false,
    ///                 },
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionSslConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_integer",
    ///                     IntegerValue = 1,
    ///                 },
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionSslConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_secret_value",
    ///                     SecretValue = new Gcp.IntegrationConnectors.Inputs.ConnectionSslConfigAdditionalVariableSecretValueArgs
    ///                     {
    ///                         SecretVersion = secret_version_basic.Name,
    ///                     },
    ///                 },
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionSslConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_encryption_key_value",
    ///                     EncryptionKeyValue = new Gcp.IntegrationConnectors.Inputs.ConnectionSslConfigAdditionalVariableEncryptionKeyValueArgs
    ///                     {
    ///                         Type = "GOOGLE_MANAGED",
    ///                         KmsKeyName = "sampleKMSKkey",
    ///                     },
    ///                 },
    ///             },
    ///             ClientCertType = "PEM",
    ///             ClientCertificate = new Gcp.IntegrationConnectors.Inputs.ConnectionSslConfigClientCertificateArgs
    ///             {
    ///                 SecretVersion = secret_version_basic.Name,
    ///             },
    ///             ClientPrivateKey = new Gcp.IntegrationConnectors.Inputs.ConnectionSslConfigClientPrivateKeyArgs
    ///             {
    ///                 SecretVersion = secret_version_basic.Name,
    ///             },
    ///             ClientPrivateKeyPass = new Gcp.IntegrationConnectors.Inputs.ConnectionSslConfigClientPrivateKeyPassArgs
    ///             {
    ///                 SecretVersion = secret_version_basic.Name,
    ///             },
    ///             PrivateServerCertificate = new Gcp.IntegrationConnectors.Inputs.ConnectionSslConfigPrivateServerCertificateArgs
    ///             {
    ///                 SecretVersion = secret_version_basic.Name,
    ///             },
    ///             ServerCertType = "PEM",
    ///             TrustModel = "PRIVATE",
    ///             Type = "TLS",
    ///             UseSsl = true,
    ///         },
    ///         EventingEnablementType = "EVENTING_AND_CONNECTION",
    ///         EventingConfig = new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigArgs
    ///         {
    ///             AdditionalVariables = new[]
    ///             {
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_string",
    ///                     StringValue = "sampleString",
    ///                 },
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_boolean",
    ///                     BooleanValue = false,
    ///                 },
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_integer",
    ///                     IntegerValue = 1,
    ///                 },
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_secret_value",
    ///                     SecretValue = new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAdditionalVariableSecretValueArgs
    ///                     {
    ///                         SecretVersion = secret_version_basic.Name,
    ///                     },
    ///                 },
    ///                 new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAdditionalVariableArgs
    ///                 {
    ///                     Key = "sample_encryption_key_value",
    ///                     EncryptionKeyValue = new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAdditionalVariableEncryptionKeyValueArgs
    ///                     {
    ///                         Type = "GOOGLE_MANAGED",
    ///                         KmsKeyName = "sampleKMSKkey",
    ///                     },
    ///                 },
    ///             },
    ///             RegistrationDestinationConfig = new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigRegistrationDestinationConfigArgs
    ///             {
    ///                 Key = "registration_destination_config",
    ///                 Destinations = new[]
    ///                 {
    ///                     new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigRegistrationDestinationConfigDestinationArgs
    ///                     {
    ///                         Host = "https://test.zendesk.com",
    ///                         Port = 80,
    ///                     },
    ///                 },
    ///             },
    ///             AuthConfig = new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAuthConfigArgs
    ///             {
    ///                 AuthType = "USER_PASSWORD",
    ///                 AuthKey = "sampleAuthKey",
    ///                 UserPassword = new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAuthConfigUserPasswordArgs
    ///                 {
    ///                     Username = "user@xyz.com",
    ///                     Password = new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAuthConfigUserPasswordPasswordArgs
    ///                     {
    ///                         SecretVersion = secret_version_basic.Name,
    ///                     },
    ///                 },
    ///                 AdditionalVariables = new[]
    ///                 {
    ///                     new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAuthConfigAdditionalVariableArgs
    ///                     {
    ///                         Key = "sample_string",
    ///                         StringValue = "sampleString",
    ///                     },
    ///                     new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAuthConfigAdditionalVariableArgs
    ///                     {
    ///                         Key = "sample_boolean",
    ///                         BooleanValue = false,
    ///                     },
    ///                     new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAuthConfigAdditionalVariableArgs
    ///                     {
    ///                         Key = "sample_integer",
    ///                         IntegerValue = 1,
    ///                     },
    ///                     new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAuthConfigAdditionalVariableArgs
    ///                     {
    ///                         Key = "sample_secret_value",
    ///                         SecretValue = new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAuthConfigAdditionalVariableSecretValueArgs
    ///                         {
    ///                             SecretVersion = secret_version_basic.Name,
    ///                         },
    ///                     },
    ///                     new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAuthConfigAdditionalVariableArgs
    ///                     {
    ///                         Key = "sample_encryption_key_value",
    ///                         EncryptionKeyValue = new Gcp.IntegrationConnectors.Inputs.ConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueArgs
    ///                         {
    ///                             Type = "GOOGLE_MANAGED",
    ///                             KmsKeyName = "sampleKMSKkey",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             EnrichmentEnabled = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Connection can be imported using any of these accepted formats:
    /// 
    ///  * `projects/{{project}}/locations/{{location}}/connections/{{name}}`
    /// 
    ///  * `{{project}}/{{location}}/{{name}}`
    /// 
    ///  * `{{location}}/{{name}}`
    /// 
    ///  When using the `pulumi import` command, Connection can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:integrationconnectors/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:integrationconnectors/connection:Connection default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:integrationconnectors/connection:Connection default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:integrationconnectors/connection:Connection")]
    public partial class Connection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// authConfig for the connection.
        /// Structure is documented below.
        /// </summary>
        [Output("authConfig")]
        public Output<Outputs.ConnectionAuthConfig?> AuthConfig { get; private set; } = null!;

        /// <summary>
        /// Config Variables for the connection.
        /// Structure is documented below.
        /// </summary>
        [Output("configVariables")]
        public Output<ImmutableArray<Outputs.ConnectionConfigVariable>> ConfigVariables { get; private set; } = null!;

        /// <summary>
        /// Connection revision. This field is only updated when the connection is created or updated by User.
        /// </summary>
        [Output("connectionRevision")]
        public Output<string> ConnectionRevision { get; private set; } = null!;

        /// <summary>
        /// connectorVersion of the Connector.
        /// </summary>
        [Output("connectorVersion")]
        public Output<string> ConnectorVersion { get; private set; } = null!;

        /// <summary>
        /// This cofiguration provides infra configs like rate limit threshold which need to be configurable for every connector version.
        /// Structure is documented below.
        /// </summary>
        [Output("connectorVersionInfraConfigs")]
        public Output<ImmutableArray<Outputs.ConnectionConnectorVersionInfraConfig>> ConnectorVersionInfraConfigs { get; private set; } = null!;

        /// <summary>
        /// Flag to mark the version indicating the launch stage.
        /// </summary>
        [Output("connectorVersionLaunchStage")]
        public Output<string> ConnectorVersionLaunchStage { get; private set; } = null!;

        /// <summary>
        /// Time the Namespace was created in UTC.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// An arbitrary description for the Conection.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Define the Connectors target endpoint.
        /// Structure is documented below.
        /// </summary>
        [Output("destinationConfigs")]
        public Output<ImmutableArray<Outputs.ConnectionDestinationConfig>> DestinationConfigs { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Eventing Configuration of a connection
        /// Structure is documented below.
        /// </summary>
        [Output("eventingConfig")]
        public Output<Outputs.ConnectionEventingConfig?> EventingConfig { get; private set; } = null!;

        /// <summary>
        /// Eventing enablement type. Will be nil if eventing is not enabled.
        /// Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
        /// </summary>
        [Output("eventingEnablementType")]
        public Output<string?> EventingEnablementType { get; private set; } = null!;

        /// <summary>
        /// Eventing Runtime Data.
        /// Structure is documented below.
        /// </summary>
        [Output("eventingRuntimeDatas")]
        public Output<ImmutableArray<Outputs.ConnectionEventingRuntimeData>> EventingRuntimeDatas { get; private set; } = null!;

        /// <summary>
        /// Resource labels to represent user provided metadata.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Location in which Connection needs to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Determines whether or no a connection is locked. If locked, a reason must be specified.
        /// Structure is documented below.
        /// </summary>
        [Output("lockConfig")]
        public Output<Outputs.ConnectionLockConfig?> LockConfig { get; private set; } = null!;

        /// <summary>
        /// Log configuration for the connection.
        /// Structure is documented below.
        /// </summary>
        [Output("logConfig")]
        public Output<Outputs.ConnectionLogConfig?> LogConfig { get; private set; } = null!;

        /// <summary>
        /// Name of Connection needs to be created.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Node configuration for the connection.
        /// Structure is documented below.
        /// </summary>
        [Output("nodeConfig")]
        public Output<Outputs.ConnectionNodeConfig> NodeConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Service account needed for runtime plane to access Google Cloud resources.
        /// </summary>
        [Output("serviceAccount")]
        public Output<string> ServiceAccount { get; private set; } = null!;

        /// <summary>
        /// The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
        /// e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
        /// </summary>
        [Output("serviceDirectory")]
        public Output<string> ServiceDirectory { get; private set; } = null!;

        /// <summary>
        /// SSL Configuration of a connection
        /// Structure is documented below.
        /// </summary>
        [Output("sslConfig")]
        public Output<Outputs.ConnectionSslConfig?> SslConfig { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// Current status of eventing.
        /// Structure is documented below.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.ConnectionStatus>> Statuses { get; private set; } = null!;

        /// <summary>
        /// This subscription type enum states the subscription type of the project.
        /// </summary>
        [Output("subscriptionType")]
        public Output<string> SubscriptionType { get; private set; } = null!;

        /// <summary>
        /// Suspended indicates if a user has suspended a connection or not.
        /// </summary>
        [Output("suspended")]
        public Output<bool?> Suspended { get; private set; } = null!;

        /// <summary>
        /// Time the Namespace was updated in UTC.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs args, CustomResourceOptions? options = null)
            : base("gcp:integrationconnectors/connection:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:integrationconnectors/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// authConfig for the connection.
        /// Structure is documented below.
        /// </summary>
        [Input("authConfig")]
        public Input<Inputs.ConnectionAuthConfigArgs>? AuthConfig { get; set; }

        [Input("configVariables")]
        private InputList<Inputs.ConnectionConfigVariableArgs>? _configVariables;

        /// <summary>
        /// Config Variables for the connection.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ConnectionConfigVariableArgs> ConfigVariables
        {
            get => _configVariables ?? (_configVariables = new InputList<Inputs.ConnectionConfigVariableArgs>());
            set => _configVariables = value;
        }

        /// <summary>
        /// connectorVersion of the Connector.
        /// </summary>
        [Input("connectorVersion", required: true)]
        public Input<string> ConnectorVersion { get; set; } = null!;

        /// <summary>
        /// An arbitrary description for the Conection.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destinationConfigs")]
        private InputList<Inputs.ConnectionDestinationConfigArgs>? _destinationConfigs;

        /// <summary>
        /// Define the Connectors target endpoint.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ConnectionDestinationConfigArgs> DestinationConfigs
        {
            get => _destinationConfigs ?? (_destinationConfigs = new InputList<Inputs.ConnectionDestinationConfigArgs>());
            set => _destinationConfigs = value;
        }

        /// <summary>
        /// Eventing Configuration of a connection
        /// Structure is documented below.
        /// </summary>
        [Input("eventingConfig")]
        public Input<Inputs.ConnectionEventingConfigArgs>? EventingConfig { get; set; }

        /// <summary>
        /// Eventing enablement type. Will be nil if eventing is not enabled.
        /// Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
        /// </summary>
        [Input("eventingEnablementType")]
        public Input<string>? EventingEnablementType { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels to represent user provided metadata.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Location in which Connection needs to be created.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Determines whether or no a connection is locked. If locked, a reason must be specified.
        /// Structure is documented below.
        /// </summary>
        [Input("lockConfig")]
        public Input<Inputs.ConnectionLockConfigArgs>? LockConfig { get; set; }

        /// <summary>
        /// Log configuration for the connection.
        /// Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.ConnectionLogConfigArgs>? LogConfig { get; set; }

        /// <summary>
        /// Name of Connection needs to be created.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Node configuration for the connection.
        /// Structure is documented below.
        /// </summary>
        [Input("nodeConfig")]
        public Input<Inputs.ConnectionNodeConfigArgs>? NodeConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Service account needed for runtime plane to access Google Cloud resources.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// SSL Configuration of a connection
        /// Structure is documented below.
        /// </summary>
        [Input("sslConfig")]
        public Input<Inputs.ConnectionSslConfigArgs>? SslConfig { get; set; }

        /// <summary>
        /// Suspended indicates if a user has suspended a connection or not.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        public ConnectionArgs()
        {
        }
        public static new ConnectionArgs Empty => new ConnectionArgs();
    }

    public sealed class ConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// authConfig for the connection.
        /// Structure is documented below.
        /// </summary>
        [Input("authConfig")]
        public Input<Inputs.ConnectionAuthConfigGetArgs>? AuthConfig { get; set; }

        [Input("configVariables")]
        private InputList<Inputs.ConnectionConfigVariableGetArgs>? _configVariables;

        /// <summary>
        /// Config Variables for the connection.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ConnectionConfigVariableGetArgs> ConfigVariables
        {
            get => _configVariables ?? (_configVariables = new InputList<Inputs.ConnectionConfigVariableGetArgs>());
            set => _configVariables = value;
        }

        /// <summary>
        /// Connection revision. This field is only updated when the connection is created or updated by User.
        /// </summary>
        [Input("connectionRevision")]
        public Input<string>? ConnectionRevision { get; set; }

        /// <summary>
        /// connectorVersion of the Connector.
        /// </summary>
        [Input("connectorVersion")]
        public Input<string>? ConnectorVersion { get; set; }

        [Input("connectorVersionInfraConfigs")]
        private InputList<Inputs.ConnectionConnectorVersionInfraConfigGetArgs>? _connectorVersionInfraConfigs;

        /// <summary>
        /// This cofiguration provides infra configs like rate limit threshold which need to be configurable for every connector version.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ConnectionConnectorVersionInfraConfigGetArgs> ConnectorVersionInfraConfigs
        {
            get => _connectorVersionInfraConfigs ?? (_connectorVersionInfraConfigs = new InputList<Inputs.ConnectionConnectorVersionInfraConfigGetArgs>());
            set => _connectorVersionInfraConfigs = value;
        }

        /// <summary>
        /// Flag to mark the version indicating the launch stage.
        /// </summary>
        [Input("connectorVersionLaunchStage")]
        public Input<string>? ConnectorVersionLaunchStage { get; set; }

        /// <summary>
        /// Time the Namespace was created in UTC.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// An arbitrary description for the Conection.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destinationConfigs")]
        private InputList<Inputs.ConnectionDestinationConfigGetArgs>? _destinationConfigs;

        /// <summary>
        /// Define the Connectors target endpoint.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ConnectionDestinationConfigGetArgs> DestinationConfigs
        {
            get => _destinationConfigs ?? (_destinationConfigs = new InputList<Inputs.ConnectionDestinationConfigGetArgs>());
            set => _destinationConfigs = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Eventing Configuration of a connection
        /// Structure is documented below.
        /// </summary>
        [Input("eventingConfig")]
        public Input<Inputs.ConnectionEventingConfigGetArgs>? EventingConfig { get; set; }

        /// <summary>
        /// Eventing enablement type. Will be nil if eventing is not enabled.
        /// Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
        /// </summary>
        [Input("eventingEnablementType")]
        public Input<string>? EventingEnablementType { get; set; }

        [Input("eventingRuntimeDatas")]
        private InputList<Inputs.ConnectionEventingRuntimeDataGetArgs>? _eventingRuntimeDatas;

        /// <summary>
        /// Eventing Runtime Data.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ConnectionEventingRuntimeDataGetArgs> EventingRuntimeDatas
        {
            get => _eventingRuntimeDatas ?? (_eventingRuntimeDatas = new InputList<Inputs.ConnectionEventingRuntimeDataGetArgs>());
            set => _eventingRuntimeDatas = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels to represent user provided metadata.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Location in which Connection needs to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Determines whether or no a connection is locked. If locked, a reason must be specified.
        /// Structure is documented below.
        /// </summary>
        [Input("lockConfig")]
        public Input<Inputs.ConnectionLockConfigGetArgs>? LockConfig { get; set; }

        /// <summary>
        /// Log configuration for the connection.
        /// Structure is documented below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.ConnectionLogConfigGetArgs>? LogConfig { get; set; }

        /// <summary>
        /// Name of Connection needs to be created.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Node configuration for the connection.
        /// Structure is documented below.
        /// </summary>
        [Input("nodeConfig")]
        public Input<Inputs.ConnectionNodeConfigGetArgs>? NodeConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Service account needed for runtime plane to access Google Cloud resources.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
        /// e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
        /// </summary>
        [Input("serviceDirectory")]
        public Input<string>? ServiceDirectory { get; set; }

        /// <summary>
        /// SSL Configuration of a connection
        /// Structure is documented below.
        /// </summary>
        [Input("sslConfig")]
        public Input<Inputs.ConnectionSslConfigGetArgs>? SslConfig { get; set; }

        [Input("statuses")]
        private InputList<Inputs.ConnectionStatusGetArgs>? _statuses;

        /// <summary>
        /// (Output)
        /// Current status of eventing.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ConnectionStatusGetArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.ConnectionStatusGetArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// This subscription type enum states the subscription type of the project.
        /// </summary>
        [Input("subscriptionType")]
        public Input<string>? SubscriptionType { get; set; }

        /// <summary>
        /// Suspended indicates if a user has suspended a connection or not.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        /// <summary>
        /// Time the Namespace was updated in UTC.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public ConnectionState()
        {
        }
        public static new ConnectionState Empty => new ConnectionState();
    }
}
