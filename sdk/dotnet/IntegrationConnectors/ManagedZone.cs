// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.IntegrationConnectors
{
    /// <summary>
    /// An Integration connectors Managed Zone.
    /// 
    /// To get more information about ManagedZone, see:
    /// 
    /// * [API documentation](https://cloud.google.com/integration-connectors/docs/reference/rest/v1/projects.locations.global.managedZones)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/integration-connectors/docs)
    /// 
    /// ## Example Usage
    /// 
    /// ### Integration Connectors Managed Zone
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var targetProject = new Gcp.Organizations.Project("target_project", new()
    ///     {
    ///         ProjectId = "tf-test_2605",
    ///         Name = "tf-test_34535",
    ///         OrgId = "123456789",
    ///         BillingAccount = "000000-0000000-0000000-000000",
    ///     });
    /// 
    ///     var testProject = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var dnsPeerBinding = new Gcp.Projects.IAMMember("dns_peer_binding", new()
    ///     {
    ///         Project = targetProject.ProjectId,
    ///         Role = "roles/dns.peer",
    ///         Member = $"serviceAccount:service-{testProject.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-connectors.iam.gserviceaccount.com",
    ///     });
    /// 
    ///     var dns = new Gcp.Projects.Service("dns", new()
    ///     {
    ///         Project = targetProject.ProjectId,
    ///         ServiceName = "dns.googleapis.com",
    ///     });
    /// 
    ///     var compute = new Gcp.Projects.Service("compute", new()
    ///     {
    ///         Project = targetProject.ProjectId,
    ///         ServiceName = "compute.googleapis.com",
    ///     });
    /// 
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Project = targetProject.ProjectId,
    ///         Name = "test",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var zone = new Gcp.Dns.ManagedZone("zone", new()
    ///     {
    ///         Name = "tf-test-dns_22375",
    ///         DnsName = "private_29439.example.com.",
    ///         Visibility = "private",
    ///         PrivateVisibilityConfig = new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigArgs
    ///         {
    ///             Networks = new[]
    ///             {
    ///                 new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigNetworkArgs
    ///                 {
    ///                     NetworkUrl = network.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testmanagedzone = new Gcp.IntegrationConnectors.ManagedZone("testmanagedzone", new()
    ///     {
    ///         Name = "test",
    ///         Description = "tf created description",
    ///         Labels = 
    ///         {
    ///             { "intent", "example" },
    ///         },
    ///         TargetProject = targetProject.ProjectId,
    ///         TargetVpc = "test",
    ///         Dns = zone.DnsName,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ManagedZone can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/global/managedZones/{{name}}`
    /// 
    /// * `{{project}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, ManagedZone can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:integrationconnectors/managedZone:ManagedZone default projects/{{project}}/locations/global/managedZones/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:integrationconnectors/managedZone:ManagedZone default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:integrationconnectors/managedZone:ManagedZone default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:integrationconnectors/managedZone:ManagedZone")]
    public partial class ManagedZone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time the Namespace was created in UTC.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// DNS Name of the resource.
        /// </summary>
        [Output("dns")]
        public Output<string> Dns { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Resource labels to represent user provided metadata.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of Managed Zone needs to be created.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The name of the Target Project.
        /// </summary>
        [Output("targetProject")]
        public Output<string> TargetProject { get; private set; } = null!;

        /// <summary>
        /// The name of the Target Project VPC Network.
        /// </summary>
        [Output("targetVpc")]
        public Output<string> TargetVpc { get; private set; } = null!;

        /// <summary>
        /// Time the Namespace was updated in UTC.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedZone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedZone(string name, ManagedZoneArgs args, CustomResourceOptions? options = null)
            : base("gcp:integrationconnectors/managedZone:ManagedZone", name, args ?? new ManagedZoneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedZone(string name, Input<string> id, ManagedZoneState? state = null, CustomResourceOptions? options = null)
            : base("gcp:integrationconnectors/managedZone:ManagedZone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedZone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedZone Get(string name, Input<string> id, ManagedZoneState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedZone(name, id, state, options);
        }
    }

    public sealed class ManagedZoneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// DNS Name of the resource.
        /// </summary>
        [Input("dns", required: true)]
        public Input<string> Dns { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels to represent user provided metadata.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of Managed Zone needs to be created.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The name of the Target Project.
        /// </summary>
        [Input("targetProject", required: true)]
        public Input<string> TargetProject { get; set; } = null!;

        /// <summary>
        /// The name of the Target Project VPC Network.
        /// </summary>
        [Input("targetVpc", required: true)]
        public Input<string> TargetVpc { get; set; } = null!;

        public ManagedZoneArgs()
        {
        }
        public static new ManagedZoneArgs Empty => new ManagedZoneArgs();
    }

    public sealed class ManagedZoneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time the Namespace was created in UTC.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// DNS Name of the resource.
        /// </summary>
        [Input("dns")]
        public Input<string>? Dns { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels to represent user provided metadata.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of Managed Zone needs to be created.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The name of the Target Project.
        /// </summary>
        [Input("targetProject")]
        public Input<string>? TargetProject { get; set; }

        /// <summary>
        /// The name of the Target Project VPC Network.
        /// </summary>
        [Input("targetVpc")]
        public Input<string>? TargetVpc { get; set; }

        /// <summary>
        /// Time the Namespace was updated in UTC.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public ManagedZoneState()
        {
        }
        public static new ManagedZoneState Empty => new ManagedZoneState();
    }
}
