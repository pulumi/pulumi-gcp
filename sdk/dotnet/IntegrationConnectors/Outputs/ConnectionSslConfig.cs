// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.IntegrationConnectors.Outputs
{

    [OutputType]
    public sealed class ConnectionSslConfig
    {
        /// <summary>
        /// Additional SSL related field values.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConnectionSslConfigAdditionalVariable> AdditionalVariables;
        /// <summary>
        /// Type of Client Cert (PEM/JKS/.. etc.)
        /// Possible values are: `PEM`.
        /// </summary>
        public readonly string? ClientCertType;
        /// <summary>
        /// Client Certificate
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.ConnectionSslConfigClientCertificate? ClientCertificate;
        /// <summary>
        /// Client Private Key
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.ConnectionSslConfigClientPrivateKey? ClientPrivateKey;
        /// <summary>
        /// Secret containing the passphrase protecting the Client Private Key
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.ConnectionSslConfigClientPrivateKeyPass? ClientPrivateKeyPass;
        /// <summary>
        /// Private Server Certificate. Needs to be specified if trust model is PRIVATE.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.ConnectionSslConfigPrivateServerCertificate? PrivateServerCertificate;
        /// <summary>
        /// Type of Server Cert (PEM/JKS/.. etc.)
        /// Possible values are: `PEM`.
        /// </summary>
        public readonly string? ServerCertType;
        /// <summary>
        /// Enum for Trust Model
        /// Possible values are: `PUBLIC`, `PRIVATE`, `INSECURE`.
        /// </summary>
        public readonly string? TrustModel;
        /// <summary>
        /// Enum for controlling the SSL Type (TLS/MTLS)
        /// Possible values are: `TLS`, `MTLS`.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Bool for enabling SSL
        /// </summary>
        public readonly bool? UseSsl;

        [OutputConstructor]
        private ConnectionSslConfig(
            ImmutableArray<Outputs.ConnectionSslConfigAdditionalVariable> additionalVariables,

            string? clientCertType,

            Outputs.ConnectionSslConfigClientCertificate? clientCertificate,

            Outputs.ConnectionSslConfigClientPrivateKey? clientPrivateKey,

            Outputs.ConnectionSslConfigClientPrivateKeyPass? clientPrivateKeyPass,

            Outputs.ConnectionSslConfigPrivateServerCertificate? privateServerCertificate,

            string? serverCertType,

            string? trustModel,

            string type,

            bool? useSsl)
        {
            AdditionalVariables = additionalVariables;
            ClientCertType = clientCertType;
            ClientCertificate = clientCertificate;
            ClientPrivateKey = clientPrivateKey;
            ClientPrivateKeyPass = clientPrivateKeyPass;
            PrivateServerCertificate = privateServerCertificate;
            ServerCertType = serverCertType;
            TrustModel = trustModel;
            Type = type;
            UseSsl = useSsl;
        }
    }
}
