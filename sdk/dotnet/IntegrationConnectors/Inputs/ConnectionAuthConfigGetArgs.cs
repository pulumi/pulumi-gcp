// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.IntegrationConnectors.Inputs
{

    public sealed class ConnectionAuthConfigGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalVariables")]
        private InputList<Inputs.ConnectionAuthConfigAdditionalVariableGetArgs>? _additionalVariables;

        /// <summary>
        /// List containing additional auth configs.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ConnectionAuthConfigAdditionalVariableGetArgs> AdditionalVariables
        {
            get => _additionalVariables ?? (_additionalVariables = new InputList<Inputs.ConnectionAuthConfigAdditionalVariableGetArgs>());
            set => _additionalVariables = value;
        }

        /// <summary>
        /// The type of authentication configured.
        /// </summary>
        [Input("authKey")]
        public Input<string>? AuthKey { get; set; }

        /// <summary>
        /// authType of the Connection
        /// Possible values are: `USER_PASSWORD`.
        /// </summary>
        [Input("authType", required: true)]
        public Input<string> AuthType { get; set; } = null!;

        /// <summary>
        /// Parameters to support Oauth 2.0 Auth Code Grant Authentication.
        /// Structure is documented below.
        /// </summary>
        [Input("oauth2AuthCodeFlow")]
        public Input<Inputs.ConnectionAuthConfigOauth2AuthCodeFlowGetArgs>? Oauth2AuthCodeFlow { get; set; }

        /// <summary>
        /// OAuth3 Client Credentials for Authentication.
        /// Structure is documented below.
        /// </summary>
        [Input("oauth2ClientCredentials")]
        public Input<Inputs.ConnectionAuthConfigOauth2ClientCredentialsGetArgs>? Oauth2ClientCredentials { get; set; }

        /// <summary>
        /// OAuth2 JWT Bearer for Authentication.
        /// Structure is documented below.
        /// </summary>
        [Input("oauth2JwtBearer")]
        public Input<Inputs.ConnectionAuthConfigOauth2JwtBearerGetArgs>? Oauth2JwtBearer { get; set; }

        /// <summary>
        /// SSH Public Key for Authentication.
        /// Structure is documented below.
        /// </summary>
        [Input("sshPublicKey")]
        public Input<Inputs.ConnectionAuthConfigSshPublicKeyGetArgs>? SshPublicKey { get; set; }

        /// <summary>
        /// User password for Authentication.
        /// Structure is documented below.
        /// </summary>
        [Input("userPassword")]
        public Input<Inputs.ConnectionAuthConfigUserPasswordGetArgs>? UserPassword { get; set; }

        public ConnectionAuthConfigGetArgs()
        {
        }
        public static new ConnectionAuthConfigGetArgs Empty => new ConnectionAuthConfigGetArgs();
    }
}
