// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.IntegrationConnectors.Inputs
{

    public sealed class ConnectionSslConfigGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalVariables")]
        private InputList<Inputs.ConnectionSslConfigAdditionalVariableGetArgs>? _additionalVariables;

        /// <summary>
        /// Additional SSL related field values.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ConnectionSslConfigAdditionalVariableGetArgs> AdditionalVariables
        {
            get => _additionalVariables ?? (_additionalVariables = new InputList<Inputs.ConnectionSslConfigAdditionalVariableGetArgs>());
            set => _additionalVariables = value;
        }

        /// <summary>
        /// Type of Client Cert (PEM/JKS/.. etc.)
        /// Possible values are: `PEM`.
        /// </summary>
        [Input("clientCertType")]
        public Input<string>? ClientCertType { get; set; }

        /// <summary>
        /// Client Certificate
        /// Structure is documented below.
        /// </summary>
        [Input("clientCertificate")]
        public Input<Inputs.ConnectionSslConfigClientCertificateGetArgs>? ClientCertificate { get; set; }

        /// <summary>
        /// Client Private Key
        /// Structure is documented below.
        /// </summary>
        [Input("clientPrivateKey")]
        public Input<Inputs.ConnectionSslConfigClientPrivateKeyGetArgs>? ClientPrivateKey { get; set; }

        /// <summary>
        /// Secret containing the passphrase protecting the Client Private Key
        /// Structure is documented below.
        /// </summary>
        [Input("clientPrivateKeyPass")]
        public Input<Inputs.ConnectionSslConfigClientPrivateKeyPassGetArgs>? ClientPrivateKeyPass { get; set; }

        /// <summary>
        /// Private Server Certificate. Needs to be specified if trust model is PRIVATE.
        /// Structure is documented below.
        /// </summary>
        [Input("privateServerCertificate")]
        public Input<Inputs.ConnectionSslConfigPrivateServerCertificateGetArgs>? PrivateServerCertificate { get; set; }

        /// <summary>
        /// Type of Server Cert (PEM/JKS/.. etc.)
        /// Possible values are: `PEM`.
        /// </summary>
        [Input("serverCertType")]
        public Input<string>? ServerCertType { get; set; }

        /// <summary>
        /// Enum for Trust Model
        /// Possible values are: `PUBLIC`, `PRIVATE`, `INSECURE`.
        /// </summary>
        [Input("trustModel")]
        public Input<string>? TrustModel { get; set; }

        /// <summary>
        /// Enum for controlling the SSL Type (TLS/MTLS)
        /// Possible values are: `TLS`, `MTLS`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Bool for enabling SSL
        /// </summary>
        [Input("useSsl")]
        public Input<bool>? UseSsl { get; set; }

        public ConnectionSslConfigGetArgs()
        {
        }
        public static new ConnectionSslConfigGetArgs Empty => new ConnectionSslConfigGetArgs();
    }
}
