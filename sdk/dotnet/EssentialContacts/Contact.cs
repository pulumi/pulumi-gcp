// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.EssentialContacts
{
    /// <summary>
    /// A contact that will receive notifications from Google Cloud.
    /// 
    /// To get more information about Contact, see:
    /// 
    /// * [API documentation](https://cloud.google.com/resource-manager/docs/reference/essentialcontacts/rest/v1beta1/projects.contacts)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/resource-manager/docs/managing-notification-contacts)
    /// 
    /// &gt; **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
    /// you must specify a `billing_project` and set `user_project_override` to true
    /// in the provider configuration. Otherwise the Essential Contacts API will return a 403 error.
    /// Your account must have the `serviceusage.services.use` permission on the
    /// `billing_project` you defined.
    /// 
    /// ## Example Usage
    /// ### Essential Contact
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var project = Output.Create(Gcp.Organizations.GetProject.InvokeAsync());
    ///         var contact = new Gcp.EssentialContacts.Contact("contact", new Gcp.EssentialContacts.ContactArgs
    ///         {
    ///             Parent = project.Apply(project =&gt; project.Id),
    ///             Email = "foo@bar.com",
    ///             LanguageTag = "en-GB",
    ///             NotificationCategorySubscriptions = 
    ///             {
    ///                 "ALL",
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             Provider = google_beta,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Contact can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:essentialcontacts/contact:Contact default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:essentialcontacts/contact:Contact")]
    public partial class Contact : Pulumi.CustomResource
    {
        /// <summary>
        /// The email address to send notifications to. This does not need to be a Google account.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// The preferred language for notifications, as a ISO 639-1 language code. See Supported languages for a list of supported languages.
        /// </summary>
        [Output("languageTag")]
        public Output<string> LanguageTag { get; private set; } = null!;

        /// <summary>
        /// The identifier for the contact. Format: {resourceType}/{resource_id}/contacts/{contact_id}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The categories of notifications that the contact will receive communications for.
        /// </summary>
        [Output("notificationCategorySubscriptions")]
        public Output<ImmutableArray<string>> NotificationCategorySubscriptions { get; private set; } = null!;

        /// <summary>
        /// The resource to save this contact for. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;


        /// <summary>
        /// Create a Contact resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Contact(string name, ContactArgs args, CustomResourceOptions? options = null)
            : base("gcp:essentialcontacts/contact:Contact", name, args ?? new ContactArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Contact(string name, Input<string> id, ContactState? state = null, CustomResourceOptions? options = null)
            : base("gcp:essentialcontacts/contact:Contact", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Contact resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Contact Get(string name, Input<string> id, ContactState? state = null, CustomResourceOptions? options = null)
        {
            return new Contact(name, id, state, options);
        }
    }

    public sealed class ContactArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The email address to send notifications to. This does not need to be a Google account.
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        /// <summary>
        /// The preferred language for notifications, as a ISO 639-1 language code. See Supported languages for a list of supported languages.
        /// </summary>
        [Input("languageTag", required: true)]
        public Input<string> LanguageTag { get; set; } = null!;

        [Input("notificationCategorySubscriptions", required: true)]
        private InputList<string>? _notificationCategorySubscriptions;

        /// <summary>
        /// The categories of notifications that the contact will receive communications for.
        /// </summary>
        public InputList<string> NotificationCategorySubscriptions
        {
            get => _notificationCategorySubscriptions ?? (_notificationCategorySubscriptions = new InputList<string>());
            set => _notificationCategorySubscriptions = value;
        }

        /// <summary>
        /// The resource to save this contact for. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        public ContactArgs()
        {
        }
    }

    public sealed class ContactState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The email address to send notifications to. This does not need to be a Google account.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// The preferred language for notifications, as a ISO 639-1 language code. See Supported languages for a list of supported languages.
        /// </summary>
        [Input("languageTag")]
        public Input<string>? LanguageTag { get; set; }

        /// <summary>
        /// The identifier for the contact. Format: {resourceType}/{resource_id}/contacts/{contact_id}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationCategorySubscriptions")]
        private InputList<string>? _notificationCategorySubscriptions;

        /// <summary>
        /// The categories of notifications that the contact will receive communications for.
        /// </summary>
        public InputList<string> NotificationCategorySubscriptions
        {
            get => _notificationCategorySubscriptions ?? (_notificationCategorySubscriptions = new InputList<string>());
            set => _notificationCategorySubscriptions = value;
        }

        /// <summary>
        /// The resource to save this contact for. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        public ContactState()
        {
        }
    }
}
