// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.EssentialContacts
{
    /// <summary>
    /// A document schema is used to define document structure.
    /// 
    /// To get more information about DocumentSchema, see:
    /// 
    /// * [API documentation](https://cloud.google.com/document-warehouse/docs/reference/rest/v1/projects.locations.documentSchemas)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/document-warehouse/docs/manage-document-schemas)
    /// 
    /// ## Example Usage
    /// ### Document Ai Warehouse Document Schema Text
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var exampleText = new Gcp.EssentialContacts.DocumentAiWarehouseDocumentSchema("exampleText", new()
    ///     {
    ///         ProjectNumber = project.Apply(getProjectResult =&gt; getProjectResult.Number),
    ///         DisplayName = "test-property-text",
    ///         Location = "us",
    ///         DocumentIsFolder = false,
    ///         PropertyDefinitions = new[]
    ///         {
    ///             new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs
    ///             {
    ///                 Name = "prop3",
    ///                 DisplayName = "propdisp3",
    ///                 IsRepeatable = false,
    ///                 IsFilterable = true,
    ///                 IsSearchable = true,
    ///                 IsMetadata = false,
    ///                 IsRequired = false,
    ///                 RetrievalImportance = "HIGHEST",
    ///                 SchemaSources = new[]
    ///                 {
    ///                     new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionSchemaSourceArgs
    ///                     {
    ///                         Name = "dummy_source",
    ///                         ProcessorType = "dummy_processor",
    ///                     },
    ///                 },
    ///                 TextTypeOptions = null,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Document Ai Warehouse Document Schema Integer
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var exampleInteger = new Gcp.EssentialContacts.DocumentAiWarehouseDocumentSchema("exampleInteger", new()
    ///     {
    ///         ProjectNumber = project.Apply(getProjectResult =&gt; getProjectResult.Number),
    ///         DisplayName = "test-property-integer",
    ///         Location = "us",
    ///         PropertyDefinitions = new[]
    ///         {
    ///             new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs
    ///             {
    ///                 Name = "prop1",
    ///                 DisplayName = "propdisp1",
    ///                 IsRepeatable = false,
    ///                 IsFilterable = true,
    ///                 IsSearchable = true,
    ///                 IsMetadata = false,
    ///                 IsRequired = false,
    ///                 RetrievalImportance = "HIGHEST",
    ///                 SchemaSources = new[]
    ///                 {
    ///                     new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionSchemaSourceArgs
    ///                     {
    ///                         Name = "dummy_source",
    ///                         ProcessorType = "dummy_processor",
    ///                     },
    ///                 },
    ///                 IntegerTypeOptions = null,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Document Ai Warehouse Document Schema Float
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var exampleFloat = new Gcp.EssentialContacts.DocumentAiWarehouseDocumentSchema("exampleFloat", new()
    ///     {
    ///         ProjectNumber = project.Apply(getProjectResult =&gt; getProjectResult.Number),
    ///         DisplayName = "test-property-float",
    ///         Location = "us",
    ///         PropertyDefinitions = new[]
    ///         {
    ///             new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs
    ///             {
    ///                 Name = "prop2",
    ///                 DisplayName = "propdisp2",
    ///                 IsRepeatable = false,
    ///                 IsFilterable = true,
    ///                 IsSearchable = true,
    ///                 IsMetadata = false,
    ///                 IsRequired = false,
    ///                 RetrievalImportance = "HIGHEST",
    ///                 SchemaSources = new[]
    ///                 {
    ///                     new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionSchemaSourceArgs
    ///                     {
    ///                         Name = "dummy_source",
    ///                         ProcessorType = "dummy_processor",
    ///                     },
    ///                 },
    ///                 FloatTypeOptions = null,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Document Ai Warehouse Document Schema Property
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var exampleProperty = new Gcp.EssentialContacts.DocumentAiWarehouseDocumentSchema("exampleProperty", new()
    ///     {
    ///         ProjectNumber = project.Apply(getProjectResult =&gt; getProjectResult.Number),
    ///         DisplayName = "test-property-property",
    ///         Location = "us",
    ///         DocumentIsFolder = false,
    ///         PropertyDefinitions = new[]
    ///         {
    ///             new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs
    ///             {
    ///                 Name = "prop8",
    ///                 DisplayName = "propdisp8",
    ///                 IsRepeatable = false,
    ///                 IsFilterable = true,
    ///                 IsSearchable = true,
    ///                 IsMetadata = false,
    ///                 IsRequired = false,
    ///                 RetrievalImportance = "HIGHEST",
    ///                 SchemaSources = new[]
    ///                 {
    ///                     new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionSchemaSourceArgs
    ///                     {
    ///                         Name = "dummy_source",
    ///                         ProcessorType = "dummy_processor",
    ///                     },
    ///                 },
    ///                 PropertyTypeOptions = new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionPropertyTypeOptionsArgs
    ///                 {
    ///                     PropertyDefinitions = new[]
    ///                     {
    ///                         new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionArgs
    ///                         {
    ///                             Name = "prop8_nested",
    ///                             DisplayName = "propdisp8_nested",
    ///                             IsRepeatable = false,
    ///                             IsFilterable = true,
    ///                             IsSearchable = true,
    ///                             IsMetadata = false,
    ///                             IsRequired = false,
    ///                             RetrievalImportance = "HIGHEST",
    ///                             SchemaSources = new[]
    ///                             {
    ///                                 new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSourceArgs
    ///                                 {
    ///                                     Name = "dummy_source_nested",
    ///                                     ProcessorType = "dummy_processor_nested",
    ///                                 },
    ///                             },
    ///                             TextTypeOptions = null,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Document Ai Warehouse Document Schema Property Enum
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var examplePropertyEnum = new Gcp.EssentialContacts.DocumentAiWarehouseDocumentSchema("examplePropertyEnum", new()
    ///     {
    ///         ProjectNumber = project.Apply(getProjectResult =&gt; getProjectResult.Number),
    ///         DisplayName = "test-property-property",
    ///         Location = "us",
    ///         DocumentIsFolder = false,
    ///         PropertyDefinitions = new[]
    ///         {
    ///             new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs
    ///             {
    ///                 Name = "prop8",
    ///                 DisplayName = "propdisp8",
    ///                 IsRepeatable = false,
    ///                 IsFilterable = true,
    ///                 IsSearchable = true,
    ///                 IsMetadata = false,
    ///                 IsRequired = false,
    ///                 RetrievalImportance = "HIGHEST",
    ///                 SchemaSources = new[]
    ///                 {
    ///                     new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionSchemaSourceArgs
    ///                     {
    ///                         Name = "dummy_source",
    ///                         ProcessorType = "dummy_processor",
    ///                     },
    ///                 },
    ///                 PropertyTypeOptions = new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionPropertyTypeOptionsArgs
    ///                 {
    ///                     PropertyDefinitions = new[]
    ///                     {
    ///                         new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionArgs
    ///                         {
    ///                             Name = "prop8_nested",
    ///                             DisplayName = "propdisp8_nested",
    ///                             IsRepeatable = false,
    ///                             IsFilterable = true,
    ///                             IsSearchable = true,
    ///                             IsMetadata = false,
    ///                             IsRequired = false,
    ///                             RetrievalImportance = "HIGHEST",
    ///                             SchemaSources = new[]
    ///                             {
    ///                                 new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSourceArgs
    ///                                 {
    ///                                     Name = "dummy_source_nested",
    ///                                     ProcessorType = "dummy_processor_nested",
    ///                                 },
    ///                             },
    ///                             EnumTypeOptions = new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionEnumTypeOptionsArgs
    ///                             {
    ///                                 PossibleValues = new[]
    ///                                 {
    ///                                     "M",
    ///                                     "F",
    ///                                     "X",
    ///                                 },
    ///                                 ValidationCheckDisabled = false,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Document Ai Warehouse Document Schema Enum
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var exampleEnum = new Gcp.EssentialContacts.DocumentAiWarehouseDocumentSchema("exampleEnum", new()
    ///     {
    ///         ProjectNumber = project.Apply(getProjectResult =&gt; getProjectResult.Number),
    ///         DisplayName = "test-property-enum",
    ///         Location = "us",
    ///         PropertyDefinitions = new[]
    ///         {
    ///             new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs
    ///             {
    ///                 Name = "prop6",
    ///                 DisplayName = "propdisp6",
    ///                 IsRepeatable = false,
    ///                 IsFilterable = true,
    ///                 IsSearchable = true,
    ///                 IsMetadata = false,
    ///                 IsRequired = false,
    ///                 RetrievalImportance = "HIGHEST",
    ///                 SchemaSources = new[]
    ///                 {
    ///                     new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionSchemaSourceArgs
    ///                     {
    ///                         Name = "dummy_source",
    ///                         ProcessorType = "dummy_processor",
    ///                     },
    ///                 },
    ///                 EnumTypeOptions = new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionEnumTypeOptionsArgs
    ///                 {
    ///                     PossibleValues = new[]
    ///                     {
    ///                         "M",
    ///                         "F",
    ///                         "X",
    ///                     },
    ///                     ValidationCheckDisabled = false,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Document Ai Warehouse Document Schema Map
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var exampleMap = new Gcp.EssentialContacts.DocumentAiWarehouseDocumentSchema("exampleMap", new()
    ///     {
    ///         ProjectNumber = project.Apply(getProjectResult =&gt; getProjectResult.Number),
    ///         DisplayName = "test-property-map",
    ///         Location = "us",
    ///         PropertyDefinitions = new[]
    ///         {
    ///             new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs
    ///             {
    ///                 Name = "prop4",
    ///                 DisplayName = "propdisp4",
    ///                 IsRepeatable = false,
    ///                 IsFilterable = true,
    ///                 IsSearchable = true,
    ///                 IsMetadata = false,
    ///                 IsRequired = false,
    ///                 RetrievalImportance = "HIGHEST",
    ///                 SchemaSources = new[]
    ///                 {
    ///                     new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionSchemaSourceArgs
    ///                     {
    ///                         Name = "dummy_source",
    ///                         ProcessorType = "dummy_processor",
    ///                     },
    ///                 },
    ///                 MapTypeOptions = null,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Document Ai Warehouse Document Schema Datetime
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var exampleDatetime = new Gcp.EssentialContacts.DocumentAiWarehouseDocumentSchema("exampleDatetime", new()
    ///     {
    ///         ProjectNumber = project.Apply(getProjectResult =&gt; getProjectResult.Number),
    ///         DisplayName = "test-property-date_time",
    ///         Location = "us",
    ///         PropertyDefinitions = new[]
    ///         {
    ///             new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs
    ///             {
    ///                 Name = "prop7",
    ///                 DisplayName = "propdisp7",
    ///                 IsRepeatable = false,
    ///                 IsFilterable = true,
    ///                 IsSearchable = true,
    ///                 IsMetadata = false,
    ///                 IsRequired = false,
    ///                 RetrievalImportance = "HIGHEST",
    ///                 SchemaSources = new[]
    ///                 {
    ///                     new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionSchemaSourceArgs
    ///                     {
    ///                         Name = "dummy_source",
    ///                         ProcessorType = "dummy_processor",
    ///                     },
    ///                 },
    ///                 DateTimeTypeOptions = null,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Document Ai Warehouse Document Schema Timestamp
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var exampleTimestamp = new Gcp.EssentialContacts.DocumentAiWarehouseDocumentSchema("exampleTimestamp", new()
    ///     {
    ///         ProjectNumber = project.Apply(getProjectResult =&gt; getProjectResult.Number),
    ///         DisplayName = "test-property-timestamp",
    ///         Location = "us",
    ///         PropertyDefinitions = new[]
    ///         {
    ///             new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs
    ///             {
    ///                 Name = "prop5",
    ///                 DisplayName = "propdisp5",
    ///                 IsRepeatable = false,
    ///                 IsFilterable = true,
    ///                 IsSearchable = true,
    ///                 IsMetadata = false,
    ///                 IsRequired = false,
    ///                 RetrievalImportance = "HIGHEST",
    ///                 SchemaSources = new[]
    ///                 {
    ///                     new Gcp.EssentialContacts.Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionSchemaSourceArgs
    ///                     {
    ///                         Name = "dummy_source",
    ///                         ProcessorType = "dummy_processor",
    ///                     },
    ///                 },
    ///                 TimestampTypeOptions = null,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DocumentSchema can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema default projects/{{project_number}}/locations/{{location}}/documentSchemas/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema default {{project_number}}/{{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema")]
    public partial class DocumentAiWarehouseDocumentSchema : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the schema given by the user.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Tells whether the document is a folder or a typical document.
        /// </summary>
        [Output("documentIsFolder")]
        public Output<bool?> DocumentIsFolder { get; private set; } = null!;

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the metadata property.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the project.
        /// </summary>
        [Output("projectNumber")]
        public Output<string> ProjectNumber { get; private set; } = null!;

        /// <summary>
        /// Defines the metadata for a schema property.
        /// Structure is documented below.
        /// </summary>
        [Output("propertyDefinitions")]
        public Output<ImmutableArray<Outputs.DocumentAiWarehouseDocumentSchemaPropertyDefinition>> PropertyDefinitions { get; private set; } = null!;


        /// <summary>
        /// Create a DocumentAiWarehouseDocumentSchema resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DocumentAiWarehouseDocumentSchema(string name, DocumentAiWarehouseDocumentSchemaArgs args, CustomResourceOptions? options = null)
            : base("gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema", name, args ?? new DocumentAiWarehouseDocumentSchemaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DocumentAiWarehouseDocumentSchema(string name, Input<string> id, DocumentAiWarehouseDocumentSchemaState? state = null, CustomResourceOptions? options = null)
            : base("gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DocumentAiWarehouseDocumentSchema resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DocumentAiWarehouseDocumentSchema Get(string name, Input<string> id, DocumentAiWarehouseDocumentSchemaState? state = null, CustomResourceOptions? options = null)
        {
            return new DocumentAiWarehouseDocumentSchema(name, id, state, options);
        }
    }

    public sealed class DocumentAiWarehouseDocumentSchemaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the schema given by the user.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Tells whether the document is a folder or a typical document.
        /// </summary>
        [Input("documentIsFolder")]
        public Input<bool>? DocumentIsFolder { get; set; }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The unique identifier of the project.
        /// </summary>
        [Input("projectNumber", required: true)]
        public Input<string> ProjectNumber { get; set; } = null!;

        [Input("propertyDefinitions", required: true)]
        private InputList<Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs>? _propertyDefinitions;

        /// <summary>
        /// Defines the metadata for a schema property.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs> PropertyDefinitions
        {
            get => _propertyDefinitions ?? (_propertyDefinitions = new InputList<Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs>());
            set => _propertyDefinitions = value;
        }

        public DocumentAiWarehouseDocumentSchemaArgs()
        {
        }
        public static new DocumentAiWarehouseDocumentSchemaArgs Empty => new DocumentAiWarehouseDocumentSchemaArgs();
    }

    public sealed class DocumentAiWarehouseDocumentSchemaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the schema given by the user.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Tells whether the document is a folder or a typical document.
        /// </summary>
        [Input("documentIsFolder")]
        public Input<bool>? DocumentIsFolder { get; set; }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the metadata property.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The unique identifier of the project.
        /// </summary>
        [Input("projectNumber")]
        public Input<string>? ProjectNumber { get; set; }

        [Input("propertyDefinitions")]
        private InputList<Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionGetArgs>? _propertyDefinitions;

        /// <summary>
        /// Defines the metadata for a schema property.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionGetArgs> PropertyDefinitions
        {
            get => _propertyDefinitions ?? (_propertyDefinitions = new InputList<Inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionGetArgs>());
            set => _propertyDefinitions = value;
        }

        public DocumentAiWarehouseDocumentSchemaState()
        {
        }
        public static new DocumentAiWarehouseDocumentSchemaState Empty => new DocumentAiWarehouseDocumentSchemaState();
    }
}
