// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apphub
{
    /// <summary>
    /// Application is a functional grouping of Services and Workloads that helps achieve a desired end-to-end business functionality. Services and Workloads are owned by the Application.
    /// 
    /// ## Example Usage
    /// 
    /// ### Apphub Application Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.Apphub.Application("example", new()
    ///     {
    ///         Location = "us-east1",
    ///         ApplicationId = "example-application",
    ///         Scope = new Gcp.Apphub.Inputs.ApplicationScopeArgs
    ///         {
    ///             Type = "REGIONAL",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Apphub Application Global Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.Apphub.Application("example", new()
    ///     {
    ///         Location = "global",
    ///         ApplicationId = "example-application",
    ///         Scope = new Gcp.Apphub.Inputs.ApplicationScopeArgs
    ///         {
    ///             Type = "GLOBAL",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Apphub Application Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example2 = new Gcp.Apphub.Application("example2", new()
    ///     {
    ///         Location = "us-east1",
    ///         ApplicationId = "example-application",
    ///         DisplayName = "Application Full",
    ///         Scope = new Gcp.Apphub.Inputs.ApplicationScopeArgs
    ///         {
    ///             Type = "REGIONAL",
    ///         },
    ///         Description = "Application for testing",
    ///         Attributes = new Gcp.Apphub.Inputs.ApplicationAttributesArgs
    ///         {
    ///             Environment = new Gcp.Apphub.Inputs.ApplicationAttributesEnvironmentArgs
    ///             {
    ///                 Type = "STAGING",
    ///             },
    ///             Criticality = new Gcp.Apphub.Inputs.ApplicationAttributesCriticalityArgs
    ///             {
    ///                 Type = "MISSION_CRITICAL",
    ///             },
    ///             BusinessOwners = new[]
    ///             {
    ///                 new Gcp.Apphub.Inputs.ApplicationAttributesBusinessOwnerArgs
    ///                 {
    ///                     DisplayName = "Alice",
    ///                     Email = "alice@google.com",
    ///                 },
    ///             },
    ///             DeveloperOwners = new[]
    ///             {
    ///                 new Gcp.Apphub.Inputs.ApplicationAttributesDeveloperOwnerArgs
    ///                 {
    ///                     DisplayName = "Bob",
    ///                     Email = "bob@google.com",
    ///                 },
    ///             },
    ///             OperatorOwners = new[]
    ///             {
    ///                 new Gcp.Apphub.Inputs.ApplicationAttributesOperatorOwnerArgs
    ///                 {
    ///                     DisplayName = "Charlie",
    ///                     Email = "charlie@google.com",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Application can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/applications/{{application_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{application_id}}`
    /// 
    /// * `{{location}}/{{application_id}}`
    /// 
    /// When using the `pulumi import` command, Application can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:apphub/application:Application default projects/{{project}}/locations/{{location}}/applications/{{application_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apphub/application:Application default {{project}}/{{location}}/{{application_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apphub/application:Application default {{location}}/{{application_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:apphub/application:Application")]
    public partial class Application : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Required. The Application identifier.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// Consumer provided attributes.
        /// </summary>
        [Output("attributes")]
        public Output<Outputs.ApplicationAttributes?> Attributes { get; private set; } = null!;

        /// <summary>
        /// Output only. Create time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Optional. User-defined description of an Application.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Optional. User-defined name for the Application.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Part of `parent`. See documentation of `projectsId`.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Identifier. The resource name of an Application. Format:
        /// "projects/{host-project-id}/locations/{location}/applications/{application-id}"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Scope of an application.
        /// Structure is documented below.
        /// </summary>
        [Output("scope")]
        public Output<Outputs.ApplicationScope> Scope { get; private set; } = null!;

        /// <summary>
        /// Output only. Application state.
        /// Possible values:
        /// STATE_UNSPECIFIED
        /// CREATING
        /// ACTIVE
        /// DELETING
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Output only. A universally unique identifier (in UUID4 format) for the `Application`.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Output only. Update time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs args, CustomResourceOptions? options = null)
            : base("gcp:apphub/application:Application", name, args ?? new ApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Application(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
            : base("gcp:apphub/application:Application", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new Application(name, id, state, options);
        }
    }

    public sealed class ApplicationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. The Application identifier.
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        /// <summary>
        /// Consumer provided attributes.
        /// </summary>
        [Input("attributes")]
        public Input<Inputs.ApplicationAttributesArgs>? Attributes { get; set; }

        /// <summary>
        /// Optional. User-defined description of an Application.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Optional. User-defined name for the Application.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Part of `parent`. See documentation of `projectsId`.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Scope of an application.
        /// Structure is documented below.
        /// </summary>
        [Input("scope", required: true)]
        public Input<Inputs.ApplicationScopeArgs> Scope { get; set; } = null!;

        public ApplicationArgs()
        {
        }
        public static new ApplicationArgs Empty => new ApplicationArgs();
    }

    public sealed class ApplicationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. The Application identifier.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// Consumer provided attributes.
        /// </summary>
        [Input("attributes")]
        public Input<Inputs.ApplicationAttributesGetArgs>? Attributes { get; set; }

        /// <summary>
        /// Output only. Create time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Optional. User-defined description of an Application.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Optional. User-defined name for the Application.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Part of `parent`. See documentation of `projectsId`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier. The resource name of an Application. Format:
        /// "projects/{host-project-id}/locations/{location}/applications/{application-id}"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Scope of an application.
        /// Structure is documented below.
        /// </summary>
        [Input("scope")]
        public Input<Inputs.ApplicationScopeGetArgs>? Scope { get; set; }

        /// <summary>
        /// Output only. Application state.
        /// Possible values:
        /// STATE_UNSPECIFIED
        /// CREATING
        /// ACTIVE
        /// DELETING
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Output only. A universally unique identifier (in UUID4 format) for the `Application`.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Output only. Update time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public ApplicationState()
        {
        }
        public static new ApplicationState Empty => new ApplicationState();
    }
}
