// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apphub
{
    /// <summary>
    /// Service is a network/api interface that exposes some functionality to clients for consumption over the network. Service typically has one or more Workloads behind it. It registers identified service to the Application.
    /// 
    /// ## Example Usage
    /// 
    /// ### Apphub Service Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var application = new Gcp.Apphub.Application("application", new()
    ///     {
    ///         Location = "us-central1",
    ///         ApplicationId = "example-application-1",
    ///         Scope = new Gcp.Apphub.Inputs.ApplicationScopeArgs
    ///         {
    ///             Type = "REGIONAL",
    ///         },
    ///     });
    /// 
    ///     var serviceProject = new Gcp.Organizations.Project("service_project", new()
    ///     {
    ///         ProjectId = "project-1",
    ///         Name = "Service Project",
    ///         OrgId = "123456789",
    ///         BillingAccount = "000000-0000000-0000000-000000",
    ///     });
    /// 
    ///     // Enable Compute API
    ///     var computeServiceProject = new Gcp.Projects.Service("compute_service_project", new()
    ///     {
    ///         Project = serviceProject.ProjectId,
    ///         ServiceName = "compute.googleapis.com",
    ///     });
    /// 
    ///     var wait120s = new Time.Index.Sleep("wait_120s", new()
    ///     {
    ///         CreateDuration = "120s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             computeServiceProject,
    ///         },
    ///     });
    /// 
    ///     var serviceProjectAttachment = new Gcp.Apphub.ServiceProjectAttachment("service_project_attachment", new()
    ///     {
    ///         ServiceProjectAttachmentId = serviceProject.ProjectId,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait120s,
    ///         },
    ///     });
    /// 
    ///     // VPC network
    ///     var ilbNetwork = new Gcp.Compute.Network("ilb_network", new()
    ///     {
    ///         Name = "l7-ilb-network",
    ///         Project = serviceProject.ProjectId,
    ///         AutoCreateSubnetworks = false,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait120s,
    ///         },
    ///     });
    /// 
    ///     // backend subnet
    ///     var ilbSubnet = new Gcp.Compute.Subnetwork("ilb_subnet", new()
    ///     {
    ///         Name = "l7-ilb-subnet",
    ///         Project = serviceProject.ProjectId,
    ///         IpCidrRange = "10.0.1.0/24",
    ///         Region = "us-central1",
    ///         Network = ilbNetwork.Id,
    ///     });
    /// 
    ///     // health check
    ///     var @default = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "l7-ilb-hc",
    ///         Project = serviceProject.ProjectId,
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///         TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait120s,
    ///         },
    ///     });
    /// 
    ///     // backend service
    ///     var backend = new Gcp.Compute.RegionBackendService("backend", new()
    ///     {
    ///         Name = "l7-ilb-backend-subnet",
    ///         Project = serviceProject.ProjectId,
    ///         Region = "us-central1",
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     // forwarding rule
    ///     var forwardingRule = new Gcp.Compute.ForwardingRule("forwarding_rule", new()
    ///     {
    ///         Name = "l7-ilb-forwarding-rule",
    ///         Project = serviceProject.ProjectId,
    ///         Region = "us-central1",
    ///         IpVersion = "IPV4",
    ///         LoadBalancingScheme = "INTERNAL",
    ///         AllPorts = true,
    ///         BackendService = backend.Id,
    ///         Network = ilbNetwork.Id,
    ///         Subnetwork = ilbSubnet.Id,
    ///     });
    /// 
    ///     // discovered service block
    ///     var catalog_service = Gcp.Apphub.GetDiscoveredService.Invoke(new()
    ///     {
    ///         Location = "us-central1",
    ///         ServiceUri = $"//compute.googleapis.com/{forwardingRule.Id}",
    ///     });
    /// 
    ///     var wait120sForResourceIngestion = new Time.Index.Sleep("wait_120s_for_resource_ingestion", new()
    ///     {
    ///         CreateDuration = "120s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             forwardingRule,
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.Apphub.Service("example", new()
    ///     {
    ///         Location = "us-central1",
    ///         ApplicationId = application.ApplicationId,
    ///         ServiceId = forwardingRule.Name,
    ///         DiscoveredService = catalog_service.Apply(catalog_service =&gt; catalog_service.Apply(getDiscoveredServiceResult =&gt; getDiscoveredServiceResult.Name)),
    ///     });
    /// 
    /// });
    /// ```
    /// ### Apphub Service Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var application = new Gcp.Apphub.Application("application", new()
    ///     {
    ///         Location = "us-central1",
    ///         ApplicationId = "example-application-1",
    ///         Scope = new Gcp.Apphub.Inputs.ApplicationScopeArgs
    ///         {
    ///             Type = "REGIONAL",
    ///         },
    ///     });
    /// 
    ///     var serviceProject = new Gcp.Organizations.Project("service_project", new()
    ///     {
    ///         ProjectId = "project-1",
    ///         Name = "Service Project",
    ///         OrgId = "123456789",
    ///         BillingAccount = "000000-0000000-0000000-000000",
    ///     });
    /// 
    ///     // Enable Compute API
    ///     var computeServiceProject = new Gcp.Projects.Service("compute_service_project", new()
    ///     {
    ///         Project = serviceProject.ProjectId,
    ///         ServiceName = "compute.googleapis.com",
    ///     });
    /// 
    ///     var wait120s = new Time.Index.Sleep("wait_120s", new()
    ///     {
    ///         CreateDuration = "120s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             computeServiceProject,
    ///         },
    ///     });
    /// 
    ///     var serviceProjectAttachment = new Gcp.Apphub.ServiceProjectAttachment("service_project_attachment", new()
    ///     {
    ///         ServiceProjectAttachmentId = serviceProject.ProjectId,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait120s,
    ///         },
    ///     });
    /// 
    ///     // VPC network
    ///     var ilbNetwork = new Gcp.Compute.Network("ilb_network", new()
    ///     {
    ///         Name = "l7-ilb-network",
    ///         Project = serviceProject.ProjectId,
    ///         AutoCreateSubnetworks = false,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait120s,
    ///         },
    ///     });
    /// 
    ///     // backend subnet
    ///     var ilbSubnet = new Gcp.Compute.Subnetwork("ilb_subnet", new()
    ///     {
    ///         Name = "l7-ilb-subnet",
    ///         Project = serviceProject.ProjectId,
    ///         IpCidrRange = "10.0.1.0/24",
    ///         Region = "us-central1",
    ///         Network = ilbNetwork.Id,
    ///     });
    /// 
    ///     // health check
    ///     var @default = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "l7-ilb-hc",
    ///         Project = serviceProject.ProjectId,
    ///         CheckIntervalSec = 1,
    ///         TimeoutSec = 1,
    ///         TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait120s,
    ///         },
    ///     });
    /// 
    ///     // backend service
    ///     var backend = new Gcp.Compute.RegionBackendService("backend", new()
    ///     {
    ///         Name = "l7-ilb-backend-subnet",
    ///         Project = serviceProject.ProjectId,
    ///         Region = "us-central1",
    ///         HealthChecks = @default.Id,
    ///     });
    /// 
    ///     // forwarding rule
    ///     var forwardingRule = new Gcp.Compute.ForwardingRule("forwarding_rule", new()
    ///     {
    ///         Name = "l7-ilb-forwarding-rule",
    ///         Project = serviceProject.ProjectId,
    ///         Region = "us-central1",
    ///         IpVersion = "IPV4",
    ///         LoadBalancingScheme = "INTERNAL",
    ///         AllPorts = true,
    ///         BackendService = backend.Id,
    ///         Network = ilbNetwork.Id,
    ///         Subnetwork = ilbSubnet.Id,
    ///     });
    /// 
    ///     // discovered service block
    ///     var catalog_service = Gcp.Apphub.GetDiscoveredService.Invoke(new()
    ///     {
    ///         Location = "us-central1",
    ///         ServiceUri = $"//compute.googleapis.com/{forwardingRule.Id}",
    ///     });
    /// 
    ///     var wait120sForResourceIngestion = new Time.Index.Sleep("wait_120s_for_resource_ingestion", new()
    ///     {
    ///         CreateDuration = "120s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             forwardingRule,
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.Apphub.Service("example", new()
    ///     {
    ///         Location = "us-central1",
    ///         ApplicationId = application.ApplicationId,
    ///         ServiceId = forwardingRule.Name,
    ///         DiscoveredService = catalog_service.Apply(catalog_service =&gt; catalog_service.Apply(getDiscoveredServiceResult =&gt; getDiscoveredServiceResult.Name)),
    ///         DisplayName = "Example Service Full",
    ///         Description = "Register service for testing",
    ///         Attributes = new Gcp.Apphub.Inputs.ServiceAttributesArgs
    ///         {
    ///             Environment = new Gcp.Apphub.Inputs.ServiceAttributesEnvironmentArgs
    ///             {
    ///                 Type = "STAGING",
    ///             },
    ///             Criticality = new Gcp.Apphub.Inputs.ServiceAttributesCriticalityArgs
    ///             {
    ///                 Type = "MISSION_CRITICAL",
    ///             },
    ///             BusinessOwners = new[]
    ///             {
    ///                 new Gcp.Apphub.Inputs.ServiceAttributesBusinessOwnerArgs
    ///                 {
    ///                     DisplayName = "Alice",
    ///                     Email = "alice@google.com",
    ///                 },
    ///             },
    ///             DeveloperOwners = new[]
    ///             {
    ///                 new Gcp.Apphub.Inputs.ServiceAttributesDeveloperOwnerArgs
    ///                 {
    ///                     DisplayName = "Bob",
    ///                     Email = "bob@google.com",
    ///                 },
    ///             },
    ///             OperatorOwners = new[]
    ///             {
    ///                 new Gcp.Apphub.Inputs.ServiceAttributesOperatorOwnerArgs
    ///                 {
    ///                     DisplayName = "Charlie",
    ///                     Email = "charlie@google.com",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/applications/{{application_id}}/services/{{service_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{application_id}}/{{service_id}}`
    /// 
    /// * `{{location}}/{{application_id}}/{{service_id}}`
    /// 
    /// When using the `pulumi import` command, Service can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:apphub/service:Service default projects/{{project}}/locations/{{location}}/applications/{{application_id}}/services/{{service_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apphub/service:Service default {{project}}/{{location}}/{{application_id}}/{{service_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apphub/service:Service default {{location}}/{{application_id}}/{{service_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:apphub/service:Service")]
    public partial class Service : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// Consumer provided attributes.
        /// Structure is documented below.
        /// </summary>
        [Output("attributes")]
        public Output<Outputs.ServiceAttributes?> Attributes { get; private set; } = null!;

        /// <summary>
        /// Output only. Create time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// User-defined description of a Service.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Immutable. The resource name of the original discovered service.
        /// </summary>
        [Output("discoveredService")]
        public Output<string> DiscoveredService { get; private set; } = null!;

        /// <summary>
        /// User-defined name for the Service.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Identifier. The resource name of a Service. Format:
        /// "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The Service identifier.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// Properties of an underlying cloud resource that can comprise a Service.
        /// Structure is documented below.
        /// </summary>
        [Output("serviceProperties")]
        public Output<ImmutableArray<Outputs.ServiceServiceProperty>> ServiceProperties { get; private set; } = null!;

        /// <summary>
        /// Reference to an underlying networking resource that can comprise a Service.
        /// Structure is documented below.
        /// </summary>
        [Output("serviceReferences")]
        public Output<ImmutableArray<Outputs.ServiceServiceReference>> ServiceReferences { get; private set; } = null!;

        /// <summary>
        /// Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
        /// format.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Output only. Update time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("gcp:apphub/service:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:apphub/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        /// <summary>
        /// Consumer provided attributes.
        /// Structure is documented below.
        /// </summary>
        [Input("attributes")]
        public Input<Inputs.ServiceAttributesArgs>? Attributes { get; set; }

        /// <summary>
        /// User-defined description of a Service.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Immutable. The resource name of the original discovered service.
        /// </summary>
        [Input("discoveredService", required: true)]
        public Input<string> DiscoveredService { get; set; } = null!;

        /// <summary>
        /// User-defined name for the Service.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Service identifier.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public ServiceArgs()
        {
        }
        public static new ServiceArgs Empty => new ServiceArgs();
    }

    public sealed class ServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// Consumer provided attributes.
        /// Structure is documented below.
        /// </summary>
        [Input("attributes")]
        public Input<Inputs.ServiceAttributesGetArgs>? Attributes { get; set; }

        /// <summary>
        /// Output only. Create time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// User-defined description of a Service.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Immutable. The resource name of the original discovered service.
        /// </summary>
        [Input("discoveredService")]
        public Input<string>? DiscoveredService { get; set; }

        /// <summary>
        /// User-defined name for the Service.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier. The resource name of a Service. Format:
        /// "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Service identifier.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        [Input("serviceProperties")]
        private InputList<Inputs.ServiceServicePropertyGetArgs>? _serviceProperties;

        /// <summary>
        /// Properties of an underlying cloud resource that can comprise a Service.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ServiceServicePropertyGetArgs> ServiceProperties
        {
            get => _serviceProperties ?? (_serviceProperties = new InputList<Inputs.ServiceServicePropertyGetArgs>());
            set => _serviceProperties = value;
        }

        [Input("serviceReferences")]
        private InputList<Inputs.ServiceServiceReferenceGetArgs>? _serviceReferences;

        /// <summary>
        /// Reference to an underlying networking resource that can comprise a Service.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ServiceServiceReferenceGetArgs> ServiceReferences
        {
            get => _serviceReferences ?? (_serviceReferences = new InputList<Inputs.ServiceServiceReferenceGetArgs>());
            set => _serviceReferences = value;
        }

        /// <summary>
        /// Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
        /// format.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Output only. Update time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public ServiceState()
        {
        }
        public static new ServiceState Empty => new ServiceState();
    }
}
