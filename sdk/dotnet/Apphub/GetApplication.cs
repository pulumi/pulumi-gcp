// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apphub
{
    public static class GetApplication
    {
        /// <summary>
        /// Application is a functional grouping of Services and Workloads that helps achieve a desired end-to-end business functionality. Services and Workloads are owned by the Application.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var application = Gcp.Apphub.GetApplication.Invoke(new()
        ///     {
        ///         Project = "project-id",
        ///         ApplicationId = "application",
        ///         Location = "location",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetApplicationResult> InvokeAsync(GetApplicationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationResult>("gcp:apphub/getApplication:getApplication", args ?? new GetApplicationArgs(), options.WithDefaults());

        /// <summary>
        /// Application is a functional grouping of Services and Workloads that helps achieve a desired end-to-end business functionality. Services and Workloads are owned by the Application.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var application = Gcp.Apphub.GetApplication.Invoke(new()
        ///     {
        ///         Project = "project-id",
        ///         ApplicationId = "application",
        ///         Location = "location",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetApplicationResult> Invoke(GetApplicationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationResult>("gcp:apphub/getApplication:getApplication", args ?? new GetApplicationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationId", required: true)]
        public string ApplicationId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetApplicationArgs()
        {
        }
        public static new GetApplicationArgs Empty => new GetApplicationArgs();
    }

    public sealed class GetApplicationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public GetApplicationInvokeArgs()
        {
        }
        public static new GetApplicationInvokeArgs Empty => new GetApplicationInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationResult
    {
        public readonly string ApplicationId;
        public readonly ImmutableArray<Outputs.GetApplicationAttributeResult> Attributes;
        public readonly string CreateTime;
        public readonly string Description;
        public readonly string DisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        public readonly string Name;
        public readonly string Project;
        public readonly ImmutableArray<Outputs.GetApplicationScopeResult> Scopes;
        public readonly string State;
        public readonly string Uid;
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetApplicationResult(
            string applicationId,

            ImmutableArray<Outputs.GetApplicationAttributeResult> attributes,

            string createTime,

            string description,

            string displayName,

            string id,

            string location,

            string name,

            string project,

            ImmutableArray<Outputs.GetApplicationScopeResult> scopes,

            string state,

            string uid,

            string updateTime)
        {
            ApplicationId = applicationId;
            Attributes = attributes;
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            Id = id;
            Location = location;
            Name = name;
            Project = project;
            Scopes = scopes;
            State = state;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
