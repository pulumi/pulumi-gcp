// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apphub
{
    public static class GetDiscoveredService
    {
        /// <summary>
        /// Get information about a discovered service from its uri.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_service = Gcp.Apphub.GetDiscoveredService.Invoke(new()
        ///     {
        ///         Location = "my-location",
        ///         ServiceUri = "my-service-uri",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDiscoveredServiceResult> InvokeAsync(GetDiscoveredServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDiscoveredServiceResult>("gcp:apphub/getDiscoveredService:getDiscoveredService", args ?? new GetDiscoveredServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a discovered service from its uri.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_service = Gcp.Apphub.GetDiscoveredService.Invoke(new()
        ///     {
        ///         Location = "my-location",
        ///         ServiceUri = "my-service-uri",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDiscoveredServiceResult> Invoke(GetDiscoveredServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiscoveredServiceResult>("gcp:apphub/getDiscoveredService:getDiscoveredService", args ?? new GetDiscoveredServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiscoveredServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the discovered service.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The host project of the discovered service.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The uri of the service.
        /// </summary>
        [Input("serviceUri", required: true)]
        public string ServiceUri { get; set; } = null!;

        public GetDiscoveredServiceArgs()
        {
        }
        public static new GetDiscoveredServiceArgs Empty => new GetDiscoveredServiceArgs();
    }

    public sealed class GetDiscoveredServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the discovered service.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The host project of the discovered service.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The uri of the service.
        /// </summary>
        [Input("serviceUri", required: true)]
        public Input<string> ServiceUri { get; set; } = null!;

        public GetDiscoveredServiceInvokeArgs()
        {
        }
        public static new GetDiscoveredServiceInvokeArgs Empty => new GetDiscoveredServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetDiscoveredServiceResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location that the underlying resource resides in.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name of a Service. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}".
        /// </summary>
        public readonly string Name;
        public readonly string? Project;
        /// <summary>
        /// Properties of an underlying compute resource that can comprise a Service. Structure is documented below
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDiscoveredServiceServicePropertyResult> ServiceProperties;
        /// <summary>
        /// Reference to an underlying networking resource that can comprise a Service. Structure is documented below
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDiscoveredServiceServiceReferenceResult> ServiceReferences;
        public readonly string ServiceUri;

        [OutputConstructor]
        private GetDiscoveredServiceResult(
            string id,

            string location,

            string name,

            string? project,

            ImmutableArray<Outputs.GetDiscoveredServiceServicePropertyResult> serviceProperties,

            ImmutableArray<Outputs.GetDiscoveredServiceServiceReferenceResult> serviceReferences,

            string serviceUri)
        {
            Id = id;
            Location = location;
            Name = name;
            Project = project;
            ServiceProperties = serviceProperties;
            ServiceReferences = serviceReferences;
            ServiceUri = serviceUri;
        }
    }
}
