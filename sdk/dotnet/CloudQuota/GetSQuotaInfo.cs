// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudQuota
{
    public static class GetSQuotaInfo
    {
        /// <summary>
        /// Provides information about a particular quota for a given project, folder or organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myQuotaInfo = Gcp.CloudQuota.GetSQuotaInfo.Invoke(new()
        ///     {
        ///         Parent = "projects/my-project",
        ///         Service = "compute.googleapis.com",
        ///         QuotaId = "CPUS-per-project-region",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSQuotaInfoResult> InvokeAsync(GetSQuotaInfoArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSQuotaInfoResult>("gcp:cloudquota/getSQuotaInfo:getSQuotaInfo", args ?? new GetSQuotaInfoArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a particular quota for a given project, folder or organization.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myQuotaInfo = Gcp.CloudQuota.GetSQuotaInfo.Invoke(new()
        ///     {
        ///         Parent = "projects/my-project",
        ///         Service = "compute.googleapis.com",
        ///         QuotaId = "CPUS-per-project-region",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSQuotaInfoResult> Invoke(GetSQuotaInfoInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSQuotaInfoResult>("gcp:cloudquota/getSQuotaInfo:getSQuotaInfo", args ?? new GetSQuotaInfoInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSQuotaInfoArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The parent of the quota info. Allowed parents are "projects/[project-id / number]" or "folders/[folder-id / number]" or "organizations/[org-id / number].
        /// </summary>
        [Input("parent", required: true)]
        public string Parent { get; set; } = null!;

        /// <summary>
        /// The id of the quota, which is unique within the service.
        /// </summary>
        [Input("quotaId", required: true)]
        public string QuotaId { get; set; } = null!;

        /// <summary>
        /// The name of the service in which the quota is defined.
        /// </summary>
        [Input("service", required: true)]
        public string Service { get; set; } = null!;

        public GetSQuotaInfoArgs()
        {
        }
        public static new GetSQuotaInfoArgs Empty => new GetSQuotaInfoArgs();
    }

    public sealed class GetSQuotaInfoInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The parent of the quota info. Allowed parents are "projects/[project-id / number]" or "folders/[folder-id / number]" or "organizations/[org-id / number].
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        /// <summary>
        /// The id of the quota, which is unique within the service.
        /// </summary>
        [Input("quotaId", required: true)]
        public Input<string> QuotaId { get; set; } = null!;

        /// <summary>
        /// The name of the service in which the quota is defined.
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        public GetSQuotaInfoInvokeArgs()
        {
        }
        public static new GetSQuotaInfoInvokeArgs Empty => new GetSQuotaInfoInvokeArgs();
    }


    [OutputType]
    public sealed class GetSQuotaInfoResult
    {
        /// <summary>
        /// (Output) The container type of the QuotaInfo.
        /// </summary>
        public readonly string ContainerType;
        /// <summary>
        /// The map of dimensions for this dimensions info. The key of a map entry is "region", "zone" or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {"provider" : "Foo Inc"} where "provider" is a service specific dimension of a quota.
        /// </summary>
        public readonly ImmutableArray<string> Dimensions;
        /// <summary>
        /// (Output) The collection of dimensions info ordered by their dimensions from more specific ones to less specific ones.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSQuotaInfoDimensionsInfoResult> DimensionsInfos;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Output) Whether the quota is a concurrent quota. Concurrent quotas are enforced on the total number of concurrent operations in flight at any given time.
        /// </summary>
        public readonly bool IsConcurrent;
        /// <summary>
        /// (Output) Whether the quota value is fixed or adjustable.
        /// </summary>
        public readonly bool IsFixed;
        /// <summary>
        /// (Output) Whether this is a precise quota. A precise quota is tracked with absolute precision. In contrast, an imprecise quota is not tracked with precision.
        /// </summary>
        public readonly bool IsPrecise;
        /// <summary>
        /// (Output) The metric of the quota. It specifies the resources consumption the quota is defined for, for example: `compute.googleapis.com/cpus`.
        /// </summary>
        public readonly string Metric;
        /// <summary>
        /// (Output) The display name of the quota metric.
        /// </summary>
        public readonly string MetricDisplayName;
        /// <summary>
        /// (Output) The unit in which the metric value is reported, e.g., `MByte`.
        /// </summary>
        public readonly string MetricUnit;
        /// <summary>
        /// (Output) Resource name of this QuotaInfo, for example: `projects/123/locations/global/services/compute.googleapis.com/quotaInfos/CpusPerProjectPerRegion`.
        /// </summary>
        public readonly string Name;
        public readonly string Parent;
        /// <summary>
        /// (Output) The display name of the quota.
        /// </summary>
        public readonly string QuotaDisplayName;
        public readonly string QuotaId;
        /// <summary>
        /// (Output) Whether it is eligible to request a higher quota value for this quota.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSQuotaInfoQuotaIncreaseEligibilityResult> QuotaIncreaseEligibilities;
        /// <summary>
        /// (Output) The reset time interval for the quota. Refresh interval applies to rate quota only. Example: "minute" for per minute, "day" for per day, or "10 seconds" for every 10 seconds.
        /// </summary>
        public readonly string RefreshInterval;
        public readonly string Service;
        /// <summary>
        /// (Output) URI to the page where users can request more quota for the cloud service, for example: `https://console.cloud.google.com/iam-admin/quotas`.
        /// </summary>
        public readonly string ServiceRequestQuotaUri;

        [OutputConstructor]
        private GetSQuotaInfoResult(
            string containerType,

            ImmutableArray<string> dimensions,

            ImmutableArray<Outputs.GetSQuotaInfoDimensionsInfoResult> dimensionsInfos,

            string id,

            bool isConcurrent,

            bool isFixed,

            bool isPrecise,

            string metric,

            string metricDisplayName,

            string metricUnit,

            string name,

            string parent,

            string quotaDisplayName,

            string quotaId,

            ImmutableArray<Outputs.GetSQuotaInfoQuotaIncreaseEligibilityResult> quotaIncreaseEligibilities,

            string refreshInterval,

            string service,

            string serviceRequestQuotaUri)
        {
            ContainerType = containerType;
            Dimensions = dimensions;
            DimensionsInfos = dimensionsInfos;
            Id = id;
            IsConcurrent = isConcurrent;
            IsFixed = isFixed;
            IsPrecise = isPrecise;
            Metric = metric;
            MetricDisplayName = metricDisplayName;
            MetricUnit = metricUnit;
            Name = name;
            Parent = parent;
            QuotaDisplayName = quotaDisplayName;
            QuotaId = quotaId;
            QuotaIncreaseEligibilities = quotaIncreaseEligibilities;
            RefreshInterval = refreshInterval;
            Service = service;
            ServiceRequestQuotaUri = serviceRequestQuotaUri;
        }
    }
}
