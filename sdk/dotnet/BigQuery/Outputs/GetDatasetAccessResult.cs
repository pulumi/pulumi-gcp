// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQuery.Outputs
{

    [OutputType]
    public sealed class GetDatasetAccessResult
    {
        /// <summary>
        /// Grants all resources of particular types in a particular dataset read access to the current dataset.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatasetAccessDatasetResult> Datasets;
        /// <summary>
        /// A domain to grant access to. Any users signed in with the
        /// domain specified will be granted the specified access
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// An email address of a Google Group to grant access to.
        /// </summary>
        public readonly string GroupByEmail;
        /// <summary>
        /// Some other type of member that appears in the IAM Policy but isn't a user,
        /// group, domain, or special group. For example: 'allUsers'
        /// </summary>
        public readonly string IamMember;
        /// <summary>
        /// Describes the rights granted to the user specified by the other
        /// member of the access object. Basic, predefined, and custom roles
        /// are supported. Predefined roles that have equivalent basic roles
        /// are swapped by the API to their basic counterparts. See
        /// [official docs](https://cloud.google.com/bigquery/docs/access-control).
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// A routine from a different dataset to grant access to. Queries
        /// executed against that routine will have read access to tables in
        /// this dataset. The role field is not required when this field is
        /// set. If that routine is updated by any user, access to the routine
        /// needs to be granted again via an update operation.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatasetAccessRoutineResult> Routines;
        /// <summary>
        /// A special group to grant access to. Possible values include:
        /// 
        /// 
        /// * 'projectOwners': Owners of the enclosing project.
        /// 
        /// 
        /// * 'projectReaders': Readers of the enclosing project.
        /// 
        /// 
        /// * 'projectWriters': Writers of the enclosing project.
        /// 
        /// 
        /// * 'allAuthenticatedUsers': All authenticated BigQuery users.
        /// </summary>
        public readonly string SpecialGroup;
        /// <summary>
        /// An email address of a user to grant access to. For example:
        /// fred@example.com
        /// </summary>
        public readonly string UserByEmail;
        /// <summary>
        /// A view from a different dataset to grant access to. Queries
        /// executed against that view will have read access to tables in
        /// this dataset. The role field is not required when this field is
        /// set. If that view is updated by any user, access to the view
        /// needs to be granted again via an update operation.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatasetAccessViewResult> Views;

        [OutputConstructor]
        private GetDatasetAccessResult(
            ImmutableArray<Outputs.GetDatasetAccessDatasetResult> datasets,

            string domain,

            string groupByEmail,

            string iamMember,

            string role,

            ImmutableArray<Outputs.GetDatasetAccessRoutineResult> routines,

            string specialGroup,

            string userByEmail,

            ImmutableArray<Outputs.GetDatasetAccessViewResult> views)
        {
            Datasets = datasets;
            Domain = domain;
            GroupByEmail = groupByEmail;
            IamMember = iamMember;
            Role = role;
            Routines = routines;
            SpecialGroup = specialGroup;
            UserByEmail = userByEmail;
            Views = views;
        }
    }
}
