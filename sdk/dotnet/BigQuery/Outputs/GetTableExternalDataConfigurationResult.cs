// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQuery.Outputs
{

    [OutputType]
    public sealed class GetTableExternalDataConfigurationResult
    {
        /// <summary>
        /// Let BigQuery try to autodetect the schema and format of the table.
        /// </summary>
        public readonly bool Autodetect;
        /// <summary>
        /// Additional options if source_format is set to "AVRO"
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableExternalDataConfigurationAvroOptionResult> AvroOptions;
        /// <summary>
        /// Additional options if sourceFormat is set to BIGTABLE.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableExternalDataConfigurationBigtableOptionResult> BigtableOptions;
        /// <summary>
        /// The compression type of the data source. Valid values are "NONE" or "GZIP".
        /// </summary>
        public readonly string Compression;
        /// <summary>
        /// The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connectionId can have the form "&lt;project&gt;.&lt;location&gt;.&lt;connection_id&gt;" or "projects/&lt;project&gt;/locations/&lt;location&gt;/connections/&lt;connection_id&gt;".
        /// </summary>
        public readonly string ConnectionId;
        /// <summary>
        /// Additional properties to set if source_format is set to "CSV".
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableExternalDataConfigurationCsvOptionResult> CsvOptions;
        /// <summary>
        /// Specifies how source URIs are interpreted for constructing the file set to load.  By default source URIs are expanded against the underlying storage.  Other options include specifying manifest files. Only applicable to object storage systems.
        /// </summary>
        public readonly string FileSetSpecType;
        /// <summary>
        /// Additional options if source_format is set to "GOOGLE_SHEETS".
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableExternalDataConfigurationGoogleSheetsOptionResult> GoogleSheetsOptions;
        /// <summary>
        /// When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableExternalDataConfigurationHivePartitioningOptionResult> HivePartitioningOptions;
        /// <summary>
        /// Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
        /// </summary>
        public readonly bool IgnoreUnknownValues;
        /// <summary>
        /// Load option to be used together with sourceFormat newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and sourceFormat must be set to NEWLINE_DELIMITED_JSON).
        /// </summary>
        public readonly string JsonExtension;
        /// <summary>
        /// Additional properties to set if sourceFormat is set to JSON.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableExternalDataConfigurationJsonOptionResult> JsonOptions;
        /// <summary>
        /// The maximum number of bad records that BigQuery can ignore when reading data.
        /// </summary>
        public readonly int MaxBadRecords;
        /// <summary>
        /// Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
        /// </summary>
        public readonly string MetadataCacheMode;
        /// <summary>
        /// Object Metadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the sourceUris. If ObjectMetadata is set, sourceFormat should be omitted.
        /// </summary>
        public readonly string ObjectMetadata;
        /// <summary>
        /// Additional properties to set if sourceFormat is set to PARQUET.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableExternalDataConfigurationParquetOptionResult> ParquetOptions;
        /// <summary>
        /// When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
        /// </summary>
        public readonly string ReferenceFileSchemaUri;
        /// <summary>
        /// A JSON schema for the external table. Schema is required for CSV and JSON formats and is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats when using external tables.
        /// </summary>
        public readonly string Schema;
        /// <summary>
        /// Please see sourceFormat under ExternalDataConfiguration in Bigquery's public API documentation (https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#externaldataconfiguration) for supported formats. To use "GOOGLE_SHEETS" the scopes must include "googleapis.com/auth/drive.readonly".
        /// </summary>
        public readonly string SourceFormat;
        /// <summary>
        /// A list of the fully-qualified URIs that point to your data in Google Cloud.
        /// </summary>
        public readonly ImmutableArray<string> SourceUris;

        [OutputConstructor]
        private GetTableExternalDataConfigurationResult(
            bool autodetect,

            ImmutableArray<Outputs.GetTableExternalDataConfigurationAvroOptionResult> avroOptions,

            ImmutableArray<Outputs.GetTableExternalDataConfigurationBigtableOptionResult> bigtableOptions,

            string compression,

            string connectionId,

            ImmutableArray<Outputs.GetTableExternalDataConfigurationCsvOptionResult> csvOptions,

            string fileSetSpecType,

            ImmutableArray<Outputs.GetTableExternalDataConfigurationGoogleSheetsOptionResult> googleSheetsOptions,

            ImmutableArray<Outputs.GetTableExternalDataConfigurationHivePartitioningOptionResult> hivePartitioningOptions,

            bool ignoreUnknownValues,

            string jsonExtension,

            ImmutableArray<Outputs.GetTableExternalDataConfigurationJsonOptionResult> jsonOptions,

            int maxBadRecords,

            string metadataCacheMode,

            string objectMetadata,

            ImmutableArray<Outputs.GetTableExternalDataConfigurationParquetOptionResult> parquetOptions,

            string referenceFileSchemaUri,

            string schema,

            string sourceFormat,

            ImmutableArray<string> sourceUris)
        {
            Autodetect = autodetect;
            AvroOptions = avroOptions;
            BigtableOptions = bigtableOptions;
            Compression = compression;
            ConnectionId = connectionId;
            CsvOptions = csvOptions;
            FileSetSpecType = fileSetSpecType;
            GoogleSheetsOptions = googleSheetsOptions;
            HivePartitioningOptions = hivePartitioningOptions;
            IgnoreUnknownValues = ignoreUnknownValues;
            JsonExtension = jsonExtension;
            JsonOptions = jsonOptions;
            MaxBadRecords = maxBadRecords;
            MetadataCacheMode = metadataCacheMode;
            ObjectMetadata = objectMetadata;
            ParquetOptions = parquetOptions;
            ReferenceFileSchemaUri = referenceFileSchemaUri;
            Schema = schema;
            SourceFormat = sourceFormat;
            SourceUris = sourceUris;
        }
    }
}
