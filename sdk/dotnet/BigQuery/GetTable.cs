// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQuery
{
    public static class GetTable
    {
        /// <summary>
        /// Get a specific table in a BigQuery dataset. For more information see
        /// the [official documentation](https://cloud.google.com/bigquery/docs)
        /// and [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var table = Gcp.BigQuery.GetTable.Invoke(new()
        ///     {
        ///         Project = "my-project",
        ///         DatasetId = "my-bq-dataset",
        ///         TableId = "my-table",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTableResult> InvokeAsync(GetTableArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTableResult>("gcp:bigquery/getTable:getTable", args ?? new GetTableArgs(), options.WithDefaults());

        /// <summary>
        /// Get a specific table in a BigQuery dataset. For more information see
        /// the [official documentation](https://cloud.google.com/bigquery/docs)
        /// and [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var table = Gcp.BigQuery.GetTable.Invoke(new()
        ///     {
        ///         Project = "my-project",
        ///         DatasetId = "my-bq-dataset",
        ///         TableId = "my-table",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTableResult> Invoke(GetTableInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTableResult>("gcp:bigquery/getTable:getTable", args ?? new GetTableInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a specific table in a BigQuery dataset. For more information see
        /// the [official documentation](https://cloud.google.com/bigquery/docs)
        /// and [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var table = Gcp.BigQuery.GetTable.Invoke(new()
        ///     {
        ///         Project = "my-project",
        ///         DatasetId = "my-bq-dataset",
        ///         TableId = "my-table",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTableResult> Invoke(GetTableInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTableResult>("gcp:bigquery/getTable:getTable", args ?? new GetTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTableArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The dataset ID.
        /// </summary>
        [Input("datasetId", required: true)]
        public string DatasetId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The table ID.
        /// </summary>
        [Input("tableId", required: true)]
        public string TableId { get; set; } = null!;

        public GetTableArgs()
        {
        }
        public static new GetTableArgs Empty => new GetTableArgs();
    }

    public sealed class GetTableInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The dataset ID.
        /// </summary>
        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The table ID.
        /// </summary>
        [Input("tableId", required: true)]
        public Input<string> TableId { get; set; } = null!;

        public GetTableInvokeArgs()
        {
        }
        public static new GetTableInvokeArgs Empty => new GetTableInvokeArgs();
    }


    [OutputType]
    public sealed class GetTableResult
    {
        public readonly ImmutableArray<Outputs.GetTableBiglakeConfigurationResult> BiglakeConfigurations;
        public readonly ImmutableArray<string> Clusterings;
        public readonly int CreationTime;
        public readonly string DatasetId;
        public readonly bool DeletionProtection;
        public readonly string Description;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly ImmutableArray<Outputs.GetTableEncryptionConfigurationResult> EncryptionConfigurations;
        public readonly string Etag;
        public readonly int ExpirationTime;
        public readonly ImmutableArray<Outputs.GetTableExternalCatalogTableOptionResult> ExternalCatalogTableOptions;
        public readonly ImmutableArray<Outputs.GetTableExternalDataConfigurationResult> ExternalDataConfigurations;
        public readonly string FriendlyName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly int LastModifiedTime;
        public readonly string Location;
        public readonly ImmutableArray<Outputs.GetTableMaterializedViewResult> MaterializedViews;
        public readonly string MaxStaleness;
        public readonly int NumBytes;
        public readonly int NumLongTermBytes;
        public readonly int NumRows;
        public readonly string? Project;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly ImmutableArray<Outputs.GetTableRangePartitioningResult> RangePartitionings;
        public readonly bool RequirePartitionFilter;
        public readonly ImmutableDictionary<string, string> ResourceTags;
        public readonly string Schema;
        public readonly ImmutableArray<Outputs.GetTableSchemaForeignTypeInfoResult> SchemaForeignTypeInfos;
        public readonly string SelfLink;
        public readonly ImmutableArray<Outputs.GetTableTableConstraintResult> TableConstraints;
        public readonly string TableId;
        public readonly string TableMetadataView;
        public readonly ImmutableArray<Outputs.GetTableTableReplicationInfoResult> TableReplicationInfos;
        public readonly ImmutableArray<Outputs.GetTableTimePartitioningResult> TimePartitionings;
        public readonly string Type;
        public readonly ImmutableArray<Outputs.GetTableViewResult> Views;

        [OutputConstructor]
        private GetTableResult(
            ImmutableArray<Outputs.GetTableBiglakeConfigurationResult> biglakeConfigurations,

            ImmutableArray<string> clusterings,

            int creationTime,

            string datasetId,

            bool deletionProtection,

            string description,

            ImmutableDictionary<string, string> effectiveLabels,

            ImmutableArray<Outputs.GetTableEncryptionConfigurationResult> encryptionConfigurations,

            string etag,

            int expirationTime,

            ImmutableArray<Outputs.GetTableExternalCatalogTableOptionResult> externalCatalogTableOptions,

            ImmutableArray<Outputs.GetTableExternalDataConfigurationResult> externalDataConfigurations,

            string friendlyName,

            string id,

            ImmutableDictionary<string, string> labels,

            int lastModifiedTime,

            string location,

            ImmutableArray<Outputs.GetTableMaterializedViewResult> materializedViews,

            string maxStaleness,

            int numBytes,

            int numLongTermBytes,

            int numRows,

            string? project,

            ImmutableDictionary<string, string> pulumiLabels,

            ImmutableArray<Outputs.GetTableRangePartitioningResult> rangePartitionings,

            bool requirePartitionFilter,

            ImmutableDictionary<string, string> resourceTags,

            string schema,

            ImmutableArray<Outputs.GetTableSchemaForeignTypeInfoResult> schemaForeignTypeInfos,

            string selfLink,

            ImmutableArray<Outputs.GetTableTableConstraintResult> tableConstraints,

            string tableId,

            string tableMetadataView,

            ImmutableArray<Outputs.GetTableTableReplicationInfoResult> tableReplicationInfos,

            ImmutableArray<Outputs.GetTableTimePartitioningResult> timePartitionings,

            string type,

            ImmutableArray<Outputs.GetTableViewResult> views)
        {
            BiglakeConfigurations = biglakeConfigurations;
            Clusterings = clusterings;
            CreationTime = creationTime;
            DatasetId = datasetId;
            DeletionProtection = deletionProtection;
            Description = description;
            EffectiveLabels = effectiveLabels;
            EncryptionConfigurations = encryptionConfigurations;
            Etag = etag;
            ExpirationTime = expirationTime;
            ExternalCatalogTableOptions = externalCatalogTableOptions;
            ExternalDataConfigurations = externalDataConfigurations;
            FriendlyName = friendlyName;
            Id = id;
            Labels = labels;
            LastModifiedTime = lastModifiedTime;
            Location = location;
            MaterializedViews = materializedViews;
            MaxStaleness = maxStaleness;
            NumBytes = numBytes;
            NumLongTermBytes = numLongTermBytes;
            NumRows = numRows;
            Project = project;
            PulumiLabels = pulumiLabels;
            RangePartitionings = rangePartitionings;
            RequirePartitionFilter = requirePartitionFilter;
            ResourceTags = resourceTags;
            Schema = schema;
            SchemaForeignTypeInfos = schemaForeignTypeInfos;
            SelfLink = selfLink;
            TableConstraints = tableConstraints;
            TableId = tableId;
            TableMetadataView = tableMetadataView;
            TableReplicationInfos = tableReplicationInfos;
            TimePartitionings = timePartitionings;
            Type = type;
            Views = views;
        }
    }
}
