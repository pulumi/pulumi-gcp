// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQuery
{
    /// <summary>
    /// App profile is a configuration object describing how Cloud Bigtable should treat traffic from a particular end user application.
    /// 
    /// To get more information about AppProfile, see:
    /// 
    /// * [API documentation](https://cloud.google.com/bigtable/docs/reference/admin/rest/v2/projects.instances.appProfiles)
    /// 
    /// ## Example Usage
    /// 
    /// ### Bigtable App Profile Anycluster
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.BigTable.Instance("instance", new()
    ///     {
    ///         Name = "bt-instance",
    ///         Clusters = new[]
    ///         {
    ///             new Gcp.BigTable.Inputs.InstanceClusterArgs
    ///             {
    ///                 ClusterId = "cluster-1",
    ///                 Zone = "us-central1-a",
    ///                 NumNodes = 3,
    ///                 StorageType = "HDD",
    ///             },
    ///             new Gcp.BigTable.Inputs.InstanceClusterArgs
    ///             {
    ///                 ClusterId = "cluster-2",
    ///                 Zone = "us-central1-b",
    ///                 NumNodes = 3,
    ///                 StorageType = "HDD",
    ///             },
    ///             new Gcp.BigTable.Inputs.InstanceClusterArgs
    ///             {
    ///                 ClusterId = "cluster-3",
    ///                 Zone = "us-central1-c",
    ///                 NumNodes = 3,
    ///                 StorageType = "HDD",
    ///             },
    ///         },
    ///         DeletionProtection = true,
    ///     });
    /// 
    ///     var ap = new Gcp.BigQuery.AppProfile("ap", new()
    ///     {
    ///         Instance = instance.Name,
    ///         AppProfileId = "bt-profile",
    ///         MultiClusterRoutingUseAny = true,
    ///         IgnoreWarnings = true,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Bigtable App Profile Singlecluster
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.BigTable.Instance("instance", new()
    ///     {
    ///         Name = "bt-instance",
    ///         Clusters = new[]
    ///         {
    ///             new Gcp.BigTable.Inputs.InstanceClusterArgs
    ///             {
    ///                 ClusterId = "cluster-1",
    ///                 Zone = "us-central1-b",
    ///                 NumNodes = 3,
    ///                 StorageType = "HDD",
    ///             },
    ///         },
    ///         DeletionProtection = true,
    ///     });
    /// 
    ///     var ap = new Gcp.BigQuery.AppProfile("ap", new()
    ///     {
    ///         Instance = instance.Name,
    ///         AppProfileId = "bt-profile",
    ///         SingleClusterRouting = new Gcp.BigQuery.Inputs.AppProfileSingleClusterRoutingArgs
    ///         {
    ///             ClusterId = "cluster-1",
    ///             AllowTransactionalWrites = true,
    ///         },
    ///         IgnoreWarnings = true,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Bigtable App Profile Multicluster
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.BigTable.Instance("instance", new()
    ///     {
    ///         Name = "bt-instance",
    ///         Clusters = new[]
    ///         {
    ///             new Gcp.BigTable.Inputs.InstanceClusterArgs
    ///             {
    ///                 ClusterId = "cluster-1",
    ///                 Zone = "us-central1-a",
    ///                 NumNodes = 3,
    ///                 StorageType = "HDD",
    ///             },
    ///             new Gcp.BigTable.Inputs.InstanceClusterArgs
    ///             {
    ///                 ClusterId = "cluster-2",
    ///                 Zone = "us-central1-b",
    ///                 NumNodes = 3,
    ///                 StorageType = "HDD",
    ///             },
    ///             new Gcp.BigTable.Inputs.InstanceClusterArgs
    ///             {
    ///                 ClusterId = "cluster-3",
    ///                 Zone = "us-central1-c",
    ///                 NumNodes = 3,
    ///                 StorageType = "HDD",
    ///             },
    ///         },
    ///         DeletionProtection = true,
    ///     });
    /// 
    ///     var ap = new Gcp.BigQuery.AppProfile("ap", new()
    ///     {
    ///         Instance = instance.Name,
    ///         AppProfileId = "bt-profile",
    ///         MultiClusterRoutingUseAny = true,
    ///         MultiClusterRoutingClusterIds = new[]
    ///         {
    ///             "cluster-1",
    ///             "cluster-2",
    ///         },
    ///         IgnoreWarnings = true,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Bigtable App Profile Priority
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.BigTable.Instance("instance", new()
    ///     {
    ///         Name = "bt-instance",
    ///         Clusters = new[]
    ///         {
    ///             new Gcp.BigTable.Inputs.InstanceClusterArgs
    ///             {
    ///                 ClusterId = "cluster-1",
    ///                 Zone = "us-central1-b",
    ///                 NumNodes = 3,
    ///                 StorageType = "HDD",
    ///             },
    ///         },
    ///         DeletionProtection = true,
    ///     });
    /// 
    ///     var ap = new Gcp.BigQuery.AppProfile("ap", new()
    ///     {
    ///         Instance = instance.Name,
    ///         AppProfileId = "bt-profile",
    ///         SingleClusterRouting = new Gcp.BigQuery.Inputs.AppProfileSingleClusterRoutingArgs
    ///         {
    ///             ClusterId = "cluster-1",
    ///             AllowTransactionalWrites = true,
    ///         },
    ///         StandardIsolation = new Gcp.BigQuery.Inputs.AppProfileStandardIsolationArgs
    ///         {
    ///             Priority = "PRIORITY_LOW",
    ///         },
    ///         IgnoreWarnings = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// AppProfile can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/instances/{{instance}}/appProfiles/{{app_profile_id}}`
    /// 
    /// * `{{project}}/{{instance}}/{{app_profile_id}}`
    /// 
    /// * `{{instance}}/{{app_profile_id}}`
    /// 
    /// When using the `pulumi import` command, AppProfile can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigquery/appProfile:AppProfile default projects/{{project}}/instances/{{instance}}/appProfiles/{{app_profile_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigquery/appProfile:AppProfile default {{project}}/{{instance}}/{{app_profile_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigquery/appProfile:AppProfile default {{instance}}/{{app_profile_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:bigquery/appProfile:AppProfile")]
    public partial class AppProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique name of the app profile in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("appProfileId")]
        public Output<string> AppProfileId { get; private set; } = null!;

        /// <summary>
        /// Specifies that this app profile is intended for read-only usage via the Data Boost feature.
        /// Structure is documented below.
        /// </summary>
        [Output("dataBoostIsolationReadOnly")]
        public Output<Outputs.AppProfileDataBoostIsolationReadOnly?> DataBoostIsolationReadOnly { get; private set; } = null!;

        /// <summary>
        /// Long form description of the use case for this app profile.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If true, ignore safety checks when deleting/updating the app profile.
        /// </summary>
        [Output("ignoreWarnings")]
        public Output<bool?> IgnoreWarnings { get; private set; } = null!;

        /// <summary>
        /// The name of the instance to create the app profile within.
        /// </summary>
        [Output("instance")]
        public Output<string?> Instance { get; private set; } = null!;

        /// <summary>
        /// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all
        /// clusters are eligible.
        /// </summary>
        [Output("multiClusterRoutingClusterIds")]
        public Output<ImmutableArray<string>> MultiClusterRoutingClusterIds { get; private set; } = null!;

        /// <summary>
        /// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
        /// in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
        /// consistency to improve availability.
        /// </summary>
        [Output("multiClusterRoutingUseAny")]
        public Output<bool?> MultiClusterRoutingUseAny { get; private set; } = null!;

        /// <summary>
        /// The unique name of the requested app profile. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/appProfiles/&lt;appProfileId&gt;`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Must be used with multi-cluster routing. If true, then this app profile will use row affinity sticky routing. With row
        /// affinity, Bigtable will route single row key requests based on the row key, rather than randomly. Instead, each row key
        /// will be assigned to a cluster by Cloud Bigtable, and will stick to that cluster. Choosing this option improves
        /// read-your-writes consistency for most requests under most circumstances, without sacrificing availability. Consistency
        /// is not guaranteed, as requests may still fail over between clusters in the event of errors or latency.
        /// </summary>
        [Output("rowAffinity")]
        public Output<bool?> RowAffinity { get; private set; } = null!;

        /// <summary>
        /// Use a single-cluster routing policy.
        /// Structure is documented below.
        /// </summary>
        [Output("singleClusterRouting")]
        public Output<Outputs.AppProfileSingleClusterRouting?> SingleClusterRouting { get; private set; } = null!;

        /// <summary>
        /// The standard options used for isolating this app profile's traffic from other use cases.
        /// Structure is documented below.
        /// </summary>
        [Output("standardIsolation")]
        public Output<Outputs.AppProfileStandardIsolation> StandardIsolation { get; private set; } = null!;


        /// <summary>
        /// Create a AppProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppProfile(string name, AppProfileArgs args, CustomResourceOptions? options = null)
            : base("gcp:bigquery/appProfile:AppProfile", name, args ?? new AppProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppProfile(string name, Input<string> id, AppProfileState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigquery/appProfile:AppProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppProfile Get(string name, Input<string> id, AppProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new AppProfile(name, id, state, options);
        }
    }

    public sealed class AppProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique name of the app profile in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("appProfileId", required: true)]
        public Input<string> AppProfileId { get; set; } = null!;

        /// <summary>
        /// Specifies that this app profile is intended for read-only usage via the Data Boost feature.
        /// Structure is documented below.
        /// </summary>
        [Input("dataBoostIsolationReadOnly")]
        public Input<Inputs.AppProfileDataBoostIsolationReadOnlyArgs>? DataBoostIsolationReadOnly { get; set; }

        /// <summary>
        /// Long form description of the use case for this app profile.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If true, ignore safety checks when deleting/updating the app profile.
        /// </summary>
        [Input("ignoreWarnings")]
        public Input<bool>? IgnoreWarnings { get; set; }

        /// <summary>
        /// The name of the instance to create the app profile within.
        /// </summary>
        [Input("instance")]
        public Input<string>? Instance { get; set; }

        [Input("multiClusterRoutingClusterIds")]
        private InputList<string>? _multiClusterRoutingClusterIds;

        /// <summary>
        /// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all
        /// clusters are eligible.
        /// </summary>
        public InputList<string> MultiClusterRoutingClusterIds
        {
            get => _multiClusterRoutingClusterIds ?? (_multiClusterRoutingClusterIds = new InputList<string>());
            set => _multiClusterRoutingClusterIds = value;
        }

        /// <summary>
        /// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
        /// in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
        /// consistency to improve availability.
        /// </summary>
        [Input("multiClusterRoutingUseAny")]
        public Input<bool>? MultiClusterRoutingUseAny { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Must be used with multi-cluster routing. If true, then this app profile will use row affinity sticky routing. With row
        /// affinity, Bigtable will route single row key requests based on the row key, rather than randomly. Instead, each row key
        /// will be assigned to a cluster by Cloud Bigtable, and will stick to that cluster. Choosing this option improves
        /// read-your-writes consistency for most requests under most circumstances, without sacrificing availability. Consistency
        /// is not guaranteed, as requests may still fail over between clusters in the event of errors or latency.
        /// </summary>
        [Input("rowAffinity")]
        public Input<bool>? RowAffinity { get; set; }

        /// <summary>
        /// Use a single-cluster routing policy.
        /// Structure is documented below.
        /// </summary>
        [Input("singleClusterRouting")]
        public Input<Inputs.AppProfileSingleClusterRoutingArgs>? SingleClusterRouting { get; set; }

        /// <summary>
        /// The standard options used for isolating this app profile's traffic from other use cases.
        /// Structure is documented below.
        /// </summary>
        [Input("standardIsolation")]
        public Input<Inputs.AppProfileStandardIsolationArgs>? StandardIsolation { get; set; }

        public AppProfileArgs()
        {
        }
        public static new AppProfileArgs Empty => new AppProfileArgs();
    }

    public sealed class AppProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique name of the app profile in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("appProfileId")]
        public Input<string>? AppProfileId { get; set; }

        /// <summary>
        /// Specifies that this app profile is intended for read-only usage via the Data Boost feature.
        /// Structure is documented below.
        /// </summary>
        [Input("dataBoostIsolationReadOnly")]
        public Input<Inputs.AppProfileDataBoostIsolationReadOnlyGetArgs>? DataBoostIsolationReadOnly { get; set; }

        /// <summary>
        /// Long form description of the use case for this app profile.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If true, ignore safety checks when deleting/updating the app profile.
        /// </summary>
        [Input("ignoreWarnings")]
        public Input<bool>? IgnoreWarnings { get; set; }

        /// <summary>
        /// The name of the instance to create the app profile within.
        /// </summary>
        [Input("instance")]
        public Input<string>? Instance { get; set; }

        [Input("multiClusterRoutingClusterIds")]
        private InputList<string>? _multiClusterRoutingClusterIds;

        /// <summary>
        /// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all
        /// clusters are eligible.
        /// </summary>
        public InputList<string> MultiClusterRoutingClusterIds
        {
            get => _multiClusterRoutingClusterIds ?? (_multiClusterRoutingClusterIds = new InputList<string>());
            set => _multiClusterRoutingClusterIds = value;
        }

        /// <summary>
        /// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
        /// in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
        /// consistency to improve availability.
        /// </summary>
        [Input("multiClusterRoutingUseAny")]
        public Input<bool>? MultiClusterRoutingUseAny { get; set; }

        /// <summary>
        /// The unique name of the requested app profile. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/appProfiles/&lt;appProfileId&gt;`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Must be used with multi-cluster routing. If true, then this app profile will use row affinity sticky routing. With row
        /// affinity, Bigtable will route single row key requests based on the row key, rather than randomly. Instead, each row key
        /// will be assigned to a cluster by Cloud Bigtable, and will stick to that cluster. Choosing this option improves
        /// read-your-writes consistency for most requests under most circumstances, without sacrificing availability. Consistency
        /// is not guaranteed, as requests may still fail over between clusters in the event of errors or latency.
        /// </summary>
        [Input("rowAffinity")]
        public Input<bool>? RowAffinity { get; set; }

        /// <summary>
        /// Use a single-cluster routing policy.
        /// Structure is documented below.
        /// </summary>
        [Input("singleClusterRouting")]
        public Input<Inputs.AppProfileSingleClusterRoutingGetArgs>? SingleClusterRouting { get; set; }

        /// <summary>
        /// The standard options used for isolating this app profile's traffic from other use cases.
        /// Structure is documented below.
        /// </summary>
        [Input("standardIsolation")]
        public Input<Inputs.AppProfileStandardIsolationGetArgs>? StandardIsolation { get; set; }

        public AppProfileState()
        {
        }
        public static new AppProfileState Empty => new AppProfileState();
    }
}
