// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQuery
{
    public static class GetDatapolicyv2DataPolicyIamPolicy
    {
        /// <summary>
        /// Retrieves the current IAM policy data for datapolicy
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.BigQuery.GetDatapolicyv2DataPolicyIamPolicy.Invoke(new()
        ///     {
        ///         Project = basicDataPolicy.Project,
        ///         Location = basicDataPolicy.Location,
        ///         DataPolicyId = basicDataPolicy.DataPolicyId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDatapolicyv2DataPolicyIamPolicyResult> InvokeAsync(GetDatapolicyv2DataPolicyIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatapolicyv2DataPolicyIamPolicyResult>("gcp:bigquery/getDatapolicyv2DataPolicyIamPolicy:getDatapolicyv2DataPolicyIamPolicy", args ?? new GetDatapolicyv2DataPolicyIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for datapolicy
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.BigQuery.GetDatapolicyv2DataPolicyIamPolicy.Invoke(new()
        ///     {
        ///         Project = basicDataPolicy.Project,
        ///         Location = basicDataPolicy.Location,
        ///         DataPolicyId = basicDataPolicy.DataPolicyId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatapolicyv2DataPolicyIamPolicyResult> Invoke(GetDatapolicyv2DataPolicyIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatapolicyv2DataPolicyIamPolicyResult>("gcp:bigquery/getDatapolicyv2DataPolicyIamPolicy:getDatapolicyv2DataPolicyIamPolicy", args ?? new GetDatapolicyv2DataPolicyIamPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for datapolicy
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.BigQuery.GetDatapolicyv2DataPolicyIamPolicy.Invoke(new()
        ///     {
        ///         Project = basicDataPolicy.Project,
        ///         Location = basicDataPolicy.Location,
        ///         DataPolicyId = basicDataPolicy.DataPolicyId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatapolicyv2DataPolicyIamPolicyResult> Invoke(GetDatapolicyv2DataPolicyIamPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatapolicyv2DataPolicyIamPolicyResult>("gcp:bigquery/getDatapolicyv2DataPolicyIamPolicy:getDatapolicyv2DataPolicyIamPolicy", args ?? new GetDatapolicyv2DataPolicyIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatapolicyv2DataPolicyIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("dataPolicyId", required: true)]
        public string DataPolicyId { get; set; } = null!;

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
        /// location is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetDatapolicyv2DataPolicyIamPolicyArgs()
        {
        }
        public static new GetDatapolicyv2DataPolicyIamPolicyArgs Empty => new GetDatapolicyv2DataPolicyIamPolicyArgs();
    }

    public sealed class GetDatapolicyv2DataPolicyIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("dataPolicyId", required: true)]
        public Input<string> DataPolicyId { get; set; } = null!;

        /// <summary>
        /// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
        /// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
        /// location is specified, it is taken from the provider configuration.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDatapolicyv2DataPolicyIamPolicyInvokeArgs()
        {
        }
        public static new GetDatapolicyv2DataPolicyIamPolicyInvokeArgs Empty => new GetDatapolicyv2DataPolicyIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatapolicyv2DataPolicyIamPolicyResult
    {
        public readonly string DataPolicyId;
        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        /// <summary>
        /// (Required only by `gcp.bigquery.Datapolicyv2DataPolicyIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        public readonly string PolicyData;
        public readonly string Project;

        [OutputConstructor]
        private GetDatapolicyv2DataPolicyIamPolicyResult(
            string dataPolicyId,

            string etag,

            string id,

            string location,

            string policyData,

            string project)
        {
            DataPolicyId = dataPolicyId;
            Etag = etag;
            Id = id;
            Location = location;
            PolicyData = policyData;
            Project = project;
        }
    }
}
