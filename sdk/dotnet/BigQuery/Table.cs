// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQuery
{
    /// <summary>
    /// Creates a table resource in a dataset for Google BigQuery. For more information see
    /// [the official documentation](https://cloud.google.com/bigquery/docs/) and
    /// [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables).
    /// 
    /// &gt; **Note**: On newer versions of the provider, you must explicitly set `deletion_protection=false`
    /// (and run `pulumi update` to write the field to state) in order to destroy an instance.
    /// It is recommended to not set this field (or set it to true) until you're ready to destroy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.BigQuery.Dataset("default", new()
    ///     {
    ///         DatasetId = "foo",
    ///         FriendlyName = "test",
    ///         Description = "This is a test description",
    ///         Location = "EU",
    ///         DefaultTableExpirationMs = 3600000,
    ///         Labels = 
    ///         {
    ///             { "env", "default" },
    ///         },
    ///     });
    /// 
    ///     var defaultTable = new Gcp.BigQuery.Table("default", new()
    ///     {
    ///         DatasetId = @default.DatasetId,
    ///         TableId = "bar",
    ///         TimePartitioning = new Gcp.BigQuery.Inputs.TableTimePartitioningArgs
    ///         {
    ///             Type = "DAY",
    ///         },
    ///         Labels = 
    ///         {
    ///             { "env", "default" },
    ///         },
    ///         Schema = @"[
    ///   {
    ///     ""name"": ""permalink"",
    ///     ""type"": ""STRING"",
    ///     ""mode"": ""NULLABLE"",
    ///     ""description"": ""The Permalink""
    ///   },
    ///   {
    ///     ""name"": ""state"",
    ///     ""type"": ""STRING"",
    ///     ""mode"": ""NULLABLE"",
    ///     ""description"": ""State where the head office is located""
    ///   }
    /// ]
    /// ",
    ///     });
    /// 
    ///     var sheet = new Gcp.BigQuery.Table("sheet", new()
    ///     {
    ///         DatasetId = @default.DatasetId,
    ///         TableId = "sheet",
    ///         ExternalDataConfiguration = new Gcp.BigQuery.Inputs.TableExternalDataConfigurationArgs
    ///         {
    ///             Autodetect = true,
    ///             SourceFormat = "GOOGLE_SHEETS",
    ///             GoogleSheetsOptions = new Gcp.BigQuery.Inputs.TableExternalDataConfigurationGoogleSheetsOptionsArgs
    ///             {
    ///                 SkipLeadingRows = 1,
    ///             },
    ///             SourceUris = new[]
    ///             {
    ///                 "https://docs.google.com/spreadsheets/d/123456789012345",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// BigQuery tables can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}`
    /// 
    /// * `{{project}}/{{dataset_id}}/{{table_id}}`
    /// 
    /// * `{{dataset_id}}/{{table_id}}`
    /// 
    /// When using the `pulumi import` command, BigQuery tables can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigquery/table:Table default projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigquery/table:Table default {{project}}/{{dataset_id}}/{{table_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigquery/table:Table default {{dataset_id}}/{{table_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:bigquery/table:Table")]
    public partial class Table : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This field is in beta. If set to true, it allows table deletion when there
        /// are still resource tags attached. The default value is false.
        /// </summary>
        [Output("allowResourceTagsOnDeletion")]
        public Output<bool?> AllowResourceTagsOnDeletion { get; private set; } = null!;

        /// <summary>
        /// Specifies column names to use for data clustering.
        /// Up to four top-level columns are allowed, and should be specified in
        /// descending priority order.
        /// </summary>
        [Output("clusterings")]
        public Output<ImmutableArray<string>> Clusterings { get; private set; } = null!;

        /// <summary>
        /// The time when this table was created, in milliseconds since the epoch.
        /// </summary>
        [Output("creationTime")]
        public Output<int> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The dataset ID to create the table in.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Output("datasetId")]
        public Output<string> DatasetId { get; private set; } = null!;

        /// <summary>
        /// Whether or not to allow the provider to destroy the instance. Unless this field is set to false
        /// in state, a `=destroy` or `=update` that would delete the instance will fail.
        /// </summary>
        [Output("deletionProtection")]
        public Output<bool?> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// The field description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// 
        /// * &lt;a name="schema"&gt;&lt;/a&gt;`schema` - (Optional) A JSON schema for the table.
        /// 
        /// ~&gt;**NOTE:** Because this field expects a JSON string, any changes to the
        /// string will create a diff, even if the JSON itself hasn't changed.
        /// If the API returns a different value for the same schema, e.g. it
        /// switched the order of values or replaced `STRUCT` field type with `RECORD`
        /// field type, we currently cannot suppress the recurring diff this causes.
        /// As a workaround, we recommend using the schema as returned by the API.
        /// 
        /// ~&gt;**NOTE:**  If you use `external_data_configuration`
        /// documented below and do **not** set
        /// `external_data_configuration.connection_id`, schemas must be specified
        /// with `external_data_configuration.schema`. Otherwise, schemas must be
        /// specified with this top-level field.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Specifies how the table should be encrypted.
        /// If left blank, the table will be encrypted with a Google-managed key; that process
        /// is transparent to the user.  Structure is documented below.
        /// </summary>
        [Output("encryptionConfiguration")]
        public Output<Outputs.TableEncryptionConfiguration?> EncryptionConfiguration { get; private set; } = null!;

        /// <summary>
        /// A hash of the resource.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The time when this table expires, in
        /// milliseconds since the epoch. If not present, the table will persist
        /// indefinitely. Expired tables will be deleted and their storage
        /// reclaimed.
        /// </summary>
        [Output("expirationTime")]
        public Output<int> ExpirationTime { get; private set; } = null!;

        /// <summary>
        /// Describes the data format,
        /// location, and other properties of a table stored outside of BigQuery.
        /// By defining these properties, the data source can then be queried as
        /// if it were a standard BigQuery table. Structure is documented below.
        /// </summary>
        [Output("externalDataConfiguration")]
        public Output<Outputs.TableExternalDataConfiguration?> ExternalDataConfiguration { get; private set; } = null!;

        /// <summary>
        /// A descriptive name for the table.
        /// </summary>
        [Output("friendlyName")]
        public Output<string?> FriendlyName { get; private set; } = null!;

        /// <summary>
        /// A mapping of labels to assign to the resource.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field 'effective_labels' for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The time when this table was last modified, in milliseconds since the epoch.
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<int> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// The geographic location where the table resides. This value is inherited from the dataset.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// If specified, configures this table as a materialized view.
        /// Structure is documented below.
        /// </summary>
        [Output("materializedView")]
        public Output<Outputs.TableMaterializedView?> MaterializedView { get; private set; } = null!;

        /// <summary>
        /// The maximum staleness of data that could be
        /// returned when the table (or stale MV) is queried. Staleness encoded as a
        /// string encoding of [SQL IntervalValue
        /// type](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#interval_type).
        /// </summary>
        [Output("maxStaleness")]
        public Output<string?> MaxStaleness { get; private set; } = null!;

        /// <summary>
        /// The size of this table in bytes, excluding any data in the streaming buffer.
        /// </summary>
        [Output("numBytes")]
        public Output<int> NumBytes { get; private set; } = null!;

        /// <summary>
        /// The number of bytes in the table that are considered "long-term storage".
        /// </summary>
        [Output("numLongTermBytes")]
        public Output<int> NumLongTermBytes { get; private set; } = null!;

        /// <summary>
        /// The number of rows of data in this table, excluding any data in the streaming buffer.
        /// </summary>
        [Output("numRows")]
        public Output<int> NumRows { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// If specified, configures range-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Output("rangePartitioning")]
        public Output<Outputs.TableRangePartitioning?> RangePartitioning { get; private set; } = null!;

        /// <summary>
        /// If set to true, queries over this table
        /// require a partition filter that can be used for partition elimination to be
        /// specified.
        /// </summary>
        [Output("requirePartitionFilter")]
        public Output<bool?> RequirePartitionFilter { get; private set; } = null!;

        /// <summary>
        /// This field is in beta. The tags attached to this table. Tag keys are
        /// globally unique. Tag key is expected to be in the namespaced format, for
        /// example "123456789012/environment" where 123456789012 is the ID of the
        /// parent organization or project resource for this tag key. Tag value is
        /// expected to be the short name, for example "Production".
        /// </summary>
        [Output("resourceTags")]
        public Output<ImmutableDictionary<string, string>?> ResourceTags { get; private set; } = null!;

        /// <summary>
        /// A JSON schema for the table.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Defines the primary key and foreign keys. 
        /// Structure is documented below.
        /// </summary>
        [Output("tableConstraints")]
        public Output<Outputs.TableTableConstraints?> TableConstraints { get; private set; } = null!;

        /// <summary>
        /// A unique ID for the resource.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Output("tableId")]
        public Output<string> TableId { get; private set; } = null!;

        /// <summary>
        /// Replication info of a table created
        /// using "AS REPLICA" DDL like:
        /// `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`.
        /// Structure is documented below.
        /// </summary>
        [Output("tableReplicationInfo")]
        public Output<Outputs.TableTableReplicationInfo?> TableReplicationInfo { get; private set; } = null!;

        /// <summary>
        /// If specified, configures time-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Output("timePartitioning")]
        public Output<Outputs.TableTimePartitioning?> TimePartitioning { get; private set; } = null!;

        /// <summary>
        /// Describes the table type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// If specified, configures this table as a view.
        /// Structure is documented below.
        /// </summary>
        [Output("view")]
        public Output<Outputs.TableView?> View { get; private set; } = null!;


        /// <summary>
        /// Create a Table resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Table(string name, TableArgs args, CustomResourceOptions? options = null)
            : base("gcp:bigquery/table:Table", name, args ?? new TableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Table(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigquery/table:Table", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Table resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Table Get(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
        {
            return new Table(name, id, state, options);
        }
    }

    public sealed class TableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This field is in beta. If set to true, it allows table deletion when there
        /// are still resource tags attached. The default value is false.
        /// </summary>
        [Input("allowResourceTagsOnDeletion")]
        public Input<bool>? AllowResourceTagsOnDeletion { get; set; }

        [Input("clusterings")]
        private InputList<string>? _clusterings;

        /// <summary>
        /// Specifies column names to use for data clustering.
        /// Up to four top-level columns are allowed, and should be specified in
        /// descending priority order.
        /// </summary>
        public InputList<string> Clusterings
        {
            get => _clusterings ?? (_clusterings = new InputList<string>());
            set => _clusterings = value;
        }

        /// <summary>
        /// The dataset ID to create the table in.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        /// <summary>
        /// Whether or not to allow the provider to destroy the instance. Unless this field is set to false
        /// in state, a `=destroy` or `=update` that would delete the instance will fail.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The field description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies how the table should be encrypted.
        /// If left blank, the table will be encrypted with a Google-managed key; that process
        /// is transparent to the user.  Structure is documented below.
        /// </summary>
        [Input("encryptionConfiguration")]
        public Input<Inputs.TableEncryptionConfigurationArgs>? EncryptionConfiguration { get; set; }

        /// <summary>
        /// The time when this table expires, in
        /// milliseconds since the epoch. If not present, the table will persist
        /// indefinitely. Expired tables will be deleted and their storage
        /// reclaimed.
        /// </summary>
        [Input("expirationTime")]
        public Input<int>? ExpirationTime { get; set; }

        /// <summary>
        /// Describes the data format,
        /// location, and other properties of a table stored outside of BigQuery.
        /// By defining these properties, the data source can then be queried as
        /// if it were a standard BigQuery table. Structure is documented below.
        /// </summary>
        [Input("externalDataConfiguration")]
        public Input<Inputs.TableExternalDataConfigurationArgs>? ExternalDataConfiguration { get; set; }

        /// <summary>
        /// A descriptive name for the table.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A mapping of labels to assign to the resource.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field 'effective_labels' for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// If specified, configures this table as a materialized view.
        /// Structure is documented below.
        /// </summary>
        [Input("materializedView")]
        public Input<Inputs.TableMaterializedViewArgs>? MaterializedView { get; set; }

        /// <summary>
        /// The maximum staleness of data that could be
        /// returned when the table (or stale MV) is queried. Staleness encoded as a
        /// string encoding of [SQL IntervalValue
        /// type](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#interval_type).
        /// </summary>
        [Input("maxStaleness")]
        public Input<string>? MaxStaleness { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// If specified, configures range-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Input("rangePartitioning")]
        public Input<Inputs.TableRangePartitioningArgs>? RangePartitioning { get; set; }

        /// <summary>
        /// If set to true, queries over this table
        /// require a partition filter that can be used for partition elimination to be
        /// specified.
        /// </summary>
        [Input("requirePartitionFilter")]
        public Input<bool>? RequirePartitionFilter { get; set; }

        [Input("resourceTags")]
        private InputMap<string>? _resourceTags;

        /// <summary>
        /// This field is in beta. The tags attached to this table. Tag keys are
        /// globally unique. Tag key is expected to be in the namespaced format, for
        /// example "123456789012/environment" where 123456789012 is the ID of the
        /// parent organization or project resource for this tag key. Tag value is
        /// expected to be the short name, for example "Production".
        /// </summary>
        public InputMap<string> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputMap<string>());
            set => _resourceTags = value;
        }

        /// <summary>
        /// A JSON schema for the table.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// Defines the primary key and foreign keys. 
        /// Structure is documented below.
        /// </summary>
        [Input("tableConstraints")]
        public Input<Inputs.TableTableConstraintsArgs>? TableConstraints { get; set; }

        /// <summary>
        /// A unique ID for the resource.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("tableId", required: true)]
        public Input<string> TableId { get; set; } = null!;

        /// <summary>
        /// Replication info of a table created
        /// using "AS REPLICA" DDL like:
        /// `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`.
        /// Structure is documented below.
        /// </summary>
        [Input("tableReplicationInfo")]
        public Input<Inputs.TableTableReplicationInfoArgs>? TableReplicationInfo { get; set; }

        /// <summary>
        /// If specified, configures time-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Input("timePartitioning")]
        public Input<Inputs.TableTimePartitioningArgs>? TimePartitioning { get; set; }

        /// <summary>
        /// If specified, configures this table as a view.
        /// Structure is documented below.
        /// </summary>
        [Input("view")]
        public Input<Inputs.TableViewArgs>? View { get; set; }

        public TableArgs()
        {
        }
        public static new TableArgs Empty => new TableArgs();
    }

    public sealed class TableState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This field is in beta. If set to true, it allows table deletion when there
        /// are still resource tags attached. The default value is false.
        /// </summary>
        [Input("allowResourceTagsOnDeletion")]
        public Input<bool>? AllowResourceTagsOnDeletion { get; set; }

        [Input("clusterings")]
        private InputList<string>? _clusterings;

        /// <summary>
        /// Specifies column names to use for data clustering.
        /// Up to four top-level columns are allowed, and should be specified in
        /// descending priority order.
        /// </summary>
        public InputList<string> Clusterings
        {
            get => _clusterings ?? (_clusterings = new InputList<string>());
            set => _clusterings = value;
        }

        /// <summary>
        /// The time when this table was created, in milliseconds since the epoch.
        /// </summary>
        [Input("creationTime")]
        public Input<int>? CreationTime { get; set; }

        /// <summary>
        /// The dataset ID to create the table in.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("datasetId")]
        public Input<string>? DatasetId { get; set; }

        /// <summary>
        /// Whether or not to allow the provider to destroy the instance. Unless this field is set to false
        /// in state, a `=destroy` or `=update` that would delete the instance will fail.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The field description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// 
        /// * &lt;a name="schema"&gt;&lt;/a&gt;`schema` - (Optional) A JSON schema for the table.
        /// 
        /// ~&gt;**NOTE:** Because this field expects a JSON string, any changes to the
        /// string will create a diff, even if the JSON itself hasn't changed.
        /// If the API returns a different value for the same schema, e.g. it
        /// switched the order of values or replaced `STRUCT` field type with `RECORD`
        /// field type, we currently cannot suppress the recurring diff this causes.
        /// As a workaround, we recommend using the schema as returned by the API.
        /// 
        /// ~&gt;**NOTE:**  If you use `external_data_configuration`
        /// documented below and do **not** set
        /// `external_data_configuration.connection_id`, schemas must be specified
        /// with `external_data_configuration.schema`. Otherwise, schemas must be
        /// specified with this top-level field.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Specifies how the table should be encrypted.
        /// If left blank, the table will be encrypted with a Google-managed key; that process
        /// is transparent to the user.  Structure is documented below.
        /// </summary>
        [Input("encryptionConfiguration")]
        public Input<Inputs.TableEncryptionConfigurationGetArgs>? EncryptionConfiguration { get; set; }

        /// <summary>
        /// A hash of the resource.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The time when this table expires, in
        /// milliseconds since the epoch. If not present, the table will persist
        /// indefinitely. Expired tables will be deleted and their storage
        /// reclaimed.
        /// </summary>
        [Input("expirationTime")]
        public Input<int>? ExpirationTime { get; set; }

        /// <summary>
        /// Describes the data format,
        /// location, and other properties of a table stored outside of BigQuery.
        /// By defining these properties, the data source can then be queried as
        /// if it were a standard BigQuery table. Structure is documented below.
        /// </summary>
        [Input("externalDataConfiguration")]
        public Input<Inputs.TableExternalDataConfigurationGetArgs>? ExternalDataConfiguration { get; set; }

        /// <summary>
        /// A descriptive name for the table.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A mapping of labels to assign to the resource.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field 'effective_labels' for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The time when this table was last modified, in milliseconds since the epoch.
        /// </summary>
        [Input("lastModifiedTime")]
        public Input<int>? LastModifiedTime { get; set; }

        /// <summary>
        /// The geographic location where the table resides. This value is inherited from the dataset.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// If specified, configures this table as a materialized view.
        /// Structure is documented below.
        /// </summary>
        [Input("materializedView")]
        public Input<Inputs.TableMaterializedViewGetArgs>? MaterializedView { get; set; }

        /// <summary>
        /// The maximum staleness of data that could be
        /// returned when the table (or stale MV) is queried. Staleness encoded as a
        /// string encoding of [SQL IntervalValue
        /// type](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#interval_type).
        /// </summary>
        [Input("maxStaleness")]
        public Input<string>? MaxStaleness { get; set; }

        /// <summary>
        /// The size of this table in bytes, excluding any data in the streaming buffer.
        /// </summary>
        [Input("numBytes")]
        public Input<int>? NumBytes { get; set; }

        /// <summary>
        /// The number of bytes in the table that are considered "long-term storage".
        /// </summary>
        [Input("numLongTermBytes")]
        public Input<int>? NumLongTermBytes { get; set; }

        /// <summary>
        /// The number of rows of data in this table, excluding any data in the streaming buffer.
        /// </summary>
        [Input("numRows")]
        public Input<int>? NumRows { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// If specified, configures range-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Input("rangePartitioning")]
        public Input<Inputs.TableRangePartitioningGetArgs>? RangePartitioning { get; set; }

        /// <summary>
        /// If set to true, queries over this table
        /// require a partition filter that can be used for partition elimination to be
        /// specified.
        /// </summary>
        [Input("requirePartitionFilter")]
        public Input<bool>? RequirePartitionFilter { get; set; }

        [Input("resourceTags")]
        private InputMap<string>? _resourceTags;

        /// <summary>
        /// This field is in beta. The tags attached to this table. Tag keys are
        /// globally unique. Tag key is expected to be in the namespaced format, for
        /// example "123456789012/environment" where 123456789012 is the ID of the
        /// parent organization or project resource for this tag key. Tag value is
        /// expected to be the short name, for example "Production".
        /// </summary>
        public InputMap<string> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputMap<string>());
            set => _resourceTags = value;
        }

        /// <summary>
        /// A JSON schema for the table.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// Defines the primary key and foreign keys. 
        /// Structure is documented below.
        /// </summary>
        [Input("tableConstraints")]
        public Input<Inputs.TableTableConstraintsGetArgs>? TableConstraints { get; set; }

        /// <summary>
        /// A unique ID for the resource.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("tableId")]
        public Input<string>? TableId { get; set; }

        /// <summary>
        /// Replication info of a table created
        /// using "AS REPLICA" DDL like:
        /// `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`.
        /// Structure is documented below.
        /// </summary>
        [Input("tableReplicationInfo")]
        public Input<Inputs.TableTableReplicationInfoGetArgs>? TableReplicationInfo { get; set; }

        /// <summary>
        /// If specified, configures time-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Input("timePartitioning")]
        public Input<Inputs.TableTimePartitioningGetArgs>? TimePartitioning { get; set; }

        /// <summary>
        /// Describes the table type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// If specified, configures this table as a view.
        /// Structure is documented below.
        /// </summary>
        [Input("view")]
        public Input<Inputs.TableViewGetArgs>? View { get; set; }

        public TableState()
        {
        }
        public static new TableState Empty => new TableState();
    }
}
