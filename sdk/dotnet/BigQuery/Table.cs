// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQuery
{
    /// <summary>
    /// Creates a table resource in a dataset for Google BigQuery. For more information see
    /// [the official documentation](https://cloud.google.com/bigquery/docs/) and
    /// [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var defaultDataset = new Gcp.BigQuery.Dataset("defaultDataset", new Gcp.BigQuery.DatasetArgs
    ///         {
    ///             DatasetId = "foo",
    ///             FriendlyName = "test",
    ///             Description = "This is a test description",
    ///             Location = "EU",
    ///             DefaultTableExpirationMs = 3600000,
    ///             Labels = 
    ///             {
    ///                 { "env", "default" },
    ///             },
    ///         });
    ///         var defaultTable = new Gcp.BigQuery.Table("defaultTable", new Gcp.BigQuery.TableArgs
    ///         {
    ///             DatasetId = defaultDataset.DatasetId,
    ///             TableId = "bar",
    ///             TimePartitioning = new Gcp.BigQuery.Inputs.TableTimePartitioningArgs
    ///             {
    ///                 Type = "DAY",
    ///             },
    ///             Labels = 
    ///             {
    ///                 { "env", "default" },
    ///             },
    ///             Schema = @"[
    ///   {
    ///     ""name"": ""permalink"",
    ///     ""type"": ""STRING"",
    ///     ""mode"": ""NULLABLE"",
    ///     ""description"": ""The Permalink""
    ///   },
    ///   {
    ///     ""name"": ""state"",
    ///     ""type"": ""STRING"",
    ///     ""mode"": ""NULLABLE"",
    ///     ""description"": ""State where the head office is located""
    ///   }
    /// ]
    /// ",
    ///         });
    ///         var sheet = new Gcp.BigQuery.Table("sheet", new Gcp.BigQuery.TableArgs
    ///         {
    ///             DatasetId = defaultDataset.DatasetId,
    ///             TableId = "sheet",
    ///             ExternalDataConfiguration = new Gcp.BigQuery.Inputs.TableExternalDataConfigurationArgs
    ///             {
    ///                 Autodetect = true,
    ///                 SourceFormat = "GOOGLE_SHEETS",
    ///                 GoogleSheetsOptions = new Gcp.BigQuery.Inputs.TableExternalDataConfigurationGoogleSheetsOptionsArgs
    ///                 {
    ///                     SkipLeadingRows = 1,
    ///                 },
    ///                 SourceUris = 
    ///                 {
    ///                     "https://docs.google.com/spreadsheets/d/123456789012345",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// BigQuery tables can be imported using the `project`, `dataset_id`, and `table_id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gcp:bigquery/table:Table default gcp-project/foo/bar
    /// ```
    /// </summary>
    [GcpResourceType("gcp:bigquery/table:Table")]
    public partial class Table : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies column names to use for data clustering.
        /// Up to four top-level columns are allowed, and should be specified in
        /// descending priority order.
        /// </summary>
        [Output("clusterings")]
        public Output<ImmutableArray<string>> Clusterings { get; private set; } = null!;

        /// <summary>
        /// The time when this table was created, in milliseconds since the epoch.
        /// </summary>
        [Output("creationTime")]
        public Output<int> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The dataset ID to create the table in.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Output("datasetId")]
        public Output<string> DatasetId { get; private set; } = null!;

        /// <summary>
        /// The field description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies how the table should be encrypted.
        /// If left blank, the table will be encrypted with a Google-managed key; that process
        /// is transparent to the user.  Structure is documented below.
        /// </summary>
        [Output("encryptionConfiguration")]
        public Output<Outputs.TableEncryptionConfiguration?> EncryptionConfiguration { get; private set; } = null!;

        /// <summary>
        /// A hash of the resource.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The time when this table expires, in
        /// milliseconds since the epoch. If not present, the table will persist
        /// indefinitely. Expired tables will be deleted and their storage
        /// reclaimed.
        /// </summary>
        [Output("expirationTime")]
        public Output<int> ExpirationTime { get; private set; } = null!;

        /// <summary>
        /// Describes the data format,
        /// location, and other properties of a table stored outside of BigQuery.
        /// By defining these properties, the data source can then be queried as
        /// if it were a standard BigQuery table. Structure is documented below.
        /// </summary>
        [Output("externalDataConfiguration")]
        public Output<Outputs.TableExternalDataConfiguration?> ExternalDataConfiguration { get; private set; } = null!;

        /// <summary>
        /// A descriptive name for the table.
        /// </summary>
        [Output("friendlyName")]
        public Output<string?> FriendlyName { get; private set; } = null!;

        /// <summary>
        /// A mapping of labels to assign to the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The time when this table was last modified, in milliseconds since the epoch.
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<int> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// The geographic location where the table resides. This value is inherited from the dataset.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// If specified, configures this table as a materialized view.
        /// Structure is documented below.
        /// </summary>
        [Output("materializedView")]
        public Output<Outputs.TableMaterializedView?> MaterializedView { get; private set; } = null!;

        /// <summary>
        /// The size of this table in bytes, excluding any data in the streaming buffer.
        /// </summary>
        [Output("numBytes")]
        public Output<int> NumBytes { get; private set; } = null!;

        /// <summary>
        /// The number of bytes in the table that are considered "long-term storage".
        /// </summary>
        [Output("numLongTermBytes")]
        public Output<int> NumLongTermBytes { get; private set; } = null!;

        /// <summary>
        /// The number of rows of data in this table, excluding any data in the streaming buffer.
        /// </summary>
        [Output("numRows")]
        public Output<int> NumRows { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// If specified, configures range-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Output("rangePartitioning")]
        public Output<Outputs.TableRangePartitioning?> RangePartitioning { get; private set; } = null!;

        /// <summary>
        /// A JSON schema for the external table. Schema is required
        /// for CSV and JSON formats if autodetect is not on. Schema is disallowed
        /// for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
        /// ~&gt;**NOTE:** Because this field expects a JSON string, any changes to the
        /// string will create a diff, even if the JSON itself hasn't changed.
        /// Furthermore drift for this field cannot not be detected because BigQuery
        /// only uses this schema to compute the effective schema for the table, therefore
        /// any changes on the configured value will force the table to be recreated.
        /// This schema is effectively only applied when creating a table from an external
        /// datasource, after creation the computed schema will be stored in
        /// `google_bigquery_table.schema`
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// A unique ID for the resource.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Output("tableId")]
        public Output<string> TableId { get; private set; } = null!;

        /// <summary>
        /// If specified, configures time-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Output("timePartitioning")]
        public Output<Outputs.TableTimePartitioning?> TimePartitioning { get; private set; } = null!;

        /// <summary>
        /// The supported types are DAY, HOUR, MONTH, and YEAR,
        /// which will generate one partition per day, hour, month, and year, respectively.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// If specified, configures this table as a view.
        /// Structure is documented below.
        /// </summary>
        [Output("view")]
        public Output<Outputs.TableView?> View { get; private set; } = null!;


        /// <summary>
        /// Create a Table resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Table(string name, TableArgs args, CustomResourceOptions? options = null)
            : base("gcp:bigquery/table:Table", name, args ?? new TableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Table(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigquery/table:Table", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Table resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Table Get(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
        {
            return new Table(name, id, state, options);
        }
    }

    public sealed class TableArgs : Pulumi.ResourceArgs
    {
        [Input("clusterings")]
        private InputList<string>? _clusterings;

        /// <summary>
        /// Specifies column names to use for data clustering.
        /// Up to four top-level columns are allowed, and should be specified in
        /// descending priority order.
        /// </summary>
        public InputList<string> Clusterings
        {
            get => _clusterings ?? (_clusterings = new InputList<string>());
            set => _clusterings = value;
        }

        /// <summary>
        /// The dataset ID to create the table in.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        /// <summary>
        /// The field description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies how the table should be encrypted.
        /// If left blank, the table will be encrypted with a Google-managed key; that process
        /// is transparent to the user.  Structure is documented below.
        /// </summary>
        [Input("encryptionConfiguration")]
        public Input<Inputs.TableEncryptionConfigurationArgs>? EncryptionConfiguration { get; set; }

        /// <summary>
        /// The time when this table expires, in
        /// milliseconds since the epoch. If not present, the table will persist
        /// indefinitely. Expired tables will be deleted and their storage
        /// reclaimed.
        /// </summary>
        [Input("expirationTime")]
        public Input<int>? ExpirationTime { get; set; }

        /// <summary>
        /// Describes the data format,
        /// location, and other properties of a table stored outside of BigQuery.
        /// By defining these properties, the data source can then be queried as
        /// if it were a standard BigQuery table. Structure is documented below.
        /// </summary>
        [Input("externalDataConfiguration")]
        public Input<Inputs.TableExternalDataConfigurationArgs>? ExternalDataConfiguration { get; set; }

        /// <summary>
        /// A descriptive name for the table.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A mapping of labels to assign to the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// If specified, configures this table as a materialized view.
        /// Structure is documented below.
        /// </summary>
        [Input("materializedView")]
        public Input<Inputs.TableMaterializedViewArgs>? MaterializedView { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// If specified, configures range-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Input("rangePartitioning")]
        public Input<Inputs.TableRangePartitioningArgs>? RangePartitioning { get; set; }

        /// <summary>
        /// A JSON schema for the external table. Schema is required
        /// for CSV and JSON formats if autodetect is not on. Schema is disallowed
        /// for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
        /// ~&gt;**NOTE:** Because this field expects a JSON string, any changes to the
        /// string will create a diff, even if the JSON itself hasn't changed.
        /// Furthermore drift for this field cannot not be detected because BigQuery
        /// only uses this schema to compute the effective schema for the table, therefore
        /// any changes on the configured value will force the table to be recreated.
        /// This schema is effectively only applied when creating a table from an external
        /// datasource, after creation the computed schema will be stored in
        /// `google_bigquery_table.schema`
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// A unique ID for the resource.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("tableId", required: true)]
        public Input<string> TableId { get; set; } = null!;

        /// <summary>
        /// If specified, configures time-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Input("timePartitioning")]
        public Input<Inputs.TableTimePartitioningArgs>? TimePartitioning { get; set; }

        /// <summary>
        /// If specified, configures this table as a view.
        /// Structure is documented below.
        /// </summary>
        [Input("view")]
        public Input<Inputs.TableViewArgs>? View { get; set; }

        public TableArgs()
        {
        }
    }

    public sealed class TableState : Pulumi.ResourceArgs
    {
        [Input("clusterings")]
        private InputList<string>? _clusterings;

        /// <summary>
        /// Specifies column names to use for data clustering.
        /// Up to four top-level columns are allowed, and should be specified in
        /// descending priority order.
        /// </summary>
        public InputList<string> Clusterings
        {
            get => _clusterings ?? (_clusterings = new InputList<string>());
            set => _clusterings = value;
        }

        /// <summary>
        /// The time when this table was created, in milliseconds since the epoch.
        /// </summary>
        [Input("creationTime")]
        public Input<int>? CreationTime { get; set; }

        /// <summary>
        /// The dataset ID to create the table in.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("datasetId")]
        public Input<string>? DatasetId { get; set; }

        /// <summary>
        /// The field description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies how the table should be encrypted.
        /// If left blank, the table will be encrypted with a Google-managed key; that process
        /// is transparent to the user.  Structure is documented below.
        /// </summary>
        [Input("encryptionConfiguration")]
        public Input<Inputs.TableEncryptionConfigurationGetArgs>? EncryptionConfiguration { get; set; }

        /// <summary>
        /// A hash of the resource.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The time when this table expires, in
        /// milliseconds since the epoch. If not present, the table will persist
        /// indefinitely. Expired tables will be deleted and their storage
        /// reclaimed.
        /// </summary>
        [Input("expirationTime")]
        public Input<int>? ExpirationTime { get; set; }

        /// <summary>
        /// Describes the data format,
        /// location, and other properties of a table stored outside of BigQuery.
        /// By defining these properties, the data source can then be queried as
        /// if it were a standard BigQuery table. Structure is documented below.
        /// </summary>
        [Input("externalDataConfiguration")]
        public Input<Inputs.TableExternalDataConfigurationGetArgs>? ExternalDataConfiguration { get; set; }

        /// <summary>
        /// A descriptive name for the table.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A mapping of labels to assign to the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The time when this table was last modified, in milliseconds since the epoch.
        /// </summary>
        [Input("lastModifiedTime")]
        public Input<int>? LastModifiedTime { get; set; }

        /// <summary>
        /// The geographic location where the table resides. This value is inherited from the dataset.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// If specified, configures this table as a materialized view.
        /// Structure is documented below.
        /// </summary>
        [Input("materializedView")]
        public Input<Inputs.TableMaterializedViewGetArgs>? MaterializedView { get; set; }

        /// <summary>
        /// The size of this table in bytes, excluding any data in the streaming buffer.
        /// </summary>
        [Input("numBytes")]
        public Input<int>? NumBytes { get; set; }

        /// <summary>
        /// The number of bytes in the table that are considered "long-term storage".
        /// </summary>
        [Input("numLongTermBytes")]
        public Input<int>? NumLongTermBytes { get; set; }

        /// <summary>
        /// The number of rows of data in this table, excluding any data in the streaming buffer.
        /// </summary>
        [Input("numRows")]
        public Input<int>? NumRows { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// If specified, configures range-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Input("rangePartitioning")]
        public Input<Inputs.TableRangePartitioningGetArgs>? RangePartitioning { get; set; }

        /// <summary>
        /// A JSON schema for the external table. Schema is required
        /// for CSV and JSON formats if autodetect is not on. Schema is disallowed
        /// for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
        /// ~&gt;**NOTE:** Because this field expects a JSON string, any changes to the
        /// string will create a diff, even if the JSON itself hasn't changed.
        /// Furthermore drift for this field cannot not be detected because BigQuery
        /// only uses this schema to compute the effective schema for the table, therefore
        /// any changes on the configured value will force the table to be recreated.
        /// This schema is effectively only applied when creating a table from an external
        /// datasource, after creation the computed schema will be stored in
        /// `google_bigquery_table.schema`
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// A unique ID for the resource.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("tableId")]
        public Input<string>? TableId { get; set; }

        /// <summary>
        /// If specified, configures time-based
        /// partitioning for this table. Structure is documented below.
        /// </summary>
        [Input("timePartitioning")]
        public Input<Inputs.TableTimePartitioningGetArgs>? TimePartitioning { get; set; }

        /// <summary>
        /// The supported types are DAY, HOUR, MONTH, and YEAR,
        /// which will generate one partition per day, hour, month, and year, respectively.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// If specified, configures this table as a view.
        /// Structure is documented below.
        /// </summary>
        [Input("view")]
        public Input<Inputs.TableViewGetArgs>? View { get; set; }

        public TableState()
        {
        }
    }
}
