// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQuery
{
    /// <summary>
    /// A reservation is a mechanism used to guarantee BigQuery slots to users.
    /// 
    /// To get more information about Reservation, see:
    /// 
    /// * [API documentation](https://cloud.google.com/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/create)
    /// * How-to Guides
    ///     * [Introduction to Reservations](https://cloud.google.com/bigquery/docs/reservations-intro)
    /// 
    /// ## Example Usage
    /// 
    /// ### Bigquery Reservation Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var reservation = new Gcp.BigQuery.Reservation("reservation", new()
    ///     {
    ///         Name = "my-reservation",
    ///         Location = "us-west2",
    ///         SlotCapacity = 0,
    ///         Edition = "STANDARD",
    ///         IgnoreIdleSlots = true,
    ///         Concurrency = 0,
    ///         Autoscale = new Gcp.BigQuery.Inputs.ReservationAutoscaleArgs
    ///         {
    ///             MaxSlots = 100,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Reservation can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/reservations/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, Reservation can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigquery/reservation:Reservation default projects/{{project}}/locations/{{location}}/reservations/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigquery/reservation:Reservation default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:bigquery/reservation:Reservation default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:bigquery/reservation:Reservation")]
    public partial class Reservation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration parameters for the auto scaling feature.
        /// Structure is documented below.
        /// </summary>
        [Output("autoscale")]
        public Output<Outputs.ReservationAutoscale?> Autoscale { get; private set; } = null!;

        /// <summary>
        /// Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
        /// </summary>
        [Output("concurrency")]
        public Output<int?> Concurrency { get; private set; } = null!;

        /// <summary>
        /// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
        /// </summary>
        [Output("edition")]
        public Output<string> Edition { get; private set; } = null!;

        /// <summary>
        /// If false, any query using this reservation will use idle slots from other reservations within
        /// the same admin project. If true, a query using this reservation will execute with the slot
        /// capacity specified above at most.
        /// </summary>
        [Output("ignoreIdleSlots")]
        public Output<bool?> IgnoreIdleSlots { get; private set; } = null!;

        /// <summary>
        /// The geographic location where the transfer config should reside.
        /// Examples: US, EU, asia-northeast1. The default value is US.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
        /// (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won't use
        /// more than the specified number of slots, even if there is demand and supply (from idle
        /// slots). NOTE: capping a reservation's idle slot usage is best effort and its usage may
        /// exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
        /// for the additional added slots), it will never exceed the maxSlots - baseline.
        /// This field must be set together with the scalingMode enum value, otherwise the request
        /// will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
        /// If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
        /// must be unset. Otherwise the request will be rejected with error code
        /// google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
        /// output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
        /// will represent the current slots from autoscaler excluding idle slots. For example,
        /// if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
        /// autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
        /// between 0 and 1000.
        /// If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
        /// usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
        /// autoscaler.current_slots will not be higher than 700.
        /// If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
        /// autoscaler field will be null.
        /// If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
        /// aligned with the scalingMode enum value.(See details in ScalingMode comments).
        /// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
        /// Please note, the maxSlots is for user to manage the part of slots greater than the
        /// baseline. Therefore, we don't allow users to set maxSlots smaller or equal to the
        /// baseline as it will not be meaningful. If the field is present and
        /// slotCapacity&gt;=maxSlots, requests will be rejected with error code
        /// google.rpc.Code.INVALID_ARGUMENT.
        /// Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
        /// maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
        /// feature.
        /// </summary>
        [Output("maxSlots")]
        public Output<int?> MaxSlots { get; private set; } = null!;

        /// <summary>
        /// The name of the reservation. This field must only contain alphanumeric characters or dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The location where the reservation was originally created. This is set only during the
        /// failover reservation's creation. All billing charges for the failover reservation will be
        /// applied to this location.
        /// </summary>
        [Output("originalPrimaryLocation")]
        public Output<string> OriginalPrimaryLocation { get; private set; } = null!;

        /// <summary>
        /// The current location of the reservation's primary replica. This field is only set for
        /// reservations using the managed disaster recovery feature.
        /// </summary>
        [Output("primaryLocation")]
        public Output<string> PrimaryLocation { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The Disaster Recovery(DR) replication status of the reservation. This is only available for
        /// the primary replicas of DR/failover reservations and provides information about the both the
        /// staleness of the secondary and the last error encountered while trying to replicate changes
        /// from the primary to the secondary. If this field is blank, it means that the reservation is
        /// either not a DR reservation or the reservation is a DR secondary or that any replication
        /// operations on the reservation have succeeded.
        /// Structure is documented below.
        /// </summary>
        [Output("replicationStatuses")]
        public Output<ImmutableArray<Outputs.ReservationReplicationStatus>> ReplicationStatuses { get; private set; } = null!;

        /// <summary>
        /// The scaling mode for the reservation. If the field is present but maxSlots is not present,
        /// requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
        /// Enum values:
        /// `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
        /// `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
        /// not use any idle slots even if there may be some available. The upper limit that autoscaling
        /// can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
        /// and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
        /// and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
        /// set to true. Otherwise the request will be rejected with error code
        /// google.rpc.Code.INVALID_ARGUMENT.
        /// `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
        /// reservations or from unassigned commitments. If no idle slots are available it will not scale
        /// up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
        /// it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
        /// capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
        /// IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
        /// reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
        /// 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
        /// 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
        /// scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
        /// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
        /// `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
        /// contributed by other reservations or from unassigned commitments first. If no idle slots are
        /// available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
        /// and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
        /// reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
        /// if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
        /// slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
        /// available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
        /// autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
        /// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
        /// Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
        /// </summary>
        [Output("scalingMode")]
        public Output<string?> ScalingMode { get; private set; } = null!;

        /// <summary>
        /// The current location of the reservation's secondary replica. This field is only set for
        /// reservations using the managed disaster recovery feature. Users can set this in create
        /// reservation calls to create a failover reservation or in update reservation calls to convert
        /// a non-failover reservation to a failover reservation(or vice versa).
        /// </summary>
        [Output("secondaryLocation")]
        public Output<string?> SecondaryLocation { get; private set; } = null!;

        /// <summary>
        /// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
        /// unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
        /// </summary>
        [Output("slotCapacity")]
        public Output<int> SlotCapacity { get; private set; } = null!;


        /// <summary>
        /// Create a Reservation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Reservation(string name, ReservationArgs args, CustomResourceOptions? options = null)
            : base("gcp:bigquery/reservation:Reservation", name, args ?? new ReservationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Reservation(string name, Input<string> id, ReservationState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigquery/reservation:Reservation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Reservation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Reservation Get(string name, Input<string> id, ReservationState? state = null, CustomResourceOptions? options = null)
        {
            return new Reservation(name, id, state, options);
        }
    }

    public sealed class ReservationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration parameters for the auto scaling feature.
        /// Structure is documented below.
        /// </summary>
        [Input("autoscale")]
        public Input<Inputs.ReservationAutoscaleArgs>? Autoscale { get; set; }

        /// <summary>
        /// Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
        /// </summary>
        [Input("concurrency")]
        public Input<int>? Concurrency { get; set; }

        /// <summary>
        /// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
        /// </summary>
        [Input("edition")]
        public Input<string>? Edition { get; set; }

        /// <summary>
        /// If false, any query using this reservation will use idle slots from other reservations within
        /// the same admin project. If true, a query using this reservation will execute with the slot
        /// capacity specified above at most.
        /// </summary>
        [Input("ignoreIdleSlots")]
        public Input<bool>? IgnoreIdleSlots { get; set; }

        /// <summary>
        /// The geographic location where the transfer config should reside.
        /// Examples: US, EU, asia-northeast1. The default value is US.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
        /// (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won't use
        /// more than the specified number of slots, even if there is demand and supply (from idle
        /// slots). NOTE: capping a reservation's idle slot usage is best effort and its usage may
        /// exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
        /// for the additional added slots), it will never exceed the maxSlots - baseline.
        /// This field must be set together with the scalingMode enum value, otherwise the request
        /// will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
        /// If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
        /// must be unset. Otherwise the request will be rejected with error code
        /// google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
        /// output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
        /// will represent the current slots from autoscaler excluding idle slots. For example,
        /// if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
        /// autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
        /// between 0 and 1000.
        /// If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
        /// usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
        /// autoscaler.current_slots will not be higher than 700.
        /// If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
        /// autoscaler field will be null.
        /// If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
        /// aligned with the scalingMode enum value.(See details in ScalingMode comments).
        /// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
        /// Please note, the maxSlots is for user to manage the part of slots greater than the
        /// baseline. Therefore, we don't allow users to set maxSlots smaller or equal to the
        /// baseline as it will not be meaningful. If the field is present and
        /// slotCapacity&gt;=maxSlots, requests will be rejected with error code
        /// google.rpc.Code.INVALID_ARGUMENT.
        /// Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
        /// maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
        /// feature.
        /// </summary>
        [Input("maxSlots")]
        public Input<int>? MaxSlots { get; set; }

        /// <summary>
        /// The name of the reservation. This field must only contain alphanumeric characters or dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The scaling mode for the reservation. If the field is present but maxSlots is not present,
        /// requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
        /// Enum values:
        /// `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
        /// `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
        /// not use any idle slots even if there may be some available. The upper limit that autoscaling
        /// can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
        /// and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
        /// and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
        /// set to true. Otherwise the request will be rejected with error code
        /// google.rpc.Code.INVALID_ARGUMENT.
        /// `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
        /// reservations or from unassigned commitments. If no idle slots are available it will not scale
        /// up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
        /// it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
        /// capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
        /// IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
        /// reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
        /// 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
        /// 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
        /// scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
        /// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
        /// `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
        /// contributed by other reservations or from unassigned commitments first. If no idle slots are
        /// available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
        /// and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
        /// reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
        /// if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
        /// slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
        /// available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
        /// autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
        /// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
        /// Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
        /// </summary>
        [Input("scalingMode")]
        public Input<string>? ScalingMode { get; set; }

        /// <summary>
        /// The current location of the reservation's secondary replica. This field is only set for
        /// reservations using the managed disaster recovery feature. Users can set this in create
        /// reservation calls to create a failover reservation or in update reservation calls to convert
        /// a non-failover reservation to a failover reservation(or vice versa).
        /// </summary>
        [Input("secondaryLocation")]
        public Input<string>? SecondaryLocation { get; set; }

        /// <summary>
        /// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
        /// unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
        /// </summary>
        [Input("slotCapacity", required: true)]
        public Input<int> SlotCapacity { get; set; } = null!;

        public ReservationArgs()
        {
        }
        public static new ReservationArgs Empty => new ReservationArgs();
    }

    public sealed class ReservationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration parameters for the auto scaling feature.
        /// Structure is documented below.
        /// </summary>
        [Input("autoscale")]
        public Input<Inputs.ReservationAutoscaleGetArgs>? Autoscale { get; set; }

        /// <summary>
        /// Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
        /// </summary>
        [Input("concurrency")]
        public Input<int>? Concurrency { get; set; }

        /// <summary>
        /// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
        /// </summary>
        [Input("edition")]
        public Input<string>? Edition { get; set; }

        /// <summary>
        /// If false, any query using this reservation will use idle slots from other reservations within
        /// the same admin project. If true, a query using this reservation will execute with the slot
        /// capacity specified above at most.
        /// </summary>
        [Input("ignoreIdleSlots")]
        public Input<bool>? IgnoreIdleSlots { get; set; }

        /// <summary>
        /// The geographic location where the transfer config should reside.
        /// Examples: US, EU, asia-northeast1. The default value is US.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
        /// (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won't use
        /// more than the specified number of slots, even if there is demand and supply (from idle
        /// slots). NOTE: capping a reservation's idle slot usage is best effort and its usage may
        /// exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
        /// for the additional added slots), it will never exceed the maxSlots - baseline.
        /// This field must be set together with the scalingMode enum value, otherwise the request
        /// will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
        /// If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
        /// must be unset. Otherwise the request will be rejected with error code
        /// google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
        /// output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
        /// will represent the current slots from autoscaler excluding idle slots. For example,
        /// if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
        /// autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
        /// between 0 and 1000.
        /// If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
        /// usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
        /// autoscaler.current_slots will not be higher than 700.
        /// If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
        /// autoscaler field will be null.
        /// If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
        /// aligned with the scalingMode enum value.(See details in ScalingMode comments).
        /// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
        /// Please note, the maxSlots is for user to manage the part of slots greater than the
        /// baseline. Therefore, we don't allow users to set maxSlots smaller or equal to the
        /// baseline as it will not be meaningful. If the field is present and
        /// slotCapacity&gt;=maxSlots, requests will be rejected with error code
        /// google.rpc.Code.INVALID_ARGUMENT.
        /// Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
        /// maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
        /// feature.
        /// </summary>
        [Input("maxSlots")]
        public Input<int>? MaxSlots { get; set; }

        /// <summary>
        /// The name of the reservation. This field must only contain alphanumeric characters or dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The location where the reservation was originally created. This is set only during the
        /// failover reservation's creation. All billing charges for the failover reservation will be
        /// applied to this location.
        /// </summary>
        [Input("originalPrimaryLocation")]
        public Input<string>? OriginalPrimaryLocation { get; set; }

        /// <summary>
        /// The current location of the reservation's primary replica. This field is only set for
        /// reservations using the managed disaster recovery feature.
        /// </summary>
        [Input("primaryLocation")]
        public Input<string>? PrimaryLocation { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("replicationStatuses")]
        private InputList<Inputs.ReservationReplicationStatusGetArgs>? _replicationStatuses;

        /// <summary>
        /// The Disaster Recovery(DR) replication status of the reservation. This is only available for
        /// the primary replicas of DR/failover reservations and provides information about the both the
        /// staleness of the secondary and the last error encountered while trying to replicate changes
        /// from the primary to the secondary. If this field is blank, it means that the reservation is
        /// either not a DR reservation or the reservation is a DR secondary or that any replication
        /// operations on the reservation have succeeded.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ReservationReplicationStatusGetArgs> ReplicationStatuses
        {
            get => _replicationStatuses ?? (_replicationStatuses = new InputList<Inputs.ReservationReplicationStatusGetArgs>());
            set => _replicationStatuses = value;
        }

        /// <summary>
        /// The scaling mode for the reservation. If the field is present but maxSlots is not present,
        /// requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
        /// Enum values:
        /// `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
        /// `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
        /// not use any idle slots even if there may be some available. The upper limit that autoscaling
        /// can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
        /// and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
        /// and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
        /// set to true. Otherwise the request will be rejected with error code
        /// google.rpc.Code.INVALID_ARGUMENT.
        /// `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
        /// reservations or from unassigned commitments. If no idle slots are available it will not scale
        /// up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
        /// it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
        /// capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
        /// IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
        /// reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
        /// 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
        /// 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
        /// scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
        /// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
        /// `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
        /// contributed by other reservations or from unassigned commitments first. If no idle slots are
        /// available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
        /// and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
        /// reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
        /// if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
        /// slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
        /// available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
        /// autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
        /// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
        /// Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
        /// </summary>
        [Input("scalingMode")]
        public Input<string>? ScalingMode { get; set; }

        /// <summary>
        /// The current location of the reservation's secondary replica. This field is only set for
        /// reservations using the managed disaster recovery feature. Users can set this in create
        /// reservation calls to create a failover reservation or in update reservation calls to convert
        /// a non-failover reservation to a failover reservation(or vice versa).
        /// </summary>
        [Input("secondaryLocation")]
        public Input<string>? SecondaryLocation { get; set; }

        /// <summary>
        /// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
        /// unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
        /// </summary>
        [Input("slotCapacity")]
        public Input<int>? SlotCapacity { get; set; }

        public ReservationState()
        {
        }
        public static new ReservationState Empty => new ReservationState();
    }
}
