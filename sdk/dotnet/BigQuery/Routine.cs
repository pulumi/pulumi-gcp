// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQuery
{
    /// <summary>
    /// A user-defined function or a stored procedure that belongs to a Dataset
    /// 
    /// To get more information about Routine, see:
    /// 
    /// * [API documentation](https://cloud.google.com/bigquery/docs/reference/rest/v2/routines)
    /// * How-to Guides
    ///     * [Routines Intro](https://cloud.google.com/bigquery/docs/reference/rest/v2/routines)
    /// 
    /// ## Example Usage
    /// ### Big Query Routine Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Gcp.BigQuery.Dataset("test", new Gcp.BigQuery.DatasetArgs
    ///         {
    ///             DatasetId = "dataset_id",
    ///         });
    ///         var sproc = new Gcp.BigQuery.Routine("sproc", new Gcp.BigQuery.RoutineArgs
    ///         {
    ///             DatasetId = test.DatasetId,
    ///             RoutineId = "routine_id",
    ///             RoutineType = "PROCEDURE",
    ///             Language = "SQL",
    ///             DefinitionBody = "CREATE FUNCTION Add(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (x + y);",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Routine can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:bigquery/routine:Routine default projects/{{project}}/datasets/{{dataset_id}}/routines/{{routine_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:bigquery/routine:Routine default {{project}}/{{dataset_id}}/{{routine_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:bigquery/routine:Routine default {{dataset_id}}/{{routine_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:bigquery/routine:Routine")]
    public partial class Routine : Pulumi.CustomResource
    {
        /// <summary>
        /// Input/output argument of a function or a stored procedure.
        /// Structure is documented below.
        /// </summary>
        [Output("arguments")]
        public Output<ImmutableArray<Outputs.RoutineArgument>> Arguments { get; private set; } = null!;

        /// <summary>
        /// The time when this routine was created, in milliseconds since the epoch.
        /// </summary>
        [Output("creationTime")]
        public Output<int> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the dataset containing this routine
        /// </summary>
        [Output("datasetId")]
        public Output<string> DatasetId { get; private set; } = null!;

        /// <summary>
        /// The body of the routine. For functions, this is the expression in the AS clause.
        /// If language=SQL, it is the substring inside (but excluding) the parentheses.
        /// </summary>
        [Output("definitionBody")]
        public Output<string> DefinitionBody { get; private set; } = null!;

        /// <summary>
        /// The description of the routine if defined.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The determinism level of the JavaScript UDF if defined.
        /// Possible values are `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, and `NOT_DETERMINISTIC`.
        /// </summary>
        [Output("determinismLevel")]
        public Output<string?> DeterminismLevel { get; private set; } = null!;

        /// <summary>
        /// Optional. If language = "JAVASCRIPT", this field stores the path of the
        /// imported JAVASCRIPT libraries.
        /// </summary>
        [Output("importedLibraries")]
        public Output<ImmutableArray<string>> ImportedLibraries { get; private set; } = null!;

        /// <summary>
        /// The language of the routine.
        /// Possible values are `SQL` and `JAVASCRIPT`.
        /// </summary>
        [Output("language")]
        public Output<string?> Language { get; private set; } = null!;

        /// <summary>
        /// The time when this routine was modified, in milliseconds since the epoch.
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<int> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
        /// If absent, the return type is inferred from definitionBody at query time in each query
        /// that references this routine. If present, then the evaluated result will be cast to
        /// the specified returned type at query time. ~&gt;**NOTE**: Because this field expects a JSON
        /// string, any changes to the string will create a diff, even if the JSON itself hasn't
        /// changed. If the API returns a different value for the same schema, e.g. it switche
        /// d the order of values or replaced STRUCT field type with RECORD field type, we currently
        /// cannot suppress the recurring diff this causes. As a workaround, we recommend using
        /// the schema as returned by the API.
        /// </summary>
        [Output("returnType")]
        public Output<string?> ReturnType { get; private set; } = null!;

        /// <summary>
        /// The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
        /// </summary>
        [Output("routineId")]
        public Output<string> RoutineId { get; private set; } = null!;

        /// <summary>
        /// The type of routine.
        /// Possible values are `SCALAR_FUNCTION` and `PROCEDURE`.
        /// </summary>
        [Output("routineType")]
        public Output<string?> RoutineType { get; private set; } = null!;


        /// <summary>
        /// Create a Routine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Routine(string name, RoutineArgs args, CustomResourceOptions? options = null)
            : base("gcp:bigquery/routine:Routine", name, args ?? new RoutineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Routine(string name, Input<string> id, RoutineState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigquery/routine:Routine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Routine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Routine Get(string name, Input<string> id, RoutineState? state = null, CustomResourceOptions? options = null)
        {
            return new Routine(name, id, state, options);
        }
    }

    public sealed class RoutineArgs : Pulumi.ResourceArgs
    {
        [Input("arguments")]
        private InputList<Inputs.RoutineArgumentArgs>? _arguments;

        /// <summary>
        /// Input/output argument of a function or a stored procedure.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RoutineArgumentArgs> Arguments
        {
            get => _arguments ?? (_arguments = new InputList<Inputs.RoutineArgumentArgs>());
            set => _arguments = value;
        }

        /// <summary>
        /// The ID of the dataset containing this routine
        /// </summary>
        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        /// <summary>
        /// The body of the routine. For functions, this is the expression in the AS clause.
        /// If language=SQL, it is the substring inside (but excluding) the parentheses.
        /// </summary>
        [Input("definitionBody", required: true)]
        public Input<string> DefinitionBody { get; set; } = null!;

        /// <summary>
        /// The description of the routine if defined.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The determinism level of the JavaScript UDF if defined.
        /// Possible values are `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, and `NOT_DETERMINISTIC`.
        /// </summary>
        [Input("determinismLevel")]
        public Input<string>? DeterminismLevel { get; set; }

        [Input("importedLibraries")]
        private InputList<string>? _importedLibraries;

        /// <summary>
        /// Optional. If language = "JAVASCRIPT", this field stores the path of the
        /// imported JAVASCRIPT libraries.
        /// </summary>
        public InputList<string> ImportedLibraries
        {
            get => _importedLibraries ?? (_importedLibraries = new InputList<string>());
            set => _importedLibraries = value;
        }

        /// <summary>
        /// The language of the routine.
        /// Possible values are `SQL` and `JAVASCRIPT`.
        /// </summary>
        [Input("language")]
        public Input<string>? Language { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
        /// If absent, the return type is inferred from definitionBody at query time in each query
        /// that references this routine. If present, then the evaluated result will be cast to
        /// the specified returned type at query time. ~&gt;**NOTE**: Because this field expects a JSON
        /// string, any changes to the string will create a diff, even if the JSON itself hasn't
        /// changed. If the API returns a different value for the same schema, e.g. it switche
        /// d the order of values or replaced STRUCT field type with RECORD field type, we currently
        /// cannot suppress the recurring diff this causes. As a workaround, we recommend using
        /// the schema as returned by the API.
        /// </summary>
        [Input("returnType")]
        public Input<string>? ReturnType { get; set; }

        /// <summary>
        /// The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
        /// </summary>
        [Input("routineId", required: true)]
        public Input<string> RoutineId { get; set; } = null!;

        /// <summary>
        /// The type of routine.
        /// Possible values are `SCALAR_FUNCTION` and `PROCEDURE`.
        /// </summary>
        [Input("routineType")]
        public Input<string>? RoutineType { get; set; }

        public RoutineArgs()
        {
        }
    }

    public sealed class RoutineState : Pulumi.ResourceArgs
    {
        [Input("arguments")]
        private InputList<Inputs.RoutineArgumentGetArgs>? _arguments;

        /// <summary>
        /// Input/output argument of a function or a stored procedure.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RoutineArgumentGetArgs> Arguments
        {
            get => _arguments ?? (_arguments = new InputList<Inputs.RoutineArgumentGetArgs>());
            set => _arguments = value;
        }

        /// <summary>
        /// The time when this routine was created, in milliseconds since the epoch.
        /// </summary>
        [Input("creationTime")]
        public Input<int>? CreationTime { get; set; }

        /// <summary>
        /// The ID of the dataset containing this routine
        /// </summary>
        [Input("datasetId")]
        public Input<string>? DatasetId { get; set; }

        /// <summary>
        /// The body of the routine. For functions, this is the expression in the AS clause.
        /// If language=SQL, it is the substring inside (but excluding) the parentheses.
        /// </summary>
        [Input("definitionBody")]
        public Input<string>? DefinitionBody { get; set; }

        /// <summary>
        /// The description of the routine if defined.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The determinism level of the JavaScript UDF if defined.
        /// Possible values are `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, and `NOT_DETERMINISTIC`.
        /// </summary>
        [Input("determinismLevel")]
        public Input<string>? DeterminismLevel { get; set; }

        [Input("importedLibraries")]
        private InputList<string>? _importedLibraries;

        /// <summary>
        /// Optional. If language = "JAVASCRIPT", this field stores the path of the
        /// imported JAVASCRIPT libraries.
        /// </summary>
        public InputList<string> ImportedLibraries
        {
            get => _importedLibraries ?? (_importedLibraries = new InputList<string>());
            set => _importedLibraries = value;
        }

        /// <summary>
        /// The language of the routine.
        /// Possible values are `SQL` and `JAVASCRIPT`.
        /// </summary>
        [Input("language")]
        public Input<string>? Language { get; set; }

        /// <summary>
        /// The time when this routine was modified, in milliseconds since the epoch.
        /// </summary>
        [Input("lastModifiedTime")]
        public Input<int>? LastModifiedTime { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
        /// If absent, the return type is inferred from definitionBody at query time in each query
        /// that references this routine. If present, then the evaluated result will be cast to
        /// the specified returned type at query time. ~&gt;**NOTE**: Because this field expects a JSON
        /// string, any changes to the string will create a diff, even if the JSON itself hasn't
        /// changed. If the API returns a different value for the same schema, e.g. it switche
        /// d the order of values or replaced STRUCT field type with RECORD field type, we currently
        /// cannot suppress the recurring diff this causes. As a workaround, we recommend using
        /// the schema as returned by the API.
        /// </summary>
        [Input("returnType")]
        public Input<string>? ReturnType { get; set; }

        /// <summary>
        /// The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
        /// </summary>
        [Input("routineId")]
        public Input<string>? RoutineId { get; set; }

        /// <summary>
        /// The type of routine.
        /// Possible values are `SCALAR_FUNCTION` and `PROCEDURE`.
        /// </summary>
        [Input("routineType")]
        public Input<string>? RoutineType { get; set; }

        public RoutineState()
        {
        }
    }
}
