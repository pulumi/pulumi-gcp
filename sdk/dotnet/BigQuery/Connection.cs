// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BigQuery
{
    /// <summary>
    /// ## Example Usage
    /// ### Bigquery Connection Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Random = Pulumi.Random;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var instance = new Gcp.Sql.DatabaseInstance("instance", new Gcp.Sql.DatabaseInstanceArgs
    ///         {
    ///             DatabaseVersion = "POSTGRES_11",
    ///             Region = "us-central1",
    ///             Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///             {
    ///                 Tier = "db-f1-micro",
    ///             },
    ///             DeletionProtection = true,
    ///         });
    ///         var db = new Gcp.Sql.Database("db", new Gcp.Sql.DatabaseArgs
    ///         {
    ///             Instance = instance.Name,
    ///         });
    ///         var pwd = new Random.RandomPassword("pwd", new Random.RandomPasswordArgs
    ///         {
    ///             Length = 16,
    ///             Special = false,
    ///         });
    ///         var user = new Gcp.Sql.User("user", new Gcp.Sql.UserArgs
    ///         {
    ///             Instance = instance.Name,
    ///             Password = pwd.Result,
    ///         });
    ///         var connection = new Gcp.BigQuery.Connection("connection", new Gcp.BigQuery.ConnectionArgs
    ///         {
    ///             FriendlyName = "ðŸ‘‹",
    ///             Description = "a riveting description",
    ///             Location = "US",
    ///             CloudSql = new Gcp.BigQuery.Inputs.ConnectionCloudSqlArgs
    ///             {
    ///                 InstanceId = instance.ConnectionName,
    ///                 Database = db.Name,
    ///                 Type = "POSTGRES",
    ///                 Credential = new Gcp.BigQuery.Inputs.ConnectionCloudSqlCredentialArgs
    ///                 {
    ///                     Username = user.Name,
    ///                     Password = user.Password,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Bigquery Connection Full
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Random = Pulumi.Random;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var instance = new Gcp.Sql.DatabaseInstance("instance", new Gcp.Sql.DatabaseInstanceArgs
    ///         {
    ///             DatabaseVersion = "POSTGRES_11",
    ///             Region = "us-central1",
    ///             Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///             {
    ///                 Tier = "db-f1-micro",
    ///             },
    ///             DeletionProtection = true,
    ///         });
    ///         var db = new Gcp.Sql.Database("db", new Gcp.Sql.DatabaseArgs
    ///         {
    ///             Instance = instance.Name,
    ///         });
    ///         var pwd = new Random.RandomPassword("pwd", new Random.RandomPasswordArgs
    ///         {
    ///             Length = 16,
    ///             Special = false,
    ///         });
    ///         var user = new Gcp.Sql.User("user", new Gcp.Sql.UserArgs
    ///         {
    ///             Instance = instance.Name,
    ///             Password = pwd.Result,
    ///         });
    ///         var connection = new Gcp.BigQuery.Connection("connection", new Gcp.BigQuery.ConnectionArgs
    ///         {
    ///             ConnectionId = "my-connection",
    ///             Location = "US",
    ///             FriendlyName = "ðŸ‘‹",
    ///             Description = "a riveting description",
    ///             CloudSql = new Gcp.BigQuery.Inputs.ConnectionCloudSqlArgs
    ///             {
    ///                 InstanceId = instance.ConnectionName,
    ///                 Database = db.Name,
    ///                 Type = "POSTGRES",
    ///                 Credential = new Gcp.BigQuery.Inputs.ConnectionCloudSqlCredentialArgs
    ///                 {
    ///                     Username = user.Name,
    ///                     Password = user.Password,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Bigquery Connection Cloud Resource
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var connection = new Gcp.BigQuery.Connection("connection", new Gcp.BigQuery.ConnectionArgs
    ///         {
    ///             CloudResource = ,
    ///             ConnectionId = "my-connection",
    ///             Description = "a riveting description",
    ///             FriendlyName = "ðŸ‘‹",
    ///             Location = "US",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Bigquery Connection Aws
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var connection = new Gcp.BigQuery.Connection("connection", new Gcp.BigQuery.ConnectionArgs
    ///         {
    ///             Aws = new Gcp.BigQuery.Inputs.ConnectionAwsArgs
    ///             {
    ///                 AccessRole = new Gcp.BigQuery.Inputs.ConnectionAwsAccessRoleArgs
    ///                 {
    ///                     IamRoleId = "arn:aws:iam::999999999999:role/omnirole",
    ///                 },
    ///             },
    ///             ConnectionId = "my-connection",
    ///             Description = "a riveting description",
    ///             FriendlyName = "ðŸ‘‹",
    ///             Location = "aws-us-east-1",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Bigquery Connection Azure
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var connection = new Gcp.BigQuery.Connection("connection", new Gcp.BigQuery.ConnectionArgs
    ///         {
    ///             Azure = new Gcp.BigQuery.Inputs.ConnectionAzureArgs
    ///             {
    ///                 CustomerTenantId = "customer-tenant-id",
    ///             },
    ///             ConnectionId = "my-connection",
    ///             Description = "a riveting description",
    ///             FriendlyName = "ðŸ‘‹",
    ///             Location = "azure-eastus2",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Bigquery Connection Cloudspanner
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var connection = new Gcp.BigQuery.Connection("connection", new Gcp.BigQuery.ConnectionArgs
    ///         {
    ///             CloudSpanner = new Gcp.BigQuery.Inputs.ConnectionCloudSpannerArgs
    ///             {
    ///                 Database = "projects/project/instances/instance/databases/database",
    ///             },
    ///             ConnectionId = "my-connection",
    ///             Description = "a riveting description",
    ///             FriendlyName = "ðŸ‘‹",
    ///             Location = "US",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Connection can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:bigquery/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{connection_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:bigquery/connection:Connection default {{project}}/{{location}}/{{connection_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:bigquery/connection:Connection default {{location}}/{{connection_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:bigquery/connection:Connection")]
    public partial class Connection : Pulumi.CustomResource
    {
        /// <summary>
        /// Connection properties specific to Amazon Web Services.
        /// Structure is documented below.
        /// </summary>
        [Output("aws")]
        public Output<Outputs.ConnectionAws?> Aws { get; private set; } = null!;

        /// <summary>
        /// Container for connection properties specific to Azure.
        /// Structure is documented below.
        /// </summary>
        [Output("azure")]
        public Output<Outputs.ConnectionAzure?> Azure { get; private set; } = null!;

        /// <summary>
        /// Container for connection properties for delegation of access to GCP resources.
        /// Structure is documented below.
        /// </summary>
        [Output("cloudResource")]
        public Output<Outputs.ConnectionCloudResource?> CloudResource { get; private set; } = null!;

        /// <summary>
        /// Connection properties specific to Cloud Spanner
        /// Structure is documented below.
        /// </summary>
        [Output("cloudSpanner")]
        public Output<Outputs.ConnectionCloudSpanner?> CloudSpanner { get; private set; } = null!;

        /// <summary>
        /// A nested object resource
        /// Structure is documented below.
        /// </summary>
        [Output("cloudSql")]
        public Output<Outputs.ConnectionCloudSql?> CloudSql { get; private set; } = null!;

        /// <summary>
        /// Optional connection id that should be assigned to the created connection.
        /// </summary>
        [Output("connectionId")]
        public Output<string> ConnectionId { get; private set; } = null!;

        /// <summary>
        /// A descriptive description for the connection
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A descriptive name for the connection
        /// </summary>
        [Output("friendlyName")]
        public Output<string?> FriendlyName { get; private set; } = null!;

        /// <summary>
        /// True if the connection has credential assigned.
        /// </summary>
        [Output("hasCredential")]
        public Output<bool> HasCredential { get; private set; } = null!;

        /// <summary>
        /// The geographic location where the connection should reside.
        /// Cloud SQL instance must be in the same location as the connection
        /// with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
        /// Examples: US, EU, asia-northeast1, us-central1, europe-west1.
        /// Spanner Connections same as spanner region
        /// AWS allowed regions are aws-us-east-1
        /// Azure allowed regions are azure-eastus2
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the connection in the form of:
        /// "projects/{project_id}/locations/{location_id}/connections/{connectionId}"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:bigquery/connection:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:bigquery/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Connection properties specific to Amazon Web Services.
        /// Structure is documented below.
        /// </summary>
        [Input("aws")]
        public Input<Inputs.ConnectionAwsArgs>? Aws { get; set; }

        /// <summary>
        /// Container for connection properties specific to Azure.
        /// Structure is documented below.
        /// </summary>
        [Input("azure")]
        public Input<Inputs.ConnectionAzureArgs>? Azure { get; set; }

        /// <summary>
        /// Container for connection properties for delegation of access to GCP resources.
        /// Structure is documented below.
        /// </summary>
        [Input("cloudResource")]
        public Input<Inputs.ConnectionCloudResourceArgs>? CloudResource { get; set; }

        /// <summary>
        /// Connection properties specific to Cloud Spanner
        /// Structure is documented below.
        /// </summary>
        [Input("cloudSpanner")]
        public Input<Inputs.ConnectionCloudSpannerArgs>? CloudSpanner { get; set; }

        /// <summary>
        /// A nested object resource
        /// Structure is documented below.
        /// </summary>
        [Input("cloudSql")]
        public Input<Inputs.ConnectionCloudSqlArgs>? CloudSql { get; set; }

        /// <summary>
        /// Optional connection id that should be assigned to the created connection.
        /// </summary>
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        /// <summary>
        /// A descriptive description for the connection
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A descriptive name for the connection
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        /// <summary>
        /// The geographic location where the connection should reside.
        /// Cloud SQL instance must be in the same location as the connection
        /// with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
        /// Examples: US, EU, asia-northeast1, us-central1, europe-west1.
        /// Spanner Connections same as spanner region
        /// AWS allowed regions are aws-us-east-1
        /// Azure allowed regions are azure-eastus2
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public ConnectionArgs()
        {
        }
    }

    public sealed class ConnectionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Connection properties specific to Amazon Web Services.
        /// Structure is documented below.
        /// </summary>
        [Input("aws")]
        public Input<Inputs.ConnectionAwsGetArgs>? Aws { get; set; }

        /// <summary>
        /// Container for connection properties specific to Azure.
        /// Structure is documented below.
        /// </summary>
        [Input("azure")]
        public Input<Inputs.ConnectionAzureGetArgs>? Azure { get; set; }

        /// <summary>
        /// Container for connection properties for delegation of access to GCP resources.
        /// Structure is documented below.
        /// </summary>
        [Input("cloudResource")]
        public Input<Inputs.ConnectionCloudResourceGetArgs>? CloudResource { get; set; }

        /// <summary>
        /// Connection properties specific to Cloud Spanner
        /// Structure is documented below.
        /// </summary>
        [Input("cloudSpanner")]
        public Input<Inputs.ConnectionCloudSpannerGetArgs>? CloudSpanner { get; set; }

        /// <summary>
        /// A nested object resource
        /// Structure is documented below.
        /// </summary>
        [Input("cloudSql")]
        public Input<Inputs.ConnectionCloudSqlGetArgs>? CloudSql { get; set; }

        /// <summary>
        /// Optional connection id that should be assigned to the created connection.
        /// </summary>
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        /// <summary>
        /// A descriptive description for the connection
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A descriptive name for the connection
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        /// <summary>
        /// True if the connection has credential assigned.
        /// </summary>
        [Input("hasCredential")]
        public Input<bool>? HasCredential { get; set; }

        /// <summary>
        /// The geographic location where the connection should reside.
        /// Cloud SQL instance must be in the same location as the connection
        /// with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
        /// Examples: US, EU, asia-northeast1, us-central1, europe-west1.
        /// Spanner Connections same as spanner region
        /// AWS allowed regions are aws-us-east-1
        /// Azure allowed regions are azure-eastus2
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the connection in the form of:
        /// "projects/{project_id}/locations/{location_id}/connections/{connectionId}"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public ConnectionState()
        {
        }
    }
}
