// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ServiceAccount
{
    /// <summary>
    /// Creates and manages service account key-pairs, which allow the user to establish identity of a service account outside of GCP. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys).
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/service_account_key.html.markdown.
    /// </summary>
    public partial class Key : Pulumi.CustomResource
    {
        /// <summary>
        /// The algorithm used to generate the key. KEY_ALG_RSA_2048 is the default algorithm.
        /// Valid values are listed at
        /// [ServiceAccountPrivateKeyType](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm)
        /// (only used on create)
        /// </summary>
        [Output("keyAlgorithm")]
        public Output<string?> KeyAlgorithm { get; private set; } = null!;

        /// <summary>
        /// The name used for this key pair
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An optional PGP key to encrypt the resulting private
        /// key material. Only used when creating or importing a new key pair. May either be
        /// a base64-encoded public key or a `keybase:keybaseusername` string for looking up
        /// in Vault.
        /// </summary>
        [Output("pgpKey")]
        public Output<string?> PgpKey { get; private set; } = null!;

        /// <summary>
        /// The private key in JSON format, base64 encoded. This is what you normally get as a file when creating
        /// service account keys through the CLI or web console. This is only populated when creating a new key, and when no
        /// `pgp_key` is provided.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// The private key material, base 64 encoded and
        /// encrypted with the given `pgp_key`. This is only populated when creating a new
        /// key and `pgp_key` is supplied
        /// </summary>
        [Output("privateKeyEncrypted")]
        public Output<string> PrivateKeyEncrypted { get; private set; } = null!;

        /// <summary>
        /// The MD5 public key fingerprint for the encrypted
        /// private key. This is only populated when creating a new key and `pgp_key` is supplied
        /// </summary>
        [Output("privateKeyFingerprint")]
        public Output<string> PrivateKeyFingerprint { get; private set; } = null!;

        /// <summary>
        /// The output format of the private key. TYPE_GOOGLE_CREDENTIALS_FILE is the default output format.
        /// </summary>
        [Output("privateKeyType")]
        public Output<string?> PrivateKeyType { get; private set; } = null!;

        /// <summary>
        /// The public key, base64 encoded
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        /// <summary>
        /// The output format of the public key requested. X509_PEM is the default output format.
        /// </summary>
        [Output("publicKeyType")]
        public Output<string?> PublicKeyType { get; private set; } = null!;

        /// <summary>
        /// The Service account id of the Key Pair. This can be a string in the format
        /// `{ACCOUNT}` or `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`, where `{ACCOUNT}` is the email address or
        /// unique id of the service account. If the `{ACCOUNT}` syntax is used, the project will be inferred from the account.
        /// </summary>
        [Output("serviceAccountId")]
        public Output<string> ServiceAccountId { get; private set; } = null!;

        /// <summary>
        /// The key can be used after this timestamp. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("validAfter")]
        public Output<string> ValidAfter { get; private set; } = null!;

        /// <summary>
        /// The key can be used before this timestamp.
        /// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("validBefore")]
        public Output<string> ValidBefore { get; private set; } = null!;


        /// <summary>
        /// Create a Key resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Key(string name, KeyArgs args, CustomResourceOptions? options = null)
            : base("gcp:serviceAccount/key:Key", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Key(string name, Input<string> id, KeyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:serviceAccount/key:Key", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Key resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Key Get(string name, Input<string> id, KeyState? state = null, CustomResourceOptions? options = null)
        {
            return new Key(name, id, state, options);
        }
    }

    public sealed class KeyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The algorithm used to generate the key. KEY_ALG_RSA_2048 is the default algorithm.
        /// Valid values are listed at
        /// [ServiceAccountPrivateKeyType](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm)
        /// (only used on create)
        /// </summary>
        [Input("keyAlgorithm")]
        public Input<string>? KeyAlgorithm { get; set; }

        /// <summary>
        /// An optional PGP key to encrypt the resulting private
        /// key material. Only used when creating or importing a new key pair. May either be
        /// a base64-encoded public key or a `keybase:keybaseusername` string for looking up
        /// in Vault.
        /// </summary>
        [Input("pgpKey")]
        public Input<string>? PgpKey { get; set; }

        /// <summary>
        /// The output format of the private key. TYPE_GOOGLE_CREDENTIALS_FILE is the default output format.
        /// </summary>
        [Input("privateKeyType")]
        public Input<string>? PrivateKeyType { get; set; }

        /// <summary>
        /// The output format of the public key requested. X509_PEM is the default output format.
        /// </summary>
        [Input("publicKeyType")]
        public Input<string>? PublicKeyType { get; set; }

        /// <summary>
        /// The Service account id of the Key Pair. This can be a string in the format
        /// `{ACCOUNT}` or `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`, where `{ACCOUNT}` is the email address or
        /// unique id of the service account. If the `{ACCOUNT}` syntax is used, the project will be inferred from the account.
        /// </summary>
        [Input("serviceAccountId", required: true)]
        public Input<string> ServiceAccountId { get; set; } = null!;

        public KeyArgs()
        {
        }
    }

    public sealed class KeyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The algorithm used to generate the key. KEY_ALG_RSA_2048 is the default algorithm.
        /// Valid values are listed at
        /// [ServiceAccountPrivateKeyType](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm)
        /// (only used on create)
        /// </summary>
        [Input("keyAlgorithm")]
        public Input<string>? KeyAlgorithm { get; set; }

        /// <summary>
        /// The name used for this key pair
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An optional PGP key to encrypt the resulting private
        /// key material. Only used when creating or importing a new key pair. May either be
        /// a base64-encoded public key or a `keybase:keybaseusername` string for looking up
        /// in Vault.
        /// </summary>
        [Input("pgpKey")]
        public Input<string>? PgpKey { get; set; }

        /// <summary>
        /// The private key in JSON format, base64 encoded. This is what you normally get as a file when creating
        /// service account keys through the CLI or web console. This is only populated when creating a new key, and when no
        /// `pgp_key` is provided.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// The private key material, base 64 encoded and
        /// encrypted with the given `pgp_key`. This is only populated when creating a new
        /// key and `pgp_key` is supplied
        /// </summary>
        [Input("privateKeyEncrypted")]
        public Input<string>? PrivateKeyEncrypted { get; set; }

        /// <summary>
        /// The MD5 public key fingerprint for the encrypted
        /// private key. This is only populated when creating a new key and `pgp_key` is supplied
        /// </summary>
        [Input("privateKeyFingerprint")]
        public Input<string>? PrivateKeyFingerprint { get; set; }

        /// <summary>
        /// The output format of the private key. TYPE_GOOGLE_CREDENTIALS_FILE is the default output format.
        /// </summary>
        [Input("privateKeyType")]
        public Input<string>? PrivateKeyType { get; set; }

        /// <summary>
        /// The public key, base64 encoded
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// The output format of the public key requested. X509_PEM is the default output format.
        /// </summary>
        [Input("publicKeyType")]
        public Input<string>? PublicKeyType { get; set; }

        /// <summary>
        /// The Service account id of the Key Pair. This can be a string in the format
        /// `{ACCOUNT}` or `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`, where `{ACCOUNT}` is the email address or
        /// unique id of the service account. If the `{ACCOUNT}` syntax is used, the project will be inferred from the account.
        /// </summary>
        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        /// <summary>
        /// The key can be used after this timestamp. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("validAfter")]
        public Input<string>? ValidAfter { get; set; }

        /// <summary>
        /// The key can be used before this timestamp.
        /// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("validBefore")]
        public Input<string>? ValidBefore { get; set; }

        public KeyState()
        {
        }
    }
}
