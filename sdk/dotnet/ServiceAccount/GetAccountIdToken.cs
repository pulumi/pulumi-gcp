// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ServiceAccount
{
    public static class GetAccountIdToken
    {
        public static Task<GetAccountIdTokenResult> InvokeAsync(GetAccountIdTokenArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountIdTokenResult>("gcp:serviceAccount/getAccountIdToken:getAccountIdToken", args ?? new GetAccountIdTokenArgs(), options.WithDefaults());

        public static Output<GetAccountIdTokenResult> Invoke(GetAccountIdTokenInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountIdTokenResult>("gcp:serviceAccount/getAccountIdToken:getAccountIdToken", args ?? new GetAccountIdTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountIdTokenArgs : global::Pulumi.InvokeArgs
    {
        [Input("delegates")]
        private List<string>? _delegates;

        /// <summary>
        /// Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.   Used only when using impersonation mode.
        /// </summary>
        public List<string> Delegates
        {
            get => _delegates ?? (_delegates = new List<string>());
            set => _delegates = value;
        }

        /// <summary>
        /// Include the verified email in the claim. Used only when using impersonation mode.
        /// </summary>
        [Input("includeEmail")]
        public bool? IncludeEmail { get; set; }

        /// <summary>
        /// The audience claim for the `id_token`.
        /// </summary>
        [Input("targetAudience", required: true)]
        public string TargetAudience { get; set; } = null!;

        /// <summary>
        /// The email of the service account being impersonated.  Used only when using impersonation mode.
        /// </summary>
        [Input("targetServiceAccount")]
        public string? TargetServiceAccount { get; set; }

        public GetAccountIdTokenArgs()
        {
        }
        public static new GetAccountIdTokenArgs Empty => new GetAccountIdTokenArgs();
    }

    public sealed class GetAccountIdTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("delegates")]
        private InputList<string>? _delegates;

        /// <summary>
        /// Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.   Used only when using impersonation mode.
        /// </summary>
        public InputList<string> Delegates
        {
            get => _delegates ?? (_delegates = new InputList<string>());
            set => _delegates = value;
        }

        /// <summary>
        /// Include the verified email in the claim. Used only when using impersonation mode.
        /// </summary>
        [Input("includeEmail")]
        public Input<bool>? IncludeEmail { get; set; }

        /// <summary>
        /// The audience claim for the `id_token`.
        /// </summary>
        [Input("targetAudience", required: true)]
        public Input<string> TargetAudience { get; set; } = null!;

        /// <summary>
        /// The email of the service account being impersonated.  Used only when using impersonation mode.
        /// </summary>
        [Input("targetServiceAccount")]
        public Input<string>? TargetServiceAccount { get; set; }

        public GetAccountIdTokenInvokeArgs()
        {
        }
        public static new GetAccountIdTokenInvokeArgs Empty => new GetAccountIdTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountIdTokenResult
    {
        public readonly ImmutableArray<string> Delegates;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The `id_token` representing the new generated identity.
        /// </summary>
        public readonly string IdToken;
        public readonly bool? IncludeEmail;
        public readonly string TargetAudience;
        public readonly string? TargetServiceAccount;

        [OutputConstructor]
        private GetAccountIdTokenResult(
            ImmutableArray<string> delegates,

            string id,

            string idToken,

            bool? includeEmail,

            string targetAudience,

            string? targetServiceAccount)
        {
            Delegates = delegates;
            Id = id;
            IdToken = idToken;
            IncludeEmail = includeEmail;
            TargetAudience = targetAudience;
            TargetServiceAccount = targetServiceAccount;
        }
    }
}
