// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ServiceAccount
{
    public static class GetAccountIdToken
    {
        /// <summary>
        /// This data source provides a Google OpenID Connect (`Oidc`) `IdToken`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
        /// 
        /// For more information see
        /// [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
        /// 
        /// ## Example Usage
        /// 
        /// ### ServiceAccount JSON Credential File.
        ///   `gcp.serviceaccount.getAccountIdToken` will use the configured provider credentials
        /// 
        ///   ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var oidc = Gcp.ServiceAccount.GetAccountIdToken.Invoke(new()
        ///     {
        ///         TargetAudience = "https://foo.bar/",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["oidcToken"] = oidc.Apply(getAccountIdTokenResult =&gt; getAccountIdTokenResult.IdToken),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Service Account Impersonation.
        ///   `gcp.serviceaccount.getAccountIdToken` will use background impersonated credentials provided by `gcp.serviceaccount.getAccountAccessToken`.
        /// 
        ///   Note: to use the following, you must grant `TargetServiceAccount` the
        ///   `roles/iam.serviceAccountTokenCreator` role on itself.
        /// 
        ///   ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var impersonated = Gcp.ServiceAccount.GetAccountAccessToken.Invoke(new()
        ///     {
        ///         TargetServiceAccount = "impersonated-account@project.iam.gserviceaccount.com",
        ///         Delegates = new() { },
        ///         Scopes = new[]
        ///         {
        ///             "userinfo-email",
        ///             "cloud-platform",
        ///         },
        ///         Lifetime = "300s",
        ///     });
        /// 
        ///     var oidc = Gcp.ServiceAccount.GetAccountIdToken.Invoke(new()
        ///     {
        ///         TargetServiceAccount = "impersonated-account@project.iam.gserviceaccount.com",
        ///         Delegates = new() { },
        ///         IncludeEmail = true,
        ///         TargetAudience = "https://foo.bar/",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["oidcToken"] = oidc.Apply(getAccountIdTokenResult =&gt; getAccountIdTokenResult.IdToken),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Invoking Cloud Run Endpoint
        /// 
        ///   The following configuration will invoke [Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service) endpoint where the service account for the provider has been granted `roles/run.invoker` role previously.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// using Http = Pulumi.Http;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var oidc = Gcp.ServiceAccount.GetAccountIdToken.Invoke(new()
        ///     {
        ///         TargetAudience = "https://your.cloud.run.app/",
        ///     });
        /// 
        ///     var cloudrun = Http.GetHttp.Invoke(new()
        ///     {
        ///         Url = "https://your.cloud.run.app/",
        ///         RequestHeaders = 
        ///         {
        ///             { "Authorization", $"Bearer {oidc.Apply(getAccountIdTokenResult =&gt; getAccountIdTokenResult.IdToken)}" },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["cloudRunResponse"] = cloudrun.Apply(getHttpResult =&gt; getHttpResult.Body),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccountIdTokenResult> InvokeAsync(GetAccountIdTokenArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountIdTokenResult>("gcp:serviceaccount/getAccountIdToken:getAccountIdToken", args ?? new GetAccountIdTokenArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides a Google OpenID Connect (`Oidc`) `IdToken`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
        /// 
        /// For more information see
        /// [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
        /// 
        /// ## Example Usage
        /// 
        /// ### ServiceAccount JSON Credential File.
        ///   `gcp.serviceaccount.getAccountIdToken` will use the configured provider credentials
        /// 
        ///   ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var oidc = Gcp.ServiceAccount.GetAccountIdToken.Invoke(new()
        ///     {
        ///         TargetAudience = "https://foo.bar/",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["oidcToken"] = oidc.Apply(getAccountIdTokenResult =&gt; getAccountIdTokenResult.IdToken),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Service Account Impersonation.
        ///   `gcp.serviceaccount.getAccountIdToken` will use background impersonated credentials provided by `gcp.serviceaccount.getAccountAccessToken`.
        /// 
        ///   Note: to use the following, you must grant `TargetServiceAccount` the
        ///   `roles/iam.serviceAccountTokenCreator` role on itself.
        /// 
        ///   ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var impersonated = Gcp.ServiceAccount.GetAccountAccessToken.Invoke(new()
        ///     {
        ///         TargetServiceAccount = "impersonated-account@project.iam.gserviceaccount.com",
        ///         Delegates = new() { },
        ///         Scopes = new[]
        ///         {
        ///             "userinfo-email",
        ///             "cloud-platform",
        ///         },
        ///         Lifetime = "300s",
        ///     });
        /// 
        ///     var oidc = Gcp.ServiceAccount.GetAccountIdToken.Invoke(new()
        ///     {
        ///         TargetServiceAccount = "impersonated-account@project.iam.gserviceaccount.com",
        ///         Delegates = new() { },
        ///         IncludeEmail = true,
        ///         TargetAudience = "https://foo.bar/",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["oidcToken"] = oidc.Apply(getAccountIdTokenResult =&gt; getAccountIdTokenResult.IdToken),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Invoking Cloud Run Endpoint
        /// 
        ///   The following configuration will invoke [Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service) endpoint where the service account for the provider has been granted `roles/run.invoker` role previously.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// using Http = Pulumi.Http;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var oidc = Gcp.ServiceAccount.GetAccountIdToken.Invoke(new()
        ///     {
        ///         TargetAudience = "https://your.cloud.run.app/",
        ///     });
        /// 
        ///     var cloudrun = Http.GetHttp.Invoke(new()
        ///     {
        ///         Url = "https://your.cloud.run.app/",
        ///         RequestHeaders = 
        ///         {
        ///             { "Authorization", $"Bearer {oidc.Apply(getAccountIdTokenResult =&gt; getAccountIdTokenResult.IdToken)}" },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["cloudRunResponse"] = cloudrun.Apply(getHttpResult =&gt; getHttpResult.Body),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountIdTokenResult> Invoke(GetAccountIdTokenInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountIdTokenResult>("gcp:serviceaccount/getAccountIdToken:getAccountIdToken", args ?? new GetAccountIdTokenInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides a Google OpenID Connect (`Oidc`) `IdToken`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
        /// 
        /// For more information see
        /// [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
        /// 
        /// ## Example Usage
        /// 
        /// ### ServiceAccount JSON Credential File.
        ///   `gcp.serviceaccount.getAccountIdToken` will use the configured provider credentials
        /// 
        ///   ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var oidc = Gcp.ServiceAccount.GetAccountIdToken.Invoke(new()
        ///     {
        ///         TargetAudience = "https://foo.bar/",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["oidcToken"] = oidc.Apply(getAccountIdTokenResult =&gt; getAccountIdTokenResult.IdToken),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Service Account Impersonation.
        ///   `gcp.serviceaccount.getAccountIdToken` will use background impersonated credentials provided by `gcp.serviceaccount.getAccountAccessToken`.
        /// 
        ///   Note: to use the following, you must grant `TargetServiceAccount` the
        ///   `roles/iam.serviceAccountTokenCreator` role on itself.
        /// 
        ///   ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var impersonated = Gcp.ServiceAccount.GetAccountAccessToken.Invoke(new()
        ///     {
        ///         TargetServiceAccount = "impersonated-account@project.iam.gserviceaccount.com",
        ///         Delegates = new() { },
        ///         Scopes = new[]
        ///         {
        ///             "userinfo-email",
        ///             "cloud-platform",
        ///         },
        ///         Lifetime = "300s",
        ///     });
        /// 
        ///     var oidc = Gcp.ServiceAccount.GetAccountIdToken.Invoke(new()
        ///     {
        ///         TargetServiceAccount = "impersonated-account@project.iam.gserviceaccount.com",
        ///         Delegates = new() { },
        ///         IncludeEmail = true,
        ///         TargetAudience = "https://foo.bar/",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["oidcToken"] = oidc.Apply(getAccountIdTokenResult =&gt; getAccountIdTokenResult.IdToken),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Invoking Cloud Run Endpoint
        /// 
        ///   The following configuration will invoke [Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service) endpoint where the service account for the provider has been granted `roles/run.invoker` role previously.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// using Http = Pulumi.Http;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var oidc = Gcp.ServiceAccount.GetAccountIdToken.Invoke(new()
        ///     {
        ///         TargetAudience = "https://your.cloud.run.app/",
        ///     });
        /// 
        ///     var cloudrun = Http.GetHttp.Invoke(new()
        ///     {
        ///         Url = "https://your.cloud.run.app/",
        ///         RequestHeaders = 
        ///         {
        ///             { "Authorization", $"Bearer {oidc.Apply(getAccountIdTokenResult =&gt; getAccountIdTokenResult.IdToken)}" },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["cloudRunResponse"] = cloudrun.Apply(getHttpResult =&gt; getHttpResult.Body),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountIdTokenResult> Invoke(GetAccountIdTokenInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountIdTokenResult>("gcp:serviceaccount/getAccountIdToken:getAccountIdToken", args ?? new GetAccountIdTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountIdTokenArgs : global::Pulumi.InvokeArgs
    {
        [Input("delegates")]
        private List<string>? _delegates;

        /// <summary>
        /// Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.   Used only when using impersonation mode.
        /// </summary>
        public List<string> Delegates
        {
            get => _delegates ?? (_delegates = new List<string>());
            set => _delegates = value;
        }

        /// <summary>
        /// Include the verified email in the claim. Used only when using impersonation mode.
        /// </summary>
        [Input("includeEmail")]
        public bool? IncludeEmail { get; set; }

        /// <summary>
        /// The audience claim for the `IdToken`.
        /// </summary>
        [Input("targetAudience", required: true)]
        public string TargetAudience { get; set; } = null!;

        /// <summary>
        /// The email of the service account being impersonated.  Used only when using impersonation mode.
        /// </summary>
        [Input("targetServiceAccount")]
        public string? TargetServiceAccount { get; set; }

        public GetAccountIdTokenArgs()
        {
        }
        public static new GetAccountIdTokenArgs Empty => new GetAccountIdTokenArgs();
    }

    public sealed class GetAccountIdTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("delegates")]
        private InputList<string>? _delegates;

        /// <summary>
        /// Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.   Used only when using impersonation mode.
        /// </summary>
        public InputList<string> Delegates
        {
            get => _delegates ?? (_delegates = new InputList<string>());
            set => _delegates = value;
        }

        /// <summary>
        /// Include the verified email in the claim. Used only when using impersonation mode.
        /// </summary>
        [Input("includeEmail")]
        public Input<bool>? IncludeEmail { get; set; }

        /// <summary>
        /// The audience claim for the `IdToken`.
        /// </summary>
        [Input("targetAudience", required: true)]
        public Input<string> TargetAudience { get; set; } = null!;

        /// <summary>
        /// The email of the service account being impersonated.  Used only when using impersonation mode.
        /// </summary>
        [Input("targetServiceAccount")]
        public Input<string>? TargetServiceAccount { get; set; }

        public GetAccountIdTokenInvokeArgs()
        {
        }
        public static new GetAccountIdTokenInvokeArgs Empty => new GetAccountIdTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountIdTokenResult
    {
        public readonly ImmutableArray<string> Delegates;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The `IdToken` representing the new generated identity.
        /// </summary>
        public readonly string IdToken;
        public readonly bool? IncludeEmail;
        public readonly string TargetAudience;
        public readonly string? TargetServiceAccount;

        [OutputConstructor]
        private GetAccountIdTokenResult(
            ImmutableArray<string> delegates,

            string id,

            string idToken,

            bool? includeEmail,

            string targetAudience,

            string? targetServiceAccount)
        {
            Delegates = delegates;
            Id = id;
            IdToken = idToken;
            IncludeEmail = includeEmail;
            TargetAudience = targetAudience;
            TargetServiceAccount = targetServiceAccount;
        }
    }
}
