// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ServiceAccount
{
    public static class GetAccountJwt
    {
        /// <summary>
        /// This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `target_service_account`.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.ServiceAccount.GetAccountJwt.Invoke(new()
        ///     {
        ///         TargetServiceAccount = "impersonated-account@project.iam.gserviceaccount.com",
        ///         Payload = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["foo"] = "bar",
        ///             ["sub"] = "subject",
        ///         }),
        ///         ExpiresIn = 60,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["jwt"] = foo.Apply(getAccountJwtResult =&gt; getAccountJwtResult.Jwt),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAccountJwtResult> InvokeAsync(GetAccountJwtArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountJwtResult>("gcp:serviceAccount/getAccountJwt:getAccountJwt", args ?? new GetAccountJwtArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `target_service_account`.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.ServiceAccount.GetAccountJwt.Invoke(new()
        ///     {
        ///         TargetServiceAccount = "impersonated-account@project.iam.gserviceaccount.com",
        ///         Payload = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["foo"] = "bar",
        ///             ["sub"] = "subject",
        ///         }),
        ///         ExpiresIn = 60,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["jwt"] = foo.Apply(getAccountJwtResult =&gt; getAccountJwtResult.Jwt),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAccountJwtResult> Invoke(GetAccountJwtInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountJwtResult>("gcp:serviceAccount/getAccountJwt:getAccountJwt", args ?? new GetAccountJwtInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountJwtArgs : global::Pulumi.InvokeArgs
    {
        [Input("delegates")]
        private List<string>? _delegates;

        /// <summary>
        /// Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.
        /// </summary>
        public List<string> Delegates
        {
            get => _delegates ?? (_delegates = new List<string>());
            set => _delegates = value;
        }

        /// <summary>
        /// Number of seconds until the JWT expires. If set and non-zero an `exp` claim will be added to the payload derived from the current timestamp plus expires_in seconds.
        /// </summary>
        [Input("expiresIn")]
        public int? ExpiresIn { get; set; }

        /// <summary>
        /// The JSON-encoded JWT claims set to include in the self-signed JWT.
        /// </summary>
        [Input("payload", required: true)]
        public string Payload { get; set; } = null!;

        /// <summary>
        /// The email of the service account that will sign the JWT.
        /// </summary>
        [Input("targetServiceAccount", required: true)]
        public string TargetServiceAccount { get; set; } = null!;

        public GetAccountJwtArgs()
        {
        }
        public static new GetAccountJwtArgs Empty => new GetAccountJwtArgs();
    }

    public sealed class GetAccountJwtInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("delegates")]
        private InputList<string>? _delegates;

        /// <summary>
        /// Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.
        /// </summary>
        public InputList<string> Delegates
        {
            get => _delegates ?? (_delegates = new InputList<string>());
            set => _delegates = value;
        }

        /// <summary>
        /// Number of seconds until the JWT expires. If set and non-zero an `exp` claim will be added to the payload derived from the current timestamp plus expires_in seconds.
        /// </summary>
        [Input("expiresIn")]
        public Input<int>? ExpiresIn { get; set; }

        /// <summary>
        /// The JSON-encoded JWT claims set to include in the self-signed JWT.
        /// </summary>
        [Input("payload", required: true)]
        public Input<string> Payload { get; set; } = null!;

        /// <summary>
        /// The email of the service account that will sign the JWT.
        /// </summary>
        [Input("targetServiceAccount", required: true)]
        public Input<string> TargetServiceAccount { get; set; } = null!;

        public GetAccountJwtInvokeArgs()
        {
        }
        public static new GetAccountJwtInvokeArgs Empty => new GetAccountJwtInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountJwtResult
    {
        public readonly ImmutableArray<string> Delegates;
        public readonly int? ExpiresIn;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The signed JWT containing the JWT Claims Set from the `payload`.
        /// </summary>
        public readonly string Jwt;
        public readonly string Payload;
        public readonly string TargetServiceAccount;

        [OutputConstructor]
        private GetAccountJwtResult(
            ImmutableArray<string> delegates,

            int? expiresIn,

            string id,

            string jwt,

            string payload,

            string targetServiceAccount)
        {
            Delegates = delegates;
            ExpiresIn = expiresIn;
            Id = id;
            Jwt = jwt;
            Payload = payload;
            TargetServiceAccount = targetServiceAccount;
        }
    }
}
