// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Notebooks
{
    public static class GetRuntimeIamPolicy
    {
        /// <summary>
        /// Retrieves the current IAM policy data for runtime
        /// 
        /// 
        /// 
        /// ## example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Notebooks.GetRuntimeIamPolicy.Invoke(new()
        ///     {
        ///         Project = google_notebooks_runtime.Runtime.Project,
        ///         Location = google_notebooks_runtime.Runtime.Location,
        ///         RuntimeName = google_notebooks_runtime.Runtime.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRuntimeIamPolicyResult> InvokeAsync(GetRuntimeIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRuntimeIamPolicyResult>("gcp:notebooks/getRuntimeIamPolicy:getRuntimeIamPolicy", args ?? new GetRuntimeIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for runtime
        /// 
        /// 
        /// 
        /// ## example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.Notebooks.GetRuntimeIamPolicy.Invoke(new()
        ///     {
        ///         Project = google_notebooks_runtime.Runtime.Project,
        ///         Location = google_notebooks_runtime.Runtime.Location,
        ///         RuntimeName = google_notebooks_runtime.Runtime.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRuntimeIamPolicyResult> Invoke(GetRuntimeIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRuntimeIamPolicyResult>("gcp:notebooks/getRuntimeIamPolicy:getRuntimeIamPolicy", args ?? new GetRuntimeIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRuntimeIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A reference to the zone where the machine resides. Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("runtimeName", required: true)]
        public string RuntimeName { get; set; } = null!;

        public GetRuntimeIamPolicyArgs()
        {
        }
        public static new GetRuntimeIamPolicyArgs Empty => new GetRuntimeIamPolicyArgs();
    }

    public sealed class GetRuntimeIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A reference to the zone where the machine resides. Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("runtimeName", required: true)]
        public Input<string> RuntimeName { get; set; } = null!;

        public GetRuntimeIamPolicyInvokeArgs()
        {
        }
        public static new GetRuntimeIamPolicyInvokeArgs Empty => new GetRuntimeIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetRuntimeIamPolicyResult
    {
        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        /// <summary>
        /// (Required only by `gcp.notebooks.RuntimeIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        public readonly string PolicyData;
        public readonly string Project;
        public readonly string RuntimeName;

        [OutputConstructor]
        private GetRuntimeIamPolicyResult(
            string etag,

            string id,

            string location,

            string policyData,

            string project,

            string runtimeName)
        {
            Etag = etag;
            Id = id;
            Location = location;
            PolicyData = policyData;
            Project = project;
            RuntimeName = runtimeName;
        }
    }
}
