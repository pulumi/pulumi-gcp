// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Notebooks
{
    /// <summary>
    /// A Cloud AI Platform Notebook environment.
    /// 
    /// To get more information about Environment, see:
    /// 
    /// * [API documentation](https://cloud.google.com/ai-platform/notebooks/docs/reference/rest)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/ai-platform-notebooks)
    /// 
    /// ## Example Usage
    /// ### Notebook Environment Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var environment = new Gcp.Notebooks.Environment("environment", new Gcp.Notebooks.EnvironmentArgs
    ///         {
    ///             ContainerImage = new Gcp.Notebooks.Inputs.EnvironmentContainerImageArgs
    ///             {
    ///                 Repository = "gcr.io/deeplearning-platform-release/base-cpu",
    ///             },
    ///             Location = "us-west1-a",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Environment can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:notebooks/environment:Environment default projects/{{project}}/locations/{{location}}/environments/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:notebooks/environment:Environment default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:notebooks/environment:Environment default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:notebooks/environment:Environment")]
    public partial class Environment : Pulumi.CustomResource
    {
        /// <summary>
        /// Use a container image to start the notebook instance.
        /// Structure is documented below.
        /// </summary>
        [Output("containerImage")]
        public Output<Outputs.EnvironmentContainerImage?> ContainerImage { get; private set; } = null!;

        /// <summary>
        /// Instance creation time
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// A brief description of this environment.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Display name of this environment for the UI.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// A reference to the zone where the machine resides.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name specified for the Environment instance.
        /// Format: projects/{project_id}/locations/{location}/environments/{environmentId}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Path to a Bash script that automatically runs after a notebook instance fully boots up.
        /// The path must be a URL or Cloud Storage path. Example: "gs://path-to-file/file-name"
        /// </summary>
        [Output("postStartupScript")]
        public Output<string?> PostStartupScript { get; private set; } = null!;

        /// <summary>
        /// The name of the Google Cloud project that this VM image belongs to.
        /// Format: projects/{project_id}
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Use a Compute Engine VM image to start the notebook instance.
        /// Structure is documented below.
        /// </summary>
        [Output("vmImage")]
        public Output<Outputs.EnvironmentVmImage?> VmImage { get; private set; } = null!;


        /// <summary>
        /// Create a Environment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Environment(string name, EnvironmentArgs args, CustomResourceOptions? options = null)
            : base("gcp:notebooks/environment:Environment", name, args ?? new EnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Environment(string name, Input<string> id, EnvironmentState? state = null, CustomResourceOptions? options = null)
            : base("gcp:notebooks/environment:Environment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Environment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Environment Get(string name, Input<string> id, EnvironmentState? state = null, CustomResourceOptions? options = null)
        {
            return new Environment(name, id, state, options);
        }
    }

    public sealed class EnvironmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Use a container image to start the notebook instance.
        /// Structure is documented below.
        /// </summary>
        [Input("containerImage")]
        public Input<Inputs.EnvironmentContainerImageArgs>? ContainerImage { get; set; }

        /// <summary>
        /// A brief description of this environment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name of this environment for the UI.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A reference to the zone where the machine resides.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name specified for the Environment instance.
        /// Format: projects/{project_id}/locations/{location}/environments/{environmentId}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Path to a Bash script that automatically runs after a notebook instance fully boots up.
        /// The path must be a URL or Cloud Storage path. Example: "gs://path-to-file/file-name"
        /// </summary>
        [Input("postStartupScript")]
        public Input<string>? PostStartupScript { get; set; }

        /// <summary>
        /// The name of the Google Cloud project that this VM image belongs to.
        /// Format: projects/{project_id}
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Use a Compute Engine VM image to start the notebook instance.
        /// Structure is documented below.
        /// </summary>
        [Input("vmImage")]
        public Input<Inputs.EnvironmentVmImageArgs>? VmImage { get; set; }

        public EnvironmentArgs()
        {
        }
    }

    public sealed class EnvironmentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Use a container image to start the notebook instance.
        /// Structure is documented below.
        /// </summary>
        [Input("containerImage")]
        public Input<Inputs.EnvironmentContainerImageGetArgs>? ContainerImage { get; set; }

        /// <summary>
        /// Instance creation time
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// A brief description of this environment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name of this environment for the UI.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A reference to the zone where the machine resides.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name specified for the Environment instance.
        /// Format: projects/{project_id}/locations/{location}/environments/{environmentId}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Path to a Bash script that automatically runs after a notebook instance fully boots up.
        /// The path must be a URL or Cloud Storage path. Example: "gs://path-to-file/file-name"
        /// </summary>
        [Input("postStartupScript")]
        public Input<string>? PostStartupScript { get; set; }

        /// <summary>
        /// The name of the Google Cloud project that this VM image belongs to.
        /// Format: projects/{project_id}
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Use a Compute Engine VM image to start the notebook instance.
        /// Structure is documented below.
        /// </summary>
        [Input("vmImage")]
        public Input<Inputs.EnvironmentVmImageGetArgs>? VmImage { get; set; }

        public EnvironmentState()
        {
        }
    }
}
