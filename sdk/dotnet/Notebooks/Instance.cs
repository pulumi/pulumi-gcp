// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Notebooks
{
    /// <summary>
    /// A Cloud AI Platform Notebook instance.
    /// 
    /// &gt; **Note:** Due to limitations of the Notebooks Instance API, many fields
    /// in this resource do not properly detect drift. These fields will also not
    /// appear in state once imported.
    /// 
    /// To get more information about Instance, see:
    /// 
    /// * [API documentation](https://cloud.google.com/ai-platform/notebooks/docs/reference/rest)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/ai-platform-notebooks)
    /// 
    /// ## Example Usage
    /// ### Notebook Instance Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Notebooks.Instance("instance", new()
    ///     {
    ///         Location = "us-west1-a",
    ///         MachineType = "e2-medium",
    ///         VmImage = new Gcp.Notebooks.Inputs.InstanceVmImageArgs
    ///         {
    ///             ImageFamily = "tf-latest-cpu",
    ///             Project = "deeplearning-platform-release",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Notebook Instance Basic Container
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Notebooks.Instance("instance", new()
    ///     {
    ///         ContainerImage = new Gcp.Notebooks.Inputs.InstanceContainerImageArgs
    ///         {
    ///             Repository = "gcr.io/deeplearning-platform-release/base-cpu",
    ///             Tag = "latest",
    ///         },
    ///         Location = "us-west1-a",
    ///         MachineType = "e2-medium",
    ///         Metadata = 
    ///         {
    ///             { "proxy-mode", "service_account" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Notebook Instance Basic Gpu
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Notebooks.Instance("instance", new()
    ///     {
    ///         AcceleratorConfig = new Gcp.Notebooks.Inputs.InstanceAcceleratorConfigArgs
    ///         {
    ///             CoreCount = 1,
    ///             Type = "NVIDIA_TESLA_T4",
    ///         },
    ///         InstallGpuDriver = true,
    ///         Location = "us-west1-a",
    ///         MachineType = "n1-standard-1",
    ///         VmImage = new Gcp.Notebooks.Inputs.InstanceVmImageArgs
    ///         {
    ///             ImageFamily = "tf-latest-gpu",
    ///             Project = "deeplearning-platform-release",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Notebook Instance Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myNetwork = Gcp.Compute.GetNetwork.Invoke(new()
    ///     {
    ///         Name = "default",
    ///     });
    /// 
    ///     var mySubnetwork = Gcp.Compute.GetSubnetwork.Invoke(new()
    ///     {
    ///         Name = "default",
    ///         Region = "us-central1",
    ///     });
    /// 
    ///     var instance = new Gcp.Notebooks.Instance("instance", new()
    ///     {
    ///         Location = "us-central1-a",
    ///         MachineType = "e2-medium",
    ///         VmImage = new Gcp.Notebooks.Inputs.InstanceVmImageArgs
    ///         {
    ///             Project = "deeplearning-platform-release",
    ///             ImageFamily = "tf-latest-cpu",
    ///         },
    ///         InstanceOwners = new[]
    ///         {
    ///             "admin@hashicorptest.com",
    ///         },
    ///         ServiceAccount = "emailAddress:my@service-account.com",
    ///         InstallGpuDriver = true,
    ///         BootDiskType = "PD_SSD",
    ///         BootDiskSizeGb = 110,
    ///         NoPublicIp = true,
    ///         NoProxyAccess = true,
    ///         Network = myNetwork.Apply(getNetworkResult =&gt; getNetworkResult.Id),
    ///         Subnet = mySubnetwork.Apply(getSubnetworkResult =&gt; getSubnetworkResult.Id),
    ///         Labels = 
    ///         {
    ///             { "k", "val" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Instance can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:notebooks/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:notebooks/instance:Instance default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:notebooks/instance:Instance default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:notebooks/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The hardware accelerator used on this instance. If you use accelerators,
        /// make sure that your configuration has enough vCPUs and memory to support the
        /// machineType you have selected.
        /// Structure is documented below.
        /// </summary>
        [Output("acceleratorConfig")]
        public Output<Outputs.InstanceAcceleratorConfig?> AcceleratorConfig { get; private set; } = null!;

        /// <summary>
        /// The size of the boot disk in GB attached to this instance,
        /// up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB.
        /// If not specified, this defaults to 100.
        /// </summary>
        [Output("bootDiskSizeGb")]
        public Output<int?> BootDiskSizeGb { get; private set; } = null!;

        /// <summary>
        /// Possible disk types for notebook instances.
        /// Possible values are `DISK_TYPE_UNSPECIFIED`, `PD_STANDARD`, `PD_SSD`, `PD_BALANCED`, and `PD_EXTREME`.
        /// </summary>
        [Output("bootDiskType")]
        public Output<string?> BootDiskType { get; private set; } = null!;

        /// <summary>
        /// Use a container image to start the notebook instance.
        /// Structure is documented below.
        /// </summary>
        [Output("containerImage")]
        public Output<Outputs.InstanceContainerImage?> ContainerImage { get; private set; } = null!;

        /// <summary>
        /// Instance creation time
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Specify a custom Cloud Storage path where the GPU driver is stored.
        /// If not specified, we'll automatically choose from official GPU drivers.
        /// </summary>
        [Output("customGpuDriverPath")]
        public Output<string?> CustomGpuDriverPath { get; private set; } = null!;

        /// <summary>
        /// The size of the data disk in GB attached to this instance,
        /// up to a maximum of 64000 GB (64 TB).
        /// You can choose the size of the data disk based on how big your notebooks and data are.
        /// If not specified, this defaults to 100.
        /// </summary>
        [Output("dataDiskSizeGb")]
        public Output<int?> DataDiskSizeGb { get; private set; } = null!;

        /// <summary>
        /// Possible disk types for notebook instances.
        /// Possible values are `DISK_TYPE_UNSPECIFIED`, `PD_STANDARD`, `PD_SSD`, `PD_BALANCED`, and `PD_EXTREME`.
        /// </summary>
        [Output("dataDiskType")]
        public Output<string?> DataDiskType { get; private set; } = null!;

        /// <summary>
        /// Disk encryption method used on the boot and data disks, defaults to GMEK.
        /// Possible values are `DISK_ENCRYPTION_UNSPECIFIED`, `GMEK`, and `CMEK`.
        /// </summary>
        [Output("diskEncryption")]
        public Output<string?> DiskEncryption { get; private set; } = null!;

        /// <summary>
        /// Whether the end user authorizes Google Cloud to install GPU driver
        /// on this instance. If this field is empty or set to false, the GPU driver
        /// won't be installed. Only applicable to instances with GPUs.
        /// </summary>
        [Output("installGpuDriver")]
        public Output<bool?> InstallGpuDriver { get; private set; } = null!;

        /// <summary>
        /// The list of owners of this instance after creation.
        /// Format: alias@example.com.
        /// Currently supports one owner only.
        /// If not specified, all of the service account users of
        /// your VM instance's service account can use the instance.
        /// </summary>
        [Output("instanceOwners")]
        public Output<ImmutableArray<string>> InstanceOwners { get; private set; } = null!;

        /// <summary>
        /// The KMS key used to encrypt the disks, only applicable if diskEncryption is CMEK.
        /// Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
        /// </summary>
        [Output("kmsKey")]
        public Output<string?> KmsKey { get; private set; } = null!;

        /// <summary>
        /// Labels to apply to this instance. These can be later modified by the setLabels method.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// A reference to the zone where the machine resides.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A reference to a machine type which defines VM kind.
        /// </summary>
        [Output("machineType")]
        public Output<string> MachineType { get; private set; } = null!;

        /// <summary>
        /// Custom metadata to apply to this instance.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name specified for the Notebook instance.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the VPC that this instance is in.
        /// Format: projects/{project_id}/global/networks/{network_id}
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// The type of vNIC driver.
        /// Possible values are `UNSPECIFIED_NIC_TYPE`, `VIRTIO_NET`, and `GVNIC`.
        /// </summary>
        [Output("nicType")]
        public Output<string?> NicType { get; private set; } = null!;

        /// <summary>
        /// The notebook instance will not register with the proxy..
        /// </summary>
        [Output("noProxyAccess")]
        public Output<bool?> NoProxyAccess { get; private set; } = null!;

        /// <summary>
        /// No public IP will be assigned to this instance.
        /// </summary>
        [Output("noPublicIp")]
        public Output<bool?> NoPublicIp { get; private set; } = null!;

        /// <summary>
        /// If true, the data disk will not be auto deleted when deleting the instance.
        /// </summary>
        [Output("noRemoveDataDisk")]
        public Output<bool?> NoRemoveDataDisk { get; private set; } = null!;

        /// <summary>
        /// Path to a Bash script that automatically runs after a
        /// notebook instance fully boots up. The path must be a URL
        /// or Cloud Storage path (gs://path-to-file/file-name).
        /// </summary>
        [Output("postStartupScript")]
        public Output<string?> PostStartupScript { get; private set; } = null!;

        /// <summary>
        /// The name of the Google Cloud project that this VM image belongs to.
        /// Format: projects/{project_id}
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The proxy endpoint that is used to access the Jupyter notebook.
        /// </summary>
        [Output("proxyUri")]
        public Output<string> ProxyUri { get; private set; } = null!;

        /// <summary>
        /// Reservation Affinity for consuming Zonal reservation.
        /// Structure is documented below.
        /// </summary>
        [Output("reservationAffinity")]
        public Output<Outputs.InstanceReservationAffinity?> ReservationAffinity { get; private set; } = null!;

        /// <summary>
        /// The service account on this instance, giving access to other
        /// Google Cloud services. You can use any service account within
        /// the same project, but you must have the service account user
        /// permission to use the instance. If not specified,
        /// the Compute Engine default service account is used.
        /// </summary>
        [Output("serviceAccount")]
        public Output<string> ServiceAccount { get; private set; } = null!;

        /// <summary>
        /// Optional. The URIs of service account scopes to be included in Compute Engine instances.
        /// If not specified, the following scopes are defined:
        /// - https://www.googleapis.com/auth/cloud-platform
        /// - https://www.googleapis.com/auth/userinfo.email
        /// </summary>
        [Output("serviceAccountScopes")]
        public Output<ImmutableArray<string>> ServiceAccountScopes { get; private set; } = null!;

        /// <summary>
        /// A set of Shielded Instance options. Check [Images using supported Shielded VM features]
        /// Not all combinations are valid
        /// Structure is documented below.
        /// </summary>
        [Output("shieldedInstanceConfig")]
        public Output<Outputs.InstanceShieldedInstanceConfig> ShieldedInstanceConfig { get; private set; } = null!;

        /// <summary>
        /// The state of this instance.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The name of the subnet that this instance is in.
        /// Format: projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}
        /// </summary>
        [Output("subnet")]
        public Output<string> Subnet { get; private set; } = null!;

        /// <summary>
        /// The Compute Engine tags to add to instance.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Instance update time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Use a Compute Engine VM image to start the notebook instance.
        /// Structure is documented below.
        /// </summary>
        [Output("vmImage")]
        public Output<Outputs.InstanceVmImage?> VmImage { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("gcp:notebooks/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:notebooks/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hardware accelerator used on this instance. If you use accelerators,
        /// make sure that your configuration has enough vCPUs and memory to support the
        /// machineType you have selected.
        /// Structure is documented below.
        /// </summary>
        [Input("acceleratorConfig")]
        public Input<Inputs.InstanceAcceleratorConfigArgs>? AcceleratorConfig { get; set; }

        /// <summary>
        /// The size of the boot disk in GB attached to this instance,
        /// up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB.
        /// If not specified, this defaults to 100.
        /// </summary>
        [Input("bootDiskSizeGb")]
        public Input<int>? BootDiskSizeGb { get; set; }

        /// <summary>
        /// Possible disk types for notebook instances.
        /// Possible values are `DISK_TYPE_UNSPECIFIED`, `PD_STANDARD`, `PD_SSD`, `PD_BALANCED`, and `PD_EXTREME`.
        /// </summary>
        [Input("bootDiskType")]
        public Input<string>? BootDiskType { get; set; }

        /// <summary>
        /// Use a container image to start the notebook instance.
        /// Structure is documented below.
        /// </summary>
        [Input("containerImage")]
        public Input<Inputs.InstanceContainerImageArgs>? ContainerImage { get; set; }

        /// <summary>
        /// Instance creation time
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Specify a custom Cloud Storage path where the GPU driver is stored.
        /// If not specified, we'll automatically choose from official GPU drivers.
        /// </summary>
        [Input("customGpuDriverPath")]
        public Input<string>? CustomGpuDriverPath { get; set; }

        /// <summary>
        /// The size of the data disk in GB attached to this instance,
        /// up to a maximum of 64000 GB (64 TB).
        /// You can choose the size of the data disk based on how big your notebooks and data are.
        /// If not specified, this defaults to 100.
        /// </summary>
        [Input("dataDiskSizeGb")]
        public Input<int>? DataDiskSizeGb { get; set; }

        /// <summary>
        /// Possible disk types for notebook instances.
        /// Possible values are `DISK_TYPE_UNSPECIFIED`, `PD_STANDARD`, `PD_SSD`, `PD_BALANCED`, and `PD_EXTREME`.
        /// </summary>
        [Input("dataDiskType")]
        public Input<string>? DataDiskType { get; set; }

        /// <summary>
        /// Disk encryption method used on the boot and data disks, defaults to GMEK.
        /// Possible values are `DISK_ENCRYPTION_UNSPECIFIED`, `GMEK`, and `CMEK`.
        /// </summary>
        [Input("diskEncryption")]
        public Input<string>? DiskEncryption { get; set; }

        /// <summary>
        /// Whether the end user authorizes Google Cloud to install GPU driver
        /// on this instance. If this field is empty or set to false, the GPU driver
        /// won't be installed. Only applicable to instances with GPUs.
        /// </summary>
        [Input("installGpuDriver")]
        public Input<bool>? InstallGpuDriver { get; set; }

        [Input("instanceOwners")]
        private InputList<string>? _instanceOwners;

        /// <summary>
        /// The list of owners of this instance after creation.
        /// Format: alias@example.com.
        /// Currently supports one owner only.
        /// If not specified, all of the service account users of
        /// your VM instance's service account can use the instance.
        /// </summary>
        public InputList<string> InstanceOwners
        {
            get => _instanceOwners ?? (_instanceOwners = new InputList<string>());
            set => _instanceOwners = value;
        }

        /// <summary>
        /// The KMS key used to encrypt the disks, only applicable if diskEncryption is CMEK.
        /// Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
        /// </summary>
        [Input("kmsKey")]
        public Input<string>? KmsKey { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to apply to this instance. These can be later modified by the setLabels method.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// A reference to the zone where the machine resides.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// A reference to a machine type which defines VM kind.
        /// </summary>
        [Input("machineType", required: true)]
        public Input<string> MachineType { get; set; } = null!;

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Custom metadata to apply to this instance.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name specified for the Notebook instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the VPC that this instance is in.
        /// Format: projects/{project_id}/global/networks/{network_id}
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The type of vNIC driver.
        /// Possible values are `UNSPECIFIED_NIC_TYPE`, `VIRTIO_NET`, and `GVNIC`.
        /// </summary>
        [Input("nicType")]
        public Input<string>? NicType { get; set; }

        /// <summary>
        /// The notebook instance will not register with the proxy..
        /// </summary>
        [Input("noProxyAccess")]
        public Input<bool>? NoProxyAccess { get; set; }

        /// <summary>
        /// No public IP will be assigned to this instance.
        /// </summary>
        [Input("noPublicIp")]
        public Input<bool>? NoPublicIp { get; set; }

        /// <summary>
        /// If true, the data disk will not be auto deleted when deleting the instance.
        /// </summary>
        [Input("noRemoveDataDisk")]
        public Input<bool>? NoRemoveDataDisk { get; set; }

        /// <summary>
        /// Path to a Bash script that automatically runs after a
        /// notebook instance fully boots up. The path must be a URL
        /// or Cloud Storage path (gs://path-to-file/file-name).
        /// </summary>
        [Input("postStartupScript")]
        public Input<string>? PostStartupScript { get; set; }

        /// <summary>
        /// The name of the Google Cloud project that this VM image belongs to.
        /// Format: projects/{project_id}
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Reservation Affinity for consuming Zonal reservation.
        /// Structure is documented below.
        /// </summary>
        [Input("reservationAffinity")]
        public Input<Inputs.InstanceReservationAffinityArgs>? ReservationAffinity { get; set; }

        /// <summary>
        /// The service account on this instance, giving access to other
        /// Google Cloud services. You can use any service account within
        /// the same project, but you must have the service account user
        /// permission to use the instance. If not specified,
        /// the Compute Engine default service account is used.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        [Input("serviceAccountScopes")]
        private InputList<string>? _serviceAccountScopes;

        /// <summary>
        /// Optional. The URIs of service account scopes to be included in Compute Engine instances.
        /// If not specified, the following scopes are defined:
        /// - https://www.googleapis.com/auth/cloud-platform
        /// - https://www.googleapis.com/auth/userinfo.email
        /// </summary>
        public InputList<string> ServiceAccountScopes
        {
            get => _serviceAccountScopes ?? (_serviceAccountScopes = new InputList<string>());
            set => _serviceAccountScopes = value;
        }

        /// <summary>
        /// A set of Shielded Instance options. Check [Images using supported Shielded VM features]
        /// Not all combinations are valid
        /// Structure is documented below.
        /// </summary>
        [Input("shieldedInstanceConfig")]
        public Input<Inputs.InstanceShieldedInstanceConfigArgs>? ShieldedInstanceConfig { get; set; }

        /// <summary>
        /// The name of the subnet that this instance is in.
        /// Format: projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The Compute Engine tags to add to instance.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Instance update time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// Use a Compute Engine VM image to start the notebook instance.
        /// Structure is documented below.
        /// </summary>
        [Input("vmImage")]
        public Input<Inputs.InstanceVmImageArgs>? VmImage { get; set; }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hardware accelerator used on this instance. If you use accelerators,
        /// make sure that your configuration has enough vCPUs and memory to support the
        /// machineType you have selected.
        /// Structure is documented below.
        /// </summary>
        [Input("acceleratorConfig")]
        public Input<Inputs.InstanceAcceleratorConfigGetArgs>? AcceleratorConfig { get; set; }

        /// <summary>
        /// The size of the boot disk in GB attached to this instance,
        /// up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB.
        /// If not specified, this defaults to 100.
        /// </summary>
        [Input("bootDiskSizeGb")]
        public Input<int>? BootDiskSizeGb { get; set; }

        /// <summary>
        /// Possible disk types for notebook instances.
        /// Possible values are `DISK_TYPE_UNSPECIFIED`, `PD_STANDARD`, `PD_SSD`, `PD_BALANCED`, and `PD_EXTREME`.
        /// </summary>
        [Input("bootDiskType")]
        public Input<string>? BootDiskType { get; set; }

        /// <summary>
        /// Use a container image to start the notebook instance.
        /// Structure is documented below.
        /// </summary>
        [Input("containerImage")]
        public Input<Inputs.InstanceContainerImageGetArgs>? ContainerImage { get; set; }

        /// <summary>
        /// Instance creation time
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Specify a custom Cloud Storage path where the GPU driver is stored.
        /// If not specified, we'll automatically choose from official GPU drivers.
        /// </summary>
        [Input("customGpuDriverPath")]
        public Input<string>? CustomGpuDriverPath { get; set; }

        /// <summary>
        /// The size of the data disk in GB attached to this instance,
        /// up to a maximum of 64000 GB (64 TB).
        /// You can choose the size of the data disk based on how big your notebooks and data are.
        /// If not specified, this defaults to 100.
        /// </summary>
        [Input("dataDiskSizeGb")]
        public Input<int>? DataDiskSizeGb { get; set; }

        /// <summary>
        /// Possible disk types for notebook instances.
        /// Possible values are `DISK_TYPE_UNSPECIFIED`, `PD_STANDARD`, `PD_SSD`, `PD_BALANCED`, and `PD_EXTREME`.
        /// </summary>
        [Input("dataDiskType")]
        public Input<string>? DataDiskType { get; set; }

        /// <summary>
        /// Disk encryption method used on the boot and data disks, defaults to GMEK.
        /// Possible values are `DISK_ENCRYPTION_UNSPECIFIED`, `GMEK`, and `CMEK`.
        /// </summary>
        [Input("diskEncryption")]
        public Input<string>? DiskEncryption { get; set; }

        /// <summary>
        /// Whether the end user authorizes Google Cloud to install GPU driver
        /// on this instance. If this field is empty or set to false, the GPU driver
        /// won't be installed. Only applicable to instances with GPUs.
        /// </summary>
        [Input("installGpuDriver")]
        public Input<bool>? InstallGpuDriver { get; set; }

        [Input("instanceOwners")]
        private InputList<string>? _instanceOwners;

        /// <summary>
        /// The list of owners of this instance after creation.
        /// Format: alias@example.com.
        /// Currently supports one owner only.
        /// If not specified, all of the service account users of
        /// your VM instance's service account can use the instance.
        /// </summary>
        public InputList<string> InstanceOwners
        {
            get => _instanceOwners ?? (_instanceOwners = new InputList<string>());
            set => _instanceOwners = value;
        }

        /// <summary>
        /// The KMS key used to encrypt the disks, only applicable if diskEncryption is CMEK.
        /// Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
        /// </summary>
        [Input("kmsKey")]
        public Input<string>? KmsKey { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to apply to this instance. These can be later modified by the setLabels method.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// A reference to the zone where the machine resides.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A reference to a machine type which defines VM kind.
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Custom metadata to apply to this instance.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name specified for the Notebook instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the VPC that this instance is in.
        /// Format: projects/{project_id}/global/networks/{network_id}
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The type of vNIC driver.
        /// Possible values are `UNSPECIFIED_NIC_TYPE`, `VIRTIO_NET`, and `GVNIC`.
        /// </summary>
        [Input("nicType")]
        public Input<string>? NicType { get; set; }

        /// <summary>
        /// The notebook instance will not register with the proxy..
        /// </summary>
        [Input("noProxyAccess")]
        public Input<bool>? NoProxyAccess { get; set; }

        /// <summary>
        /// No public IP will be assigned to this instance.
        /// </summary>
        [Input("noPublicIp")]
        public Input<bool>? NoPublicIp { get; set; }

        /// <summary>
        /// If true, the data disk will not be auto deleted when deleting the instance.
        /// </summary>
        [Input("noRemoveDataDisk")]
        public Input<bool>? NoRemoveDataDisk { get; set; }

        /// <summary>
        /// Path to a Bash script that automatically runs after a
        /// notebook instance fully boots up. The path must be a URL
        /// or Cloud Storage path (gs://path-to-file/file-name).
        /// </summary>
        [Input("postStartupScript")]
        public Input<string>? PostStartupScript { get; set; }

        /// <summary>
        /// The name of the Google Cloud project that this VM image belongs to.
        /// Format: projects/{project_id}
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The proxy endpoint that is used to access the Jupyter notebook.
        /// </summary>
        [Input("proxyUri")]
        public Input<string>? ProxyUri { get; set; }

        /// <summary>
        /// Reservation Affinity for consuming Zonal reservation.
        /// Structure is documented below.
        /// </summary>
        [Input("reservationAffinity")]
        public Input<Inputs.InstanceReservationAffinityGetArgs>? ReservationAffinity { get; set; }

        /// <summary>
        /// The service account on this instance, giving access to other
        /// Google Cloud services. You can use any service account within
        /// the same project, but you must have the service account user
        /// permission to use the instance. If not specified,
        /// the Compute Engine default service account is used.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        [Input("serviceAccountScopes")]
        private InputList<string>? _serviceAccountScopes;

        /// <summary>
        /// Optional. The URIs of service account scopes to be included in Compute Engine instances.
        /// If not specified, the following scopes are defined:
        /// - https://www.googleapis.com/auth/cloud-platform
        /// - https://www.googleapis.com/auth/userinfo.email
        /// </summary>
        public InputList<string> ServiceAccountScopes
        {
            get => _serviceAccountScopes ?? (_serviceAccountScopes = new InputList<string>());
            set => _serviceAccountScopes = value;
        }

        /// <summary>
        /// A set of Shielded Instance options. Check [Images using supported Shielded VM features]
        /// Not all combinations are valid
        /// Structure is documented below.
        /// </summary>
        [Input("shieldedInstanceConfig")]
        public Input<Inputs.InstanceShieldedInstanceConfigGetArgs>? ShieldedInstanceConfig { get; set; }

        /// <summary>
        /// The state of this instance.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The name of the subnet that this instance is in.
        /// Format: projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The Compute Engine tags to add to instance.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Instance update time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// Use a Compute Engine VM image to start the notebook instance.
        /// Structure is documented below.
        /// </summary>
        [Input("vmImage")]
        public Input<Inputs.InstanceVmImageGetArgs>? VmImage { get; set; }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
