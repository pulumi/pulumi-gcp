// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Appengine
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/app_engine_domain_mapping.html.markdown.
    /// </summary>
    public partial class DomainMapping : Pulumi.CustomResource
    {
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("overrideStrategy")]
        public Output<string?> OverrideStrategy { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        [Output("resourceRecords")]
        public Output<ImmutableArray<Outputs.DomainMappingResourceRecords>> ResourceRecords { get; private set; } = null!;

        [Output("sslSettings")]
        public Output<Outputs.DomainMappingSslSettings?> SslSettings { get; private set; } = null!;


        /// <summary>
        /// Create a DomainMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainMapping(string name, DomainMappingArgs args, CustomResourceOptions? options = null)
            : base("gcp:appengine/domainMapping:DomainMapping", name, args, MakeResourceOptions(options, ""))
        {
        }

        private DomainMapping(string name, Input<string> id, DomainMappingState? state = null, CustomResourceOptions? options = null)
            : base("gcp:appengine/domainMapping:DomainMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainMapping Get(string name, Input<string> id, DomainMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainMapping(name, id, state, options);
        }
    }

    public sealed class DomainMappingArgs : Pulumi.ResourceArgs
    {
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        [Input("overrideStrategy")]
        public Input<string>? OverrideStrategy { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("sslSettings")]
        public Input<Inputs.DomainMappingSslSettingsArgs>? SslSettings { get; set; }

        public DomainMappingArgs()
        {
        }
    }

    public sealed class DomainMappingState : Pulumi.ResourceArgs
    {
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("overrideStrategy")]
        public Input<string>? OverrideStrategy { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("resourceRecords")]
        private InputList<Inputs.DomainMappingResourceRecordsGetArgs>? _resourceRecords;
        public InputList<Inputs.DomainMappingResourceRecordsGetArgs> ResourceRecords
        {
            get => _resourceRecords ?? (_resourceRecords = new InputList<Inputs.DomainMappingResourceRecordsGetArgs>());
            set => _resourceRecords = value;
        }

        [Input("sslSettings")]
        public Input<Inputs.DomainMappingSslSettingsGetArgs>? SslSettings { get; set; }

        public DomainMappingState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class DomainMappingResourceRecordsGetArgs : Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rrdata")]
        public Input<string>? Rrdata { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public DomainMappingResourceRecordsGetArgs()
        {
        }
    }

    public sealed class DomainMappingSslSettingsArgs : Pulumi.ResourceArgs
    {
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        [Input("pendingManagedCertificateId")]
        public Input<string>? PendingManagedCertificateId { get; set; }

        [Input("sslManagementType")]
        public Input<string>? SslManagementType { get; set; }

        public DomainMappingSslSettingsArgs()
        {
        }
    }

    public sealed class DomainMappingSslSettingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        [Input("pendingManagedCertificateId")]
        public Input<string>? PendingManagedCertificateId { get; set; }

        [Input("sslManagementType")]
        public Input<string>? SslManagementType { get; set; }

        public DomainMappingSslSettingsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class DomainMappingResourceRecords
    {
        public readonly string? Name;
        public readonly string? Rrdata;
        public readonly string? Type;

        [OutputConstructor]
        private DomainMappingResourceRecords(
            string? name,
            string? rrdata,
            string? type)
        {
            Name = name;
            Rrdata = rrdata;
            Type = type;
        }
    }

    [OutputType]
    public sealed class DomainMappingSslSettings
    {
        public readonly string? CertificateId;
        public readonly string PendingManagedCertificateId;
        public readonly string? SslManagementType;

        [OutputConstructor]
        private DomainMappingSslSettings(
            string? certificateId,
            string pendingManagedCertificateId,
            string? sslManagementType)
        {
            CertificateId = certificateId;
            PendingManagedCertificateId = pendingManagedCertificateId;
            SslManagementType = sslManagementType;
        }
    }
    }
}
