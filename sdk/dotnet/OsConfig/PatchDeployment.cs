// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.OsConfig
{
    /// <summary>
    /// Patch deployments are configurations that individual patch jobs use to complete a patch.
    /// These configurations include instance filter, package repository settings, and a schedule.
    /// 
    /// To get more information about PatchDeployment, see:
    /// 
    /// * [API documentation](https://cloud.google.com/compute/docs/osconfig/rest)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/compute/docs/os-patch-management)
    /// 
    /// ## Example Usage
    /// ### Os Config Patch Deployment Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var patch = new Gcp.OsConfig.PatchDeployment("patch", new()
    ///     {
    ///         InstanceFilter = new Gcp.OsConfig.Inputs.PatchDeploymentInstanceFilterArgs
    ///         {
    ///             All = true,
    ///         },
    ///         OneTimeSchedule = new Gcp.OsConfig.Inputs.PatchDeploymentOneTimeScheduleArgs
    ///         {
    ///             ExecuteTime = "2999-10-10T10:10:10.045123456Z",
    ///         },
    ///         PatchDeploymentId = "patch-deploy",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Os Config Patch Deployment Daily
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var patch = new Gcp.OsConfig.PatchDeployment("patch", new()
    ///     {
    ///         InstanceFilter = new Gcp.OsConfig.Inputs.PatchDeploymentInstanceFilterArgs
    ///         {
    ///             All = true,
    ///         },
    ///         PatchDeploymentId = "patch-deploy",
    ///         RecurringSchedule = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleArgs
    ///         {
    ///             TimeOfDay = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleTimeOfDayArgs
    ///             {
    ///                 Hours = 0,
    ///                 Minutes = 30,
    ///                 Nanos = 20,
    ///                 Seconds = 30,
    ///             },
    ///             TimeZone = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleTimeZoneArgs
    ///             {
    ///                 Id = "America/New_York",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Os Config Patch Deployment Daily Midnight
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var patch = new Gcp.OsConfig.PatchDeployment("patch", new()
    ///     {
    ///         InstanceFilter = new Gcp.OsConfig.Inputs.PatchDeploymentInstanceFilterArgs
    ///         {
    ///             All = true,
    ///         },
    ///         PatchDeploymentId = "patch-deploy",
    ///         RecurringSchedule = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleArgs
    ///         {
    ///             TimeOfDay = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleTimeOfDayArgs
    ///             {
    ///                 Hours = 0,
    ///                 Minutes = 0,
    ///                 Nanos = 0,
    ///                 Seconds = 0,
    ///             },
    ///             TimeZone = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleTimeZoneArgs
    ///             {
    ///                 Id = "America/New_York",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Os Config Patch Deployment Instance
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myImage = Gcp.Compute.GetImage.Invoke(new()
    ///     {
    ///         Family = "debian-11",
    ///         Project = "debian-cloud",
    ///     });
    /// 
    ///     var foobar = new Gcp.Compute.Instance("foobar", new()
    ///     {
    ///         MachineType = "e2-medium",
    ///         Zone = "us-central1-a",
    ///         CanIpForward = false,
    ///         Tags = new[]
    ///         {
    ///             "foo",
    ///             "bar",
    ///         },
    ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
    ///         {
    ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
    ///             {
    ///                 Image = myImage.Apply(getImageResult =&gt; getImageResult.SelfLink),
    ///             },
    ///         },
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
    ///             {
    ///                 Network = "default",
    ///             },
    ///         },
    ///         Metadata = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    ///     var patch = new Gcp.OsConfig.PatchDeployment("patch", new()
    ///     {
    ///         PatchDeploymentId = "patch-deploy",
    ///         InstanceFilter = new Gcp.OsConfig.Inputs.PatchDeploymentInstanceFilterArgs
    ///         {
    ///             Instances = new[]
    ///             {
    ///                 foobar.Id,
    ///             },
    ///         },
    ///         PatchConfig = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigArgs
    ///         {
    ///             Yum = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigYumArgs
    ///             {
    ///                 Security = true,
    ///                 Minimal = true,
    ///                 Excludes = new[]
    ///                 {
    ///                     "bash",
    ///                 },
    ///             },
    ///         },
    ///         RecurringSchedule = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleArgs
    ///         {
    ///             TimeZone = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleTimeZoneArgs
    ///             {
    ///                 Id = "America/New_York",
    ///             },
    ///             TimeOfDay = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleTimeOfDayArgs
    ///             {
    ///                 Hours = 0,
    ///                 Minutes = 30,
    ///                 Seconds = 30,
    ///                 Nanos = 20,
    ///             },
    ///             Monthly = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleMonthlyArgs
    ///             {
    ///                 MonthDay = 1,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Os Config Patch Deployment Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var patch = new Gcp.OsConfig.PatchDeployment("patch", new()
    ///     {
    ///         Duration = "10s",
    ///         InstanceFilter = new Gcp.OsConfig.Inputs.PatchDeploymentInstanceFilterArgs
    ///         {
    ///             GroupLabels = new[]
    ///             {
    ///                 new Gcp.OsConfig.Inputs.PatchDeploymentInstanceFilterGroupLabelArgs
    ///                 {
    ///                     Labels = 
    ///                     {
    ///                         { "app", "web" },
    ///                         { "env", "dev" },
    ///                     },
    ///                 },
    ///             },
    ///             InstanceNamePrefixes = new[]
    ///             {
    ///                 "test-",
    ///             },
    ///             Zones = new[]
    ///             {
    ///                 "us-central1-a",
    ///                 "us-central-1c",
    ///             },
    ///         },
    ///         PatchConfig = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigArgs
    ///         {
    ///             Apt = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigAptArgs
    ///             {
    ///                 Excludes = new[]
    ///                 {
    ///                     "python",
    ///                 },
    ///                 Type = "DIST",
    ///             },
    ///             Goo = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigGooArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///             MigInstancesAllowed = true,
    ///             PostStep = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigPostStepArgs
    ///             {
    ///                 LinuxExecStepConfig = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs
    ///                 {
    ///                     GcsObject = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs
    ///                     {
    ///                         Bucket = "my-patch-scripts",
    ///                         GenerationNumber = "1523477886880",
    ///                         Object = "linux/post_patch_script",
    ///                     },
    ///                 },
    ///                 WindowsExecStepConfig = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs
    ///                 {
    ///                     GcsObject = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs
    ///                     {
    ///                         Bucket = "my-patch-scripts",
    ///                         GenerationNumber = "135920493447",
    ///                         Object = "windows/post_patch_script.ps1",
    ///                     },
    ///                     Interpreter = "POWERSHELL",
    ///                 },
    ///             },
    ///             PreStep = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigPreStepArgs
    ///             {
    ///                 LinuxExecStepConfig = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs
    ///                 {
    ///                     AllowedSuccessCodes = new[]
    ///                     {
    ///                         0,
    ///                         3,
    ///                     },
    ///                     LocalPath = "/tmp/pre_patch_script.sh",
    ///                 },
    ///                 WindowsExecStepConfig = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs
    ///                 {
    ///                     AllowedSuccessCodes = new[]
    ///                     {
    ///                         0,
    ///                         2,
    ///                     },
    ///                     Interpreter = "SHELL",
    ///                     LocalPath = "C:\\Users\\user\\pre-patch-script.cmd",
    ///                 },
    ///             },
    ///             RebootConfig = "ALWAYS",
    ///             WindowsUpdate = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigWindowsUpdateArgs
    ///             {
    ///                 Classifications = new[]
    ///                 {
    ///                     "CRITICAL",
    ///                     "SECURITY",
    ///                     "UPDATE",
    ///                 },
    ///             },
    ///             Yum = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigYumArgs
    ///             {
    ///                 Excludes = new[]
    ///                 {
    ///                     "bash",
    ///                 },
    ///                 Minimal = true,
    ///                 Security = true,
    ///             },
    ///             Zypper = new Gcp.OsConfig.Inputs.PatchDeploymentPatchConfigZypperArgs
    ///             {
    ///                 Categories = new[]
    ///                 {
    ///                     "security",
    ///                 },
    ///             },
    ///         },
    ///         PatchDeploymentId = "patch-deploy",
    ///         RecurringSchedule = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleArgs
    ///         {
    ///             Monthly = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleMonthlyArgs
    ///             {
    ///                 WeekDayOfMonth = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs
    ///                 {
    ///                     DayOfWeek = "TUESDAY",
    ///                     WeekOrdinal = -1,
    ///                 },
    ///             },
    ///             TimeOfDay = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleTimeOfDayArgs
    ///             {
    ///                 Hours = 0,
    ///                 Minutes = 30,
    ///                 Nanos = 20,
    ///                 Seconds = 30,
    ///             },
    ///             TimeZone = new Gcp.OsConfig.Inputs.PatchDeploymentRecurringScheduleTimeZoneArgs
    ///             {
    ///                 Id = "America/New_York",
    ///             },
    ///         },
    ///         Rollout = new Gcp.OsConfig.Inputs.PatchDeploymentRolloutArgs
    ///         {
    ///             DisruptionBudget = new Gcp.OsConfig.Inputs.PatchDeploymentRolloutDisruptionBudgetArgs
    ///             {
    ///                 Fixed = 1,
    ///             },
    ///             Mode = "ZONE_BY_ZONE",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// PatchDeployment can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:osconfig/patchDeployment:PatchDeployment default projects/{{project}}/patchDeployments/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:osconfig/patchDeployment:PatchDeployment default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:osconfig/patchDeployment:PatchDeployment default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:osconfig/patchDeployment:PatchDeployment")]
    public partial class PatchDeployment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time the patch deployment was created. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu" format,
        /// accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Description of the patch deployment. Length of the description is limited to 1024 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Duration of the patch. After the duration ends, the patch times out.
        /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s"
        /// </summary>
        [Output("duration")]
        public Output<string?> Duration { get; private set; } = null!;

        /// <summary>
        /// VM instances to patch.
        /// Structure is documented below.
        /// </summary>
        [Output("instanceFilter")]
        public Output<Outputs.PatchDeploymentInstanceFilter> InstanceFilter { get; private set; } = null!;

        /// <summary>
        /// -
        /// The time the last patch job ran successfully.
        /// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("lastExecuteTime")]
        public Output<string> LastExecuteTime { get; private set; } = null!;

        /// <summary>
        /// Unique name for the patch deployment resource in a project. The patch deployment name is in the form:
        /// projects/{project_id}/patchDeployments/{patchDeploymentId}.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Schedule a one-time execution.
        /// Structure is documented below.
        /// </summary>
        [Output("oneTimeSchedule")]
        public Output<Outputs.PatchDeploymentOneTimeSchedule?> OneTimeSchedule { get; private set; } = null!;

        /// <summary>
        /// Patch configuration that is applied.
        /// Structure is documented below.
        /// </summary>
        [Output("patchConfig")]
        public Output<Outputs.PatchDeploymentPatchConfig?> PatchConfig { get; private set; } = null!;

        /// <summary>
        /// A name for the patch deployment in the project. When creating a name the following rules apply:
        /// * Must contain only lowercase letters, numbers, and hyphens.
        /// * Must start with a letter.
        /// * Must be between 1-63 characters.
        /// * Must end with a number or a letter.
        /// * Must be unique within the project.
        /// </summary>
        [Output("patchDeploymentId")]
        public Output<string> PatchDeploymentId { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Schedule recurring executions.
        /// Structure is documented below.
        /// </summary>
        [Output("recurringSchedule")]
        public Output<Outputs.PatchDeploymentRecurringSchedule?> RecurringSchedule { get; private set; } = null!;

        /// <summary>
        /// Rollout strategy of the patch job.
        /// Structure is documented below.
        /// </summary>
        [Output("rollout")]
        public Output<Outputs.PatchDeploymentRollout?> Rollout { get; private set; } = null!;

        /// <summary>
        /// Time the patch deployment was last updated. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu"
        /// format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a PatchDeployment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PatchDeployment(string name, PatchDeploymentArgs args, CustomResourceOptions? options = null)
            : base("gcp:osconfig/patchDeployment:PatchDeployment", name, args ?? new PatchDeploymentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PatchDeployment(string name, Input<string> id, PatchDeploymentState? state = null, CustomResourceOptions? options = null)
            : base("gcp:osconfig/patchDeployment:PatchDeployment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PatchDeployment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PatchDeployment Get(string name, Input<string> id, PatchDeploymentState? state = null, CustomResourceOptions? options = null)
        {
            return new PatchDeployment(name, id, state, options);
        }
    }

    public sealed class PatchDeploymentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the patch deployment. Length of the description is limited to 1024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Duration of the patch. After the duration ends, the patch times out.
        /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s"
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        /// <summary>
        /// VM instances to patch.
        /// Structure is documented below.
        /// </summary>
        [Input("instanceFilter", required: true)]
        public Input<Inputs.PatchDeploymentInstanceFilterArgs> InstanceFilter { get; set; } = null!;

        /// <summary>
        /// Schedule a one-time execution.
        /// Structure is documented below.
        /// </summary>
        [Input("oneTimeSchedule")]
        public Input<Inputs.PatchDeploymentOneTimeScheduleArgs>? OneTimeSchedule { get; set; }

        /// <summary>
        /// Patch configuration that is applied.
        /// Structure is documented below.
        /// </summary>
        [Input("patchConfig")]
        public Input<Inputs.PatchDeploymentPatchConfigArgs>? PatchConfig { get; set; }

        /// <summary>
        /// A name for the patch deployment in the project. When creating a name the following rules apply:
        /// * Must contain only lowercase letters, numbers, and hyphens.
        /// * Must start with a letter.
        /// * Must be between 1-63 characters.
        /// * Must end with a number or a letter.
        /// * Must be unique within the project.
        /// </summary>
        [Input("patchDeploymentId", required: true)]
        public Input<string> PatchDeploymentId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Schedule recurring executions.
        /// Structure is documented below.
        /// </summary>
        [Input("recurringSchedule")]
        public Input<Inputs.PatchDeploymentRecurringScheduleArgs>? RecurringSchedule { get; set; }

        /// <summary>
        /// Rollout strategy of the patch job.
        /// Structure is documented below.
        /// </summary>
        [Input("rollout")]
        public Input<Inputs.PatchDeploymentRolloutArgs>? Rollout { get; set; }

        public PatchDeploymentArgs()
        {
        }
        public static new PatchDeploymentArgs Empty => new PatchDeploymentArgs();
    }

    public sealed class PatchDeploymentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time the patch deployment was created. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu" format,
        /// accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Description of the patch deployment. Length of the description is limited to 1024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Duration of the patch. After the duration ends, the patch times out.
        /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s"
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        /// <summary>
        /// VM instances to patch.
        /// Structure is documented below.
        /// </summary>
        [Input("instanceFilter")]
        public Input<Inputs.PatchDeploymentInstanceFilterGetArgs>? InstanceFilter { get; set; }

        /// <summary>
        /// -
        /// The time the last patch job ran successfully.
        /// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("lastExecuteTime")]
        public Input<string>? LastExecuteTime { get; set; }

        /// <summary>
        /// Unique name for the patch deployment resource in a project. The patch deployment name is in the form:
        /// projects/{project_id}/patchDeployments/{patchDeploymentId}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Schedule a one-time execution.
        /// Structure is documented below.
        /// </summary>
        [Input("oneTimeSchedule")]
        public Input<Inputs.PatchDeploymentOneTimeScheduleGetArgs>? OneTimeSchedule { get; set; }

        /// <summary>
        /// Patch configuration that is applied.
        /// Structure is documented below.
        /// </summary>
        [Input("patchConfig")]
        public Input<Inputs.PatchDeploymentPatchConfigGetArgs>? PatchConfig { get; set; }

        /// <summary>
        /// A name for the patch deployment in the project. When creating a name the following rules apply:
        /// * Must contain only lowercase letters, numbers, and hyphens.
        /// * Must start with a letter.
        /// * Must be between 1-63 characters.
        /// * Must end with a number or a letter.
        /// * Must be unique within the project.
        /// </summary>
        [Input("patchDeploymentId")]
        public Input<string>? PatchDeploymentId { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Schedule recurring executions.
        /// Structure is documented below.
        /// </summary>
        [Input("recurringSchedule")]
        public Input<Inputs.PatchDeploymentRecurringScheduleGetArgs>? RecurringSchedule { get; set; }

        /// <summary>
        /// Rollout strategy of the patch job.
        /// Structure is documented below.
        /// </summary>
        [Input("rollout")]
        public Input<Inputs.PatchDeploymentRolloutGetArgs>? Rollout { get; set; }

        /// <summary>
        /// Time the patch deployment was last updated. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu"
        /// format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public PatchDeploymentState()
        {
        }
        public static new PatchDeploymentState Empty => new PatchDeploymentState();
    }
}
