// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.OsConfig.Outputs
{

    [OutputType]
    public sealed class V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload
    {
        /// <summary>
        /// Indicates that this revision has been successfully rolled out in this zone
        /// and new VMs will be assigned OS policies from this revision.
        /// 
        /// For a given OS policy assignment, there is only one revision with a value
        /// of 'true' for this field.
        /// </summary>
        public readonly bool? Baseline;
        /// <summary>
        /// Indicates that this revision deletes the OS policy assignment.
        /// </summary>
        public readonly bool? Deleted;
        /// <summary>
        /// OS policy assignment description.
        /// Length of the description is limited to 1024 characters.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// This checksum is computed by the server based on the value of other
        /// fields, and may be sent on update and delete requests to ensure the
        /// client has an up-to-date value before proceeding.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Filters to select target VMs for an assignment.
        /// 
        /// If more than one filter criteria is specified below, a VM will be selected
        /// if and only if it satisfies all of them.
        /// </summary>
        public readonly Outputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilter InstanceFilter;
        /// <summary>
        /// Identifier. In form of
        /// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
        /// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
        /// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// List of OS policies to be applied to the VMs.
        /// </summary>
        public readonly ImmutableArray<Outputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicy> OsPolicies;
        /// <summary>
        /// Set to true, if the there are ongoing changes being applied by the
        /// orchestrator.
        /// </summary>
        public readonly bool? Reconciling;
        /// <summary>
        /// The timestamp that the revision was created.
        /// </summary>
        public readonly string? RevisionCreateTime;
        /// <summary>
        /// The assignment revision ID
        /// A new revision is committed whenever a rollout is triggered for a OS policy
        /// assignment
        /// </summary>
        public readonly string? RevisionId;
        /// <summary>
        /// Message to configure the rollout at the zonal level for the OS policy
        /// assignment.
        /// </summary>
        public readonly Outputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRollout Rollout;
        /// <summary>
        /// OS policy assignment rollout state
        /// Possible values:
        /// IN_PROGRESS
        /// CANCELLING
        /// CANCELLED
        /// SUCCEEDED
        /// </summary>
        public readonly string? RolloutState;
        /// <summary>
        /// Server generated unique id for the OS policy assignment resource.
        /// </summary>
        public readonly string? Uid;

        [OutputConstructor]
        private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload(
            bool? baseline,

            bool? deleted,

            string? description,

            string? etag,

            Outputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilter instanceFilter,

            string? name,

            ImmutableArray<Outputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicy> osPolicies,

            bool? reconciling,

            string? revisionCreateTime,

            string? revisionId,

            Outputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRollout rollout,

            string? rolloutState,

            string? uid)
        {
            Baseline = baseline;
            Deleted = deleted;
            Description = description;
            Etag = etag;
            InstanceFilter = instanceFilter;
            Name = name;
            OsPolicies = osPolicies;
            Reconciling = reconciling;
            RevisionCreateTime = revisionCreateTime;
            RevisionId = revisionId;
            Rollout = rollout;
            RolloutState = rolloutState;
            Uid = uid;
        }
    }
}
