// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.OsConfig.Inputs
{

    public sealed class V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("errors")]
        private InputList<Inputs.V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateErrorGetArgs>? _errors;

        /// <summary>
        /// (Output)
        /// The `Status` type defines a logical error model that is suitable for
        /// different programming environments, including REST APIs and RPC APIs. It is
        /// used by [gRPC](https://github.com/grpc). Each `Status` message contains
        /// three pieces of data: error code, error message, and error details.
        /// You can find out more about this error model and how to work with it in the
        /// [API Design Guide](https://cloud.google.com/apis/design/errors).
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateErrorGetArgs> Errors
        {
            get => _errors ?? (_errors = new InputList<Inputs.V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateErrorGetArgs>());
            set => _errors = value;
        }

        /// <summary>
        /// (Output)
        /// Number of orchestration actions which failed so far. For more details,
        /// query the Cloud Logs.
        /// </summary>
        [Input("failedActions")]
        public Input<string>? FailedActions { get; set; }

        /// <summary>
        /// (Output)
        /// Finish time of the wave iteration.
        /// </summary>
        [Input("finishTime")]
        public Input<string>? FinishTime { get; set; }

        /// <summary>
        /// (Output)
        /// Overall number of actions done by the orchestrator so far.
        /// </summary>
        [Input("performedActions")]
        public Input<string>? PerformedActions { get; set; }

        /// <summary>
        /// (Output)
        /// An estimated percentage of the progress. Number between 0 and 100.
        /// </summary>
        [Input("progress")]
        public Input<double>? Progress { get; set; }

        /// <summary>
        /// (Output)
        /// Handle to the Progressive Rollouts API rollout resource, which contains
        /// detailed information about a particular orchestration iteration.
        /// </summary>
        [Input("rolloutResource")]
        public Input<string>? RolloutResource { get; set; }

        /// <summary>
        /// (Output)
        /// Start time of the wave iteration.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// (Output)
        /// State of the iteration.
        /// Possible values:
        /// PROCESSING
        /// COMPLETED
        /// FAILED
        /// CANCELLED
        /// UNKNOWN
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateGetArgs()
        {
        }
        public static new V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateGetArgs Empty => new V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateGetArgs();
    }
}
