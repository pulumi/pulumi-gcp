// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.OsConfig.Inputs
{

    public sealed class GuestPoliciesRecipeGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("artifacts")]
        private InputList<Inputs.GuestPoliciesRecipeArtifactGetArgs>? _artifacts;

        /// <summary>
        /// Resources available to be used in the steps in the recipe.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.GuestPoliciesRecipeArtifactGetArgs> Artifacts
        {
            get => _artifacts ?? (_artifacts = new InputList<Inputs.GuestPoliciesRecipeArtifactGetArgs>());
            set => _artifacts = value;
        }

        /// <summary>
        /// Default is INSTALLED. The desired state the agent should maintain for this recipe.
        /// INSTALLED: The software recipe is installed on the instance but won't be updated to new versions.
        /// INSTALLED_KEEP_UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version,
        /// if a higher version of the recipe is assigned to this instance.
        /// REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
        /// Default value is `INSTALLED`.
        /// Possible values are `INSTALLED`, `UPDATED`, and `REMOVED`.
        /// </summary>
        [Input("desiredState")]
        public Input<string>? DesiredState { get; set; }

        [Input("installSteps")]
        private InputList<Inputs.GuestPoliciesRecipeInstallStepGetArgs>? _installSteps;

        /// <summary>
        /// Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation.
        /// Any steps taken (including partially completed steps) are not rolled back.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.GuestPoliciesRecipeInstallStepGetArgs> InstallSteps
        {
            get => _installSteps ?? (_installSteps = new InputList<Inputs.GuestPoliciesRecipeInstallStepGetArgs>());
            set => _installSteps = value;
        }

        /// <summary>
        /// Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
        /// Names are also used to identify resources which helps to determine whether guest policies have conflicts.
        /// This means that requests to create multiple recipes with the same name and version are rejected since they
        /// could potentially have conflicting assignments.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("updateSteps")]
        private InputList<Inputs.GuestPoliciesRecipeUpdateStepGetArgs>? _updateSteps;

        /// <summary>
        /// Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe.
        /// Any steps taken (including partially completed steps) are not rolled back.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.GuestPoliciesRecipeUpdateStepGetArgs> UpdateSteps
        {
            get => _updateSteps ?? (_updateSteps = new InputList<Inputs.GuestPoliciesRecipeUpdateStepGetArgs>());
            set => _updateSteps = value;
        }

        /// <summary>
        /// The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public GuestPoliciesRecipeGetArgs()
        {
        }
        public static new GuestPoliciesRecipeGetArgs Empty => new GuestPoliciesRecipeGetArgs();
    }
}
