// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.OsConfig.Inputs
{

    public sealed class V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Output only. Indicates that this revision has been successfully rolled out in this zone
        /// and new VMs will be assigned OS policies from this revision.
        /// 
        /// For a given OS policy assignment, there is only one revision with a value
        /// of 'true' for this field.
        /// </summary>
        [Input("baseline")]
        public Input<bool>? Baseline { get; set; }

        /// <summary>
        /// Output only. Indicates that this revision deletes the OS policy assignment.
        /// </summary>
        [Input("deleted")]
        public Input<bool>? Deleted { get; set; }

        /// <summary>
        /// OS policy assignment description.
        /// Length of the description is limited to 1024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Output only. This checksum is computed by the server based on the value of other
        /// fields, and may be sent on update and delete requests to ensure the
        /// client has an up-to-date value before proceeding.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Filters to select target VMs for an assignment.
        /// 
        /// If more than one filter criteria is specified below, a VM will be selected
        /// if and only if it satisfies all of them.
        /// </summary>
        [Input("instanceFilter", required: true)]
        public Input<Inputs.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterGetArgs> InstanceFilter { get; set; } = null!;

        /// <summary>
        /// Immutable. Identifier. In form of
        /// * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
        /// * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
        /// * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("osPolicies", required: true)]
        private InputList<Inputs.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyGetArgs>? _osPolicies;

        /// <summary>
        /// Required. List of OS policies to be applied to the VMs.
        /// </summary>
        public InputList<Inputs.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyGetArgs> OsPolicies
        {
            get => _osPolicies ?? (_osPolicies = new InputList<Inputs.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyGetArgs>());
            set => _osPolicies = value;
        }

        /// <summary>
        /// Output only. Set to true, if the there are ongoing changes being applied by the
        /// orchestrator.
        /// </summary>
        [Input("reconciling")]
        public Input<bool>? Reconciling { get; set; }

        /// <summary>
        /// Output only. The timestamp that the revision was created.
        /// </summary>
        [Input("revisionCreateTime")]
        public Input<string>? RevisionCreateTime { get; set; }

        /// <summary>
        /// Output only. The assignment revision ID
        /// A new revision is committed whenever a rollout is triggered for a OS policy
        /// assignment
        /// </summary>
        [Input("revisionId")]
        public Input<string>? RevisionId { get; set; }

        /// <summary>
        /// Message to configure the rollout at the zonal level for the OS policy
        /// assignment.
        /// </summary>
        [Input("rollout", required: true)]
        public Input<Inputs.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutGetArgs> Rollout { get; set; } = null!;

        /// <summary>
        /// Output only. OS policy assignment rollout state
        /// Possible values:
        /// ROLLOUT_STATE_UNSPECIFIED
        /// IN_PROGRESS
        /// CANCELLING
        /// CANCELLED
        /// SUCCEEDED
        /// </summary>
        [Input("rolloutState")]
        public Input<string>? RolloutState { get; set; }

        /// <summary>
        /// Output only. Server generated unique id for the OS policy assignment resource.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadGetArgs()
        {
        }
        public static new V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadGetArgs Empty => new V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadGetArgs();
    }
}
