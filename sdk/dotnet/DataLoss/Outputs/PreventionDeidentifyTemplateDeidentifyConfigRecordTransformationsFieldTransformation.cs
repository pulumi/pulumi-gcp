// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataLoss.Outputs
{

    [OutputType]
    public sealed class PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformation
    {
        /// <summary>
        /// Only apply the transformation if the condition evaluates to true for the given RecordCondition. The conditions are allowed to reference fields that are not used in the actual transformation.
        /// Example Use Cases:
        /// - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range.
        /// - Redact a field if the date of birth field is greater than 85.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationCondition? Condition;
        /// <summary>
        /// Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId.
        /// FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationField> Fields;
        /// <summary>
        /// Apply the transformation to the entire field.
        /// The `primitive_transformation` block must only contain one argument, corresponding to the type of transformation.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformation PrimitiveTransformation;

        [OutputConstructor]
        private PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformation(
            Outputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationCondition? condition,

            ImmutableArray<Outputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationField> fields,

            Outputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformation primitiveTransformation)
        {
            Condition = condition;
            Fields = fields;
            PrimitiveTransformation = primitiveTransformation;
        }
    }
}
