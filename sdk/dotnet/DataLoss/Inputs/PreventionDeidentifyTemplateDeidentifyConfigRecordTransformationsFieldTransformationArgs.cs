// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataLoss.Inputs
{

    public sealed class PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only apply the transformation if the condition evaluates to true for the given RecordCondition. The conditions are allowed to reference fields that are not used in the actual transformation.
        /// Example Use Cases:
        /// - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range.
        /// - Redact a field if the date of birth field is greater than 85.
        /// Structure is documented below.
        /// </summary>
        [Input("condition")]
        public Input<Inputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationConditionArgs>? Condition { get; set; }

        [Input("fields", required: true)]
        private InputList<Inputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationFieldArgs>? _fields;

        /// <summary>
        /// Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId.
        /// FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationFieldArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationFieldArgs>());
            set => _fields = value;
        }

        /// <summary>
        /// Treat the contents of the field as free text, and selectively transform content that matches an InfoType.
        /// Only one of `PrimitiveTransformation` or `InfoTypeTransformations` must be specified.
        /// Structure is documented below.
        /// </summary>
        [Input("infoTypeTransformations")]
        public Input<Inputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationInfoTypeTransformationsArgs>? InfoTypeTransformations { get; set; }

        /// <summary>
        /// Apply the transformation to the entire field.
        /// The `PrimitiveTransformation` block must only contain one argument, corresponding to the type of transformation.
        /// Only one of `PrimitiveTransformation` or `InfoTypeTransformations` must be specified.
        /// Structure is documented below.
        /// </summary>
        [Input("primitiveTransformation")]
        public Input<Inputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationArgs>? PrimitiveTransformation { get; set; }

        public PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationArgs()
        {
        }
        public static new PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationArgs Empty => new PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationArgs();
    }
}
