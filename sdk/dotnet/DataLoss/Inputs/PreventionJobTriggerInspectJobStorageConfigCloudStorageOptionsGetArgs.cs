// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataLoss.Inputs
{

    public sealed class PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Max number of bytes to scan from a file. If a scanned file's size is bigger than this value
        /// then the rest of the bytes are omitted.
        /// </summary>
        [Input("bytesLimitPerFile")]
        public Input<int>? BytesLimitPerFile { get; set; }

        /// <summary>
        /// Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down.
        /// Must be between 0 and 100, inclusively. Both 0 and 100 means no limit.
        /// </summary>
        [Input("bytesLimitPerFilePercent")]
        public Input<int>? BytesLimitPerFilePercent { get; set; }

        /// <summary>
        /// Set of files to scan.
        /// Structure is documented below.
        /// </summary>
        [Input("fileSet", required: true)]
        public Input<Inputs.PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetGetArgs> FileSet { get; set; } = null!;

        [Input("fileTypes")]
        private InputList<string>? _fileTypes;

        /// <summary>
        /// List of file type groups to include in the scan. If empty, all files are scanned and available data
        /// format processors are applied. In addition, the binary content of the selected files is always scanned as well.
        /// Images are scanned only as binary if the specified region does not support image inspection and no fileTypes were specified.
        /// Each value may be one of `BINARY_FILE`, `TEXT_FILE`, `IMAGE`, `WORD`, `PDF`, `AVRO`, `CSV`, and `TSV`.
        /// </summary>
        public InputList<string> FileTypes
        {
            get => _fileTypes ?? (_fileTypes = new InputList<string>());
            set => _fileTypes = value;
        }

        /// <summary>
        /// Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down.
        /// Must be between 0 and 100, inclusively. Both 0 and 100 means no limit.
        /// </summary>
        [Input("filesLimitPercent")]
        public Input<int>? FilesLimitPercent { get; set; }

        /// <summary>
        /// How to sample bytes if not all bytes are scanned. Meaningful only when used in conjunction with bytesLimitPerFile.
        /// If not specified, scanning would start from the top.
        /// Possible values are `TOP` and `RANDOM_START`.
        /// </summary>
        [Input("sampleMethod")]
        public Input<string>? SampleMethod { get; set; }

        public PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsGetArgs()
        {
        }
        public static new PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsGetArgs Empty => new PreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsGetArgs();
    }
}
