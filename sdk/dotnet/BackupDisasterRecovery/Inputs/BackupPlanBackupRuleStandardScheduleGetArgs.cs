// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BackupDisasterRecovery.Inputs
{

    public sealed class BackupPlanBackupRuleStandardScheduleGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A BackupWindow defines the window of the day during which backup jobs will run. Jobs are queued at the beginning of the window and will be marked as
        /// `NOT_RUN` if they do not start by the end of the window.
        /// Structure is documented below.
        /// </summary>
        [Input("backupWindow")]
        public Input<Inputs.BackupPlanBackupRuleStandardScheduleBackupWindowGetArgs>? BackupWindow { get; set; }

        [Input("daysOfMonths")]
        private InputList<int>? _daysOfMonths;

        /// <summary>
        /// Specifies days of months like 1, 5, or 14 on which jobs will run.
        /// </summary>
        public InputList<int> DaysOfMonths
        {
            get => _daysOfMonths ?? (_daysOfMonths = new InputList<int>());
            set => _daysOfMonths = value;
        }

        [Input("daysOfWeeks")]
        private InputList<string>? _daysOfWeeks;

        /// <summary>
        /// Specifies days of week like MONDAY or TUESDAY, on which jobs will run. This is required for `recurrence_type`, `WEEKLY` and is not applicable otherwise.
        /// Each value may be one of: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
        /// </summary>
        public InputList<string> DaysOfWeeks
        {
            get => _daysOfWeeks ?? (_daysOfWeeks = new InputList<string>());
            set => _daysOfWeeks = value;
        }

        /// <summary>
        /// Specifies frequency for hourly backups. An hourly frequency of 2 means jobs will run every 2 hours from start time till end time defined.
        /// This is required for `recurrence_type`, `HOURLY` and is not applicable otherwise.
        /// </summary>
        [Input("hourlyFrequency")]
        public Input<int>? HourlyFrequency { get; set; }

        [Input("months")]
        private InputList<string>? _months;

        /// <summary>
        /// Specifies values of months
        /// Each value may be one of: `MONTH_UNSPECIFIED`, `JANUARY`, `FEBRUARY`, `MARCH`, `APRIL`, `MAY`, `JUNE`, `JULY`, `AUGUST`, `SEPTEMBER`, `OCTOBER`, `NOVEMBER`, `DECEMBER`.
        /// </summary>
        public InputList<string> Months
        {
            get => _months ?? (_months = new InputList<string>());
            set => _months = value;
        }

        /// <summary>
        /// RecurrenceType enumerates the applicable periodicity for the schedule.
        /// Possible values are: `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.
        /// </summary>
        [Input("recurrenceType", required: true)]
        public Input<string> RecurrenceType { get; set; } = null!;

        /// <summary>
        /// The time zone to be used when interpreting the schedule.
        /// </summary>
        [Input("timeZone", required: true)]
        public Input<string> TimeZone { get; set; } = null!;

        /// <summary>
        /// Specifies a week day of the month like FIRST SUNDAY or LAST MONDAY, on which jobs will run.
        /// Structure is documented below.
        /// </summary>
        [Input("weekDayOfMonth")]
        public Input<Inputs.BackupPlanBackupRuleStandardScheduleWeekDayOfMonthGetArgs>? WeekDayOfMonth { get; set; }

        public BackupPlanBackupRuleStandardScheduleGetArgs()
        {
        }
        public static new BackupPlanBackupRuleStandardScheduleGetArgs Empty => new BackupPlanBackupRuleStandardScheduleGetArgs();
    }
}
