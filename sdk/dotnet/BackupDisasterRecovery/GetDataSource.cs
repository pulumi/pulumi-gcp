// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BackupDisasterRecovery
{
    public static class GetDataSource
    {
        /// <summary>
        /// A Backup and DR Data Source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.BackupDisasterRecovery.GetDataSource.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///         Project = "project-test",
        ///         DataSourceId = "ds-test",
        ///         BackupVaultId = "bv-test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDataSourceResult> InvokeAsync(GetDataSourceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataSourceResult>("gcp:backupdisasterrecovery/getDataSource:getDataSource", args ?? new GetDataSourceArgs(), options.WithDefaults());

        /// <summary>
        /// A Backup and DR Data Source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.BackupDisasterRecovery.GetDataSource.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///         Project = "project-test",
        ///         DataSourceId = "ds-test",
        ///         BackupVaultId = "bv-test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDataSourceResult> Invoke(GetDataSourceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataSourceResult>("gcp:backupdisasterrecovery/getDataSource:getDataSource", args ?? new GetDataSourceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// A Backup and DR Data Source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Gcp.BackupDisasterRecovery.GetDataSource.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///         Project = "project-test",
        ///         DataSourceId = "ds-test",
        ///         BackupVaultId = "bv-test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDataSourceResult> Invoke(GetDataSourceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataSourceResult>("gcp:backupdisasterrecovery/getDataSource:getDataSource", args ?? new GetDataSourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataSourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Backup Vault in which the Data Source belongs.
        /// </summary>
        [Input("backupVaultId", required: true)]
        public string BackupVaultId { get; set; } = null!;

        /// <summary>
        /// The ID of the Data Source.
        /// </summary>
        [Input("dataSourceId", required: true)]
        public string DataSourceId { get; set; } = null!;

        /// <summary>
        /// The location in which the Data Source belongs.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The Google Cloud Project in which the Data Source belongs.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetDataSourceArgs()
        {
        }
        public static new GetDataSourceArgs Empty => new GetDataSourceArgs();
    }

    public sealed class GetDataSourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Backup Vault in which the Data Source belongs.
        /// </summary>
        [Input("backupVaultId", required: true)]
        public Input<string> BackupVaultId { get; set; } = null!;

        /// <summary>
        /// The ID of the Data Source.
        /// </summary>
        [Input("dataSourceId", required: true)]
        public Input<string> DataSourceId { get; set; } = null!;

        /// <summary>
        /// The location in which the Data Source belongs.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The Google Cloud Project in which the Data Source belongs.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public GetDataSourceInvokeArgs()
        {
        }
        public static new GetDataSourceInvokeArgs Empty => new GetDataSourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataSourceResult
    {
        public readonly ImmutableArray<Outputs.GetDataSourceBackupConfigInfoResult> BackupConfigInfos;
        public readonly string BackupCount;
        public readonly string BackupVaultId;
        public readonly string ConfigState;
        public readonly string CreateTime;
        public readonly ImmutableArray<Outputs.GetDataSourceDataSourceBackupApplianceApplicationResult> DataSourceBackupApplianceApplications;
        public readonly ImmutableArray<Outputs.GetDataSourceDataSourceGcpResourceResult> DataSourceGcpResources;
        public readonly string DataSourceId;
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Location;
        public readonly string Name;
        public readonly string Project;
        public readonly string State;
        public readonly string TotalStoredBytes;
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetDataSourceResult(
            ImmutableArray<Outputs.GetDataSourceBackupConfigInfoResult> backupConfigInfos,

            string backupCount,

            string backupVaultId,

            string configState,

            string createTime,

            ImmutableArray<Outputs.GetDataSourceDataSourceBackupApplianceApplicationResult> dataSourceBackupApplianceApplications,

            ImmutableArray<Outputs.GetDataSourceDataSourceGcpResourceResult> dataSourceGcpResources,

            string dataSourceId,

            string etag,

            string id,

            ImmutableDictionary<string, string> labels,

            string location,

            string name,

            string project,

            string state,

            string totalStoredBytes,

            string updateTime)
        {
            BackupConfigInfos = backupConfigInfos;
            BackupCount = backupCount;
            BackupVaultId = backupVaultId;
            ConfigState = configState;
            CreateTime = createTime;
            DataSourceBackupApplianceApplications = dataSourceBackupApplianceApplications;
            DataSourceGcpResources = dataSourceGcpResources;
            DataSourceId = dataSourceId;
            Etag = etag;
            Id = id;
            Labels = labels;
            Location = location;
            Name = name;
            Project = project;
            State = state;
            TotalStoredBytes = totalStoredBytes;
            UpdateTime = updateTime;
        }
    }
}
