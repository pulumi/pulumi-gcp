// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BackupDisasterRecovery
{
    /// <summary>
    /// Container to store and organize immutable and indelible backups.
    /// 
    /// ## Example Usage
    /// 
    /// ### Backup Dr Backup Vault Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var backup_vault_test = new Gcp.BackupDisasterRecovery.BackupVault("backup-vault-test", new()
    ///     {
    ///         Location = "us-central1",
    ///         BackupVaultId = "backup-vault-test",
    ///         Description = "This is a second backup vault built by Terraform.",
    ///         BackupMinimumEnforcedRetentionDuration = "100000s",
    ///         Annotations = 
    ///         {
    ///             { "annotations1", "bar1" },
    ///             { "annotations2", "baz1" },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "foo", "bar1" },
    ///             { "bar", "baz1" },
    ///         },
    ///         ForceUpdate = true,
    ///         AccessRestriction = "WITHIN_ORGANIZATION",
    ///         IgnoreInactiveDatasources = true,
    ///         IgnoreBackupPlanReferences = true,
    ///         AllowMissing = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// BackupVault can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/backupVaults/{{backup_vault_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{backup_vault_id}}`
    /// 
    /// * `{{location}}/{{backup_vault_id}}`
    /// 
    /// When using the `pulumi import` command, BackupVault can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:backupdisasterrecovery/backupVault:BackupVault default projects/{{project}}/locations/{{location}}/backupVaults/{{backup_vault_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:backupdisasterrecovery/backupVault:BackupVault default {{project}}/{{location}}/{{backup_vault_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:backupdisasterrecovery/backupVault:BackupVault default {{location}}/{{backup_vault_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:backupdisasterrecovery/backupVault:BackupVault")]
    public partial class BackupVault : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
        /// Default value is `WITHIN_ORGANIZATION`.
        /// Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
        /// </summary>
        [Output("accessRestriction")]
        public Output<string?> AccessRestriction { get; private set; } = null!;

        /// <summary>
        /// Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
        /// </summary>
        [Output("allowMissing")]
        public Output<bool?> AllowMissing { get; private set; } = null!;

        /// <summary>
        /// Optional. User annotations. See https://google.aip.dev/128#annotations
        /// Stores small amounts of arbitrary data.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Output only. The number of backups in this backup vault.
        /// </summary>
        [Output("backupCount")]
        public Output<string> BackupCount { get; private set; } = null!;

        /// <summary>
        /// Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
        /// </summary>
        [Output("backupMinimumEnforcedRetentionDuration")]
        public Output<string> BackupMinimumEnforcedRetentionDuration { get; private set; } = null!;

        /// <summary>
        /// Required. ID of the requesting object.
        /// </summary>
        [Output("backupVaultId")]
        public Output<string> BackupVaultId { get; private set; } = null!;

        /// <summary>
        /// Output only. The time when the instance was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Output only. Set to true when there are no backups nested under this resource.
        /// </summary>
        [Output("deletable")]
        public Output<bool> Deletable { get; private set; } = null!;

        /// <summary>
        /// Optional. The description of the BackupVault instance (2048 characters or less).
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Optional. Time after which the BackupVault resource is locked.
        /// </summary>
        [Output("effectiveTime")]
        public Output<string?> EffectiveTime { get; private set; } = null!;

        /// <summary>
        /// Optional. Server specified ETag for the backup vault resource to prevent simultaneous updates from overwiting each other.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// (Optional, Deprecated)
        /// If set, the following restrictions against deletion of the backup vault instance can be overridden:
        /// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
        /// * deletion of a backup vault instance that is being referenced by an active backup plan.
        /// 
        /// &gt; **Warning:** `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead.
        /// </summary>
        [Output("forceDelete")]
        public Output<bool?> ForceDelete { get; private set; } = null!;

        /// <summary>
        /// If set, allow update to extend the minimum enforced retention for backup vault. This overrides
        /// the restriction against conflicting retention periods. This conflict may occur when the
        /// expiration schedule defined by the associated backup plan is shorter than the minimum
        /// retention set by the backup vault.
        /// </summary>
        [Output("forceUpdate")]
        public Output<bool?> ForceUpdate { get; private set; } = null!;

        /// <summary>
        /// If set, the following restrictions against deletion of the backup vault instance can be overridden:
        /// * deletion of a backup vault instance that is being referenced by an active backup plan.
        /// </summary>
        [Output("ignoreBackupPlanReferences")]
        public Output<bool?> IgnoreBackupPlanReferences { get; private set; } = null!;

        /// <summary>
        /// If set, the following restrictions against deletion of the backup vault instance can be overridden:
        /// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
        /// </summary>
        [Output("ignoreInactiveDatasources")]
        public Output<bool?> IgnoreInactiveDatasources { get; private set; } = null!;

        /// <summary>
        /// Optional. Resource labels to represent user provided metadata.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The GCP location for the backup vault.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Output only. Identifier. The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Output only. Service account used by the BackupVault Service for this BackupVault.  The user should grant this account permissions in their workload project to enable the service to run backups and restores there.
        /// </summary>
        [Output("serviceAccount")]
        public Output<string> ServiceAccount { get; private set; } = null!;

        /// <summary>
        /// Output only. The BackupVault resource instance state.
        /// Possible values:
        /// STATE_UNSPECIFIED
        /// CREATING
        /// ACTIVE
        /// DELETING
        /// ERROR
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Output only. Total size of the storage used by all backup resources.
        /// </summary>
        [Output("totalStoredBytes")]
        public Output<string> TotalStoredBytes { get; private set; } = null!;

        /// <summary>
        /// Output only. Output only Immutable after resource creation until resource deletion.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Output only. The time when the instance was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a BackupVault resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackupVault(string name, BackupVaultArgs args, CustomResourceOptions? options = null)
            : base("gcp:backupdisasterrecovery/backupVault:BackupVault", name, args ?? new BackupVaultArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackupVault(string name, Input<string> id, BackupVaultState? state = null, CustomResourceOptions? options = null)
            : base("gcp:backupdisasterrecovery/backupVault:BackupVault", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackupVault resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackupVault Get(string name, Input<string> id, BackupVaultState? state = null, CustomResourceOptions? options = null)
        {
            return new BackupVault(name, id, state, options);
        }
    }

    public sealed class BackupVaultArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
        /// Default value is `WITHIN_ORGANIZATION`.
        /// Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
        /// </summary>
        [Input("accessRestriction")]
        public Input<string>? AccessRestriction { get; set; }

        /// <summary>
        /// Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
        /// </summary>
        [Input("allowMissing")]
        public Input<bool>? AllowMissing { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. User annotations. See https://google.aip.dev/128#annotations
        /// Stores small amounts of arbitrary data.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
        /// </summary>
        [Input("backupMinimumEnforcedRetentionDuration", required: true)]
        public Input<string> BackupMinimumEnforcedRetentionDuration { get; set; } = null!;

        /// <summary>
        /// Required. ID of the requesting object.
        /// </summary>
        [Input("backupVaultId", required: true)]
        public Input<string> BackupVaultId { get; set; } = null!;

        /// <summary>
        /// Optional. The description of the BackupVault instance (2048 characters or less).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Optional. Time after which the BackupVault resource is locked.
        /// </summary>
        [Input("effectiveTime")]
        public Input<string>? EffectiveTime { get; set; }

        /// <summary>
        /// (Optional, Deprecated)
        /// If set, the following restrictions against deletion of the backup vault instance can be overridden:
        /// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
        /// * deletion of a backup vault instance that is being referenced by an active backup plan.
        /// 
        /// &gt; **Warning:** `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// If set, allow update to extend the minimum enforced retention for backup vault. This overrides
        /// the restriction against conflicting retention periods. This conflict may occur when the
        /// expiration schedule defined by the associated backup plan is shorter than the minimum
        /// retention set by the backup vault.
        /// </summary>
        [Input("forceUpdate")]
        public Input<bool>? ForceUpdate { get; set; }

        /// <summary>
        /// If set, the following restrictions against deletion of the backup vault instance can be overridden:
        /// * deletion of a backup vault instance that is being referenced by an active backup plan.
        /// </summary>
        [Input("ignoreBackupPlanReferences")]
        public Input<bool>? IgnoreBackupPlanReferences { get; set; }

        /// <summary>
        /// If set, the following restrictions against deletion of the backup vault instance can be overridden:
        /// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
        /// </summary>
        [Input("ignoreInactiveDatasources")]
        public Input<bool>? IgnoreInactiveDatasources { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Resource labels to represent user provided metadata.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The GCP location for the backup vault.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public BackupVaultArgs()
        {
        }
        public static new BackupVaultArgs Empty => new BackupVaultArgs();
    }

    public sealed class BackupVaultState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
        /// Default value is `WITHIN_ORGANIZATION`.
        /// Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
        /// </summary>
        [Input("accessRestriction")]
        public Input<string>? AccessRestriction { get; set; }

        /// <summary>
        /// Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
        /// </summary>
        [Input("allowMissing")]
        public Input<bool>? AllowMissing { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. User annotations. See https://google.aip.dev/128#annotations
        /// Stores small amounts of arbitrary data.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Output only. The number of backups in this backup vault.
        /// </summary>
        [Input("backupCount")]
        public Input<string>? BackupCount { get; set; }

        /// <summary>
        /// Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
        /// </summary>
        [Input("backupMinimumEnforcedRetentionDuration")]
        public Input<string>? BackupMinimumEnforcedRetentionDuration { get; set; }

        /// <summary>
        /// Required. ID of the requesting object.
        /// </summary>
        [Input("backupVaultId")]
        public Input<string>? BackupVaultId { get; set; }

        /// <summary>
        /// Output only. The time when the instance was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Output only. Set to true when there are no backups nested under this resource.
        /// </summary>
        [Input("deletable")]
        public Input<bool>? Deletable { get; set; }

        /// <summary>
        /// Optional. The description of the BackupVault instance (2048 characters or less).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Optional. Time after which the BackupVault resource is locked.
        /// </summary>
        [Input("effectiveTime")]
        public Input<string>? EffectiveTime { get; set; }

        /// <summary>
        /// Optional. Server specified ETag for the backup vault resource to prevent simultaneous updates from overwiting each other.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// (Optional, Deprecated)
        /// If set, the following restrictions against deletion of the backup vault instance can be overridden:
        /// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
        /// * deletion of a backup vault instance that is being referenced by an active backup plan.
        /// 
        /// &gt; **Warning:** `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// If set, allow update to extend the minimum enforced retention for backup vault. This overrides
        /// the restriction against conflicting retention periods. This conflict may occur when the
        /// expiration schedule defined by the associated backup plan is shorter than the minimum
        /// retention set by the backup vault.
        /// </summary>
        [Input("forceUpdate")]
        public Input<bool>? ForceUpdate { get; set; }

        /// <summary>
        /// If set, the following restrictions against deletion of the backup vault instance can be overridden:
        /// * deletion of a backup vault instance that is being referenced by an active backup plan.
        /// </summary>
        [Input("ignoreBackupPlanReferences")]
        public Input<bool>? IgnoreBackupPlanReferences { get; set; }

        /// <summary>
        /// If set, the following restrictions against deletion of the backup vault instance can be overridden:
        /// * deletion of a backup vault instance containing no backups, but still containing empty datasources.
        /// </summary>
        [Input("ignoreInactiveDatasources")]
        public Input<bool>? IgnoreInactiveDatasources { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Resource labels to represent user provided metadata.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The GCP location for the backup vault.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Output only. Identifier. The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Output only. Service account used by the BackupVault Service for this BackupVault.  The user should grant this account permissions in their workload project to enable the service to run backups and restores there.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// Output only. The BackupVault resource instance state.
        /// Possible values:
        /// STATE_UNSPECIFIED
        /// CREATING
        /// ACTIVE
        /// DELETING
        /// ERROR
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Output only. Total size of the storage used by all backup resources.
        /// </summary>
        [Input("totalStoredBytes")]
        public Input<string>? TotalStoredBytes { get; set; }

        /// <summary>
        /// Output only. Output only Immutable after resource creation until resource deletion.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Output only. The time when the instance was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public BackupVaultState()
        {
        }
        public static new BackupVaultState Empty => new BackupVaultState();
    }
}
