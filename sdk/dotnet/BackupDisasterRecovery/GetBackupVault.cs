// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BackupDisasterRecovery
{
    public static class GetBackupVault
    {
        /// <summary>
        /// A Backup and DRBackupVault.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_backup_vault = Gcp.BackupDisasterRecovery.GetBackupVault.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///         BackupVaultId = "bv-1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBackupVaultResult> InvokeAsync(GetBackupVaultArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackupVaultResult>("gcp:backupdisasterrecovery/getBackupVault:getBackupVault", args ?? new GetBackupVaultArgs(), options.WithDefaults());

        /// <summary>
        /// A Backup and DRBackupVault.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_backup_vault = Gcp.BackupDisasterRecovery.GetBackupVault.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///         BackupVaultId = "bv-1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackupVaultResult> Invoke(GetBackupVaultInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupVaultResult>("gcp:backupdisasterrecovery/getBackupVault:getBackupVault", args ?? new GetBackupVaultInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// A Backup and DRBackupVault.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_backup_vault = Gcp.BackupDisasterRecovery.GetBackupVault.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///         BackupVaultId = "bv-1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackupVaultResult> Invoke(GetBackupVaultInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupVaultResult>("gcp:backupdisasterrecovery/getBackupVault:getBackupVault", args ?? new GetBackupVaultInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupVaultArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of Backup Vault resource.
        /// 
        /// - - -
        /// </summary>
        [Input("backupVaultId", required: true)]
        public string BackupVaultId { get; set; } = null!;

        /// <summary>
        /// The location in which the Backup Vault resource belongs.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetBackupVaultArgs()
        {
        }
        public static new GetBackupVaultArgs Empty => new GetBackupVaultArgs();
    }

    public sealed class GetBackupVaultInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of Backup Vault resource.
        /// 
        /// - - -
        /// </summary>
        [Input("backupVaultId", required: true)]
        public Input<string> BackupVaultId { get; set; } = null!;

        /// <summary>
        /// The location in which the Backup Vault resource belongs.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetBackupVaultInvokeArgs()
        {
        }
        public static new GetBackupVaultInvokeArgs Empty => new GetBackupVaultInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackupVaultResult
    {
        public readonly string AccessRestriction;
        public readonly bool AllowMissing;
        public readonly ImmutableDictionary<string, string> Annotations;
        public readonly string BackupCount;
        public readonly string BackupMinimumEnforcedRetentionDuration;
        public readonly string BackupVaultId;
        public readonly string CreateTime;
        public readonly bool Deletable;
        public readonly string Description;
        public readonly ImmutableDictionary<string, string> EffectiveAnnotations;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly string EffectiveTime;
        public readonly string Etag;
        public readonly bool ForceDelete;
        public readonly bool ForceUpdate;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool IgnoreBackupPlanReferences;
        public readonly bool IgnoreInactiveDatasources;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Location;
        public readonly string Name;
        public readonly string? Project;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly string ServiceAccount;
        public readonly string State;
        public readonly string TotalStoredBytes;
        public readonly string Uid;
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetBackupVaultResult(
            string accessRestriction,

            bool allowMissing,

            ImmutableDictionary<string, string> annotations,

            string backupCount,

            string backupMinimumEnforcedRetentionDuration,

            string backupVaultId,

            string createTime,

            bool deletable,

            string description,

            ImmutableDictionary<string, string> effectiveAnnotations,

            ImmutableDictionary<string, string> effectiveLabels,

            string effectiveTime,

            string etag,

            bool forceDelete,

            bool forceUpdate,

            string id,

            bool ignoreBackupPlanReferences,

            bool ignoreInactiveDatasources,

            ImmutableDictionary<string, string> labels,

            string location,

            string name,

            string? project,

            ImmutableDictionary<string, string> pulumiLabels,

            string serviceAccount,

            string state,

            string totalStoredBytes,

            string uid,

            string updateTime)
        {
            AccessRestriction = accessRestriction;
            AllowMissing = allowMissing;
            Annotations = annotations;
            BackupCount = backupCount;
            BackupMinimumEnforcedRetentionDuration = backupMinimumEnforcedRetentionDuration;
            BackupVaultId = backupVaultId;
            CreateTime = createTime;
            Deletable = deletable;
            Description = description;
            EffectiveAnnotations = effectiveAnnotations;
            EffectiveLabels = effectiveLabels;
            EffectiveTime = effectiveTime;
            Etag = etag;
            ForceDelete = forceDelete;
            ForceUpdate = forceUpdate;
            Id = id;
            IgnoreBackupPlanReferences = ignoreBackupPlanReferences;
            IgnoreInactiveDatasources = ignoreInactiveDatasources;
            Labels = labels;
            Location = location;
            Name = name;
            Project = project;
            PulumiLabels = pulumiLabels;
            ServiceAccount = serviceAccount;
            State = state;
            TotalStoredBytes = totalStoredBytes;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
