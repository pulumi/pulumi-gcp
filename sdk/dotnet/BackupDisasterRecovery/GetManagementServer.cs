// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BackupDisasterRecovery
{
    public static class GetManagementServer
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_backup_dr_management_server = Gcp.BackupDisasterRecovery.GetManagementServer.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetManagementServerResult> InvokeAsync(GetManagementServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagementServerResult>("gcp:backupdisasterrecovery/getManagementServer:getManagementServer", args ?? new GetManagementServerArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_backup_dr_management_server = Gcp.BackupDisasterRecovery.GetManagementServer.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagementServerResult> Invoke(GetManagementServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagementServerResult>("gcp:backupdisasterrecovery/getManagementServer:getManagementServer", args ?? new GetManagementServerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_backup_dr_management_server = Gcp.BackupDisasterRecovery.GetManagementServer.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagementServerResult> Invoke(GetManagementServerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagementServerResult>("gcp:backupdisasterrecovery/getManagementServer:getManagementServer", args ?? new GetManagementServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagementServerArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        public GetManagementServerArgs()
        {
        }
        public static new GetManagementServerArgs Empty => new GetManagementServerArgs();
    }

    public sealed class GetManagementServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        public GetManagementServerInvokeArgs()
        {
        }
        public static new GetManagementServerInvokeArgs Empty => new GetManagementServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagementServerResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        public readonly ImmutableArray<Outputs.GetManagementServerManagementUriResult> ManagementUris;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetManagementServerNetworkResult> Networks;
        public readonly string Oauth2ClientId;
        public readonly string Project;
        public readonly string Type;

        [OutputConstructor]
        private GetManagementServerResult(
            string id,

            string location,

            ImmutableArray<Outputs.GetManagementServerManagementUriResult> managementUris,

            string name,

            ImmutableArray<Outputs.GetManagementServerNetworkResult> networks,

            string oauth2ClientId,

            string project,

            string type)
        {
            Id = id;
            Location = location;
            ManagementUris = managementUris;
            Name = name;
            Networks = networks;
            Oauth2ClientId = oauth2ClientId;
            Project = project;
            Type = type;
        }
    }
}
