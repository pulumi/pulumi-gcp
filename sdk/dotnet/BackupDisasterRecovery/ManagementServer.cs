// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BackupDisasterRecovery
{
    /// <summary>
    /// ## Example Usage
    /// ### Backup Dr Management Server
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultNetwork = new Gcp.Compute.Network("defaultNetwork", new()
    ///     {
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var privateIpAddress = new Gcp.Compute.GlobalAddress("privateIpAddress", new()
    ///     {
    ///         AddressType = "INTERNAL",
    ///         Purpose = "VPC_PEERING",
    ///         PrefixLength = 20,
    ///         Network = defaultNetwork.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var defaultConnection = new Gcp.ServiceNetworking.Connection("defaultConnection", new()
    ///     {
    ///         Network = defaultNetwork.Id,
    ///         Service = "servicenetworking.googleapis.com",
    ///         ReservedPeeringRanges = new[]
    ///         {
    ///             privateIpAddress.Name,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var ms_console = new Gcp.BackupDisasterRecovery.ManagementServer("ms-console", new()
    ///     {
    ///         Location = "us-central1",
    ///         Type = "BACKUP_RESTORE",
    ///         Networks = new[]
    ///         {
    ///             new Gcp.BackupDisasterRecovery.Inputs.ManagementServerNetworkArgs
    ///             {
    ///                 Network = defaultNetwork.Id,
    ///                 PeeringMode = "PRIVATE_SERVICE_ACCESS",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///         DependsOn = new[]
    ///         {
    ///             defaultConnection,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ManagementServer can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:backupdisasterrecovery/managementServer:ManagementServer default projects/{{project}}/locations/{{location}}/managementServers/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:backupdisasterrecovery/managementServer:ManagementServer default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:backupdisasterrecovery/managementServer:ManagementServer default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:backupdisasterrecovery/managementServer:ManagementServer")]
    public partial class ManagementServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The location for the management server (management console)
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The management console URI
        /// Structure is documented below.
        /// </summary>
        [Output("managementUris")]
        public Output<ImmutableArray<Outputs.ManagementServerManagementUri>> ManagementUris { get; private set; } = null!;

        /// <summary>
        /// The name of management server (management console)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network details to create management server (management console).
        /// Structure is documented below.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.ManagementServerNetwork>> Networks { get; private set; } = null!;

        /// <summary>
        /// The oauth2ClientId of management console.
        /// </summary>
        [Output("oauth2ClientId")]
        public Output<string> Oauth2ClientId { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The type of management server (management console).
        /// Default value is `BACKUP_RESTORE`.
        /// Possible values are: `BACKUP_RESTORE`.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ManagementServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagementServer(string name, ManagementServerArgs args, CustomResourceOptions? options = null)
            : base("gcp:backupdisasterrecovery/managementServer:ManagementServer", name, args ?? new ManagementServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagementServer(string name, Input<string> id, ManagementServerState? state = null, CustomResourceOptions? options = null)
            : base("gcp:backupdisasterrecovery/managementServer:ManagementServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagementServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagementServer Get(string name, Input<string> id, ManagementServerState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagementServer(name, id, state, options);
        }
    }

    public sealed class ManagementServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The location for the management server (management console)
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of management server (management console)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks", required: true)]
        private InputList<Inputs.ManagementServerNetworkArgs>? _networks;

        /// <summary>
        /// Network details to create management server (management console).
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ManagementServerNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.ManagementServerNetworkArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The type of management server (management console).
        /// Default value is `BACKUP_RESTORE`.
        /// Possible values are: `BACKUP_RESTORE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ManagementServerArgs()
        {
        }
        public static new ManagementServerArgs Empty => new ManagementServerArgs();
    }

    public sealed class ManagementServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The location for the management server (management console)
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("managementUris")]
        private InputList<Inputs.ManagementServerManagementUriGetArgs>? _managementUris;

        /// <summary>
        /// The management console URI
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ManagementServerManagementUriGetArgs> ManagementUris
        {
            get => _managementUris ?? (_managementUris = new InputList<Inputs.ManagementServerManagementUriGetArgs>());
            set => _managementUris = value;
        }

        /// <summary>
        /// The name of management server (management console)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.ManagementServerNetworkGetArgs>? _networks;

        /// <summary>
        /// Network details to create management server (management console).
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ManagementServerNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.ManagementServerNetworkGetArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// The oauth2ClientId of management console.
        /// </summary>
        [Input("oauth2ClientId")]
        public Input<string>? Oauth2ClientId { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The type of management server (management console).
        /// Default value is `BACKUP_RESTORE`.
        /// Possible values are: `BACKUP_RESTORE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ManagementServerState()
        {
        }
        public static new ManagementServerState Empty => new ManagementServerState();
    }
}
