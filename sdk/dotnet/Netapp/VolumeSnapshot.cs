// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Netapp
{
    /// <summary>
    /// NetApp Volumes helps you manage your data usage with snapshots that can quickly restore lost data.
    /// Snapshots are point-in-time versions of your volume's content. They are resources of volumes and are
    /// instant captures of your data that consume space only for modified data. Because data changes over
    /// time, snapshots usually consume more space as they get older.
    /// NetApp Volumes volumes use just-in-time copy-on-write so that unmodified files in snapshots don't
    /// consume any of the volume's capacity.
    /// 
    /// To get more information about VolumeSnapshot, see:
    /// 
    /// * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.volumes.snapshots)
    /// * How-to Guides
    ///     * [Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/volume-snapshots/overview)
    /// 
    /// ## Example Usage
    /// 
    /// ### Volume Snapshot Create
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = Gcp.Compute.GetNetwork.Invoke(new()
    ///     {
    ///         Name = "test-network",
    ///     });
    /// 
    ///     var defaultStoragePool = new Gcp.Netapp.StoragePool("default", new()
    ///     {
    ///         Name = "test-pool",
    ///         Location = "us-west2",
    ///         ServiceLevel = "PREMIUM",
    ///         CapacityGib = "2048",
    ///         Network = @default.Apply(@default =&gt; @default.Apply(getNetworkResult =&gt; getNetworkResult.Id)),
    ///     });
    /// 
    ///     var defaultVolume = new Gcp.Netapp.Volume("default", new()
    ///     {
    ///         Location = defaultStoragePool.Location,
    ///         Name = "test-volume",
    ///         CapacityGib = "100",
    ///         ShareName = "test-volume",
    ///         StoragePool = defaultStoragePool.Name,
    ///         Protocols = new[]
    ///         {
    ///             "NFSV3",
    ///         },
    ///     });
    /// 
    ///     var testSnapshot = new Gcp.Netapp.VolumeSnapshot("test_snapshot", new()
    ///     {
    ///         Location = defaultVolume.Location,
    ///         VolumeName = defaultVolume.Name,
    ///         Name = "testvolumesnap",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             defaultVolume,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VolumeSnapshot can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/snapshots/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{volume_name}}/{{name}}`
    /// 
    /// * `{{location}}/{{volume_name}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, VolumeSnapshot can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/volumeSnapshot:VolumeSnapshot default projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/snapshots/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/volumeSnapshot:VolumeSnapshot default {{project}}/{{location}}/{{volume_name}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/volumeSnapshot:VolumeSnapshot default {{location}}/{{volume_name}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:netapp/volumeSnapshot:VolumeSnapshot")]
    public partial class VolumeSnapshot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description for the snapshot.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the snapshot location. Snapshots are child resources of volumes and live in the same location.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the snapshot.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Storage used to store blocks unique to this snapshot.
        /// </summary>
        [Output("usedBytes")]
        public Output<int> UsedBytes { get; private set; } = null!;

        /// <summary>
        /// The name of the volume to create the snapshot in.
        /// </summary>
        [Output("volumeName")]
        public Output<string> VolumeName { get; private set; } = null!;


        /// <summary>
        /// Create a VolumeSnapshot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumeSnapshot(string name, VolumeSnapshotArgs args, CustomResourceOptions? options = null)
            : base("gcp:netapp/volumeSnapshot:VolumeSnapshot", name, args ?? new VolumeSnapshotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VolumeSnapshot(string name, Input<string> id, VolumeSnapshotState? state = null, CustomResourceOptions? options = null)
            : base("gcp:netapp/volumeSnapshot:VolumeSnapshot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumeSnapshot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumeSnapshot Get(string name, Input<string> id, VolumeSnapshotState? state = null, CustomResourceOptions? options = null)
        {
            return new VolumeSnapshot(name, id, state, options);
        }
    }

    public sealed class VolumeSnapshotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description for the snapshot.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the snapshot location. Snapshots are child resources of volumes and live in the same location.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of the snapshot.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The name of the volume to create the snapshot in.
        /// </summary>
        [Input("volumeName", required: true)]
        public Input<string> VolumeName { get; set; } = null!;

        public VolumeSnapshotArgs()
        {
        }
        public static new VolumeSnapshotArgs Empty => new VolumeSnapshotArgs();
    }

    public sealed class VolumeSnapshotState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description for the snapshot.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the snapshot location. Snapshots are child resources of volumes and live in the same location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the snapshot.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Storage used to store blocks unique to this snapshot.
        /// </summary>
        [Input("usedBytes")]
        public Input<int>? UsedBytes { get; set; }

        /// <summary>
        /// The name of the volume to create the snapshot in.
        /// </summary>
        [Input("volumeName")]
        public Input<string>? VolumeName { get; set; }

        public VolumeSnapshotState()
        {
        }
        public static new VolumeSnapshotState Empty => new VolumeSnapshotState();
    }
}
