// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Netapp.Outputs
{

    [OutputType]
    public sealed class VolumeExportPolicyRule
    {
        /// <summary>
        /// Defines the access type for clients matching the `allowedClients` specification.
        /// Possible values are: `READ_ONLY`, `READ_WRITE`, `READ_NONE`.
        /// </summary>
        public readonly string? AccessType;
        /// <summary>
        /// Defines the client ingress specification (allowed clients) as a comma separated list with IPv4 CIDRs or IPv4 host addresses.
        /// </summary>
        public readonly string? AllowedClients;
        /// <summary>
        /// An integer representing the anonymous user ID. Range is 0 to 4294967295. Required when `SquashMode` is `ROOT_SQUASH` or `ALL_SQUASH`.
        /// </summary>
        public readonly int? AnonUid;
        /// <summary>
        /// If enabled, the root user (UID = 0) of the specified clients doesn't get mapped to nobody (UID = 65534). This is also known as no_root_squash.
        /// </summary>
        public readonly string? HasRootAccess;
        /// <summary>
        /// If enabled (true) the rule defines a read only access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'authentication' kerberos security mode.
        /// </summary>
        public readonly bool? Kerberos5ReadOnly;
        /// <summary>
        /// If enabled (true) the rule defines read and write access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'authentication' kerberos security mode. The 'kerberos5ReadOnly' value is ignored if this is enabled.
        /// </summary>
        public readonly bool? Kerberos5ReadWrite;
        /// <summary>
        /// If enabled (true) the rule defines a read only access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'integrity' kerberos security mode.
        /// </summary>
        public readonly bool? Kerberos5iReadOnly;
        /// <summary>
        /// If enabled (true) the rule defines read and write access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'integrity' kerberos security mode. The 'kerberos5iReadOnly' value is ignored if this is enabled.
        /// </summary>
        public readonly bool? Kerberos5iReadWrite;
        /// <summary>
        /// If enabled (true) the rule defines a read only access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'privacy' kerberos security mode.
        /// </summary>
        public readonly bool? Kerberos5pReadOnly;
        /// <summary>
        /// If enabled (true) the rule defines read and write access for clients matching the 'allowedClients' specification. It enables nfs clients to mount using 'privacy' kerberos security mode. The 'kerberos5pReadOnly' value is ignored if this is enabled.
        /// </summary>
        public readonly bool? Kerberos5pReadWrite;
        /// <summary>
        /// Enable to apply the export rule to NFSV3 clients.
        /// </summary>
        public readonly bool? Nfsv3;
        /// <summary>
        /// Enable to apply the export rule to NFSV4.1 clients.
        /// </summary>
        public readonly bool? Nfsv4;
        /// <summary>
        /// SquashMode defines how remote user privileges are restricted when accessing an NFS export. It controls how the user identities (like root) are mapped to anonymous users to limit access and enforce security.
        /// Possible values are: `NO_ROOT_SQUASH`, `ROOT_SQUASH`, `ALL_SQUASH`.
        /// </summary>
        public readonly string? SquashMode;

        [OutputConstructor]
        private VolumeExportPolicyRule(
            string? accessType,

            string? allowedClients,

            int? anonUid,

            string? hasRootAccess,

            bool? kerberos5ReadOnly,

            bool? kerberos5ReadWrite,

            bool? kerberos5iReadOnly,

            bool? kerberos5iReadWrite,

            bool? kerberos5pReadOnly,

            bool? kerberos5pReadWrite,

            bool? nfsv3,

            bool? nfsv4,

            string? squashMode)
        {
            AccessType = accessType;
            AllowedClients = allowedClients;
            AnonUid = anonUid;
            HasRootAccess = hasRootAccess;
            Kerberos5ReadOnly = kerberos5ReadOnly;
            Kerberos5ReadWrite = kerberos5ReadWrite;
            Kerberos5iReadOnly = kerberos5iReadOnly;
            Kerberos5iReadWrite = kerberos5iReadWrite;
            Kerberos5pReadOnly = kerberos5pReadOnly;
            Kerberos5pReadWrite = kerberos5pReadWrite;
            Nfsv3 = nfsv3;
            Nfsv4 = nfsv4;
            SquashMode = squashMode;
        }
    }
}
