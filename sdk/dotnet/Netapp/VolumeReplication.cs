// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Netapp
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Netapp Volume Replication Create
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = Gcp.Compute.GetNetwork.Invoke(new()
    ///     {
    ///         Name = "test-network",
    ///     });
    /// 
    ///     var sourcePool = new Gcp.Netapp.StoragePool("source_pool", new()
    ///     {
    ///         Name = "source-pool",
    ///         Location = "us-central1",
    ///         ServiceLevel = "PREMIUM",
    ///         CapacityGib = "2048",
    ///         Network = @default.Apply(@default =&gt; @default.Apply(getNetworkResult =&gt; getNetworkResult.Id)),
    ///     });
    /// 
    ///     var destinationPool = new Gcp.Netapp.StoragePool("destination_pool", new()
    ///     {
    ///         Name = "destination-pool",
    ///         Location = "us-west2",
    ///         ServiceLevel = "PREMIUM",
    ///         CapacityGib = "2048",
    ///         Network = @default.Apply(@default =&gt; @default.Apply(getNetworkResult =&gt; getNetworkResult.Id)),
    ///     });
    /// 
    ///     var sourceVolume = new Gcp.Netapp.Volume("source_volume", new()
    ///     {
    ///         Location = sourcePool.Location,
    ///         Name = "source-volume",
    ///         CapacityGib = "100",
    ///         ShareName = "source-volume",
    ///         StoragePool = sourcePool.Name,
    ///         Protocols = new[]
    ///         {
    ///             "NFSV3",
    ///         },
    ///         DeletionPolicy = "FORCE",
    ///     });
    /// 
    ///     var testReplication = new Gcp.Netapp.VolumeReplication("test_replication", new()
    ///     {
    ///         Location = sourceVolume.Location,
    ///         VolumeName = sourceVolume.Name,
    ///         Name = "test-replication",
    ///         ReplicationSchedule = "EVERY_10_MINUTES",
    ///         Description = "This is a replication resource",
    ///         DestinationVolumeParameters = new Gcp.Netapp.Inputs.VolumeReplicationDestinationVolumeParametersArgs
    ///         {
    ///             StoragePool = destinationPool.Id,
    ///             VolumeId = "destination-volume",
    ///             ShareName = "source-volume",
    ///             Description = "This is a replicated volume",
    ///         },
    ///         DeleteDestinationVolume = true,
    ///         WaitForMirror = true,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// VolumeReplication can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/replications/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{volume_name}}/{{name}}`
    /// 
    /// * `{{location}}/{{volume_name}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, VolumeReplication can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/replications/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default {{project}}/{{location}}/{{volume_name}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default {{location}}/{{volume_name}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:netapp/volumeReplication:VolumeReplication")]
    public partial class VolumeReplication : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// A destination volume is created as part of replication creation. The destination volume will not became under Terraform
        /// management unless you import it manually. If you delete the replication, this volume will remain. Setting this parameter
        /// to true will delete the *current* destination volume when destroying the replication. If you reversed the replication
        /// direction, this will be your former source volume! For production use, it is recommended to keep this parameter false to
        /// avoid accidental volume deletion. Handle with care. Default is false.
        /// </summary>
        [Output("deleteDestinationVolume")]
        public Output<bool?> DeleteDestinationVolume { get; private set; } = null!;

        /// <summary>
        /// An description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
        /// </summary>
        [Output("destinationVolume")]
        public Output<string> DestinationVolume { get; private set; } = null!;

        /// <summary>
        /// Destination volume parameters.
        /// Structure is documented below.
        /// </summary>
        [Output("destinationVolumeParameters")]
        public Output<Outputs.VolumeReplicationDestinationVolumeParameters?> DestinationVolumeParameters { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
        /// currently receives an update and stopping the update might be undesirable. Set this parameter to true
        /// to stop anyway. All data transferred to the destination will be discarded and content of destination
        /// volume will remain at the state of the last successful update. Default is false.
        /// </summary>
        [Output("forceStopping")]
        public Output<bool?> ForceStopping { get; private set; } = null!;

        /// <summary>
        /// Condition of the relationship. Can be one of the following:
        /// - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
        /// - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
        /// </summary>
        [Output("healthy")]
        public Output<bool> Healthy { get; private set; } = null!;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of region for this resource. The resource needs to be created in the region of the destination volume.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
        /// in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
        /// transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
        /// currently receives an update. Updated every 5 minutes.
        /// </summary>
        [Output("mirrorState")]
        public Output<string> MirrorState { get; private set; } = null!;

        /// <summary>
        /// The name of the replication. Needs to be unique per location.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
        /// and act independently from the source volume.
        /// Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
        /// done to the destination volume with the content of the source volume.
        /// </summary>
        [Output("replicationEnabled")]
        public Output<bool?> ReplicationEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the replication interval.
        /// Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
        /// </summary>
        [Output("replicationSchedule")]
        public Output<string> ReplicationSchedule { get; private set; } = null!;

        /// <summary>
        /// Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
        /// the source or destination volume. For resume and revert and resume operations it is critical to understand
        /// which volume is the source volume, since it will overwrite changes done to the destination volume.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
        /// </summary>
        [Output("sourceVolume")]
        public Output<string> SourceVolume { get; private set; } = null!;

        /// <summary>
        /// Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// State details of the replication resource.
        /// </summary>
        [Output("stateDetails")]
        public Output<string> StateDetails { get; private set; } = null!;

        /// <summary>
        /// Replication transfer statistics. All statistics are updated every 5 minutes.
        /// Structure is documented below.
        /// </summary>
        [Output("transferStats")]
        public Output<ImmutableArray<Outputs.VolumeReplicationTransferStat>> TransferStats { get; private set; } = null!;

        /// <summary>
        /// The name of the existing source volume.
        /// </summary>
        [Output("volumeName")]
        public Output<string> VolumeName { get; private set; } = null!;

        /// <summary>
        /// Replication resource state is independent of mirror_state. With enough data, it can take many hours for mirror_state to
        /// reach MIRRORED. If you want Terraform to wait for the mirror to finish on create/stop/resume operations, set this
        /// parameter to true. Default is false.
        /// </summary>
        [Output("waitForMirror")]
        public Output<bool?> WaitForMirror { get; private set; } = null!;


        /// <summary>
        /// Create a VolumeReplication resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumeReplication(string name, VolumeReplicationArgs args, CustomResourceOptions? options = null)
            : base("gcp:netapp/volumeReplication:VolumeReplication", name, args ?? new VolumeReplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VolumeReplication(string name, Input<string> id, VolumeReplicationState? state = null, CustomResourceOptions? options = null)
            : base("gcp:netapp/volumeReplication:VolumeReplication", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumeReplication resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumeReplication Get(string name, Input<string> id, VolumeReplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new VolumeReplication(name, id, state, options);
        }
    }

    public sealed class VolumeReplicationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A destination volume is created as part of replication creation. The destination volume will not became under Terraform
        /// management unless you import it manually. If you delete the replication, this volume will remain. Setting this parameter
        /// to true will delete the *current* destination volume when destroying the replication. If you reversed the replication
        /// direction, this will be your former source volume! For production use, it is recommended to keep this parameter false to
        /// avoid accidental volume deletion. Handle with care. Default is false.
        /// </summary>
        [Input("deleteDestinationVolume")]
        public Input<bool>? DeleteDestinationVolume { get; set; }

        /// <summary>
        /// An description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Destination volume parameters.
        /// Structure is documented below.
        /// </summary>
        [Input("destinationVolumeParameters")]
        public Input<Inputs.VolumeReplicationDestinationVolumeParametersArgs>? DestinationVolumeParameters { get; set; }

        /// <summary>
        /// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
        /// currently receives an update and stopping the update might be undesirable. Set this parameter to true
        /// to stop anyway. All data transferred to the destination will be discarded and content of destination
        /// volume will remain at the state of the last successful update. Default is false.
        /// </summary>
        [Input("forceStopping")]
        public Input<bool>? ForceStopping { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of region for this resource. The resource needs to be created in the region of the destination volume.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of the replication. Needs to be unique per location.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
        /// and act independently from the source volume.
        /// Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
        /// done to the destination volume with the content of the source volume.
        /// </summary>
        [Input("replicationEnabled")]
        public Input<bool>? ReplicationEnabled { get; set; }

        /// <summary>
        /// Specifies the replication interval.
        /// Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
        /// </summary>
        [Input("replicationSchedule", required: true)]
        public Input<string> ReplicationSchedule { get; set; } = null!;

        /// <summary>
        /// The name of the existing source volume.
        /// </summary>
        [Input("volumeName", required: true)]
        public Input<string> VolumeName { get; set; } = null!;

        /// <summary>
        /// Replication resource state is independent of mirror_state. With enough data, it can take many hours for mirror_state to
        /// reach MIRRORED. If you want Terraform to wait for the mirror to finish on create/stop/resume operations, set this
        /// parameter to true. Default is false.
        /// </summary>
        [Input("waitForMirror")]
        public Input<bool>? WaitForMirror { get; set; }

        public VolumeReplicationArgs()
        {
        }
        public static new VolumeReplicationArgs Empty => new VolumeReplicationArgs();
    }

    public sealed class VolumeReplicationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// A destination volume is created as part of replication creation. The destination volume will not became under Terraform
        /// management unless you import it manually. If you delete the replication, this volume will remain. Setting this parameter
        /// to true will delete the *current* destination volume when destroying the replication. If you reversed the replication
        /// direction, this will be your former source volume! For production use, it is recommended to keep this parameter false to
        /// avoid accidental volume deletion. Handle with care. Default is false.
        /// </summary>
        [Input("deleteDestinationVolume")]
        public Input<bool>? DeleteDestinationVolume { get; set; }

        /// <summary>
        /// An description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
        /// </summary>
        [Input("destinationVolume")]
        public Input<string>? DestinationVolume { get; set; }

        /// <summary>
        /// Destination volume parameters.
        /// Structure is documented below.
        /// </summary>
        [Input("destinationVolumeParameters")]
        public Input<Inputs.VolumeReplicationDestinationVolumeParametersGetArgs>? DestinationVolumeParameters { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
        /// currently receives an update and stopping the update might be undesirable. Set this parameter to true
        /// to stop anyway. All data transferred to the destination will be discarded and content of destination
        /// volume will remain at the state of the last successful update. Default is false.
        /// </summary>
        [Input("forceStopping")]
        public Input<bool>? ForceStopping { get; set; }

        /// <summary>
        /// Condition of the relationship. Can be one of the following:
        /// - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
        /// - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
        /// </summary>
        [Input("healthy")]
        public Input<bool>? Healthy { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of region for this resource. The resource needs to be created in the region of the destination volume.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
        /// in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
        /// transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
        /// currently receives an update. Updated every 5 minutes.
        /// </summary>
        [Input("mirrorState")]
        public Input<string>? MirrorState { get; set; }

        /// <summary>
        /// The name of the replication. Needs to be unique per location.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
        /// and act independently from the source volume.
        /// Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
        /// done to the destination volume with the content of the source volume.
        /// </summary>
        [Input("replicationEnabled")]
        public Input<bool>? ReplicationEnabled { get; set; }

        /// <summary>
        /// Specifies the replication interval.
        /// Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
        /// </summary>
        [Input("replicationSchedule")]
        public Input<string>? ReplicationSchedule { get; set; }

        /// <summary>
        /// Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
        /// the source or destination volume. For resume and revert and resume operations it is critical to understand
        /// which volume is the source volume, since it will overwrite changes done to the destination volume.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
        /// </summary>
        [Input("sourceVolume")]
        public Input<string>? SourceVolume { get; set; }

        /// <summary>
        /// Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// State details of the replication resource.
        /// </summary>
        [Input("stateDetails")]
        public Input<string>? StateDetails { get; set; }

        [Input("transferStats")]
        private InputList<Inputs.VolumeReplicationTransferStatGetArgs>? _transferStats;

        /// <summary>
        /// Replication transfer statistics. All statistics are updated every 5 minutes.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.VolumeReplicationTransferStatGetArgs> TransferStats
        {
            get => _transferStats ?? (_transferStats = new InputList<Inputs.VolumeReplicationTransferStatGetArgs>());
            set => _transferStats = value;
        }

        /// <summary>
        /// The name of the existing source volume.
        /// </summary>
        [Input("volumeName")]
        public Input<string>? VolumeName { get; set; }

        /// <summary>
        /// Replication resource state is independent of mirror_state. With enough data, it can take many hours for mirror_state to
        /// reach MIRRORED. If you want Terraform to wait for the mirror to finish on create/stop/resume operations, set this
        /// parameter to true. Default is false.
        /// </summary>
        [Input("waitForMirror")]
        public Input<bool>? WaitForMirror { get; set; }

        public VolumeReplicationState()
        {
        }
        public static new VolumeReplicationState Empty => new VolumeReplicationState();
    }
}
