// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Netapp
{
    /// <summary>
    /// A volume is a file system container in a storage pool that stores application, database, and user data.
    /// 
    /// You can create a volume's capacity using the available capacity in the storage pool and you can define and resize the capacity without disruption to any processes.
    /// 
    /// Storage pool settings apply to the volumes contained within them automatically.
    /// 
    /// To get more information about Volume, see:
    /// 
    /// * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.volumes)
    /// * How-to Guides
    ///     * [Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/volumes/overview)
    ///     * [Quickstart](https://cloud.google.com/netapp/volumes/docs/get-started/quickstarts/create-volume)
    /// 
    /// ## Example Usage
    /// 
    /// ### Netapp Volume Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = Gcp.Compute.GetNetwork.Invoke(new()
    ///     {
    ///         Name = "test-network",
    ///     });
    /// 
    ///     var defaultStoragePool = new Gcp.Netapp.StoragePool("default", new()
    ///     {
    ///         Name = "test-pool",
    ///         Location = "us-west2",
    ///         ServiceLevel = "PREMIUM",
    ///         CapacityGib = "2048",
    ///         Network = @default.Apply(@default =&gt; @default.Apply(getNetworkResult =&gt; getNetworkResult.Id)),
    ///     });
    /// 
    ///     var testVolume = new Gcp.Netapp.Volume("test_volume", new()
    ///     {
    ///         Location = "us-west2",
    ///         Name = "test-volume",
    ///         CapacityGib = "100",
    ///         ShareName = "test-volume",
    ///         StoragePool = defaultStoragePool.Name,
    ///         Protocols = new[]
    ///         {
    ///             "NFSV3",
    ///         },
    ///         DeletionPolicy = "DEFAULT",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Volume can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/volumes/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, Volume can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/volume:Volume default projects/{{project}}/locations/{{location}}/volumes/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/volume:Volume default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/volume:Volume default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:netapp/volume:Volume")]
    public partial class Volume : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
        /// </summary>
        [Output("activeDirectory")]
        public Output<string> ActiveDirectory { get; private set; } = null!;

        /// <summary>
        /// Backup configuration for the volume.
        /// Structure is documented below.
        /// </summary>
        [Output("backupConfig")]
        public Output<Outputs.VolumeBackupConfig?> BackupConfig { get; private set; } = null!;

        /// <summary>
        /// Capacity of the volume (in GiB).
        /// </summary>
        [Output("capacityGib")]
        public Output<string> CapacityGib { get; private set; } = null!;

        /// <summary>
        /// Output only. Size of the volume cold tier data in GiB.
        /// </summary>
        [Output("coldTierSizeGib")]
        public Output<string> ColdTierSizeGib { get; private set; } = null!;

        /// <summary>
        /// Create time of the volume. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Policy to determine if the volume should be deleted forcefully.
        /// Volumes may have nested snapshot resources. Deleting such a volume will fail.
        /// Setting this parameter to FORCE will delete volumes including nested snapshots.
        /// Possible values: DEFAULT, FORCE.
        /// </summary>
        [Output("deletionPolicy")]
        public Output<string?> DeletionPolicy { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
        /// </summary>
        [Output("encryptionType")]
        public Output<string> EncryptionType { get; private set; } = null!;

        /// <summary>
        /// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
        /// Structure is documented below.
        /// </summary>
        [Output("exportPolicy")]
        public Output<Outputs.VolumeExportPolicy?> ExportPolicy { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the volume is part of a volume replication relationship.
        /// </summary>
        [Output("hasReplication")]
        public Output<bool> HasReplication { get; private set; } = null!;

        /// <summary>
        /// Total hot tier data rounded down to the nearest GiB used by the volume. This field is only used for flex Service Level
        /// </summary>
        [Output("hotTierSizeUsedGib")]
        public Output<string> HotTierSizeUsedGib { get; private set; } = null!;

        /// <summary>
        /// The Hybrid Replication parameters for the volume.
        /// Structure is documented below.
        /// </summary>
        [Output("hybridReplicationParameters")]
        public Output<Outputs.VolumeHybridReplicationParameters?> HybridReplicationParameters { get; private set; } = null!;

        /// <summary>
        /// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
        /// </summary>
        [Output("kerberosEnabled")]
        public Output<bool?> KerberosEnabled { get; private set; } = null!;

        /// <summary>
        /// Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
        /// </summary>
        [Output("kmsConfig")]
        public Output<string> KmsConfig { get; private set; } = null!;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
        /// </summary>
        [Output("largeCapacity")]
        public Output<bool?> LargeCapacity { get; private set; } = null!;

        /// <summary>
        /// Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
        /// </summary>
        [Output("ldapEnabled")]
        public Output<bool> LdapEnabled { get; private set; } = null!;

        /// <summary>
        /// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Reports mount instructions for this volume.
        /// Structure is documented below.
        /// </summary>
        [Output("mountOptions")]
        public Output<ImmutableArray<Outputs.VolumeMountOption>> MountOptions { get; private set; } = null!;

        /// <summary>
        /// Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
        /// Only the volume with largeCapacity will be allowed to have multiple endpoints.
        /// </summary>
        [Output("multipleEndpoints")]
        public Output<bool?> MultipleEndpoints { get; private set; } = null!;

        /// <summary>
        /// The name of the volume. Needs to be unique per location.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The protocol of the volume. Allowed combinations are `['NFSV3']`, `['NFSV4']`, `['SMB']`, `['NFSV3', 'NFSV4']`, `['SMB', 'NFSV3']` and `['SMB', 'NFSV4']`.
        /// Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
        /// </summary>
        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        /// <summary>
        /// Name of the Private Service Access allocated range. Inherited from storage pool.
        /// </summary>
        [Output("psaRange")]
        public Output<string> PsaRange { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Specifies the replica zone for regional volume.
        /// </summary>
        [Output("replicaZone")]
        public Output<string> ReplicaZone { get; private set; } = null!;

        /// <summary>
        /// Used to create this volume from a snapshot (= cloning) or an backup.
        /// Structure is documented below.
        /// </summary>
        [Output("restoreParameters")]
        public Output<Outputs.VolumeRestoreParameters?> RestoreParameters { get; private set; } = null!;

        /// <summary>
        /// List of actions that are restricted on this volume.
        /// Each value may be one of: `DELETE`.
        /// </summary>
        [Output("restrictedActions")]
        public Output<ImmutableArray<string>> RestrictedActions { get; private set; } = null!;

        /// <summary>
        /// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
        /// Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
        /// Possible values are: `NTFS`, `UNIX`.
        /// </summary>
        [Output("securityStyle")]
        public Output<string> SecurityStyle { get; private set; } = null!;

        /// <summary>
        /// Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTREME, STANDARD, FLEX.
        /// </summary>
        [Output("serviceLevel")]
        public Output<string> ServiceLevel { get; private set; } = null!;

        /// <summary>
        /// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
        /// </summary>
        [Output("shareName")]
        public Output<string> ShareName { get; private set; } = null!;

        /// <summary>
        /// Settings for volumes with SMB access.
        /// Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
        /// </summary>
        [Output("smbSettings")]
        public Output<ImmutableArray<string>> SmbSettings { get; private set; } = null!;

        /// <summary>
        /// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots. Will enable "Previous Versions" support for SMB.
        /// </summary>
        [Output("snapshotDirectory")]
        public Output<bool?> SnapshotDirectory { get; private set; } = null!;

        /// <summary>
        /// Snapshot policy defines the schedule for automatic snapshot creation.
        /// To disable automatic snapshot creation you have to remove the whole snapshot_policy block.
        /// Structure is documented below.
        /// </summary>
        [Output("snapshotPolicy")]
        public Output<Outputs.VolumeSnapshotPolicy?> SnapshotPolicy { get; private set; } = null!;

        /// <summary>
        /// State of the volume.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// State details of the volume.
        /// </summary>
        [Output("stateDetails")]
        public Output<string> StateDetails { get; private set; } = null!;

        /// <summary>
        /// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
        /// </summary>
        [Output("storagePool")]
        public Output<string> StoragePool { get; private set; } = null!;

        /// <summary>
        /// Optional. Custom Performance Total Throughput of the pool (in MiB/s).
        /// </summary>
        [Output("throughputMibps")]
        public Output<double> ThroughputMibps { get; private set; } = null!;

        /// <summary>
        /// Tiering policy for the volume.
        /// Structure is documented below.
        /// </summary>
        [Output("tieringPolicy")]
        public Output<Outputs.VolumeTieringPolicy?> TieringPolicy { get; private set; } = null!;

        /// <summary>
        /// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
        /// </summary>
        [Output("unixPermissions")]
        public Output<string> UnixPermissions { get; private set; } = null!;

        /// <summary>
        /// Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
        /// </summary>
        [Output("usedGib")]
        public Output<string> UsedGib { get; private set; } = null!;

        /// <summary>
        /// Specifies the active zone for regional volume.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Volume resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Volume(string name, VolumeArgs args, CustomResourceOptions? options = null)
            : base("gcp:netapp/volume:Volume", name, args ?? new VolumeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Volume(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
            : base("gcp:netapp/volume:Volume", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Volume resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Volume Get(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
        {
            return new Volume(name, id, state, options);
        }
    }

    public sealed class VolumeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backup configuration for the volume.
        /// Structure is documented below.
        /// </summary>
        [Input("backupConfig")]
        public Input<Inputs.VolumeBackupConfigArgs>? BackupConfig { get; set; }

        /// <summary>
        /// Capacity of the volume (in GiB).
        /// </summary>
        [Input("capacityGib", required: true)]
        public Input<string> CapacityGib { get; set; } = null!;

        /// <summary>
        /// Policy to determine if the volume should be deleted forcefully.
        /// Volumes may have nested snapshot resources. Deleting such a volume will fail.
        /// Setting this parameter to FORCE will delete volumes including nested snapshots.
        /// Possible values: DEFAULT, FORCE.
        /// </summary>
        [Input("deletionPolicy")]
        public Input<string>? DeletionPolicy { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
        /// Structure is documented below.
        /// </summary>
        [Input("exportPolicy")]
        public Input<Inputs.VolumeExportPolicyArgs>? ExportPolicy { get; set; }

        /// <summary>
        /// The Hybrid Replication parameters for the volume.
        /// Structure is documented below.
        /// </summary>
        [Input("hybridReplicationParameters")]
        public Input<Inputs.VolumeHybridReplicationParametersArgs>? HybridReplicationParameters { get; set; }

        /// <summary>
        /// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
        /// </summary>
        [Input("kerberosEnabled")]
        public Input<bool>? KerberosEnabled { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
        /// </summary>
        [Input("largeCapacity")]
        public Input<bool>? LargeCapacity { get; set; }

        /// <summary>
        /// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
        /// Only the volume with largeCapacity will be allowed to have multiple endpoints.
        /// </summary>
        [Input("multipleEndpoints")]
        public Input<bool>? MultipleEndpoints { get; set; }

        /// <summary>
        /// The name of the volume. Needs to be unique per location.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("protocols", required: true)]
        private InputList<string>? _protocols;

        /// <summary>
        /// The protocol of the volume. Allowed combinations are `['NFSV3']`, `['NFSV4']`, `['SMB']`, `['NFSV3', 'NFSV4']`, `['SMB', 'NFSV3']` and `['SMB', 'NFSV4']`.
        /// Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// Used to create this volume from a snapshot (= cloning) or an backup.
        /// Structure is documented below.
        /// </summary>
        [Input("restoreParameters")]
        public Input<Inputs.VolumeRestoreParametersArgs>? RestoreParameters { get; set; }

        [Input("restrictedActions")]
        private InputList<string>? _restrictedActions;

        /// <summary>
        /// List of actions that are restricted on this volume.
        /// Each value may be one of: `DELETE`.
        /// </summary>
        public InputList<string> RestrictedActions
        {
            get => _restrictedActions ?? (_restrictedActions = new InputList<string>());
            set => _restrictedActions = value;
        }

        /// <summary>
        /// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
        /// Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
        /// Possible values are: `NTFS`, `UNIX`.
        /// </summary>
        [Input("securityStyle")]
        public Input<string>? SecurityStyle { get; set; }

        /// <summary>
        /// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
        /// </summary>
        [Input("shareName", required: true)]
        public Input<string> ShareName { get; set; } = null!;

        [Input("smbSettings")]
        private InputList<string>? _smbSettings;

        /// <summary>
        /// Settings for volumes with SMB access.
        /// Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
        /// </summary>
        public InputList<string> SmbSettings
        {
            get => _smbSettings ?? (_smbSettings = new InputList<string>());
            set => _smbSettings = value;
        }

        /// <summary>
        /// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots. Will enable "Previous Versions" support for SMB.
        /// </summary>
        [Input("snapshotDirectory")]
        public Input<bool>? SnapshotDirectory { get; set; }

        /// <summary>
        /// Snapshot policy defines the schedule for automatic snapshot creation.
        /// To disable automatic snapshot creation you have to remove the whole snapshot_policy block.
        /// Structure is documented below.
        /// </summary>
        [Input("snapshotPolicy")]
        public Input<Inputs.VolumeSnapshotPolicyArgs>? SnapshotPolicy { get; set; }

        /// <summary>
        /// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
        /// </summary>
        [Input("storagePool", required: true)]
        public Input<string> StoragePool { get; set; } = null!;

        /// <summary>
        /// Optional. Custom Performance Total Throughput of the pool (in MiB/s).
        /// </summary>
        [Input("throughputMibps")]
        public Input<double>? ThroughputMibps { get; set; }

        /// <summary>
        /// Tiering policy for the volume.
        /// Structure is documented below.
        /// </summary>
        [Input("tieringPolicy")]
        public Input<Inputs.VolumeTieringPolicyArgs>? TieringPolicy { get; set; }

        /// <summary>
        /// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
        /// </summary>
        [Input("unixPermissions")]
        public Input<string>? UnixPermissions { get; set; }

        public VolumeArgs()
        {
        }
        public static new VolumeArgs Empty => new VolumeArgs();
    }

    public sealed class VolumeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
        /// </summary>
        [Input("activeDirectory")]
        public Input<string>? ActiveDirectory { get; set; }

        /// <summary>
        /// Backup configuration for the volume.
        /// Structure is documented below.
        /// </summary>
        [Input("backupConfig")]
        public Input<Inputs.VolumeBackupConfigGetArgs>? BackupConfig { get; set; }

        /// <summary>
        /// Capacity of the volume (in GiB).
        /// </summary>
        [Input("capacityGib")]
        public Input<string>? CapacityGib { get; set; }

        /// <summary>
        /// Output only. Size of the volume cold tier data in GiB.
        /// </summary>
        [Input("coldTierSizeGib")]
        public Input<string>? ColdTierSizeGib { get; set; }

        /// <summary>
        /// Create time of the volume. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Policy to determine if the volume should be deleted forcefully.
        /// Volumes may have nested snapshot resources. Deleting such a volume will fail.
        /// Setting this parameter to FORCE will delete volumes including nested snapshots.
        /// Possible values: DEFAULT, FORCE.
        /// </summary>
        [Input("deletionPolicy")]
        public Input<string>? DeletionPolicy { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
        /// </summary>
        [Input("encryptionType")]
        public Input<string>? EncryptionType { get; set; }

        /// <summary>
        /// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
        /// Structure is documented below.
        /// </summary>
        [Input("exportPolicy")]
        public Input<Inputs.VolumeExportPolicyGetArgs>? ExportPolicy { get; set; }

        /// <summary>
        /// Indicates whether the volume is part of a volume replication relationship.
        /// </summary>
        [Input("hasReplication")]
        public Input<bool>? HasReplication { get; set; }

        /// <summary>
        /// Total hot tier data rounded down to the nearest GiB used by the volume. This field is only used for flex Service Level
        /// </summary>
        [Input("hotTierSizeUsedGib")]
        public Input<string>? HotTierSizeUsedGib { get; set; }

        /// <summary>
        /// The Hybrid Replication parameters for the volume.
        /// Structure is documented below.
        /// </summary>
        [Input("hybridReplicationParameters")]
        public Input<Inputs.VolumeHybridReplicationParametersGetArgs>? HybridReplicationParameters { get; set; }

        /// <summary>
        /// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
        /// </summary>
        [Input("kerberosEnabled")]
        public Input<bool>? KerberosEnabled { get; set; }

        /// <summary>
        /// Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
        /// </summary>
        [Input("kmsConfig")]
        public Input<string>? KmsConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
        /// </summary>
        [Input("largeCapacity")]
        public Input<bool>? LargeCapacity { get; set; }

        /// <summary>
        /// Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
        /// </summary>
        [Input("ldapEnabled")]
        public Input<bool>? LdapEnabled { get; set; }

        /// <summary>
        /// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("mountOptions")]
        private InputList<Inputs.VolumeMountOptionGetArgs>? _mountOptions;

        /// <summary>
        /// Reports mount instructions for this volume.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.VolumeMountOptionGetArgs> MountOptions
        {
            get => _mountOptions ?? (_mountOptions = new InputList<Inputs.VolumeMountOptionGetArgs>());
            set => _mountOptions = value;
        }

        /// <summary>
        /// Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
        /// Only the volume with largeCapacity will be allowed to have multiple endpoints.
        /// </summary>
        [Input("multipleEndpoints")]
        public Input<bool>? MultipleEndpoints { get; set; }

        /// <summary>
        /// The name of the volume. Needs to be unique per location.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// The protocol of the volume. Allowed combinations are `['NFSV3']`, `['NFSV4']`, `['SMB']`, `['NFSV3', 'NFSV4']`, `['SMB', 'NFSV3']` and `['SMB', 'NFSV4']`.
        /// Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// Name of the Private Service Access allocated range. Inherited from storage pool.
        /// </summary>
        [Input("psaRange")]
        public Input<string>? PsaRange { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Specifies the replica zone for regional volume.
        /// </summary>
        [Input("replicaZone")]
        public Input<string>? ReplicaZone { get; set; }

        /// <summary>
        /// Used to create this volume from a snapshot (= cloning) or an backup.
        /// Structure is documented below.
        /// </summary>
        [Input("restoreParameters")]
        public Input<Inputs.VolumeRestoreParametersGetArgs>? RestoreParameters { get; set; }

        [Input("restrictedActions")]
        private InputList<string>? _restrictedActions;

        /// <summary>
        /// List of actions that are restricted on this volume.
        /// Each value may be one of: `DELETE`.
        /// </summary>
        public InputList<string> RestrictedActions
        {
            get => _restrictedActions ?? (_restrictedActions = new InputList<string>());
            set => _restrictedActions = value;
        }

        /// <summary>
        /// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
        /// Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
        /// Possible values are: `NTFS`, `UNIX`.
        /// </summary>
        [Input("securityStyle")]
        public Input<string>? SecurityStyle { get; set; }

        /// <summary>
        /// Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTREME, STANDARD, FLEX.
        /// </summary>
        [Input("serviceLevel")]
        public Input<string>? ServiceLevel { get; set; }

        /// <summary>
        /// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
        /// </summary>
        [Input("shareName")]
        public Input<string>? ShareName { get; set; }

        [Input("smbSettings")]
        private InputList<string>? _smbSettings;

        /// <summary>
        /// Settings for volumes with SMB access.
        /// Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
        /// </summary>
        public InputList<string> SmbSettings
        {
            get => _smbSettings ?? (_smbSettings = new InputList<string>());
            set => _smbSettings = value;
        }

        /// <summary>
        /// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots. Will enable "Previous Versions" support for SMB.
        /// </summary>
        [Input("snapshotDirectory")]
        public Input<bool>? SnapshotDirectory { get; set; }

        /// <summary>
        /// Snapshot policy defines the schedule for automatic snapshot creation.
        /// To disable automatic snapshot creation you have to remove the whole snapshot_policy block.
        /// Structure is documented below.
        /// </summary>
        [Input("snapshotPolicy")]
        public Input<Inputs.VolumeSnapshotPolicyGetArgs>? SnapshotPolicy { get; set; }

        /// <summary>
        /// State of the volume.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// State details of the volume.
        /// </summary>
        [Input("stateDetails")]
        public Input<string>? StateDetails { get; set; }

        /// <summary>
        /// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
        /// </summary>
        [Input("storagePool")]
        public Input<string>? StoragePool { get; set; }

        /// <summary>
        /// Optional. Custom Performance Total Throughput of the pool (in MiB/s).
        /// </summary>
        [Input("throughputMibps")]
        public Input<double>? ThroughputMibps { get; set; }

        /// <summary>
        /// Tiering policy for the volume.
        /// Structure is documented below.
        /// </summary>
        [Input("tieringPolicy")]
        public Input<Inputs.VolumeTieringPolicyGetArgs>? TieringPolicy { get; set; }

        /// <summary>
        /// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
        /// </summary>
        [Input("unixPermissions")]
        public Input<string>? UnixPermissions { get; set; }

        /// <summary>
        /// Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
        /// </summary>
        [Input("usedGib")]
        public Input<string>? UsedGib { get; set; }

        /// <summary>
        /// Specifies the active zone for regional volume.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public VolumeState()
        {
        }
        public static new VolumeState Empty => new VolumeState();
    }
}
