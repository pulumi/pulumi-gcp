// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Netapp
{
    /// <summary>
    /// ActiveDirectory is the public representation of the active directory config.
    /// 
    /// To get more information about ActiveDirectory, see:
    /// 
    /// * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.activeDirectories)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/active-directory/about-ad)
    /// 
    /// ## Example Usage
    /// 
    /// ### Netapp Active Directory Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testActiveDirectoryFull = new Gcp.Netapp.ActiveDirectory("test_active_directory_full", new()
    ///     {
    ///         Name = "test-active-directory-full",
    ///         Location = "us-central1",
    ///         Domain = "ad.internal",
    ///         Dns = "172.30.64.3",
    ///         NetBiosPrefix = "smbserver",
    ///         Username = "user",
    ///         Password = "pass",
    ///         AesEncryption = false,
    ///         BackupOperators = new[]
    ///         {
    ///             "test1",
    ///             "test2",
    ///         },
    ///         Administrators = new[]
    ///         {
    ///             "test1",
    ///             "test2",
    ///         },
    ///         Description = "ActiveDirectory is the public representation of the active directory config.",
    ///         EncryptDcConnections = false,
    ///         KdcHostname = "hostname",
    ///         KdcIp = "10.10.0.11",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         LdapSigning = false,
    ///         NfsUsersWithLdap = false,
    ///         OrganizationalUnit = "CN=Computers",
    ///         SecurityOperators = new[]
    ///         {
    ///             "test1",
    ///             "test2",
    ///         },
    ///         Site = "test-site",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ActiveDirectory can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, ActiveDirectory can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/activeDirectory:ActiveDirectory default projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/activeDirectory:ActiveDirectory default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/activeDirectory:ActiveDirectory default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:netapp/activeDirectory:ActiveDirectory")]
    public partial class ActiveDirectory : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
        /// </summary>
        [Output("administrators")]
        public Output<ImmutableArray<string>> Administrators { get; private set; } = null!;

        /// <summary>
        /// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
        /// </summary>
        [Output("aesEncryption")]
        public Output<bool?> AesEncryption { get; private set; } = null!;

        /// <summary>
        /// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
        /// </summary>
        [Output("backupOperators")]
        public Output<ImmutableArray<string>> BackupOperators { get; private set; } = null!;

        /// <summary>
        /// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Comma separated list of DNS server IP addresses for the Active Directory domain.
        /// </summary>
        [Output("dns")]
        public Output<string> Dns { get; private set; } = null!;

        /// <summary>
        /// Fully qualified domain name for the Active Directory domain.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
        /// </summary>
        [Output("encryptDcConnections")]
        public Output<bool?> EncryptDcConnections { get; private set; } = null!;

        /// <summary>
        /// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
        /// </summary>
        [Output("kdcHostname")]
        public Output<string?> KdcHostname { get; private set; } = null!;

        /// <summary>
        /// IP address of the Active Directory server used as Kerberos Key Distribution Center.
        /// </summary>
        [Output("kdcIp")]
        public Output<string?> KdcIp { get; private set; } = null!;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Specifies whether or not the LDAP traffic needs to be signed.
        /// </summary>
        [Output("ldapSigning")]
        public Output<bool?> LdapSigning { get; private set; } = null!;

        /// <summary>
        /// Name of the region for the policy to apply to.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the Active Directory pool. Needs to be unique per location.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// NetBIOS name prefix of the server to be created.
        /// A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
        /// `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
        /// </summary>
        [Output("netBiosPrefix")]
        public Output<string> NetBiosPrefix { get; private set; } = null!;

        /// <summary>
        /// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
        /// This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
        /// </summary>
        [Output("nfsUsersWithLdap")]
        public Output<bool?> NfsUsersWithLdap { get; private set; } = null!;

        /// <summary>
        /// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
        /// Defaults to `CN=Computers` if left empty.
        /// </summary>
        [Output("organizationalUnit")]
        public Output<string> OrganizationalUnit { get; private set; } = null!;

        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
        /// </summary>
        [Output("securityOperators")]
        public Output<ImmutableArray<string>> SecurityOperators { get; private set; } = null!;

        /// <summary>
        /// Specifies an Active Directory site to manage domain controller selection.
        /// Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
        /// </summary>
        [Output("site")]
        public Output<string?> Site { get; private set; } = null!;

        /// <summary>
        /// The state of the Active Directory policy (not the Active Directory itself).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The state details of the Active Directory.
        /// </summary>
        [Output("stateDetails")]
        public Output<string> StateDetails { get; private set; } = null!;

        /// <summary>
        /// Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a ActiveDirectory resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ActiveDirectory(string name, ActiveDirectoryArgs args, CustomResourceOptions? options = null)
            : base("gcp:netapp/activeDirectory:ActiveDirectory", name, args ?? new ActiveDirectoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ActiveDirectory(string name, Input<string> id, ActiveDirectoryState? state = null, CustomResourceOptions? options = null)
            : base("gcp:netapp/activeDirectory:ActiveDirectory", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "password",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ActiveDirectory resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ActiveDirectory Get(string name, Input<string> id, ActiveDirectoryState? state = null, CustomResourceOptions? options = null)
        {
            return new ActiveDirectory(name, id, state, options);
        }
    }

    public sealed class ActiveDirectoryArgs : global::Pulumi.ResourceArgs
    {
        [Input("administrators")]
        private InputList<string>? _administrators;

        /// <summary>
        /// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
        /// </summary>
        public InputList<string> Administrators
        {
            get => _administrators ?? (_administrators = new InputList<string>());
            set => _administrators = value;
        }

        /// <summary>
        /// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
        /// </summary>
        [Input("aesEncryption")]
        public Input<bool>? AesEncryption { get; set; }

        [Input("backupOperators")]
        private InputList<string>? _backupOperators;

        /// <summary>
        /// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
        /// </summary>
        public InputList<string> BackupOperators
        {
            get => _backupOperators ?? (_backupOperators = new InputList<string>());
            set => _backupOperators = value;
        }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Comma separated list of DNS server IP addresses for the Active Directory domain.
        /// </summary>
        [Input("dns", required: true)]
        public Input<string> Dns { get; set; } = null!;

        /// <summary>
        /// Fully qualified domain name for the Active Directory domain.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
        /// </summary>
        [Input("encryptDcConnections")]
        public Input<bool>? EncryptDcConnections { get; set; }

        /// <summary>
        /// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
        /// </summary>
        [Input("kdcHostname")]
        public Input<string>? KdcHostname { get; set; }

        /// <summary>
        /// IP address of the Active Directory server used as Kerberos Key Distribution Center.
        /// </summary>
        [Input("kdcIp")]
        public Input<string>? KdcIp { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Specifies whether or not the LDAP traffic needs to be signed.
        /// </summary>
        [Input("ldapSigning")]
        public Input<bool>? LdapSigning { get; set; }

        /// <summary>
        /// Name of the region for the policy to apply to.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The resource name of the Active Directory pool. Needs to be unique per location.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// NetBIOS name prefix of the server to be created.
        /// A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
        /// `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
        /// </summary>
        [Input("netBiosPrefix", required: true)]
        public Input<string> NetBiosPrefix { get; set; } = null!;

        /// <summary>
        /// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
        /// This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
        /// </summary>
        [Input("nfsUsersWithLdap")]
        public Input<bool>? NfsUsersWithLdap { get; set; }

        /// <summary>
        /// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
        /// Defaults to `CN=Computers` if left empty.
        /// </summary>
        [Input("organizationalUnit")]
        public Input<string>? OrganizationalUnit { get; set; }

        [Input("password", required: true)]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("securityOperators")]
        private InputList<string>? _securityOperators;

        /// <summary>
        /// Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
        /// </summary>
        public InputList<string> SecurityOperators
        {
            get => _securityOperators ?? (_securityOperators = new InputList<string>());
            set => _securityOperators = value;
        }

        /// <summary>
        /// Specifies an Active Directory site to manage domain controller selection.
        /// Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public ActiveDirectoryArgs()
        {
        }
        public static new ActiveDirectoryArgs Empty => new ActiveDirectoryArgs();
    }

    public sealed class ActiveDirectoryState : global::Pulumi.ResourceArgs
    {
        [Input("administrators")]
        private InputList<string>? _administrators;

        /// <summary>
        /// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
        /// </summary>
        public InputList<string> Administrators
        {
            get => _administrators ?? (_administrators = new InputList<string>());
            set => _administrators = value;
        }

        /// <summary>
        /// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
        /// </summary>
        [Input("aesEncryption")]
        public Input<bool>? AesEncryption { get; set; }

        [Input("backupOperators")]
        private InputList<string>? _backupOperators;

        /// <summary>
        /// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
        /// </summary>
        public InputList<string> BackupOperators
        {
            get => _backupOperators ?? (_backupOperators = new InputList<string>());
            set => _backupOperators = value;
        }

        /// <summary>
        /// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Comma separated list of DNS server IP addresses for the Active Directory domain.
        /// </summary>
        [Input("dns")]
        public Input<string>? Dns { get; set; }

        /// <summary>
        /// Fully qualified domain name for the Active Directory domain.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
        /// </summary>
        [Input("encryptDcConnections")]
        public Input<bool>? EncryptDcConnections { get; set; }

        /// <summary>
        /// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
        /// </summary>
        [Input("kdcHostname")]
        public Input<string>? KdcHostname { get; set; }

        /// <summary>
        /// IP address of the Active Directory server used as Kerberos Key Distribution Center.
        /// </summary>
        [Input("kdcIp")]
        public Input<string>? KdcIp { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Specifies whether or not the LDAP traffic needs to be signed.
        /// </summary>
        [Input("ldapSigning")]
        public Input<bool>? LdapSigning { get; set; }

        /// <summary>
        /// Name of the region for the policy to apply to.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the Active Directory pool. Needs to be unique per location.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// NetBIOS name prefix of the server to be created.
        /// A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
        /// `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
        /// </summary>
        [Input("netBiosPrefix")]
        public Input<string>? NetBiosPrefix { get; set; }

        /// <summary>
        /// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
        /// This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
        /// </summary>
        [Input("nfsUsersWithLdap")]
        public Input<bool>? NfsUsersWithLdap { get; set; }

        /// <summary>
        /// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
        /// Defaults to `CN=Computers` if left empty.
        /// </summary>
        [Input("organizationalUnit")]
        public Input<string>? OrganizationalUnit { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("securityOperators")]
        private InputList<string>? _securityOperators;

        /// <summary>
        /// Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
        /// </summary>
        public InputList<string> SecurityOperators
        {
            get => _securityOperators ?? (_securityOperators = new InputList<string>());
            set => _securityOperators = value;
        }

        /// <summary>
        /// Specifies an Active Directory site to manage domain controller selection.
        /// Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The state of the Active Directory policy (not the Active Directory itself).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The state details of the Active Directory.
        /// </summary>
        [Input("stateDetails")]
        public Input<string>? StateDetails { get; set; }

        /// <summary>
        /// Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ActiveDirectoryState()
        {
        }
        public static new ActiveDirectoryState Empty => new ActiveDirectoryState();
    }
}
