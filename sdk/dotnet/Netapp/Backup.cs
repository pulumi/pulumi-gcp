// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Netapp
{
    /// <summary>
    /// NetApp Volumes supports volume backups, which are copies of your volumes
    /// stored independently from the volume. Backups are stored in backup vaults,
    /// which are containers for backups. If a volume is lost or deleted, you can
    /// use backups to restore your data to a new volume.
    /// 
    /// When you create the first backup of a volume, all of the volume's used
    /// data is sent to the backup vault. Subsequent backups of the same volume
    /// only include data that has changed from the previous backup. This allows
    /// for fast incremental-forever backups and reduces the required capacity
    /// inside the backup vault.
    /// 
    /// You can create manual and scheduled backups. Manual backups can be taken
    /// from a volume or from an existing volume snapshot. Scheduled backups
    /// require a backup policy.
    /// 
    /// To get more information about Backup, see:
    /// 
    /// * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.backupVaults.backups)
    /// * How-to Guides
    ///     * [Documentation](https://cloud.google.com/netapp/volumes/docs/protect-data/about-volume-backups)
    /// 
    /// ## Example Usage
    /// 
    /// ### Netapp Backup
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = Gcp.Compute.GetNetwork.Invoke(new()
    ///     {
    ///         Name = "network",
    ///     });
    /// 
    ///     var defaultStoragePool = new Gcp.Netapp.StoragePool("default", new()
    ///     {
    ///         Name = "backup-pool",
    ///         Location = "us-central1",
    ///         ServiceLevel = "PREMIUM",
    ///         CapacityGib = "2048",
    ///         Network = @default.Apply(@default =&gt; @default.Apply(getNetworkResult =&gt; getNetworkResult.Id)),
    ///     });
    /// 
    ///     var defaultBackupVault = new Gcp.Netapp.BackupVault("default", new()
    ///     {
    ///         Name = "backup-vault",
    ///         Location = defaultStoragePool.Location,
    ///     });
    /// 
    ///     var defaultVolume = new Gcp.Netapp.Volume("default", new()
    ///     {
    ///         Name = "backup-volume",
    ///         Location = defaultStoragePool.Location,
    ///         CapacityGib = "100",
    ///         ShareName = "backup-volume",
    ///         StoragePool = defaultStoragePool.Name,
    ///         Protocols = new[]
    ///         {
    ///             "NFSV3",
    ///         },
    ///         DeletionPolicy = "FORCE",
    ///         BackupConfig = new Gcp.Netapp.Inputs.VolumeBackupConfigArgs
    ///         {
    ///             BackupVault = defaultBackupVault.Id,
    ///         },
    ///     });
    /// 
    ///     var testBackup = new Gcp.Netapp.Backup("test_backup", new()
    ///     {
    ///         Name = "test-backup",
    ///         Location = defaultBackupVault.Location,
    ///         VaultName = defaultBackupVault.Name,
    ///         SourceVolume = defaultVolume.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Backup can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/backupVaults/{{vault_name}}/backups/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{vault_name}}/{{name}}`
    /// 
    /// * `{{location}}/{{vault_name}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, Backup can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/backup:Backup default projects/{{project}}/locations/{{location}}/backupVaults/{{vault_name}}/backups/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/backup:Backup default {{project}}/{{location}}/{{vault_name}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/backup:Backup default {{location}}/{{vault_name}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:netapp/backup:Backup")]
    public partial class Backup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Region in which backup is stored.
        /// </summary>
        [Output("backupRegion")]
        public Output<string> BackupRegion { get; private set; } = null!;

        /// <summary>
        /// Type of backup, manually created or created by a backup policy. Possible Values : [TYPE_UNSPECIFIED, MANUAL, SCHEDULED]
        /// </summary>
        [Output("backupType")]
        public Output<string> BackupType { get; private set; } = null!;

        /// <summary>
        /// Backups of a volume build incrementally on top of each other. They form a "backup chain".
        /// Total size of all backups in a chain in bytes = baseline backup size + sum(incremental backup size)
        /// </summary>
        [Output("chainStorageBytes")]
        public Output<string> ChainStorageBytes { get; private set; } = null!;

        /// <summary>
        /// Create time of the backup. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Location of the backup.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the backup. Needs to be unique per location.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// If specified, backup will be created from the given snapshot. If not specified,
        /// there will be a new snapshot taken to initiate the backup creation.
        /// Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
        /// </summary>
        [Output("sourceSnapshot")]
        public Output<string?> SourceSnapshot { get; private set; } = null!;

        /// <summary>
        /// ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
        /// </summary>
        [Output("sourceVolume")]
        public Output<string?> SourceVolume { get; private set; } = null!;

        /// <summary>
        /// The state of the Backup Vault. Possible Values : [STATE_UNSPECIFIED, CREATING, UPLOADING, READY, DELETING, ERROR, UPDATING]
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Name of the backup vault to store the backup in.
        /// </summary>
        [Output("vaultName")]
        public Output<string> VaultName { get; private set; } = null!;

        /// <summary>
        /// Region of the volume from which the backup was created.
        /// </summary>
        [Output("volumeRegion")]
        public Output<string> VolumeRegion { get; private set; } = null!;

        /// <summary>
        /// Size of the file system when the backup was created. When creating a new volume from the backup, the volume capacity will have to be at least as big.
        /// </summary>
        [Output("volumeUsageBytes")]
        public Output<string> VolumeUsageBytes { get; private set; } = null!;


        /// <summary>
        /// Create a Backup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Backup(string name, BackupArgs args, CustomResourceOptions? options = null)
            : base("gcp:netapp/backup:Backup", name, args ?? new BackupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Backup(string name, Input<string> id, BackupState? state = null, CustomResourceOptions? options = null)
            : base("gcp:netapp/backup:Backup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Backup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Backup Get(string name, Input<string> id, BackupState? state = null, CustomResourceOptions? options = null)
        {
            return new Backup(name, id, state, options);
        }
    }

    public sealed class BackupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Location of the backup.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The resource name of the backup. Needs to be unique per location.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// If specified, backup will be created from the given snapshot. If not specified,
        /// there will be a new snapshot taken to initiate the backup creation.
        /// Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
        /// </summary>
        [Input("sourceSnapshot")]
        public Input<string>? SourceSnapshot { get; set; }

        /// <summary>
        /// ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
        /// </summary>
        [Input("sourceVolume")]
        public Input<string>? SourceVolume { get; set; }

        /// <summary>
        /// Name of the backup vault to store the backup in.
        /// </summary>
        [Input("vaultName", required: true)]
        public Input<string> VaultName { get; set; } = null!;

        public BackupArgs()
        {
        }
        public static new BackupArgs Empty => new BackupArgs();
    }

    public sealed class BackupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Region in which backup is stored.
        /// </summary>
        [Input("backupRegion")]
        public Input<string>? BackupRegion { get; set; }

        /// <summary>
        /// Type of backup, manually created or created by a backup policy. Possible Values : [TYPE_UNSPECIFIED, MANUAL, SCHEDULED]
        /// </summary>
        [Input("backupType")]
        public Input<string>? BackupType { get; set; }

        /// <summary>
        /// Backups of a volume build incrementally on top of each other. They form a "backup chain".
        /// Total size of all backups in a chain in bytes = baseline backup size + sum(incremental backup size)
        /// </summary>
        [Input("chainStorageBytes")]
        public Input<string>? ChainStorageBytes { get; set; }

        /// <summary>
        /// Create time of the backup. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Location of the backup.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the backup. Needs to be unique per location.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// If specified, backup will be created from the given snapshot. If not specified,
        /// there will be a new snapshot taken to initiate the backup creation.
        /// Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
        /// </summary>
        [Input("sourceSnapshot")]
        public Input<string>? SourceSnapshot { get; set; }

        /// <summary>
        /// ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
        /// </summary>
        [Input("sourceVolume")]
        public Input<string>? SourceVolume { get; set; }

        /// <summary>
        /// The state of the Backup Vault. Possible Values : [STATE_UNSPECIFIED, CREATING, UPLOADING, READY, DELETING, ERROR, UPDATING]
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Name of the backup vault to store the backup in.
        /// </summary>
        [Input("vaultName")]
        public Input<string>? VaultName { get; set; }

        /// <summary>
        /// Region of the volume from which the backup was created.
        /// </summary>
        [Input("volumeRegion")]
        public Input<string>? VolumeRegion { get; set; }

        /// <summary>
        /// Size of the file system when the backup was created. When creating a new volume from the backup, the volume capacity will have to be at least as big.
        /// </summary>
        [Input("volumeUsageBytes")]
        public Input<string>? VolumeUsageBytes { get; set; }

        public BackupState()
        {
        }
        public static new BackupState Empty => new BackupState();
    }
}
