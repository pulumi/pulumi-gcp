// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Netapp
{
    /// <summary>
    /// Storage pools act as containers for volumes. All volumes in a storage pool share the following information:
    /// * Location
    /// * Service level
    /// * Virtual Private Cloud (VPC) network
    /// * Active Directory policy
    /// * LDAP use for NFS volumes, if applicable
    /// * Customer-managed encryption key (CMEK) policy
    /// 
    /// The capacity of the pool can be split up and assigned to volumes within the pool. Storage pools are a billable
    /// component of NetApp Volumes. Billing is based on the location, service level, and capacity allocated to a pool
    /// independent of consumption at the volume level.
    /// 
    /// To get more information about storagePool, see:
    /// 
    /// * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.storagePools)
    /// * How-to Guides
    ///     * [QUICKSTART_TITLE](https://cloud.google.com/netapp/volumes/docs/get-started/quickstarts/create-storage-pool)
    /// 
    /// ## Example Usage
    /// ### Storage Pool Create
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a network or use datasource to reference existing network
    ///     var peeringNetwork = new Gcp.Compute.Network("peeringNetwork");
    /// 
    ///     // Reserve a CIDR for NetApp Volumes to use
    ///     // When using shared-VPCs, this resource needs to be created in host project
    ///     var privateIpAlloc = new Gcp.Compute.GlobalAddress("privateIpAlloc", new()
    ///     {
    ///         Purpose = "VPC_PEERING",
    ///         AddressType = "INTERNAL",
    ///         PrefixLength = 16,
    ///         Network = peeringNetwork.Id,
    ///     });
    /// 
    ///     // Create a Private Service Access connection
    ///     // When using shared-VPCs, this resource needs to be created in host project
    ///     var @default = new Gcp.ServiceNetworking.Connection("default", new()
    ///     {
    ///         Network = peeringNetwork.Id,
    ///         Service = "netapp.servicenetworking.goog",
    ///         ReservedPeeringRanges = new[]
    ///         {
    ///             privateIpAlloc.Name,
    ///         },
    ///     });
    /// 
    ///     // Modify the PSA Connection to allow import/export of custom routes
    ///     // When using shared-VPCs, this resource needs to be created in host project
    ///     var routeUpdates = new Gcp.Compute.NetworkPeeringRoutesConfig("routeUpdates", new()
    ///     {
    ///         Peering = @default.Peering,
    ///         Network = peeringNetwork.Name,
    ///         ImportCustomRoutes = true,
    ///         ExportCustomRoutes = true,
    ///     });
    /// 
    ///     // Create a storage pool
    ///     // Create this resource in the project which is expected to own the volumes
    ///     var testPool = new Gcp.Netapp.StoragePool("testPool", new()
    ///     {
    ///         Location = "us-central1",
    ///         ServiceLevel = "PREMIUM",
    ///         CapacityGib = "2048",
    ///         Network = peeringNetwork.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// storagePool can be imported using any of these accepted formats:
    /// 
    ///  * `projects/{{project}}/locations/{{location}}/storagePools/{{name}}`
    /// 
    ///  * `{{project}}/{{location}}/{{name}}`
    /// 
    ///  * `{{location}}/{{name}}`
    /// 
    ///  When using the `pulumi import` command, storagePool can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/storagePool:StoragePool default projects/{{project}}/locations/{{location}}/storagePools/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/storagePool:StoragePool default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:netapp/storagePool:StoragePool default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:netapp/storagePool:StoragePool")]
    public partial class StoragePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the Active Directory policy to be used. Format: `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`.
        /// The policy needs to be in the same location as the storage pool.
        /// </summary>
        [Output("activeDirectory")]
        public Output<string?> ActiveDirectory { get; private set; } = null!;

        /// <summary>
        /// Capacity of the storage pool (in GiB).
        /// </summary>
        [Output("capacityGib")]
        public Output<string> CapacityGib { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Reports if volumes in the pool are encrypted using a Google-managed encryption key or CMEK.
        /// </summary>
        [Output("encryptionType")]
        public Output<string> EncryptionType { get; private set; } = null!;

        /// <summary>
        /// Specifies the CMEK policy to be used for volume encryption. Format: `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`.
        /// The policy needs to be in the same location as the storage pool.
        /// </summary>
        [Output("kmsConfig")]
        public Output<string?> KmsConfig { get; private set; } = null!;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended group support for NFSv3,
        /// using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
        /// </summary>
        [Output("ldapEnabled")]
        public Output<bool?> LdapEnabled { get; private set; } = null!;

        /// <summary>
        /// Name of the location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the storage pool. Needs to be unique per location.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// VPC network name with format: `projects/{{project}}/global/networks/{{network}}`
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Service level of the storage pool.
        /// Possible values are: `PREMIUM`, `EXTREME`, `STANDARD`.
        /// </summary>
        [Output("serviceLevel")]
        public Output<string> ServiceLevel { get; private set; } = null!;

        /// <summary>
        /// Size allocated to volumes in the storage pool (in GiB).
        /// </summary>
        [Output("volumeCapacityGib")]
        public Output<string> VolumeCapacityGib { get; private set; } = null!;

        /// <summary>
        /// Number of volume in the storage pool.
        /// </summary>
        [Output("volumeCount")]
        public Output<int> VolumeCount { get; private set; } = null!;


        /// <summary>
        /// Create a StoragePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StoragePool(string name, StoragePoolArgs args, CustomResourceOptions? options = null)
            : base("gcp:netapp/storagePool:StoragePool", name, args ?? new StoragePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StoragePool(string name, Input<string> id, StoragePoolState? state = null, CustomResourceOptions? options = null)
            : base("gcp:netapp/storagePool:StoragePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StoragePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StoragePool Get(string name, Input<string> id, StoragePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new StoragePool(name, id, state, options);
        }
    }

    public sealed class StoragePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Active Directory policy to be used. Format: `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`.
        /// The policy needs to be in the same location as the storage pool.
        /// </summary>
        [Input("activeDirectory")]
        public Input<string>? ActiveDirectory { get; set; }

        /// <summary>
        /// Capacity of the storage pool (in GiB).
        /// </summary>
        [Input("capacityGib", required: true)]
        public Input<string> CapacityGib { get; set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the CMEK policy to be used for volume encryption. Format: `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`.
        /// The policy needs to be in the same location as the storage pool.
        /// </summary>
        [Input("kmsConfig")]
        public Input<string>? KmsConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended group support for NFSv3,
        /// using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
        /// </summary>
        [Input("ldapEnabled")]
        public Input<bool>? LdapEnabled { get; set; }

        /// <summary>
        /// Name of the location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The resource name of the storage pool. Needs to be unique per location.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// VPC network name with format: `projects/{{project}}/global/networks/{{network}}`
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Service level of the storage pool.
        /// Possible values are: `PREMIUM`, `EXTREME`, `STANDARD`.
        /// </summary>
        [Input("serviceLevel", required: true)]
        public Input<string> ServiceLevel { get; set; } = null!;

        public StoragePoolArgs()
        {
        }
        public static new StoragePoolArgs Empty => new StoragePoolArgs();
    }

    public sealed class StoragePoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Active Directory policy to be used. Format: `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`.
        /// The policy needs to be in the same location as the storage pool.
        /// </summary>
        [Input("activeDirectory")]
        public Input<string>? ActiveDirectory { get; set; }

        /// <summary>
        /// Capacity of the storage pool (in GiB).
        /// </summary>
        [Input("capacityGib")]
        public Input<string>? CapacityGib { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Reports if volumes in the pool are encrypted using a Google-managed encryption key or CMEK.
        /// </summary>
        [Input("encryptionType")]
        public Input<string>? EncryptionType { get; set; }

        /// <summary>
        /// Specifies the CMEK policy to be used for volume encryption. Format: `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`.
        /// The policy needs to be in the same location as the storage pool.
        /// </summary>
        [Input("kmsConfig")]
        public Input<string>? KmsConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended group support for NFSv3,
        /// using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
        /// </summary>
        [Input("ldapEnabled")]
        public Input<bool>? LdapEnabled { get; set; }

        /// <summary>
        /// Name of the location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the storage pool. Needs to be unique per location.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// VPC network name with format: `projects/{{project}}/global/networks/{{network}}`
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Service level of the storage pool.
        /// Possible values are: `PREMIUM`, `EXTREME`, `STANDARD`.
        /// </summary>
        [Input("serviceLevel")]
        public Input<string>? ServiceLevel { get; set; }

        /// <summary>
        /// Size allocated to volumes in the storage pool (in GiB).
        /// </summary>
        [Input("volumeCapacityGib")]
        public Input<string>? VolumeCapacityGib { get; set; }

        /// <summary>
        /// Number of volume in the storage pool.
        /// </summary>
        [Input("volumeCount")]
        public Input<int>? VolumeCount { get; set; }

        public StoragePoolState()
        {
        }
        public static new StoragePoolState Empty => new StoragePoolState();
    }
}
