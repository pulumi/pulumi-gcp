// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudTasks.Inputs
{

    public sealed class QueueHttpTargetUriOverrideGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Host override.
        /// When specified, replaces the host part of the task URL.
        /// For example, if the task URL is "https://www.google.com", and host value
        /// is set to "example.net", the overridden URI will be changed to "https://example.net".
        /// Host value cannot be an empty string (INVALID_ARGUMENT).
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// URI path.
        /// When specified, replaces the existing path of the task URL.
        /// Setting the path value to an empty string clears the URI path segment.
        /// Structure is documented below.
        /// </summary>
        [Input("pathOverride")]
        public Input<Inputs.QueueHttpTargetUriOverridePathOverrideGetArgs>? PathOverride { get; set; }

        /// <summary>
        /// Port override.
        /// When specified, replaces the port part of the task URI.
        /// For instance, for a URI http://www.google.com/foo and port=123, the overridden URI becomes http://www.google.com:123/foo.
        /// Note that the port value must be a positive integer.
        /// Setting the port to 0 (Zero) clears the URI port.
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// URI query.
        /// When specified, replaces the query part of the task URI. Setting the query value to an empty string clears the URI query segment.
        /// Structure is documented below.
        /// </summary>
        [Input("queryOverride")]
        public Input<Inputs.QueueHttpTargetUriOverrideQueryOverrideGetArgs>? QueryOverride { get; set; }

        /// <summary>
        /// Scheme override.
        /// When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
        /// Possible values are: `HTTP`, `HTTPS`.
        /// </summary>
        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        /// <summary>
        /// URI Override Enforce Mode
        /// When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
        /// Possible values are: `ALWAYS`, `IF_NOT_EXISTS`.
        /// </summary>
        [Input("uriOverrideEnforceMode")]
        public Input<string>? UriOverrideEnforceMode { get; set; }

        public QueueHttpTargetUriOverrideGetArgs()
        {
        }
        public static new QueueHttpTargetUriOverrideGetArgs Empty => new QueueHttpTargetUriOverrideGetArgs();
    }
}
