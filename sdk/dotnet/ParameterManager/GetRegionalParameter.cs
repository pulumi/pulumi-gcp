// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ParameterManager
{
    public static class GetRegionalParameter
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var regParameterDatasource = Gcp.ParameterManager.GetRegionalParameter.Invoke(new()
        ///     {
        ///         ParameterId = "foobar",
        ///         Location = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRegionalParameterResult> InvokeAsync(GetRegionalParameterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegionalParameterResult>("gcp:parametermanager/getRegionalParameter:getRegionalParameter", args ?? new GetRegionalParameterArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var regParameterDatasource = Gcp.ParameterManager.GetRegionalParameter.Invoke(new()
        ///     {
        ///         ParameterId = "foobar",
        ///         Location = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegionalParameterResult> Invoke(GetRegionalParameterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionalParameterResult>("gcp:parametermanager/getRegionalParameter:getRegionalParameter", args ?? new GetRegionalParameterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var regParameterDatasource = Gcp.ParameterManager.GetRegionalParameter.Invoke(new()
        ///     {
        ///         ParameterId = "foobar",
        ///         Location = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegionalParameterResult> Invoke(GetRegionalParameterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionalParameterResult>("gcp:parametermanager/getRegionalParameter:getRegionalParameter", args ?? new GetRegionalParameterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionalParameterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the regional parameter. eg us-central1
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The name of the regional parameter.
        /// </summary>
        [Input("parameterId", required: true)]
        public string ParameterId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetRegionalParameterArgs()
        {
        }
        public static new GetRegionalParameterArgs Empty => new GetRegionalParameterArgs();
    }

    public sealed class GetRegionalParameterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the regional parameter. eg us-central1
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of the regional parameter.
        /// </summary>
        [Input("parameterId", required: true)]
        public Input<string> ParameterId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetRegionalParameterInvokeArgs()
        {
        }
        public static new GetRegionalParameterInvokeArgs Empty => new GetRegionalParameterInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegionalParameterResult
    {
        public readonly string CreateTime;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly string Format;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Location;
        public readonly string Name;
        public readonly string ParameterId;
        public readonly ImmutableArray<Outputs.GetRegionalParameterPolicyMemberResult> PolicyMembers;
        public readonly string? Project;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetRegionalParameterResult(
            string createTime,

            ImmutableDictionary<string, string> effectiveLabels,

            string format,

            string id,

            ImmutableDictionary<string, string> labels,

            string location,

            string name,

            string parameterId,

            ImmutableArray<Outputs.GetRegionalParameterPolicyMemberResult> policyMembers,

            string? project,

            ImmutableDictionary<string, string> pulumiLabels,

            string updateTime)
        {
            CreateTime = createTime;
            EffectiveLabels = effectiveLabels;
            Format = format;
            Id = id;
            Labels = labels;
            Location = location;
            Name = name;
            ParameterId = parameterId;
            PolicyMembers = policyMembers;
            Project = project;
            PulumiLabels = pulumiLabels;
            UpdateTime = updateTime;
        }
    }
}
