// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ParameterManager
{
    /// <summary>
    /// A Regional Parameter Version resource that stores the actual value of the regional parameter.
    /// 
    /// To get more information about RegionalParameterVersion, see:
    /// 
    /// * [API documentation](https://cloud.google.com/secret-manager/parameter-manager/docs/reference/rest/v1/projects.locations.parameters.versions)
    /// 
    /// ## Example Usage
    /// 
    /// ### Regional Parameter Version Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var regional_parameter_basic = new Gcp.ParameterManager.RegionalParameter("regional-parameter-basic", new()
    ///     {
    ///         ParameterId = "regional_parameter",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var regional_parameter_version_basic = new Gcp.ParameterManager.RegionalParameterVersion("regional-parameter-version-basic", new()
    ///     {
    ///         Parameter = regional_parameter_basic.Id,
    ///         ParameterVersionId = "regional_parameter_version",
    ///         ParameterData = "regional-parameter-version-data",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Regional Parameter Version With Json Format
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var regional_parameter_basic = new Gcp.ParameterManager.RegionalParameter("regional-parameter-basic", new()
    ///     {
    ///         ParameterId = "regional_parameter",
    ///         Format = "JSON",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var regional_parameter_version_with_json_format = new Gcp.ParameterManager.RegionalParameterVersion("regional-parameter-version-with-json-format", new()
    ///     {
    ///         Parameter = regional_parameter_basic.Id,
    ///         ParameterVersionId = "regional_parameter_version",
    ///         ParameterData = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["key1"] = "val1",
    ///             ["key2"] = "val2",
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// ### Regional Parameter Version With Kms Key
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var regional_parameter_basic = new Gcp.ParameterManager.RegionalParameter("regional-parameter-basic", new()
    ///     {
    ///         ParameterId = "regional_parameter",
    ///         Location = "us-central1",
    ///         KmsKey = "kms-key",
    ///     });
    /// 
    ///     var regional_parameter_version_with_kms_key = new Gcp.ParameterManager.RegionalParameterVersion("regional-parameter-version-with-kms-key", new()
    ///     {
    ///         Parameter = regional_parameter_basic.Id,
    ///         ParameterVersionId = "regional_parameter_version",
    ///         ParameterData = "regional-parameter-version-data",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Regional Parameter Version With Json Format With File
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var regional_parameter_basic = new Gcp.ParameterManager.RegionalParameter("regional-parameter-basic", new()
    ///     {
    ///         ParameterId = "regional_parameter",
    ///         Format = "JSON",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var regional_parameter_version_with_json_format_with_file = new Gcp.ParameterManager.RegionalParameterVersion("regional-parameter-version-with-json-format-with-file", new()
    ///     {
    ///         Parameter = regional_parameter_basic.Id,
    ///         ParameterVersionId = "regional_parameter_version",
    ///         ParameterData = Std.File.Invoke(new()
    ///         {
    ///             Input = "regional-parameter-json-data.json",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///     });
    /// 
    /// });
    /// ```
    /// ### Regional Parameter Version With Yaml Format With File
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var regional_parameter_basic = new Gcp.ParameterManager.RegionalParameter("regional-parameter-basic", new()
    ///     {
    ///         ParameterId = "regional_parameter",
    ///         Format = "YAML",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var regional_parameter_version_with_yaml_format_with_file = new Gcp.ParameterManager.RegionalParameterVersion("regional-parameter-version-with-yaml-format-with-file", new()
    ///     {
    ///         Parameter = regional_parameter_basic.Id,
    ///         ParameterVersionId = "regional_parameter_version",
    ///         ParameterData = Std.File.Invoke(new()
    ///         {
    ///             Input = "regional-parameter-yaml-data.yaml",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RegionalParameterVersion can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
    /// 
    /// When using the `pulumi import` command, RegionalParameterVersion can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:parametermanager/regionalParameterVersion:RegionalParameterVersion default projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:parametermanager/regionalParameterVersion:RegionalParameterVersion")]
    public partial class RegionalParameterVersion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time at which the Regional Parameter Version was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The current state of Regional Parameter Version. This field is only applicable for updating Regional Parameter Version.
        /// </summary>
        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        /// <summary>
        /// The resource name of the Cloud KMS CryptoKeyVersion used to decrypt regional parameter version payload. Format
        /// `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}/cryptoKeyVersions/{{crypto_key_version}}`
        /// </summary>
        [Output("kmsKeyVersion")]
        public Output<string> KmsKeyVersion { get; private set; } = null!;

        /// <summary>
        /// Location of Parameter Manager Regional parameter resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the Regional Parameter Version. Format:
        /// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Parameter Manager Regional Parameter resource.
        /// </summary>
        [Output("parameter")]
        public Output<string> Parameter { get; private set; } = null!;

        /// <summary>
        /// The Regional Parameter data.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        [Output("parameterData")]
        public Output<string> ParameterData { get; private set; } = null!;

        /// <summary>
        /// Version ID of the Regional Parameter Version Resource. This must be unique within the Regional Parameter.
        /// </summary>
        [Output("parameterVersionId")]
        public Output<string> ParameterVersionId { get; private set; } = null!;

        /// <summary>
        /// The time at which the Regional Parameter Version was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a RegionalParameterVersion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegionalParameterVersion(string name, RegionalParameterVersionArgs args, CustomResourceOptions? options = null)
            : base("gcp:parametermanager/regionalParameterVersion:RegionalParameterVersion", name, args ?? new RegionalParameterVersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegionalParameterVersion(string name, Input<string> id, RegionalParameterVersionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:parametermanager/regionalParameterVersion:RegionalParameterVersion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "parameterData",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegionalParameterVersion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegionalParameterVersion Get(string name, Input<string> id, RegionalParameterVersionState? state = null, CustomResourceOptions? options = null)
        {
            return new RegionalParameterVersion(name, id, state, options);
        }
    }

    public sealed class RegionalParameterVersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The current state of Regional Parameter Version. This field is only applicable for updating Regional Parameter Version.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Parameter Manager Regional Parameter resource.
        /// </summary>
        [Input("parameter", required: true)]
        public Input<string> Parameter { get; set; } = null!;

        [Input("parameterData", required: true)]
        private Input<string>? _parameterData;

        /// <summary>
        /// The Regional Parameter data.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? ParameterData
        {
            get => _parameterData;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _parameterData = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Version ID of the Regional Parameter Version Resource. This must be unique within the Regional Parameter.
        /// </summary>
        [Input("parameterVersionId", required: true)]
        public Input<string> ParameterVersionId { get; set; } = null!;

        public RegionalParameterVersionArgs()
        {
        }
        public static new RegionalParameterVersionArgs Empty => new RegionalParameterVersionArgs();
    }

    public sealed class RegionalParameterVersionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time at which the Regional Parameter Version was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The current state of Regional Parameter Version. This field is only applicable for updating Regional Parameter Version.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// The resource name of the Cloud KMS CryptoKeyVersion used to decrypt regional parameter version payload. Format
        /// `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}/cryptoKeyVersions/{{crypto_key_version}}`
        /// </summary>
        [Input("kmsKeyVersion")]
        public Input<string>? KmsKeyVersion { get; set; }

        /// <summary>
        /// Location of Parameter Manager Regional parameter resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the Regional Parameter Version. Format:
        /// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Parameter Manager Regional Parameter resource.
        /// </summary>
        [Input("parameter")]
        public Input<string>? Parameter { get; set; }

        [Input("parameterData")]
        private Input<string>? _parameterData;

        /// <summary>
        /// The Regional Parameter data.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? ParameterData
        {
            get => _parameterData;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _parameterData = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Version ID of the Regional Parameter Version Resource. This must be unique within the Regional Parameter.
        /// </summary>
        [Input("parameterVersionId")]
        public Input<string>? ParameterVersionId { get; set; }

        /// <summary>
        /// The time at which the Regional Parameter Version was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public RegionalParameterVersionState()
        {
        }
        public static new RegionalParameterVersionState Empty => new RegionalParameterVersionState();
    }
}
