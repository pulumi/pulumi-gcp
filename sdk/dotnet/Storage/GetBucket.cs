// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Storage
{
    public static class GetBucket
    {
        /// <summary>
        /// Gets an existing bucket in Google Cloud Storage service (GCS).
        /// See [the official documentation](https://cloud.google.com/storage/docs/key-terms#buckets)
        /// and
        /// [API](https://cloud.google.com/storage/docs/json_api/v1/buckets).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_bucket = Gcp.Storage.GetBucket.Invoke(new()
        ///     {
        ///         Name = "my-bucket",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBucketResult> InvokeAsync(GetBucketArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBucketResult>("gcp:storage/getBucket:getBucket", args ?? new GetBucketArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an existing bucket in Google Cloud Storage service (GCS).
        /// See [the official documentation](https://cloud.google.com/storage/docs/key-terms#buckets)
        /// and
        /// [API](https://cloud.google.com/storage/docs/json_api/v1/buckets).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_bucket = Gcp.Storage.GetBucket.Invoke(new()
        ///     {
        ///         Name = "my-bucket",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBucketResult> Invoke(GetBucketInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBucketResult>("gcp:storage/getBucket:getBucket", args ?? new GetBucketInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an existing bucket in Google Cloud Storage service (GCS).
        /// See [the official documentation](https://cloud.google.com/storage/docs/key-terms#buckets)
        /// and
        /// [API](https://cloud.google.com/storage/docs/json_api/v1/buckets).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_bucket = Gcp.Storage.GetBucket.Invoke(new()
        ///     {
        ///         Name = "my-bucket",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBucketResult> Invoke(GetBucketInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBucketResult>("gcp:storage/getBucket:getBucket", args ?? new GetBucketInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBucketArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the bucket.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it is not provided then the data source will use the Compute API to find the project id that corresponds to the project number returned from the Storage API, and if no Compute API permissions are available or if the Compute API is disabled it defaults to the provider value. Supplying a value for `project` doesn't influence retrieving data about the bucket but it can be used to prevent use of the Compute API. If you do provide a `project` value ensure that it is the correct value for that bucket; the data source will not check that the project id and project number match.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetBucketArgs()
        {
        }
        public static new GetBucketArgs Empty => new GetBucketArgs();
    }

    public sealed class GetBucketInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the bucket.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it is not provided then the data source will use the Compute API to find the project id that corresponds to the project number returned from the Storage API, and if no Compute API permissions are available or if the Compute API is disabled it defaults to the provider value. Supplying a value for `project` doesn't influence retrieving data about the bucket but it can be used to prevent use of the Compute API. If you do provide a `project` value ensure that it is the correct value for that bucket; the data source will not check that the project id and project number match.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetBucketInvokeArgs()
        {
        }
        public static new GetBucketInvokeArgs Empty => new GetBucketInvokeArgs();
    }


    [OutputType]
    public sealed class GetBucketResult
    {
        public readonly ImmutableArray<Outputs.GetBucketAutoclassResult> Autoclasses;
        public readonly ImmutableArray<Outputs.GetBucketCorResult> Cors;
        public readonly ImmutableArray<Outputs.GetBucketCustomPlacementConfigResult> CustomPlacementConfigs;
        public readonly bool DefaultEventBasedHold;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly bool EnableObjectRetention;
        public readonly ImmutableArray<Outputs.GetBucketEncryptionResult> Encryptions;
        public readonly bool ForceDestroy;
        public readonly ImmutableArray<Outputs.GetBucketHierarchicalNamespaceResult> HierarchicalNamespaces;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetBucketIpFilterResult> IpFilters;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly ImmutableArray<Outputs.GetBucketLifecycleRuleResult> LifecycleRules;
        public readonly string Location;
        public readonly ImmutableArray<Outputs.GetBucketLoggingResult> Loggings;
        public readonly string Name;
        public readonly string? Project;
        public readonly int ProjectNumber;
        public readonly string PublicAccessPrevention;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly bool RequesterPays;
        public readonly ImmutableArray<Outputs.GetBucketRetentionPolicyResult> RetentionPolicies;
        public readonly string Rpo;
        public readonly string SelfLink;
        public readonly ImmutableArray<Outputs.GetBucketSoftDeletePolicyResult> SoftDeletePolicies;
        public readonly string StorageClass;
        public readonly string TimeCreated;
        public readonly bool UniformBucketLevelAccess;
        public readonly string Updated;
        public readonly string Url;
        public readonly ImmutableArray<Outputs.GetBucketVersioningResult> Versionings;
        public readonly ImmutableArray<Outputs.GetBucketWebsiteResult> Websites;

        [OutputConstructor]
        private GetBucketResult(
            ImmutableArray<Outputs.GetBucketAutoclassResult> autoclasses,

            ImmutableArray<Outputs.GetBucketCorResult> cors,

            ImmutableArray<Outputs.GetBucketCustomPlacementConfigResult> customPlacementConfigs,

            bool defaultEventBasedHold,

            ImmutableDictionary<string, string> effectiveLabels,

            bool enableObjectRetention,

            ImmutableArray<Outputs.GetBucketEncryptionResult> encryptions,

            bool forceDestroy,

            ImmutableArray<Outputs.GetBucketHierarchicalNamespaceResult> hierarchicalNamespaces,

            string id,

            ImmutableArray<Outputs.GetBucketIpFilterResult> ipFilters,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<Outputs.GetBucketLifecycleRuleResult> lifecycleRules,

            string location,

            ImmutableArray<Outputs.GetBucketLoggingResult> loggings,

            string name,

            string? project,

            int projectNumber,

            string publicAccessPrevention,

            ImmutableDictionary<string, string> pulumiLabels,

            bool requesterPays,

            ImmutableArray<Outputs.GetBucketRetentionPolicyResult> retentionPolicies,

            string rpo,

            string selfLink,

            ImmutableArray<Outputs.GetBucketSoftDeletePolicyResult> softDeletePolicies,

            string storageClass,

            string timeCreated,

            bool uniformBucketLevelAccess,

            string updated,

            string url,

            ImmutableArray<Outputs.GetBucketVersioningResult> versionings,

            ImmutableArray<Outputs.GetBucketWebsiteResult> websites)
        {
            Autoclasses = autoclasses;
            Cors = cors;
            CustomPlacementConfigs = customPlacementConfigs;
            DefaultEventBasedHold = defaultEventBasedHold;
            EffectiveLabels = effectiveLabels;
            EnableObjectRetention = enableObjectRetention;
            Encryptions = encryptions;
            ForceDestroy = forceDestroy;
            HierarchicalNamespaces = hierarchicalNamespaces;
            Id = id;
            IpFilters = ipFilters;
            Labels = labels;
            LifecycleRules = lifecycleRules;
            Location = location;
            Loggings = loggings;
            Name = name;
            Project = project;
            ProjectNumber = projectNumber;
            PublicAccessPrevention = publicAccessPrevention;
            PulumiLabels = pulumiLabels;
            RequesterPays = requesterPays;
            RetentionPolicies = retentionPolicies;
            Rpo = rpo;
            SelfLink = selfLink;
            SoftDeletePolicies = softDeletePolicies;
            StorageClass = storageClass;
            TimeCreated = timeCreated;
            UniformBucketLevelAccess = uniformBucketLevelAccess;
            Updated = updated;
            Url = url;
            Versionings = versionings;
            Websites = websites;
        }
    }
}
