// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Storage
{
    public static class GetInsightsDatasetConfig
    {
        /// <summary>
        /// Use this data source to get information about a Storage Insights Dataset Config resource.
        /// See [the official documentation](https://cloud.google.com/storage/docs/insights/datasets)
        /// and
        /// [API](https://cloud.google.com/storage/docs/insights/reference/rest/v1/projects.locations.datasetConfigs).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sample_config = Gcp.Storage.GetInsightsDatasetConfig.Invoke(new()
        ///     {
        ///         Project = "sample_project",
        ///         Location = "sample_location",
        ///         DatasetConfigId = "sample_dataset_config_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInsightsDatasetConfigResult> InvokeAsync(GetInsightsDatasetConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInsightsDatasetConfigResult>("gcp:storage/getInsightsDatasetConfig:getInsightsDatasetConfig", args ?? new GetInsightsDatasetConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Storage Insights Dataset Config resource.
        /// See [the official documentation](https://cloud.google.com/storage/docs/insights/datasets)
        /// and
        /// [API](https://cloud.google.com/storage/docs/insights/reference/rest/v1/projects.locations.datasetConfigs).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sample_config = Gcp.Storage.GetInsightsDatasetConfig.Invoke(new()
        ///     {
        ///         Project = "sample_project",
        ///         Location = "sample_location",
        ///         DatasetConfigId = "sample_dataset_config_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInsightsDatasetConfigResult> Invoke(GetInsightsDatasetConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInsightsDatasetConfigResult>("gcp:storage/getInsightsDatasetConfig:getInsightsDatasetConfig", args ?? new GetInsightsDatasetConfigInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Storage Insights Dataset Config resource.
        /// See [the official documentation](https://cloud.google.com/storage/docs/insights/datasets)
        /// and
        /// [API](https://cloud.google.com/storage/docs/insights/reference/rest/v1/projects.locations.datasetConfigs).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sample_config = Gcp.Storage.GetInsightsDatasetConfig.Invoke(new()
        ///     {
        ///         Project = "sample_project",
        ///         Location = "sample_location",
        ///         DatasetConfigId = "sample_dataset_config_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInsightsDatasetConfigResult> Invoke(GetInsightsDatasetConfigInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInsightsDatasetConfigResult>("gcp:storage/getInsightsDatasetConfig:getInsightsDatasetConfig", args ?? new GetInsightsDatasetConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInsightsDatasetConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The user-defined ID of the DatasetConfig
        /// </summary>
        [Input("datasetConfigId", required: true)]
        public string DatasetConfigId { get; set; } = null!;

        /// <summary>
        /// The location of the Dataset Config.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The name of the GCP project in which dataset config exists. Can be configured through config as well.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetInsightsDatasetConfigArgs()
        {
        }
        public static new GetInsightsDatasetConfigArgs Empty => new GetInsightsDatasetConfigArgs();
    }

    public sealed class GetInsightsDatasetConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The user-defined ID of the DatasetConfig
        /// </summary>
        [Input("datasetConfigId", required: true)]
        public Input<string> DatasetConfigId { get; set; } = null!;

        /// <summary>
        /// The location of the Dataset Config.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of the GCP project in which dataset config exists. Can be configured through config as well.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetInsightsDatasetConfigInvokeArgs()
        {
        }
        public static new GetInsightsDatasetConfigInvokeArgs Empty => new GetInsightsDatasetConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetInsightsDatasetConfigResult
    {
        public readonly string CreateTime;
        public readonly string DatasetConfigId;
        public readonly string DatasetConfigState;
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetInsightsDatasetConfigExcludeCloudStorageBucketResult> ExcludeCloudStorageBuckets;
        public readonly ImmutableArray<Outputs.GetInsightsDatasetConfigExcludeCloudStorageLocationResult> ExcludeCloudStorageLocations;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetInsightsDatasetConfigIdentityResult> Identities;
        public readonly ImmutableArray<Outputs.GetInsightsDatasetConfigIncludeCloudStorageBucketResult> IncludeCloudStorageBuckets;
        public readonly ImmutableArray<Outputs.GetInsightsDatasetConfigIncludeCloudStorageLocationResult> IncludeCloudStorageLocations;
        public readonly bool IncludeNewlyCreatedBuckets;
        public readonly bool LinkDataset;
        public readonly ImmutableArray<Outputs.GetInsightsDatasetConfigLinkResult> Links;
        public readonly string Location;
        public readonly string Name;
        public readonly string OrganizationNumber;
        public readonly bool OrganizationScope;
        public readonly string? Project;
        public readonly int RetentionPeriodDays;
        public readonly ImmutableArray<Outputs.GetInsightsDatasetConfigSourceFolderResult> SourceFolders;
        public readonly ImmutableArray<Outputs.GetInsightsDatasetConfigSourceProjectResult> SourceProjects;
        public readonly string Uid;
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetInsightsDatasetConfigResult(
            string createTime,

            string datasetConfigId,

            string datasetConfigState,

            string description,

            ImmutableArray<Outputs.GetInsightsDatasetConfigExcludeCloudStorageBucketResult> excludeCloudStorageBuckets,

            ImmutableArray<Outputs.GetInsightsDatasetConfigExcludeCloudStorageLocationResult> excludeCloudStorageLocations,

            string id,

            ImmutableArray<Outputs.GetInsightsDatasetConfigIdentityResult> identities,

            ImmutableArray<Outputs.GetInsightsDatasetConfigIncludeCloudStorageBucketResult> includeCloudStorageBuckets,

            ImmutableArray<Outputs.GetInsightsDatasetConfigIncludeCloudStorageLocationResult> includeCloudStorageLocations,

            bool includeNewlyCreatedBuckets,

            bool linkDataset,

            ImmutableArray<Outputs.GetInsightsDatasetConfigLinkResult> links,

            string location,

            string name,

            string organizationNumber,

            bool organizationScope,

            string? project,

            int retentionPeriodDays,

            ImmutableArray<Outputs.GetInsightsDatasetConfigSourceFolderResult> sourceFolders,

            ImmutableArray<Outputs.GetInsightsDatasetConfigSourceProjectResult> sourceProjects,

            string uid,

            string updateTime)
        {
            CreateTime = createTime;
            DatasetConfigId = datasetConfigId;
            DatasetConfigState = datasetConfigState;
            Description = description;
            ExcludeCloudStorageBuckets = excludeCloudStorageBuckets;
            ExcludeCloudStorageLocations = excludeCloudStorageLocations;
            Id = id;
            Identities = identities;
            IncludeCloudStorageBuckets = includeCloudStorageBuckets;
            IncludeCloudStorageLocations = includeCloudStorageLocations;
            IncludeNewlyCreatedBuckets = includeNewlyCreatedBuckets;
            LinkDataset = linkDataset;
            Links = links;
            Location = location;
            Name = name;
            OrganizationNumber = organizationNumber;
            OrganizationScope = organizationScope;
            Project = project;
            RetentionPeriodDays = retentionPeriodDays;
            SourceFolders = sourceFolders;
            SourceProjects = sourceProjects;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
