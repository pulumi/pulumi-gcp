// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Storage
{
    /// <summary>
    /// Storage Batch Operations (SBO) is a Cloud Storage management feature that offers a
    /// seamless experience to perform single batch operations on millions of GCS objects in a
    /// serverless manner.
    /// 
    /// ## Example Usage
    /// 
    /// ### Storage Batch Operations
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = "tf-sample-bucket",
    ///         Location = "us-central1",
    ///         ForceDestroy = true,
    ///     });
    /// 
    ///     var tf_job = new Gcp.Storage.BatchOperationsJob("tf-job", new()
    ///     {
    ///         JobId = "tf-job",
    ///         BucketList = new Gcp.Storage.Inputs.BatchOperationsJobBucketListArgs
    ///         {
    ///             Buckets = new Gcp.Storage.Inputs.BatchOperationsJobBucketListBucketsArgs
    ///             {
    ///                 Bucket = bucket.Name,
    ///                 PrefixList = new Gcp.Storage.Inputs.BatchOperationsJobBucketListBucketsPrefixListArgs
    ///                 {
    ///                     IncludedObjectPrefixes = new[]
    ///                     {
    ///                         "bkt",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         PutMetadata = new Gcp.Storage.Inputs.BatchOperationsJobPutMetadataArgs
    ///         {
    ///             CustomMetadata = 
    ///             {
    ///                 { "key", "value" },
    ///             },
    ///         },
    ///         DeleteProtection = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Job can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/global/jobs/{{job_id}}`
    /// 
    /// * `{{project}}/{{job_id}}`
    /// 
    /// * `{{job_id}}`
    /// 
    /// When using the `pulumi import` command, Job can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:storage/batchOperationsJob:BatchOperationsJob default projects/{{project}}/locations/global/jobs/{{job_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:storage/batchOperationsJob:BatchOperationsJob default {{project}}/{{job_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:storage/batchOperationsJob:BatchOperationsJob default {{job_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:storage/batchOperationsJob:BatchOperationsJob")]
    public partial class BatchOperationsJob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of buckets and their objects to be transformed. Currently, only one bucket configuration is supported. If multiple buckets are specified, an error will be returned
        /// Structure is documented below.
        /// </summary>
        [Output("bucketList")]
        public Output<Outputs.BatchOperationsJobBucketList?> BucketList { get; private set; } = null!;

        /// <summary>
        /// The time that the job was completed.
        /// </summary>
        [Output("completeTime")]
        public Output<string> CompleteTime { get; private set; } = null!;

        /// <summary>
        /// The timestamp at which this storage batch operation was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// allows batch operations to delete objects in bucket
        /// Structure is documented below.
        /// </summary>
        [Output("deleteObject")]
        public Output<Outputs.BatchOperationsJobDeleteObject?> DeleteObject { get; private set; } = null!;

        /// <summary>
        /// If set to `true`, the storage batch operation job will not be deleted and new job will be created.
        /// </summary>
        [Output("deleteProtection")]
        public Output<bool?> DeleteProtection { get; private set; } = null!;

        /// <summary>
        /// The ID of the job.
        /// </summary>
        [Output("jobId")]
        public Output<string?> JobId { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// allows batch operations to update metadata for objects in bucket
        /// Structure is documented below.
        /// </summary>
        [Output("putMetadata")]
        public Output<Outputs.BatchOperationsJobPutMetadata?> PutMetadata { get; private set; } = null!;

        /// <summary>
        /// allows to update temporary hold or eventBased hold for objects in bucket.
        /// Structure is documented below.
        /// </summary>
        [Output("putObjectHold")]
        public Output<Outputs.BatchOperationsJobPutObjectHold?> PutObjectHold { get; private set; } = null!;

        /// <summary>
        /// allows to update encryption key for objects in bucket.
        /// Structure is documented below.
        /// </summary>
        [Output("rewriteObject")]
        public Output<Outputs.BatchOperationsJobRewriteObject?> RewriteObject { get; private set; } = null!;

        /// <summary>
        /// The time that the job was scheduled.
        /// </summary>
        [Output("scheduleTime")]
        public Output<string> ScheduleTime { get; private set; } = null!;

        /// <summary>
        /// State of the job.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The timestamp at which this storage batch operation was most recently updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a BatchOperationsJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BatchOperationsJob(string name, BatchOperationsJobArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:storage/batchOperationsJob:BatchOperationsJob", name, args ?? new BatchOperationsJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BatchOperationsJob(string name, Input<string> id, BatchOperationsJobState? state = null, CustomResourceOptions? options = null)
            : base("gcp:storage/batchOperationsJob:BatchOperationsJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BatchOperationsJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BatchOperationsJob Get(string name, Input<string> id, BatchOperationsJobState? state = null, CustomResourceOptions? options = null)
        {
            return new BatchOperationsJob(name, id, state, options);
        }
    }

    public sealed class BatchOperationsJobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// List of buckets and their objects to be transformed. Currently, only one bucket configuration is supported. If multiple buckets are specified, an error will be returned
        /// Structure is documented below.
        /// </summary>
        [Input("bucketList")]
        public Input<Inputs.BatchOperationsJobBucketListArgs>? BucketList { get; set; }

        /// <summary>
        /// allows batch operations to delete objects in bucket
        /// Structure is documented below.
        /// </summary>
        [Input("deleteObject")]
        public Input<Inputs.BatchOperationsJobDeleteObjectArgs>? DeleteObject { get; set; }

        /// <summary>
        /// If set to `true`, the storage batch operation job will not be deleted and new job will be created.
        /// </summary>
        [Input("deleteProtection")]
        public Input<bool>? DeleteProtection { get; set; }

        /// <summary>
        /// The ID of the job.
        /// </summary>
        [Input("jobId")]
        public Input<string>? JobId { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// allows batch operations to update metadata for objects in bucket
        /// Structure is documented below.
        /// </summary>
        [Input("putMetadata")]
        public Input<Inputs.BatchOperationsJobPutMetadataArgs>? PutMetadata { get; set; }

        /// <summary>
        /// allows to update temporary hold or eventBased hold for objects in bucket.
        /// Structure is documented below.
        /// </summary>
        [Input("putObjectHold")]
        public Input<Inputs.BatchOperationsJobPutObjectHoldArgs>? PutObjectHold { get; set; }

        /// <summary>
        /// allows to update encryption key for objects in bucket.
        /// Structure is documented below.
        /// </summary>
        [Input("rewriteObject")]
        public Input<Inputs.BatchOperationsJobRewriteObjectArgs>? RewriteObject { get; set; }

        public BatchOperationsJobArgs()
        {
        }
        public static new BatchOperationsJobArgs Empty => new BatchOperationsJobArgs();
    }

    public sealed class BatchOperationsJobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// List of buckets and their objects to be transformed. Currently, only one bucket configuration is supported. If multiple buckets are specified, an error will be returned
        /// Structure is documented below.
        /// </summary>
        [Input("bucketList")]
        public Input<Inputs.BatchOperationsJobBucketListGetArgs>? BucketList { get; set; }

        /// <summary>
        /// The time that the job was completed.
        /// </summary>
        [Input("completeTime")]
        public Input<string>? CompleteTime { get; set; }

        /// <summary>
        /// The timestamp at which this storage batch operation was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// allows batch operations to delete objects in bucket
        /// Structure is documented below.
        /// </summary>
        [Input("deleteObject")]
        public Input<Inputs.BatchOperationsJobDeleteObjectGetArgs>? DeleteObject { get; set; }

        /// <summary>
        /// If set to `true`, the storage batch operation job will not be deleted and new job will be created.
        /// </summary>
        [Input("deleteProtection")]
        public Input<bool>? DeleteProtection { get; set; }

        /// <summary>
        /// The ID of the job.
        /// </summary>
        [Input("jobId")]
        public Input<string>? JobId { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// allows batch operations to update metadata for objects in bucket
        /// Structure is documented below.
        /// </summary>
        [Input("putMetadata")]
        public Input<Inputs.BatchOperationsJobPutMetadataGetArgs>? PutMetadata { get; set; }

        /// <summary>
        /// allows to update temporary hold or eventBased hold for objects in bucket.
        /// Structure is documented below.
        /// </summary>
        [Input("putObjectHold")]
        public Input<Inputs.BatchOperationsJobPutObjectHoldGetArgs>? PutObjectHold { get; set; }

        /// <summary>
        /// allows to update encryption key for objects in bucket.
        /// Structure is documented below.
        /// </summary>
        [Input("rewriteObject")]
        public Input<Inputs.BatchOperationsJobRewriteObjectGetArgs>? RewriteObject { get; set; }

        /// <summary>
        /// The time that the job was scheduled.
        /// </summary>
        [Input("scheduleTime")]
        public Input<string>? ScheduleTime { get; set; }

        /// <summary>
        /// State of the job.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The timestamp at which this storage batch operation was most recently updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public BatchOperationsJobState()
        {
        }
        public static new BatchOperationsJobState Empty => new BatchOperationsJobState();
    }
}
