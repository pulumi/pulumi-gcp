// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Storage.Outputs
{

    [OutputType]
    public sealed class TransferJobTransferSpecAzureBlobStorageDataSource
    {
        /// <summary>
        /// ) Credentials used to authenticate API requests to Azure block.
        /// </summary>
        public readonly Outputs.TransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentials? AzureCredentials;
        /// <summary>
        /// The container to transfer from the Azure Storage account.`
        /// </summary>
        public readonly string Container;
        /// <summary>
        /// ) Full Resource name of a secret in Secret Manager containing [SAS Credentials in JSON form](https://cloud.google.com/storage-transfer/docs/reference/rest/v1/TransferSpec#azureblobstoragedata:~:text=begin%20with%20a%20%27/%27.-,credentialsSecret,-string). Service Agent for Storage Transfer must have permissions to access secret. If credentials_secret is specified, do not specify azure_credentials.`,
        /// </summary>
        public readonly string? CredentialsSecret;
        /// <summary>
        /// Federated identity config of a user registered Azure application. Structure documented below.
        /// </summary>
        public readonly Outputs.TransferJobTransferSpecAzureBlobStorageDataSourceFederatedIdentityConfig? FederatedIdentityConfig;
        /// <summary>
        /// Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// The name of the Azure Storage account.
        /// </summary>
        public readonly string StorageAccount;

        [OutputConstructor]
        private TransferJobTransferSpecAzureBlobStorageDataSource(
            Outputs.TransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentials? azureCredentials,

            string container,

            string? credentialsSecret,

            Outputs.TransferJobTransferSpecAzureBlobStorageDataSourceFederatedIdentityConfig? federatedIdentityConfig,

            string? path,

            string storageAccount)
        {
            AzureCredentials = azureCredentials;
            Container = container;
            CredentialsSecret = credentialsSecret;
            FederatedIdentityConfig = federatedIdentityConfig;
            Path = path;
            StorageAccount = storageAccount;
        }
    }
}
