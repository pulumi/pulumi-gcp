// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Storage.Outputs
{

    [OutputType]
    public sealed class BucketLifecycleRuleCondition
    {
        /// <summary>
        /// Minimum age of an object in days to satisfy this condition.
        /// </summary>
        public readonly int? Age;
        /// <summary>
        /// A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when an object is created before midnight of the specified date in UTC.
        /// </summary>
        public readonly string? CreatedBefore;
        /// <summary>
        /// A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when the customTime metadata for the object is set to an earlier date than the date used in this lifecycle condition.
        /// </summary>
        public readonly string? CustomTimeBefore;
        /// <summary>
        /// Days since the date set in the `customTime` metadata for the object. This condition is satisfied when the current date and time is at least the specified number of days after the `customTime`.
        /// </summary>
        public readonly int? DaysSinceCustomTime;
        /// <summary>
        /// Relevant only for versioned objects. Number of days elapsed since the noncurrent timestamp of an object.
        /// </summary>
        public readonly int? DaysSinceNoncurrentTime;
        /// <summary>
        /// One or more matching name prefixes to satisfy this condition.
        /// </summary>
        public readonly ImmutableArray<string> MatchesPrefixes;
        /// <summary>
        /// [Storage Class](https://cloud.google.com/storage/docs/storage-classes) of objects to satisfy this condition. Supported values include: `STANDARD`, `MULTI_REGIONAL`, `REGIONAL`, `NEARLINE`, `COLDLINE`, `ARCHIVE`, `DURABLE_REDUCED_AVAILABILITY`.
        /// </summary>
        public readonly ImmutableArray<string> MatchesStorageClasses;
        /// <summary>
        /// One or more matching name suffixes to satisfy this condition.
        /// </summary>
        public readonly ImmutableArray<string> MatchesSuffixes;
        /// <summary>
        /// Relevant only for versioned objects. The date in RFC 3339 (e.g. `2017-06-13`) when the object became nonconcurrent.
        /// </summary>
        public readonly string? NoncurrentTimeBefore;
        /// <summary>
        /// Relevant only for versioned objects. The number of newer versions of an object to satisfy this condition.
        /// </summary>
        public readonly int? NumNewerVersions;
        /// <summary>
        /// Match to live and/or archived objects. Unversioned buckets have only live objects. Supported values include: `"LIVE"`, `"ARCHIVED"`, `"ANY"`.
        /// </summary>
        public readonly string? WithState;

        [OutputConstructor]
        private BucketLifecycleRuleCondition(
            int? age,

            string? createdBefore,

            string? customTimeBefore,

            int? daysSinceCustomTime,

            int? daysSinceNoncurrentTime,

            ImmutableArray<string> matchesPrefixes,

            ImmutableArray<string> matchesStorageClasses,

            ImmutableArray<string> matchesSuffixes,

            string? noncurrentTimeBefore,

            int? numNewerVersions,

            string? withState)
        {
            Age = age;
            CreatedBefore = createdBefore;
            CustomTimeBefore = customTimeBefore;
            DaysSinceCustomTime = daysSinceCustomTime;
            DaysSinceNoncurrentTime = daysSinceNoncurrentTime;
            MatchesPrefixes = matchesPrefixes;
            MatchesStorageClasses = matchesStorageClasses;
            MatchesSuffixes = matchesSuffixes;
            NoncurrentTimeBefore = noncurrentTimeBefore;
            NumNewerVersions = numNewerVersions;
            WithState = withState;
        }
    }
}
