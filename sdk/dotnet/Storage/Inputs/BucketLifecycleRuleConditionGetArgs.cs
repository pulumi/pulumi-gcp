// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Storage.Inputs
{

    public sealed class BucketLifecycleRuleConditionGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Minimum age of an object in days to satisfy this condition. **Note** To set `0` value of `age`, `send_age_if_zero` should be set `true` otherwise `0` value of `age` field will be ignored.
        /// </summary>
        [Input("age")]
        public Input<int>? Age { get; set; }

        /// <summary>
        /// A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when an object is created before midnight of the specified date in UTC.
        /// </summary>
        [Input("createdBefore")]
        public Input<string>? CreatedBefore { get; set; }

        /// <summary>
        /// A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when the customTime metadata for the object is set to an earlier date than the date used in this lifecycle condition.
        /// </summary>
        [Input("customTimeBefore")]
        public Input<string>? CustomTimeBefore { get; set; }

        /// <summary>
        /// Number of days elapsed since the user-specified timestamp set on an object.
        /// </summary>
        [Input("daysSinceCustomTime")]
        public Input<int>? DaysSinceCustomTime { get; set; }

        /// <summary>
        /// Number of days elapsed since the noncurrent timestamp of an object. This
        /// 										condition is relevant only for versioned objects.
        /// </summary>
        [Input("daysSinceNoncurrentTime")]
        public Input<int>? DaysSinceNoncurrentTime { get; set; }

        [Input("matchesPrefixes")]
        private InputList<string>? _matchesPrefixes;

        /// <summary>
        /// One or more matching name prefixes to satisfy this condition.
        /// </summary>
        public InputList<string> MatchesPrefixes
        {
            get => _matchesPrefixes ?? (_matchesPrefixes = new InputList<string>());
            set => _matchesPrefixes = value;
        }

        [Input("matchesStorageClasses")]
        private InputList<string>? _matchesStorageClasses;

        /// <summary>
        /// [Storage Class](https://cloud.google.com/storage/docs/storage-classes) of objects to satisfy this condition. Supported values include: `STANDARD`, `MULTI_REGIONAL`, `REGIONAL`, `NEARLINE`, `COLDLINE`, `ARCHIVE`, `DURABLE_REDUCED_AVAILABILITY`.
        /// </summary>
        public InputList<string> MatchesStorageClasses
        {
            get => _matchesStorageClasses ?? (_matchesStorageClasses = new InputList<string>());
            set => _matchesStorageClasses = value;
        }

        [Input("matchesSuffixes")]
        private InputList<string>? _matchesSuffixes;

        /// <summary>
        /// One or more matching name suffixes to satisfy this condition.
        /// </summary>
        public InputList<string> MatchesSuffixes
        {
            get => _matchesSuffixes ?? (_matchesSuffixes = new InputList<string>());
            set => _matchesSuffixes = value;
        }

        /// <summary>
        /// Creation date of an object in RFC 3339 (e.g. 2017-06-13) to satisfy this condition.
        /// </summary>
        [Input("noncurrentTimeBefore")]
        public Input<string>? NoncurrentTimeBefore { get; set; }

        /// <summary>
        /// Relevant only for versioned objects. The number of newer versions of an object to satisfy this condition.
        /// </summary>
        [Input("numNewerVersions")]
        public Input<int>? NumNewerVersions { get; set; }

        /// <summary>
        /// While set true, `age` value will be sent in the request even for zero value of the field. This field is only useful and required for setting 0 value to the `age` field. It can be used alone or together with `age` attribute. **NOTE** `age` attibute with `0` value will be ommitted from the API request if `send_age_if_zero` field is having `false` value.
        /// </summary>
        [Input("sendAgeIfZero")]
        public Input<bool>? SendAgeIfZero { get; set; }

        /// <summary>
        /// While set true, `days_since_custom_time` value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the `days_since_custom_time` field. It can be used alone or together with `days_since_custom_time`.
        /// </summary>
        [Input("sendDaysSinceCustomTimeIfZero")]
        public Input<bool>? SendDaysSinceCustomTimeIfZero { get; set; }

        /// <summary>
        /// While set true, `days_since_noncurrent_time` value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the `days_since_noncurrent_time` field. It can be used alone or together with `days_since_noncurrent_time`.
        /// </summary>
        [Input("sendDaysSinceNoncurrentTimeIfZero")]
        public Input<bool>? SendDaysSinceNoncurrentTimeIfZero { get; set; }

        /// <summary>
        /// While set true, `num_newer_versions` value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the `num_newer_versions` field. It can be used alone or together with `num_newer_versions`.
        /// </summary>
        [Input("sendNumNewerVersionsIfZero")]
        public Input<bool>? SendNumNewerVersionsIfZero { get; set; }

        /// <summary>
        /// Match to live and/or archived objects. Unversioned buckets have only live objects. Supported values include: `"LIVE"`, `"ARCHIVED"`, `"ANY"`.
        /// </summary>
        [Input("withState")]
        public Input<string>? WithState { get; set; }

        public BucketLifecycleRuleConditionGetArgs()
        {
        }
        public static new BucketLifecycleRuleConditionGetArgs Empty => new BucketLifecycleRuleConditionGetArgs();
    }
}
