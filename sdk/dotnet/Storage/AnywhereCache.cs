// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Storage
{
    /// <summary>
    /// The Google Cloud Storage (GCS) Anywhere Cache feature allows users to
    /// create SSD backed zonal read cache for their buckets. These zonal
    /// caches are co-located with the customers compute engines to provide
    /// cost efficiency.
    /// 
    /// ## Example Usage
    /// 
    /// ### Storage Anywhere Cache Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = "bucket-name",
    ///         Location = "US",
    ///     });
    /// 
    ///     var destroyWait5000Seconds = new Time.Index.Sleep("destroy_wait_5000_seconds", new()
    ///     {
    ///         DestroyDuration = "5000s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             bucket,
    ///         },
    ///     });
    /// 
    ///     var cache = new Gcp.Storage.AnywhereCache("cache", new()
    ///     {
    ///         Bucket = bucket.Name,
    ///         Zone = "us-central1-f",
    ///         Ttl = "3601s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             destroyWait5000Seconds,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// AnywhereCache can be imported using any of these accepted formats:
    /// 
    /// * `b/{{bucket}}/anywhereCaches/{{anywhere_cache_id}}`
    /// 
    /// * `{{bucket}}/{{anywhere_cache_id}}`
    /// 
    /// When using the `pulumi import` command, AnywhereCache can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:storage/anywhereCache:AnywhereCache default b/{{bucket}}/anywhereCaches/{{anywhere_cache_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:storage/anywhereCache:AnywhereCache default {{bucket}}/{{anywhere_cache_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:storage/anywhereCache:AnywhereCache")]
    public partial class AnywhereCache : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The cache admission policy dictates whether a block should be inserted upon a cache miss.
        /// Default value is `admit-on-first-miss`.
        /// Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
        /// </summary>
        [Output("admissionPolicy")]
        public Output<string?> AdmissionPolicy { get; private set; } = null!;

        /// <summary>
        /// The ID of the Anywhere cache instance.
        /// </summary>
        [Output("anywhereCacheId")]
        public Output<string> AnywhereCacheId { get; private set; } = null!;

        /// <summary>
        /// A reference to Bucket resource
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// The creation time of the cache instance in RFC 3339 format.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// True if the cache instance has an active Update long-running operation.
        /// </summary>
        [Output("pendingUpdate")]
        public Output<bool> PendingUpdate { get; private set; } = null!;

        /// <summary>
        /// The current state of the cache instance.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The TTL of all cache entries in whole seconds. e.g., "7200s". It defaults to `86400s`
        /// </summary>
        [Output("ttl")]
        public Output<string?> Ttl { get; private set; } = null!;

        /// <summary>
        /// The modification time of the cache instance metadata in RFC 3339 format.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// The zone in which the cache instance needs to be created. For example, `us-central1-a.`
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a AnywhereCache resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AnywhereCache(string name, AnywhereCacheArgs args, CustomResourceOptions? options = null)
            : base("gcp:storage/anywhereCache:AnywhereCache", name, args ?? new AnywhereCacheArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AnywhereCache(string name, Input<string> id, AnywhereCacheState? state = null, CustomResourceOptions? options = null)
            : base("gcp:storage/anywhereCache:AnywhereCache", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AnywhereCache resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AnywhereCache Get(string name, Input<string> id, AnywhereCacheState? state = null, CustomResourceOptions? options = null)
        {
            return new AnywhereCache(name, id, state, options);
        }
    }

    public sealed class AnywhereCacheArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cache admission policy dictates whether a block should be inserted upon a cache miss.
        /// Default value is `admit-on-first-miss`.
        /// Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
        /// </summary>
        [Input("admissionPolicy")]
        public Input<string>? AdmissionPolicy { get; set; }

        /// <summary>
        /// A reference to Bucket resource
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// The TTL of all cache entries in whole seconds. e.g., "7200s". It defaults to `86400s`
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        /// <summary>
        /// The zone in which the cache instance needs to be created. For example, `us-central1-a.`
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public AnywhereCacheArgs()
        {
        }
        public static new AnywhereCacheArgs Empty => new AnywhereCacheArgs();
    }

    public sealed class AnywhereCacheState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cache admission policy dictates whether a block should be inserted upon a cache miss.
        /// Default value is `admit-on-first-miss`.
        /// Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
        /// </summary>
        [Input("admissionPolicy")]
        public Input<string>? AdmissionPolicy { get; set; }

        /// <summary>
        /// The ID of the Anywhere cache instance.
        /// </summary>
        [Input("anywhereCacheId")]
        public Input<string>? AnywhereCacheId { get; set; }

        /// <summary>
        /// A reference to Bucket resource
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// The creation time of the cache instance in RFC 3339 format.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// True if the cache instance has an active Update long-running operation.
        /// </summary>
        [Input("pendingUpdate")]
        public Input<bool>? PendingUpdate { get; set; }

        /// <summary>
        /// The current state of the cache instance.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The TTL of all cache entries in whole seconds. e.g., "7200s". It defaults to `86400s`
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        /// <summary>
        /// The modification time of the cache instance metadata in RFC 3339 format.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// The zone in which the cache instance needs to be created. For example, `us-central1-a.`
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public AnywhereCacheState()
        {
        }
        public static new AnywhereCacheState Empty => new AnywhereCacheState();
    }
}
