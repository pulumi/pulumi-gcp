// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Storage
{
    /// <summary>
    /// A Google Cloud Storage Managed Folder.
    /// 
    /// You can apply Identity and Access Management (IAM) policies to
    /// managed folders to grant principals access only to the objects
    /// within the managed folder, which lets you more finely control access
    /// for specific data sets and tables within a bucket. You can nest
    /// managed folders up to 15 levels deep, including the parent managed
    /// folder.
    /// 
    /// Managed folders can only be created in buckets that have uniform
    /// bucket-level access enabled.
    /// 
    /// To get more information about ManagedFolder, see:
    /// 
    /// * [API documentation](https://cloud.google.com/storage/docs/json_api/v1/managedFolder)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/storage/docs/managed-folders)
    /// 
    /// ## Example Usage
    /// 
    /// ### Storage Managed Folder Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = "my-bucket",
    ///         Location = "EU",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var folder = new Gcp.Storage.ManagedFolder("folder", new()
    ///     {
    ///         Bucket = bucket.Name,
    ///         Name = "managed/folder/name/",
    ///         ForceDestroy = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ManagedFolder can be imported using any of these accepted formats:
    /// 
    /// * `{{bucket}}/managedFolders/{{name}}`
    /// 
    /// * `{{bucket}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, ManagedFolder can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:storage/managedFolder:ManagedFolder default {{bucket}}/managedFolders/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:storage/managedFolder:ManagedFolder default {{bucket}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:storage/managedFolder:ManagedFolder")]
    public partial class ManagedFolder : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the bucket that contains the managed folder.
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// The timestamp at which this managed folder was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Allows the deletion of a managed folder even if contains
        /// objects. If a non-empty managed folder is deleted, any objects
        /// within the folder will remain in a simulated folder with the
        /// same name.
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// The metadata generation of the managed folder.
        /// </summary>
        [Output("metageneration")]
        public Output<string> Metageneration { get; private set; } = null!;

        /// <summary>
        /// The name of the managed folder expressed as a path. Must include
        /// trailing '/'. For example, `example_dir/example_dir2/`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// The timestamp at which this managed folder was most recently updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedFolder resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedFolder(string name, ManagedFolderArgs args, CustomResourceOptions? options = null)
            : base("gcp:storage/managedFolder:ManagedFolder", name, args ?? new ManagedFolderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedFolder(string name, Input<string> id, ManagedFolderState? state = null, CustomResourceOptions? options = null)
            : base("gcp:storage/managedFolder:ManagedFolder", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedFolder resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedFolder Get(string name, Input<string> id, ManagedFolderState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedFolder(name, id, state, options);
        }
    }

    public sealed class ManagedFolderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the bucket that contains the managed folder.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// Allows the deletion of a managed folder even if contains
        /// objects. If a non-empty managed folder is deleted, any objects
        /// within the folder will remain in a simulated folder with the
        /// same name.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// The name of the managed folder expressed as a path. Must include
        /// trailing '/'. For example, `example_dir/example_dir2/`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ManagedFolderArgs()
        {
        }
        public static new ManagedFolderArgs Empty => new ManagedFolderArgs();
    }

    public sealed class ManagedFolderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the bucket that contains the managed folder.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// The timestamp at which this managed folder was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Allows the deletion of a managed folder even if contains
        /// objects. If a non-empty managed folder is deleted, any objects
        /// within the folder will remain in a simulated folder with the
        /// same name.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// The metadata generation of the managed folder.
        /// </summary>
        [Input("metageneration")]
        public Input<string>? Metageneration { get; set; }

        /// <summary>
        /// The name of the managed folder expressed as a path. Must include
        /// trailing '/'. For example, `example_dir/example_dir2/`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The URI of the created resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// The timestamp at which this managed folder was most recently updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public ManagedFolderState()
        {
        }
        public static new ManagedFolderState Empty => new ManagedFolderState();
    }
}
