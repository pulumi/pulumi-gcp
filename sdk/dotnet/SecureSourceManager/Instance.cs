// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.SecureSourceManager
{
    /// <summary>
    /// Instances are deployed to an available Google Cloud region and are accessible via their web interface.
    /// 
    /// To get more information about Instance, see:
    /// 
    /// * [API documentation](https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.instances)
    /// * How-to Guides
    ///   * [Official Documentation](https://cloud.google.com/secure-source-manager/docs/create-instance)
    /// 
    /// ## 
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.SecureSourceManager.Instance("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         InstanceId = "my-instance",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ## 
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var keyRing = new Gcp.Kms.KeyRing("key_ring", new()
    ///     {
    ///         Name = "my-keyring",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var cryptoKey = new Gcp.Kms.CryptoKey("crypto_key", new()
    ///     {
    ///         Name = "my-key",
    ///         KeyRing = keyRing.Id,
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var cryptoKeyBinding = new Gcp.Kms.CryptoKeyIAMMember("crypto_key_binding", new()
    ///     {
    ///         CryptoKeyId = cryptoKey.Id,
    ///         Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-sourcemanager.iam.gserviceaccount.com",
    ///     });
    /// 
    ///     var @default = new Gcp.SecureSourceManager.Instance("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         InstanceId = "my-instance",
    ///         KmsKey = cryptoKey.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             cryptoKeyBinding,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ## 
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var caPool = new Gcp.CertificateAuthority.CaPool("ca_pool", new()
    ///     {
    ///         Name = "ca-pool",
    ///         Location = "us-central1",
    ///         Tier = "ENTERPRISE",
    ///         PublishingOptions = new Gcp.CertificateAuthority.Inputs.CaPoolPublishingOptionsArgs
    ///         {
    ///             PublishCaCert = true,
    ///             PublishCrl = true,
    ///         },
    ///     });
    /// 
    ///     var rootCa = new Gcp.CertificateAuthority.Authority("root_ca", new()
    ///     {
    ///         Pool = caPool.Name,
    ///         CertificateAuthorityId = "root-ca",
    ///         Location = "us-central1",
    ///         Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
    ///         {
    ///             SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
    ///             {
    ///                 Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
    ///                 {
    ///                     Organization = "google",
    ///                     CommonName = "my-certificate-authority",
    ///                 },
    ///             },
    ///             X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
    ///             {
    ///                 CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
    ///                 {
    ///                     IsCa = true,
    ///                 },
    ///                 KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
    ///                 {
    ///                     BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
    ///                     {
    ///                         CertSign = true,
    ///                         CrlSign = true,
    ///                     },
    ///                     ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
    ///                     {
    ///                         ServerAuth = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
    ///         {
    ///             Algorithm = "RSA_PKCS1_4096_SHA256",
    ///         },
    ///         DeletionProtection = false,
    ///         IgnoreActiveCertificatesOnDeletion = true,
    ///         SkipGracePeriod = true,
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var caPoolBinding = new Gcp.CertificateAuthority.CaPoolIamBinding("ca_pool_binding", new()
    ///     {
    ///         CaPool = caPool.Id,
    ///         Role = "roles/privateca.certificateRequester",
    ///         Members = new[]
    ///         {
    ///             $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-sourcemanager.iam.gserviceaccount.com",
    ///         },
    ///     });
    /// 
    ///     var wait120Seconds = new Time.Index.Sleep("wait_120_seconds", new()
    ///     {
    ///         CreateDuration = "120s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             caPoolBinding,
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.SecureSourceManager.Instance("default", new()
    ///     {
    ///         InstanceId = "my-instance",
    ///         Location = "us-central1",
    ///         PrivateConfig = new Gcp.SecureSourceManager.Inputs.InstancePrivateConfigArgs
    ///         {
    ///             IsPrivate = true,
    ///             CaPool = caPool.Id,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             rootCa,
    ///             wait120Seconds,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ## 
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var caPool = new Gcp.CertificateAuthority.CaPool("ca_pool", new()
    ///     {
    ///         Name = "ca-pool",
    ///         Location = "us-central1",
    ///         Tier = "ENTERPRISE",
    ///         PublishingOptions = new Gcp.CertificateAuthority.Inputs.CaPoolPublishingOptionsArgs
    ///         {
    ///             PublishCaCert = true,
    ///             PublishCrl = true,
    ///         },
    ///     });
    /// 
    ///     var rootCa = new Gcp.CertificateAuthority.Authority("root_ca", new()
    ///     {
    ///         Pool = caPool.Name,
    ///         CertificateAuthorityId = "root-ca",
    ///         Location = "us-central1",
    ///         Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
    ///         {
    ///             SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
    ///             {
    ///                 Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
    ///                 {
    ///                     Organization = "google",
    ///                     CommonName = "my-certificate-authority",
    ///                 },
    ///             },
    ///             X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
    ///             {
    ///                 CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
    ///                 {
    ///                     IsCa = true,
    ///                 },
    ///                 KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
    ///                 {
    ///                     BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
    ///                     {
    ///                         CertSign = true,
    ///                         CrlSign = true,
    ///                     },
    ///                     ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
    ///                     {
    ///                         ServerAuth = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
    ///         {
    ///             Algorithm = "RSA_PKCS1_4096_SHA256",
    ///         },
    ///         DeletionProtection = false,
    ///         IgnoreActiveCertificatesOnDeletion = true,
    ///         SkipGracePeriod = true,
    ///     });
    /// 
    ///     var caPoolBinding = new Gcp.CertificateAuthority.CaPoolIamBinding("ca_pool_binding", new()
    ///     {
    ///         CaPool = caPool.Id,
    ///         Role = "roles/privateca.certificateRequester",
    ///         Members = new[]
    ///         {
    ///             $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-sourcemanager.iam.gserviceaccount.com",
    ///         },
    ///     });
    /// 
    ///     var wait120Seconds = new Time.Index.Sleep("wait_120_seconds", new()
    ///     {
    ///         CreateDuration = "120s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             caPoolBinding,
    ///         },
    ///     });
    /// 
    ///     // See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
    ///     var @default = new Gcp.SecureSourceManager.Instance("default", new()
    ///     {
    ///         InstanceId = "my-instance",
    ///         Location = "us-central1",
    ///         PrivateConfig = new Gcp.SecureSourceManager.Inputs.InstancePrivateConfigArgs
    ///         {
    ///             IsPrivate = true,
    ///             CaPool = caPool.Id,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             rootCa,
    ///             wait120Seconds,
    ///         },
    ///     });
    /// 
    ///     // Connect SSM private instance with L4 proxy ILB.
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Name = "my-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnet = new Gcp.Compute.Subnetwork("subnet", new()
    ///     {
    ///         Name = "my-subnet",
    ///         Region = "us-central1",
    ///         Network = network.Id,
    ///         IpCidrRange = "10.0.1.0/24",
    ///         PrivateIpGoogleAccess = true,
    ///     });
    /// 
    ///     var pscNeg = new Gcp.Compute.RegionNetworkEndpointGroup("psc_neg", new()
    ///     {
    ///         Name = "my-neg",
    ///         Region = "us-central1",
    ///         NetworkEndpointType = "PRIVATE_SERVICE_CONNECT",
    ///         PscTargetService = @default.PrivateConfig.Apply(privateConfig =&gt; privateConfig?.HttpServiceAttachment),
    ///         Network = network.Id,
    ///         Subnetwork = subnet.Id,
    ///     });
    /// 
    ///     var backendService = new Gcp.Compute.RegionBackendService("backend_service", new()
    ///     {
    ///         Name = "my-backend-service",
    ///         Region = "us-central1",
    ///         Protocol = "TCP",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         Backends = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.RegionBackendServiceBackendArgs
    ///             {
    ///                 Group = pscNeg.Id,
    ///                 BalancingMode = "UTILIZATION",
    ///                 CapacityScaler = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var proxySubnet = new Gcp.Compute.Subnetwork("proxy_subnet", new()
    ///     {
    ///         Name = "my-proxy-subnet",
    ///         Region = "us-central1",
    ///         Network = network.Id,
    ///         IpCidrRange = "10.0.2.0/24",
    ///         Purpose = "REGIONAL_MANAGED_PROXY",
    ///         Role = "ACTIVE",
    ///     });
    /// 
    ///     var targetProxy = new Gcp.Compute.RegionTargetTcpProxy("target_proxy", new()
    ///     {
    ///         Name = "my-target-proxy",
    ///         Region = "us-central1",
    ///         BackendService = backendService.Id,
    ///     });
    /// 
    ///     var fwRuleTargetProxy = new Gcp.Compute.ForwardingRule("fw_rule_target_proxy", new()
    ///     {
    ///         Name = "fw-rule-target-proxy",
    ///         Region = "us-central1",
    ///         LoadBalancingScheme = "INTERNAL_MANAGED",
    ///         IpProtocol = "TCP",
    ///         PortRange = "443",
    ///         Target = targetProxy.Id,
    ///         Network = network.Id,
    ///         Subnetwork = subnet.Id,
    ///         NetworkTier = "PREMIUM",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             proxySubnet,
    ///         },
    ///     });
    /// 
    ///     var privateZone = new Gcp.Dns.ManagedZone("private_zone", new()
    ///     {
    ///         Name = "my-dns-zone",
    ///         DnsName = "p.sourcemanager.dev.",
    ///         Visibility = "private",
    ///         PrivateVisibilityConfig = new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigArgs
    ///         {
    ///             Networks = new[]
    ///             {
    ///                 new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigNetworkArgs
    ///                 {
    ///                     NetworkUrl = network.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var ssmInstanceHtmlRecord = new Gcp.Dns.RecordSet("ssm_instance_html_record", new()
    ///     {
    ///         Name = @default.HostConfigs.Apply(hostConfigs =&gt; $"{hostConfigs[0].Html}."),
    ///         Type = "A",
    ///         Ttl = 300,
    ///         ManagedZone = privateZone.Name,
    ///         Rrdatas = new[]
    ///         {
    ///             fwRuleTargetProxy.IpAddress,
    ///         },
    ///     });
    /// 
    ///     var ssmInstanceApiRecord = new Gcp.Dns.RecordSet("ssm_instance_api_record", new()
    ///     {
    ///         Name = @default.HostConfigs.Apply(hostConfigs =&gt; $"{hostConfigs[0].Api}."),
    ///         Type = "A",
    ///         Ttl = 300,
    ///         ManagedZone = privateZone.Name,
    ///         Rrdatas = new[]
    ///         {
    ///             fwRuleTargetProxy.IpAddress,
    ///         },
    ///     });
    /// 
    ///     var ssmInstanceGitRecord = new Gcp.Dns.RecordSet("ssm_instance_git_record", new()
    ///     {
    ///         Name = @default.HostConfigs.Apply(hostConfigs =&gt; $"{hostConfigs[0].GitHttp}."),
    ///         Type = "A",
    ///         Ttl = 300,
    ///         ManagedZone = privateZone.Name,
    ///         Rrdatas = new[]
    ///         {
    ///             fwRuleTargetProxy.IpAddress,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ## 
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var caPool = new Gcp.CertificateAuthority.CaPool("ca_pool", new()
    ///     {
    ///         Name = "ca-pool",
    ///         Location = "us-central1",
    ///         Tier = "ENTERPRISE",
    ///         PublishingOptions = new Gcp.CertificateAuthority.Inputs.CaPoolPublishingOptionsArgs
    ///         {
    ///             PublishCaCert = true,
    ///             PublishCrl = true,
    ///         },
    ///     });
    /// 
    ///     var rootCa = new Gcp.CertificateAuthority.Authority("root_ca", new()
    ///     {
    ///         Pool = caPool.Name,
    ///         CertificateAuthorityId = "root-ca",
    ///         Location = "us-central1",
    ///         Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
    ///         {
    ///             SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
    ///             {
    ///                 Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
    ///                 {
    ///                     Organization = "google",
    ///                     CommonName = "my-certificate-authority",
    ///                 },
    ///             },
    ///             X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
    ///             {
    ///                 CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
    ///                 {
    ///                     IsCa = true,
    ///                 },
    ///                 KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
    ///                 {
    ///                     BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
    ///                     {
    ///                         CertSign = true,
    ///                         CrlSign = true,
    ///                     },
    ///                     ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
    ///                     {
    ///                         ServerAuth = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
    ///         {
    ///             Algorithm = "RSA_PKCS1_4096_SHA256",
    ///         },
    ///         DeletionProtection = false,
    ///         IgnoreActiveCertificatesOnDeletion = true,
    ///         SkipGracePeriod = true,
    ///     });
    /// 
    ///     var caPoolBinding = new Gcp.CertificateAuthority.CaPoolIamBinding("ca_pool_binding", new()
    ///     {
    ///         CaPool = caPool.Id,
    ///         Role = "roles/privateca.certificateRequester",
    ///         Members = new[]
    ///         {
    ///             $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-sourcemanager.iam.gserviceaccount.com",
    ///         },
    ///     });
    /// 
    ///     var wait120Seconds = new Time.Index.Sleep("wait_120_seconds", new()
    ///     {
    ///         CreateDuration = "120s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             caPoolBinding,
    ///         },
    ///     });
    /// 
    ///     // See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
    ///     var @default = new Gcp.SecureSourceManager.Instance("default", new()
    ///     {
    ///         InstanceId = "my-instance",
    ///         Location = "us-central1",
    ///         PrivateConfig = new Gcp.SecureSourceManager.Inputs.InstancePrivateConfigArgs
    ///         {
    ///             IsPrivate = true,
    ///             CaPool = caPool.Id,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             rootCa,
    ///             wait120Seconds,
    ///         },
    ///     });
    /// 
    ///     // Connect SSM private instance with endpoint.
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Name = "my-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnet = new Gcp.Compute.Subnetwork("subnet", new()
    ///     {
    ///         Name = "my-subnet",
    ///         Region = "us-central1",
    ///         Network = network.Id,
    ///         IpCidrRange = "10.0.60.0/24",
    ///         PrivateIpGoogleAccess = true,
    ///     });
    /// 
    ///     var address = new Gcp.Compute.Address("address", new()
    ///     {
    ///         Name = "my-address",
    ///         Region = "us-central1",
    ///         IPAddress = "10.0.60.100",
    ///         AddressType = "INTERNAL",
    ///         Subnetwork = subnet.Id,
    ///     });
    /// 
    ///     var fwRuleServiceAttachment = new Gcp.Compute.ForwardingRule("fw_rule_service_attachment", new()
    ///     {
    ///         Name = "fw-rule-service-attachment",
    ///         Region = "us-central1",
    ///         LoadBalancingScheme = "",
    ///         IpAddress = address.Id,
    ///         Network = network.Id,
    ///         Target = @default.PrivateConfig.Apply(privateConfig =&gt; privateConfig?.HttpServiceAttachment),
    ///     });
    /// 
    ///     var privateZone = new Gcp.Dns.ManagedZone("private_zone", new()
    ///     {
    ///         Name = "my-dns-zone",
    ///         DnsName = "p.sourcemanager.dev.",
    ///         Visibility = "private",
    ///         PrivateVisibilityConfig = new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigArgs
    ///         {
    ///             Networks = new[]
    ///             {
    ///                 new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigNetworkArgs
    ///                 {
    ///                     NetworkUrl = network.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var ssmInstanceHtmlRecord = new Gcp.Dns.RecordSet("ssm_instance_html_record", new()
    ///     {
    ///         Name = @default.HostConfigs.Apply(hostConfigs =&gt; $"{hostConfigs[0].Html}."),
    ///         Type = "A",
    ///         Ttl = 300,
    ///         ManagedZone = privateZone.Name,
    ///         Rrdatas = new[]
    ///         {
    ///             fwRuleServiceAttachment.IpAddress,
    ///         },
    ///     });
    /// 
    ///     var ssmInstanceApiRecord = new Gcp.Dns.RecordSet("ssm_instance_api_record", new()
    ///     {
    ///         Name = @default.HostConfigs.Apply(hostConfigs =&gt; $"{hostConfigs[0].Api}."),
    ///         Type = "A",
    ///         Ttl = 300,
    ///         ManagedZone = privateZone.Name,
    ///         Rrdatas = new[]
    ///         {
    ///             fwRuleServiceAttachment.IpAddress,
    ///         },
    ///     });
    /// 
    ///     var ssmInstanceGitRecord = new Gcp.Dns.RecordSet("ssm_instance_git_record", new()
    ///     {
    ///         Name = @default.HostConfigs.Apply(hostConfigs =&gt; $"{hostConfigs[0].GitHttp}."),
    ///         Type = "A",
    ///         Ttl = 300,
    ///         ManagedZone = privateZone.Name,
    ///         Rrdatas = new[]
    ///         {
    ///             fwRuleServiceAttachment.IpAddress,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Instance can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/instances/{{instance_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{instance_id}}`
    /// 
    /// * `{{location}}/{{instance_id}}`
    /// 
    /// * `{{instance_id}}`
    /// 
    /// When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:securesourcemanager/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{instance_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:securesourcemanager/instance:Instance default {{project}}/{{location}}/{{instance_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:securesourcemanager/instance:Instance default {{location}}/{{instance_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:securesourcemanager/instance:Instance default {{instance_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:securesourcemanager/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time the Instance was created in UTC.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// A list of hostnames for this instance.
        /// Structure is documented below.
        /// </summary>
        [Output("hostConfigs")]
        public Output<ImmutableArray<Outputs.InstanceHostConfig>> HostConfigs { get; private set; } = null!;

        /// <summary>
        /// The name for the Instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Customer-managed encryption key name, in the format projects/*/locations/*/keyRings/*/cryptoKeys/*.
        /// </summary>
        [Output("kmsKey")]
        public Output<string?> KmsKey { get; private set; } = null!;

        /// <summary>
        /// Labels as key value pairs.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location for the Instance.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name for the Instance.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Private settings for private instance.
        /// Structure is documented below.
        /// </summary>
        [Output("privateConfig")]
        public Output<Outputs.InstancePrivateConfig?> PrivateConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The current state of the Instance.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Provides information about the current instance state.
        /// </summary>
        [Output("stateNote")]
        public Output<string> StateNote { get; private set; } = null!;

        /// <summary>
        /// Time the Instance was updated in UTC.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("gcp:securesourcemanager/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:securesourcemanager/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name for the Instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Customer-managed encryption key name, in the format projects/*/locations/*/keyRings/*/cryptoKeys/*.
        /// </summary>
        [Input("kmsKey")]
        public Input<string>? KmsKey { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location for the Instance.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Private settings for private instance.
        /// Structure is documented below.
        /// </summary>
        [Input("privateConfig")]
        public Input<Inputs.InstancePrivateConfigArgs>? PrivateConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time the Instance was created in UTC.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("hostConfigs")]
        private InputList<Inputs.InstanceHostConfigGetArgs>? _hostConfigs;

        /// <summary>
        /// A list of hostnames for this instance.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.InstanceHostConfigGetArgs> HostConfigs
        {
            get => _hostConfigs ?? (_hostConfigs = new InputList<Inputs.InstanceHostConfigGetArgs>());
            set => _hostConfigs = value;
        }

        /// <summary>
        /// The name for the Instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Customer-managed encryption key name, in the format projects/*/locations/*/keyRings/*/cryptoKeys/*.
        /// </summary>
        [Input("kmsKey")]
        public Input<string>? KmsKey { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location for the Instance.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name for the Instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Private settings for private instance.
        /// Structure is documented below.
        /// </summary>
        [Input("privateConfig")]
        public Input<Inputs.InstancePrivateConfigGetArgs>? PrivateConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The current state of the Instance.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Provides information about the current instance state.
        /// </summary>
        [Input("stateNote")]
        public Input<string>? StateNote { get; set; }

        /// <summary>
        /// Time the Instance was updated in UTC.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
