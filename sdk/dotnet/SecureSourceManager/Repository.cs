// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.SecureSourceManager
{
    /// <summary>
    /// Repositories store source code. It supports all Git SCM client commands and has built-in pull requests and issue tracking. Both HTTPS and SSH authentication are supported.
    /// 
    /// To get more information about Repository, see:
    /// 
    /// * [API documentation](https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/secure-source-manager/docs/overview)
    /// 
    /// ## Example Usage
    /// 
    /// ### Secure Source Manager Repository Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.SecureSourceManager.Instance("instance", new()
    ///     {
    ///         Location = "us-central1",
    ///         InstanceId = "my-instance",
    ///     });
    /// 
    ///     var @default = new Gcp.SecureSourceManager.Repository("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         RepositoryId = "my-repository",
    ///         Instance = instance.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Secure Source Manager Repository Initial Config
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.SecureSourceManager.Instance("instance", new()
    ///     {
    ///         Location = "us-central1",
    ///         InstanceId = "my-instance",
    ///     });
    /// 
    ///     var @default = new Gcp.SecureSourceManager.Repository("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         RepositoryId = "my-repository",
    ///         Instance = instance.Name,
    ///         Description = "This is a test repository",
    ///         InitialConfig = new Gcp.SecureSourceManager.Inputs.RepositoryInitialConfigArgs
    ///         {
    ///             DefaultBranch = "main",
    ///             Gitignores = new[]
    ///             {
    ///                 "python",
    ///             },
    ///             License = "mit",
    ///             Readme = "default",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Repository can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{repository_id}}`
    /// 
    /// * `{{location}}/{{repository_id}}`
    /// 
    /// * `{{repository_id}}`
    /// 
    /// When using the `pulumi import` command, Repository can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:securesourcemanager/repository:Repository default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:securesourcemanager/repository:Repository default {{project}}/{{location}}/{{repository_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:securesourcemanager/repository:Repository default {{location}}/{{repository_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:securesourcemanager/repository:Repository default {{repository_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:securesourcemanager/repository:Repository")]
    public partial class Repository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time the repository was created in UTC.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Description of the repository, which cannot exceed 500 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Initial configurations for the repository.
        /// Structure is documented below.
        /// </summary>
        [Output("initialConfig")]
        public Output<Outputs.RepositoryInitialConfig?> InitialConfig { get; private set; } = null!;

        /// <summary>
        /// The name of the instance in which the repository is hosted.
        /// </summary>
        [Output("instance")]
        public Output<string> Instance { get; private set; } = null!;

        /// <summary>
        /// The location for the Repository.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name for the Repository.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The ID for the Repository.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("repositoryId")]
        public Output<string> RepositoryId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the repository.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Time the repository was updated in UTC.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// URIs for the repository.
        /// Structure is documented below.
        /// </summary>
        [Output("uris")]
        public Output<ImmutableArray<Outputs.RepositoryUri>> Uris { get; private set; } = null!;


        /// <summary>
        /// Create a Repository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Repository(string name, RepositoryArgs args, CustomResourceOptions? options = null)
            : base("gcp:securesourcemanager/repository:Repository", name, args ?? new RepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Repository(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
            : base("gcp:securesourcemanager/repository:Repository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Repository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Repository Get(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new Repository(name, id, state, options);
        }
    }

    public sealed class RepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the repository, which cannot exceed 500 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Initial configurations for the repository.
        /// Structure is documented below.
        /// </summary>
        [Input("initialConfig")]
        public Input<Inputs.RepositoryInitialConfigArgs>? InitialConfig { get; set; }

        /// <summary>
        /// The name of the instance in which the repository is hosted.
        /// </summary>
        [Input("instance", required: true)]
        public Input<string> Instance { get; set; } = null!;

        /// <summary>
        /// The location for the Repository.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The ID for the Repository.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public RepositoryArgs()
        {
        }
        public static new RepositoryArgs Empty => new RepositoryArgs();
    }

    public sealed class RepositoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time the repository was created in UTC.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Description of the repository, which cannot exceed 500 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Initial configurations for the repository.
        /// Structure is documented below.
        /// </summary>
        [Input("initialConfig")]
        public Input<Inputs.RepositoryInitialConfigGetArgs>? InitialConfig { get; set; }

        /// <summary>
        /// The name of the instance in which the repository is hosted.
        /// </summary>
        [Input("instance")]
        public Input<string>? Instance { get; set; }

        /// <summary>
        /// The location for the Repository.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name for the Repository.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The ID for the Repository.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("repositoryId")]
        public Input<string>? RepositoryId { get; set; }

        /// <summary>
        /// Unique identifier of the repository.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Time the repository was updated in UTC.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        [Input("uris")]
        private InputList<Inputs.RepositoryUriGetArgs>? _uris;

        /// <summary>
        /// URIs for the repository.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RepositoryUriGetArgs> Uris
        {
            get => _uris ?? (_uris = new InputList<Inputs.RepositoryUriGetArgs>());
            set => _uris = value;
        }

        public RepositoryState()
        {
        }
        public static new RepositoryState Empty => new RepositoryState();
    }
}
