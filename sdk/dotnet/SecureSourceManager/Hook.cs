// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.SecureSourceManager
{
    /// <summary>
    /// Hook is a user-defined HTTP callback triggered by an event.
    /// 
    /// To get more information about Hook, see:
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/secure-source-manager/docs/overview)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Hook can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{repository_id}}/{{hook_id}}`
    /// 
    /// * `{{location}}/{{repository_id}}/{{hook_id}}`
    /// 
    /// * `{{hook_id}}`
    /// 
    /// When using the `pulumi import` command, Hook can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:securesourcemanager/hook:Hook default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:securesourcemanager/hook:Hook default {{project}}/{{location}}/{{repository_id}}/{{hook_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:securesourcemanager/hook:Hook default {{location}}/{{repository_id}}/{{hook_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:securesourcemanager/hook:Hook default {{hook_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:securesourcemanager/hook:Hook")]
    public partial class Hook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Create timestamp.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Determines if the hook disabled or not.
        /// Set to true to stop sending traffic.
        /// </summary>
        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        /// <summary>
        /// The events that trigger hook on.
        /// Each value may be one of: `PUSH`, `PULL_REQUEST`.
        /// </summary>
        [Output("events")]
        public Output<ImmutableArray<string>> Events { get; private set; } = null!;

        /// <summary>
        /// The ID for the Hook.
        /// </summary>
        [Output("hookId")]
        public Output<string> HookId { get; private set; } = null!;

        /// <summary>
        /// The location for the Repository.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for a Hook. The name should be of the format:
        /// `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The trigger option for push events.
        /// Structure is documented below.
        /// </summary>
        [Output("pushOption")]
        public Output<Outputs.HookPushOption> PushOption { get; private set; } = null!;

        /// <summary>
        /// The ID for the Repository.
        /// </summary>
        [Output("repositoryId")]
        public Output<string> RepositoryId { get; private set; } = null!;

        /// <summary>
        /// The sensitive query string to be appended to the target URI.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        [Output("sensitiveQueryString")]
        public Output<string?> SensitiveQueryString { get; private set; } = null!;

        /// <summary>
        /// The target URI to which the payloads will be delivered.
        /// </summary>
        [Output("targetUri")]
        public Output<string> TargetUri { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the hook.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Update timestamp.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Hook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Hook(string name, HookArgs args, CustomResourceOptions? options = null)
            : base("gcp:securesourcemanager/hook:Hook", name, args ?? new HookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Hook(string name, Input<string> id, HookState? state = null, CustomResourceOptions? options = null)
            : base("gcp:securesourcemanager/hook:Hook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "sensitiveQueryString",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Hook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Hook Get(string name, Input<string> id, HookState? state = null, CustomResourceOptions? options = null)
        {
            return new Hook(name, id, state, options);
        }
    }

    public sealed class HookArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines if the hook disabled or not.
        /// Set to true to stop sending traffic.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("events")]
        private InputList<string>? _events;

        /// <summary>
        /// The events that trigger hook on.
        /// Each value may be one of: `PUSH`, `PULL_REQUEST`.
        /// </summary>
        public InputList<string> Events
        {
            get => _events ?? (_events = new InputList<string>());
            set => _events = value;
        }

        /// <summary>
        /// The ID for the Hook.
        /// </summary>
        [Input("hookId", required: true)]
        public Input<string> HookId { get; set; } = null!;

        /// <summary>
        /// The location for the Repository.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The trigger option for push events.
        /// Structure is documented below.
        /// </summary>
        [Input("pushOption")]
        public Input<Inputs.HookPushOptionArgs>? PushOption { get; set; }

        /// <summary>
        /// The ID for the Repository.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        [Input("sensitiveQueryString")]
        private Input<string>? _sensitiveQueryString;

        /// <summary>
        /// The sensitive query string to be appended to the target URI.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? SensitiveQueryString
        {
            get => _sensitiveQueryString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sensitiveQueryString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The target URI to which the payloads will be delivered.
        /// </summary>
        [Input("targetUri", required: true)]
        public Input<string> TargetUri { get; set; } = null!;

        public HookArgs()
        {
        }
        public static new HookArgs Empty => new HookArgs();
    }

    public sealed class HookState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Create timestamp.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Determines if the hook disabled or not.
        /// Set to true to stop sending traffic.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("events")]
        private InputList<string>? _events;

        /// <summary>
        /// The events that trigger hook on.
        /// Each value may be one of: `PUSH`, `PULL_REQUEST`.
        /// </summary>
        public InputList<string> Events
        {
            get => _events ?? (_events = new InputList<string>());
            set => _events = value;
        }

        /// <summary>
        /// The ID for the Hook.
        /// </summary>
        [Input("hookId")]
        public Input<string>? HookId { get; set; }

        /// <summary>
        /// The location for the Repository.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A unique identifier for a Hook. The name should be of the format:
        /// `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The trigger option for push events.
        /// Structure is documented below.
        /// </summary>
        [Input("pushOption")]
        public Input<Inputs.HookPushOptionGetArgs>? PushOption { get; set; }

        /// <summary>
        /// The ID for the Repository.
        /// </summary>
        [Input("repositoryId")]
        public Input<string>? RepositoryId { get; set; }

        [Input("sensitiveQueryString")]
        private Input<string>? _sensitiveQueryString;

        /// <summary>
        /// The sensitive query string to be appended to the target URI.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? SensitiveQueryString
        {
            get => _sensitiveQueryString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sensitiveQueryString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The target URI to which the payloads will be delivered.
        /// </summary>
        [Input("targetUri")]
        public Input<string>? TargetUri { get; set; }

        /// <summary>
        /// Unique identifier of the hook.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Update timestamp.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public HookState()
        {
        }
        public static new HookState Empty => new HookState();
    }
}
