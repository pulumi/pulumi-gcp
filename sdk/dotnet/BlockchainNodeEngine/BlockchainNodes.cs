// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BlockchainNodeEngine
{
    /// <summary>
    /// A representation of a blockchain node.
    /// 
    /// To get more information about BlockchainNodes, see:
    /// 
    /// * [API documentation](https://cloud.google.com/blockchain-node-engine/docs/reference/rest/v1/projects.locations.blockchainNodes)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/blockchain-node-engine)
    /// 
    /// ## Example Usage
    /// ### Blockchain Nodes Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultNode = new Gcp.BlockchainNodeEngine.BlockchainNodes("defaultNode", new()
    ///     {
    ///         BlockchainNodeId = "blockchain_basic_node",
    ///         BlockchainType = "ETHEREUM",
    ///         EthereumDetails = new Gcp.BlockchainNodeEngine.Inputs.BlockchainNodesEthereumDetailsArgs
    ///         {
    ///             ApiEnableAdmin = true,
    ///             ApiEnableDebug = true,
    ///             ConsensusClient = "LIGHTHOUSE",
    ///             ExecutionClient = "ERIGON",
    ///             Network = "MAINNET",
    ///             NodeType = "ARCHIVE",
    ///             ValidatorConfig = new Gcp.BlockchainNodeEngine.Inputs.BlockchainNodesEthereumDetailsValidatorConfigArgs
    ///             {
    ///                 MevRelayUrls = new[]
    ///                 {
    ///                     "https://mev1.example.org/",
    ///                     "https://mev2.example.org/",
    ///                 },
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "environment", "dev" },
    ///         },
    ///         Location = "us-central1",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Blockchain Nodes Geth Details
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultNodeGeth = new Gcp.BlockchainNodeEngine.BlockchainNodes("defaultNodeGeth", new()
    ///     {
    ///         BlockchainNodeId = "blockchain_geth_node",
    ///         BlockchainType = "ETHEREUM",
    ///         EthereumDetails = new Gcp.BlockchainNodeEngine.Inputs.BlockchainNodesEthereumDetailsArgs
    ///         {
    ///             ApiEnableAdmin = true,
    ///             ApiEnableDebug = true,
    ///             ConsensusClient = "LIGHTHOUSE",
    ///             ExecutionClient = "GETH",
    ///             GethDetails = new Gcp.BlockchainNodeEngine.Inputs.BlockchainNodesEthereumDetailsGethDetailsArgs
    ///             {
    ///                 GarbageCollectionMode = "FULL",
    ///             },
    ///             Network = "MAINNET",
    ///             NodeType = "FULL",
    ///             ValidatorConfig = new Gcp.BlockchainNodeEngine.Inputs.BlockchainNodesEthereumDetailsValidatorConfigArgs
    ///             {
    ///                 MevRelayUrls = new[]
    ///                 {
    ///                     "https://mev1.example.org/",
    ///                     "https://mev2.example.org/",
    ///                 },
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "environment", "dev" },
    ///         },
    ///         Location = "us-central1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// BlockchainNodes can be imported using any of these accepted formats* `projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}` * `{{project}}/{{location}}/{{blockchain_node_id}}` * `{{location}}/{{blockchain_node_id}}` When using the `pulumi import` command, BlockchainNodes can be imported using one of the formats above. For example
    /// 
    /// ```sh
    ///  $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default {{project}}/{{location}}/{{blockchain_node_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default {{location}}/{{blockchain_node_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes")]
    public partial class BlockchainNodes : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the requesting object.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("blockchainNodeId")]
        public Output<string> BlockchainNodeId { get; private set; } = null!;

        /// <summary>
        /// User-provided key-value pairs
        /// Possible values are: `ETHEREUM`.
        /// </summary>
        [Output("blockchainType")]
        public Output<string?> BlockchainType { get; private set; } = null!;

        /// <summary>
        /// The connection information through which to interact with a blockchain node.
        /// Structure is documented below.
        /// </summary>
        [Output("connectionInfos")]
        public Output<ImmutableArray<Outputs.BlockchainNodesConnectionInfo>> ConnectionInfos { get; private set; } = null!;

        /// <summary>
        /// The timestamp at which the blockchain node was first created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// User-provided key-value pairs
        /// Structure is documented below.
        /// </summary>
        [Output("ethereumDetails")]
        public Output<Outputs.BlockchainNodesEthereumDetails?> EthereumDetails { get; private set; } = null!;

        /// <summary>
        /// User-provided key-value pairs
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Location of Blockchain Node being created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The timestamp at which the blockchain node was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a BlockchainNodes resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BlockchainNodes(string name, BlockchainNodesArgs args, CustomResourceOptions? options = null)
            : base("gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes", name, args ?? new BlockchainNodesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BlockchainNodes(string name, Input<string> id, BlockchainNodesState? state = null, CustomResourceOptions? options = null)
            : base("gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BlockchainNodes resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BlockchainNodes Get(string name, Input<string> id, BlockchainNodesState? state = null, CustomResourceOptions? options = null)
        {
            return new BlockchainNodes(name, id, state, options);
        }
    }

    public sealed class BlockchainNodesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the requesting object.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("blockchainNodeId", required: true)]
        public Input<string> BlockchainNodeId { get; set; } = null!;

        /// <summary>
        /// User-provided key-value pairs
        /// Possible values are: `ETHEREUM`.
        /// </summary>
        [Input("blockchainType")]
        public Input<string>? BlockchainType { get; set; }

        /// <summary>
        /// User-provided key-value pairs
        /// Structure is documented below.
        /// </summary>
        [Input("ethereumDetails")]
        public Input<Inputs.BlockchainNodesEthereumDetailsArgs>? EthereumDetails { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-provided key-value pairs
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Location of Blockchain Node being created.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public BlockchainNodesArgs()
        {
        }
        public static new BlockchainNodesArgs Empty => new BlockchainNodesArgs();
    }

    public sealed class BlockchainNodesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the requesting object.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("blockchainNodeId")]
        public Input<string>? BlockchainNodeId { get; set; }

        /// <summary>
        /// User-provided key-value pairs
        /// Possible values are: `ETHEREUM`.
        /// </summary>
        [Input("blockchainType")]
        public Input<string>? BlockchainType { get; set; }

        [Input("connectionInfos")]
        private InputList<Inputs.BlockchainNodesConnectionInfoGetArgs>? _connectionInfos;

        /// <summary>
        /// The connection information through which to interact with a blockchain node.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.BlockchainNodesConnectionInfoGetArgs> ConnectionInfos
        {
            get => _connectionInfos ?? (_connectionInfos = new InputList<Inputs.BlockchainNodesConnectionInfoGetArgs>());
            set => _connectionInfos = value;
        }

        /// <summary>
        /// The timestamp at which the blockchain node was first created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// User-provided key-value pairs
        /// Structure is documented below.
        /// </summary>
        [Input("ethereumDetails")]
        public Input<Inputs.BlockchainNodesEthereumDetailsGetArgs>? EthereumDetails { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-provided key-value pairs
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Location of Blockchain Node being created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The timestamp at which the blockchain node was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public BlockchainNodesState()
        {
        }
        public static new BlockchainNodesState Empty => new BlockchainNodesState();
    }
}
