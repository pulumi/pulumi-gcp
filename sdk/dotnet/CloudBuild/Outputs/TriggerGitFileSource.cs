// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudBuild.Outputs
{

    [OutputType]
    public sealed class TriggerGitFileSource
    {
        /// <summary>
        /// The full resource name of the github enterprise config.
        /// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
        /// </summary>
        public readonly string? GithubEnterpriseConfig;
        /// <summary>
        /// The path of the file, with the repo root as the root of the path.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
        /// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
        /// Possible values are `UNKNOWN`, `CLOUD_SOURCE_REPOSITORIES`, `GITHUB`, and `BITBUCKET_SERVER`.
        /// </summary>
        public readonly string RepoType;
        /// <summary>
        /// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
        /// filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
        /// If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
        /// </summary>
        public readonly string? Revision;
        /// <summary>
        /// The URI of the repo (optional). If unspecified, the repo from which the trigger
        /// invocation originated is assumed to be the repo from which to read the specified path.
        /// </summary>
        public readonly string? Uri;

        [OutputConstructor]
        private TriggerGitFileSource(
            string? githubEnterpriseConfig,

            string path,

            string repoType,

            string? revision,

            string? uri)
        {
            GithubEnterpriseConfig = githubEnterpriseConfig;
            Path = path;
            RepoType = repoType;
            Revision = revision;
            Uri = uri;
        }
    }
}
