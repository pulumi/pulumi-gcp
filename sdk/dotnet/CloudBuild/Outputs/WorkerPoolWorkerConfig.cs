// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudBuild.Outputs
{

    [OutputType]
    public sealed class WorkerPoolWorkerConfig
    {
        /// <summary>
        /// Size of the disk attached to the worker, in GB. See [diskSizeGb](https://cloud.google.com/build/docs/private-pools/private-pool-config-file-schema#disksizegb). Specify a value of up to 1000. If `0` is specified, Cloud Build will use a standard disk size.
        /// </summary>
        public readonly int? DiskSizeGb;
        /// <summary>
        /// Enable nested virtualization on the worker, if supported by the machine type. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will set this to false.
        /// </summary>
        public readonly bool? EnableNestedVirtualization;
        /// <summary>
        /// Machine type of a worker, such as `n1-standard-1`. See [machineType](https://cloud.google.com/build/docs/private-pools/private-pool-config-file-schema#machinetype). If left blank, Cloud Build will use `n1-standard-1`.
        /// </summary>
        public readonly string? MachineType;
        /// <summary>
        /// If true, workers are created without any public address, which prevents network egress to public IPs.
        /// </summary>
        public readonly bool? NoExternalIp;

        [OutputConstructor]
        private WorkerPoolWorkerConfig(
            int? diskSizeGb,

            bool? enableNestedVirtualization,

            string? machineType,

            bool? noExternalIp)
        {
            DiskSizeGb = diskSizeGb;
            EnableNestedVirtualization = enableNestedVirtualization;
            MachineType = machineType;
            NoExternalIp = noExternalIp;
        }
    }
}
