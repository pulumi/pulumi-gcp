// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudBuild.Inputs
{

    public sealed class TriggerGitFileSourceGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Path at which to mount the volume.
        /// Paths must be absolute and cannot conflict with other volume paths on the same
        /// build step or with certain reserved volume paths.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
        /// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
        /// Possible values are `UNKNOWN`, `CLOUD_SOURCE_REPOSITORIES`, `GITHUB`, and `BITBUCKET_SERVER`.
        /// </summary>
        [Input("repoType", required: true)]
        public Input<string> RepoType { get; set; } = null!;

        /// <summary>
        /// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
        /// filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
        /// If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
        /// </summary>
        [Input("revision")]
        public Input<string>? Revision { get; set; }

        /// <summary>
        /// The URI of the repo (required).
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public TriggerGitFileSourceGetArgs()
        {
        }
        public static new TriggerGitFileSourceGetArgs Empty => new TriggerGitFileSourceGetArgs();
    }
}
