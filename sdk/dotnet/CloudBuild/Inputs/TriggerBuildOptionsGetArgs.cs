// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudBuild.Inputs
{

    public sealed class TriggerBuildOptionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
        /// some of the space will be used by the operating system and build utilities.
        /// Also note that this is the minimum disk size that will be allocated for the build --
        /// the build may run with a larger disk than requested. At present, the maximum disk size
        /// is 1000GB; builds that request more than the maximum are rejected with an error.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        /// <summary>
        /// Option to specify whether or not to apply bash style string operations to the substitutions.
        /// NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
        /// </summary>
        [Input("dynamicSubstitutions")]
        public Input<bool>? DynamicSubstitutions { get; set; }

        [Input("envs")]
        private InputList<string>? _envs;

        /// <summary>
        /// A list of global environment variable definitions that will exist for all build steps
        /// in this build. If a variable is defined in both globally and in a build step,
        /// the variable will use the build step value.
        /// The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
        /// </summary>
        public InputList<string> Envs
        {
            get => _envs ?? (_envs = new InputList<string>());
            set => _envs = value;
        }

        /// <summary>
        /// Option to define build log streaming behavior to Google Cloud Storage.
        /// Possible values are `STREAM_DEFAULT`, `STREAM_ON`, and `STREAM_OFF`.
        /// </summary>
        [Input("logStreamingOption")]
        public Input<string>? LogStreamingOption { get; set; }

        /// <summary>
        /// Option to specify the logging mode, which determines if and where build logs are stored.
        /// Possible values are `LOGGING_UNSPECIFIED`, `LEGACY`, `GCS_ONLY`, `STACKDRIVER_ONLY`, and `NONE`.
        /// </summary>
        [Input("logging")]
        public Input<string>? Logging { get; set; }

        /// <summary>
        /// Compute Engine machine type on which to run the build.
        /// Possible values are `UNSPECIFIED`, `N1_HIGHCPU_8`, `N1_HIGHCPU_32`, `E2_HIGHCPU_8`, and `E2_HIGHCPU_32`.
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        /// <summary>
        /// Requested verifiability options.
        /// Possible values are `NOT_VERIFIED` and `VERIFIED`.
        /// </summary>
        [Input("requestedVerifyOption")]
        public Input<string>? RequestedVerifyOption { get; set; }

        [Input("secretEnvs")]
        private InputList<string>? _secretEnvs;

        /// <summary>
        /// A list of global environment variables, which are encrypted using a Cloud Key Management
        /// Service crypto key. These values must be specified in the build's Secret. These variables
        /// will be available to all build steps in this build.
        /// </summary>
        public InputList<string> SecretEnvs
        {
            get => _secretEnvs ?? (_secretEnvs = new InputList<string>());
            set => _secretEnvs = value;
        }

        [Input("sourceProvenanceHashes")]
        private InputList<string>? _sourceProvenanceHashes;

        /// <summary>
        /// Requested hash for SourceProvenance.
        /// Each value may be one of `NONE`, `SHA256`, and `MD5`.
        /// </summary>
        public InputList<string> SourceProvenanceHashes
        {
            get => _sourceProvenanceHashes ?? (_sourceProvenanceHashes = new InputList<string>());
            set => _sourceProvenanceHashes = value;
        }

        /// <summary>
        /// Option to specify behavior when there is an error in the substitution checks.
        /// NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
        /// in the build configuration file.
        /// Possible values are `MUST_MATCH` and `ALLOW_LOOSE`.
        /// </summary>
        [Input("substitutionOption")]
        public Input<string>? SubstitutionOption { get; set; }

        [Input("volumes")]
        private InputList<Inputs.TriggerBuildOptionsVolumeGetArgs>? _volumes;

        /// <summary>
        /// Global list of volumes to mount for ALL build steps
        /// Each volume is created as an empty volume prior to starting the build process.
        /// Upon completion of the build, volumes and their contents are discarded. Global
        /// volume names and paths cannot conflict with the volumes defined a build step.
        /// Using a global volume in a build with only one step is not valid as it is indicative
        /// of a build request with an incorrect configuration.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.TriggerBuildOptionsVolumeGetArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.TriggerBuildOptionsVolumeGetArgs>());
            set => _volumes = value;
        }

        /// <summary>
        /// Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
        /// This field is experimental.
        /// </summary>
        [Input("workerPool")]
        public Input<string>? WorkerPool { get; set; }

        public TriggerBuildOptionsGetArgs()
        {
        }
    }
}
