// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudBuild.Inputs
{

    public sealed class TriggerBuildGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
        /// Structure is documented below.
        /// </summary>
        [Input("artifacts")]
        public Input<Inputs.TriggerBuildArtifactsGetArgs>? Artifacts { get; set; }

        /// <summary>
        /// Secrets and secret environment variables.
        /// Structure is documented below.
        /// </summary>
        [Input("availableSecrets")]
        public Input<Inputs.TriggerBuildAvailableSecretsGetArgs>? AvailableSecrets { get; set; }

        [Input("images")]
        private InputList<string>? _images;

        /// <summary>
        /// A list of images to be pushed upon the successful completion of all build steps.
        /// The images will be pushed using the builder service account's credentials.
        /// The digests of the pushed images will be stored in the Build resource's results field.
        /// If any of the images fail to be pushed, the build is marked FAILURE.
        /// </summary>
        public InputList<string> Images
        {
            get => _images ?? (_images = new InputList<string>());
            set => _images = value;
        }

        /// <summary>
        /// Google Cloud Storage bucket where logs should be written.
        /// Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
        /// </summary>
        [Input("logsBucket")]
        public Input<string>? LogsBucket { get; set; }

        /// <summary>
        /// Special options for this build.
        /// Structure is documented below.
        /// </summary>
        [Input("options")]
        public Input<Inputs.TriggerBuildOptionsGetArgs>? Options { get; set; }

        /// <summary>
        /// TTL in queue for this build. If provided and the build is enqueued longer than this value,
        /// the build will expire and the build status will be EXPIRED.
        /// The TTL starts ticking from createTime.
        /// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        /// </summary>
        [Input("queueTtl")]
        public Input<string>? QueueTtl { get; set; }

        [Input("secrets")]
        private InputList<Inputs.TriggerBuildSecretGetArgs>? _secrets;

        /// <summary>
        /// Secrets to decrypt using Cloud Key Management Service.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.TriggerBuildSecretGetArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.TriggerBuildSecretGetArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// The location of the source files to build.
        /// One of `storageSource` or `repoSource` must be provided.
        /// Structure is documented below.
        /// </summary>
        [Input("source")]
        public Input<Inputs.TriggerBuildSourceGetArgs>? Source { get; set; }

        [Input("steps", required: true)]
        private InputList<Inputs.TriggerBuildStepGetArgs>? _steps;

        /// <summary>
        /// The operations to be performed on the workspace.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.TriggerBuildStepGetArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.TriggerBuildStepGetArgs>());
            set => _steps = value;
        }

        [Input("substitutions")]
        private InputMap<string>? _substitutions;

        /// <summary>
        /// Substitutions to use in a triggered build. Should only be used with triggers.run
        /// </summary>
        public InputMap<string> Substitutions
        {
            get => _substitutions ?? (_substitutions = new InputMap<string>());
            set => _substitutions = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags for annotation of a Build. These are not docker tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Time limit for executing this build step. If not defined,
        /// the step has no
        /// time limit and will be allowed to continue to run until either it
        /// completes or the build itself times out.
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public TriggerBuildGetArgs()
        {
        }
        public static new TriggerBuildGetArgs Empty => new TriggerBuildGetArgs();
    }
}
