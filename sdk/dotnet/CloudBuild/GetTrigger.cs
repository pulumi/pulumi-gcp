// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudBuild
{
    public static class GetTrigger
    {
        /// <summary>
        /// To get more information about Cloudbuild Trigger, see:
        /// 
        /// * [API documentation](https://cloud.google.com/build/docs/api/reference/rest/v1/projects.triggers)
        /// * How-to Guides
        ///     * [Official Documentation](https://cloud.google.com/build/docs/automating-builds/create-manage-triggers)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var name = Gcp.CloudBuild.GetTrigger.Invoke(new()
        ///     {
        ///         Project = "your-project-id",
        ///         TriggerId = google_cloudbuild_trigger.Filename_trigger.Trigger_id,
        ///         Location = "location of trigger build",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTriggerResult> InvokeAsync(GetTriggerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTriggerResult>("gcp:cloudbuild/getTrigger:getTrigger", args ?? new GetTriggerArgs(), options.WithDefaults());

        /// <summary>
        /// To get more information about Cloudbuild Trigger, see:
        /// 
        /// * [API documentation](https://cloud.google.com/build/docs/api/reference/rest/v1/projects.triggers)
        /// * How-to Guides
        ///     * [Official Documentation](https://cloud.google.com/build/docs/automating-builds/create-manage-triggers)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var name = Gcp.CloudBuild.GetTrigger.Invoke(new()
        ///     {
        ///         Project = "your-project-id",
        ///         TriggerId = google_cloudbuild_trigger.Filename_trigger.Trigger_id,
        ///         Location = "location of trigger build",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTriggerResult> Invoke(GetTriggerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTriggerResult>("gcp:cloudbuild/getTrigger:getTrigger", args ?? new GetTriggerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTriggerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Cloud Build location for the trigger.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The unique identifier for the trigger..
        /// </summary>
        [Input("triggerId", required: true)]
        public string TriggerId { get; set; } = null!;

        public GetTriggerArgs()
        {
        }
        public static new GetTriggerArgs Empty => new GetTriggerArgs();
    }

    public sealed class GetTriggerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Cloud Build location for the trigger.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The unique identifier for the trigger..
        /// </summary>
        [Input("triggerId", required: true)]
        public Input<string> TriggerId { get; set; } = null!;

        public GetTriggerInvokeArgs()
        {
        }
        public static new GetTriggerInvokeArgs Empty => new GetTriggerInvokeArgs();
    }


    [OutputType]
    public sealed class GetTriggerResult
    {
        public readonly ImmutableArray<Outputs.GetTriggerApprovalConfigResult> ApprovalConfigs;
        public readonly ImmutableArray<Outputs.GetTriggerBuildResult> Builds;
        public readonly string CreateTime;
        public readonly string Description;
        public readonly bool Disabled;
        public readonly string Filename;
        public readonly string Filter;
        public readonly ImmutableArray<Outputs.GetTriggerGitFileSourceResult> GitFileSources;
        public readonly ImmutableArray<Outputs.GetTriggerGithubResult> Githubs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> IgnoredFiles;
        public readonly string IncludeBuildLogs;
        public readonly ImmutableArray<string> IncludedFiles;
        public readonly string Location;
        public readonly string Name;
        public readonly string? Project;
        public readonly ImmutableArray<Outputs.GetTriggerPubsubConfigResult> PubsubConfigs;
        public readonly ImmutableArray<Outputs.GetTriggerRepositoryEventConfigResult> RepositoryEventConfigs;
        public readonly string ServiceAccount;
        public readonly ImmutableArray<Outputs.GetTriggerSourceToBuildResult> SourceToBuilds;
        public readonly ImmutableDictionary<string, string> Substitutions;
        public readonly ImmutableArray<string> Tags;
        public readonly string TriggerId;
        public readonly ImmutableArray<Outputs.GetTriggerTriggerTemplateResult> TriggerTemplates;
        public readonly ImmutableArray<Outputs.GetTriggerWebhookConfigResult> WebhookConfigs;

        [OutputConstructor]
        private GetTriggerResult(
            ImmutableArray<Outputs.GetTriggerApprovalConfigResult> approvalConfigs,

            ImmutableArray<Outputs.GetTriggerBuildResult> builds,

            string createTime,

            string description,

            bool disabled,

            string filename,

            string filter,

            ImmutableArray<Outputs.GetTriggerGitFileSourceResult> gitFileSources,

            ImmutableArray<Outputs.GetTriggerGithubResult> githubs,

            string id,

            ImmutableArray<string> ignoredFiles,

            string includeBuildLogs,

            ImmutableArray<string> includedFiles,

            string location,

            string name,

            string? project,

            ImmutableArray<Outputs.GetTriggerPubsubConfigResult> pubsubConfigs,

            ImmutableArray<Outputs.GetTriggerRepositoryEventConfigResult> repositoryEventConfigs,

            string serviceAccount,

            ImmutableArray<Outputs.GetTriggerSourceToBuildResult> sourceToBuilds,

            ImmutableDictionary<string, string> substitutions,

            ImmutableArray<string> tags,

            string triggerId,

            ImmutableArray<Outputs.GetTriggerTriggerTemplateResult> triggerTemplates,

            ImmutableArray<Outputs.GetTriggerWebhookConfigResult> webhookConfigs)
        {
            ApprovalConfigs = approvalConfigs;
            Builds = builds;
            CreateTime = createTime;
            Description = description;
            Disabled = disabled;
            Filename = filename;
            Filter = filter;
            GitFileSources = gitFileSources;
            Githubs = githubs;
            Id = id;
            IgnoredFiles = ignoredFiles;
            IncludeBuildLogs = includeBuildLogs;
            IncludedFiles = includedFiles;
            Location = location;
            Name = name;
            Project = project;
            PubsubConfigs = pubsubConfigs;
            RepositoryEventConfigs = repositoryEventConfigs;
            ServiceAccount = serviceAccount;
            SourceToBuilds = sourceToBuilds;
            Substitutions = substitutions;
            Tags = tags;
            TriggerId = triggerId;
            TriggerTemplates = triggerTemplates;
            WebhookConfigs = webhookConfigs;
        }
    }
}
