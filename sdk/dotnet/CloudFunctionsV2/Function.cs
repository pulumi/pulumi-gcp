// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudFunctionsV2
{
    /// <summary>
    /// A Cloud Function that contains user computation executed in response to an event.
    /// 
    /// To get more information about function, see:
    /// 
    /// * [API documentation](https://cloud.google.com/functions/docs/reference/rest/v2beta/projects.locations.functions)
    /// 
    /// ## Example Usage
    /// 
    /// ### Cloudfunctions2 Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = "my-project-name";
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = $"{project}-gcf-source",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctionsV2.Function("function", new()
    ///     {
    ///         Name = "function-v2",
    ///         Location = "us-central1",
    ///         Description = "a new function",
    ///         BuildConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigArgs
    ///         {
    ///             Runtime = "nodejs20",
    ///             EntryPoint = "helloHttp",
    ///             Source = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceArgs
    ///             {
    ///                 StorageSource = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceStorageSourceArgs
    ///                 {
    ///                     Bucket = bucket.Name,
    ///                     Object = @object.Name,
    ///                 },
    ///             },
    ///         },
    ///         ServiceConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigArgs
    ///         {
    ///             MaxInstanceCount = 1,
    ///             AvailableMemory = "256M",
    ///             TimeoutSeconds = 60,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudfunctions2 Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = "my-project-name";
    /// 
    ///     var account = new Gcp.ServiceAccount.Account("account", new()
    ///     {
    ///         AccountId = "gcf-sa",
    ///         DisplayName = "Test Service Account",
    ///     });
    /// 
    ///     var topic = new Gcp.PubSub.Topic("topic", new()
    ///     {
    ///         Name = "functions2-topic",
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = $"{project}-gcf-source",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctionsV2.Function("function", new()
    ///     {
    ///         Name = "gcf-function",
    ///         Location = "us-central1",
    ///         Description = "a new function",
    ///         BuildConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigArgs
    ///         {
    ///             Runtime = "nodejs20",
    ///             EntryPoint = "helloPubSub",
    ///             EnvironmentVariables = 
    ///             {
    ///                 { "BUILD_CONFIG_TEST", "build_test" },
    ///             },
    ///             Source = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceArgs
    ///             {
    ///                 StorageSource = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceStorageSourceArgs
    ///                 {
    ///                     Bucket = bucket.Name,
    ///                     Object = @object.Name,
    ///                 },
    ///             },
    ///         },
    ///         ServiceConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigArgs
    ///         {
    ///             MaxInstanceCount = 3,
    ///             MinInstanceCount = 1,
    ///             AvailableMemory = "4Gi",
    ///             TimeoutSeconds = 60,
    ///             MaxInstanceRequestConcurrency = 80,
    ///             AvailableCpu = "4",
    ///             EnvironmentVariables = 
    ///             {
    ///                 { "SERVICE_CONFIG_TEST", "config_test" },
    ///                 { "SERVICE_CONFIG_DIFF_TEST", account.Email },
    ///             },
    ///             IngressSettings = "ALLOW_INTERNAL_ONLY",
    ///             AllTrafficOnLatestRevision = true,
    ///             ServiceAccountEmail = account.Email,
    ///         },
    ///         EventTrigger = new Gcp.CloudFunctionsV2.Inputs.FunctionEventTriggerArgs
    ///         {
    ///             TriggerRegion = "us-central1",
    ///             EventType = "google.cloud.pubsub.topic.v1.messagePublished",
    ///             PubsubTopic = topic.Id,
    ///             RetryPolicy = "RETRY_POLICY_RETRY",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudfunctions2 Scheduler Auth
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = "my-project-name";
    /// 
    ///     var account = new Gcp.ServiceAccount.Account("account", new()
    ///     {
    ///         AccountId = "gcf-sa",
    ///         DisplayName = "Test Service Account",
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = $"{project}-gcf-source",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctionsV2.Function("function", new()
    ///     {
    ///         Name = "gcf-function",
    ///         Location = "us-central1",
    ///         Description = "a new function",
    ///         BuildConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigArgs
    ///         {
    ///             Runtime = "nodejs20",
    ///             EntryPoint = "helloHttp",
    ///             Source = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceArgs
    ///             {
    ///                 StorageSource = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceStorageSourceArgs
    ///                 {
    ///                     Bucket = bucket.Name,
    ///                     Object = @object.Name,
    ///                 },
    ///             },
    ///         },
    ///         ServiceConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigArgs
    ///         {
    ///             MinInstanceCount = 1,
    ///             AvailableMemory = "256M",
    ///             TimeoutSeconds = 60,
    ///             ServiceAccountEmail = account.Email,
    ///         },
    ///     });
    /// 
    ///     var invoker = new Gcp.CloudFunctionsV2.FunctionIamMember("invoker", new()
    ///     {
    ///         Project = function.Project,
    ///         Location = function.Location,
    ///         CloudFunction = function.Name,
    ///         Role = "roles/cloudfunctions.invoker",
    ///         Member = account.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     });
    /// 
    ///     var cloudRunInvoker = new Gcp.CloudRun.IamMember("cloud_run_invoker", new()
    ///     {
    ///         Project = function.Project,
    ///         Location = function.Location,
    ///         Service = function.Name,
    ///         Role = "roles/run.invoker",
    ///         Member = account.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     });
    /// 
    ///     var invokeCloudFunction = new Gcp.CloudScheduler.Job("invoke_cloud_function", new()
    ///     {
    ///         Name = "invoke-gcf-function",
    ///         Description = "Schedule the HTTPS trigger for cloud function",
    ///         Schedule = "0 0 * * *",
    ///         Project = function.Project,
    ///         Region = function.Location,
    ///         HttpTarget = new Gcp.CloudScheduler.Inputs.JobHttpTargetArgs
    ///         {
    ///             Uri = function.ServiceConfig.Apply(serviceConfig =&gt; serviceConfig?.Uri),
    ///             HttpMethod = "POST",
    ///             OidcToken = new Gcp.CloudScheduler.Inputs.JobHttpTargetOidcTokenArgs
    ///             {
    ///                 Audience = function.ServiceConfig.Apply(serviceConfig =&gt; $"{serviceConfig?.Uri}/"),
    ///                 ServiceAccountEmail = account.Email,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudfunctions2 Basic Gcs
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var source_bucket = new Gcp.Storage.Bucket("source-bucket", new()
    ///     {
    ///         Name = "gcf-source-bucket",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = source_bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     var trigger_bucket = new Gcp.Storage.Bucket("trigger-bucket", new()
    ///     {
    ///         Name = "gcf-trigger-bucket",
    ///         Location = "us-central1",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var gcsAccount = Gcp.Storage.GetProjectServiceAccount.Invoke();
    /// 
    ///     // To use GCS CloudEvent triggers, the GCS service account requires the Pub/Sub Publisher(roles/pubsub.publisher) IAM role in the specified project.
    ///     // (See https://cloud.google.com/eventarc/docs/run/quickstart-storage#before-you-begin)
    ///     var gcs_pubsub_publishing = new Gcp.Projects.IAMMember("gcs-pubsub-publishing", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/pubsub.publisher",
    ///         Member = $"serviceAccount:{gcsAccount.Apply(getProjectServiceAccountResult =&gt; getProjectServiceAccountResult.EmailAddress)}",
    ///     });
    /// 
    ///     var account = new Gcp.ServiceAccount.Account("account", new()
    ///     {
    ///         AccountId = "gcf-sa",
    ///         DisplayName = "Test Service Account - used for both the cloud function and eventarc trigger in the test",
    ///     });
    /// 
    ///     // Permissions on the service account used by the function and Eventarc trigger
    ///     var invoking = new Gcp.Projects.IAMMember("invoking", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/run.invoker",
    ///         Member = account.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             gcs_pubsub_publishing,
    ///         },
    ///     });
    /// 
    ///     var event_receiving = new Gcp.Projects.IAMMember("event-receiving", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/eventarc.eventReceiver",
    ///         Member = account.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             invoking,
    ///         },
    ///     });
    /// 
    ///     var artifactregistry_reader = new Gcp.Projects.IAMMember("artifactregistry-reader", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/artifactregistry.reader",
    ///         Member = account.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             event_receiving,
    ///         },
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctionsV2.Function("function", new()
    ///     {
    ///         Name = "gcf-function",
    ///         Location = "us-central1",
    ///         Description = "a new function",
    ///         BuildConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigArgs
    ///         {
    ///             Runtime = "nodejs20",
    ///             EntryPoint = "entryPoint",
    ///             EnvironmentVariables = 
    ///             {
    ///                 { "BUILD_CONFIG_TEST", "build_test" },
    ///             },
    ///             Source = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceArgs
    ///             {
    ///                 StorageSource = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceStorageSourceArgs
    ///                 {
    ///                     Bucket = source_bucket.Name,
    ///                     Object = @object.Name,
    ///                 },
    ///             },
    ///         },
    ///         ServiceConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigArgs
    ///         {
    ///             MaxInstanceCount = 3,
    ///             MinInstanceCount = 1,
    ///             AvailableMemory = "256M",
    ///             TimeoutSeconds = 60,
    ///             EnvironmentVariables = 
    ///             {
    ///                 { "SERVICE_CONFIG_TEST", "config_test" },
    ///             },
    ///             IngressSettings = "ALLOW_INTERNAL_ONLY",
    ///             AllTrafficOnLatestRevision = true,
    ///             ServiceAccountEmail = account.Email,
    ///         },
    ///         EventTrigger = new Gcp.CloudFunctionsV2.Inputs.FunctionEventTriggerArgs
    ///         {
    ///             EventType = "google.cloud.storage.object.v1.finalized",
    ///             RetryPolicy = "RETRY_POLICY_RETRY",
    ///             ServiceAccountEmail = account.Email,
    ///             EventFilters = new[]
    ///             {
    ///                 new Gcp.CloudFunctionsV2.Inputs.FunctionEventTriggerEventFilterArgs
    ///                 {
    ///                     Attribute = "bucket",
    ///                     Value = trigger_bucket.Name,
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             event_receiving,
    ///             artifactregistry_reader,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudfunctions2 Basic Auditlogs
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This example follows the examples shown in this Google Cloud Community blog post
    ///     // https://medium.com/google-cloud/applying-a-path-pattern-when-filtering-in-eventarc-f06b937b4c34
    ///     // and the docs:
    ///     // https://cloud.google.com/eventarc/docs/path-patterns
    ///     var source_bucket = new Gcp.Storage.Bucket("source-bucket", new()
    ///     {
    ///         Name = "gcf-source-bucket",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = source_bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     var account = new Gcp.ServiceAccount.Account("account", new()
    ///     {
    ///         AccountId = "gcf-sa",
    ///         DisplayName = "Test Service Account - used for both the cloud function and eventarc trigger in the test",
    ///     });
    /// 
    ///     // Note: The right way of listening for Cloud Storage events is to use a Cloud Storage trigger.
    ///     // Here we use Audit Logs to monitor the bucket so path patterns can be used in the example of
    ///     // google_cloudfunctions2_function below (Audit Log events have path pattern support)
    ///     var audit_log_bucket = new Gcp.Storage.Bucket("audit-log-bucket", new()
    ///     {
    ///         Name = "gcf-auditlog-bucket",
    ///         Location = "us-central1",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     // Permissions on the service account used by the function and Eventarc trigger
    ///     var invoking = new Gcp.Projects.IAMMember("invoking", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/run.invoker",
    ///         Member = account.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     });
    /// 
    ///     var event_receiving = new Gcp.Projects.IAMMember("event-receiving", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/eventarc.eventReceiver",
    ///         Member = account.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             invoking,
    ///         },
    ///     });
    /// 
    ///     var artifactregistry_reader = new Gcp.Projects.IAMMember("artifactregistry-reader", new()
    ///     {
    ///         Project = "my-project-name",
    ///         Role = "roles/artifactregistry.reader",
    ///         Member = account.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             event_receiving,
    ///         },
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctionsV2.Function("function", new()
    ///     {
    ///         Name = "gcf-function",
    ///         Location = "us-central1",
    ///         Description = "a new function",
    ///         BuildConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigArgs
    ///         {
    ///             Runtime = "nodejs20",
    ///             EntryPoint = "entryPoint",
    ///             EnvironmentVariables = 
    ///             {
    ///                 { "BUILD_CONFIG_TEST", "build_test" },
    ///             },
    ///             Source = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceArgs
    ///             {
    ///                 StorageSource = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceStorageSourceArgs
    ///                 {
    ///                     Bucket = source_bucket.Name,
    ///                     Object = @object.Name,
    ///                 },
    ///             },
    ///         },
    ///         ServiceConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigArgs
    ///         {
    ///             MaxInstanceCount = 3,
    ///             MinInstanceCount = 1,
    ///             AvailableMemory = "256M",
    ///             TimeoutSeconds = 60,
    ///             EnvironmentVariables = 
    ///             {
    ///                 { "SERVICE_CONFIG_TEST", "config_test" },
    ///             },
    ///             IngressSettings = "ALLOW_INTERNAL_ONLY",
    ///             AllTrafficOnLatestRevision = true,
    ///             ServiceAccountEmail = account.Email,
    ///         },
    ///         EventTrigger = new Gcp.CloudFunctionsV2.Inputs.FunctionEventTriggerArgs
    ///         {
    ///             TriggerRegion = "us-central1",
    ///             EventType = "google.cloud.audit.log.v1.written",
    ///             RetryPolicy = "RETRY_POLICY_RETRY",
    ///             ServiceAccountEmail = account.Email,
    ///             EventFilters = new[]
    ///             {
    ///                 new Gcp.CloudFunctionsV2.Inputs.FunctionEventTriggerEventFilterArgs
    ///                 {
    ///                     Attribute = "serviceName",
    ///                     Value = "storage.googleapis.com",
    ///                 },
    ///                 new Gcp.CloudFunctionsV2.Inputs.FunctionEventTriggerEventFilterArgs
    ///                 {
    ///                     Attribute = "methodName",
    ///                     Value = "storage.objects.create",
    ///                 },
    ///                 new Gcp.CloudFunctionsV2.Inputs.FunctionEventTriggerEventFilterArgs
    ///                 {
    ///                     Attribute = "resourceName",
    ///                     Value = audit_log_bucket.Name.Apply(name =&gt; $"/projects/_/buckets/{name}/objects/*.txt"),
    ///                     Operator = "match-path-pattern",
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             event_receiving,
    ///             artifactregistry_reader,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudfunctions2 Basic Builder
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = "my-project-name";
    /// 
    ///     var account = new Gcp.ServiceAccount.Account("account", new()
    ///     {
    ///         AccountId = "gcf-sa",
    ///         DisplayName = "Test Service Account",
    ///     });
    /// 
    ///     var logWriter = new Gcp.Projects.IAMMember("log_writer", new()
    ///     {
    ///         Project = account.Project,
    ///         Role = "roles/logging.logWriter",
    ///         Member = account.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     });
    /// 
    ///     var artifactRegistryWriter = new Gcp.Projects.IAMMember("artifact_registry_writer", new()
    ///     {
    ///         Project = account.Project,
    ///         Role = "roles/artifactregistry.writer",
    ///         Member = account.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     });
    /// 
    ///     var storageObjectAdmin = new Gcp.Projects.IAMMember("storage_object_admin", new()
    ///     {
    ///         Project = account.Project,
    ///         Role = "roles/storage.objectAdmin",
    ///         Member = account.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = $"{project}-gcf-source",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     // builder permissions need to stablize before it can pull the source zip
    ///     var wait60s = new Time.Index.Sleep("wait_60s", new()
    ///     {
    ///         CreateDuration = "60s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             logWriter,
    ///             artifactRegistryWriter,
    ///             storageObjectAdmin,
    ///         },
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctionsV2.Function("function", new()
    ///     {
    ///         Name = "function-v2",
    ///         Location = "us-central1",
    ///         Description = "a new function",
    ///         BuildConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigArgs
    ///         {
    ///             Runtime = "nodejs20",
    ///             EntryPoint = "helloHttp",
    ///             Source = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceArgs
    ///             {
    ///                 StorageSource = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceStorageSourceArgs
    ///                 {
    ///                     Bucket = bucket.Name,
    ///                     Object = @object.Name,
    ///                 },
    ///             },
    ///             ServiceAccount = account.Id,
    ///         },
    ///         ServiceConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigArgs
    ///         {
    ///             MaxInstanceCount = 1,
    ///             AvailableMemory = "256M",
    ///             TimeoutSeconds = 60,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait60s,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudfunctions2 Secret Env
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = "my-project-name";
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = $"{project}-gcf-source",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     var secret = new Gcp.SecretManager.Secret("secret", new()
    ///     {
    ///         SecretId = "secret",
    ///         Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///         {
    ///             UserManaged = new Gcp.SecretManager.Inputs.SecretReplicationUserManagedArgs
    ///             {
    ///                 Replicas = new[]
    ///                 {
    ///                     new Gcp.SecretManager.Inputs.SecretReplicationUserManagedReplicaArgs
    ///                     {
    ///                         Location = "us-central1",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var secretSecretVersion = new Gcp.SecretManager.SecretVersion("secret", new()
    ///     {
    ///         Secret = secret.Name,
    ///         SecretData = "secret",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctionsV2.Function("function", new()
    ///     {
    ///         Name = "function-secret",
    ///         Location = "us-central1",
    ///         Description = "a new function",
    ///         BuildConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigArgs
    ///         {
    ///             Runtime = "nodejs20",
    ///             EntryPoint = "helloHttp",
    ///             Source = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceArgs
    ///             {
    ///                 StorageSource = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceStorageSourceArgs
    ///                 {
    ///                     Bucket = bucket.Name,
    ///                     Object = @object.Name,
    ///                 },
    ///             },
    ///         },
    ///         ServiceConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigArgs
    ///         {
    ///             MaxInstanceCount = 1,
    ///             AvailableMemory = "256M",
    ///             TimeoutSeconds = 60,
    ///             SecretEnvironmentVariables = new[]
    ///             {
    ///                 new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigSecretEnvironmentVariableArgs
    ///                 {
    ///                     Key = "TEST",
    ///                     ProjectId = project,
    ///                     Secret = secret.SecretId,
    ///                     Version = "latest",
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             secretSecretVersion,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudfunctions2 Secret Volume
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = "my-project-name";
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = $"{project}-gcf-source",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     var secret = new Gcp.SecretManager.Secret("secret", new()
    ///     {
    ///         SecretId = "secret",
    ///         Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///         {
    ///             UserManaged = new Gcp.SecretManager.Inputs.SecretReplicationUserManagedArgs
    ///             {
    ///                 Replicas = new[]
    ///                 {
    ///                     new Gcp.SecretManager.Inputs.SecretReplicationUserManagedReplicaArgs
    ///                     {
    ///                         Location = "us-central1",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var secretSecretVersion = new Gcp.SecretManager.SecretVersion("secret", new()
    ///     {
    ///         Secret = secret.Name,
    ///         SecretData = "secret",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctionsV2.Function("function", new()
    ///     {
    ///         Name = "function-secret",
    ///         Location = "us-central1",
    ///         Description = "a new function",
    ///         BuildConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigArgs
    ///         {
    ///             Runtime = "nodejs20",
    ///             EntryPoint = "helloHttp",
    ///             Source = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceArgs
    ///             {
    ///                 StorageSource = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceStorageSourceArgs
    ///                 {
    ///                     Bucket = bucket.Name,
    ///                     Object = @object.Name,
    ///                 },
    ///             },
    ///         },
    ///         ServiceConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigArgs
    ///         {
    ///             MaxInstanceCount = 1,
    ///             AvailableMemory = "256M",
    ///             TimeoutSeconds = 60,
    ///             SecretVolumes = new[]
    ///             {
    ///                 new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigSecretVolumeArgs
    ///                 {
    ///                     MountPath = "/etc/secrets",
    ///                     ProjectId = project,
    ///                     Secret = secret.SecretId,
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             secretSecretVersion,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudfunctions2 Private Workerpool
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = "my-project-name";
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = $"{project}-gcf-source",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     var pool = new Gcp.CloudBuild.WorkerPool("pool", new()
    ///     {
    ///         Name = "workerpool",
    ///         Location = "us-central1",
    ///         WorkerConfig = new Gcp.CloudBuild.Inputs.WorkerPoolWorkerConfigArgs
    ///         {
    ///             DiskSizeGb = 100,
    ///             MachineType = "e2-standard-8",
    ///             NoExternalIp = false,
    ///         },
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctionsV2.Function("function", new()
    ///     {
    ///         Name = "function-workerpool",
    ///         Location = "us-central1",
    ///         Description = "a new function",
    ///         BuildConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigArgs
    ///         {
    ///             Runtime = "nodejs20",
    ///             EntryPoint = "helloHttp",
    ///             Source = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceArgs
    ///             {
    ///                 StorageSource = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceStorageSourceArgs
    ///                 {
    ///                     Bucket = bucket.Name,
    ///                     Object = @object.Name,
    ///                 },
    ///             },
    ///             WorkerPool = pool.Id,
    ///         },
    ///         ServiceConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigArgs
    ///         {
    ///             MaxInstanceCount = 1,
    ///             AvailableMemory = "256M",
    ///             TimeoutSeconds = 60,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudfunctions2 Cmek Docs
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = "my-project-name";
    /// 
    ///     var projectGetProject = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = $"{project}-gcf-source",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     var eaSa = new Gcp.Projects.ServiceIdentity("ea_sa", new()
    ///     {
    ///         Project = projectGetProject.Apply(getProjectResult =&gt; getProjectResult.ProjectId),
    ///         Service = "eventarc.googleapis.com",
    ///     });
    /// 
    ///     var unencoded_ar_repo = new Gcp.ArtifactRegistry.Repository("unencoded-ar-repo", new()
    ///     {
    ///         RepositoryId = "ar-repo",
    ///         Location = "us-central1",
    ///         Format = "DOCKER",
    ///     });
    /// 
    ///     var gcfCmekKeyuser = new Gcp.Kms.CryptoKeyIAMBinding("gcf_cmek_keyuser", new()
    ///     {
    ///         CryptoKeyId = "cmek-key",
    ///         Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    ///         Members = new[]
    ///         {
    ///             $"serviceAccount:service-{projectGetProject.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcf-admin-robot.iam.gserviceaccount.com",
    ///             $"serviceAccount:service-{projectGetProject.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-artifactregistry.iam.gserviceaccount.com",
    ///             $"serviceAccount:service-{projectGetProject.Apply(getProjectResult =&gt; getProjectResult.Number)}@gs-project-accounts.iam.gserviceaccount.com",
    ///             $"serviceAccount:service-{projectGetProject.Apply(getProjectResult =&gt; getProjectResult.Number)}@serverless-robot-prod.iam.gserviceaccount.com",
    ///             eaSa.Member,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             eaSa,
    ///         },
    ///     });
    /// 
    ///     var encoded_ar_repo = new Gcp.ArtifactRegistry.Repository("encoded-ar-repo", new()
    ///     {
    ///         Location = "us-central1",
    ///         RepositoryId = "cmek-repo",
    ///         Format = "DOCKER",
    ///         KmsKeyName = "cmek-key",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             gcfCmekKeyuser,
    ///         },
    ///     });
    /// 
    ///     var binding = new Gcp.ArtifactRegistry.RepositoryIamBinding("binding", new()
    ///     {
    ///         Location = encoded_ar_repo.Location,
    ///         Repository = encoded_ar_repo.Name,
    ///         Role = "roles/artifactregistry.admin",
    ///         Members = new[]
    ///         {
    ///             $"serviceAccount:service-{projectGetProject.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcf-admin-robot.iam.gserviceaccount.com",
    ///         },
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctionsV2.Function("function", new()
    ///     {
    ///         Name = "function-cmek",
    ///         Location = "us-central1",
    ///         Description = "CMEK function",
    ///         KmsKeyName = "cmek-key",
    ///         BuildConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigArgs
    ///         {
    ///             Runtime = "nodejs20",
    ///             EntryPoint = "helloHttp",
    ///             DockerRepository = encoded_ar_repo.Id,
    ///             Source = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceArgs
    ///             {
    ///                 StorageSource = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceStorageSourceArgs
    ///                 {
    ///                     Bucket = bucket.Name,
    ///                     Object = @object.Name,
    ///                 },
    ///             },
    ///         },
    ///         ServiceConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigArgs
    ///         {
    ///             MaxInstanceCount = 1,
    ///             AvailableMemory = "256M",
    ///             TimeoutSeconds = 60,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             gcfCmekKeyuser,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudfunctions2 Automatic Base Image Update
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = "my-project-name";
    /// 
    ///     var account = new Gcp.ServiceAccount.Account("account", new()
    ///     {
    ///         AccountId = "gcf-sa",
    ///         DisplayName = "Test Service Account",
    ///     });
    /// 
    ///     var topic = new Gcp.PubSub.Topic("topic", new()
    ///     {
    ///         Name = "functions2-topic",
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = $"{project}-gcf-source",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctionsV2.Function("function", new()
    ///     {
    ///         Name = "gcf-function",
    ///         Location = "europe-west6",
    ///         Description = "a new function",
    ///         BuildConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigArgs
    ///         {
    ///             Runtime = "nodejs20",
    ///             EntryPoint = "helloPubSub",
    ///             EnvironmentVariables = 
    ///             {
    ///                 { "BUILD_CONFIG_TEST", "build_test" },
    ///             },
    ///             Source = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceArgs
    ///             {
    ///                 StorageSource = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceStorageSourceArgs
    ///                 {
    ///                     Bucket = bucket.Name,
    ///                     Object = @object.Name,
    ///                 },
    ///             },
    ///             AutomaticUpdatePolicy = null,
    ///         },
    ///         ServiceConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigArgs
    ///         {
    ///             MaxInstanceCount = 3,
    ///             MinInstanceCount = 1,
    ///             AvailableMemory = "4Gi",
    ///             TimeoutSeconds = 60,
    ///             MaxInstanceRequestConcurrency = 80,
    ///             AvailableCpu = "4",
    ///             EnvironmentVariables = 
    ///             {
    ///                 { "SERVICE_CONFIG_TEST", "config_test" },
    ///             },
    ///             IngressSettings = "ALLOW_INTERNAL_ONLY",
    ///             AllTrafficOnLatestRevision = true,
    ///             ServiceAccountEmail = account.Email,
    ///         },
    ///         EventTrigger = new Gcp.CloudFunctionsV2.Inputs.FunctionEventTriggerArgs
    ///         {
    ///             TriggerRegion = "us-central1",
    ///             EventType = "google.cloud.pubsub.topic.v1.messagePublished",
    ///             PubsubTopic = topic.Id,
    ///             RetryPolicy = "RETRY_POLICY_RETRY",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudfunctions2 On Deploy Base Image Update
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = "my-project-name";
    /// 
    ///     var account = new Gcp.ServiceAccount.Account("account", new()
    ///     {
    ///         AccountId = "gcf-sa",
    ///         DisplayName = "Test Service Account",
    ///     });
    /// 
    ///     var topic = new Gcp.PubSub.Topic("topic", new()
    ///     {
    ///         Name = "functions2-topic",
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = $"{project}-gcf-source",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @object = new Gcp.Storage.BucketObject("object", new()
    ///     {
    ///         Name = "function-source.zip",
    ///         Bucket = bucket.Name,
    ///         Source = new FileAsset("function-source.zip"),
    ///     });
    /// 
    ///     var function = new Gcp.CloudFunctionsV2.Function("function", new()
    ///     {
    ///         Name = "gcf-function",
    ///         Location = "europe-west6",
    ///         Description = "a new function",
    ///         BuildConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigArgs
    ///         {
    ///             Runtime = "nodejs20",
    ///             EntryPoint = "helloPubSub",
    ///             EnvironmentVariables = 
    ///             {
    ///                 { "BUILD_CONFIG_TEST", "build_test" },
    ///             },
    ///             Source = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceArgs
    ///             {
    ///                 StorageSource = new Gcp.CloudFunctionsV2.Inputs.FunctionBuildConfigSourceStorageSourceArgs
    ///                 {
    ///                     Bucket = bucket.Name,
    ///                     Object = @object.Name,
    ///                 },
    ///             },
    ///             OnDeployUpdatePolicy = null,
    ///         },
    ///         ServiceConfig = new Gcp.CloudFunctionsV2.Inputs.FunctionServiceConfigArgs
    ///         {
    ///             MaxInstanceCount = 3,
    ///             MinInstanceCount = 1,
    ///             AvailableMemory = "4Gi",
    ///             TimeoutSeconds = 60,
    ///             MaxInstanceRequestConcurrency = 80,
    ///             AvailableCpu = "4",
    ///             EnvironmentVariables = 
    ///             {
    ///                 { "SERVICE_CONFIG_TEST", "config_test" },
    ///             },
    ///             IngressSettings = "ALLOW_INTERNAL_ONLY",
    ///             AllTrafficOnLatestRevision = true,
    ///             ServiceAccountEmail = account.Email,
    ///         },
    ///         EventTrigger = new Gcp.CloudFunctionsV2.Inputs.FunctionEventTriggerArgs
    ///         {
    ///             TriggerRegion = "us-central1",
    ///             EventType = "google.cloud.pubsub.topic.v1.messagePublished",
    ///             PubsubTopic = topic.Id,
    ///             RetryPolicy = "RETRY_POLICY_RETRY",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// function can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/functions/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, function can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:cloudfunctionsv2/function:Function default projects/{{project}}/locations/{{location}}/functions/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:cloudfunctionsv2/function:Function default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:cloudfunctionsv2/function:Function default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:cloudfunctionsv2/function:Function")]
    public partial class Function : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Describes the Build step of the function that builds a container
        /// from the given source.
        /// Structure is documented below.
        /// </summary>
        [Output("buildConfig")]
        public Output<Outputs.FunctionBuildConfig?> BuildConfig { get; private set; } = null!;

        /// <summary>
        /// User-provided description of a function.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The environment the function is hosted on.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// An Eventarc trigger managed by Google Cloud Functions that fires events in
        /// response to a condition in another service.
        /// Structure is documented below.
        /// </summary>
        [Output("eventTrigger")]
        public Output<Outputs.FunctionEventTrigger?> EventTrigger { get; private set; } = null!;

        /// <summary>
        /// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources.
        /// It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
        /// </summary>
        [Output("kmsKeyName")]
        public Output<string?> KmsKeyName { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs associated with this Cloud Function.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location of this cloud function.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A user-defined name of the function. Function names must
        /// be unique globally and match pattern `projects/*/locations/*/functions/*`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Describes the Service being deployed.
        /// Structure is documented below.
        /// </summary>
        [Output("serviceConfig")]
        public Output<Outputs.FunctionServiceConfig?> ServiceConfig { get; private set; } = null!;

        /// <summary>
        /// Describes the current state of the function.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The last update timestamp of a Cloud Function.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Output only. The deployed url for the function.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Function resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Function(string name, FunctionArgs args, CustomResourceOptions? options = null)
            : base("gcp:cloudfunctionsv2/function:Function", name, args ?? new FunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Function(string name, Input<string> id, FunctionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:cloudfunctionsv2/function:Function", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Function resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Function Get(string name, Input<string> id, FunctionState? state = null, CustomResourceOptions? options = null)
        {
            return new Function(name, id, state, options);
        }
    }

    public sealed class FunctionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Describes the Build step of the function that builds a container
        /// from the given source.
        /// Structure is documented below.
        /// </summary>
        [Input("buildConfig")]
        public Input<Inputs.FunctionBuildConfigArgs>? BuildConfig { get; set; }

        /// <summary>
        /// User-provided description of a function.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An Eventarc trigger managed by Google Cloud Functions that fires events in
        /// response to a condition in another service.
        /// Structure is documented below.
        /// </summary>
        [Input("eventTrigger")]
        public Input<Inputs.FunctionEventTriggerArgs>? EventTrigger { get; set; }

        /// <summary>
        /// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources.
        /// It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs associated with this Cloud Function.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of this cloud function.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// A user-defined name of the function. Function names must
        /// be unique globally and match pattern `projects/*/locations/*/functions/*`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Describes the Service being deployed.
        /// Structure is documented below.
        /// </summary>
        [Input("serviceConfig")]
        public Input<Inputs.FunctionServiceConfigArgs>? ServiceConfig { get; set; }

        public FunctionArgs()
        {
        }
        public static new FunctionArgs Empty => new FunctionArgs();
    }

    public sealed class FunctionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Describes the Build step of the function that builds a container
        /// from the given source.
        /// Structure is documented below.
        /// </summary>
        [Input("buildConfig")]
        public Input<Inputs.FunctionBuildConfigGetArgs>? BuildConfig { get; set; }

        /// <summary>
        /// User-provided description of a function.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The environment the function is hosted on.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// An Eventarc trigger managed by Google Cloud Functions that fires events in
        /// response to a condition in another service.
        /// Structure is documented below.
        /// </summary>
        [Input("eventTrigger")]
        public Input<Inputs.FunctionEventTriggerGetArgs>? EventTrigger { get; set; }

        /// <summary>
        /// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources.
        /// It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs associated with this Cloud Function.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of this cloud function.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A user-defined name of the function. Function names must
        /// be unique globally and match pattern `projects/*/locations/*/functions/*`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Describes the Service being deployed.
        /// Structure is documented below.
        /// </summary>
        [Input("serviceConfig")]
        public Input<Inputs.FunctionServiceConfigGetArgs>? ServiceConfig { get; set; }

        /// <summary>
        /// Describes the current state of the function.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The last update timestamp of a Cloud Function.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// Output only. The deployed url for the function.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public FunctionState()
        {
        }
        public static new FunctionState Empty => new FunctionState();
    }
}
