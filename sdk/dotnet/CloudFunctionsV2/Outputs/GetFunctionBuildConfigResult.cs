// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudFunctionsV2.Outputs
{

    [OutputType]
    public sealed class GetFunctionBuildConfigResult
    {
        /// <summary>
        /// Security patches are applied automatically to the runtime without requiring
        /// the function to be redeployed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionBuildConfigAutomaticUpdatePolicyResult> AutomaticUpdatePolicies;
        /// <summary>
        /// The Cloud Build name of the latest successful
        /// deployment of the function.
        /// </summary>
        public readonly string Build;
        /// <summary>
        /// User managed repository created in Artifact Registry optionally with a customer managed encryption key.
        /// </summary>
        public readonly string DockerRepository;
        /// <summary>
        /// The name of the function (as defined in source code) that will be executed.
        /// Defaults to the resource name suffix, if not specified. For backward
        /// compatibility, if function with given name is not found, then the system
        /// will try to use function named "function". For Node.js this is name of a
        /// function exported by the module specified in source_location.
        /// </summary>
        public readonly string EntryPoint;
        /// <summary>
        /// User-provided build-time environment variables for the function.
        /// </summary>
        public readonly ImmutableDictionary<string, string> EnvironmentVariables;
        /// <summary>
        /// Security patches are only applied when a function is redeployed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionBuildConfigOnDeployUpdatePolicyResult> OnDeployUpdatePolicies;
        /// <summary>
        /// The runtime in which to run the function. Required when deploying a new
        /// function, optional when updating an existing function.
        /// </summary>
        public readonly string Runtime;
        /// <summary>
        /// The fully-qualified name of the service account to be used for building the container.
        /// </summary>
        public readonly string ServiceAccount;
        /// <summary>
        /// The location of the function source code.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionBuildConfigSourceResult> Sources;
        /// <summary>
        /// Name of the Cloud Build Custom Worker Pool that should be used to build the function.
        /// </summary>
        public readonly string WorkerPool;

        [OutputConstructor]
        private GetFunctionBuildConfigResult(
            ImmutableArray<Outputs.GetFunctionBuildConfigAutomaticUpdatePolicyResult> automaticUpdatePolicies,

            string build,

            string dockerRepository,

            string entryPoint,

            ImmutableDictionary<string, string> environmentVariables,

            ImmutableArray<Outputs.GetFunctionBuildConfigOnDeployUpdatePolicyResult> onDeployUpdatePolicies,

            string runtime,

            string serviceAccount,

            ImmutableArray<Outputs.GetFunctionBuildConfigSourceResult> sources,

            string workerPool)
        {
            AutomaticUpdatePolicies = automaticUpdatePolicies;
            Build = build;
            DockerRepository = dockerRepository;
            EntryPoint = entryPoint;
            EnvironmentVariables = environmentVariables;
            OnDeployUpdatePolicies = onDeployUpdatePolicies;
            Runtime = runtime;
            ServiceAccount = serviceAccount;
            Sources = sources;
            WorkerPool = workerPool;
        }
    }
}
