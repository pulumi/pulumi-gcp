// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudFunctionsV2
{
    public static class GetFunction
    {
        /// <summary>
        /// Get information about a Google Cloud Function (2nd gen). For more information see:
        /// 
        /// * [API documentation](https://cloud.google.com/functions/docs/reference/rest/v2beta/projects.locations.functions).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_function = Gcp.CloudFunctionsV2.GetFunction.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///         Name = "function",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFunctionResult> InvokeAsync(GetFunctionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFunctionResult>("gcp:cloudfunctionsv2/getFunction:getFunction", args ?? new GetFunctionArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Google Cloud Function (2nd gen). For more information see:
        /// 
        /// * [API documentation](https://cloud.google.com/functions/docs/reference/rest/v2beta/projects.locations.functions).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_function = Gcp.CloudFunctionsV2.GetFunction.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///         Name = "function",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFunctionResult> Invoke(GetFunctionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFunctionResult>("gcp:cloudfunctionsv2/getFunction:getFunction", args ?? new GetFunctionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFunctionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location in which the resource belongs.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The name of a Cloud Function (2nd gen).
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetFunctionArgs()
        {
        }
        public static new GetFunctionArgs Empty => new GetFunctionArgs();
    }

    public sealed class GetFunctionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location in which the resource belongs.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of a Cloud Function (2nd gen).
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetFunctionInvokeArgs()
        {
        }
        public static new GetFunctionInvokeArgs Empty => new GetFunctionInvokeArgs();
    }


    [OutputType]
    public sealed class GetFunctionResult
    {
        public readonly ImmutableArray<Outputs.GetFunctionBuildConfigResult> BuildConfigs;
        public readonly string Description;
        public readonly string Environment;
        public readonly ImmutableArray<Outputs.GetFunctionEventTriggerResult> EventTriggers;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Location;
        public readonly string Name;
        public readonly string? Project;
        public readonly ImmutableArray<Outputs.GetFunctionServiceConfigResult> ServiceConfigs;
        public readonly string State;
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetFunctionResult(
            ImmutableArray<Outputs.GetFunctionBuildConfigResult> buildConfigs,

            string description,

            string environment,

            ImmutableArray<Outputs.GetFunctionEventTriggerResult> eventTriggers,

            string id,

            ImmutableDictionary<string, string> labels,

            string location,

            string name,

            string? project,

            ImmutableArray<Outputs.GetFunctionServiceConfigResult> serviceConfigs,

            string state,

            string updateTime)
        {
            BuildConfigs = buildConfigs;
            Description = description;
            Environment = environment;
            EventTriggers = eventTriggers;
            Id = id;
            Labels = labels;
            Location = location;
            Name = name;
            Project = project;
            ServiceConfigs = serviceConfigs;
            State = state;
            UpdateTime = updateTime;
        }
    }
}
