// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkManagement.Outputs
{

    [OutputType]
    public sealed class GetConnectivityTestsConnectivityTestResult
    {
        /// <summary>
        /// Whether the analysis should skip firewall checking.
        /// </summary>
        public readonly bool BypassFirewallChecks;
        /// <summary>
        /// The user-supplied description of the Connectivity Test.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Destination specification of the Connectivity Test.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectivityTestsConnectivityTestDestinationResult> Destinations;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        /// <summary>
        /// Resource labels to represent user-provided metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Unique name for the connectivity test.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID of the project.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// IP Protocol of the test.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The combination of labels configured directly on the resource
        ///  and default labels configured on the provider.
        /// </summary>
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        /// <summary>
        /// Other projects that may be relevant for reachability analysis.
        /// </summary>
        public readonly ImmutableArray<string> RelatedProjects;
        /// <summary>
        /// Whether run analysis for the return path from destination to source.
        /// </summary>
        public readonly bool RoundTrip;
        /// <summary>
        /// Source specification of the Connectivity Test.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectivityTestsConnectivityTestSourceResult> Sources;

        [OutputConstructor]
        private GetConnectivityTestsConnectivityTestResult(
            bool bypassFirewallChecks,

            string description,

            ImmutableArray<Outputs.GetConnectivityTestsConnectivityTestDestinationResult> destinations,

            ImmutableDictionary<string, string> effectiveLabels,

            ImmutableDictionary<string, string> labels,

            string name,

            string project,

            string protocol,

            ImmutableDictionary<string, string> pulumiLabels,

            ImmutableArray<string> relatedProjects,

            bool roundTrip,

            ImmutableArray<Outputs.GetConnectivityTestsConnectivityTestSourceResult> sources)
        {
            BypassFirewallChecks = bypassFirewallChecks;
            Description = description;
            Destinations = destinations;
            EffectiveLabels = effectiveLabels;
            Labels = labels;
            Name = name;
            Project = project;
            Protocol = protocol;
            PulumiLabels = pulumiLabels;
            RelatedProjects = relatedProjects;
            RoundTrip = roundTrip;
            Sources = sources;
        }
    }
}
