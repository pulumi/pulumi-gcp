// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkManagement
{
    public static class GetConnectivityTestRun
    {
        /// <summary>
        /// !&gt; This datasource triggers side effects on the target resource. It will take a long time to refresh (i.e. `pulumi preview` will take much longer than usual) and may modify the state of the parent resource or other copies of the resource copying the same parent.
        /// 
        /// A connectivity test is a static analysis of your resource configurations
        /// that enables you to evaluate connectivity to and from Google Cloud
        /// resources in your Virtual Private Cloud (VPC) network. This data source allows
        /// you to trigger a rerun operation on a connectivity test and return the results.
        /// 
        /// To get more information about connectivity tests, see:
        /// 
        /// * [API documentation](https://cloud.google.com/network-intelligence-center/docs/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests/rerun)
        /// * How-to Guides
        ///     * [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
        /// 
        /// ## Example Usage
        /// 
        /// ### Network Management Connectivity Test Run Instances
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpc = new Gcp.Compute.Network("vpc", new()
        ///     {
        ///         Name = "conn-test-net",
        ///     });
        /// 
        ///     var debian9 = Gcp.Compute.GetImage.Invoke(new()
        ///     {
        ///         Family = "debian-11",
        ///         Project = "debian-cloud",
        ///     });
        /// 
        ///     var source = new Gcp.Compute.Instance("source", new()
        ///     {
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
        ///             {
        ///                 AccessConfigs = new[]
        ///                 {
        ///                     null,
        ///                 },
        ///                 Network = vpc.Id,
        ///             },
        ///         },
        ///         Name = "source-vm",
        ///         MachineType = "e2-medium",
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 Image = debian9.Apply(getImageResult =&gt; getImageResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        ///     var destination = new Gcp.Compute.Instance("destination", new()
        ///     {
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
        ///             {
        ///                 AccessConfigs = new[]
        ///                 {
        ///                     null,
        ///                 },
        ///                 Network = vpc.Id,
        ///             },
        ///         },
        ///         Name = "dest-vm",
        ///         MachineType = "e2-medium",
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 Image = debian9.Apply(getImageResult =&gt; getImageResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        ///     var instance_test = new Gcp.NetworkManagement.ConnectivityTest("instance-test", new()
        ///     {
        ///         Name = "conn-test-instances",
        ///         Source = new Gcp.NetworkManagement.Inputs.ConnectivityTestSourceArgs
        ///         {
        ///             Instance = source.Id,
        ///         },
        ///         Destination = new Gcp.NetworkManagement.Inputs.ConnectivityTestDestinationArgs
        ///         {
        ///             Instance = destination.Id,
        ///         },
        ///         Protocol = "TCP",
        ///         Labels = 
        ///         {
        ///             { "env", "test" },
        ///         },
        ///     });
        /// 
        ///     var instance_test_run = Gcp.NetworkManagement.GetConnectivityTestRun.Invoke(new()
        ///     {
        ///         Name = instance_test.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConnectivityTestRunResult> InvokeAsync(GetConnectivityTestRunArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectivityTestRunResult>("gcp:networkmanagement/getConnectivityTestRun:getConnectivityTestRun", args ?? new GetConnectivityTestRunArgs(), options.WithDefaults());

        /// <summary>
        /// !&gt; This datasource triggers side effects on the target resource. It will take a long time to refresh (i.e. `pulumi preview` will take much longer than usual) and may modify the state of the parent resource or other copies of the resource copying the same parent.
        /// 
        /// A connectivity test is a static analysis of your resource configurations
        /// that enables you to evaluate connectivity to and from Google Cloud
        /// resources in your Virtual Private Cloud (VPC) network. This data source allows
        /// you to trigger a rerun operation on a connectivity test and return the results.
        /// 
        /// To get more information about connectivity tests, see:
        /// 
        /// * [API documentation](https://cloud.google.com/network-intelligence-center/docs/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests/rerun)
        /// * How-to Guides
        ///     * [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
        /// 
        /// ## Example Usage
        /// 
        /// ### Network Management Connectivity Test Run Instances
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpc = new Gcp.Compute.Network("vpc", new()
        ///     {
        ///         Name = "conn-test-net",
        ///     });
        /// 
        ///     var debian9 = Gcp.Compute.GetImage.Invoke(new()
        ///     {
        ///         Family = "debian-11",
        ///         Project = "debian-cloud",
        ///     });
        /// 
        ///     var source = new Gcp.Compute.Instance("source", new()
        ///     {
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
        ///             {
        ///                 AccessConfigs = new[]
        ///                 {
        ///                     null,
        ///                 },
        ///                 Network = vpc.Id,
        ///             },
        ///         },
        ///         Name = "source-vm",
        ///         MachineType = "e2-medium",
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 Image = debian9.Apply(getImageResult =&gt; getImageResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        ///     var destination = new Gcp.Compute.Instance("destination", new()
        ///     {
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
        ///             {
        ///                 AccessConfigs = new[]
        ///                 {
        ///                     null,
        ///                 },
        ///                 Network = vpc.Id,
        ///             },
        ///         },
        ///         Name = "dest-vm",
        ///         MachineType = "e2-medium",
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 Image = debian9.Apply(getImageResult =&gt; getImageResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        ///     var instance_test = new Gcp.NetworkManagement.ConnectivityTest("instance-test", new()
        ///     {
        ///         Name = "conn-test-instances",
        ///         Source = new Gcp.NetworkManagement.Inputs.ConnectivityTestSourceArgs
        ///         {
        ///             Instance = source.Id,
        ///         },
        ///         Destination = new Gcp.NetworkManagement.Inputs.ConnectivityTestDestinationArgs
        ///         {
        ///             Instance = destination.Id,
        ///         },
        ///         Protocol = "TCP",
        ///         Labels = 
        ///         {
        ///             { "env", "test" },
        ///         },
        ///     });
        /// 
        ///     var instance_test_run = Gcp.NetworkManagement.GetConnectivityTestRun.Invoke(new()
        ///     {
        ///         Name = instance_test.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectivityTestRunResult> Invoke(GetConnectivityTestRunInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectivityTestRunResult>("gcp:networkmanagement/getConnectivityTestRun:getConnectivityTestRun", args ?? new GetConnectivityTestRunInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// !&gt; This datasource triggers side effects on the target resource. It will take a long time to refresh (i.e. `pulumi preview` will take much longer than usual) and may modify the state of the parent resource or other copies of the resource copying the same parent.
        /// 
        /// A connectivity test is a static analysis of your resource configurations
        /// that enables you to evaluate connectivity to and from Google Cloud
        /// resources in your Virtual Private Cloud (VPC) network. This data source allows
        /// you to trigger a rerun operation on a connectivity test and return the results.
        /// 
        /// To get more information about connectivity tests, see:
        /// 
        /// * [API documentation](https://cloud.google.com/network-intelligence-center/docs/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests/rerun)
        /// * How-to Guides
        ///     * [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
        /// 
        /// ## Example Usage
        /// 
        /// ### Network Management Connectivity Test Run Instances
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpc = new Gcp.Compute.Network("vpc", new()
        ///     {
        ///         Name = "conn-test-net",
        ///     });
        /// 
        ///     var debian9 = Gcp.Compute.GetImage.Invoke(new()
        ///     {
        ///         Family = "debian-11",
        ///         Project = "debian-cloud",
        ///     });
        /// 
        ///     var source = new Gcp.Compute.Instance("source", new()
        ///     {
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
        ///             {
        ///                 AccessConfigs = new[]
        ///                 {
        ///                     null,
        ///                 },
        ///                 Network = vpc.Id,
        ///             },
        ///         },
        ///         Name = "source-vm",
        ///         MachineType = "e2-medium",
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 Image = debian9.Apply(getImageResult =&gt; getImageResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        ///     var destination = new Gcp.Compute.Instance("destination", new()
        ///     {
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
        ///             {
        ///                 AccessConfigs = new[]
        ///                 {
        ///                     null,
        ///                 },
        ///                 Network = vpc.Id,
        ///             },
        ///         },
        ///         Name = "dest-vm",
        ///         MachineType = "e2-medium",
        ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 Image = debian9.Apply(getImageResult =&gt; getImageResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        ///     var instance_test = new Gcp.NetworkManagement.ConnectivityTest("instance-test", new()
        ///     {
        ///         Name = "conn-test-instances",
        ///         Source = new Gcp.NetworkManagement.Inputs.ConnectivityTestSourceArgs
        ///         {
        ///             Instance = source.Id,
        ///         },
        ///         Destination = new Gcp.NetworkManagement.Inputs.ConnectivityTestDestinationArgs
        ///         {
        ///             Instance = destination.Id,
        ///         },
        ///         Protocol = "TCP",
        ///         Labels = 
        ///         {
        ///             { "env", "test" },
        ///         },
        ///     });
        /// 
        ///     var instance_test_run = Gcp.NetworkManagement.GetConnectivityTestRun.Invoke(new()
        ///     {
        ///         Name = instance_test.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectivityTestRunResult> Invoke(GetConnectivityTestRunInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectivityTestRunResult>("gcp:networkmanagement/getConnectivityTestRun:getConnectivityTestRun", args ?? new GetConnectivityTestRunInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectivityTestRunArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique name for the connectivity test.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetConnectivityTestRunArgs()
        {
        }
        public static new GetConnectivityTestRunArgs Empty => new GetConnectivityTestRunArgs();
    }

    public sealed class GetConnectivityTestRunInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique name for the connectivity test.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetConnectivityTestRunInvokeArgs()
        {
        }
        public static new GetConnectivityTestRunInvokeArgs Empty => new GetConnectivityTestRunInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectivityTestRunResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string Project;
        /// <summary>
        /// Connectivity test reachability details.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectivityTestRunReachabilityDetailResult> ReachabilityDetails;

        [OutputConstructor]
        private GetConnectivityTestRunResult(
            string id,

            string name,

            string project,

            ImmutableArray<Outputs.GetConnectivityTestRunReachabilityDetailResult> reachabilityDetails)
        {
            Id = id;
            Name = name;
            Project = project;
            ReachabilityDetails = reachabilityDetails;
        }
    }
}
