// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataPlex.Outputs
{

    [OutputType]
    public sealed class DatascanDataQualitySpecRule
    {
        /// <summary>
        /// The unnested column which this rule is evaluated against.
        /// </summary>
        public readonly string? Column;
        /// <summary>
        /// Description of the rule.
        /// The maximum length is 1,024 characters.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The dimension name a rule belongs to. Custom dimension name is supported with all uppercase letters and maximum length of 30 characters.
        /// </summary>
        public readonly string Dimension;
        /// <summary>
        /// Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
        /// </summary>
        public readonly bool? IgnoreNull;
        /// <summary>
        /// A mutable name for the rule.
        /// The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-).
        /// The maximum length is 63 characters.
        /// Must start with a letter.
        /// Must end with a number or a letter.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// ColumnMap rule which evaluates whether each column value is null.
        /// </summary>
        public readonly Outputs.DatascanDataQualitySpecRuleNonNullExpectation? NonNullExpectation;
        /// <summary>
        /// ColumnMap rule which evaluates whether each column value lies between a specified range.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.DatascanDataQualitySpecRuleRangeExpectation? RangeExpectation;
        /// <summary>
        /// ColumnMap rule which evaluates whether each column value matches a specified regex.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.DatascanDataQualitySpecRuleRegexExpectation? RegexExpectation;
        /// <summary>
        /// Table rule which evaluates whether each row passes the specified condition.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.DatascanDataQualitySpecRuleRowConditionExpectation? RowConditionExpectation;
        /// <summary>
        /// ColumnMap rule which evaluates whether each column value is contained by a specified set.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.DatascanDataQualitySpecRuleSetExpectation? SetExpectation;
        /// <summary>
        /// Table rule which evaluates whether any row matches invalid state.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.DatascanDataQualitySpecRuleSqlAssertion? SqlAssertion;
        /// <summary>
        /// ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.DatascanDataQualitySpecRuleStatisticRangeExpectation? StatisticRangeExpectation;
        /// <summary>
        /// Table rule which evaluates whether the provided expression is true.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.DatascanDataQualitySpecRuleTableConditionExpectation? TableConditionExpectation;
        /// <summary>
        /// The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
        /// </summary>
        public readonly double? Threshold;
        /// <summary>
        /// Row-level rule which evaluates whether each column value is unique.
        /// </summary>
        public readonly Outputs.DatascanDataQualitySpecRuleUniquenessExpectation? UniquenessExpectation;

        [OutputConstructor]
        private DatascanDataQualitySpecRule(
            string? column,

            string? description,

            string dimension,

            bool? ignoreNull,

            string? name,

            Outputs.DatascanDataQualitySpecRuleNonNullExpectation? nonNullExpectation,

            Outputs.DatascanDataQualitySpecRuleRangeExpectation? rangeExpectation,

            Outputs.DatascanDataQualitySpecRuleRegexExpectation? regexExpectation,

            Outputs.DatascanDataQualitySpecRuleRowConditionExpectation? rowConditionExpectation,

            Outputs.DatascanDataQualitySpecRuleSetExpectation? setExpectation,

            Outputs.DatascanDataQualitySpecRuleSqlAssertion? sqlAssertion,

            Outputs.DatascanDataQualitySpecRuleStatisticRangeExpectation? statisticRangeExpectation,

            Outputs.DatascanDataQualitySpecRuleTableConditionExpectation? tableConditionExpectation,

            double? threshold,

            Outputs.DatascanDataQualitySpecRuleUniquenessExpectation? uniquenessExpectation)
        {
            Column = column;
            Description = description;
            Dimension = dimension;
            IgnoreNull = ignoreNull;
            Name = name;
            NonNullExpectation = nonNullExpectation;
            RangeExpectation = rangeExpectation;
            RegexExpectation = regexExpectation;
            RowConditionExpectation = rowConditionExpectation;
            SetExpectation = setExpectation;
            SqlAssertion = sqlAssertion;
            StatisticRangeExpectation = statisticRangeExpectation;
            TableConditionExpectation = tableConditionExpectation;
            Threshold = threshold;
            UniquenessExpectation = uniquenessExpectation;
        }
    }
}
