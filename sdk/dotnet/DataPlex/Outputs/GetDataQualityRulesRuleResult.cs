// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataPlex.Outputs
{

    [OutputType]
    public sealed class GetDataQualityRulesRuleResult
    {
        /// <summary>
        /// The unnested column which this rule is evaluated against.
        /// </summary>
        public readonly string Column;
        /// <summary>
        /// Description of the rule. (The maximum length is 1,024 characters.)
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The dimension a rule belongs to. Supported dimensions are "COMPLETENESS", "ACCURACY", "CONSISTENCY", "VALIDITY", "UNIQUENESS", "FRESHNESS", "VOLUME"
        /// </summary>
        public readonly string Dimension;
        /// <summary>
        /// Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. 
        /// 											This field is only valid for the following type of rules: RangeExpectation, RegexExpectation, SetExpectation, UniquenessExpectation
        /// </summary>
        public readonly bool IgnoreNull;
        /// <summary>
        /// A mutable name for the rule. 
        /// 											The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-).
        /// 											The maximum length is 63 characters.
        /// 											Must start with a letter.
        /// 											Must end with a number or a letter.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Row-level rule which evaluates whether each column value is null.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataQualityRulesRuleNonNullExpectationResult> NonNullExpectations;
        /// <summary>
        /// Row-level rule which evaluates whether each column value lies between a specified range.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataQualityRulesRuleRangeExpectationResult> RangeExpectations;
        /// <summary>
        /// Row-level rule which evaluates whether each column value matches a specified regex.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataQualityRulesRuleRegexExpectationResult> RegexExpectations;
        /// <summary>
        /// Row-level rule which evaluates whether each row in a table passes the specified condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataQualityRulesRuleRowConditionExpectationResult> RowConditionExpectations;
        /// <summary>
        /// Row-level rule which evaluates whether each column value is contained by a specified set.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataQualityRulesRuleSetExpectationResult> SetExpectations;
        /// <summary>
        /// Aggregate rule which evaluates the number of rows returned for the provided statement. If any rows are returned, this rule fails.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataQualityRulesRuleSqlAssertionResult> SqlAssertions;
        /// <summary>
        /// Aggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataQualityRulesRuleStatisticRangeExpectationResult> StatisticRangeExpectations;
        /// <summary>
        /// Whether the Rule is active or suspended. Default is false.
        /// </summary>
        public readonly bool Suspended;
        /// <summary>
        /// Aggregate rule which evaluates whether the provided expression is true for a table.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataQualityRulesRuleTableConditionExpectationResult> TableConditionExpectations;
        /// <summary>
        /// The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0). This field is only valid for row-level type rules.
        /// </summary>
        public readonly double Threshold;
        /// <summary>
        /// Row-level rule which evaluates whether each column value is unique.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataQualityRulesRuleUniquenessExpectationResult> UniquenessExpectations;

        [OutputConstructor]
        private GetDataQualityRulesRuleResult(
            string column,

            string description,

            string dimension,

            bool ignoreNull,

            string name,

            ImmutableArray<Outputs.GetDataQualityRulesRuleNonNullExpectationResult> nonNullExpectations,

            ImmutableArray<Outputs.GetDataQualityRulesRuleRangeExpectationResult> rangeExpectations,

            ImmutableArray<Outputs.GetDataQualityRulesRuleRegexExpectationResult> regexExpectations,

            ImmutableArray<Outputs.GetDataQualityRulesRuleRowConditionExpectationResult> rowConditionExpectations,

            ImmutableArray<Outputs.GetDataQualityRulesRuleSetExpectationResult> setExpectations,

            ImmutableArray<Outputs.GetDataQualityRulesRuleSqlAssertionResult> sqlAssertions,

            ImmutableArray<Outputs.GetDataQualityRulesRuleStatisticRangeExpectationResult> statisticRangeExpectations,

            bool suspended,

            ImmutableArray<Outputs.GetDataQualityRulesRuleTableConditionExpectationResult> tableConditionExpectations,

            double threshold,

            ImmutableArray<Outputs.GetDataQualityRulesRuleUniquenessExpectationResult> uniquenessExpectations)
        {
            Column = column;
            Description = description;
            Dimension = dimension;
            IgnoreNull = ignoreNull;
            Name = name;
            NonNullExpectations = nonNullExpectations;
            RangeExpectations = rangeExpectations;
            RegexExpectations = regexExpectations;
            RowConditionExpectations = rowConditionExpectations;
            SetExpectations = setExpectations;
            SqlAssertions = sqlAssertions;
            StatisticRangeExpectations = statisticRangeExpectations;
            Suspended = suspended;
            TableConditionExpectations = tableConditionExpectations;
            Threshold = threshold;
            UniquenessExpectations = uniquenessExpectations;
        }
    }
}
