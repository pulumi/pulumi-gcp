// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataPlex
{
    /// <summary>
    /// A Dataplex task represents the work that you want Dataplex to do on a schedule. It encapsulates code, parameters, and the schedule.
    /// 
    /// To get more information about Task, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dataplex/docs/reference/rest/v1/projects.locations.lakes.tasks)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dataplex/docs)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Task can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dataplex/task:Task default projects/{{project}}/locations/{{location}}/lakes/{{lake}}/tasks/{{task_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dataplex/task:Task default {{project}}/{{location}}/{{lake}}/{{task_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dataplex/task:Task default {{location}}/{{lake}}/{{task_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:dataplex/task:Task")]
    public partial class Task : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time when the task was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// User-provided description of the task.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// User friendly display name.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Configuration for the cluster
        /// Structure is documented below.
        /// </summary>
        [Output("executionSpec")]
        public Output<Outputs.TaskExecutionSpec> ExecutionSpec { get; private set; } = null!;

        /// <summary>
        /// Configuration for the cluster
        /// Structure is documented below.
        /// </summary>
        [Output("executionStatuses")]
        public Output<ImmutableArray<Outputs.TaskExecutionStatus>> ExecutionStatuses { get; private set; } = null!;

        /// <summary>
        /// User-defined labels for the task.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The lake in which the task will be created in.
        /// </summary>
        [Output("lake")]
        public Output<string?> Lake { get; private set; } = null!;

        /// <summary>
        /// The location in which the task will be created in.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// The relative resource name of the job, of the form: projects/{project_number}/locations/{locationId}/lakes/{lakeId}/tasks/{taskId}/jobs/{jobId}.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
        /// Structure is documented below.
        /// 
        /// (Required)
        /// Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).
        /// </summary>
        [Output("notebook")]
        public Output<Outputs.TaskNotebook?> Notebook { get; private set; } = null!;

        /// <summary>
        /// The project in which jobs are run. By default, the project containing the Lake is used. If a project is provided, the ExecutionSpec.service_account must belong to this project.
        /// 
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
        /// Structure is documented below.
        /// </summary>
        [Output("spark")]
        public Output<Outputs.TaskSpark?> Spark { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// Execution state for the job.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The task Id of the task.
        /// </summary>
        [Output("taskId")]
        public Output<string?> TaskId { get; private set; } = null!;

        /// <summary>
        /// Configuration for the cluster
        /// Structure is documented below.
        /// </summary>
        [Output("triggerSpec")]
        public Output<Outputs.TaskTriggerSpec> TriggerSpec { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// System generated globally unique ID for the job.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// Last update time of the status.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Task resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Task(string name, TaskArgs args, CustomResourceOptions? options = null)
            : base("gcp:dataplex/task:Task", name, args ?? new TaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Task(string name, Input<string> id, TaskState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dataplex/task:Task", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Task resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Task Get(string name, Input<string> id, TaskState? state = null, CustomResourceOptions? options = null)
        {
            return new Task(name, id, state, options);
        }
    }

    public sealed class TaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User-provided description of the task.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User friendly display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Configuration for the cluster
        /// Structure is documented below.
        /// </summary>
        [Input("executionSpec", required: true)]
        public Input<Inputs.TaskExecutionSpecArgs> ExecutionSpec { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the task.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The lake in which the task will be created in.
        /// </summary>
        [Input("lake")]
        public Input<string>? Lake { get; set; }

        /// <summary>
        /// The location in which the task will be created in.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
        /// Structure is documented below.
        /// 
        /// (Required)
        /// Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).
        /// </summary>
        [Input("notebook")]
        public Input<Inputs.TaskNotebookArgs>? Notebook { get; set; }

        /// <summary>
        /// The project in which jobs are run. By default, the project containing the Lake is used. If a project is provided, the ExecutionSpec.service_account must belong to this project.
        /// 
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
        /// Structure is documented below.
        /// </summary>
        [Input("spark")]
        public Input<Inputs.TaskSparkArgs>? Spark { get; set; }

        /// <summary>
        /// The task Id of the task.
        /// </summary>
        [Input("taskId")]
        public Input<string>? TaskId { get; set; }

        /// <summary>
        /// Configuration for the cluster
        /// Structure is documented below.
        /// </summary>
        [Input("triggerSpec", required: true)]
        public Input<Inputs.TaskTriggerSpecArgs> TriggerSpec { get; set; } = null!;

        public TaskArgs()
        {
        }
        public static new TaskArgs Empty => new TaskArgs();
    }

    public sealed class TaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time when the task was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// User-provided description of the task.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User friendly display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Configuration for the cluster
        /// Structure is documented below.
        /// </summary>
        [Input("executionSpec")]
        public Input<Inputs.TaskExecutionSpecGetArgs>? ExecutionSpec { get; set; }

        [Input("executionStatuses")]
        private InputList<Inputs.TaskExecutionStatusGetArgs>? _executionStatuses;

        /// <summary>
        /// Configuration for the cluster
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.TaskExecutionStatusGetArgs> ExecutionStatuses
        {
            get => _executionStatuses ?? (_executionStatuses = new InputList<Inputs.TaskExecutionStatusGetArgs>());
            set => _executionStatuses = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the task.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The lake in which the task will be created in.
        /// </summary>
        [Input("lake")]
        public Input<string>? Lake { get; set; }

        /// <summary>
        /// The location in which the task will be created in.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// (Output)
        /// The relative resource name of the job, of the form: projects/{project_number}/locations/{locationId}/lakes/{lakeId}/tasks/{taskId}/jobs/{jobId}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
        /// Structure is documented below.
        /// 
        /// (Required)
        /// Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).
        /// </summary>
        [Input("notebook")]
        public Input<Inputs.TaskNotebookGetArgs>? Notebook { get; set; }

        /// <summary>
        /// The project in which jobs are run. By default, the project containing the Lake is used. If a project is provided, the ExecutionSpec.service_account must belong to this project.
        /// 
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
        /// Structure is documented below.
        /// </summary>
        [Input("spark")]
        public Input<Inputs.TaskSparkGetArgs>? Spark { get; set; }

        /// <summary>
        /// (Output)
        /// Execution state for the job.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The task Id of the task.
        /// </summary>
        [Input("taskId")]
        public Input<string>? TaskId { get; set; }

        /// <summary>
        /// Configuration for the cluster
        /// Structure is documented below.
        /// </summary>
        [Input("triggerSpec")]
        public Input<Inputs.TaskTriggerSpecGetArgs>? TriggerSpec { get; set; }

        /// <summary>
        /// (Output)
        /// System generated globally unique ID for the job.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// (Output)
        /// Last update time of the status.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public TaskState()
        {
        }
        public static new TaskState Empty => new TaskState();
    }
}
