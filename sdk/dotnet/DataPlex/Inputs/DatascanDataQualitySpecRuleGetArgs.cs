// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataPlex.Inputs
{

    public sealed class DatascanDataQualitySpecRuleGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unnested column which this rule is evaluated against.
        /// </summary>
        [Input("column")]
        public Input<string>? Column { get; set; }

        /// <summary>
        /// Description of the rule.
        /// The maximum length is 1,024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are ["COMPLETENESS", "ACCURACY", "CONSISTENCY", "VALIDITY", "UNIQUENESS", "INTEGRITY"]
        /// </summary>
        [Input("dimension", required: true)]
        public Input<string> Dimension { get; set; } = null!;

        /// <summary>
        /// Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
        /// </summary>
        [Input("ignoreNull")]
        public Input<bool>? IgnoreNull { get; set; }

        /// <summary>
        /// A mutable name for the rule.
        /// The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-).
        /// The maximum length is 63 characters.
        /// Must start with a letter.
        /// Must end with a number or a letter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ColumnMap rule which evaluates whether each column value is null.
        /// </summary>
        [Input("nonNullExpectation")]
        public Input<Inputs.DatascanDataQualitySpecRuleNonNullExpectationGetArgs>? NonNullExpectation { get; set; }

        /// <summary>
        /// ColumnMap rule which evaluates whether each column value lies between a specified range.
        /// Structure is documented below.
        /// </summary>
        [Input("rangeExpectation")]
        public Input<Inputs.DatascanDataQualitySpecRuleRangeExpectationGetArgs>? RangeExpectation { get; set; }

        /// <summary>
        /// ColumnMap rule which evaluates whether each column value matches a specified regex.
        /// Structure is documented below.
        /// </summary>
        [Input("regexExpectation")]
        public Input<Inputs.DatascanDataQualitySpecRuleRegexExpectationGetArgs>? RegexExpectation { get; set; }

        /// <summary>
        /// Table rule which evaluates whether each row passes the specified condition.
        /// Structure is documented below.
        /// </summary>
        [Input("rowConditionExpectation")]
        public Input<Inputs.DatascanDataQualitySpecRuleRowConditionExpectationGetArgs>? RowConditionExpectation { get; set; }

        /// <summary>
        /// ColumnMap rule which evaluates whether each column value is contained by a specified set.
        /// Structure is documented below.
        /// </summary>
        [Input("setExpectation")]
        public Input<Inputs.DatascanDataQualitySpecRuleSetExpectationGetArgs>? SetExpectation { get; set; }

        /// <summary>
        /// Table rule which evaluates whether any row matches invalid state.
        /// Structure is documented below.
        /// </summary>
        [Input("sqlAssertion")]
        public Input<Inputs.DatascanDataQualitySpecRuleSqlAssertionGetArgs>? SqlAssertion { get; set; }

        /// <summary>
        /// ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
        /// Structure is documented below.
        /// </summary>
        [Input("statisticRangeExpectation")]
        public Input<Inputs.DatascanDataQualitySpecRuleStatisticRangeExpectationGetArgs>? StatisticRangeExpectation { get; set; }

        /// <summary>
        /// Table rule which evaluates whether the provided expression is true.
        /// Structure is documented below.
        /// </summary>
        [Input("tableConditionExpectation")]
        public Input<Inputs.DatascanDataQualitySpecRuleTableConditionExpectationGetArgs>? TableConditionExpectation { get; set; }

        /// <summary>
        /// The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
        /// </summary>
        [Input("threshold")]
        public Input<double>? Threshold { get; set; }

        /// <summary>
        /// Row-level rule which evaluates whether each column value is unique.
        /// </summary>
        [Input("uniquenessExpectation")]
        public Input<Inputs.DatascanDataQualitySpecRuleUniquenessExpectationGetArgs>? UniquenessExpectation { get; set; }

        public DatascanDataQualitySpecRuleGetArgs()
        {
        }
        public static new DatascanDataQualitySpecRuleGetArgs Empty => new DatascanDataQualitySpecRuleGetArgs();
    }
}
