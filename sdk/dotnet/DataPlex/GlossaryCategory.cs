// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataPlex
{
    /// <summary>
    /// Represents a collection of categories and terms within a Glossary that are related to each other.
    /// 
    /// ## Example Usage
    /// 
    /// ### Dataplex Glossary Category Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var categoryTestId = new Gcp.DataPlex.Glossary("category_test_id", new()
    ///     {
    ///         GlossaryId = "tf-test-glossary_72490",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var categoryTestIdGlossaryCategory = new Gcp.DataPlex.GlossaryCategory("category_test_id", new()
    ///     {
    ///         Parent = Output.Tuple(categoryTestId.Project, categoryTestId.GlossaryId).Apply(values =&gt;
    ///         {
    ///             var project = values.Item1;
    ///             var glossaryId = values.Item2;
    ///             return $"projects/{project}/locations/us-central1/glossaries/{glossaryId}";
    ///         }),
    ///         GlossaryId = categoryTestId.GlossaryId,
    ///         Location = "us-central1",
    ///         CategoryId = "tf-test-category-basic_89605",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataplex Glossary Category Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var categoryTestIdFull = new Gcp.DataPlex.Glossary("category_test_id_full", new()
    ///     {
    ///         GlossaryId = "tf-test-glossary_56730",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var categoryTestIdFullGlossaryCategory = new Gcp.DataPlex.GlossaryCategory("category_test_id_full", new()
    ///     {
    ///         Parent = Output.Tuple(categoryTestIdFull.Project, categoryTestIdFull.GlossaryId).Apply(values =&gt;
    ///         {
    ///             var project = values.Item1;
    ///             var glossaryId = values.Item2;
    ///             return $"projects/{project}/locations/us-central1/glossaries/{glossaryId}";
    ///         }),
    ///         GlossaryId = categoryTestIdFull.GlossaryId,
    ///         Location = "us-central1",
    ///         CategoryId = "tf-test-category-full_95154",
    ///         Labels = 
    ///         {
    ///             { "tag", "test-tf" },
    ///         },
    ///         DisplayName = "terraform category",
    ///         Description = "category created by Terraform",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// GlossaryCategory can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}/categories/{{category_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{glossary_id}}/{{category_id}}`
    /// 
    /// * `{{location}}/{{glossary_id}}/{{category_id}}`
    /// 
    /// When using the `pulumi import` command, GlossaryCategory can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataplex/glossaryCategory:GlossaryCategory default projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}/categories/{{category_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataplex/glossaryCategory:GlossaryCategory default {{project}}/{{location}}/{{glossary_id}}/{{category_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataplex/glossaryCategory:GlossaryCategory default {{location}}/{{glossary_id}}/{{category_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:dataplex/glossaryCategory:GlossaryCategory")]
    public partial class GlossaryCategory : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The category id for creation.
        /// </summary>
        [Output("categoryId")]
        public Output<string?> CategoryId { get; private set; } = null!;

        /// <summary>
        /// The time at which the GlossaryCategory was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The user-mutable description of the GlossaryCategory.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The glossary id for creation.
        /// </summary>
        [Output("glossaryId")]
        public Output<string?> GlossaryId { get; private set; } = null!;

        /// <summary>
        /// User-defined labels for the GlossaryCategory.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location where the glossary category should reside.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the GlossaryCategory. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// System generated unique id for the GlossaryCategory. This ID will be different if the GlossaryCategory is deleted and re-created with the same name.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The time at which the GlossaryCategory was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a GlossaryCategory resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GlossaryCategory(string name, GlossaryCategoryArgs args, CustomResourceOptions? options = null)
            : base("gcp:dataplex/glossaryCategory:GlossaryCategory", name, args ?? new GlossaryCategoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GlossaryCategory(string name, Input<string> id, GlossaryCategoryState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dataplex/glossaryCategory:GlossaryCategory", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GlossaryCategory resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GlossaryCategory Get(string name, Input<string> id, GlossaryCategoryState? state = null, CustomResourceOptions? options = null)
        {
            return new GlossaryCategory(name, id, state, options);
        }
    }

    public sealed class GlossaryCategoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The category id for creation.
        /// </summary>
        [Input("categoryId")]
        public Input<string>? CategoryId { get; set; }

        /// <summary>
        /// The user-mutable description of the GlossaryCategory.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The glossary id for creation.
        /// </summary>
        [Input("glossaryId")]
        public Input<string>? GlossaryId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the GlossaryCategory.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where the glossary category should reside.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GlossaryCategoryArgs()
        {
        }
        public static new GlossaryCategoryArgs Empty => new GlossaryCategoryArgs();
    }

    public sealed class GlossaryCategoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The category id for creation.
        /// </summary>
        [Input("categoryId")]
        public Input<string>? CategoryId { get; set; }

        /// <summary>
        /// The time at which the GlossaryCategory was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The user-mutable description of the GlossaryCategory.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The glossary id for creation.
        /// </summary>
        [Input("glossaryId")]
        public Input<string>? GlossaryId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the GlossaryCategory.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where the glossary category should reside.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the GlossaryCategory. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// System generated unique id for the GlossaryCategory. This ID will be different if the GlossaryCategory is deleted and re-created with the same name.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The time at which the GlossaryCategory was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public GlossaryCategoryState()
        {
        }
        public static new GlossaryCategoryState Empty => new GlossaryCategoryState();
    }
}
