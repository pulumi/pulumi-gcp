// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataPlex
{
    /// <summary>
    /// The Dataplex Asset resource
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Asset can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dataplex/asset:Asset default projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{dataplex_zone}}/assets/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dataplex/asset:Asset default {{project}}/{{location}}/{{lake}}/{{dataplex_zone}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dataplex/asset:Asset default {{location}}/{{lake}}/{{dataplex_zone}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:dataplex/asset:Asset")]
    public partial class Asset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Output only. The time when the asset was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The zone for the resource
        /// </summary>
        [Output("dataplexZone")]
        public Output<string> DataplexZone { get; private set; } = null!;

        /// <summary>
        /// Optional. Description of the asset.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Required. Specification of the discovery feature applied to data referenced by this asset. When this spec is left unset, the asset will use the spec set on the parent zone.
        /// </summary>
        [Output("discoverySpec")]
        public Output<Outputs.AssetDiscoverySpec> DiscoverySpec { get; private set; } = null!;

        /// <summary>
        /// Output only. Status of the discovery feature applied to data referenced by this asset.
        /// </summary>
        [Output("discoveryStatuses")]
        public Output<ImmutableArray<Outputs.AssetDiscoveryStatus>> DiscoveryStatuses { get; private set; } = null!;

        /// <summary>
        /// Optional. User friendly display name.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Optional. User defined labels for the asset.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The lake for the resource
        /// </summary>
        [Output("lake")]
        public Output<string> Lake { get; private set; } = null!;

        /// <summary>
        /// The location for the resource
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Immutable. Relative name of the cloud resource that contains the data that is being managed within a lake. For example: `projects/{project_number}/buckets/{bucket_id}` `projects/{project_number}/datasets/{dataset_id}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The project for the resource
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Required. Immutable. Specification of the resource that is referenced by this asset.
        /// </summary>
        [Output("resourceSpec")]
        public Output<Outputs.AssetResourceSpec> ResourceSpec { get; private set; } = null!;

        /// <summary>
        /// Output only. Status of the resource referenced by this asset.
        /// </summary>
        [Output("resourceStatuses")]
        public Output<ImmutableArray<Outputs.AssetResourceStatus>> ResourceStatuses { get; private set; } = null!;

        /// <summary>
        /// Output only. Status of the security policy applied to resource referenced by this asset.
        /// </summary>
        [Output("securityStatuses")]
        public Output<ImmutableArray<Outputs.AssetSecurityStatus>> SecurityStatuses { get; private set; } = null!;

        /// <summary>
        /// Output only. Current state of the asset. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Output only. System generated globally unique ID for the asset. This ID will be different if the asset is deleted and
        /// re-created with the same name.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Output only. The time when the asset was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Asset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Asset(string name, AssetArgs args, CustomResourceOptions? options = null)
            : base("gcp:dataplex/asset:Asset", name, args ?? new AssetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Asset(string name, Input<string> id, AssetState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dataplex/asset:Asset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Asset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Asset Get(string name, Input<string> id, AssetState? state = null, CustomResourceOptions? options = null)
        {
            return new Asset(name, id, state, options);
        }
    }

    public sealed class AssetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The zone for the resource
        /// </summary>
        [Input("dataplexZone", required: true)]
        public Input<string> DataplexZone { get; set; } = null!;

        /// <summary>
        /// Optional. Description of the asset.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Required. Specification of the discovery feature applied to data referenced by this asset. When this spec is left unset, the asset will use the spec set on the parent zone.
        /// </summary>
        [Input("discoverySpec", required: true)]
        public Input<Inputs.AssetDiscoverySpecArgs> DiscoverySpec { get; set; } = null!;

        /// <summary>
        /// Optional. User friendly display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. User defined labels for the asset.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The lake for the resource
        /// </summary>
        [Input("lake", required: true)]
        public Input<string> Lake { get; set; } = null!;

        /// <summary>
        /// The location for the resource
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Immutable. Relative name of the cloud resource that contains the data that is being managed within a lake. For example: `projects/{project_number}/buckets/{bucket_id}` `projects/{project_number}/datasets/{dataset_id}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The project for the resource
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Required. Immutable. Specification of the resource that is referenced by this asset.
        /// </summary>
        [Input("resourceSpec", required: true)]
        public Input<Inputs.AssetResourceSpecArgs> ResourceSpec { get; set; } = null!;

        public AssetArgs()
        {
        }
        public static new AssetArgs Empty => new AssetArgs();
    }

    public sealed class AssetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Output only. The time when the asset was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The zone for the resource
        /// </summary>
        [Input("dataplexZone")]
        public Input<string>? DataplexZone { get; set; }

        /// <summary>
        /// Optional. Description of the asset.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Required. Specification of the discovery feature applied to data referenced by this asset. When this spec is left unset, the asset will use the spec set on the parent zone.
        /// </summary>
        [Input("discoverySpec")]
        public Input<Inputs.AssetDiscoverySpecGetArgs>? DiscoverySpec { get; set; }

        [Input("discoveryStatuses")]
        private InputList<Inputs.AssetDiscoveryStatusGetArgs>? _discoveryStatuses;

        /// <summary>
        /// Output only. Status of the discovery feature applied to data referenced by this asset.
        /// </summary>
        public InputList<Inputs.AssetDiscoveryStatusGetArgs> DiscoveryStatuses
        {
            get => _discoveryStatuses ?? (_discoveryStatuses = new InputList<Inputs.AssetDiscoveryStatusGetArgs>());
            set => _discoveryStatuses = value;
        }

        /// <summary>
        /// Optional. User friendly display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. User defined labels for the asset.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The lake for the resource
        /// </summary>
        [Input("lake")]
        public Input<string>? Lake { get; set; }

        /// <summary>
        /// The location for the resource
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Immutable. Relative name of the cloud resource that contains the data that is being managed within a lake. For example: `projects/{project_number}/buckets/{bucket_id}` `projects/{project_number}/datasets/{dataset_id}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The project for the resource
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Required. Immutable. Specification of the resource that is referenced by this asset.
        /// </summary>
        [Input("resourceSpec")]
        public Input<Inputs.AssetResourceSpecGetArgs>? ResourceSpec { get; set; }

        [Input("resourceStatuses")]
        private InputList<Inputs.AssetResourceStatusGetArgs>? _resourceStatuses;

        /// <summary>
        /// Output only. Status of the resource referenced by this asset.
        /// </summary>
        public InputList<Inputs.AssetResourceStatusGetArgs> ResourceStatuses
        {
            get => _resourceStatuses ?? (_resourceStatuses = new InputList<Inputs.AssetResourceStatusGetArgs>());
            set => _resourceStatuses = value;
        }

        [Input("securityStatuses")]
        private InputList<Inputs.AssetSecurityStatusGetArgs>? _securityStatuses;

        /// <summary>
        /// Output only. Status of the security policy applied to resource referenced by this asset.
        /// </summary>
        public InputList<Inputs.AssetSecurityStatusGetArgs> SecurityStatuses
        {
            get => _securityStatuses ?? (_securityStatuses = new InputList<Inputs.AssetSecurityStatusGetArgs>());
            set => _securityStatuses = value;
        }

        /// <summary>
        /// Output only. Current state of the asset. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Output only. System generated globally unique ID for the asset. This ID will be different if the asset is deleted and
        /// re-created with the same name.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Output only. The time when the asset was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public AssetState()
        {
        }
        public static new AssetState Empty => new AssetState();
    }
}
