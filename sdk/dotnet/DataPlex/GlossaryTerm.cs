// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataPlex
{
    /// <summary>
    /// Represents a collection of terms within a Glossary that are related to each other.
    /// 
    /// ## Example Usage
    /// 
    /// ### Dataplex Glossary Term Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var termTestId = new Gcp.DataPlex.Glossary("term_test_id", new()
    ///     {
    ///         GlossaryId = "tf-test-glossary_88722",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var termTestIdGlossaryTerm = new Gcp.DataPlex.GlossaryTerm("term_test_id", new()
    ///     {
    ///         Parent = Output.Tuple(termTestId.Project, termTestId.GlossaryId).Apply(values =&gt;
    ///         {
    ///             var project = values.Item1;
    ///             var glossaryId = values.Item2;
    ///             return $"projects/{project}/locations/us-central1/glossaries/{glossaryId}";
    ///         }),
    ///         GlossaryId = termTestId.GlossaryId,
    ///         Location = "us-central1",
    ///         TermId = "tf-test-term-basic_39249",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataplex Glossary Term Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var termTestIdFull = new Gcp.DataPlex.Glossary("term_test_id_full", new()
    ///     {
    ///         GlossaryId = "tf-test-glossary_74391",
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var termTestIdFullGlossaryTerm = new Gcp.DataPlex.GlossaryTerm("term_test_id_full", new()
    ///     {
    ///         Parent = Output.Tuple(termTestIdFull.Project, termTestIdFull.GlossaryId).Apply(values =&gt;
    ///         {
    ///             var project = values.Item1;
    ///             var glossaryId = values.Item2;
    ///             return $"projects/{project}/locations/us-central1/glossaries/{glossaryId}";
    ///         }),
    ///         GlossaryId = termTestIdFull.GlossaryId,
    ///         Location = "us-central1",
    ///         TermId = "tf-test-term-full_16511",
    ///         Labels = 
    ///         {
    ///             { "tag", "test-tf" },
    ///         },
    ///         DisplayName = "terraform term",
    ///         Description = "term created by Terraform",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// GlossaryTerm can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}/terms/{{term_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{glossary_id}}/{{term_id}}`
    /// 
    /// * `{{location}}/{{glossary_id}}/{{term_id}}`
    /// 
    /// When using the `pulumi import` command, GlossaryTerm can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataplex/glossaryTerm:GlossaryTerm default projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}/terms/{{term_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataplex/glossaryTerm:GlossaryTerm default {{project}}/{{location}}/{{glossary_id}}/{{term_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataplex/glossaryTerm:GlossaryTerm default {{location}}/{{glossary_id}}/{{term_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:dataplex/glossaryTerm:GlossaryTerm")]
    public partial class GlossaryTerm : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time at which the GlossaryTerm was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The user-mutable description of the GlossaryTerm.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// User friendly display name of the GlossaryTerm. This is user-mutable. This will be same as the termId, if not specified.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The glossary id for creation.
        /// </summary>
        [Output("glossaryId")]
        public Output<string?> GlossaryId { get; private set; } = null!;

        /// <summary>
        /// User-defined labels for the GlossaryTerm.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location where the glossary term should reside.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the GlossaryTerm. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{termId}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The immediate parent of the GlossaryTerm in the resource-hierarchy. It can either be a Glossary or a Term. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/terms/{termId}
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The term id for creation.
        /// </summary>
        [Output("termId")]
        public Output<string?> TermId { get; private set; } = null!;

        /// <summary>
        /// System generated unique id for the GlossaryTerm. This ID will be different if the GlossaryTerm is deleted and re-created with the same name.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The time at which the GlossaryTerm was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a GlossaryTerm resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GlossaryTerm(string name, GlossaryTermArgs args, CustomResourceOptions? options = null)
            : base("gcp:dataplex/glossaryTerm:GlossaryTerm", name, args ?? new GlossaryTermArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GlossaryTerm(string name, Input<string> id, GlossaryTermState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dataplex/glossaryTerm:GlossaryTerm", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GlossaryTerm resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GlossaryTerm Get(string name, Input<string> id, GlossaryTermState? state = null, CustomResourceOptions? options = null)
        {
            return new GlossaryTerm(name, id, state, options);
        }
    }

    public sealed class GlossaryTermArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The user-mutable description of the GlossaryTerm.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User friendly display name of the GlossaryTerm. This is user-mutable. This will be same as the termId, if not specified.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The glossary id for creation.
        /// </summary>
        [Input("glossaryId")]
        public Input<string>? GlossaryId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the GlossaryTerm.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where the glossary term should reside.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The immediate parent of the GlossaryTerm in the resource-hierarchy. It can either be a Glossary or a Term. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/terms/{termId}
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The term id for creation.
        /// </summary>
        [Input("termId")]
        public Input<string>? TermId { get; set; }

        public GlossaryTermArgs()
        {
        }
        public static new GlossaryTermArgs Empty => new GlossaryTermArgs();
    }

    public sealed class GlossaryTermState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time at which the GlossaryTerm was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The user-mutable description of the GlossaryTerm.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User friendly display name of the GlossaryTerm. This is user-mutable. This will be same as the termId, if not specified.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The glossary id for creation.
        /// </summary>
        [Input("glossaryId")]
        public Input<string>? GlossaryId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the GlossaryTerm.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where the glossary term should reside.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the GlossaryTerm. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{termId}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The immediate parent of the GlossaryTerm in the resource-hierarchy. It can either be a Glossary or a Term. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/terms/{termId}
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The term id for creation.
        /// </summary>
        [Input("termId")]
        public Input<string>? TermId { get; set; }

        /// <summary>
        /// System generated unique id for the GlossaryTerm. This ID will be different if the GlossaryTerm is deleted and re-created with the same name.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The time at which the GlossaryTerm was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public GlossaryTermState()
        {
        }
        public static new GlossaryTermState Empty => new GlossaryTermState();
    }
}
