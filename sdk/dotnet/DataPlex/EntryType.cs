// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataPlex
{
    /// <summary>
    /// An Entry Type is a template for creating Entries.
    /// 
    /// ## Example Usage
    /// 
    /// ### Dataplex Entry Type Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testEntryTypeBasic = new Gcp.DataPlex.EntryType("test_entry_type_basic", new()
    ///     {
    ///         EntryTypeId = "entry-type-basic",
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dataplex Entry Type Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testEntryTypeFull = new Gcp.DataPlex.AspectType("test_entry_type_full", new()
    ///     {
    ///         AspectTypeId = "tf-test-aspect-type_88722",
    ///         Location = "us-central1",
    ///         Project = "my-project-name",
    ///         MetadataTemplate = @"{
    ///   ""name"": ""tf-test-template"",
    ///   ""type"": ""record"",
    ///   ""recordFields"": [
    ///     {
    ///       ""name"": ""type"",
    ///       ""type"": ""enum"",
    ///       ""annotations"": {
    ///         ""displayName"": ""Type"",
    ///         ""description"": ""Specifies the type of view represented by the entry.""
    ///       },
    ///       ""index"": 1,
    ///       ""constraints"": {
    ///         ""required"": true
    ///       },
    ///       ""enumValues"": [
    ///         {
    ///           ""name"": ""VIEW"",
    ///           ""index"": 1
    ///         }
    ///       ]
    ///     }
    ///   ]
    /// }
    /// ",
    ///     });
    /// 
    ///     var testEntryTypeFullEntryType = new Gcp.DataPlex.EntryType("test_entry_type_full", new()
    ///     {
    ///         EntryTypeId = "entry-type-full",
    ///         Project = "my-project-name",
    ///         Location = "us-central1",
    ///         Labels = 
    ///         {
    ///             { "tag", "test-tf" },
    ///         },
    ///         DisplayName = "terraform entry type",
    ///         Description = "entry type created by Terraform",
    ///         TypeAliases = new[]
    ///         {
    ///             "TABLE",
    ///             "DATABASE",
    ///         },
    ///         Platform = "GCS",
    ///         System = "CloudSQL",
    ///         RequiredAspects = new[]
    ///         {
    ///             new Gcp.DataPlex.Inputs.EntryTypeRequiredAspectArgs
    ///             {
    ///                 Type = testEntryTypeFull.Name,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// EntryType can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{entry_type_id}}`
    /// 
    /// * `{{location}}/{{entry_type_id}}`
    /// 
    /// When using the `pulumi import` command, EntryType can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataplex/entryType:EntryType default projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataplex/entryType:EntryType default {{project}}/{{location}}/{{entry_type_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:dataplex/entryType:EntryType default {{location}}/{{entry_type_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:dataplex/entryType:EntryType")]
    public partial class EntryType : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time when the EntryType was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Description of the EntryType.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// User friendly display name.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The entry type id of the entry type.
        /// </summary>
        [Output("entryTypeId")]
        public Output<string?> EntryTypeId { get; private set; } = null!;

        /// <summary>
        /// User-defined labels for the EntryType.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location where entry type will be created in.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The relative resource name of the EntryType, of the form: projects/{project_number}/locations/{location_id}/entryTypes/{entry_type_id}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The platform that Entries of this type belongs to.
        /// </summary>
        [Output("platform")]
        public Output<string?> Platform { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// AspectInfo for the entry type.
        /// Structure is documented below.
        /// </summary>
        [Output("requiredAspects")]
        public Output<ImmutableArray<Outputs.EntryTypeRequiredAspect>> RequiredAspects { get; private set; } = null!;

        /// <summary>
        /// The system that Entries of this type belongs to.
        /// </summary>
        [Output("system")]
        public Output<string?> System { get; private set; } = null!;

        /// <summary>
        /// Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
        /// </summary>
        [Output("typeAliases")]
        public Output<ImmutableArray<string>> TypeAliases { get; private set; } = null!;

        /// <summary>
        /// System generated globally unique ID for the EntryType. This ID will be different if the EntryType is deleted and re-created with the same name.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The time when the EntryType was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a EntryType resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EntryType(string name, EntryTypeArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:dataplex/entryType:EntryType", name, args ?? new EntryTypeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EntryType(string name, Input<string> id, EntryTypeState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dataplex/entryType:EntryType", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EntryType resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EntryType Get(string name, Input<string> id, EntryTypeState? state = null, CustomResourceOptions? options = null)
        {
            return new EntryType(name, id, state, options);
        }
    }

    public sealed class EntryTypeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the EntryType.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User friendly display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The entry type id of the entry type.
        /// </summary>
        [Input("entryTypeId")]
        public Input<string>? EntryTypeId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the EntryType.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where entry type will be created in.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The platform that Entries of this type belongs to.
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("requiredAspects")]
        private InputList<Inputs.EntryTypeRequiredAspectArgs>? _requiredAspects;

        /// <summary>
        /// AspectInfo for the entry type.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.EntryTypeRequiredAspectArgs> RequiredAspects
        {
            get => _requiredAspects ?? (_requiredAspects = new InputList<Inputs.EntryTypeRequiredAspectArgs>());
            set => _requiredAspects = value;
        }

        /// <summary>
        /// The system that Entries of this type belongs to.
        /// </summary>
        [Input("system")]
        public Input<string>? System { get; set; }

        [Input("typeAliases")]
        private InputList<string>? _typeAliases;

        /// <summary>
        /// Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
        /// </summary>
        public InputList<string> TypeAliases
        {
            get => _typeAliases ?? (_typeAliases = new InputList<string>());
            set => _typeAliases = value;
        }

        public EntryTypeArgs()
        {
        }
        public static new EntryTypeArgs Empty => new EntryTypeArgs();
    }

    public sealed class EntryTypeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time when the EntryType was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Description of the EntryType.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User friendly display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The entry type id of the entry type.
        /// </summary>
        [Input("entryTypeId")]
        public Input<string>? EntryTypeId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the EntryType.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where entry type will be created in.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The relative resource name of the EntryType, of the form: projects/{project_number}/locations/{location_id}/entryTypes/{entry_type_id}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The platform that Entries of this type belongs to.
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("requiredAspects")]
        private InputList<Inputs.EntryTypeRequiredAspectGetArgs>? _requiredAspects;

        /// <summary>
        /// AspectInfo for the entry type.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.EntryTypeRequiredAspectGetArgs> RequiredAspects
        {
            get => _requiredAspects ?? (_requiredAspects = new InputList<Inputs.EntryTypeRequiredAspectGetArgs>());
            set => _requiredAspects = value;
        }

        /// <summary>
        /// The system that Entries of this type belongs to.
        /// </summary>
        [Input("system")]
        public Input<string>? System { get; set; }

        [Input("typeAliases")]
        private InputList<string>? _typeAliases;

        /// <summary>
        /// Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
        /// </summary>
        public InputList<string> TypeAliases
        {
            get => _typeAliases ?? (_typeAliases = new InputList<string>());
            set => _typeAliases = value;
        }

        /// <summary>
        /// System generated globally unique ID for the EntryType. This ID will be different if the EntryType is deleted and re-created with the same name.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The time when the EntryType was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public EntryTypeState()
        {
        }
        public static new EntryTypeState Empty => new EntryTypeState();
    }
}
