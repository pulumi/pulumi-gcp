// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataPlex
{
    public static class GetTaskIamPolicy
    {
        /// <summary>
        /// Retrieves the current IAM policy data for task
        /// 
        /// 
        /// 
        /// ## example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.DataPlex.GetTaskIamPolicy.Invoke(new()
        ///     {
        ///         Project = google_dataplex_task.Example.Project,
        ///         Location = google_dataplex_task.Example.Location,
        ///         Lake = google_dataplex_task.Example.Lake,
        ///         TaskId = google_dataplex_task.Example.Task_id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTaskIamPolicyResult> InvokeAsync(GetTaskIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTaskIamPolicyResult>("gcp:dataplex/getTaskIamPolicy:getTaskIamPolicy", args ?? new GetTaskIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for task
        /// 
        /// 
        /// 
        /// ## example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policy = Gcp.DataPlex.GetTaskIamPolicy.Invoke(new()
        ///     {
        ///         Project = google_dataplex_task.Example.Project,
        ///         Location = google_dataplex_task.Example.Location,
        ///         Lake = google_dataplex_task.Example.Lake,
        ///         TaskId = google_dataplex_task.Example.Task_id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTaskIamPolicyResult> Invoke(GetTaskIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTaskIamPolicyResult>("gcp:dataplex/getTaskIamPolicy:getTaskIamPolicy", args ?? new GetTaskIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTaskIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The lake in which the task will be created in.
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("lake", required: true)]
        public string Lake { get; set; } = null!;

        /// <summary>
        /// The location in which the task will be created in.
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        [Input("taskId", required: true)]
        public string TaskId { get; set; } = null!;

        public GetTaskIamPolicyArgs()
        {
        }
        public static new GetTaskIamPolicyArgs Empty => new GetTaskIamPolicyArgs();
    }

    public sealed class GetTaskIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The lake in which the task will be created in.
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("lake", required: true)]
        public Input<string> Lake { get; set; } = null!;

        /// <summary>
        /// The location in which the task will be created in.
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("taskId", required: true)]
        public Input<string> TaskId { get; set; } = null!;

        public GetTaskIamPolicyInvokeArgs()
        {
        }
        public static new GetTaskIamPolicyInvokeArgs Empty => new GetTaskIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetTaskIamPolicyResult
    {
        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Lake;
        public readonly string Location;
        /// <summary>
        /// (Required only by `gcp.dataplex.TaskIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        public readonly string PolicyData;
        public readonly string Project;
        public readonly string TaskId;

        [OutputConstructor]
        private GetTaskIamPolicyResult(
            string etag,

            string id,

            string lake,

            string location,

            string policyData,

            string project,

            string taskId)
        {
            Etag = etag;
            Id = id;
            Lake = lake;
            Location = location;
            PolicyData = policyData;
            Project = project;
            TaskId = taskId;
        }
    }
}
