// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.AccessApproval
{
    public static class GetFolderServiceAccount
    {
        /// <summary>
        /// Get the email address of a folder's Access Approval service account.
        /// 
        /// Each Google Cloud folder has a unique service account used by Access Approval.
        /// When using Access Approval with a
        /// [custom signing key](https://cloud.google.com/cloud-provider-access-management/access-approval/docs/review-approve-access-requests-custom-keys),
        /// this account needs to be granted the `cloudkms.signerVerifier` IAM role on the
        /// Cloud KMS key used to sign approvals.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var serviceAccount = Output.Create(Gcp.AccessApproval.GetFolderServiceAccount.InvokeAsync(new Gcp.AccessApproval.GetFolderServiceAccountArgs
        ///         {
        ///             FolderId = "my-folder",
        ///         }));
        ///         var iam = new Gcp.Kms.CryptoKeyIAMMember("iam", new Gcp.Kms.CryptoKeyIAMMemberArgs
        ///         {
        ///             CryptoKeyId = google_kms_crypto_key.Crypto_key.Id,
        ///             Role = "roles/cloudkms.signerVerifier",
        ///             Member = serviceAccount.Apply(serviceAccount =&gt; $"serviceAccount:{serviceAccount.AccountEmail}"),
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFolderServiceAccountResult> InvokeAsync(GetFolderServiceAccountArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFolderServiceAccountResult>("gcp:accessapproval/getFolderServiceAccount:getFolderServiceAccount", args ?? new GetFolderServiceAccountArgs(), options.WithDefaults());

        /// <summary>
        /// Get the email address of a folder's Access Approval service account.
        /// 
        /// Each Google Cloud folder has a unique service account used by Access Approval.
        /// When using Access Approval with a
        /// [custom signing key](https://cloud.google.com/cloud-provider-access-management/access-approval/docs/review-approve-access-requests-custom-keys),
        /// this account needs to be granted the `cloudkms.signerVerifier` IAM role on the
        /// Cloud KMS key used to sign approvals.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var serviceAccount = Output.Create(Gcp.AccessApproval.GetFolderServiceAccount.InvokeAsync(new Gcp.AccessApproval.GetFolderServiceAccountArgs
        ///         {
        ///             FolderId = "my-folder",
        ///         }));
        ///         var iam = new Gcp.Kms.CryptoKeyIAMMember("iam", new Gcp.Kms.CryptoKeyIAMMemberArgs
        ///         {
        ///             CryptoKeyId = google_kms_crypto_key.Crypto_key.Id,
        ///             Role = "roles/cloudkms.signerVerifier",
        ///             Member = serviceAccount.Apply(serviceAccount =&gt; $"serviceAccount:{serviceAccount.AccountEmail}"),
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFolderServiceAccountResult> Invoke(GetFolderServiceAccountInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFolderServiceAccountResult>("gcp:accessapproval/getFolderServiceAccount:getFolderServiceAccount", args ?? new GetFolderServiceAccountInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFolderServiceAccountArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The folder ID the service account was created for.
        /// </summary>
        [Input("folderId", required: true)]
        public string FolderId { get; set; } = null!;

        public GetFolderServiceAccountArgs()
        {
        }
    }

    public sealed class GetFolderServiceAccountInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The folder ID the service account was created for.
        /// </summary>
        [Input("folderId", required: true)]
        public Input<string> FolderId { get; set; } = null!;

        public GetFolderServiceAccountInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFolderServiceAccountResult
    {
        /// <summary>
        /// The email address of the service account. This value is
        /// often used to refer to the service account in order to grant IAM permissions.
        /// </summary>
        public readonly string AccountEmail;
        public readonly string FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Access Approval service account resource name. Format is "folders/{folder_id}/serviceAccount".
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetFolderServiceAccountResult(
            string accountEmail,

            string folderId,

            string id,

            string name)
        {
            AccountEmail = accountEmail;
            FolderId = folderId;
            Id = id;
            Name = name;
        }
    }
}
