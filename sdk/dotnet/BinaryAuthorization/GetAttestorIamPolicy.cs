// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BinaryAuthorization
{
    public static class GetAttestorIamPolicy
    {
        /// <summary>
        /// Retrieves the current IAM policy data for attestor
        /// </summary>
        public static Task<GetAttestorIamPolicyResult> InvokeAsync(GetAttestorIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAttestorIamPolicyResult>("gcp:binaryauthorization/getAttestorIamPolicy:getAttestorIamPolicy", args ?? new GetAttestorIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the current IAM policy data for attestor
        /// </summary>
        public static Output<GetAttestorIamPolicyResult> Invoke(GetAttestorIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAttestorIamPolicyResult>("gcp:binaryauthorization/getAttestorIamPolicy:getAttestorIamPolicy", args ?? new GetAttestorIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAttestorIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("attestor", required: true)]
        public string Attestor { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetAttestorIamPolicyArgs()
        {
        }
        public static new GetAttestorIamPolicyArgs Empty => new GetAttestorIamPolicyArgs();
    }

    public sealed class GetAttestorIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to find the parent resource to bind the IAM policy to
        /// </summary>
        [Input("attestor", required: true)]
        public Input<string> Attestor { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetAttestorIamPolicyInvokeArgs()
        {
        }
        public static new GetAttestorIamPolicyInvokeArgs Empty => new GetAttestorIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetAttestorIamPolicyResult
    {
        public readonly string Attestor;
        /// <summary>
        /// (Computed) The etag of the IAM policy.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Required only by `gcp.binaryauthorization.AttestorIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        /// </summary>
        public readonly string PolicyData;
        public readonly string Project;

        [OutputConstructor]
        private GetAttestorIamPolicyResult(
            string attestor,

            string etag,

            string id,

            string policyData,

            string project)
        {
            Attestor = attestor;
            Etag = etag;
            Id = id;
            PolicyData = policyData;
            Project = project;
        }
    }
}
