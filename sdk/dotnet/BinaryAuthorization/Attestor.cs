// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.BinaryAuthorization
{
    /// <summary>
    /// An attestor that attests to container image artifacts.
    /// 
    /// To get more information about Attestor, see:
    /// 
    /// * [API documentation](https://cloud.google.com/binary-authorization/docs/reference/rest/)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/binary-authorization/)
    /// 
    /// ## Example Usage
    /// ### Binary Authorization Attestor Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var note = new Gcp.ContainerAnalysis.Note("note", new Gcp.ContainerAnalysis.NoteArgs
    ///         {
    ///             AttestationAuthority = new Gcp.ContainerAnalysis.Inputs.NoteAttestationAuthorityArgs
    ///             {
    ///                 Hint = new Gcp.ContainerAnalysis.Inputs.NoteAttestationAuthorityHintArgs
    ///                 {
    ///                     HumanReadableName = "Attestor Note",
    ///                 },
    ///             },
    ///         });
    ///         var attestor = new Gcp.BinaryAuthorization.Attestor("attestor", new Gcp.BinaryAuthorization.AttestorArgs
    ///         {
    ///             AttestationAuthorityNote = new Gcp.BinaryAuthorization.Inputs.AttestorAttestationAuthorityNoteArgs
    ///             {
    ///                 NoteReference = note.Name,
    ///                 PublicKeys = 
    ///                 {
    ///                     new Gcp.BinaryAuthorization.Inputs.AttestorAttestationAuthorityNotePublicKeyArgs
    ///                     {
    ///                         AsciiArmoredPgpPublicKey = @"mQENBFtP0doBCADF+joTiXWKVuP8kJt3fgpBSjT9h8ezMfKA4aXZctYLx5wslWQl
    /// bB7Iu2ezkECNzoEeU7WxUe8a61pMCh9cisS9H5mB2K2uM4Jnf8tgFeXn3akJDVo0
    /// oR1IC+Dp9mXbRSK3MAvKkOwWlG99sx3uEdvmeBRHBOO+grchLx24EThXFOyP9Fk6
    /// V39j6xMjw4aggLD15B4V0v9JqBDdJiIYFzszZDL6pJwZrzcP0z8JO4rTZd+f64bD
    /// Mpj52j/pQfA8lZHOaAgb1OrthLdMrBAjoDjArV4Ek7vSbrcgYWcI6BhsQrFoxKdX
    /// 83TZKai55ZCfCLIskwUIzA1NLVwyzCS+fSN/ABEBAAG0KCJUZXN0IEF0dGVzdG9y
    /// IiA8ZGFuYWhvZmZtYW5AZ29vZ2xlLmNvbT6JAU4EEwEIADgWIQRfWkqHt6hpTA1L
    /// uY060eeM4dc66AUCW0/R2gIbLwULCQgHAgYVCgkICwIEFgIDAQIeAQIXgAAKCRA6
    /// 0eeM4dc66HdpCAC4ot3b0OyxPb0Ip+WT2U0PbpTBPJklesuwpIrM4Lh0N+1nVRLC
    /// 51WSmVbM8BiAFhLbN9LpdHhds1kUrHF7+wWAjdR8sqAj9otc6HGRM/3qfa2qgh+U
    /// WTEk/3us/rYSi7T7TkMuutRMIa1IkR13uKiW56csEMnbOQpn9rDqwIr5R8nlZP5h
    /// MAU9vdm1DIv567meMqTaVZgR3w7bck2P49AO8lO5ERFpVkErtu/98y+rUy9d789l
    /// +OPuS1NGnxI1YKsNaWJF4uJVuvQuZ1twrhCbGNtVorO2U12+cEq+YtUxj7kmdOC1
    /// qoIRW6y0+UlAc+MbqfL0ziHDOAmcqz1GnROg
    /// =6Bvm
    /// ",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Binary Authorization Attestor Kms
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var keyring = new Gcp.Kms.KeyRing("keyring", new Gcp.Kms.KeyRingArgs
    ///         {
    ///             Location = "global",
    ///         });
    ///         var crypto_key = new Gcp.Kms.CryptoKey("crypto-key", new Gcp.Kms.CryptoKeyArgs
    ///         {
    ///             KeyRing = keyring.Id,
    ///             Purpose = "ASYMMETRIC_SIGN",
    ///             VersionTemplate = new Gcp.Kms.Inputs.CryptoKeyVersionTemplateArgs
    ///             {
    ///                 Algorithm = "RSA_SIGN_PKCS1_4096_SHA512",
    ///             },
    ///         });
    ///         var version = crypto_key.Id.Apply(id =&gt; Gcp.Kms.GetKMSCryptoKeyVersion.InvokeAsync(new Gcp.Kms.GetKMSCryptoKeyVersionArgs
    ///         {
    ///             CryptoKey = id,
    ///         }));
    ///         var note = new Gcp.ContainerAnalysis.Note("note", new Gcp.ContainerAnalysis.NoteArgs
    ///         {
    ///             AttestationAuthority = new Gcp.ContainerAnalysis.Inputs.NoteAttestationAuthorityArgs
    ///             {
    ///                 Hint = new Gcp.ContainerAnalysis.Inputs.NoteAttestationAuthorityHintArgs
    ///                 {
    ///                     HumanReadableName = "Attestor Note",
    ///                 },
    ///             },
    ///         });
    ///         var attestor = new Gcp.BinaryAuthorization.Attestor("attestor", new Gcp.BinaryAuthorization.AttestorArgs
    ///         {
    ///             AttestationAuthorityNote = new Gcp.BinaryAuthorization.Inputs.AttestorAttestationAuthorityNoteArgs
    ///             {
    ///                 NoteReference = note.Name,
    ///                 PublicKeys = 
    ///                 {
    ///                     new Gcp.BinaryAuthorization.Inputs.AttestorAttestationAuthorityNotePublicKeyArgs
    ///                     {
    ///                         Id = version.Apply(version =&gt; version.Id),
    ///                         PkixPublicKey = new Gcp.BinaryAuthorization.Inputs.AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs
    ///                         {
    ///                             PublicKeyPem = version.Apply(version =&gt; version.PublicKeys?[0]?.Pem),
    ///                             SignatureAlgorithm = version.Apply(version =&gt; version.PublicKeys?[0]?.Algorithm),
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Attestor can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:binaryauthorization/attestor:Attestor default projects/{{project}}/attestors/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:binaryauthorization/attestor:Attestor default {{project}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:binaryauthorization/attestor:Attestor default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:binaryauthorization/attestor:Attestor")]
    public partial class Attestor : Pulumi.CustomResource
    {
        /// <summary>
        /// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
        /// Structure is documented below.
        /// </summary>
        [Output("attestationAuthorityNote")]
        public Output<Outputs.AttestorAttestationAuthorityNote> AttestationAuthorityNote { get; private set; } = null!;

        /// <summary>
        /// A descriptive comment. This field may be updated. The field may be
        /// displayed in chooser dialogs.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a Attestor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Attestor(string name, AttestorArgs args, CustomResourceOptions? options = null)
            : base("gcp:binaryauthorization/attestor:Attestor", name, args ?? new AttestorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Attestor(string name, Input<string> id, AttestorState? state = null, CustomResourceOptions? options = null)
            : base("gcp:binaryauthorization/attestor:Attestor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Attestor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Attestor Get(string name, Input<string> id, AttestorState? state = null, CustomResourceOptions? options = null)
        {
            return new Attestor(name, id, state, options);
        }
    }

    public sealed class AttestorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
        /// Structure is documented below.
        /// </summary>
        [Input("attestationAuthorityNote", required: true)]
        public Input<Inputs.AttestorAttestationAuthorityNoteArgs> AttestationAuthorityNote { get; set; } = null!;

        /// <summary>
        /// A descriptive comment. This field may be updated. The field may be
        /// displayed in chooser dialogs.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public AttestorArgs()
        {
        }
    }

    public sealed class AttestorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
        /// Structure is documented below.
        /// </summary>
        [Input("attestationAuthorityNote")]
        public Input<Inputs.AttestorAttestationAuthorityNoteGetArgs>? AttestationAuthorityNote { get; set; }

        /// <summary>
        /// A descriptive comment. This field may be updated. The field may be
        /// displayed in chooser dialogs.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public AttestorState()
        {
        }
    }
}
