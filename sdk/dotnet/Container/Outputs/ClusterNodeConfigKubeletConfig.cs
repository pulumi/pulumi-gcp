// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container.Outputs
{

    [OutputType]
    public sealed class ClusterNodeConfigKubeletConfig
    {
        /// <summary>
        /// Defines a comma-separated allowlist of unsafe sysctls or sysctl patterns which can be set on the Pods. The allowed sysctl groups are `kernel.shm*`, `kernel.msg*`, `kernel.sem`, `fs.mqueue.*`, and `net.*`.
        /// </summary>
        public readonly ImmutableArray<string> AllowedUnsafeSysctls;
        /// <summary>
        /// Defines the maximum number of container log files that can be present for a container. The integer must be between 2 and 10, inclusive.
        /// </summary>
        public readonly int? ContainerLogMaxFiles;
        /// <summary>
        /// Defines the maximum size of the
        /// container log file before it is rotated. Specified as a positive number and a
        /// unit suffix, such as `"100Ki"`, `"10Mi"`. Valid units are "Ki", "Mi", "Gi".
        /// The value must be between `"10Mi"` and `"500Mi"`, inclusive. And the total container log size
        /// (`container_log_max_size` * `container_log_max_files`) cannot exceed 1% of the total storage of the node.
        /// </summary>
        public readonly string? ContainerLogMaxSize;
        /// <summary>
        /// If true, enables CPU CFS quota enforcement for
        /// containers that specify CPU limits.
        /// </summary>
        public readonly bool? CpuCfsQuota;
        /// <summary>
        /// The CPU CFS quota period value. Specified
        /// as a sequence of decimal numbers, each with optional fraction and a unit suffix,
        /// such as `"300ms"`. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m",
        /// "h". The value must be a positive duration.
        /// </summary>
        public readonly string? CpuCfsQuotaPeriod;
        /// <summary>
        /// The CPU management policy on the node. See
        /// [K8S CPU Management Policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/).
        /// One of `"none"` or `"static"`. If unset (or set to the empty string `""`), the API will treat the field as if set to "none".
        /// Prior to the 6.4.0 this field was marked as required. The workaround for the required field
        /// is setting the empty string `""`, which will function identically to not setting this field.
        /// </summary>
        public readonly string? CpuManagerPolicy;
        /// <summary>
        /// Defines the maximum allowed grace period (in seconds) to use when terminating pods in response to a soft eviction threshold being met. The integer must be positive and not exceed 300.
        /// </summary>
        public readonly int? EvictionMaxPodGracePeriodSeconds;
        /// <summary>
        /// Defines a map of signal names to percentage that defines minimum reclaims. It describes the minimum amount of a given resource the kubelet will reclaim when performing a pod eviction. Structure is documented below.
        /// </summary>
        public readonly Outputs.ClusterNodeConfigKubeletConfigEvictionMinimumReclaim? EvictionMinimumReclaim;
        /// <summary>
        /// Defines a map of signal names to quantities or percentage that defines soft eviction thresholds. Structure is documented below.
        /// </summary>
        public readonly Outputs.ClusterNodeConfigKubeletConfigEvictionSoft? EvictionSoft;
        /// <summary>
        /// Defines a map of signal names to durations that defines grace periods for soft eviction thresholds. Each soft eviction threshold must have a corresponding grace period. Structure is documented below.
        /// </summary>
        public readonly Outputs.ClusterNodeConfigKubeletConfigEvictionSoftGracePeriod? EvictionSoftGracePeriod;
        /// <summary>
        /// Defines the percent of disk usage after which image garbage collection is always run. The integer must be between 10 and 85, inclusive.
        /// </summary>
        public readonly int? ImageGcHighThresholdPercent;
        /// <summary>
        /// Defines the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The integer must be between 10 and 85, inclusive.
        /// </summary>
        public readonly int? ImageGcLowThresholdPercent;
        /// <summary>
        /// Defines the maximum age an image can be unused before it is garbage collected. Specified as a sequence of decimal numbers, each with optional fraction and a unit suffix, such as `"300s"`, `"1.5m"`, and `"2h45m"`. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
        /// </summary>
        public readonly string? ImageMaximumGcAge;
        /// <summary>
        /// Defines the minimum age for an unused image before it is garbage collected. Specified as a sequence of decimal numbers, each with optional fraction and a unit suffix, such as `"300s"`, `"1.5m"`. The value cannot be greater than "2m".
        /// </summary>
        public readonly string? ImageMinimumGcAge;
        /// <summary>
        /// Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
        /// </summary>
        public readonly string? InsecureKubeletReadonlyPortEnabled;
        /// <summary>
        /// Set the maximum number of image pulls in parallel. The integer must be between 2 and 5, inclusive.
        /// </summary>
        public readonly int? MaxParallelImagePulls;
        /// <summary>
        /// Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
        /// </summary>
        public readonly int? PodPidsLimit;
        /// <summary>
        /// Defines whether to enable single process OOM killer. If true, the processes in the container will be OOM killed individually instead of as a group.
        /// </summary>
        public readonly bool? SingleProcessOomKill;

        [OutputConstructor]
        private ClusterNodeConfigKubeletConfig(
            ImmutableArray<string> allowedUnsafeSysctls,

            int? containerLogMaxFiles,

            string? containerLogMaxSize,

            bool? cpuCfsQuota,

            string? cpuCfsQuotaPeriod,

            string? cpuManagerPolicy,

            int? evictionMaxPodGracePeriodSeconds,

            Outputs.ClusterNodeConfigKubeletConfigEvictionMinimumReclaim? evictionMinimumReclaim,

            Outputs.ClusterNodeConfigKubeletConfigEvictionSoft? evictionSoft,

            Outputs.ClusterNodeConfigKubeletConfigEvictionSoftGracePeriod? evictionSoftGracePeriod,

            int? imageGcHighThresholdPercent,

            int? imageGcLowThresholdPercent,

            string? imageMaximumGcAge,

            string? imageMinimumGcAge,

            string? insecureKubeletReadonlyPortEnabled,

            int? maxParallelImagePulls,

            int? podPidsLimit,

            bool? singleProcessOomKill)
        {
            AllowedUnsafeSysctls = allowedUnsafeSysctls;
            ContainerLogMaxFiles = containerLogMaxFiles;
            ContainerLogMaxSize = containerLogMaxSize;
            CpuCfsQuota = cpuCfsQuota;
            CpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            CpuManagerPolicy = cpuManagerPolicy;
            EvictionMaxPodGracePeriodSeconds = evictionMaxPodGracePeriodSeconds;
            EvictionMinimumReclaim = evictionMinimumReclaim;
            EvictionSoft = evictionSoft;
            EvictionSoftGracePeriod = evictionSoftGracePeriod;
            ImageGcHighThresholdPercent = imageGcHighThresholdPercent;
            ImageGcLowThresholdPercent = imageGcLowThresholdPercent;
            ImageMaximumGcAge = imageMaximumGcAge;
            ImageMinimumGcAge = imageMinimumGcAge;
            InsecureKubeletReadonlyPortEnabled = insecureKubeletReadonlyPortEnabled;
            MaxParallelImagePulls = maxParallelImagePulls;
            PodPidsLimit = podPidsLimit;
            SingleProcessOomKill = singleProcessOomKill;
        }
    }
}
