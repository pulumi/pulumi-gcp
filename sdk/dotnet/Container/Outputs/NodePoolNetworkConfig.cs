// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container.Outputs
{

    [OutputType]
    public sealed class NodePoolNetworkConfig
    {
        /// <summary>
        /// We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface.
        /// Structure is documented below
        /// </summary>
        public readonly ImmutableArray<Outputs.NodePoolNetworkConfigAdditionalNodeNetworkConfig> AdditionalNodeNetworkConfigs;
        /// <summary>
        /// We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node.
        /// Structure is documented below
        /// </summary>
        public readonly ImmutableArray<Outputs.NodePoolNetworkConfigAdditionalPodNetworkConfig> AdditionalPodNetworkConfigs;
        /// <summary>
        /// Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified.
        /// </summary>
        public readonly bool? CreatePodRange;
        /// <summary>
        /// Whether nodes have internal IP addresses only.
        /// </summary>
        public readonly bool? EnablePrivateNodes;
        /// <summary>
        /// Network bandwidth tier configuration. Structure is documented below.
        /// </summary>
        public readonly Outputs.NodePoolNetworkConfigNetworkPerformanceConfig? NetworkPerformanceConfig;
        /// <summary>
        /// Configuration for node-pool level pod cidr overprovision. If not set, the cluster level setting will be inherited. Structure is documented below.
        /// </summary>
        public readonly Outputs.NodePoolNetworkConfigPodCidrOverprovisionConfig? PodCidrOverprovisionConfig;
        /// <summary>
        /// The IP address range for pod IPs in this node pool. Only applicable if createPodRange is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) to pick a specific range to use.
        /// </summary>
        public readonly string? PodIpv4CidrBlock;
        /// <summary>
        /// The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID.
        /// </summary>
        public readonly string? PodRange;
        /// <summary>
        /// The subnetwork path for the node pool. Format: `projects/{project}/regions/{region}/subnetworks/{subnetwork}`. If the cluster is associated with multiple subnetworks, the subnetwork for the node pool is picked based on the IP utilization during node pool creation and is immutable
        /// </summary>
        public readonly string? Subnetwork;

        [OutputConstructor]
        private NodePoolNetworkConfig(
            ImmutableArray<Outputs.NodePoolNetworkConfigAdditionalNodeNetworkConfig> additionalNodeNetworkConfigs,

            ImmutableArray<Outputs.NodePoolNetworkConfigAdditionalPodNetworkConfig> additionalPodNetworkConfigs,

            bool? createPodRange,

            bool? enablePrivateNodes,

            Outputs.NodePoolNetworkConfigNetworkPerformanceConfig? networkPerformanceConfig,

            Outputs.NodePoolNetworkConfigPodCidrOverprovisionConfig? podCidrOverprovisionConfig,

            string? podIpv4CidrBlock,

            string? podRange,

            string? subnetwork)
        {
            AdditionalNodeNetworkConfigs = additionalNodeNetworkConfigs;
            AdditionalPodNetworkConfigs = additionalPodNetworkConfigs;
            CreatePodRange = createPodRange;
            EnablePrivateNodes = enablePrivateNodes;
            NetworkPerformanceConfig = networkPerformanceConfig;
            PodCidrOverprovisionConfig = podCidrOverprovisionConfig;
            PodIpv4CidrBlock = podIpv4CidrBlock;
            PodRange = podRange;
            Subnetwork = subnetwork;
        }
    }
}
