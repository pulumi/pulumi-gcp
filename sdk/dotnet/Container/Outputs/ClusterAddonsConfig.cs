// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container.Outputs
{

    [OutputType]
    public sealed class ClusterAddonsConfig
    {
        /// <summary>
        /// .
        /// The status of the CloudRun addon. It requires `istio_config` enabled. It is disabled by default.
        /// Set `disabled = false` to enable. This addon can only be enabled at cluster creation time.
        /// </summary>
        public readonly Outputs.ClusterAddonsConfigCloudrunConfig? CloudrunConfig;
        /// <summary>
        /// .
        /// The status of the NodeLocal DNSCache addon. It is disabled by default.
        /// Set `enabled = true` to enable.
        /// </summary>
        public readonly Outputs.ClusterAddonsConfigDnsCacheConfig? DnsCacheConfig;
        /// <summary>
        /// .
        /// Whether this cluster should enable the Google Compute Engine Persistent Disk Container Storage Interface (CSI) Driver. Defaults to disabled; set `enabled = true` to enable.
        /// </summary>
        public readonly Outputs.ClusterAddonsConfigGcePersistentDiskCsiDriverConfig? GcePersistentDiskCsiDriverConfig;
        /// <summary>
        /// The status of the Horizontal Pod Autoscaling
        /// addon, which increases or decreases the number of replica pods a replication controller
        /// has based on the resource usage of the existing pods.
        /// It ensures that a Heapster pod is running in the cluster, which is also used by the Cloud Monitoring service.
        /// It is enabled by default;
        /// set `disabled = true` to disable.
        /// </summary>
        public readonly Outputs.ClusterAddonsConfigHorizontalPodAutoscaling? HorizontalPodAutoscaling;
        /// <summary>
        /// The status of the HTTP (L7) load balancing
        /// controller addon, which makes it easy to set up HTTP load balancers for services in a
        /// cluster. It is enabled by default; set `disabled = true` to disable.
        /// </summary>
        public readonly Outputs.ClusterAddonsConfigHttpLoadBalancing? HttpLoadBalancing;
        /// <summary>
        /// .
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.ClusterAddonsConfigIstioConfig? IstioConfig;
        /// <summary>
        /// Whether we should enable the network policy addon
        /// for the master.  This must be enabled in order to enable network policy for the nodes.
        /// To enable this, you must also define a `network_policy` block,
        /// otherwise nothing will happen.
        /// It can only be disabled if the nodes already do not have network policies enabled.
        /// Defaults to disabled; set `disabled = false` to enable.
        /// </summary>
        public readonly Outputs.ClusterAddonsConfigNetworkPolicyConfig? NetworkPolicyConfig;

        [OutputConstructor]
        private ClusterAddonsConfig(
            Outputs.ClusterAddonsConfigCloudrunConfig? cloudrunConfig,

            Outputs.ClusterAddonsConfigDnsCacheConfig? dnsCacheConfig,

            Outputs.ClusterAddonsConfigGcePersistentDiskCsiDriverConfig? gcePersistentDiskCsiDriverConfig,

            Outputs.ClusterAddonsConfigHorizontalPodAutoscaling? horizontalPodAutoscaling,

            Outputs.ClusterAddonsConfigHttpLoadBalancing? httpLoadBalancing,

            Outputs.ClusterAddonsConfigIstioConfig? istioConfig,

            Outputs.ClusterAddonsConfigNetworkPolicyConfig? networkPolicyConfig)
        {
            CloudrunConfig = cloudrunConfig;
            DnsCacheConfig = dnsCacheConfig;
            GcePersistentDiskCsiDriverConfig = gcePersistentDiskCsiDriverConfig;
            HorizontalPodAutoscaling = horizontalPodAutoscaling;
            HttpLoadBalancing = httpLoadBalancing;
            IstioConfig = istioConfig;
            NetworkPolicyConfig = networkPolicyConfig;
        }
    }
}
