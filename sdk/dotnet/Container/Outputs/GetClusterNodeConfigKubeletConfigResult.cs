// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container.Outputs
{

    [OutputType]
    public sealed class GetClusterNodeConfigKubeletConfigResult
    {
        /// <summary>
        /// Defines a comma-separated allowlist of unsafe sysctls or sysctl patterns which can be set on the Pods.
        /// </summary>
        public readonly ImmutableArray<string> AllowedUnsafeSysctls;
        /// <summary>
        /// Defines the maximum number of container log files that can be present for a container.
        /// </summary>
        public readonly int ContainerLogMaxFiles;
        /// <summary>
        /// Defines the maximum size of the container log file before it is rotated.
        /// </summary>
        public readonly string ContainerLogMaxSize;
        /// <summary>
        /// Enable CPU CFS quota enforcement for containers that specify CPU limits.
        /// </summary>
        public readonly bool CpuCfsQuota;
        /// <summary>
        /// Set the CPU CFS quota period value 'cpu.cfs_period_us'.
        /// </summary>
        public readonly string CpuCfsQuotaPeriod;
        /// <summary>
        /// Control the CPU management policy on the node.
        /// </summary>
        public readonly string CpuManagerPolicy;
        /// <summary>
        /// Defines the maximum allowed grace period (in seconds) to use when terminating pods in response to a soft eviction threshold being met.
        /// </summary>
        public readonly int EvictionMaxPodGracePeriodSeconds;
        /// <summary>
        /// Defines a map of signal names to percentage that defines minimum reclaims. It describes the minimum amount of a given resource the kubelet will reclaim when performing a pod eviction.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodeConfigKubeletConfigEvictionMinimumReclaimResult> EvictionMinimumReclaims;
        /// <summary>
        /// Defines a map of signal names to durations that defines grace periods for soft eviction thresholds. Each soft eviction threshold must have a corresponding grace period.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriodResult> EvictionSoftGracePeriods;
        /// <summary>
        /// Defines a map of signal names to quantities or percentage that defines soft eviction thresholds.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodeConfigKubeletConfigEvictionSoftResult> EvictionSofts;
        /// <summary>
        /// Defines the percent of disk usage after which image garbage collection is always run.
        /// </summary>
        public readonly int ImageGcHighThresholdPercent;
        /// <summary>
        /// Defines the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to.
        /// </summary>
        public readonly int ImageGcLowThresholdPercent;
        /// <summary>
        /// Defines the maximum age an image can be unused before it is garbage collected.
        /// </summary>
        public readonly string ImageMaximumGcAge;
        /// <summary>
        /// Defines the minimum age for an unused image before it is garbage collected.
        /// </summary>
        public readonly string ImageMinimumGcAge;
        /// <summary>
        /// Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
        /// </summary>
        public readonly string InsecureKubeletReadonlyPortEnabled;
        /// <summary>
        /// Set the maximum number of image pulls in parallel.
        /// </summary>
        public readonly int MaxParallelImagePulls;
        /// <summary>
        /// Controls the maximum number of processes allowed to run in a pod.
        /// </summary>
        public readonly int PodPidsLimit;
        /// <summary>
        /// Defines whether to enable single process OOM killer.
        /// </summary>
        public readonly bool SingleProcessOomKill;

        [OutputConstructor]
        private GetClusterNodeConfigKubeletConfigResult(
            ImmutableArray<string> allowedUnsafeSysctls,

            int containerLogMaxFiles,

            string containerLogMaxSize,

            bool cpuCfsQuota,

            string cpuCfsQuotaPeriod,

            string cpuManagerPolicy,

            int evictionMaxPodGracePeriodSeconds,

            ImmutableArray<Outputs.GetClusterNodeConfigKubeletConfigEvictionMinimumReclaimResult> evictionMinimumReclaims,

            ImmutableArray<Outputs.GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriodResult> evictionSoftGracePeriods,

            ImmutableArray<Outputs.GetClusterNodeConfigKubeletConfigEvictionSoftResult> evictionSofts,

            int imageGcHighThresholdPercent,

            int imageGcLowThresholdPercent,

            string imageMaximumGcAge,

            string imageMinimumGcAge,

            string insecureKubeletReadonlyPortEnabled,

            int maxParallelImagePulls,

            int podPidsLimit,

            bool singleProcessOomKill)
        {
            AllowedUnsafeSysctls = allowedUnsafeSysctls;
            ContainerLogMaxFiles = containerLogMaxFiles;
            ContainerLogMaxSize = containerLogMaxSize;
            CpuCfsQuota = cpuCfsQuota;
            CpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            CpuManagerPolicy = cpuManagerPolicy;
            EvictionMaxPodGracePeriodSeconds = evictionMaxPodGracePeriodSeconds;
            EvictionMinimumReclaims = evictionMinimumReclaims;
            EvictionSoftGracePeriods = evictionSoftGracePeriods;
            EvictionSofts = evictionSofts;
            ImageGcHighThresholdPercent = imageGcHighThresholdPercent;
            ImageGcLowThresholdPercent = imageGcLowThresholdPercent;
            ImageMaximumGcAge = imageMaximumGcAge;
            ImageMinimumGcAge = imageMinimumGcAge;
            InsecureKubeletReadonlyPortEnabled = insecureKubeletReadonlyPortEnabled;
            MaxParallelImagePulls = maxParallelImagePulls;
            PodPidsLimit = podPidsLimit;
            SingleProcessOomKill = singleProcessOomKill;
        }
    }
}
