// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container.Outputs
{

    [OutputType]
    public sealed class ClusterMaintenancePolicy
    {
        /// <summary>
        /// Time window specified for daily maintenance operations.
        /// Specify `StartTime` in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM‚Äù,
        /// where HH : \[00-23\] and MM : \[00-59\] GMT. For example:
        /// 
        /// Examples:
        /// </summary>
        public readonly Outputs.ClusterMaintenancePolicyDailyMaintenanceWindow? DailyMaintenanceWindow;
        /// <summary>
        /// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to 20 maintenance exclusions at a time [Maintenance Window and Exclusions](https://cloud.google.com/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions)
        /// </summary>
        public readonly ImmutableArray<Outputs.ClusterMaintenancePolicyMaintenanceExclusion> MaintenanceExclusions;
        /// <summary>
        /// Time window for recurring maintenance operations.
        /// 
        /// Specify `StartTime` and `EndTime` in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) "Zulu" date format.  The start time's date is
        /// the initial date that the window starts, and the end time is used for calculating duration.  Specify `Recurrence` in
        /// [RFC5545](https://tools.ietf.org/html/rfc5545#section-3.8.5.3) RRULE format, to specify when this recurs.
        /// Note that GKE may accept other formats, but will return values in UTC, causing a permanent diff.
        /// 
        /// Examples:
        /// ```
        /// maintenance_policy {
        /// recurring_window {
        /// start_time = "2019-08-01T02:00:00Z"
        /// end_time = "2019-08-01T06:00:00Z"
        /// recurrence = "FREQ=DAILY"
        /// }
        /// }
        /// ```
        /// 
        /// ```
        /// maintenance_policy {
        /// recurring_window {
        /// start_time = "2019-01-01T09:00:00Z"
        /// end_time = "2019-01-01T17:00:00Z"
        /// recurrence = "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR"
        /// }
        /// }
        /// ```
        /// </summary>
        public readonly Outputs.ClusterMaintenancePolicyRecurringWindow? RecurringWindow;

        [OutputConstructor]
        private ClusterMaintenancePolicy(
            Outputs.ClusterMaintenancePolicyDailyMaintenanceWindow? dailyMaintenanceWindow,

            ImmutableArray<Outputs.ClusterMaintenancePolicyMaintenanceExclusion> maintenanceExclusions,

            Outputs.ClusterMaintenancePolicyRecurringWindow? recurringWindow)
        {
            DailyMaintenanceWindow = dailyMaintenanceWindow;
            MaintenanceExclusions = maintenanceExclusions;
            RecurringWindow = recurringWindow;
        }
    }
}
