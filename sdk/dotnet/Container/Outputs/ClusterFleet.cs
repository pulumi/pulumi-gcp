// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container.Outputs
{

    [OutputType]
    public sealed class ClusterFleet
    {
        /// <summary>
        /// The resource name of the fleet Membership resource associated to this cluster with format `//gkehub.googleapis.com/projects/{{project}}/locations/{{location}}/memberships/{{name}}`. See the official doc for [fleet management](https://cloud.google.com/kubernetes-engine/docs/fleets-overview).
        /// </summary>
        public readonly string? Membership;
        /// <summary>
        /// The short name of the fleet membership, extracted from `fleet.0.membership`. You can use this field to configure `membership_id` under google_gkehub_feature_membership.
        /// </summary>
        public readonly string? MembershipId;
        /// <summary>
        /// The location of the fleet membership,  extracted from `fleet.0.membership`. You can use this field to configure `membership_location` under google_gkehub_feature_membership.
        /// </summary>
        public readonly string? MembershipLocation;
        /// <summary>
        /// Whether the cluster has been registered via the fleet API.
        /// </summary>
        public readonly bool? PreRegistered;
        /// <summary>
        /// The name of the Fleet host project where this cluster will be registered.
        /// </summary>
        public readonly string? Project;

        [OutputConstructor]
        private ClusterFleet(
            string? membership,

            string? membershipId,

            string? membershipLocation,

            bool? preRegistered,

            string? project)
        {
            Membership = membership;
            MembershipId = membershipId;
            MembershipLocation = membershipLocation;
            PreRegistered = preRegistered;
            Project = project;
        }
    }
}
