// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container.Outputs
{

    [OutputType]
    public sealed class GetClusterNodePoolResult
    {
        /// <summary>
        /// Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolAutoscalingResult> Autoscalings;
        /// <summary>
        /// The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone. Changing this will force recreation of the resource.
        /// </summary>
        public readonly int InitialNodeCount;
        /// <summary>
        /// The resource URLs of the managed instance groups associated with this node pool.
        /// </summary>
        public readonly ImmutableArray<string> InstanceGroupUrls;
        /// <summary>
        /// List of instance group URLs which have been assigned to this node pool.
        /// </summary>
        public readonly ImmutableArray<string> ManagedInstanceGroupUrls;
        /// <summary>
        /// Node management configuration, wherein auto-repair and auto-upgrade is configured.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolManagementResult> Managements;
        /// <summary>
        /// The maximum number of pods per node in this node pool. Note that this does not work on node pools which are "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
        /// </summary>
        public readonly int MaxPodsPerNode;
        /// <summary>
        /// The name of the cluster.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
        /// </summary>
        public readonly string NamePrefix;
        /// <summary>
        /// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolNetworkConfigResult> NetworkConfigs;
        /// <summary>
        /// The configuration of the nodepool
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolNodeConfigResult> NodeConfigs;
        /// <summary>
        /// The number of nodes per instance group. This field can be used to update the number of nodes per instance group but should not be used alongside autoscaling.
        /// </summary>
        public readonly int NodeCount;
        /// <summary>
        /// The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level node_locations will be used.
        /// </summary>
        public readonly ImmutableArray<string> NodeLocations;
        /// <summary>
        /// Specifies the node placement policy
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolPlacementPolicyResult> PlacementPolicies;
        /// <summary>
        /// Specifies the configuration of queued provisioning
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolQueuedProvisioningResult> QueuedProvisionings;
        /// <summary>
        /// Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is limited to 20.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolUpgradeSettingResult> UpgradeSettings;
        public readonly string Version;

        [OutputConstructor]
        private GetClusterNodePoolResult(
            ImmutableArray<Outputs.GetClusterNodePoolAutoscalingResult> autoscalings,

            int initialNodeCount,

            ImmutableArray<string> instanceGroupUrls,

            ImmutableArray<string> managedInstanceGroupUrls,

            ImmutableArray<Outputs.GetClusterNodePoolManagementResult> managements,

            int maxPodsPerNode,

            string name,

            string namePrefix,

            ImmutableArray<Outputs.GetClusterNodePoolNetworkConfigResult> networkConfigs,

            ImmutableArray<Outputs.GetClusterNodePoolNodeConfigResult> nodeConfigs,

            int nodeCount,

            ImmutableArray<string> nodeLocations,

            ImmutableArray<Outputs.GetClusterNodePoolPlacementPolicyResult> placementPolicies,

            ImmutableArray<Outputs.GetClusterNodePoolQueuedProvisioningResult> queuedProvisionings,

            ImmutableArray<Outputs.GetClusterNodePoolUpgradeSettingResult> upgradeSettings,

            string version)
        {
            Autoscalings = autoscalings;
            InitialNodeCount = initialNodeCount;
            InstanceGroupUrls = instanceGroupUrls;
            ManagedInstanceGroupUrls = managedInstanceGroupUrls;
            Managements = managements;
            MaxPodsPerNode = maxPodsPerNode;
            Name = name;
            NamePrefix = namePrefix;
            NetworkConfigs = networkConfigs;
            NodeConfigs = nodeConfigs;
            NodeCount = nodeCount;
            NodeLocations = nodeLocations;
            PlacementPolicies = placementPolicies;
            QueuedProvisionings = queuedProvisionings;
            UpgradeSettings = upgradeSettings;
            Version = version;
        }
    }
}
