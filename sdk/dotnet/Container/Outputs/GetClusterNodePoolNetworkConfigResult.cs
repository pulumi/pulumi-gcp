// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container.Outputs
{

    [OutputType]
    public sealed class GetClusterNodePoolNetworkConfigResult
    {
        /// <summary>
        /// We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolNetworkConfigAdditionalNodeNetworkConfigResult> AdditionalNodeNetworkConfigs;
        /// <summary>
        /// We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolNetworkConfigAdditionalPodNetworkConfigResult> AdditionalPodNetworkConfigs;
        /// <summary>
        /// Whether to create a new range for pod IPs in this node pool. Defaults are provided for pod_range and pod_ipv4_cidr_block if they are not specified.
        /// </summary>
        public readonly bool CreatePodRange;
        /// <summary>
        /// Whether nodes have internal IP addresses only.
        /// </summary>
        public readonly bool EnablePrivateNodes;
        /// <summary>
        /// Network bandwidth tier configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolNetworkConfigNetworkPerformanceConfigResult> NetworkPerformanceConfigs;
        /// <summary>
        /// Configuration for node-pool level pod cidr overprovision. If not set, the cluster level setting will be inherited
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolNetworkConfigPodCidrOverprovisionConfigResult> PodCidrOverprovisionConfigs;
        /// <summary>
        /// The IP address range for pod IPs in this node pool. Only applicable if create_pod_range is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) to pick a specific range to use.
        /// </summary>
        public readonly string PodIpv4CidrBlock;
        /// <summary>
        /// The ID of the secondary range for pod IPs. If create_pod_range is true, this ID is used for the new range. If create_pod_range is false, uses an existing secondary range with this ID.
        /// </summary>
        public readonly string PodRange;

        [OutputConstructor]
        private GetClusterNodePoolNetworkConfigResult(
            ImmutableArray<Outputs.GetClusterNodePoolNetworkConfigAdditionalNodeNetworkConfigResult> additionalNodeNetworkConfigs,

            ImmutableArray<Outputs.GetClusterNodePoolNetworkConfigAdditionalPodNetworkConfigResult> additionalPodNetworkConfigs,

            bool createPodRange,

            bool enablePrivateNodes,

            ImmutableArray<Outputs.GetClusterNodePoolNetworkConfigNetworkPerformanceConfigResult> networkPerformanceConfigs,

            ImmutableArray<Outputs.GetClusterNodePoolNetworkConfigPodCidrOverprovisionConfigResult> podCidrOverprovisionConfigs,

            string podIpv4CidrBlock,

            string podRange)
        {
            AdditionalNodeNetworkConfigs = additionalNodeNetworkConfigs;
            AdditionalPodNetworkConfigs = additionalPodNetworkConfigs;
            CreatePodRange = createPodRange;
            EnablePrivateNodes = enablePrivateNodes;
            NetworkPerformanceConfigs = networkPerformanceConfigs;
            PodCidrOverprovisionConfigs = podCidrOverprovisionConfigs;
            PodIpv4CidrBlock = podIpv4CidrBlock;
            PodRange = podRange;
        }
    }
}
