// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container
{
    public static class GetAttachedVersions
    {
        /// <summary>
        /// Provides access to available platform versions in a location for a given project.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var uswest = Gcp.Container.GetAttachedVersions.Invoke(new()
        ///     {
        ///         Location = "us-west1",
        ///         Project = "my-project",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstAvailableVersion"] = data.Google_container_attached_versions.Versions.Valid_versions[0],
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAttachedVersionsResult> InvokeAsync(GetAttachedVersionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAttachedVersionsResult>("gcp:container/getAttachedVersions:getAttachedVersions", args ?? new GetAttachedVersionsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides access to available platform versions in a location for a given project.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var uswest = Gcp.Container.GetAttachedVersions.Invoke(new()
        ///     {
        ///         Location = "us-west1",
        ///         Project = "my-project",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstAvailableVersion"] = data.Google_container_attached_versions.Versions.Valid_versions[0],
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAttachedVersionsResult> Invoke(GetAttachedVersionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAttachedVersionsResult>("gcp:container/getAttachedVersions:getAttachedVersions", args ?? new GetAttachedVersionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAttachedVersionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location to list versions for.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// ID of the project to list available platform versions for. Should match the project the cluster will be deployed to.
        /// Defaults to the project that the provider is authenticated with.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetAttachedVersionsArgs()
        {
        }
        public static new GetAttachedVersionsArgs Empty => new GetAttachedVersionsArgs();
    }

    public sealed class GetAttachedVersionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location to list versions for.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// ID of the project to list available platform versions for. Should match the project the cluster will be deployed to.
        /// Defaults to the project that the provider is authenticated with.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public GetAttachedVersionsInvokeArgs()
        {
        }
        public static new GetAttachedVersionsInvokeArgs Empty => new GetAttachedVersionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAttachedVersionsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        public readonly string Project;
        /// <summary>
        /// A list of versions available for use with this project and location.
        /// </summary>
        public readonly ImmutableArray<string> ValidVersions;

        [OutputConstructor]
        private GetAttachedVersionsResult(
            string id,

            string location,

            string project,

            ImmutableArray<string> validVersions)
        {
            Id = id;
            Location = location;
            Project = project;
            ValidVersions = validVersions;
        }
    }
}
