// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container
{
    public static class GetAzureVersions
    {
        /// <summary>
        /// Provides access to available Kubernetes versions in a location for a given project.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var central1b = Gcp.Container.GetAzureVersions.Invoke(new()
        ///     {
        ///         Location = "us-west1",
        ///         Project = "my-project",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstAvailableVersion"] = data.Google_container_azure_versions.Versions.Valid_versions[0],
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAzureVersionsResult> InvokeAsync(GetAzureVersionsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAzureVersionsResult>("gcp:container/getAzureVersions:getAzureVersions", args ?? new GetAzureVersionsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides access to available Kubernetes versions in a location for a given project.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var central1b = Gcp.Container.GetAzureVersions.Invoke(new()
        ///     {
        ///         Location = "us-west1",
        ///         Project = "my-project",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstAvailableVersion"] = data.Google_container_azure_versions.Versions.Valid_versions[0],
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAzureVersionsResult> Invoke(GetAzureVersionsInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAzureVersionsResult>("gcp:container/getAzureVersions:getAzureVersions", args ?? new GetAzureVersionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAzureVersionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location to list versions for.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// ID of the project to list available cluster versions for. Should match the project the cluster will be deployed to.
        /// Defaults to the project that the provider is authenticated with.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetAzureVersionsArgs()
        {
        }
        public static new GetAzureVersionsArgs Empty => new GetAzureVersionsArgs();
    }

    public sealed class GetAzureVersionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location to list versions for.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// ID of the project to list available cluster versions for. Should match the project the cluster will be deployed to.
        /// Defaults to the project that the provider is authenticated with.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetAzureVersionsInvokeArgs()
        {
        }
        public static new GetAzureVersionsInvokeArgs Empty => new GetAzureVersionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAzureVersionsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Location;
        public readonly string? Project;
        /// <summary>
        /// A list of Azure regions that are available for use with this project and GCP location.
        /// </summary>
        public readonly ImmutableArray<string> SupportedRegions;
        /// <summary>
        /// A list of versions available for use with this project and location.
        /// </summary>
        public readonly ImmutableArray<string> ValidVersions;

        [OutputConstructor]
        private GetAzureVersionsResult(
            string id,

            string? location,

            string? project,

            ImmutableArray<string> supportedRegions,

            ImmutableArray<string> validVersions)
        {
            Id = id;
            Location = location;
            Project = project;
            SupportedRegions = supportedRegions;
            ValidVersions = validVersions;
        }
    }
}
