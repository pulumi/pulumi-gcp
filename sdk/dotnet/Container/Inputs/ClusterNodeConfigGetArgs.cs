// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container.Inputs
{

    public sealed class ClusterNodeConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
        /// </summary>
        [Input("bootDiskKmsKey")]
        public Input<string>? BootDiskKmsKey { get; set; }

        /// <summary>
        /// Size of the disk attached to each node, specified
        /// in GB. The smallest allowed disk size is 10GB. Defaults to 100GB.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        /// <summary>
        /// Type of the disk attached to each node
        /// (e.g. 'pd-standard', 'pd-balanced' or 'pd-ssd'). If unspecified, the default disk type is 'pd-standard'
        /// </summary>
        [Input("diskType")]
        public Input<string>? DiskType { get; set; }

        /// <summary>
        /// Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk. Structure is documented below.
        /// </summary>
        [Input("ephemeralStorageConfig")]
        public Input<Inputs.ClusterNodeConfigEphemeralStorageConfigGetArgs>? EphemeralStorageConfig { get; set; }

        /// <summary>
        /// Parameters for the Google Container Filesystem (GCFS).
        /// If unspecified, GCFS will not be enabled on the node pool. When enabling this feature you must specify `image_type = "COS_CONTAINERD"` and `node_version` from GKE versions 1.19 or later to use it.
        /// For GKE versions 1.19, 1.20, and 1.21, the recommended minimum `node_version` would be 1.19.15-gke.1300, 1.20.11-gke.1300, and 1.21.5-gke.1300 respectively.
        /// A `machine_type` that has more than 16 GiB of memory is also recommended.
        /// GCFS must be enabled in order to use [image streaming](https://cloud.google.com/kubernetes-engine/docs/how-to/image-streaming).
        /// Structure is documented below.
        /// </summary>
        [Input("gcfsConfig")]
        public Input<Inputs.ClusterNodeConfigGcfsConfigGetArgs>? GcfsConfig { get; set; }

        [Input("guestAccelerators")]
        private InputList<Inputs.ClusterNodeConfigGuestAcceleratorGetArgs>? _guestAccelerators;
        public InputList<Inputs.ClusterNodeConfigGuestAcceleratorGetArgs> GuestAccelerators
        {
            get => _guestAccelerators ?? (_guestAccelerators = new InputList<Inputs.ClusterNodeConfigGuestAcceleratorGetArgs>());
            set => _guestAccelerators = value;
        }

        /// <summary>
        /// Google Virtual NIC (gVNIC) is a virtual network interface.
        /// Installing the gVNIC driver allows for more efficient traffic transmission across the Google network infrastructure.
        /// gVNIC is an alternative to the virtIO-based ethernet driver. GKE nodes must use a Container-Optimized OS node image.
        /// GKE node version 1.15.11-gke.15 or later
        /// Structure is documented below.
        /// </summary>
        [Input("gvnic")]
        public Input<Inputs.ClusterNodeConfigGvnicGetArgs>? Gvnic { get; set; }

        /// <summary>
        /// The image type to use for this node. Note that changing the image type
        /// will delete and recreate all nodes in the node pool.
        /// </summary>
        [Input("imageType")]
        public Input<string>? ImageType { get; set; }

        /// <summary>
        /// Kubelet configuration, currently supported attributes can be found [here](https://cloud.google.com/sdk/gcloud/reference/beta/container/node-pools/create#--system-config-from-file).
        /// Structure is documented below.
        /// </summary>
        [Input("kubeletConfig")]
        public Input<Inputs.ClusterNodeConfigKubeletConfigGetArgs>? KubeletConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The Kubernetes labels (key/value pairs) to be applied to each node. The kubernetes.io/ and k8s.io/ prefixes are
        /// reserved by Kubernetes Core components and cannot be specified.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Linux node configuration, currently supported attributes can be found [here](https://cloud.google.com/sdk/gcloud/reference/beta/container/node-pools/create#--system-config-from-file).
        /// Note that validations happen all server side. All attributes are optional.
        /// Structure is documented below.
        /// </summary>
        [Input("linuxNodeConfig")]
        public Input<Inputs.ClusterNodeConfigLinuxNodeConfigGetArgs>? LinuxNodeConfig { get; set; }

        /// <summary>
        /// The amount of local SSD disks that will be
        /// attached to each cluster node. Defaults to 0.
        /// </summary>
        [Input("localSsdCount")]
        public Input<int>? LocalSsdCount { get; set; }

        /// <summary>
        /// Parameter for specifying the type of logging agent used in a node pool. This will override any cluster-wide default value. Valid values include DEFAULT and MAX_THROUGHPUT. See [Increasing logging agent throughput](https://cloud.google.com/stackdriver/docs/solutions/gke/managing-logs#throughput) for more information.
        /// </summary>
        [Input("loggingVariant")]
        public Input<string>? LoggingVariant { get; set; }

        /// <summary>
        /// The name of a Google Compute Engine machine type.
        /// Defaults to `e2-medium`. To create a custom machine type, value should be set as specified
        /// [here](https://cloud.google.com/compute/docs/reference/latest/instances#machineType).
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Minimum CPU platform to be used by this instance.
        /// The instance may be scheduled on the specified or newer CPU platform. Applicable
        /// values are the friendly names of CPU platforms, such as `Intel Haswell`. See the
        /// [official documentation](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
        /// for more information.
        /// </summary>
        [Input("minCpuPlatform")]
        public Input<string>? MinCpuPlatform { get; set; }

        /// <summary>
        /// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
        /// </summary>
        [Input("nodeGroup")]
        public Input<string>? NodeGroup { get; set; }

        [Input("oauthScopes")]
        private InputList<string>? _oauthScopes;

        /// <summary>
        /// The set of Google API scopes to be made available
        /// on all of the node VMs under the "default" service account.
        /// Use the "https://www.googleapis.com/auth/cloud-platform" scope to grant access to all APIs. It is recommended that you set `service_account` to a non-default service account and grant IAM roles to that service account for only the resources that it needs.
        /// </summary>
        public InputList<string> OauthScopes
        {
            get => _oauthScopes ?? (_oauthScopes = new InputList<string>());
            set => _oauthScopes = value;
        }

        /// <summary>
        /// A boolean that represents whether or not the underlying node VMs
        /// are preemptible. See the [official documentation](https://cloud.google.com/container-engine/docs/preemptible-vm)
        /// for more information. Defaults to false.
        /// </summary>
        [Input("preemptible")]
        public Input<bool>? Preemptible { get; set; }

        /// <summary>
        /// The configuration of the desired reservation which instances could take capacity from. Structure is documented below.
        /// </summary>
        [Input("reservationAffinity")]
        public Input<Inputs.ClusterNodeConfigReservationAffinityGetArgs>? ReservationAffinity { get; set; }

        [Input("resourceLabels")]
        private InputMap<string>? _resourceLabels;

        /// <summary>
        /// The GCP labels (key/value pairs) to be applied to each node. Refer [here](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-managing-labels)
        /// for how these labels are applied to clusters, node pools and nodes.
        /// </summary>
        public InputMap<string> ResourceLabels
        {
            get => _resourceLabels ?? (_resourceLabels = new InputMap<string>());
            set => _resourceLabels = value;
        }

        /// <summary>
        /// ) [GKE Sandbox](https://cloud.google.com/kubernetes-engine/docs/how-to/sandbox-pods) configuration. When enabling this feature you must specify `image_type = "COS_CONTAINERD"` and `node_version = "1.12.7-gke.17"` or later to use it.
        /// Structure is documented below.
        /// </summary>
        [Input("sandboxConfig")]
        public Input<Inputs.ClusterNodeConfigSandboxConfigGetArgs>? SandboxConfig { get; set; }

        /// <summary>
        /// The service account to be used by the Node VMs.
        /// If not specified, the "default" service account is used.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// Shielded Instance options. Structure is documented below.
        /// </summary>
        [Input("shieldedInstanceConfig")]
        public Input<Inputs.ClusterNodeConfigShieldedInstanceConfigGetArgs>? ShieldedInstanceConfig { get; set; }

        /// <summary>
        /// A boolean that represents whether the underlying node VMs are spot.
        /// See the [official documentation](https://cloud.google.com/kubernetes-engine/docs/concepts/spot-vms)
        /// for more information. Defaults to false.
        /// </summary>
        [Input("spot")]
        public Input<bool>? Spot { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The list of instance tags applied to all nodes. Tags are used to identify
        /// valid sources or targets for network firewalls.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.ClusterNodeConfigTaintGetArgs>? _taints;
        public InputList<Inputs.ClusterNodeConfigTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.ClusterNodeConfigTaintGetArgs>());
            set => _taints = value;
        }

        /// <summary>
        /// Metadata configuration to expose to workloads on the node pool.
        /// Structure is documented below.
        /// </summary>
        [Input("workloadMetadataConfig")]
        public Input<Inputs.ClusterNodeConfigWorkloadMetadataConfigGetArgs>? WorkloadMetadataConfig { get; set; }

        public ClusterNodeConfigGetArgs()
        {
        }
        public static new ClusterNodeConfigGetArgs Empty => new ClusterNodeConfigGetArgs();
    }
}
