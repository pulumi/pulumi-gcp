// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container.Inputs
{

    public sealed class AwsClusterAuthorizationGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("adminGroups")]
        private InputList<Inputs.AwsClusterAuthorizationAdminGroupGetArgs>? _adminGroups;

        /// <summary>
        /// Groups of users that can perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the `cluster-admin` ClusterRole to the groups. Up to ten admin groups can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
        /// </summary>
        public InputList<Inputs.AwsClusterAuthorizationAdminGroupGetArgs> AdminGroups
        {
            get => _adminGroups ?? (_adminGroups = new InputList<Inputs.AwsClusterAuthorizationAdminGroupGetArgs>());
            set => _adminGroups = value;
        }

        [Input("adminUsers", required: true)]
        private InputList<Inputs.AwsClusterAuthorizationAdminUserGetArgs>? _adminUsers;

        /// <summary>
        /// Users to perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the `cluster-admin` ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
        /// </summary>
        public InputList<Inputs.AwsClusterAuthorizationAdminUserGetArgs> AdminUsers
        {
            get => _adminUsers ?? (_adminUsers = new InputList<Inputs.AwsClusterAuthorizationAdminUserGetArgs>());
            set => _adminUsers = value;
        }

        public AwsClusterAuthorizationGetArgs()
        {
        }
        public static new AwsClusterAuthorizationGetArgs Empty => new AwsClusterAuthorizationGetArgs();
    }
}
