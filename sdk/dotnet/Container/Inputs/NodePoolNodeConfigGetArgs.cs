// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container.Inputs
{

    public sealed class NodePoolNodeConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies options for controlling advanced machine features.
        /// </summary>
        [Input("advancedMachineFeatures")]
        public Input<Inputs.NodePoolNodeConfigAdvancedMachineFeaturesGetArgs>? AdvancedMachineFeatures { get; set; }

        /// <summary>
        /// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool.
        /// </summary>
        [Input("bootDiskKmsKey")]
        public Input<string>? BootDiskKmsKey { get; set; }

        /// <summary>
        /// Configuration for Confidential Nodes feature. Structure is documented below.
        /// </summary>
        [Input("confidentialNodes")]
        public Input<Inputs.NodePoolNodeConfigConfidentialNodesGetArgs>? ConfidentialNodes { get; set; }

        /// <summary>
        /// Parameters for containerd configuration.
        /// </summary>
        [Input("containerdConfig")]
        public Input<Inputs.NodePoolNodeConfigContainerdConfigGetArgs>? ContainerdConfig { get; set; }

        /// <summary>
        /// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        /// <summary>
        /// Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
        /// </summary>
        [Input("diskType")]
        public Input<string>? DiskType { get; set; }

        [Input("effectiveTaints")]
        private InputList<Inputs.NodePoolNodeConfigEffectiveTaintGetArgs>? _effectiveTaints;

        /// <summary>
        /// List of kubernetes taints applied to each node.
        /// </summary>
        public InputList<Inputs.NodePoolNodeConfigEffectiveTaintGetArgs> EffectiveTaints
        {
            get => _effectiveTaints ?? (_effectiveTaints = new InputList<Inputs.NodePoolNodeConfigEffectiveTaintGetArgs>());
            set => _effectiveTaints = value;
        }

        /// <summary>
        /// If enabled boot disks are configured with confidential mode.
        /// </summary>
        [Input("enableConfidentialStorage")]
        public Input<bool>? EnableConfidentialStorage { get; set; }

        /// <summary>
        /// Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
        /// </summary>
        [Input("ephemeralStorageConfig")]
        public Input<Inputs.NodePoolNodeConfigEphemeralStorageConfigGetArgs>? EphemeralStorageConfig { get; set; }

        /// <summary>
        /// Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
        /// </summary>
        [Input("ephemeralStorageLocalSsdConfig")]
        public Input<Inputs.NodePoolNodeConfigEphemeralStorageLocalSsdConfigGetArgs>? EphemeralStorageLocalSsdConfig { get; set; }

        /// <summary>
        /// Enable or disable NCCL Fast Socket in the node pool.
        /// </summary>
        [Input("fastSocket")]
        public Input<Inputs.NodePoolNodeConfigFastSocketGetArgs>? FastSocket { get; set; }

        /// <summary>
        /// GCFS configuration for this node.
        /// </summary>
        [Input("gcfsConfig")]
        public Input<Inputs.NodePoolNodeConfigGcfsConfigGetArgs>? GcfsConfig { get; set; }

        [Input("guestAccelerators")]
        private InputList<Inputs.NodePoolNodeConfigGuestAcceleratorGetArgs>? _guestAccelerators;

        /// <summary>
        /// List of the type and count of accelerator cards attached to the instance.
        /// </summary>
        public InputList<Inputs.NodePoolNodeConfigGuestAcceleratorGetArgs> GuestAccelerators
        {
            get => _guestAccelerators ?? (_guestAccelerators = new InputList<Inputs.NodePoolNodeConfigGuestAcceleratorGetArgs>());
            set => _guestAccelerators = value;
        }

        /// <summary>
        /// Enable or disable gvnic in the node pool.
        /// </summary>
        [Input("gvnic")]
        public Input<Inputs.NodePoolNodeConfigGvnicGetArgs>? Gvnic { get; set; }

        /// <summary>
        /// The maintenance policy for the hosts on which the GKE VMs run on.
        /// </summary>
        [Input("hostMaintenancePolicy")]
        public Input<Inputs.NodePoolNodeConfigHostMaintenancePolicyGetArgs>? HostMaintenancePolicy { get; set; }

        /// <summary>
        /// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
        /// </summary>
        [Input("imageType")]
        public Input<string>? ImageType { get; set; }

        /// <summary>
        /// Node kubelet configs.
        /// </summary>
        [Input("kubeletConfig")]
        public Input<Inputs.NodePoolNodeConfigKubeletConfigGetArgs>? KubeletConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Parameters that can be configured on Linux nodes.
        /// </summary>
        [Input("linuxNodeConfig")]
        public Input<Inputs.NodePoolNodeConfigLinuxNodeConfigGetArgs>? LinuxNodeConfig { get; set; }

        /// <summary>
        /// Parameters for raw-block local NVMe SSDs.
        /// </summary>
        [Input("localNvmeSsdBlockConfig")]
        public Input<Inputs.NodePoolNodeConfigLocalNvmeSsdBlockConfigGetArgs>? LocalNvmeSsdBlockConfig { get; set; }

        /// <summary>
        /// The number of local SSD disks to be attached to the node.
        /// </summary>
        [Input("localSsdCount")]
        public Input<int>? LocalSsdCount { get; set; }

        /// <summary>
        /// Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.
        /// </summary>
        [Input("loggingVariant")]
        public Input<string>? LoggingVariant { get; set; }

        /// <summary>
        /// The name of a Google Compute Engine machine type.
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// The metadata key/value pairs assigned to instances in the cluster.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform.
        /// </summary>
        [Input("minCpuPlatform")]
        public Input<string>? MinCpuPlatform { get; set; }

        /// <summary>
        /// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on sole tenant nodes.
        /// </summary>
        [Input("nodeGroup")]
        public Input<string>? NodeGroup { get; set; }

        [Input("oauthScopes")]
        private InputList<string>? _oauthScopes;

        /// <summary>
        /// The set of Google API scopes to be made available on all of the node VMs.
        /// </summary>
        public InputList<string> OauthScopes
        {
            get => _oauthScopes ?? (_oauthScopes = new InputList<string>());
            set => _oauthScopes = value;
        }

        /// <summary>
        /// Whether the nodes are created as preemptible VM instances.
        /// </summary>
        [Input("preemptible")]
        public Input<bool>? Preemptible { get; set; }

        /// <summary>
        /// The reservation affinity configuration for the node pool.
        /// </summary>
        [Input("reservationAffinity")]
        public Input<Inputs.NodePoolNodeConfigReservationAffinityGetArgs>? ReservationAffinity { get; set; }

        [Input("resourceLabels")]
        private InputMap<string>? _resourceLabels;

        /// <summary>
        /// The GCE resource labels (a map of key/value pairs) to be applied to the node pool.
        /// </summary>
        public InputMap<string> ResourceLabels
        {
            get => _resourceLabels ?? (_resourceLabels = new InputMap<string>());
            set => _resourceLabels = value;
        }

        [Input("resourceManagerTags")]
        private InputMap<object>? _resourceManagerTags;

        /// <summary>
        /// A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
        /// </summary>
        public InputMap<object> ResourceManagerTags
        {
            get => _resourceManagerTags ?? (_resourceManagerTags = new InputMap<object>());
            set => _resourceManagerTags = value;
        }

        /// <summary>
        /// Sandbox configuration for this node.
        /// </summary>
        [Input("sandboxConfig")]
        public Input<Inputs.NodePoolNodeConfigSandboxConfigGetArgs>? SandboxConfig { get; set; }

        [Input("secondaryBootDisks")]
        private InputList<Inputs.NodePoolNodeConfigSecondaryBootDiskGetArgs>? _secondaryBootDisks;

        /// <summary>
        /// Secondary boot disks for preloading data or container images.
        /// </summary>
        public InputList<Inputs.NodePoolNodeConfigSecondaryBootDiskGetArgs> SecondaryBootDisks
        {
            get => _secondaryBootDisks ?? (_secondaryBootDisks = new InputList<Inputs.NodePoolNodeConfigSecondaryBootDiskGetArgs>());
            set => _secondaryBootDisks = value;
        }

        /// <summary>
        /// The Google Cloud Platform Service Account to be used by the node VMs.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// Shielded Instance options.
        /// </summary>
        [Input("shieldedInstanceConfig")]
        public Input<Inputs.NodePoolNodeConfigShieldedInstanceConfigGetArgs>? ShieldedInstanceConfig { get; set; }

        /// <summary>
        /// Node affinity options for sole tenant node pools.
        /// </summary>
        [Input("soleTenantConfig")]
        public Input<Inputs.NodePoolNodeConfigSoleTenantConfigGetArgs>? SoleTenantConfig { get; set; }

        /// <summary>
        /// Whether the nodes are created as spot VM instances.
        /// </summary>
        [Input("spot")]
        public Input<bool>? Spot { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The list of instance tags applied to all nodes.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.NodePoolNodeConfigTaintGetArgs>? _taints;

        /// <summary>
        /// List of Kubernetes taints to be applied to each node.
        /// </summary>
        public InputList<Inputs.NodePoolNodeConfigTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.NodePoolNodeConfigTaintGetArgs>());
            set => _taints = value;
        }

        /// <summary>
        /// The workload metadata configuration for this node.
        /// </summary>
        [Input("workloadMetadataConfig")]
        public Input<Inputs.NodePoolNodeConfigWorkloadMetadataConfigGetArgs>? WorkloadMetadataConfig { get; set; }

        public NodePoolNodeConfigGetArgs()
        {
        }
        public static new NodePoolNodeConfigGetArgs Empty => new NodePoolNodeConfigGetArgs();
    }
}
