// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container.Inputs
{

    public sealed class NodePoolNodeConfigKubeletConfigGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedUnsafeSysctls")]
        private InputList<string>? _allowedUnsafeSysctls;

        /// <summary>
        /// Defines a comma-separated allowlist of unsafe sysctls or sysctl patterns which can be set on the Pods.
        /// </summary>
        public InputList<string> AllowedUnsafeSysctls
        {
            get => _allowedUnsafeSysctls ?? (_allowedUnsafeSysctls = new InputList<string>());
            set => _allowedUnsafeSysctls = value;
        }

        /// <summary>
        /// Defines the maximum number of container log files that can be present for a container.
        /// </summary>
        [Input("containerLogMaxFiles")]
        public Input<int>? ContainerLogMaxFiles { get; set; }

        /// <summary>
        /// Defines the maximum size of the container log file before it is rotated.
        /// </summary>
        [Input("containerLogMaxSize")]
        public Input<string>? ContainerLogMaxSize { get; set; }

        /// <summary>
        /// Enable CPU CFS quota enforcement for containers that specify CPU limits.
        /// </summary>
        [Input("cpuCfsQuota")]
        public Input<bool>? CpuCfsQuota { get; set; }

        /// <summary>
        /// Set the CPU CFS quota period value 'cpu.cfs_period_us'.
        /// </summary>
        [Input("cpuCfsQuotaPeriod")]
        public Input<string>? CpuCfsQuotaPeriod { get; set; }

        /// <summary>
        /// Control the CPU management policy on the node.
        /// </summary>
        [Input("cpuManagerPolicy")]
        public Input<string>? CpuManagerPolicy { get; set; }

        /// <summary>
        /// Defines the maximum allowed grace period (in seconds) to use when terminating pods in response to a soft eviction threshold being met.
        /// </summary>
        [Input("evictionMaxPodGracePeriodSeconds")]
        public Input<int>? EvictionMaxPodGracePeriodSeconds { get; set; }

        /// <summary>
        /// Defines a map of signal names to percentage that defines minimum reclaims. It describes the minimum amount of a given resource the kubelet will reclaim when performing a pod eviction.
        /// </summary>
        [Input("evictionMinimumReclaim")]
        public Input<Inputs.NodePoolNodeConfigKubeletConfigEvictionMinimumReclaimGetArgs>? EvictionMinimumReclaim { get; set; }

        /// <summary>
        /// Defines a map of signal names to quantities or percentage that defines soft eviction thresholds.
        /// </summary>
        [Input("evictionSoft")]
        public Input<Inputs.NodePoolNodeConfigKubeletConfigEvictionSoftGetArgs>? EvictionSoft { get; set; }

        /// <summary>
        /// Defines a map of signal names to durations that defines grace periods for soft eviction thresholds. Each soft eviction threshold must have a corresponding grace period.
        /// </summary>
        [Input("evictionSoftGracePeriod")]
        public Input<Inputs.NodePoolNodeConfigKubeletConfigEvictionSoftGracePeriodGetArgs>? EvictionSoftGracePeriod { get; set; }

        /// <summary>
        /// Defines the percent of disk usage after which image garbage collection is always run.
        /// </summary>
        [Input("imageGcHighThresholdPercent")]
        public Input<int>? ImageGcHighThresholdPercent { get; set; }

        /// <summary>
        /// Defines the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to.
        /// </summary>
        [Input("imageGcLowThresholdPercent")]
        public Input<int>? ImageGcLowThresholdPercent { get; set; }

        /// <summary>
        /// Defines the maximum age an image can be unused before it is garbage collected.
        /// </summary>
        [Input("imageMaximumGcAge")]
        public Input<string>? ImageMaximumGcAge { get; set; }

        /// <summary>
        /// Defines the minimum age for an unused image before it is garbage collected.
        /// </summary>
        [Input("imageMinimumGcAge")]
        public Input<string>? ImageMinimumGcAge { get; set; }

        /// <summary>
        /// Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
        /// </summary>
        [Input("insecureKubeletReadonlyPortEnabled")]
        public Input<string>? InsecureKubeletReadonlyPortEnabled { get; set; }

        /// <summary>
        /// Set the maximum number of image pulls in parallel.
        /// </summary>
        [Input("maxParallelImagePulls")]
        public Input<int>? MaxParallelImagePulls { get; set; }

        /// <summary>
        /// Controls the maximum number of processes allowed to run in a pod.
        /// </summary>
        [Input("podPidsLimit")]
        public Input<int>? PodPidsLimit { get; set; }

        /// <summary>
        /// Defines whether to enable single process OOM killer.
        /// </summary>
        [Input("singleProcessOomKill")]
        public Input<bool>? SingleProcessOomKill { get; set; }

        public NodePoolNodeConfigKubeletConfigGetArgs()
        {
        }
        public static new NodePoolNodeConfigKubeletConfigGetArgs Empty => new NodePoolNodeConfigKubeletConfigGetArgs();
    }
}
