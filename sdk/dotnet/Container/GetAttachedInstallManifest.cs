// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Container
{
    public static class GetAttachedInstallManifest
    {
        /// <summary>
        /// Provides access to available platform versions in a location for a given project.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var manifest = Gcp.Container.GetAttachedInstallManifest.Invoke(new()
        ///     {
        ///         Location = "us-west1",
        ///         Project = "my-project",
        ///         ClusterId = "test-cluster-1",
        ///         PlatformVersion = "1.25.0-gke.1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["installManifest"] = manifest.Apply(getAttachedInstallManifestResult =&gt; getAttachedInstallManifestResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAttachedInstallManifestResult> InvokeAsync(GetAttachedInstallManifestArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAttachedInstallManifestResult>("gcp:container/getAttachedInstallManifest:getAttachedInstallManifest", args ?? new GetAttachedInstallManifestArgs(), options.WithDefaults());

        /// <summary>
        /// Provides access to available platform versions in a location for a given project.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var manifest = Gcp.Container.GetAttachedInstallManifest.Invoke(new()
        ///     {
        ///         Location = "us-west1",
        ///         Project = "my-project",
        ///         ClusterId = "test-cluster-1",
        ///         PlatformVersion = "1.25.0-gke.1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["installManifest"] = manifest.Apply(getAttachedInstallManifestResult =&gt; getAttachedInstallManifestResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAttachedInstallManifestResult> Invoke(GetAttachedInstallManifestInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAttachedInstallManifestResult>("gcp:container/getAttachedInstallManifest:getAttachedInstallManifest", args ?? new GetAttachedInstallManifestInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAttachedInstallManifestArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name that will be used when creating the attached cluster resource.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// The location to list versions for.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The platform version for the cluster. A list of valid values can be retrieved using the `gcp.container.getAttachedVersions` data source.
        /// </summary>
        [Input("platformVersion", required: true)]
        public string PlatformVersion { get; set; } = null!;

        /// <summary>
        /// ID of the project to list available platform versions for. Should match the project the cluster will be deployed to.
        /// Defaults to the project that the provider is authenticated with.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetAttachedInstallManifestArgs()
        {
        }
        public static new GetAttachedInstallManifestArgs Empty => new GetAttachedInstallManifestArgs();
    }

    public sealed class GetAttachedInstallManifestInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name that will be used when creating the attached cluster resource.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The location to list versions for.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The platform version for the cluster. A list of valid values can be retrieved using the `gcp.container.getAttachedVersions` data source.
        /// </summary>
        [Input("platformVersion", required: true)]
        public Input<string> PlatformVersion { get; set; } = null!;

        /// <summary>
        /// ID of the project to list available platform versions for. Should match the project the cluster will be deployed to.
        /// Defaults to the project that the provider is authenticated with.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public GetAttachedInstallManifestInvokeArgs()
        {
        }
        public static new GetAttachedInstallManifestInvokeArgs Empty => new GetAttachedInstallManifestInvokeArgs();
    }


    [OutputType]
    public sealed class GetAttachedInstallManifestResult
    {
        public readonly string ClusterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        /// <summary>
        /// A string with the YAML manifest that needs to be applied to the cluster.
        /// </summary>
        public readonly string Manifest;
        public readonly string PlatformVersion;
        public readonly string Project;

        [OutputConstructor]
        private GetAttachedInstallManifestResult(
            string clusterId,

            string id,

            string location,

            string manifest,

            string platformVersion,

            string project)
        {
            ClusterId = clusterId;
            Id = id;
            Location = location;
            Manifest = manifest;
            PlatformVersion = platformVersion;
            Project = project;
        }
    }
}
