// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudDomains
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Clouddomains Registration Full
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myRegistration = new Gcp.CloudDomains.Registration("my_registration", new()
    ///     {
    ///         DomainName = "example-domain.com",
    ///         Location = "global",
    ///         Labels = 
    ///         {
    ///             { "labelkey", "labelvalue" },
    ///         },
    ///         YearlyPrice = new Gcp.CloudDomains.Inputs.RegistrationYearlyPriceArgs
    ///         {
    ///             CurrencyCode = "USD",
    ///             Units = "12",
    ///         },
    ///         DnsSettings = new Gcp.CloudDomains.Inputs.RegistrationDnsSettingsArgs
    ///         {
    ///             CustomDns = new Gcp.CloudDomains.Inputs.RegistrationDnsSettingsCustomDnsArgs
    ///             {
    ///                 NameServers = new[]
    ///                 {
    ///                     "ns-cloud-a1.googledomains.com.",
    ///                     "ns-cloud-a2.googledomains.com.",
    ///                     "ns-cloud-a3.googledomains.com.",
    ///                     "ns-cloud-a4.googledomains.com.",
    ///                 },
    ///             },
    ///         },
    ///         ContactSettings = new Gcp.CloudDomains.Inputs.RegistrationContactSettingsArgs
    ///         {
    ///             Privacy = "REDACTED_CONTACT_DATA",
    ///             RegistrantContact = new Gcp.CloudDomains.Inputs.RegistrationContactSettingsRegistrantContactArgs
    ///             {
    ///                 PhoneNumber = "+12345000000",
    ///                 Email = "user@example.com",
    ///                 PostalAddress = new Gcp.CloudDomains.Inputs.RegistrationContactSettingsRegistrantContactPostalAddressArgs
    ///                 {
    ///                     RegionCode = "US",
    ///                     PostalCode = "95050",
    ///                     AdministrativeArea = "CA",
    ///                     Locality = "Example City",
    ///                     AddressLines = new[]
    ///                     {
    ///                         "1234 Example street",
    ///                     },
    ///                     Recipients = new[]
    ///                     {
    ///                         "example recipient",
    ///                     },
    ///                 },
    ///             },
    ///             AdminContact = new Gcp.CloudDomains.Inputs.RegistrationContactSettingsAdminContactArgs
    ///             {
    ///                 PhoneNumber = "+12345000000",
    ///                 Email = "user@example.com",
    ///                 PostalAddress = new Gcp.CloudDomains.Inputs.RegistrationContactSettingsAdminContactPostalAddressArgs
    ///                 {
    ///                     RegionCode = "US",
    ///                     PostalCode = "95050",
    ///                     AdministrativeArea = "CA",
    ///                     Locality = "Example City",
    ///                     AddressLines = new[]
    ///                     {
    ///                         "1234 Example street",
    ///                     },
    ///                     Recipients = new[]
    ///                     {
    ///                         "example recipient",
    ///                     },
    ///                 },
    ///             },
    ///             TechnicalContact = new Gcp.CloudDomains.Inputs.RegistrationContactSettingsTechnicalContactArgs
    ///             {
    ///                 PhoneNumber = "+12345000000",
    ///                 Email = "user@example.com",
    ///                 PostalAddress = new Gcp.CloudDomains.Inputs.RegistrationContactSettingsTechnicalContactPostalAddressArgs
    ///                 {
    ///                     RegionCode = "US",
    ///                     PostalCode = "95050",
    ///                     AdministrativeArea = "CA",
    ///                     Locality = "Example City",
    ///                     AddressLines = new[]
    ///                     {
    ///                         "1234 Example street",
    ///                     },
    ///                     Recipients = new[]
    ///                     {
    ///                         "example recipient",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Registration can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/registrations/{{domain_name}}`
    /// 
    /// * `{{project}}/{{location}}/{{domain_name}}`
    /// 
    /// * `{{location}}/{{domain_name}}`
    /// 
    /// When using the `pulumi import` command, Registration can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:clouddomains/registration:Registration default projects/{{project}}/locations/{{location}}/registrations/{{domain_name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:clouddomains/registration:Registration default {{project}}/{{location}}/{{domain_name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:clouddomains/registration:Registration default {{location}}/{{domain_name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:clouddomains/registration:Registration")]
    public partial class Registration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
        /// </summary>
        [Output("contactNotices")]
        public Output<ImmutableArray<string>> ContactNotices { get; private set; } = null!;

        /// <summary>
        /// Required. Settings for contact information linked to the Registration.
        /// Structure is documented below.
        /// </summary>
        [Output("contactSettings")]
        public Output<Outputs.RegistrationContactSettings> ContactSettings { get; private set; } = null!;

        /// <summary>
        /// Output only. Time at which the automation was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Settings controlling the DNS configuration of the Registration.
        /// Structure is documented below.
        /// </summary>
        [Output("dnsSettings")]
        public Output<Outputs.RegistrationDnsSettings?> DnsSettings { get; private set; } = null!;

        /// <summary>
        /// Required. The domain name. Unicode domain names must be expressed in Punycode format.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
        /// </summary>
        [Output("domainNotices")]
        public Output<ImmutableArray<string>> DomainNotices { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Output only. Time at which the automation was updated.
        /// </summary>
        [Output("expireTime")]
        public Output<string> ExpireTime { get; private set; } = null!;

        /// <summary>
        /// Output only. The set of issues with the Registration that require attention.
        /// </summary>
        [Output("issues")]
        public Output<ImmutableArray<string>> Issues { get; private set; } = null!;

        /// <summary>
        /// Set of labels associated with the Registration.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location for the resource
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Settings for management of the Registration, including renewal, billing, and transfer
        /// Structure is documented below.
        /// </summary>
        [Output("managementSettings")]
        public Output<Outputs.RegistrationManagementSettings> ManagementSettings { get; private set; } = null!;

        /// <summary>
        /// Output only. Name of the Registration resource, in the format projects/*/locations/*/registrations/&lt;domain_name&gt;.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
        /// </summary>
        [Output("registerFailureReason")]
        public Output<string> RegisterFailureReason { get; private set; } = null!;

        /// <summary>
        /// Output only. The current state of the Registration.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Output only. Set of options for the contactSettings.privacy field that this Registration supports.
        /// </summary>
        [Output("supportedPrivacies")]
        public Output<ImmutableArray<string>> SupportedPrivacies { get; private set; } = null!;

        /// <summary>
        /// Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
        /// registrations.retrieveRegisterParameters or registrations.searchDomains calls.
        /// Structure is documented below.
        /// </summary>
        [Output("yearlyPrice")]
        public Output<Outputs.RegistrationYearlyPrice> YearlyPrice { get; private set; } = null!;


        /// <summary>
        /// Create a Registration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Registration(string name, RegistrationArgs args, CustomResourceOptions? options = null)
            : base("gcp:clouddomains/registration:Registration", name, args ?? new RegistrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Registration(string name, Input<string> id, RegistrationState? state = null, CustomResourceOptions? options = null)
            : base("gcp:clouddomains/registration:Registration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Registration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Registration Get(string name, Input<string> id, RegistrationState? state = null, CustomResourceOptions? options = null)
        {
            return new Registration(name, id, state, options);
        }
    }

    public sealed class RegistrationArgs : global::Pulumi.ResourceArgs
    {
        [Input("contactNotices")]
        private InputList<string>? _contactNotices;

        /// <summary>
        /// The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
        /// </summary>
        public InputList<string> ContactNotices
        {
            get => _contactNotices ?? (_contactNotices = new InputList<string>());
            set => _contactNotices = value;
        }

        /// <summary>
        /// Required. Settings for contact information linked to the Registration.
        /// Structure is documented below.
        /// </summary>
        [Input("contactSettings", required: true)]
        public Input<Inputs.RegistrationContactSettingsArgs> ContactSettings { get; set; } = null!;

        /// <summary>
        /// Settings controlling the DNS configuration of the Registration.
        /// Structure is documented below.
        /// </summary>
        [Input("dnsSettings")]
        public Input<Inputs.RegistrationDnsSettingsArgs>? DnsSettings { get; set; }

        /// <summary>
        /// Required. The domain name. Unicode domain names must be expressed in Punycode format.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        [Input("domainNotices")]
        private InputList<string>? _domainNotices;

        /// <summary>
        /// The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
        /// </summary>
        public InputList<string> DomainNotices
        {
            get => _domainNotices ?? (_domainNotices = new InputList<string>());
            set => _domainNotices = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of labels associated with the Registration.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location for the resource
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Settings for management of the Registration, including renewal, billing, and transfer
        /// Structure is documented below.
        /// </summary>
        [Input("managementSettings")]
        public Input<Inputs.RegistrationManagementSettingsArgs>? ManagementSettings { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
        /// registrations.retrieveRegisterParameters or registrations.searchDomains calls.
        /// Structure is documented below.
        /// </summary>
        [Input("yearlyPrice", required: true)]
        public Input<Inputs.RegistrationYearlyPriceArgs> YearlyPrice { get; set; } = null!;

        public RegistrationArgs()
        {
        }
        public static new RegistrationArgs Empty => new RegistrationArgs();
    }

    public sealed class RegistrationState : global::Pulumi.ResourceArgs
    {
        [Input("contactNotices")]
        private InputList<string>? _contactNotices;

        /// <summary>
        /// The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
        /// </summary>
        public InputList<string> ContactNotices
        {
            get => _contactNotices ?? (_contactNotices = new InputList<string>());
            set => _contactNotices = value;
        }

        /// <summary>
        /// Required. Settings for contact information linked to the Registration.
        /// Structure is documented below.
        /// </summary>
        [Input("contactSettings")]
        public Input<Inputs.RegistrationContactSettingsGetArgs>? ContactSettings { get; set; }

        /// <summary>
        /// Output only. Time at which the automation was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Settings controlling the DNS configuration of the Registration.
        /// Structure is documented below.
        /// </summary>
        [Input("dnsSettings")]
        public Input<Inputs.RegistrationDnsSettingsGetArgs>? DnsSettings { get; set; }

        /// <summary>
        /// Required. The domain name. Unicode domain names must be expressed in Punycode format.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("domainNotices")]
        private InputList<string>? _domainNotices;

        /// <summary>
        /// The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
        /// </summary>
        public InputList<string> DomainNotices
        {
            get => _domainNotices ?? (_domainNotices = new InputList<string>());
            set => _domainNotices = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Output only. Time at which the automation was updated.
        /// </summary>
        [Input("expireTime")]
        public Input<string>? ExpireTime { get; set; }

        [Input("issues")]
        private InputList<string>? _issues;

        /// <summary>
        /// Output only. The set of issues with the Registration that require attention.
        /// </summary>
        public InputList<string> Issues
        {
            get => _issues ?? (_issues = new InputList<string>());
            set => _issues = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of labels associated with the Registration.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location for the resource
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Settings for management of the Registration, including renewal, billing, and transfer
        /// Structure is documented below.
        /// </summary>
        [Input("managementSettings")]
        public Input<Inputs.RegistrationManagementSettingsGetArgs>? ManagementSettings { get; set; }

        /// <summary>
        /// Output only. Name of the Registration resource, in the format projects/*/locations/*/registrations/&lt;domain_name&gt;.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
        /// </summary>
        [Input("registerFailureReason")]
        public Input<string>? RegisterFailureReason { get; set; }

        /// <summary>
        /// Output only. The current state of the Registration.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("supportedPrivacies")]
        private InputList<string>? _supportedPrivacies;

        /// <summary>
        /// Output only. Set of options for the contactSettings.privacy field that this Registration supports.
        /// </summary>
        public InputList<string> SupportedPrivacies
        {
            get => _supportedPrivacies ?? (_supportedPrivacies = new InputList<string>());
            set => _supportedPrivacies = value;
        }

        /// <summary>
        /// Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
        /// registrations.retrieveRegisterParameters or registrations.searchDomains calls.
        /// Structure is documented below.
        /// </summary>
        [Input("yearlyPrice")]
        public Input<Inputs.RegistrationYearlyPriceGetArgs>? YearlyPrice { get; set; }

        public RegistrationState()
        {
        }
        public static new RegistrationState Empty => new RegistrationState();
    }
}
