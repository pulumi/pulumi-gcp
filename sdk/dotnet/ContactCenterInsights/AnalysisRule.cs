// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ContactCenterInsights
{
    /// <summary>
    /// The CCAI Insights project wide analysis rule.
    /// This rule will be applied to all conversations that match the filter defined in the rule.
    /// For a conversation matches the filter, the annotators specified in the rule will be run.
    /// If a conversation matches multiple rules, a union of all the annotators will be run.
    /// One project can have multiple analysis rules.
    /// 
    /// To get more information about AnalysisRule, see:
    /// 
    /// * [API documentation](https://cloud.google.com/contact-center/insights/docs/reference/rest/v1/projects.locations.analysisRules)
    /// * How-to Guides
    ///     * [Configure analysis rules using the API](https://cloud.google.com/contact-center/insights/docs/analysis-rule)
    /// 
    /// ## Example Usage
    /// 
    /// ### Contact Center Insights Analysis Rule Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var analysisRuleBasic = new Gcp.ContactCenterInsights.AnalysisRule("analysis_rule_basic", new()
    ///     {
    ///         Location = "us-central1",
    ///         DisplayName = "analysis-rule-display-name",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Contact Center Insights Analysis Rule Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var analysisRuleFull = new Gcp.ContactCenterInsights.AnalysisRule("analysis_rule_full", new()
    ///     {
    ///         Location = "us-central1",
    ///         DisplayName = "analysis-rule-display-name",
    ///         ConversationFilter = "agent_id = \"1\"",
    ///         AnnotatorSelector = new Gcp.ContactCenterInsights.Inputs.AnalysisRuleAnnotatorSelectorArgs
    ///         {
    ///             RunInterruptionAnnotator = false,
    ///             IssueModels = new[]
    ///             {
    ///                 "projects/1111111111111/locations/us-central1/issueModels/some_issue_model_id",
    ///             },
    ///             PhraseMatchers = new[]
    ///             {
    ///                 "projects/1111111111111/locations/us-central1/phraseMatchers/123",
    ///             },
    ///             QaConfig = new Gcp.ContactCenterInsights.Inputs.AnalysisRuleAnnotatorSelectorQaConfigArgs
    ///             {
    ///                 ScorecardList = new Gcp.ContactCenterInsights.Inputs.AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs
    ///                 {
    ///                     QaScorecardRevisions = new[]
    ///                     {
    ///                         "projects/1111111111111/locations/us-central1/qaScorecards/*/revisions/some_scorecard_revision_id",
    ///                     },
    ///                 },
    ///             },
    ///             RunEntityAnnotator = false,
    ///             RunIntentAnnotator = false,
    ///             RunIssueModelAnnotator = false,
    ///             RunPhraseMatcherAnnotator = false,
    ///             RunQaAnnotator = false,
    ///             RunSentimentAnnotator = false,
    ///             RunSilenceAnnotator = true,
    ///             RunSummarizationAnnotator = false,
    ///             SummarizationConfig = new Gcp.ContactCenterInsights.Inputs.AnalysisRuleAnnotatorSelectorSummarizationConfigArgs
    ///             {
    ///                 SummarizationModel = "BASELINE_MODEL",
    ///             },
    ///         },
    ///         AnalysisPercentage = 0.5,
    ///         Active = true,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Contact Center Insights Analysis Rule Profile
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var analysisRuleProfile = new Gcp.ContactCenterInsights.AnalysisRule("analysis_rule_profile", new()
    ///     {
    ///         Location = "us-central1",
    ///         DisplayName = "analysis-rule-display-name",
    ///         ConversationFilter = "agent_id = \"1\"",
    ///         AnnotatorSelector = new Gcp.ContactCenterInsights.Inputs.AnalysisRuleAnnotatorSelectorArgs
    ///         {
    ///             RunInterruptionAnnotator = false,
    ///             IssueModels = new[]
    ///             {
    ///                 "projects/1111111111111/locations/us-central1/issueModels/some_issue_model_id",
    ///             },
    ///             PhraseMatchers = new[]
    ///             {
    ///                 "projects/1111111111111/locations/us-central1/phraseMatchers/123",
    ///             },
    ///             QaConfig = new Gcp.ContactCenterInsights.Inputs.AnalysisRuleAnnotatorSelectorQaConfigArgs
    ///             {
    ///                 ScorecardList = new Gcp.ContactCenterInsights.Inputs.AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs
    ///                 {
    ///                     QaScorecardRevisions = new[]
    ///                     {
    ///                         "projects/1111111111111/locations/us-central1/qaScorecards/*/revisions/some_scorecard_revision_id",
    ///                     },
    ///                 },
    ///             },
    ///             RunEntityAnnotator = false,
    ///             RunIntentAnnotator = false,
    ///             RunIssueModelAnnotator = false,
    ///             RunPhraseMatcherAnnotator = false,
    ///             RunQaAnnotator = false,
    ///             RunSentimentAnnotator = false,
    ///             RunSilenceAnnotator = true,
    ///             RunSummarizationAnnotator = false,
    ///             SummarizationConfig = new Gcp.ContactCenterInsights.Inputs.AnalysisRuleAnnotatorSelectorSummarizationConfigArgs
    ///             {
    ///                 ConversationProfile = "projects/1111111111111/locations/us-central1/conversationProfiles/some_conversation_profile",
    ///             },
    ///         },
    ///         AnalysisPercentage = 0.5,
    ///         Active = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// AnalysisRule can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/analysisRules/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, AnalysisRule can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:contactcenterinsights/analysisRule:AnalysisRule default projects/{{project}}/locations/{{location}}/analysisRules/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:contactcenterinsights/analysisRule:AnalysisRule default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:contactcenterinsights/analysisRule:AnalysisRule default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:contactcenterinsights/analysisRule:AnalysisRule")]
    public partial class AnalysisRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If true, apply this rule to conversations. Otherwise, this rule is
        /// inactive and saved as a draft.
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// Percentage of conversations that we should apply this analysis setting
        /// automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
        /// are sampled in a determenestic way. The original RuntimePercentage &amp;
        /// upload percentage will be replaced by defining filters on the conversation.
        /// </summary>
        [Output("analysisPercentage")]
        public Output<double?> AnalysisPercentage { get; private set; } = null!;

        /// <summary>
        /// Selector of all available annotators and phrase matchers to run.
        /// Structure is documented below.
        /// </summary>
        [Output("annotatorSelector")]
        public Output<Outputs.AnalysisRuleAnnotatorSelector?> AnnotatorSelector { get; private set; } = null!;

        /// <summary>
        /// Filter for the conversations that should apply this analysis
        /// rule. An empty filter means this analysis rule applies to all
        /// conversations.
        /// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
        /// for details.
        /// </summary>
        [Output("conversationFilter")]
        public Output<string?> ConversationFilter { get; private set; } = null!;

        /// <summary>
        /// Output only. The time at which this analysis rule was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Display Name of the analysis rule.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the analysis rule. Randomly generated by Insights.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Output only. The most recent time at which this analysis rule was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a AnalysisRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AnalysisRule(string name, AnalysisRuleArgs args, CustomResourceOptions? options = null)
            : base("gcp:contactcenterinsights/analysisRule:AnalysisRule", name, args ?? new AnalysisRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AnalysisRule(string name, Input<string> id, AnalysisRuleState? state = null, CustomResourceOptions? options = null)
            : base("gcp:contactcenterinsights/analysisRule:AnalysisRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AnalysisRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AnalysisRule Get(string name, Input<string> id, AnalysisRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new AnalysisRule(name, id, state, options);
        }
    }

    public sealed class AnalysisRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If true, apply this rule to conversations. Otherwise, this rule is
        /// inactive and saved as a draft.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Percentage of conversations that we should apply this analysis setting
        /// automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
        /// are sampled in a determenestic way. The original RuntimePercentage &amp;
        /// upload percentage will be replaced by defining filters on the conversation.
        /// </summary>
        [Input("analysisPercentage")]
        public Input<double>? AnalysisPercentage { get; set; }

        /// <summary>
        /// Selector of all available annotators and phrase matchers to run.
        /// Structure is documented below.
        /// </summary>
        [Input("annotatorSelector")]
        public Input<Inputs.AnalysisRuleAnnotatorSelectorArgs>? AnnotatorSelector { get; set; }

        /// <summary>
        /// Filter for the conversations that should apply this analysis
        /// rule. An empty filter means this analysis rule applies to all
        /// conversations.
        /// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
        /// for details.
        /// </summary>
        [Input("conversationFilter")]
        public Input<string>? ConversationFilter { get; set; }

        /// <summary>
        /// Display Name of the analysis rule.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Location of the resource.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public AnalysisRuleArgs()
        {
        }
        public static new AnalysisRuleArgs Empty => new AnalysisRuleArgs();
    }

    public sealed class AnalysisRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If true, apply this rule to conversations. Otherwise, this rule is
        /// inactive and saved as a draft.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Percentage of conversations that we should apply this analysis setting
        /// automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
        /// are sampled in a determenestic way. The original RuntimePercentage &amp;
        /// upload percentage will be replaced by defining filters on the conversation.
        /// </summary>
        [Input("analysisPercentage")]
        public Input<double>? AnalysisPercentage { get; set; }

        /// <summary>
        /// Selector of all available annotators and phrase matchers to run.
        /// Structure is documented below.
        /// </summary>
        [Input("annotatorSelector")]
        public Input<Inputs.AnalysisRuleAnnotatorSelectorGetArgs>? AnnotatorSelector { get; set; }

        /// <summary>
        /// Filter for the conversations that should apply this analysis
        /// rule. An empty filter means this analysis rule applies to all
        /// conversations.
        /// Refer to https://cloud.google.com/contact-center/insights/docs/filtering
        /// for details.
        /// </summary>
        [Input("conversationFilter")]
        public Input<string>? ConversationFilter { get; set; }

        /// <summary>
        /// Output only. The time at which this analysis rule was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Display Name of the analysis rule.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the analysis rule. Randomly generated by Insights.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Output only. The most recent time at which this analysis rule was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public AnalysisRuleState()
        {
        }
        public static new AnalysisRuleState Empty => new AnalysisRuleState();
    }
}
