// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.MigrationCenter
{
    /// <summary>
    /// Manages the PreferenceSet resource.
    /// 
    /// To get more information about PreferenceSet, see:
    /// 
    /// * [API documentation](https://cloud.google.com/migration-center/docs/reference/rest/v1)
    /// * How-to Guides
    ///   * [Managing Migration Preferences](https://cloud.google.com/migration-center/docs/migration-preferences)
    /// 
    /// ## 
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.MigrationCenter.PreferenceSet("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         PreferenceSetId = "preference-set-test",
    ///         Description = "Terraform integration test description",
    ///         DisplayName = "Terraform integration test display",
    ///         VirtualMachinePreferences = new Gcp.MigrationCenter.Inputs.PreferenceSetVirtualMachinePreferencesArgs
    ///         {
    ///             VmwareEnginePreferences = new Gcp.MigrationCenter.Inputs.PreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesArgs
    ///             {
    ///                 CpuOvercommitRatio = 1.5,
    ///             },
    ///             SizingOptimizationStrategy = "SIZING_OPTIMIZATION_STRATEGY_SAME_AS_SOURCE",
    ///             TargetProduct = "COMPUTE_MIGRATION_TARGET_PRODUCT_COMPUTE_ENGINE",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ## 
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.MigrationCenter.PreferenceSet("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         PreferenceSetId = "preference-set-test",
    ///         Description = "Terraform integration test description",
    ///         DisplayName = "Terraform integration test display",
    ///         VirtualMachinePreferences = new Gcp.MigrationCenter.Inputs.PreferenceSetVirtualMachinePreferencesArgs
    ///         {
    ///             VmwareEnginePreferences = new Gcp.MigrationCenter.Inputs.PreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesArgs
    ///             {
    ///                 CpuOvercommitRatio = 1.5,
    ///                 StorageDeduplicationCompressionRatio = 1.3,
    ///                 CommitmentPlan = "ON_DEMAND",
    ///             },
    ///             SizingOptimizationStrategy = "SIZING_OPTIMIZATION_STRATEGY_SAME_AS_SOURCE",
    ///             TargetProduct = "COMPUTE_MIGRATION_TARGET_PRODUCT_COMPUTE_ENGINE",
    ///             CommitmentPlan = "COMMITMENT_PLAN_ONE_YEAR",
    ///             RegionPreferences = new Gcp.MigrationCenter.Inputs.PreferenceSetVirtualMachinePreferencesRegionPreferencesArgs
    ///             {
    ///                 PreferredRegions = new[]
    ///                 {
    ///                     "us-central1",
    ///                 },
    ///             },
    ///             SoleTenancyPreferences = new Gcp.MigrationCenter.Inputs.PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs
    ///             {
    ///                 CommitmentPlan = "ON_DEMAND",
    ///                 CpuOvercommitRatio = 1.2,
    ///                 HostMaintenancePolicy = "HOST_MAINTENANCE_POLICY_DEFAULT",
    ///                 NodeTypes = new[]
    ///                 {
    ///                     new Gcp.MigrationCenter.Inputs.PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypeArgs
    ///                     {
    ///                         NodeName = "tf-test",
    ///                     },
    ///                 },
    ///             },
    ///             ComputeEnginePreferences = new Gcp.MigrationCenter.Inputs.PreferenceSetVirtualMachinePreferencesComputeEnginePreferencesArgs
    ///             {
    ///                 LicenseType = "LICENSE_TYPE_BRING_YOUR_OWN_LICENSE",
    ///                 MachinePreferences = new Gcp.MigrationCenter.Inputs.PreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesArgs
    ///                 {
    ///                     AllowedMachineSeries = new[]
    ///                     {
    ///                         new Gcp.MigrationCenter.Inputs.PreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesArgs
    ///                         {
    ///                             Code = "C3",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// PreferenceSet can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/preferenceSets/{{preference_set_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{preference_set_id}}`
    /// 
    /// * `{{location}}/{{preference_set_id}}`
    /// 
    /// When using the `pulumi import` command, PreferenceSet can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:migrationcenter/preferenceSet:PreferenceSet default projects/{{project}}/locations/{{location}}/preferenceSets/{{preference_set_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:migrationcenter/preferenceSet:PreferenceSet default {{project}}/{{location}}/{{preference_set_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:migrationcenter/preferenceSet:PreferenceSet default {{location}}/{{preference_set_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:migrationcenter/preferenceSet:PreferenceSet")]
    public partial class PreferenceSet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Output only. The timestamp when the preference set was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// A description of the preference set.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// User-friendly display name. Maximum length is 63 characters.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Part of `parent`. See documentation of `projectsId`.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Output only. Name of the preference set.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Required. User specified ID for the preference set. It will become the last component of the preference set name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression `a-z?`.
        /// </summary>
        [Output("preferenceSetId")]
        public Output<string> PreferenceSetId { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Output only. The timestamp when the preference set was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
        /// Structure is documented below.
        /// </summary>
        [Output("virtualMachinePreferences")]
        public Output<Outputs.PreferenceSetVirtualMachinePreferences?> VirtualMachinePreferences { get; private set; } = null!;


        /// <summary>
        /// Create a PreferenceSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PreferenceSet(string name, PreferenceSetArgs args, CustomResourceOptions? options = null)
            : base("gcp:migrationcenter/preferenceSet:PreferenceSet", name, args ?? new PreferenceSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PreferenceSet(string name, Input<string> id, PreferenceSetState? state = null, CustomResourceOptions? options = null)
            : base("gcp:migrationcenter/preferenceSet:PreferenceSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PreferenceSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PreferenceSet Get(string name, Input<string> id, PreferenceSetState? state = null, CustomResourceOptions? options = null)
        {
            return new PreferenceSet(name, id, state, options);
        }
    }

    public sealed class PreferenceSetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the preference set.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User-friendly display name. Maximum length is 63 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Part of `parent`. See documentation of `projectsId`.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Required. User specified ID for the preference set. It will become the last component of the preference set name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression `a-z?`.
        /// </summary>
        [Input("preferenceSetId", required: true)]
        public Input<string> PreferenceSetId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
        /// Structure is documented below.
        /// </summary>
        [Input("virtualMachinePreferences")]
        public Input<Inputs.PreferenceSetVirtualMachinePreferencesArgs>? VirtualMachinePreferences { get; set; }

        public PreferenceSetArgs()
        {
        }
        public static new PreferenceSetArgs Empty => new PreferenceSetArgs();
    }

    public sealed class PreferenceSetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Output only. The timestamp when the preference set was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// A description of the preference set.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User-friendly display name. Maximum length is 63 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Part of `parent`. See documentation of `projectsId`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Output only. Name of the preference set.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Required. User specified ID for the preference set. It will become the last component of the preference set name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression `a-z?`.
        /// </summary>
        [Input("preferenceSetId")]
        public Input<string>? PreferenceSetId { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Output only. The timestamp when the preference set was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
        /// Structure is documented below.
        /// </summary>
        [Input("virtualMachinePreferences")]
        public Input<Inputs.PreferenceSetVirtualMachinePreferencesGetArgs>? VirtualMachinePreferences { get; set; }

        public PreferenceSetState()
        {
        }
        public static new PreferenceSetState Empty => new PreferenceSetState();
    }
}
