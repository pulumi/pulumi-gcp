// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dns.Inputs
{

    public sealed class ManagedZoneDnssecConfigGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("defaultKeySpecs")]
        private InputList<Inputs.ManagedZoneDnssecConfigDefaultKeySpecGetArgs>? _defaultKeySpecs;

        /// <summary>
        /// Specifies parameters that will be used for generating initial DnsKeys
        /// for this ManagedZone. If you provide a spec for keySigning or zoneSigning,
        /// you must also provide one for the other.
        /// DefaultKeySpecs can only be updated when the state is `Off`.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ManagedZoneDnssecConfigDefaultKeySpecGetArgs> DefaultKeySpecs
        {
            get => _defaultKeySpecs ?? (_defaultKeySpecs = new InputList<Inputs.ManagedZoneDnssecConfigDefaultKeySpecGetArgs>());
            set => _defaultKeySpecs = value;
        }

        /// <summary>
        /// Identifies what kind of resource this is
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Specifies the mechanism used to provide authenticated denial-of-existence responses.
        /// NonExistence can only be updated when the state is `Off`.
        /// Possible values are: `Nsec`, `Nsec3`.
        /// </summary>
        [Input("nonExistence")]
        public Input<string>? NonExistence { get; set; }

        /// <summary>
        /// Specifies whether DNSSEC is enabled, and what mode it is in
        /// Possible values are: `Off`, `On`, `Transfer`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public ManagedZoneDnssecConfigGetArgs()
        {
        }
        public static new ManagedZoneDnssecConfigGetArgs Empty => new ManagedZoneDnssecConfigGetArgs();
    }
}
