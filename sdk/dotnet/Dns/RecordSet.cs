// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dns
{
    /// <summary>
    /// ## Example Usage
    /// ### Binding a DNS name to the ephemeral IP of a new instance:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var frontendInstance = new Gcp.Compute.Instance("frontendInstance", new()
    ///     {
    ///         MachineType = "g1-small",
    ///         Zone = "us-central1-b",
    ///         BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
    ///         {
    ///             InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
    ///             {
    ///                 Image = "debian-cloud/debian-11",
    ///             },
    ///         },
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
    ///             {
    ///                 Network = "default",
    ///                 AccessConfigs = new[]
    ///                 {
    ///                     null,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var prod = new Gcp.Dns.ManagedZone("prod", new()
    ///     {
    ///         DnsName = "prod.mydomain.com.",
    ///     });
    /// 
    ///     var frontendRecordSet = new Gcp.Dns.RecordSet("frontendRecordSet", new()
    ///     {
    ///         Name = prod.DnsName.Apply(dnsName =&gt; $"frontend.{dnsName}"),
    ///         Type = "A",
    ///         Ttl = 300,
    ///         ManagedZone = prod.Name,
    ///         Rrdatas = new[]
    ///         {
    ///             frontendInstance.NetworkInterfaces.Apply(networkInterfaces =&gt; networkInterfaces[0].AccessConfigs[0]?.NatIp),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Adding an A record
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var prod = new Gcp.Dns.ManagedZone("prod", new()
    ///     {
    ///         DnsName = "prod.mydomain.com.",
    ///     });
    /// 
    ///     var recordSet = new Gcp.Dns.RecordSet("recordSet", new()
    ///     {
    ///         Name = prod.DnsName.Apply(dnsName =&gt; $"backend.{dnsName}"),
    ///         ManagedZone = prod.Name,
    ///         Type = "A",
    ///         Ttl = 300,
    ///         Rrdatas = new[]
    ///         {
    ///             "8.8.8.8",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Adding an MX record
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var prod = new Gcp.Dns.ManagedZone("prod", new()
    ///     {
    ///         DnsName = "prod.mydomain.com.",
    ///     });
    /// 
    ///     var mx = new Gcp.Dns.RecordSet("mx", new()
    ///     {
    ///         Name = prod.DnsName,
    ///         ManagedZone = prod.Name,
    ///         Type = "MX",
    ///         Ttl = 3600,
    ///         Rrdatas = new[]
    ///         {
    ///             "1 aspmx.l.google.com.",
    ///             "5 alt1.aspmx.l.google.com.",
    ///             "5 alt2.aspmx.l.google.com.",
    ///             "10 alt3.aspmx.l.google.com.",
    ///             "10 alt4.aspmx.l.google.com.",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Adding an SPF record
    /// 
    /// Quotes (`""`) must be added around your `rrdatas` for a SPF record. Otherwise `rrdatas` string gets split on spaces.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var prod = new Gcp.Dns.ManagedZone("prod", new()
    ///     {
    ///         DnsName = "prod.mydomain.com.",
    ///     });
    /// 
    ///     var spf = new Gcp.Dns.RecordSet("spf", new()
    ///     {
    ///         Name = prod.DnsName.Apply(dnsName =&gt; $"frontend.{dnsName}"),
    ///         ManagedZone = prod.Name,
    ///         Type = "TXT",
    ///         Ttl = 300,
    ///         Rrdatas = new[]
    ///         {
    ///             "\"v=spf1 ip4:111.111.111.111 include:backoff.email-example.com -all\"",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Adding a CNAME record
    /// 
    ///  The list of `rrdatas` should only contain a single string corresponding to the Canonical Name intended.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var prod = new Gcp.Dns.ManagedZone("prod", new()
    ///     {
    ///         DnsName = "prod.mydomain.com.",
    ///     });
    /// 
    ///     var cname = new Gcp.Dns.RecordSet("cname", new()
    ///     {
    ///         Name = prod.DnsName.Apply(dnsName =&gt; $"frontend.{dnsName}"),
    ///         ManagedZone = prod.Name,
    ///         Type = "CNAME",
    ///         Ttl = 300,
    ///         Rrdatas = new[]
    ///         {
    ///             "frontend.mydomain.com.",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Setting Routing Policy instead of using rrdatas
    /// ### Geolocation
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var geo = new Gcp.Dns.RecordSet("geo", new()
    ///     {
    ///         Name = $"backend.{google_dns_managed_zone.Prod.Dns_name}",
    ///         ManagedZone = google_dns_managed_zone.Prod.Name,
    ///         Type = "A",
    ///         Ttl = 300,
    ///         RoutingPolicy = new Gcp.Dns.Inputs.RecordSetRoutingPolicyArgs
    ///         {
    ///             Geos = new[]
    ///             {
    ///                 new Gcp.Dns.Inputs.RecordSetRoutingPolicyGeoArgs
    ///                 {
    ///                     Location = "asia-east1",
    ///                     Rrdatas = new[]
    ///                     {
    ///                         "10.128.1.1",
    ///                     },
    ///                 },
    ///                 new Gcp.Dns.Inputs.RecordSetRoutingPolicyGeoArgs
    ///                 {
    ///                     Location = "us-central1",
    ///                     Rrdatas = new[]
    ///                     {
    ///                         "10.130.1.1",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Primary-Backup
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var prodManagedZone = new Gcp.Dns.ManagedZone("prodManagedZone", new()
    ///     {
    ///         DnsName = "prod.mydomain.com.",
    ///     });
    /// 
    ///     var prodRegionBackendService = new Gcp.Compute.RegionBackendService("prodRegionBackendService", new()
    ///     {
    ///         Region = "us-central1",
    ///     });
    /// 
    ///     var prodNetwork = new Gcp.Compute.Network("prodNetwork");
    /// 
    ///     var prodForwardingRule = new Gcp.Compute.ForwardingRule("prodForwardingRule", new()
    ///     {
    ///         Region = "us-central1",
    ///         LoadBalancingScheme = "INTERNAL",
    ///         BackendService = prodRegionBackendService.Id,
    ///         AllPorts = true,
    ///         Network = prodNetwork.Name,
    ///     });
    /// 
    ///     var recordSet = new Gcp.Dns.RecordSet("recordSet", new()
    ///     {
    ///         Name = prodManagedZone.DnsName.Apply(dnsName =&gt; $"backend.{dnsName}"),
    ///         ManagedZone = prodManagedZone.Name,
    ///         Type = "A",
    ///         Ttl = 300,
    ///         RoutingPolicy = new Gcp.Dns.Inputs.RecordSetRoutingPolicyArgs
    ///         {
    ///             PrimaryBackup = new Gcp.Dns.Inputs.RecordSetRoutingPolicyPrimaryBackupArgs
    ///             {
    ///                 TrickleRatio = 0.1,
    ///                 Primary = new Gcp.Dns.Inputs.RecordSetRoutingPolicyPrimaryBackupPrimaryArgs
    ///                 {
    ///                     InternalLoadBalancers = new[]
    ///                     {
    ///                         new Gcp.Dns.Inputs.RecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancerArgs
    ///                         {
    ///                             LoadBalancerType = "regionalL4ilb",
    ///                             IpAddress = prodForwardingRule.IpAddress,
    ///                             Port = "80",
    ///                             IpProtocol = "tcp",
    ///                             NetworkUrl = prodNetwork.Id,
    ///                             Project = prodForwardingRule.Project,
    ///                             Region = prodForwardingRule.Region,
    ///                         },
    ///                     },
    ///                 },
    ///                 BackupGeos = new[]
    ///                 {
    ///                     new Gcp.Dns.Inputs.RecordSetRoutingPolicyPrimaryBackupBackupGeoArgs
    ///                     {
    ///                         Location = "asia-east1",
    ///                         Rrdatas = new[]
    ///                         {
    ///                             "10.128.1.1",
    ///                         },
    ///                     },
    ///                     new Gcp.Dns.Inputs.RecordSetRoutingPolicyPrimaryBackupBackupGeoArgs
    ///                     {
    ///                         Location = "us-west1",
    ///                         Rrdatas = new[]
    ///                         {
    ///                             "10.130.1.1",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DNS record sets can be imported using either of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dns/recordSet:RecordSet frontend projects/{{project}}/managedZones/{{zone}}/rrsets/{{name}}/{{type}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dns/recordSet:RecordSet frontend {{project}}/{{zone}}/{{name}}/{{type}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dns/recordSet:RecordSet frontend {{zone}}/{{name}}/{{type}}
    /// ```
    /// 
    ///  NoteThe record name must include the trailing dot at the end.
    /// </summary>
    [GcpResourceType("gcp:dns/recordSet:RecordSet")]
    public partial class RecordSet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the zone in which this record set will
        /// reside.
        /// </summary>
        [Output("managedZone")]
        public Output<string> ManagedZone { get; private set; } = null!;

        /// <summary>
        /// The DNS name this record set will apply to.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The configuration for steering traffic based on query.
        /// Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
        /// Structure is documented below.
        /// </summary>
        [Output("routingPolicy")]
        public Output<Outputs.RecordSetRoutingPolicy?> RoutingPolicy { get; private set; } = null!;

        /// <summary>
        /// The string data for the records in this record set whose meaning depends on the DNS type. For TXT record, if the string
        /// data contains spaces, add surrounding \" if you don't want your string to get split on spaces. To specify a single
        /// record value longer than 255 characters such as a TXT record for DKIM, add \"\" inside the Terraform configuration
        /// string (e.g. "first255characters\"\"morecharacters").
        /// </summary>
        [Output("rrdatas")]
        public Output<ImmutableArray<string>> Rrdatas { get; private set; } = null!;

        /// <summary>
        /// The time-to-live of this record set (seconds).
        /// </summary>
        [Output("ttl")]
        public Output<int?> Ttl { get; private set; } = null!;

        /// <summary>
        /// The DNS record set type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a RecordSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RecordSet(string name, RecordSetArgs args, CustomResourceOptions? options = null)
            : base("gcp:dns/recordSet:RecordSet", name, args ?? new RecordSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RecordSet(string name, Input<string> id, RecordSetState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dns/recordSet:RecordSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RecordSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RecordSet Get(string name, Input<string> id, RecordSetState? state = null, CustomResourceOptions? options = null)
        {
            return new RecordSet(name, id, state, options);
        }
    }

    public sealed class RecordSetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the zone in which this record set will
        /// reside.
        /// </summary>
        [Input("managedZone", required: true)]
        public Input<string> ManagedZone { get; set; } = null!;

        /// <summary>
        /// The DNS name this record set will apply to.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The configuration for steering traffic based on query.
        /// Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
        /// Structure is documented below.
        /// </summary>
        [Input("routingPolicy")]
        public Input<Inputs.RecordSetRoutingPolicyArgs>? RoutingPolicy { get; set; }

        [Input("rrdatas")]
        private InputList<string>? _rrdatas;

        /// <summary>
        /// The string data for the records in this record set whose meaning depends on the DNS type. For TXT record, if the string
        /// data contains spaces, add surrounding \" if you don't want your string to get split on spaces. To specify a single
        /// record value longer than 255 characters such as a TXT record for DKIM, add \"\" inside the Terraform configuration
        /// string (e.g. "first255characters\"\"morecharacters").
        /// </summary>
        public InputList<string> Rrdatas
        {
            get => _rrdatas ?? (_rrdatas = new InputList<string>());
            set => _rrdatas = value;
        }

        /// <summary>
        /// The time-to-live of this record set (seconds).
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The DNS record set type.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public RecordSetArgs()
        {
        }
        public static new RecordSetArgs Empty => new RecordSetArgs();
    }

    public sealed class RecordSetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the zone in which this record set will
        /// reside.
        /// </summary>
        [Input("managedZone")]
        public Input<string>? ManagedZone { get; set; }

        /// <summary>
        /// The DNS name this record set will apply to.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The configuration for steering traffic based on query.
        /// Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
        /// Structure is documented below.
        /// </summary>
        [Input("routingPolicy")]
        public Input<Inputs.RecordSetRoutingPolicyGetArgs>? RoutingPolicy { get; set; }

        [Input("rrdatas")]
        private InputList<string>? _rrdatas;

        /// <summary>
        /// The string data for the records in this record set whose meaning depends on the DNS type. For TXT record, if the string
        /// data contains spaces, add surrounding \" if you don't want your string to get split on spaces. To specify a single
        /// record value longer than 255 characters such as a TXT record for DKIM, add \"\" inside the Terraform configuration
        /// string (e.g. "first255characters\"\"morecharacters").
        /// </summary>
        public InputList<string> Rrdatas
        {
            get => _rrdatas ?? (_rrdatas = new InputList<string>());
            set => _rrdatas = value;
        }

        /// <summary>
        /// The time-to-live of this record set (seconds).
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The DNS record set type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public RecordSetState()
        {
        }
        public static new RecordSetState Empty => new RecordSetState();
    }
}
