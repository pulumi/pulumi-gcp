// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dns
{
    /// <summary>
    /// Manages a set of DNS records within Google Cloud DNS. For more information see [the official documentation](https://cloud.google.com/dns/records/) and
    /// [API](https://cloud.google.com/dns/api/v1/resourceRecordSets).
    /// 
    /// &gt; **Note:** The provider treats this resource as an authoritative record set. This means existing records (including the default records) for the given type will be overwritten when you create this resource with this provider. In addition, the Google Cloud DNS API requires NS records to be present at all times, so this provider will not actually remove NS records during destroy but will report that it did.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/dns_record_set.html.markdown.
    /// </summary>
    public partial class RecordSet : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the zone in which this record set will
        /// reside.
        /// </summary>
        [Output("managedZone")]
        public Output<string> ManagedZone { get; private set; } = null!;

        /// <summary>
        /// The DNS name this record set will apply to.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The string data for the records in this record set
        /// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding `\"` if you don't want your string to get split on spaces. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside this provider's configuration string (e.g. `"first255characters\"\"morecharacters"`).
        /// </summary>
        [Output("rrdatas")]
        public Output<ImmutableArray<string>> Rrdatas { get; private set; } = null!;

        /// <summary>
        /// The time-to-live of this record set (seconds).
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;

        /// <summary>
        /// The DNS record set type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a RecordSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RecordSet(string name, RecordSetArgs args, CustomResourceOptions? options = null)
            : base("gcp:dns/recordSet:RecordSet", name, args, MakeResourceOptions(options, ""))
        {
        }

        private RecordSet(string name, Input<string> id, RecordSetState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dns/recordSet:RecordSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RecordSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RecordSet Get(string name, Input<string> id, RecordSetState? state = null, CustomResourceOptions? options = null)
        {
            return new RecordSet(name, id, state, options);
        }
    }

    public sealed class RecordSetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the zone in which this record set will
        /// reside.
        /// </summary>
        [Input("managedZone", required: true)]
        public Input<string> ManagedZone { get; set; } = null!;

        /// <summary>
        /// The DNS name this record set will apply to.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("rrdatas", required: true)]
        private InputList<string>? _rrdatas;

        /// <summary>
        /// The string data for the records in this record set
        /// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding `\"` if you don't want your string to get split on spaces. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside this provider's configuration string (e.g. `"first255characters\"\"morecharacters"`).
        /// </summary>
        public InputList<string> Rrdatas
        {
            get => _rrdatas ?? (_rrdatas = new InputList<string>());
            set => _rrdatas = value;
        }

        /// <summary>
        /// The time-to-live of this record set (seconds).
        /// </summary>
        [Input("ttl", required: true)]
        public Input<int> Ttl { get; set; } = null!;

        /// <summary>
        /// The DNS record set type.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public RecordSetArgs()
        {
        }
    }

    public sealed class RecordSetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the zone in which this record set will
        /// reside.
        /// </summary>
        [Input("managedZone")]
        public Input<string>? ManagedZone { get; set; }

        /// <summary>
        /// The DNS name this record set will apply to.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("rrdatas")]
        private InputList<string>? _rrdatas;

        /// <summary>
        /// The string data for the records in this record set
        /// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding `\"` if you don't want your string to get split on spaces. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside this provider's configuration string (e.g. `"first255characters\"\"morecharacters"`).
        /// </summary>
        public InputList<string> Rrdatas
        {
            get => _rrdatas ?? (_rrdatas = new InputList<string>());
            set => _rrdatas = value;
        }

        /// <summary>
        /// The time-to-live of this record set (seconds).
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The DNS record set type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public RecordSetState()
        {
        }
    }
}
