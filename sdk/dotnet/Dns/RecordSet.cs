// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dns
{
    /// <summary>
    /// Manages a set of DNS records within Google Cloud DNS. For more information see [the official documentation](https://cloud.google.com/dns/records/) and
    /// [API](https://cloud.google.com/dns/api/v1/resourceRecordSets).
    /// 
    /// &gt; **Note:** The provider treats this resource as an authoritative record set. This means existing records (including
    /// the default records) for the given type will be overwritten when you create this resource in the provider.
    /// In addition, the Google Cloud DNS API requires NS records to be present at all times, so the provider
    /// will not actually remove NS records during destroy but will report that it did.
    /// 
    /// ## Example Usage
    /// ### Binding a DNS name to the ephemeral IP of a new instance:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var frontendInstance = new Gcp.Compute.Instance("frontendInstance", new Gcp.Compute.InstanceArgs
    ///         {
    ///             MachineType = "g1-small",
    ///             Zone = "us-central1-b",
    ///             BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
    ///             {
    ///                 InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
    ///                 {
    ///                     Image = "debian-cloud/debian-9",
    ///                 },
    ///             },
    ///             NetworkInterfaces = 
    ///             {
    ///                 new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
    ///                 {
    ///                     Network = "default",
    ///                     AccessConfigs = 
    ///                     {
    ///                         ,
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         var prod = new Gcp.Dns.ManagedZone("prod", new Gcp.Dns.ManagedZoneArgs
    ///         {
    ///             DnsName = "prod.mydomain.com.",
    ///         });
    ///         var frontendRecordSet = new Gcp.Dns.RecordSet("frontendRecordSet", new Gcp.Dns.RecordSetArgs
    ///         {
    ///             Name = prod.DnsName.Apply(dnsName =&gt; $"frontend.{dnsName}"),
    ///             Type = "A",
    ///             Ttl = 300,
    ///             ManagedZone = prod.Name,
    ///             Rrdatas = 
    ///             {
    ///                 frontendInstance.NetworkInterfaces.Apply(networkInterfaces =&gt; networkInterfaces[0].AccessConfigs?[0]?.NatIp),
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Adding an A record
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var prod = new Gcp.Dns.ManagedZone("prod", new Gcp.Dns.ManagedZoneArgs
    ///         {
    ///             DnsName = "prod.mydomain.com.",
    ///         });
    ///         var recordSet = new Gcp.Dns.RecordSet("recordSet", new Gcp.Dns.RecordSetArgs
    ///         {
    ///             Name = prod.DnsName.Apply(dnsName =&gt; $"backend.{dnsName}"),
    ///             ManagedZone = prod.Name,
    ///             Type = "A",
    ///             Ttl = 300,
    ///             Rrdatas = 
    ///             {
    ///                 "8.8.8.8",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Adding an MX record
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var prod = new Gcp.Dns.ManagedZone("prod", new Gcp.Dns.ManagedZoneArgs
    ///         {
    ///             DnsName = "prod.mydomain.com.",
    ///         });
    ///         var mx = new Gcp.Dns.RecordSet("mx", new Gcp.Dns.RecordSetArgs
    ///         {
    ///             Name = prod.DnsName,
    ///             ManagedZone = prod.Name,
    ///             Type = "MX",
    ///             Ttl = 3600,
    ///             Rrdatas = 
    ///             {
    ///                 "1 aspmx.l.google.com.",
    ///                 "5 alt1.aspmx.l.google.com.",
    ///                 "5 alt2.aspmx.l.google.com.",
    ///                 "10 alt3.aspmx.l.google.com.",
    ///                 "10 alt4.aspmx.l.google.com.",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Adding an SPF record
    /// 
    /// Quotes (`""`) must be added around your `rrdatas` for a SPF record. Otherwise `rrdatas` string gets split on spaces.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var prod = new Gcp.Dns.ManagedZone("prod", new Gcp.Dns.ManagedZoneArgs
    ///         {
    ///             DnsName = "prod.mydomain.com.",
    ///         });
    ///         var spf = new Gcp.Dns.RecordSet("spf", new Gcp.Dns.RecordSetArgs
    ///         {
    ///             Name = prod.DnsName.Apply(dnsName =&gt; $"frontend.{dnsName}"),
    ///             ManagedZone = prod.Name,
    ///             Type = "TXT",
    ///             Ttl = 300,
    ///             Rrdatas = 
    ///             {
    ///                 "\"v=spf1 ip4:111.111.111.111 include:backoff.email-example.com -all\"",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Adding a CNAME record
    /// 
    ///  The list of `rrdatas` should only contain a single string corresponding to the Canonical Name intended.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var prod = new Gcp.Dns.ManagedZone("prod", new Gcp.Dns.ManagedZoneArgs
    ///         {
    ///             DnsName = "prod.mydomain.com.",
    ///         });
    ///         var cname = new Gcp.Dns.RecordSet("cname", new Gcp.Dns.RecordSetArgs
    ///         {
    ///             Name = prod.DnsName.Apply(dnsName =&gt; $"frontend.{dnsName}"),
    ///             ManagedZone = prod.Name,
    ///             Type = "CNAME",
    ///             Ttl = 300,
    ///             Rrdatas = 
    ///             {
    ///                 "frontend.mydomain.com.",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// DNS record sets can be imported using either of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dns/recordSet:RecordSet frontend {{project}}/{{zone}}/{{name}}/{{type}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:dns/recordSet:RecordSet frontend {{zone}}/{{name}}/{{type}}
    /// ```
    /// 
    ///  NoteThe record name must include the trailing dot at the end.
    /// </summary>
    [GcpResourceType("gcp:dns/recordSet:RecordSet")]
    public partial class RecordSet : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the zone in which this record set will
        /// reside.
        /// </summary>
        [Output("managedZone")]
        public Output<string> ManagedZone { get; private set; } = null!;

        /// <summary>
        /// The DNS name this record set will apply to.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The string data for the records in this record set
        /// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding `\"` if you don't want your string to get split on spaces. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g. `"first255characters\"\"morecharacters"`).
        /// </summary>
        [Output("rrdatas")]
        public Output<ImmutableArray<string>> Rrdatas { get; private set; } = null!;

        /// <summary>
        /// The time-to-live of this record set (seconds).
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;

        /// <summary>
        /// The DNS record set type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a RecordSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RecordSet(string name, RecordSetArgs args, CustomResourceOptions? options = null)
            : base("gcp:dns/recordSet:RecordSet", name, args ?? new RecordSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RecordSet(string name, Input<string> id, RecordSetState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dns/recordSet:RecordSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RecordSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RecordSet Get(string name, Input<string> id, RecordSetState? state = null, CustomResourceOptions? options = null)
        {
            return new RecordSet(name, id, state, options);
        }
    }

    public sealed class RecordSetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the zone in which this record set will
        /// reside.
        /// </summary>
        [Input("managedZone", required: true)]
        public Input<string> ManagedZone { get; set; } = null!;

        /// <summary>
        /// The DNS name this record set will apply to.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("rrdatas", required: true)]
        private InputList<string>? _rrdatas;

        /// <summary>
        /// The string data for the records in this record set
        /// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding `\"` if you don't want your string to get split on spaces. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g. `"first255characters\"\"morecharacters"`).
        /// </summary>
        public InputList<string> Rrdatas
        {
            get => _rrdatas ?? (_rrdatas = new InputList<string>());
            set => _rrdatas = value;
        }

        /// <summary>
        /// The time-to-live of this record set (seconds).
        /// </summary>
        [Input("ttl", required: true)]
        public Input<int> Ttl { get; set; } = null!;

        /// <summary>
        /// The DNS record set type.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public RecordSetArgs()
        {
        }
    }

    public sealed class RecordSetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the zone in which this record set will
        /// reside.
        /// </summary>
        [Input("managedZone")]
        public Input<string>? ManagedZone { get; set; }

        /// <summary>
        /// The DNS name this record set will apply to.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("rrdatas")]
        private InputList<string>? _rrdatas;

        /// <summary>
        /// The string data for the records in this record set
        /// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding `\"` if you don't want your string to get split on spaces. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g. `"first255characters\"\"morecharacters"`).
        /// </summary>
        public InputList<string> Rrdatas
        {
            get => _rrdatas ?? (_rrdatas = new InputList<string>());
            set => _rrdatas = value;
        }

        /// <summary>
        /// The time-to-live of this record set (seconds).
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The DNS record set type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public RecordSetState()
        {
        }
    }
}
