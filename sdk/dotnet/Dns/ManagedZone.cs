// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Dns
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/dns_managed_zone.html.markdown.
    /// </summary>
    public partial class ManagedZone : Pulumi.CustomResource
    {
        /// <summary>
        /// A textual description field. Defaults to 'Managed by Terraform'.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The DNS name of this managed zone, for instance "example.com.".
        /// </summary>
        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        /// <summary>
        /// DNSSEC configuration
        /// </summary>
        [Output("dnssecConfig")]
        public Output<Outputs.ManagedZoneDnssecConfig?> DnssecConfig { get; private set; } = null!;

        /// <summary>
        /// The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this
        /// field contains the set of destinations to forward to.
        /// </summary>
        [Output("forwardingConfig")]
        public Output<Outputs.ManagedZoneForwardingConfig?> ForwardingConfig { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs to assign to this ManagedZone.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// User assigned name for this resource. Must be unique within the project.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Delegate your managed_zone to these virtual name servers; defined by the server
        /// </summary>
        [Output("nameServers")]
        public Output<ImmutableArray<string>> NameServers { get; private set; } = null!;

        /// <summary>
        /// The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field
        /// contains the network to peer with.
        /// </summary>
        [Output("peeringConfig")]
        public Output<Outputs.ManagedZonePeeringConfig?> PeeringConfig { get; private set; } = null!;

        /// <summary>
        /// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
        /// </summary>
        [Output("privateVisibilityConfig")]
        public Output<Outputs.ManagedZonePrivateVisibilityConfig?> PrivateVisibilityConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to
        /// Virtual Private Cloud resources. Must be one of: 'public', 'private'.
        /// </summary>
        [Output("visibility")]
        public Output<string?> Visibility { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedZone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedZone(string name, ManagedZoneArgs args, CustomResourceOptions? options = null)
            : base("gcp:dns/managedZone:ManagedZone", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ManagedZone(string name, Input<string> id, ManagedZoneState? state = null, CustomResourceOptions? options = null)
            : base("gcp:dns/managedZone:ManagedZone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedZone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedZone Get(string name, Input<string> id, ManagedZoneState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedZone(name, id, state, options);
        }
    }

    public sealed class ManagedZoneArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A textual description field. Defaults to 'Managed by Terraform'.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The DNS name of this managed zone, for instance "example.com.".
        /// </summary>
        [Input("dnsName", required: true)]
        public Input<string> DnsName { get; set; } = null!;

        /// <summary>
        /// DNSSEC configuration
        /// </summary>
        [Input("dnssecConfig")]
        public Input<Inputs.ManagedZoneDnssecConfigArgs>? DnssecConfig { get; set; }

        /// <summary>
        /// The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this
        /// field contains the set of destinations to forward to.
        /// </summary>
        [Input("forwardingConfig")]
        public Input<Inputs.ManagedZoneForwardingConfigArgs>? ForwardingConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to this ManagedZone.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// User assigned name for this resource. Must be unique within the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field
        /// contains the network to peer with.
        /// </summary>
        [Input("peeringConfig")]
        public Input<Inputs.ManagedZonePeeringConfigArgs>? PeeringConfig { get; set; }

        /// <summary>
        /// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
        /// </summary>
        [Input("privateVisibilityConfig")]
        public Input<Inputs.ManagedZonePrivateVisibilityConfigArgs>? PrivateVisibilityConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to
        /// Virtual Private Cloud resources. Must be one of: 'public', 'private'.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public ManagedZoneArgs()
        {
            Description = "Managed by Pulumi";
        }
    }

    public sealed class ManagedZoneState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A textual description field. Defaults to 'Managed by Terraform'.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The DNS name of this managed zone, for instance "example.com.".
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// DNSSEC configuration
        /// </summary>
        [Input("dnssecConfig")]
        public Input<Inputs.ManagedZoneDnssecConfigGetArgs>? DnssecConfig { get; set; }

        /// <summary>
        /// The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this
        /// field contains the set of destinations to forward to.
        /// </summary>
        [Input("forwardingConfig")]
        public Input<Inputs.ManagedZoneForwardingConfigGetArgs>? ForwardingConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to this ManagedZone.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// User assigned name for this resource. Must be unique within the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameServers")]
        private InputList<string>? _nameServers;

        /// <summary>
        /// Delegate your managed_zone to these virtual name servers; defined by the server
        /// </summary>
        public InputList<string> NameServers
        {
            get => _nameServers ?? (_nameServers = new InputList<string>());
            set => _nameServers = value;
        }

        /// <summary>
        /// The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field
        /// contains the network to peer with.
        /// </summary>
        [Input("peeringConfig")]
        public Input<Inputs.ManagedZonePeeringConfigGetArgs>? PeeringConfig { get; set; }

        /// <summary>
        /// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
        /// </summary>
        [Input("privateVisibilityConfig")]
        public Input<Inputs.ManagedZonePrivateVisibilityConfigGetArgs>? PrivateVisibilityConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to
        /// Virtual Private Cloud resources. Must be one of: 'public', 'private'.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public ManagedZoneState()
        {
            Description = "Managed by Pulumi";
        }
    }

    namespace Inputs
    {

    public sealed class ManagedZoneDnssecConfigArgs : Pulumi.ResourceArgs
    {
        [Input("defaultKeySpecs")]
        private InputList<ManagedZoneDnssecConfigDefaultKeySpecsArgs>? _defaultKeySpecs;
        public InputList<ManagedZoneDnssecConfigDefaultKeySpecsArgs> DefaultKeySpecs
        {
            get => _defaultKeySpecs ?? (_defaultKeySpecs = new InputList<ManagedZoneDnssecConfigDefaultKeySpecsArgs>());
            set => _defaultKeySpecs = value;
        }

        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("nonExistence")]
        public Input<string>? NonExistence { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        public ManagedZoneDnssecConfigArgs()
        {
        }
    }

    public sealed class ManagedZoneDnssecConfigDefaultKeySpecsArgs : Pulumi.ResourceArgs
    {
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        [Input("keyLength")]
        public Input<int>? KeyLength { get; set; }

        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        [Input("kind")]
        public Input<string>? Kind { get; set; }

        public ManagedZoneDnssecConfigDefaultKeySpecsArgs()
        {
        }
    }

    public sealed class ManagedZoneDnssecConfigDefaultKeySpecsGetArgs : Pulumi.ResourceArgs
    {
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        [Input("keyLength")]
        public Input<int>? KeyLength { get; set; }

        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        [Input("kind")]
        public Input<string>? Kind { get; set; }

        public ManagedZoneDnssecConfigDefaultKeySpecsGetArgs()
        {
        }
    }

    public sealed class ManagedZoneDnssecConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("defaultKeySpecs")]
        private InputList<ManagedZoneDnssecConfigDefaultKeySpecsGetArgs>? _defaultKeySpecs;
        public InputList<ManagedZoneDnssecConfigDefaultKeySpecsGetArgs> DefaultKeySpecs
        {
            get => _defaultKeySpecs ?? (_defaultKeySpecs = new InputList<ManagedZoneDnssecConfigDefaultKeySpecsGetArgs>());
            set => _defaultKeySpecs = value;
        }

        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("nonExistence")]
        public Input<string>? NonExistence { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        public ManagedZoneDnssecConfigGetArgs()
        {
        }
    }

    public sealed class ManagedZoneForwardingConfigArgs : Pulumi.ResourceArgs
    {
        [Input("targetNameServers")]
        private InputList<ManagedZoneForwardingConfigTargetNameServersArgs>? _targetNameServers;
        public InputList<ManagedZoneForwardingConfigTargetNameServersArgs> TargetNameServers
        {
            get => _targetNameServers ?? (_targetNameServers = new InputList<ManagedZoneForwardingConfigTargetNameServersArgs>());
            set => _targetNameServers = value;
        }

        public ManagedZoneForwardingConfigArgs()
        {
        }
    }

    public sealed class ManagedZoneForwardingConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("targetNameServers")]
        private InputList<ManagedZoneForwardingConfigTargetNameServersGetArgs>? _targetNameServers;
        public InputList<ManagedZoneForwardingConfigTargetNameServersGetArgs> TargetNameServers
        {
            get => _targetNameServers ?? (_targetNameServers = new InputList<ManagedZoneForwardingConfigTargetNameServersGetArgs>());
            set => _targetNameServers = value;
        }

        public ManagedZoneForwardingConfigGetArgs()
        {
        }
    }

    public sealed class ManagedZoneForwardingConfigTargetNameServersArgs : Pulumi.ResourceArgs
    {
        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        public ManagedZoneForwardingConfigTargetNameServersArgs()
        {
        }
    }

    public sealed class ManagedZoneForwardingConfigTargetNameServersGetArgs : Pulumi.ResourceArgs
    {
        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        public ManagedZoneForwardingConfigTargetNameServersGetArgs()
        {
        }
    }

    public sealed class ManagedZonePeeringConfigArgs : Pulumi.ResourceArgs
    {
        [Input("targetNetwork")]
        public Input<ManagedZonePeeringConfigTargetNetworkArgs>? TargetNetwork { get; set; }

        public ManagedZonePeeringConfigArgs()
        {
        }
    }

    public sealed class ManagedZonePeeringConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("targetNetwork")]
        public Input<ManagedZonePeeringConfigTargetNetworkGetArgs>? TargetNetwork { get; set; }

        public ManagedZonePeeringConfigGetArgs()
        {
        }
    }

    public sealed class ManagedZonePeeringConfigTargetNetworkArgs : Pulumi.ResourceArgs
    {
        [Input("networkUrl")]
        public Input<string>? NetworkUrl { get; set; }

        public ManagedZonePeeringConfigTargetNetworkArgs()
        {
        }
    }

    public sealed class ManagedZonePeeringConfigTargetNetworkGetArgs : Pulumi.ResourceArgs
    {
        [Input("networkUrl")]
        public Input<string>? NetworkUrl { get; set; }

        public ManagedZonePeeringConfigTargetNetworkGetArgs()
        {
        }
    }

    public sealed class ManagedZonePrivateVisibilityConfigArgs : Pulumi.ResourceArgs
    {
        [Input("networks")]
        private InputList<ManagedZonePrivateVisibilityConfigNetworksArgs>? _networks;
        public InputList<ManagedZonePrivateVisibilityConfigNetworksArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<ManagedZonePrivateVisibilityConfigNetworksArgs>());
            set => _networks = value;
        }

        public ManagedZonePrivateVisibilityConfigArgs()
        {
        }
    }

    public sealed class ManagedZonePrivateVisibilityConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("networks")]
        private InputList<ManagedZonePrivateVisibilityConfigNetworksGetArgs>? _networks;
        public InputList<ManagedZonePrivateVisibilityConfigNetworksGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<ManagedZonePrivateVisibilityConfigNetworksGetArgs>());
            set => _networks = value;
        }

        public ManagedZonePrivateVisibilityConfigGetArgs()
        {
        }
    }

    public sealed class ManagedZonePrivateVisibilityConfigNetworksArgs : Pulumi.ResourceArgs
    {
        [Input("networkUrl")]
        public Input<string>? NetworkUrl { get; set; }

        public ManagedZonePrivateVisibilityConfigNetworksArgs()
        {
        }
    }

    public sealed class ManagedZonePrivateVisibilityConfigNetworksGetArgs : Pulumi.ResourceArgs
    {
        [Input("networkUrl")]
        public Input<string>? NetworkUrl { get; set; }

        public ManagedZonePrivateVisibilityConfigNetworksGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ManagedZoneDnssecConfig
    {
        public readonly ImmutableArray<ManagedZoneDnssecConfigDefaultKeySpecs> DefaultKeySpecs;
        public readonly string? Kind;
        public readonly string NonExistence;
        public readonly string? State;

        [OutputConstructor]
        private ManagedZoneDnssecConfig(
            ImmutableArray<ManagedZoneDnssecConfigDefaultKeySpecs> defaultKeySpecs,
            string? kind,
            string nonExistence,
            string? state)
        {
            DefaultKeySpecs = defaultKeySpecs;
            Kind = kind;
            NonExistence = nonExistence;
            State = state;
        }
    }

    [OutputType]
    public sealed class ManagedZoneDnssecConfigDefaultKeySpecs
    {
        public readonly string? Algorithm;
        public readonly int? KeyLength;
        public readonly string? KeyType;
        public readonly string? Kind;

        [OutputConstructor]
        private ManagedZoneDnssecConfigDefaultKeySpecs(
            string? algorithm,
            int? keyLength,
            string? keyType,
            string? kind)
        {
            Algorithm = algorithm;
            KeyLength = keyLength;
            KeyType = keyType;
            Kind = kind;
        }
    }

    [OutputType]
    public sealed class ManagedZoneForwardingConfig
    {
        public readonly ImmutableArray<ManagedZoneForwardingConfigTargetNameServers> TargetNameServers;

        [OutputConstructor]
        private ManagedZoneForwardingConfig(ImmutableArray<ManagedZoneForwardingConfigTargetNameServers> targetNameServers)
        {
            TargetNameServers = targetNameServers;
        }
    }

    [OutputType]
    public sealed class ManagedZoneForwardingConfigTargetNameServers
    {
        public readonly string? Ipv4Address;

        [OutputConstructor]
        private ManagedZoneForwardingConfigTargetNameServers(string? ipv4Address)
        {
            Ipv4Address = ipv4Address;
        }
    }

    [OutputType]
    public sealed class ManagedZonePeeringConfig
    {
        public readonly ManagedZonePeeringConfigTargetNetwork? TargetNetwork;

        [OutputConstructor]
        private ManagedZonePeeringConfig(ManagedZonePeeringConfigTargetNetwork? targetNetwork)
        {
            TargetNetwork = targetNetwork;
        }
    }

    [OutputType]
    public sealed class ManagedZonePeeringConfigTargetNetwork
    {
        public readonly string? NetworkUrl;

        [OutputConstructor]
        private ManagedZonePeeringConfigTargetNetwork(string? networkUrl)
        {
            NetworkUrl = networkUrl;
        }
    }

    [OutputType]
    public sealed class ManagedZonePrivateVisibilityConfig
    {
        public readonly ImmutableArray<ManagedZonePrivateVisibilityConfigNetworks> Networks;

        [OutputConstructor]
        private ManagedZonePrivateVisibilityConfig(ImmutableArray<ManagedZonePrivateVisibilityConfigNetworks> networks)
        {
            Networks = networks;
        }
    }

    [OutputType]
    public sealed class ManagedZonePrivateVisibilityConfigNetworks
    {
        public readonly string? NetworkUrl;

        [OutputConstructor]
        private ManagedZonePrivateVisibilityConfigNetworks(string? networkUrl)
        {
            NetworkUrl = networkUrl;
        }
    }
    }
}
