// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DatabaseMigrationService
{
    /// <summary>
    /// A migration job definition.
    /// 
    /// To get more information about MigrationJob, see:
    /// 
    /// * [API documentation](https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/create)
    /// * How-to Guides
    ///     * [Database Migration](https://cloud.google.com/database-migration/docs/)
    /// 
    /// ## Example Usage
    /// 
    /// ### Database Migration Service Migration Job Mysql To Mysql
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var sourceCsql = new Gcp.Sql.DatabaseInstance("source_csql", new()
    ///     {
    ///         Name = "source-csql",
    ///         DatabaseVersion = "MYSQL_5_7",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-n1-standard-1",
    ///             DeletionProtectionEnabled = false,
    ///         },
    ///         DeletionProtection = false,
    ///     });
    /// 
    ///     var sourceSqlClientCert = new Gcp.Sql.SslCert("source_sql_client_cert", new()
    ///     {
    ///         CommonName = "cert",
    ///         Instance = sourceCsql.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             sourceCsql,
    ///         },
    ///     });
    /// 
    ///     var sourceSqldbUser = new Gcp.Sql.User("source_sqldb_user", new()
    ///     {
    ///         Name = "username",
    ///         Instance = sourceCsql.Name,
    ///         Password = "password",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             sourceSqlClientCert,
    ///         },
    ///     });
    /// 
    ///     var sourceCp = new Gcp.DatabaseMigrationService.ConnectionProfile("source_cp", new()
    ///     {
    ///         Location = "us-central1",
    ///         ConnectionProfileId = "source-cp",
    ///         DisplayName = "source-cp_display",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Mysql = new Gcp.DatabaseMigrationService.Inputs.ConnectionProfileMysqlArgs
    ///         {
    ///             Host = sourceCsql.IpAddresses.Apply(ipAddresses =&gt; ipAddresses[0].IpAddress),
    ///             Port = 3306,
    ///             Username = sourceSqldbUser.Name,
    ///             Password = sourceSqldbUser.Password,
    ///             Ssl = new Gcp.DatabaseMigrationService.Inputs.ConnectionProfileMysqlSslArgs
    ///             {
    ///                 ClientKey = sourceSqlClientCert.PrivateKey,
    ///                 ClientCertificate = sourceSqlClientCert.Cert,
    ///                 CaCertificate = sourceSqlClientCert.ServerCaCert,
    ///                 Type = "SERVER_CLIENT",
    ///             },
    ///             CloudSqlId = "source-csql",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             sourceSqldbUser,
    ///         },
    ///     });
    /// 
    ///     var destinationCsql = new Gcp.Sql.DatabaseInstance("destination_csql", new()
    ///     {
    ///         Name = "destination-csql",
    ///         DatabaseVersion = "MYSQL_5_7",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-n1-standard-1",
    ///             DeletionProtectionEnabled = false,
    ///         },
    ///         DeletionProtection = false,
    ///     });
    /// 
    ///     var destinationCp = new Gcp.DatabaseMigrationService.ConnectionProfile("destination_cp", new()
    ///     {
    ///         Location = "us-central1",
    ///         ConnectionProfileId = "destination-cp",
    ///         DisplayName = "destination-cp_display",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Mysql = new Gcp.DatabaseMigrationService.Inputs.ConnectionProfileMysqlArgs
    ///         {
    ///             CloudSqlId = "destination-csql",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             destinationCsql,
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "destination-csql",
    ///     });
    /// 
    ///     var mysqltomysql = new Gcp.DatabaseMigrationService.MigrationJob("mysqltomysql", new()
    ///     {
    ///         Location = "us-central1",
    ///         MigrationJobId = "my-migrationid",
    ///         DisplayName = "my-migrationid_display",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         PerformanceConfig = new Gcp.DatabaseMigrationService.Inputs.MigrationJobPerformanceConfigArgs
    ///         {
    ///             DumpParallelLevel = "MAX",
    ///         },
    ///         VpcPeeringConnectivity = new Gcp.DatabaseMigrationService.Inputs.MigrationJobVpcPeeringConnectivityArgs
    ///         {
    ///             Vpc = @default.Id,
    ///         },
    ///         DumpType = "LOGICAL",
    ///         DumpFlags = new Gcp.DatabaseMigrationService.Inputs.MigrationJobDumpFlagsArgs
    ///         {
    ///             DumpFlags = new[]
    ///             {
    ///                 new Gcp.DatabaseMigrationService.Inputs.MigrationJobDumpFlagsDumpFlagArgs
    ///                 {
    ///                     Name = "max-allowed-packet",
    ///                     Value = "1073741824",
    ///                 },
    ///             },
    ///         },
    ///         Source = sourceCp.Name,
    ///         Destination = destinationCp.Name,
    ///         Type = "CONTINUOUS",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Database Migration Service Migration Job Postgres To Postgres
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var sourceCsql = new Gcp.Sql.DatabaseInstance("source_csql", new()
    ///     {
    ///         Name = "source-csql",
    ///         DatabaseVersion = "POSTGRES_15",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-custom-2-13312",
    ///             DeletionProtectionEnabled = false,
    ///         },
    ///         DeletionProtection = false,
    ///     });
    /// 
    ///     var sourceSqlClientCert = new Gcp.Sql.SslCert("source_sql_client_cert", new()
    ///     {
    ///         CommonName = "cert",
    ///         Instance = sourceCsql.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             sourceCsql,
    ///         },
    ///     });
    /// 
    ///     var sourceSqldbUser = new Gcp.Sql.User("source_sqldb_user", new()
    ///     {
    ///         Name = "username",
    ///         Instance = sourceCsql.Name,
    ///         Password = "password",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             sourceSqlClientCert,
    ///         },
    ///     });
    /// 
    ///     var sourceCp = new Gcp.DatabaseMigrationService.ConnectionProfile("source_cp", new()
    ///     {
    ///         Location = "us-central1",
    ///         ConnectionProfileId = "source-cp",
    ///         DisplayName = "source-cp_display",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Postgresql = new Gcp.DatabaseMigrationService.Inputs.ConnectionProfilePostgresqlArgs
    ///         {
    ///             Host = sourceCsql.IpAddresses.Apply(ipAddresses =&gt; ipAddresses[0].IpAddress),
    ///             Port = 3306,
    ///             Username = sourceSqldbUser.Name,
    ///             Password = sourceSqldbUser.Password,
    ///             Ssl = new Gcp.DatabaseMigrationService.Inputs.ConnectionProfilePostgresqlSslArgs
    ///             {
    ///                 ClientKey = sourceSqlClientCert.PrivateKey,
    ///                 ClientCertificate = sourceSqlClientCert.Cert,
    ///                 CaCertificate = sourceSqlClientCert.ServerCaCert,
    ///                 Type = "SERVER_CLIENT",
    ///             },
    ///             CloudSqlId = "source-csql",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             sourceSqldbUser,
    ///         },
    ///     });
    /// 
    ///     var destinationCsql = new Gcp.Sql.DatabaseInstance("destination_csql", new()
    ///     {
    ///         Name = "destination-csql",
    ///         DatabaseVersion = "POSTGRES_15",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-custom-2-13312",
    ///             DeletionProtectionEnabled = false,
    ///         },
    ///         DeletionProtection = false,
    ///     });
    /// 
    ///     var destinationCp = new Gcp.DatabaseMigrationService.ConnectionProfile("destination_cp", new()
    ///     {
    ///         Location = "us-central1",
    ///         ConnectionProfileId = "destination-cp",
    ///         DisplayName = "destination-cp_display",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Postgresql = new Gcp.DatabaseMigrationService.Inputs.ConnectionProfilePostgresqlArgs
    ///         {
    ///             CloudSqlId = "destination-csql",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             destinationCsql,
    ///         },
    ///     });
    /// 
    ///     var psqltopsql = new Gcp.DatabaseMigrationService.MigrationJob("psqltopsql", new()
    ///     {
    ///         Location = "us-central1",
    ///         MigrationJobId = "my-migrationid",
    ///         DisplayName = "my-migrationid_display",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         StaticIpConnectivity = null,
    ///         Source = sourceCp.Name,
    ///         Destination = destinationCp.Name,
    ///         Type = "CONTINUOUS",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Database Migration Service Migration Job Postgres To Alloydb
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var sourceCsql = new Gcp.Sql.DatabaseInstance("source_csql", new()
    ///     {
    ///         Name = "source-csql",
    ///         DatabaseVersion = "POSTGRES_15",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-custom-2-13312",
    ///             DeletionProtectionEnabled = false,
    ///         },
    ///         DeletionProtection = false,
    ///     });
    /// 
    ///     var sourceSqlClientCert = new Gcp.Sql.SslCert("source_sql_client_cert", new()
    ///     {
    ///         CommonName = "cert",
    ///         Instance = sourceCsql.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             sourceCsql,
    ///         },
    ///     });
    /// 
    ///     var sourceSqldbUser = new Gcp.Sql.User("source_sqldb_user", new()
    ///     {
    ///         Name = "username",
    ///         Instance = sourceCsql.Name,
    ///         Password = "password",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             sourceSqlClientCert,
    ///         },
    ///     });
    /// 
    ///     var sourceCp = new Gcp.DatabaseMigrationService.ConnectionProfile("source_cp", new()
    ///     {
    ///         Location = "us-central1",
    ///         ConnectionProfileId = "source-cp",
    ///         DisplayName = "source-cp_display",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Postgresql = new Gcp.DatabaseMigrationService.Inputs.ConnectionProfilePostgresqlArgs
    ///         {
    ///             Host = sourceCsql.IpAddresses.Apply(ipAddresses =&gt; ipAddresses[0].IpAddress),
    ///             Port = 3306,
    ///             Username = sourceSqldbUser.Name,
    ///             Password = sourceSqldbUser.Password,
    ///             Ssl = new Gcp.DatabaseMigrationService.Inputs.ConnectionProfilePostgresqlSslArgs
    ///             {
    ///                 ClientKey = sourceSqlClientCert.PrivateKey,
    ///                 ClientCertificate = sourceSqlClientCert.Cert,
    ///                 CaCertificate = sourceSqlClientCert.ServerCaCert,
    ///                 Type = "SERVER_CLIENT",
    ///             },
    ///             CloudSqlId = "source-csql",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             sourceSqldbUser,
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "destination-alloydb",
    ///     });
    /// 
    ///     var destinationAlloydb = new Gcp.Alloydb.Cluster("destination_alloydb", new()
    ///     {
    ///         ClusterId = "destination-alloydb",
    ///         Location = "us-central1",
    ///         NetworkConfig = new Gcp.Alloydb.Inputs.ClusterNetworkConfigArgs
    ///         {
    ///             Network = @default.Id,
    ///         },
    ///         DatabaseVersion = "POSTGRES_15",
    ///         InitialUser = new Gcp.Alloydb.Inputs.ClusterInitialUserArgs
    ///         {
    ///             User = "destination-alloydb",
    ///             Password = "destination-alloydb",
    ///         },
    ///     });
    /// 
    ///     var privateIpAlloc = new Gcp.Compute.GlobalAddress("private_ip_alloc", new()
    ///     {
    ///         Name = "destination-alloydb",
    ///         AddressType = "INTERNAL",
    ///         Purpose = "VPC_PEERING",
    ///         PrefixLength = 16,
    ///         Network = @default.Id,
    ///     });
    /// 
    ///     var vpcConnection = new Gcp.ServiceNetworking.Connection("vpc_connection", new()
    ///     {
    ///         Network = @default.Id,
    ///         Service = "servicenetworking.googleapis.com",
    ///         ReservedPeeringRanges = new[]
    ///         {
    ///             privateIpAlloc.Name,
    ///         },
    ///     });
    /// 
    ///     var destinationAlloydbPrimary = new Gcp.Alloydb.Instance("destination_alloydb_primary", new()
    ///     {
    ///         Cluster = destinationAlloydb.Name,
    ///         InstanceId = "destination-alloydb-primary",
    ///         InstanceType = "PRIMARY",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             vpcConnection,
    ///         },
    ///     });
    /// 
    ///     var destinationCp = new Gcp.DatabaseMigrationService.ConnectionProfile("destination_cp", new()
    ///     {
    ///         Location = "us-central1",
    ///         ConnectionProfileId = "destination-cp",
    ///         DisplayName = "destination-cp_display",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Postgresql = new Gcp.DatabaseMigrationService.Inputs.ConnectionProfilePostgresqlArgs
    ///         {
    ///             AlloydbClusterId = "destination-alloydb",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             destinationAlloydb,
    ///             destinationAlloydbPrimary,
    ///         },
    ///     });
    /// 
    ///     var psqltoalloydb = new Gcp.DatabaseMigrationService.MigrationJob("psqltoalloydb", new()
    ///     {
    ///         Location = "us-central1",
    ///         MigrationJobId = "my-migrationid",
    ///         DisplayName = "my-migrationid_display",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         StaticIpConnectivity = null,
    ///         Source = sourceCp.Name,
    ///         Destination = destinationCp.Name,
    ///         Type = "CONTINUOUS",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// MigrationJob can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/migrationJobs/{{migration_job_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{migration_job_id}}`
    /// 
    /// * `{{location}}/{{migration_job_id}}`
    /// 
    /// When using the `pulumi import` command, MigrationJob can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:databasemigrationservice/migrationJob:MigrationJob default projects/{{project}}/locations/{{location}}/migrationJobs/{{migration_job_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:databasemigrationservice/migrationJob:MigrationJob default {{project}}/{{location}}/{{migration_job_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:databasemigrationservice/migrationJob:MigrationJob default {{location}}/{{migration_job_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:databasemigrationservice/migrationJob:MigrationJob")]
    public partial class MigrationJob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC 'Zulu' format, accurate to nanoseconds. Example: '2014-10-02T15:01:23.045123456Z'.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The name of the destination connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{destinationConnectionProfile}.
        /// </summary>
        [Output("destination")]
        public Output<string> Destination { get; private set; } = null!;

        /// <summary>
        /// The migration job display name.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The initial dump flags.
        /// Structure is documented below.
        /// </summary>
        [Output("dumpFlags")]
        public Output<Outputs.MigrationJobDumpFlags?> DumpFlags { get; private set; } = null!;

        /// <summary>
        /// The path to the dump file in Google Cloud Storage,
        /// in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
        /// This field and the "dump_flags" field are mutually exclusive.
        /// </summary>
        [Output("dumpPath")]
        public Output<string?> DumpPath { get; private set; } = null!;

        /// <summary>
        /// The type of the data dump. Supported for MySQL to CloudSQL for MySQL
        /// migrations only.
        /// Possible values are: `LOGICAL`, `PHYSICAL`.
        /// </summary>
        [Output("dumpType")]
        public Output<string?> DumpType { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Output only. The error details in case of state FAILED.
        /// Structure is documented below.
        /// </summary>
        [Output("errors")]
        public Output<ImmutableArray<Outputs.MigrationJobError>> Errors { get; private set; } = null!;

        /// <summary>
        /// The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location where the migration job should reside.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The ID of the migration job.
        /// </summary>
        [Output("migrationJobId")]
        public Output<string> MigrationJobId { get; private set; } = null!;

        /// <summary>
        /// The name of this migration job resource in the form of projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Data dump parallelism settings used by the migration.
        /// Structure is documented below.
        /// </summary>
        [Output("performanceConfig")]
        public Output<Outputs.MigrationJobPerformanceConfig?> PerformanceConfig { get; private set; } = null!;

        /// <summary>
        /// The current migration job phase.
        /// </summary>
        [Output("phase")]
        public Output<string> Phase { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The details of the VPC network that the source database is located in.
        /// Structure is documented below.
        /// </summary>
        [Output("reverseSshConnectivity")]
        public Output<Outputs.MigrationJobReverseSshConnectivity?> ReverseSshConnectivity { get; private set; } = null!;

        /// <summary>
        /// The name of the source connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{sourceConnectionProfile}.
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;

        /// <summary>
        /// The current migration job state.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// If set to an empty object (`{}`), the source database will allow incoming
        /// connections from the public IP of the destination database.
        /// You can retrieve the public IP of the Cloud SQL instance from the
        /// Cloud SQL console or using Cloud SQL APIs.
        /// </summary>
        [Output("staticIpConnectivity")]
        public Output<Outputs.MigrationJobStaticIpConnectivity?> StaticIpConnectivity { get; private set; } = null!;

        /// <summary>
        /// The type of the migration job.
        /// Possible values are: `ONE_TIME`, `CONTINUOUS`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The details of the VPC network that the source database is located in.
        /// Structure is documented below.
        /// </summary>
        [Output("vpcPeeringConnectivity")]
        public Output<Outputs.MigrationJobVpcPeeringConnectivity?> VpcPeeringConnectivity { get; private set; } = null!;


        /// <summary>
        /// Create a MigrationJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MigrationJob(string name, MigrationJobArgs args, CustomResourceOptions? options = null)
            : base("gcp:databasemigrationservice/migrationJob:MigrationJob", name, args ?? new MigrationJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MigrationJob(string name, Input<string> id, MigrationJobState? state = null, CustomResourceOptions? options = null)
            : base("gcp:databasemigrationservice/migrationJob:MigrationJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MigrationJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MigrationJob Get(string name, Input<string> id, MigrationJobState? state = null, CustomResourceOptions? options = null)
        {
            return new MigrationJob(name, id, state, options);
        }
    }

    public sealed class MigrationJobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the destination connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{destinationConnectionProfile}.
        /// </summary>
        [Input("destination", required: true)]
        public Input<string> Destination { get; set; } = null!;

        /// <summary>
        /// The migration job display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The initial dump flags.
        /// Structure is documented below.
        /// </summary>
        [Input("dumpFlags")]
        public Input<Inputs.MigrationJobDumpFlagsArgs>? DumpFlags { get; set; }

        /// <summary>
        /// The path to the dump file in Google Cloud Storage,
        /// in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
        /// This field and the "dump_flags" field are mutually exclusive.
        /// </summary>
        [Input("dumpPath")]
        public Input<string>? DumpPath { get; set; }

        /// <summary>
        /// The type of the data dump. Supported for MySQL to CloudSQL for MySQL
        /// migrations only.
        /// Possible values are: `LOGICAL`, `PHYSICAL`.
        /// </summary>
        [Input("dumpType")]
        public Input<string>? DumpType { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where the migration job should reside.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the migration job.
        /// </summary>
        [Input("migrationJobId", required: true)]
        public Input<string> MigrationJobId { get; set; } = null!;

        /// <summary>
        /// Data dump parallelism settings used by the migration.
        /// Structure is documented below.
        /// </summary>
        [Input("performanceConfig")]
        public Input<Inputs.MigrationJobPerformanceConfigArgs>? PerformanceConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The details of the VPC network that the source database is located in.
        /// Structure is documented below.
        /// </summary>
        [Input("reverseSshConnectivity")]
        public Input<Inputs.MigrationJobReverseSshConnectivityArgs>? ReverseSshConnectivity { get; set; }

        /// <summary>
        /// The name of the source connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{sourceConnectionProfile}.
        /// </summary>
        [Input("source", required: true)]
        public Input<string> Source { get; set; } = null!;

        /// <summary>
        /// If set to an empty object (`{}`), the source database will allow incoming
        /// connections from the public IP of the destination database.
        /// You can retrieve the public IP of the Cloud SQL instance from the
        /// Cloud SQL console or using Cloud SQL APIs.
        /// </summary>
        [Input("staticIpConnectivity")]
        public Input<Inputs.MigrationJobStaticIpConnectivityArgs>? StaticIpConnectivity { get; set; }

        /// <summary>
        /// The type of the migration job.
        /// Possible values are: `ONE_TIME`, `CONTINUOUS`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The details of the VPC network that the source database is located in.
        /// Structure is documented below.
        /// </summary>
        [Input("vpcPeeringConnectivity")]
        public Input<Inputs.MigrationJobVpcPeeringConnectivityArgs>? VpcPeeringConnectivity { get; set; }

        public MigrationJobArgs()
        {
        }
        public static new MigrationJobArgs Empty => new MigrationJobArgs();
    }

    public sealed class MigrationJobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC 'Zulu' format, accurate to nanoseconds. Example: '2014-10-02T15:01:23.045123456Z'.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The name of the destination connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{destinationConnectionProfile}.
        /// </summary>
        [Input("destination")]
        public Input<string>? Destination { get; set; }

        /// <summary>
        /// The migration job display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The initial dump flags.
        /// Structure is documented below.
        /// </summary>
        [Input("dumpFlags")]
        public Input<Inputs.MigrationJobDumpFlagsGetArgs>? DumpFlags { get; set; }

        /// <summary>
        /// The path to the dump file in Google Cloud Storage,
        /// in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
        /// This field and the "dump_flags" field are mutually exclusive.
        /// </summary>
        [Input("dumpPath")]
        public Input<string>? DumpPath { get; set; }

        /// <summary>
        /// The type of the data dump. Supported for MySQL to CloudSQL for MySQL
        /// migrations only.
        /// Possible values are: `LOGICAL`, `PHYSICAL`.
        /// </summary>
        [Input("dumpType")]
        public Input<string>? DumpType { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("errors")]
        private InputList<Inputs.MigrationJobErrorGetArgs>? _errors;

        /// <summary>
        /// Output only. The error details in case of state FAILED.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.MigrationJobErrorGetArgs> Errors
        {
            get => _errors ?? (_errors = new InputList<Inputs.MigrationJobErrorGetArgs>());
            set => _errors = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where the migration job should reside.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the migration job.
        /// </summary>
        [Input("migrationJobId")]
        public Input<string>? MigrationJobId { get; set; }

        /// <summary>
        /// The name of this migration job resource in the form of projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Data dump parallelism settings used by the migration.
        /// Structure is documented below.
        /// </summary>
        [Input("performanceConfig")]
        public Input<Inputs.MigrationJobPerformanceConfigGetArgs>? PerformanceConfig { get; set; }

        /// <summary>
        /// The current migration job phase.
        /// </summary>
        [Input("phase")]
        public Input<string>? Phase { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The details of the VPC network that the source database is located in.
        /// Structure is documented below.
        /// </summary>
        [Input("reverseSshConnectivity")]
        public Input<Inputs.MigrationJobReverseSshConnectivityGetArgs>? ReverseSshConnectivity { get; set; }

        /// <summary>
        /// The name of the source connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{sourceConnectionProfile}.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// The current migration job state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// If set to an empty object (`{}`), the source database will allow incoming
        /// connections from the public IP of the destination database.
        /// You can retrieve the public IP of the Cloud SQL instance from the
        /// Cloud SQL console or using Cloud SQL APIs.
        /// </summary>
        [Input("staticIpConnectivity")]
        public Input<Inputs.MigrationJobStaticIpConnectivityGetArgs>? StaticIpConnectivity { get; set; }

        /// <summary>
        /// The type of the migration job.
        /// Possible values are: `ONE_TIME`, `CONTINUOUS`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The details of the VPC network that the source database is located in.
        /// Structure is documented below.
        /// </summary>
        [Input("vpcPeeringConnectivity")]
        public Input<Inputs.MigrationJobVpcPeeringConnectivityGetArgs>? VpcPeeringConnectivity { get; set; }

        public MigrationJobState()
        {
        }
        public static new MigrationJobState Empty => new MigrationJobState();
    }
}
