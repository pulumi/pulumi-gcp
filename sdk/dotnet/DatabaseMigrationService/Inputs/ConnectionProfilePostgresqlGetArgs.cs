// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DatabaseMigrationService.Inputs
{

    public sealed class ConnectionProfilePostgresqlGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If the connected database is an AlloyDB instance, use this field to provide the AlloyDB cluster ID.
        /// </summary>
        [Input("alloydbClusterId")]
        public Input<string>? AlloydbClusterId { get; set; }

        /// <summary>
        /// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
        /// </summary>
        [Input("cloudSqlId")]
        public Input<string>? CloudSqlId { get; set; }

        /// <summary>
        /// The IP or hostname of the source MySQL database.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// (Output)
        /// Output only. If the source is a Cloud SQL database, this field indicates the network architecture it's associated with.
        /// </summary>
        [Input("networkArchitecture")]
        public Input<string>? NetworkArchitecture { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Input only. The password for the user that Database Migration Service will be using to connect to the database.
        /// This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Output)
        /// Output only. Indicates If this connection profile password is stored.
        /// </summary>
        [Input("passwordSet")]
        public Input<bool>? PasswordSet { get; set; }

        /// <summary>
        /// The network port of the source MySQL database.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// SSL configuration for the destination to connect to the source database.
        /// Structure is documented below.
        /// </summary>
        [Input("ssl")]
        public Input<Inputs.ConnectionProfilePostgresqlSslGetArgs>? Ssl { get; set; }

        /// <summary>
        /// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ConnectionProfilePostgresqlGetArgs()
        {
        }
        public static new ConnectionProfilePostgresqlGetArgs Empty => new ConnectionProfilePostgresqlGetArgs();
    }
}
