// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.GkeBackup
{
    /// <summary>
    /// A BackupChannel imposes constraints on where clusters can be backed up.
    /// The BackupChannel should be in the same project and region
    /// as the cluster being backed up.
    /// The backup can be created only in destination_project.
    /// 
    /// To get more information about BackupChannel, see:
    /// 
    /// * [API documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/projects.locations.backupChannels)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke)
    /// 
    /// ## Example Usage
    /// 
    /// ### Gkebackup Backupchannel Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basic = new Gcp.GkeBackup.BackupChannel("basic", new()
    ///     {
    ///         Name = "basic-channel",
    ///         Location = "us-central1",
    ///         Description = "",
    ///         DestinationProject = "projects/24240755850",
    ///         Labels = 
    ///         {
    ///             { "key", "some-value" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// BackupChannel can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/backupChannels/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, BackupChannel can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:gkebackup/backupChannel:BackupChannel default projects/{{project}}/locations/{{location}}/backupChannels/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:gkebackup/backupChannel:BackupChannel default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:gkebackup/backupChannel:BackupChannel default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:gkebackup/backupChannel:BackupChannel")]
    public partial class BackupChannel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// User specified descriptive string for this BackupChannel.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The project where Backups are allowed to be stored.
        /// The format is `projects/{project}`.
        /// {project} can only be a project number.
        /// </summary>
        [Output("destinationProject")]
        public Output<string> DestinationProject { get; private set; } = null!;

        /// <summary>
        /// The project_id where Backups are allowed to be stored.
        /// Example Project ID: "my-project-id".
        /// </summary>
        [Output("destinationProjectId")]
        public Output<string> DestinationProjectId { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// etag is used for optimistic concurrency control as a way to help prevent simultaneous
        /// updates of a backup channel from overwriting each other. It is strongly suggested that
        /// systems make use of the 'etag' in the read-modify-write cycle to perform BackupChannel updates
        /// in order to avoid race conditions: An etag is returned in the response to backupChannels.get,
        /// and systems are expected to put that etag in the request to backupChannels.patch or
        /// backupChannels.delete to ensure that their change will be applied to the same version of the resource.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Description: A set of custom labels supplied by the user.
        /// A list of key-&gt;value pairs.
        /// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The region of the Backup Channel.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The full name of the BackupChannel Resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Server generated, unique identifier of UUID format.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a BackupChannel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackupChannel(string name, BackupChannelArgs args, CustomResourceOptions? options = null)
            : base("gcp:gkebackup/backupChannel:BackupChannel", name, args ?? new BackupChannelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackupChannel(string name, Input<string> id, BackupChannelState? state = null, CustomResourceOptions? options = null)
            : base("gcp:gkebackup/backupChannel:BackupChannel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackupChannel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackupChannel Get(string name, Input<string> id, BackupChannelState? state = null, CustomResourceOptions? options = null)
        {
            return new BackupChannel(name, id, state, options);
        }
    }

    public sealed class BackupChannelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User specified descriptive string for this BackupChannel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The project where Backups are allowed to be stored.
        /// The format is `projects/{project}`.
        /// {project} can only be a project number.
        /// </summary>
        [Input("destinationProject", required: true)]
        public Input<string> DestinationProject { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Description: A set of custom labels supplied by the user.
        /// A list of key-&gt;value pairs.
        /// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The region of the Backup Channel.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The full name of the BackupChannel Resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public BackupChannelArgs()
        {
        }
        public static new BackupChannelArgs Empty => new BackupChannelArgs();
    }

    public sealed class BackupChannelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User specified descriptive string for this BackupChannel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The project where Backups are allowed to be stored.
        /// The format is `projects/{project}`.
        /// {project} can only be a project number.
        /// </summary>
        [Input("destinationProject")]
        public Input<string>? DestinationProject { get; set; }

        /// <summary>
        /// The project_id where Backups are allowed to be stored.
        /// Example Project ID: "my-project-id".
        /// </summary>
        [Input("destinationProjectId")]
        public Input<string>? DestinationProjectId { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// etag is used for optimistic concurrency control as a way to help prevent simultaneous
        /// updates of a backup channel from overwriting each other. It is strongly suggested that
        /// systems make use of the 'etag' in the read-modify-write cycle to perform BackupChannel updates
        /// in order to avoid race conditions: An etag is returned in the response to backupChannels.get,
        /// and systems are expected to put that etag in the request to backupChannels.patch or
        /// backupChannels.delete to ensure that their change will be applied to the same version of the resource.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Description: A set of custom labels supplied by the user.
        /// A list of key-&gt;value pairs.
        /// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The region of the Backup Channel.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The full name of the BackupChannel Resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Server generated, unique identifier of UUID format.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public BackupChannelState()
        {
        }
        public static new BackupChannelState Empty => new BackupChannelState();
    }
}
