// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.GkeBackup.Outputs
{

    [OutputType]
    public sealed class BackupPlanBackupConfig
    {
        /// <summary>
        /// If True, include all namespaced resources.
        /// </summary>
        public readonly bool? AllNamespaces;
        /// <summary>
        /// This defines a customer managed encryption key that will be used to encrypt the "config"
        /// portion (the Kubernetes resources) of Backups created via this plan.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.BackupPlanBackupConfigEncryptionKey? EncryptionKey;
        /// <summary>
        /// This flag specifies whether Kubernetes Secret resources should be included
        /// when they fall into the scope of Backups.
        /// </summary>
        public readonly bool? IncludeSecrets;
        /// <summary>
        /// This flag specifies whether volume data should be backed up when PVCs are
        /// included in the scope of a Backup.
        /// </summary>
        public readonly bool? IncludeVolumeData;
        /// <summary>
        /// A list of namespaced Kubernetes Resources.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.BackupPlanBackupConfigSelectedApplications? SelectedApplications;
        /// <summary>
        /// If set, include just the resources in the listed namespaces.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.BackupPlanBackupConfigSelectedNamespaces? SelectedNamespaces;

        [OutputConstructor]
        private BackupPlanBackupConfig(
            bool? allNamespaces,

            Outputs.BackupPlanBackupConfigEncryptionKey? encryptionKey,

            bool? includeSecrets,

            bool? includeVolumeData,

            Outputs.BackupPlanBackupConfigSelectedApplications? selectedApplications,

            Outputs.BackupPlanBackupConfigSelectedNamespaces? selectedNamespaces)
        {
            AllNamespaces = allNamespaces;
            EncryptionKey = encryptionKey;
            IncludeSecrets = includeSecrets;
            IncludeVolumeData = includeVolumeData;
            SelectedApplications = selectedApplications;
            SelectedNamespaces = selectedNamespaces;
        }
    }
}
