// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Workbench
{
    /// <summary>
    /// A Workbench instance.
    /// 
    /// To get more information about Instance, see:
    /// 
    /// * [API documentation](https://cloud.google.com/vertex-ai/docs/workbench/reference/rest/v2/projects.locations.instances)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/vertex-ai/docs/workbench/instances/introduction)
    /// 
    /// ## Example Usage
    /// 
    /// ### Workbench Instance Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Workbench.Instance("instance", new()
    ///     {
    ///         Name = "workbench-instance",
    ///         Location = "us-west1-a",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Workbench Instance Basic Container
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Workbench.Instance("instance", new()
    ///     {
    ///         Name = "workbench-instance",
    ///         Location = "us-west1-a",
    ///         GceSetup = new Gcp.Workbench.Inputs.InstanceGceSetupArgs
    ///         {
    ///             ContainerImage = new Gcp.Workbench.Inputs.InstanceGceSetupContainerImageArgs
    ///             {
    ///                 Repository = "us-docker.pkg.dev/deeplearning-platform-release/gcr.io/base-cu113.py310",
    ///                 Tag = "latest",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Workbench Instance Basic Gpu
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Workbench.Instance("instance", new()
    ///     {
    ///         Name = "workbench-instance",
    ///         Location = "us-central1-a",
    ///         GceSetup = new Gcp.Workbench.Inputs.InstanceGceSetupArgs
    ///         {
    ///             MachineType = "n1-standard-1",
    ///             AcceleratorConfigs = new[]
    ///             {
    ///                 new Gcp.Workbench.Inputs.InstanceGceSetupAcceleratorConfigArgs
    ///                 {
    ///                     Type = "NVIDIA_TESLA_T4",
    ///                     CoreCount = "1",
    ///                 },
    ///             },
    ///             VmImage = new Gcp.Workbench.Inputs.InstanceGceSetupVmImageArgs
    ///             {
    ///                 Project = "cloud-notebooks-managed",
    ///                 Family = "workbench-instances",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Workbench Instance Labels Stopped
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Workbench.Instance("instance", new()
    ///     {
    ///         Name = "workbench-instance",
    ///         Location = "us-central1-a",
    ///         GceSetup = new Gcp.Workbench.Inputs.InstanceGceSetupArgs
    ///         {
    ///             MachineType = "e2-standard-4",
    ///             ShieldedInstanceConfig = new Gcp.Workbench.Inputs.InstanceGceSetupShieldedInstanceConfigArgs
    ///             {
    ///                 EnableSecureBoot = false,
    ///                 EnableVtpm = false,
    ///                 EnableIntegrityMonitoring = false,
    ///             },
    ///             ServiceAccounts = new[]
    ///             {
    ///                 new Gcp.Workbench.Inputs.InstanceGceSetupServiceAccountArgs
    ///                 {
    ///                     Email = "my@service-account.com",
    ///                 },
    ///             },
    ///             Metadata = 
    ///             {
    ///                 { "terraform", "true" },
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "k", "val" },
    ///         },
    ///         DesiredState = "STOPPED",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Workbench Instance Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myNetwork = new Gcp.Compute.Network("my_network", new()
    ///     {
    ///         Name = "wbi-test-default",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var mySubnetwork = new Gcp.Compute.Subnetwork("my_subnetwork", new()
    ///     {
    ///         Name = "wbi-test-default",
    ///         Network = myNetwork.Id,
    ///         Region = "us-central1",
    ///         IpCidrRange = "10.0.1.0/24",
    ///     });
    /// 
    ///     var @static = new Gcp.Compute.Address("static", new()
    ///     {
    ///         Name = "wbi-test-default",
    ///     });
    /// 
    ///     var actAsPermission = new Gcp.ServiceAccount.IAMBinding("act_as_permission", new()
    ///     {
    ///         ServiceAccountId = "projects/my-project-name/serviceAccounts/my@service-account.com",
    ///         Role = "roles/iam.serviceAccountUser",
    ///         Members = new[]
    ///         {
    ///             "user:example@example.com",
    ///         },
    ///     });
    /// 
    ///     var instance = new Gcp.Workbench.Instance("instance", new()
    ///     {
    ///         Name = "workbench-instance",
    ///         Location = "us-central1-a",
    ///         GceSetup = new Gcp.Workbench.Inputs.InstanceGceSetupArgs
    ///         {
    ///             MachineType = "n1-standard-4",
    ///             AcceleratorConfigs = new[]
    ///             {
    ///                 new Gcp.Workbench.Inputs.InstanceGceSetupAcceleratorConfigArgs
    ///                 {
    ///                     Type = "NVIDIA_TESLA_T4",
    ///                     CoreCount = "1",
    ///                 },
    ///             },
    ///             ShieldedInstanceConfig = new Gcp.Workbench.Inputs.InstanceGceSetupShieldedInstanceConfigArgs
    ///             {
    ///                 EnableSecureBoot = true,
    ///                 EnableVtpm = true,
    ///                 EnableIntegrityMonitoring = true,
    ///             },
    ///             DisablePublicIp = false,
    ///             ServiceAccounts = new[]
    ///             {
    ///                 new Gcp.Workbench.Inputs.InstanceGceSetupServiceAccountArgs
    ///                 {
    ///                     Email = "my@service-account.com",
    ///                 },
    ///             },
    ///             BootDisk = new Gcp.Workbench.Inputs.InstanceGceSetupBootDiskArgs
    ///             {
    ///                 DiskSizeGb = "310",
    ///                 DiskType = "PD_SSD",
    ///                 DiskEncryption = "CMEK",
    ///                 KmsKey = "my-crypto-key",
    ///             },
    ///             DataDisks = new Gcp.Workbench.Inputs.InstanceGceSetupDataDisksArgs
    ///             {
    ///                 DiskSizeGb = "330",
    ///                 DiskType = "PD_SSD",
    ///                 DiskEncryption = "CMEK",
    ///                 KmsKey = "my-crypto-key",
    ///             },
    ///             NetworkInterfaces = new[]
    ///             {
    ///                 new Gcp.Workbench.Inputs.InstanceGceSetupNetworkInterfaceArgs
    ///                 {
    ///                     Network = myNetwork.Id,
    ///                     Subnet = mySubnetwork.Id,
    ///                     NicType = "GVNIC",
    ///                     AccessConfigs = new[]
    ///                     {
    ///                         new Gcp.Workbench.Inputs.InstanceGceSetupNetworkInterfaceAccessConfigArgs
    ///                         {
    ///                             ExternalIp = @static.IPAddress,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Metadata = 
    ///             {
    ///                 { "terraform", "true" },
    ///             },
    ///             EnableIpForwarding = true,
    ///             Tags = new[]
    ///             {
    ///                 "abc",
    ///                 "def",
    ///             },
    ///         },
    ///         DisableProxyAccess = true,
    ///         InstanceOwners = new[]
    ///         {
    ///             "example@example.com",
    ///         },
    ///         Labels = 
    ///         {
    ///             { "k", "val" },
    ///         },
    ///         DesiredState = "ACTIVE",
    ///         EnableThirdPartyIdentity = true,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             myNetwork,
    ///             mySubnetwork,
    ///             @static,
    ///             actAsPermission,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Workbench Instance Confidential Compute
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Gcp.Workbench.Instance("instance", new()
    ///     {
    ///         Name = "workbench-instance",
    ///         Location = "us-central1-a",
    ///         GceSetup = new Gcp.Workbench.Inputs.InstanceGceSetupArgs
    ///         {
    ///             MachineType = "n2d-standard-2",
    ///             ShieldedInstanceConfig = new Gcp.Workbench.Inputs.InstanceGceSetupShieldedInstanceConfigArgs
    ///             {
    ///                 EnableSecureBoot = true,
    ///                 EnableVtpm = true,
    ///                 EnableIntegrityMonitoring = true,
    ///             },
    ///             Metadata = 
    ///             {
    ///                 { "terraform", "true" },
    ///             },
    ///             ConfidentialInstanceConfig = new Gcp.Workbench.Inputs.InstanceGceSetupConfidentialInstanceConfigArgs
    ///             {
    ///                 ConfidentialInstanceType = "SEV",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Instance can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/instances/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:workbench/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:workbench/instance:Instance default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:workbench/instance:Instance default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:workbench/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
        /// The milliseconds portion (".SSS") is optional.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Output only. Email address of entity that sent original CreateInstance request.
        /// </summary>
        [Output("creator")]
        public Output<string> Creator { get; private set; } = null!;

        /// <summary>
        /// Desired state of the Workbench Instance. Set this field to `ACTIVE` to start the Instance, and `STOPPED` to stop the Instance.
        /// </summary>
        [Output("desiredState")]
        public Output<string?> DesiredState { get; private set; } = null!;

        /// <summary>
        /// Optional. If true, the workbench instance will not register with the proxy.
        /// </summary>
        [Output("disableProxyAccess")]
        public Output<bool?> DisableProxyAccess { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Flag that specifies that a notebook can be accessed with third party
        /// identity provider.
        /// </summary>
        [Output("enableThirdPartyIdentity")]
        public Output<bool?> EnableThirdPartyIdentity { get; private set; } = null!;

        /// <summary>
        /// The definition of how to configure a VM instance outside of Resources and Identity.
        /// Structure is documented below.
        /// </summary>
        [Output("gceSetup")]
        public Output<Outputs.InstanceGceSetup> GceSetup { get; private set; } = null!;

        /// <summary>
        /// 'Output only. Additional information about instance health. Example:
        /// healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1", "jupyterlab_api_status":
        /// "-1", "jupyterlab_status": "-1", "updated": "2020-10-18 09:40:03.573409" }'
        /// </summary>
        [Output("healthInfos")]
        public Output<ImmutableArray<Outputs.InstanceHealthInfo>> HealthInfos { get; private set; } = null!;

        /// <summary>
        /// Output only. Instance health_state.
        /// </summary>
        [Output("healthState")]
        public Output<string> HealthState { get; private set; } = null!;

        /// <summary>
        /// Required. User-defined unique ID of this instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string?> InstanceId { get; private set; } = null!;

        /// <summary>
        /// 'Optional. Input only. The owner of this instance after creation. Format:
        /// `alias@example.com` Currently supports one owner only. If not specified, all of
        /// the service account users of your VM instance''s service account can use the instance.
        /// If specified, sets the access mode to `Single user`. For more details, see
        /// https://cloud.google.com/vertex-ai/docs/workbench/instances/manage-access-jupyterlab'
        /// </summary>
        [Output("instanceOwners")]
        public Output<ImmutableArray<string>> InstanceOwners { get; private set; } = null!;

        /// <summary>
        /// Optional. Labels to apply to this instance. These can be later modified
        /// by the UpdateInstance method.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Part of `parent`. See documentation of `projectsId`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Output only. The proxy endpoint that is used to access the Jupyter notebook.
        /// </summary>
        [Output("proxyUri")]
        public Output<string> ProxyUri { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// Output only. The state of this instance upgrade history entry.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
        /// The milliseconds portion (".SSS") is optional.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Output only. The upgrade history of this instance.
        /// Structure is documented below.
        /// </summary>
        [Output("upgradeHistories")]
        public Output<ImmutableArray<Outputs.InstanceUpgradeHistory>> UpgradeHistories { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("gcp:workbench/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:workbench/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Desired state of the Workbench Instance. Set this field to `ACTIVE` to start the Instance, and `STOPPED` to stop the Instance.
        /// </summary>
        [Input("desiredState")]
        public Input<string>? DesiredState { get; set; }

        /// <summary>
        /// Optional. If true, the workbench instance will not register with the proxy.
        /// </summary>
        [Input("disableProxyAccess")]
        public Input<bool>? DisableProxyAccess { get; set; }

        /// <summary>
        /// Flag that specifies that a notebook can be accessed with third party
        /// identity provider.
        /// </summary>
        [Input("enableThirdPartyIdentity")]
        public Input<bool>? EnableThirdPartyIdentity { get; set; }

        /// <summary>
        /// The definition of how to configure a VM instance outside of Resources and Identity.
        /// Structure is documented below.
        /// </summary>
        [Input("gceSetup")]
        public Input<Inputs.InstanceGceSetupArgs>? GceSetup { get; set; }

        /// <summary>
        /// Required. User-defined unique ID of this instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("instanceOwners")]
        private InputList<string>? _instanceOwners;

        /// <summary>
        /// 'Optional. Input only. The owner of this instance after creation. Format:
        /// `alias@example.com` Currently supports one owner only. If not specified, all of
        /// the service account users of your VM instance''s service account can use the instance.
        /// If specified, sets the access mode to `Single user`. For more details, see
        /// https://cloud.google.com/vertex-ai/docs/workbench/instances/manage-access-jupyterlab'
        /// </summary>
        public InputList<string> InstanceOwners
        {
            get => _instanceOwners ?? (_instanceOwners = new InputList<string>());
            set => _instanceOwners = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels to apply to this instance. These can be later modified
        /// by the UpdateInstance method.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Part of `parent`. See documentation of `projectsId`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
        /// The milliseconds portion (".SSS") is optional.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Output only. Email address of entity that sent original CreateInstance request.
        /// </summary>
        [Input("creator")]
        public Input<string>? Creator { get; set; }

        /// <summary>
        /// Desired state of the Workbench Instance. Set this field to `ACTIVE` to start the Instance, and `STOPPED` to stop the Instance.
        /// </summary>
        [Input("desiredState")]
        public Input<string>? DesiredState { get; set; }

        /// <summary>
        /// Optional. If true, the workbench instance will not register with the proxy.
        /// </summary>
        [Input("disableProxyAccess")]
        public Input<bool>? DisableProxyAccess { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Flag that specifies that a notebook can be accessed with third party
        /// identity provider.
        /// </summary>
        [Input("enableThirdPartyIdentity")]
        public Input<bool>? EnableThirdPartyIdentity { get; set; }

        /// <summary>
        /// The definition of how to configure a VM instance outside of Resources and Identity.
        /// Structure is documented below.
        /// </summary>
        [Input("gceSetup")]
        public Input<Inputs.InstanceGceSetupGetArgs>? GceSetup { get; set; }

        [Input("healthInfos")]
        private InputList<Inputs.InstanceHealthInfoGetArgs>? _healthInfos;

        /// <summary>
        /// 'Output only. Additional information about instance health. Example:
        /// healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1", "jupyterlab_api_status":
        /// "-1", "jupyterlab_status": "-1", "updated": "2020-10-18 09:40:03.573409" }'
        /// </summary>
        public InputList<Inputs.InstanceHealthInfoGetArgs> HealthInfos
        {
            get => _healthInfos ?? (_healthInfos = new InputList<Inputs.InstanceHealthInfoGetArgs>());
            set => _healthInfos = value;
        }

        /// <summary>
        /// Output only. Instance health_state.
        /// </summary>
        [Input("healthState")]
        public Input<string>? HealthState { get; set; }

        /// <summary>
        /// Required. User-defined unique ID of this instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("instanceOwners")]
        private InputList<string>? _instanceOwners;

        /// <summary>
        /// 'Optional. Input only. The owner of this instance after creation. Format:
        /// `alias@example.com` Currently supports one owner only. If not specified, all of
        /// the service account users of your VM instance''s service account can use the instance.
        /// If specified, sets the access mode to `Single user`. For more details, see
        /// https://cloud.google.com/vertex-ai/docs/workbench/instances/manage-access-jupyterlab'
        /// </summary>
        public InputList<string> InstanceOwners
        {
            get => _instanceOwners ?? (_instanceOwners = new InputList<string>());
            set => _instanceOwners = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels to apply to this instance. These can be later modified
        /// by the UpdateInstance method.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Part of `parent`. See documentation of `projectsId`.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Output only. The proxy endpoint that is used to access the Jupyter notebook.
        /// </summary>
        [Input("proxyUri")]
        public Input<string>? ProxyUri { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// (Output)
        /// Output only. The state of this instance upgrade history entry.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
        /// The milliseconds portion (".SSS") is optional.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        [Input("upgradeHistories")]
        private InputList<Inputs.InstanceUpgradeHistoryGetArgs>? _upgradeHistories;

        /// <summary>
        /// Output only. The upgrade history of this instance.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.InstanceUpgradeHistoryGetArgs> UpgradeHistories
        {
            get => _upgradeHistories ?? (_upgradeHistories = new InputList<Inputs.InstanceUpgradeHistoryGetArgs>());
            set => _upgradeHistories = value;
        }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
