// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ServiceNetworking
{
    /// <summary>
    /// Allows management of a single peered DNS domain for an existing Google Cloud Platform project.
    /// 
    /// When using Google Cloud DNS to manage internal DNS, create peered DNS domains to make your DNS available to services like Google Cloud Build.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var name = new Gcp.ServiceNetworking.PeeredDnsDomain("name", new Gcp.ServiceNetworking.PeeredDnsDomainArgs
    ///         {
    ///             DnsSuffix = "example.com.",
    ///             Network = "default",
    ///             Project = "10000000",
    ///             Service = "peering-service",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Project peered DNS domains can be imported using the `service`, `project`, `network` and `name`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain my_domain services/{service}/projects/{project}/global/networks/{network}/peeredDnsDomains/{name}
    /// ```
    /// 
    ///  Where- `service` is the service connection, defaults to `servicenetworking.googleapis.com`. - `project` is the producer project name. - `network` is the consumer network name. - `name` is the name of your peered DNS domain.
    /// </summary>
    [GcpResourceType("gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain")]
    public partial class PeeredDnsDomain : Pulumi.CustomResource
    {
        /// <summary>
        /// The DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
        /// </summary>
        [Output("dnsSuffix")]
        public Output<string> DnsSuffix { get; private set; } = null!;

        /// <summary>
        /// Internal name used for the peered DNS domain.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network in the consumer project.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// an identifier for the resource with format `services/{{service}}/projects/{{project}}/global/networks/{{network}}`
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// The producer project number. If not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Private service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
        /// </summary>
        [Output("service")]
        public Output<string?> Service { get; private set; } = null!;


        /// <summary>
        /// Create a PeeredDnsDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PeeredDnsDomain(string name, PeeredDnsDomainArgs args, CustomResourceOptions? options = null)
            : base("gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain", name, args ?? new PeeredDnsDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PeeredDnsDomain(string name, Input<string> id, PeeredDnsDomainState? state = null, CustomResourceOptions? options = null)
            : base("gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PeeredDnsDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PeeredDnsDomain Get(string name, Input<string> id, PeeredDnsDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new PeeredDnsDomain(name, id, state, options);
        }
    }

    public sealed class PeeredDnsDomainArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
        /// </summary>
        [Input("dnsSuffix", required: true)]
        public Input<string> DnsSuffix { get; set; } = null!;

        /// <summary>
        /// Internal name used for the peered DNS domain.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network in the consumer project.
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// The producer project number. If not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Private service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        public PeeredDnsDomainArgs()
        {
        }
    }

    public sealed class PeeredDnsDomainState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
        /// </summary>
        [Input("dnsSuffix")]
        public Input<string>? DnsSuffix { get; set; }

        /// <summary>
        /// Internal name used for the peered DNS domain.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network in the consumer project.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// an identifier for the resource with format `services/{{service}}/projects/{{project}}/global/networks/{{network}}`
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// The producer project number. If not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Private service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        public PeeredDnsDomainState()
        {
        }
    }
}
