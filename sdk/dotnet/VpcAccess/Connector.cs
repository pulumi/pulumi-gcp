// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.VpcAccess
{
    /// <summary>
    /// Serverless VPC Access connector resource.
    /// 
    /// To get more information about Connector, see:
    /// 
    /// * [API documentation](https://cloud.google.com/vpc/docs/reference/vpcaccess/rest/v1/projects.locations.connectors)
    /// * How-to Guides
    ///     * [Configuring Serverless VPC Access](https://cloud.google.com/vpc/docs/configure-serverless-vpc-access)
    /// 
    /// ## Example Usage
    /// ### VPC Access Connector
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var connector = new Gcp.VpcAccess.Connector("connector", new()
    ///     {
    ///         IpCidrRange = "10.8.0.0/28",
    ///         Network = "default",
    ///     });
    /// 
    /// });
    /// ```
    /// ### VPC Access Connector Shared VPC
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var customTestNetwork = new Gcp.Compute.Network("customTestNetwork", new()
    ///     {
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var customTestSubnetwork = new Gcp.Compute.Subnetwork("customTestSubnetwork", new()
    ///     {
    ///         IpCidrRange = "10.2.0.0/28",
    ///         Region = "us-central1",
    ///         Network = customTestNetwork.Id,
    ///     });
    /// 
    ///     var connector = new Gcp.VpcAccess.Connector("connector", new()
    ///     {
    ///         Subnet = new Gcp.VpcAccess.Inputs.ConnectorSubnetArgs
    ///         {
    ///             Name = customTestSubnetwork.Name,
    ///         },
    ///         MachineType = "e2-standard-4",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Connector can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vpcaccess/connector:Connector default projects/{{project}}/locations/{{region}}/connectors/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vpcaccess/connector:Connector default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vpcaccess/connector:Connector default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vpcaccess/connector:Connector default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:vpcaccess/connector:Connector")]
    public partial class Connector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
        /// </summary>
        [Output("ipCidrRange")]
        public Output<string?> IpCidrRange { get; private set; } = null!;

        /// <summary>
        /// Machine type of VM Instance underlying connector. Default is e2-micro
        /// </summary>
        [Output("machineType")]
        public Output<string?> MachineType { get; private set; } = null!;

        /// <summary>
        /// Maximum value of instances in autoscaling group underlying the connector.
        /// </summary>
        [Output("maxInstances")]
        public Output<int> MaxInstances { get; private set; } = null!;

        /// <summary>
        /// Maximum throughput of the connector in Mbps, must be greater than `min_throughput`. Default is 300.
        /// </summary>
        [Output("maxThroughput")]
        public Output<int?> MaxThroughput { get; private set; } = null!;

        /// <summary>
        /// Minimum value of instances in autoscaling group underlying the connector.
        /// </summary>
        [Output("minInstances")]
        public Output<int> MinInstances { get; private set; } = null!;

        /// <summary>
        /// Minimum throughput of the connector in Mbps. Default and min is 200.
        /// </summary>
        [Output("minThroughput")]
        public Output<int?> MinThroughput { get; private set; } = null!;

        /// <summary>
        /// The name of the resource (Max 25 characters).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Name or self_link of the VPC network. Required if `ip_cidr_range` is set.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The fully qualified name of this VPC connector
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// State of the VPC access connector.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The subnet in which to house the connector
        /// Structure is documented below.
        /// </summary>
        [Output("subnet")]
        public Output<Outputs.ConnectorSubnet?> Subnet { get; private set; } = null!;


        /// <summary>
        /// Create a Connector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connector(string name, ConnectorArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:vpcaccess/connector:Connector", name, args ?? new ConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connector(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
            : base("gcp:vpcaccess/connector:Connector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connector Get(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new Connector(name, id, state, options);
        }
    }

    public sealed class ConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
        /// </summary>
        [Input("ipCidrRange")]
        public Input<string>? IpCidrRange { get; set; }

        /// <summary>
        /// Machine type of VM Instance underlying connector. Default is e2-micro
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        /// <summary>
        /// Maximum value of instances in autoscaling group underlying the connector.
        /// </summary>
        [Input("maxInstances")]
        public Input<int>? MaxInstances { get; set; }

        /// <summary>
        /// Maximum throughput of the connector in Mbps, must be greater than `min_throughput`. Default is 300.
        /// </summary>
        [Input("maxThroughput")]
        public Input<int>? MaxThroughput { get; set; }

        /// <summary>
        /// Minimum value of instances in autoscaling group underlying the connector.
        /// </summary>
        [Input("minInstances")]
        public Input<int>? MinInstances { get; set; }

        /// <summary>
        /// Minimum throughput of the connector in Mbps. Default and min is 200.
        /// </summary>
        [Input("minThroughput")]
        public Input<int>? MinThroughput { get; set; }

        /// <summary>
        /// The name of the resource (Max 25 characters).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Name or self_link of the VPC network. Required if `ip_cidr_range` is set.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The subnet in which to house the connector
        /// Structure is documented below.
        /// </summary>
        [Input("subnet")]
        public Input<Inputs.ConnectorSubnetArgs>? Subnet { get; set; }

        public ConnectorArgs()
        {
        }
        public static new ConnectorArgs Empty => new ConnectorArgs();
    }

    public sealed class ConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
        /// </summary>
        [Input("ipCidrRange")]
        public Input<string>? IpCidrRange { get; set; }

        /// <summary>
        /// Machine type of VM Instance underlying connector. Default is e2-micro
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        /// <summary>
        /// Maximum value of instances in autoscaling group underlying the connector.
        /// </summary>
        [Input("maxInstances")]
        public Input<int>? MaxInstances { get; set; }

        /// <summary>
        /// Maximum throughput of the connector in Mbps, must be greater than `min_throughput`. Default is 300.
        /// </summary>
        [Input("maxThroughput")]
        public Input<int>? MaxThroughput { get; set; }

        /// <summary>
        /// Minimum value of instances in autoscaling group underlying the connector.
        /// </summary>
        [Input("minInstances")]
        public Input<int>? MinInstances { get; set; }

        /// <summary>
        /// Minimum throughput of the connector in Mbps. Default and min is 200.
        /// </summary>
        [Input("minThroughput")]
        public Input<int>? MinThroughput { get; set; }

        /// <summary>
        /// The name of the resource (Max 25 characters).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Name or self_link of the VPC network. Required if `ip_cidr_range` is set.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The fully qualified name of this VPC connector
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// State of the VPC access connector.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The subnet in which to house the connector
        /// Structure is documented below.
        /// </summary>
        [Input("subnet")]
        public Input<Inputs.ConnectorSubnetGetArgs>? Subnet { get; set; }

        public ConnectorState()
        {
        }
        public static new ConnectorState Empty => new ConnectorState();
    }
}
