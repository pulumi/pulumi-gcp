// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apigee
{
    /// <summary>
    /// An `AppGroup` in Apigee.
    /// 
    /// To get more information about AppGroup, see:
    /// 
    /// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.appgroups)
    /// * How-to Guides
    ///     * [Organizing client app ownership](https://cloud.google.com/apigee/docs/api-platform/publish/organizing-client-app-ownership)
    /// 
    /// ## Example Usage
    /// 
    /// ### Apigee App Group Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Gcp.Organizations.GetClientConfig.Invoke();
    /// 
    ///     var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    ///     {
    ///         Name = "apigee-network",
    ///     });
    /// 
    ///     var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    ///     {
    ///         Name = "apigee-range",
    ///         Purpose = "VPC_PEERING",
    ///         AddressType = "INTERNAL",
    ///         PrefixLength = 16,
    ///         Network = apigeeNetwork.Id,
    ///     });
    /// 
    ///     var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    ///     {
    ///         Network = apigeeNetwork.Id,
    ///         Service = "servicenetworking.googleapis.com",
    ///         ReservedPeeringRanges = new[]
    ///         {
    ///             apigeeRange.Name,
    ///         },
    ///     });
    /// 
    ///     var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    ///     {
    ///         AnalyticsRegion = "us-central1",
    ///         ProjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.Project),
    ///         AuthorizedNetwork = apigeeNetwork.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigeeVpcConnection,
    ///         },
    ///     });
    /// 
    ///     var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    ///     {
    ///         Name = "instance",
    ///         Location = "us-central1",
    ///         OrgId = apigeeOrg.Id,
    ///         PeeringCidrRange = "SLASH_22",
    ///     });
    /// 
    ///     var apigeeAppGroup = new Gcp.Apigee.AppGroup("apigee_app_group", new()
    ///     {
    ///         Name = "my-app-group",
    ///         DisplayName = "Test app group",
    ///         ChannelId = "storefront",
    ///         ChannelUri = "https://my-dev-portal.org/groups/my-group",
    ///         Status = "active",
    ///         OrgId = apigeeOrg.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigeeInstance,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Apigee App Group With Attributes
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Gcp.Organizations.GetClientConfig.Invoke();
    /// 
    ///     var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    ///     {
    ///         Name = "apigee-network",
    ///     });
    /// 
    ///     var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    ///     {
    ///         Name = "apigee-range",
    ///         Purpose = "VPC_PEERING",
    ///         AddressType = "INTERNAL",
    ///         PrefixLength = 16,
    ///         Network = apigeeNetwork.Id,
    ///     });
    /// 
    ///     var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    ///     {
    ///         Network = apigeeNetwork.Id,
    ///         Service = "servicenetworking.googleapis.com",
    ///         ReservedPeeringRanges = new[]
    ///         {
    ///             apigeeRange.Name,
    ///         },
    ///     });
    /// 
    ///     var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    ///     {
    ///         AnalyticsRegion = "us-central1",
    ///         ProjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.Project),
    ///         AuthorizedNetwork = apigeeNetwork.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigeeVpcConnection,
    ///         },
    ///     });
    /// 
    ///     var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    ///     {
    ///         Name = "instance",
    ///         Location = "us-central1",
    ///         OrgId = apigeeOrg.Id,
    ///         PeeringCidrRange = "SLASH_22",
    ///     });
    /// 
    ///     var apigeeAppGroup = new Gcp.Apigee.AppGroup("apigee_app_group", new()
    ///     {
    ///         Name = "my-app-group",
    ///         DisplayName = "Test app group",
    ///         ChannelId = "storefront",
    ///         ChannelUri = "https://my-dev-portal.org/groups/my-group",
    ///         Status = "active",
    ///         OrgId = apigeeOrg.Id,
    ///         Attributes = new[]
    ///         {
    ///             new Gcp.Apigee.Inputs.AppGroupAttributeArgs
    ///             {
    ///                 Name = "business_unit",
    ///                 Value = "HR",
    ///             },
    ///             new Gcp.Apigee.Inputs.AppGroupAttributeArgs
    ///             {
    ///                 Name = "department",
    ///                 Value = "payroll",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigeeInstance,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// AppGroup can be imported using any of these accepted formats:
    /// 
    /// * `{{org_id}}/appgroups/{{name}}`
    /// 
    /// * `{{org_id}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, AppGroup can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/appGroup:AppGroup default {{org_id}}/appgroups/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/appGroup:AppGroup default {{org_id}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:apigee/appGroup:AppGroup")]
    public partial class AppGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Internal identifier that cannot be edited
        /// </summary>
        [Output("appGroupId")]
        public Output<string> AppGroupId { get; private set; } = null!;

        /// <summary>
        /// A list of attributes
        /// Structure is documented below.
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableArray<Outputs.AppGroupAttribute>> Attributes { get; private set; } = null!;

        /// <summary>
        /// Channel identifier identifies the owner maintaining this grouping.
        /// </summary>
        [Output("channelId")]
        public Output<string?> ChannelId { get; private set; } = null!;

        /// <summary>
        /// A reference to the associated storefront/marketplace.
        /// </summary>
        [Output("channelUri")]
        public Output<string?> ChannelUri { get; private set; } = null!;

        /// <summary>
        /// Created time as milliseconds since epoch.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// App group name displayed in the UI
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Modified time as milliseconds since epoch.
        /// </summary>
        [Output("lastModifiedAt")]
        public Output<string> LastModifiedAt { get; private set; } = null!;

        /// <summary>
        /// Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Apigee Organization associated with the Apigee app group,
        /// in the format `organizations/{{org_name}}`.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// App group name displayed in the UI
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
        /// Possible values are: `Active`, `Inactive`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;


        /// <summary>
        /// Create a AppGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppGroup(string name, AppGroupArgs args, CustomResourceOptions? options = null)
            : base("gcp:apigee/appGroup:AppGroup", name, args ?? new AppGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppGroup(string name, Input<string> id, AppGroupState? state = null, CustomResourceOptions? options = null)
            : base("gcp:apigee/appGroup:AppGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppGroup Get(string name, Input<string> id, AppGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new AppGroup(name, id, state, options);
        }
    }

    public sealed class AppGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputList<Inputs.AppGroupAttributeArgs>? _attributes;

        /// <summary>
        /// A list of attributes
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AppGroupAttributeArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.AppGroupAttributeArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// Channel identifier identifies the owner maintaining this grouping.
        /// </summary>
        [Input("channelId")]
        public Input<string>? ChannelId { get; set; }

        /// <summary>
        /// A reference to the associated storefront/marketplace.
        /// </summary>
        [Input("channelUri")]
        public Input<string>? ChannelUri { get; set; }

        /// <summary>
        /// App group name displayed in the UI
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Apigee Organization associated with the Apigee app group,
        /// in the format `organizations/{{org_name}}`.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
        /// Possible values are: `Active`, `Inactive`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public AppGroupArgs()
        {
        }
        public static new AppGroupArgs Empty => new AppGroupArgs();
    }

    public sealed class AppGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Internal identifier that cannot be edited
        /// </summary>
        [Input("appGroupId")]
        public Input<string>? AppGroupId { get; set; }

        [Input("attributes")]
        private InputList<Inputs.AppGroupAttributeGetArgs>? _attributes;

        /// <summary>
        /// A list of attributes
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AppGroupAttributeGetArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.AppGroupAttributeGetArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// Channel identifier identifies the owner maintaining this grouping.
        /// </summary>
        [Input("channelId")]
        public Input<string>? ChannelId { get; set; }

        /// <summary>
        /// A reference to the associated storefront/marketplace.
        /// </summary>
        [Input("channelUri")]
        public Input<string>? ChannelUri { get; set; }

        /// <summary>
        /// Created time as milliseconds since epoch.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// App group name displayed in the UI
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Modified time as milliseconds since epoch.
        /// </summary>
        [Input("lastModifiedAt")]
        public Input<string>? LastModifiedAt { get; set; }

        /// <summary>
        /// Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Apigee Organization associated with the Apigee app group,
        /// in the format `organizations/{{org_name}}`.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// App group name displayed in the UI
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
        /// Possible values are: `Active`, `Inactive`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public AppGroupState()
        {
        }
        public static new AppGroupState Empty => new AppGroupState();
    }
}
