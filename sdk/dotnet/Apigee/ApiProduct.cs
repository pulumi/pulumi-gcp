// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apigee
{
    /// <summary>
    /// An `ApiProduct` in Apigee.
    /// 
    /// To get more information about ApiProduct, see:
    /// 
    /// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.apiproducts#ApiProduct)
    /// * How-to Guides
    ///     * [Creating an API product](https://cloud.google.com/apigee/docs/api-platform/publish/what-api-product)
    /// 
    /// ## Example Usage
    /// 
    /// ### Apigee Api Product Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Gcp.Organizations.GetClientConfig.Invoke();
    /// 
    ///     var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    ///     {
    ///         Name = "apigee-network",
    ///     });
    /// 
    ///     var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    ///     {
    ///         Name = "apigee-range",
    ///         Purpose = "VPC_PEERING",
    ///         AddressType = "INTERNAL",
    ///         PrefixLength = 16,
    ///         Network = apigeeNetwork.Id,
    ///     });
    /// 
    ///     var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    ///     {
    ///         Network = apigeeNetwork.Id,
    ///         Service = "servicenetworking.googleapis.com",
    ///         ReservedPeeringRanges = new[]
    ///         {
    ///             apigeeRange.Name,
    ///         },
    ///     });
    /// 
    ///     var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    ///     {
    ///         AnalyticsRegion = "us-central1",
    ///         ProjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.Project),
    ///         AuthorizedNetwork = apigeeNetwork.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigeeVpcConnection,
    ///         },
    ///     });
    /// 
    ///     var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    ///     {
    ///         Name = "my-instance",
    ///         Location = "us-central1",
    ///         OrgId = apigeeOrg.Id,
    ///         PeeringCidrRange = "SLASH_22",
    ///     });
    /// 
    ///     var basicApiProduct = new Gcp.Apigee.ApiProduct("basic_api_product", new()
    ///     {
    ///         OrgId = apigeeOrg.Id,
    ///         Name = "my-product",
    ///         DisplayName = "My Basic API Product",
    ///         ApprovalType = "auto",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigeeInstance,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Apigee Api Product With Legacy Operation
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Gcp.Organizations.GetClientConfig.Invoke();
    /// 
    ///     var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    ///     {
    ///         Name = "apigee-network",
    ///     });
    /// 
    ///     var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    ///     {
    ///         Name = "apigee-range",
    ///         Purpose = "VPC_PEERING",
    ///         AddressType = "INTERNAL",
    ///         PrefixLength = 16,
    ///         Network = apigeeNetwork.Id,
    ///     });
    /// 
    ///     var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    ///     {
    ///         Network = apigeeNetwork.Id,
    ///         Service = "servicenetworking.googleapis.com",
    ///         ReservedPeeringRanges = new[]
    ///         {
    ///             apigeeRange.Name,
    ///         },
    ///     });
    /// 
    ///     var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    ///     {
    ///         AnalyticsRegion = "us-central1",
    ///         ProjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.Project),
    ///         AuthorizedNetwork = apigeeNetwork.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigeeVpcConnection,
    ///         },
    ///     });
    /// 
    ///     var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    ///     {
    ///         Name = "my-instance",
    ///         Location = "us-central1",
    ///         OrgId = apigeeOrg.Id,
    ///         PeeringCidrRange = "SLASH_22",
    ///     });
    /// 
    ///     var fullApiProduct = new Gcp.Apigee.ApiProduct("full_api_product", new()
    ///     {
    ///         OrgId = apigeeOrg.Id,
    ///         Name = "my-product",
    ///         DisplayName = "My full API Product",
    ///         ApprovalType = "auto",
    ///         Description = "This is a sample API Product created with Terraform.",
    ///         Attributes = new[]
    ///         {
    ///             new Gcp.Apigee.Inputs.ApiProductAttributeArgs
    ///             {
    ///                 Name = "access",
    ///                 Value = "private",
    ///             },
    ///         },
    ///         Environments = new[]
    ///         {
    ///             "dev",
    ///             "hom",
    ///         },
    ///         Proxies = new[]
    ///         {
    ///             "hello-world",
    ///         },
    ///         ApiResources = new[]
    ///         {
    ///             "/",
    ///             "/weather/**",
    ///         },
    ///         Scopes = new[]
    ///         {
    ///             "read:weather",
    ///             "write:reports",
    ///         },
    ///         Quota = "10000",
    ///         QuotaInterval = "1",
    ///         QuotaTimeUnit = "day",
    ///         QuotaCounterScope = "PROXY",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigeeInstance,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ## Import
    /// 
    /// ApiProduct can be imported using any of these accepted formats:
    /// 
    /// * `{{org_id}}/apiproducts/{{name}}`
    /// 
    /// * `{{org_id}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, ApiProduct can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/apiProduct:ApiProduct default {{org_id}}/apiproducts/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/apiProduct:ApiProduct default {{org_id}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:apigee/apiProduct:ApiProduct")]
    public partial class ApiProduct : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
        /// The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
        /// </summary>
        [Output("apiResources")]
        public Output<ImmutableArray<string>> ApiResources { get; private set; } = null!;

        /// <summary>
        /// Flag that specifies how API keys are approved to access the APIs defined by the API product.
        /// Valid values are `Auto` or `Manual`.
        /// Possible values are: `Auto`, `Manual`.
        /// </summary>
        [Output("approvalType")]
        public Output<string?> ApprovalType { get; private set; } = null!;

        /// <summary>
        /// Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
        /// Use this property to specify the access level of the API product as either public, private, or internal.
        /// Structure is documented below.
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableArray<Outputs.ApiProductAttribute>> Attributes { get; private set; } = null!;

        /// <summary>
        /// Response only. Creation time of this environment as milliseconds since epoch.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Description of the API product. Include key information about the API product that is not captured by other fields.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name displayed in the UI or developer portal to developers registering for API access.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
        /// By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
        /// </summary>
        [Output("environments")]
        public Output<ImmutableArray<string>> Environments { get; private set; } = null!;

        /// <summary>
        /// Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
        /// Structure is documented below.
        /// </summary>
        [Output("graphqlOperationGroup")]
        public Output<Outputs.ApiProductGraphqlOperationGroup?> GraphqlOperationGroup { get; private set; } = null!;

        /// <summary>
        /// Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
        /// Structure is documented below.
        /// </summary>
        [Output("grpcOperationGroup")]
        public Output<Outputs.ApiProductGrpcOperationGroup?> GrpcOperationGroup { get; private set; } = null!;

        /// <summary>
        /// Response only. Modified time of this environment as milliseconds since epoch.
        /// </summary>
        [Output("lastModifiedAt")]
        public Output<string> LastModifiedAt { get; private set; } = null!;

        /// <summary>
        /// Internal name of the API product.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
        /// Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
        /// Structure is documented below.
        /// </summary>
        [Output("operationGroup")]
        public Output<Outputs.ApiProductOperationGroup?> OperationGroup { get; private set; } = null!;

        /// <summary>
        /// The Apigee Organization associated with the Apigee API product,
        /// in the format `organizations/{{org_name}}`.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
        /// Apigee rejects requests to API proxies that are not listed.
        /// </summary>
        [Output("proxies")]
        public Output<ImmutableArray<string>> Proxies { get; private set; } = null!;

        /// <summary>
        /// Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
        /// For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
        /// </summary>
        [Output("quota")]
        public Output<string?> Quota { get; private set; } = null!;

        /// <summary>
        /// Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
        /// Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
        /// </summary>
        [Output("quotaCounterScope")]
        public Output<string?> QuotaCounterScope { get; private set; } = null!;

        /// <summary>
        /// Time interval over which the number of request messages is calculated.
        /// </summary>
        [Output("quotaInterval")]
        public Output<string?> QuotaInterval { get; private set; } = null!;

        /// <summary>
        /// Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
        /// </summary>
        [Output("quotaTimeUnit")]
        public Output<string?> QuotaTimeUnit { get; private set; } = null!;

        /// <summary>
        /// Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
        /// </summary>
        [Output("space")]
        public Output<string?> Space { get; private set; } = null!;


        /// <summary>
        /// Create a ApiProduct resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApiProduct(string name, ApiProductArgs args, CustomResourceOptions? options = null)
            : base("gcp:apigee/apiProduct:ApiProduct", name, args ?? new ApiProductArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApiProduct(string name, Input<string> id, ApiProductState? state = null, CustomResourceOptions? options = null)
            : base("gcp:apigee/apiProduct:ApiProduct", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApiProduct resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApiProduct Get(string name, Input<string> id, ApiProductState? state = null, CustomResourceOptions? options = null)
        {
            return new ApiProduct(name, id, state, options);
        }
    }

    public sealed class ApiProductArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiResources")]
        private InputList<string>? _apiResources;

        /// <summary>
        /// Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
        /// The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
        /// </summary>
        public InputList<string> ApiResources
        {
            get => _apiResources ?? (_apiResources = new InputList<string>());
            set => _apiResources = value;
        }

        /// <summary>
        /// Flag that specifies how API keys are approved to access the APIs defined by the API product.
        /// Valid values are `Auto` or `Manual`.
        /// Possible values are: `Auto`, `Manual`.
        /// </summary>
        [Input("approvalType")]
        public Input<string>? ApprovalType { get; set; }

        [Input("attributes")]
        private InputList<Inputs.ApiProductAttributeArgs>? _attributes;

        /// <summary>
        /// Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
        /// Use this property to specify the access level of the API product as either public, private, or internal.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ApiProductAttributeArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.ApiProductAttributeArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// Description of the API product. Include key information about the API product that is not captured by other fields.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name displayed in the UI or developer portal to developers registering for API access.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("environments")]
        private InputList<string>? _environments;

        /// <summary>
        /// Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
        /// By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
        /// </summary>
        public InputList<string> Environments
        {
            get => _environments ?? (_environments = new InputList<string>());
            set => _environments = value;
        }

        /// <summary>
        /// Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
        /// Structure is documented below.
        /// </summary>
        [Input("graphqlOperationGroup")]
        public Input<Inputs.ApiProductGraphqlOperationGroupArgs>? GraphqlOperationGroup { get; set; }

        /// <summary>
        /// Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
        /// Structure is documented below.
        /// </summary>
        [Input("grpcOperationGroup")]
        public Input<Inputs.ApiProductGrpcOperationGroupArgs>? GrpcOperationGroup { get; set; }

        /// <summary>
        /// Internal name of the API product.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
        /// Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
        /// Structure is documented below.
        /// </summary>
        [Input("operationGroup")]
        public Input<Inputs.ApiProductOperationGroupArgs>? OperationGroup { get; set; }

        /// <summary>
        /// The Apigee Organization associated with the Apigee API product,
        /// in the format `organizations/{{org_name}}`.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        [Input("proxies")]
        private InputList<string>? _proxies;

        /// <summary>
        /// Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
        /// Apigee rejects requests to API proxies that are not listed.
        /// </summary>
        public InputList<string> Proxies
        {
            get => _proxies ?? (_proxies = new InputList<string>());
            set => _proxies = value;
        }

        /// <summary>
        /// Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
        /// For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
        /// </summary>
        [Input("quota")]
        public Input<string>? Quota { get; set; }

        /// <summary>
        /// Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
        /// Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
        /// </summary>
        [Input("quotaCounterScope")]
        public Input<string>? QuotaCounterScope { get; set; }

        /// <summary>
        /// Time interval over which the number of request messages is calculated.
        /// </summary>
        [Input("quotaInterval")]
        public Input<string>? QuotaInterval { get; set; }

        /// <summary>
        /// Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
        /// </summary>
        [Input("quotaTimeUnit")]
        public Input<string>? QuotaTimeUnit { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
        /// </summary>
        [Input("space")]
        public Input<string>? Space { get; set; }

        public ApiProductArgs()
        {
        }
        public static new ApiProductArgs Empty => new ApiProductArgs();
    }

    public sealed class ApiProductState : global::Pulumi.ResourceArgs
    {
        [Input("apiResources")]
        private InputList<string>? _apiResources;

        /// <summary>
        /// Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
        /// The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
        /// </summary>
        public InputList<string> ApiResources
        {
            get => _apiResources ?? (_apiResources = new InputList<string>());
            set => _apiResources = value;
        }

        /// <summary>
        /// Flag that specifies how API keys are approved to access the APIs defined by the API product.
        /// Valid values are `Auto` or `Manual`.
        /// Possible values are: `Auto`, `Manual`.
        /// </summary>
        [Input("approvalType")]
        public Input<string>? ApprovalType { get; set; }

        [Input("attributes")]
        private InputList<Inputs.ApiProductAttributeGetArgs>? _attributes;

        /// <summary>
        /// Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
        /// Use this property to specify the access level of the API product as either public, private, or internal.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ApiProductAttributeGetArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.ApiProductAttributeGetArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// Response only. Creation time of this environment as milliseconds since epoch.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Description of the API product. Include key information about the API product that is not captured by other fields.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name displayed in the UI or developer portal to developers registering for API access.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("environments")]
        private InputList<string>? _environments;

        /// <summary>
        /// Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
        /// By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
        /// </summary>
        public InputList<string> Environments
        {
            get => _environments ?? (_environments = new InputList<string>());
            set => _environments = value;
        }

        /// <summary>
        /// Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
        /// Structure is documented below.
        /// </summary>
        [Input("graphqlOperationGroup")]
        public Input<Inputs.ApiProductGraphqlOperationGroupGetArgs>? GraphqlOperationGroup { get; set; }

        /// <summary>
        /// Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
        /// Structure is documented below.
        /// </summary>
        [Input("grpcOperationGroup")]
        public Input<Inputs.ApiProductGrpcOperationGroupGetArgs>? GrpcOperationGroup { get; set; }

        /// <summary>
        /// Response only. Modified time of this environment as milliseconds since epoch.
        /// </summary>
        [Input("lastModifiedAt")]
        public Input<string>? LastModifiedAt { get; set; }

        /// <summary>
        /// Internal name of the API product.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
        /// Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
        /// Structure is documented below.
        /// </summary>
        [Input("operationGroup")]
        public Input<Inputs.ApiProductOperationGroupGetArgs>? OperationGroup { get; set; }

        /// <summary>
        /// The Apigee Organization associated with the Apigee API product,
        /// in the format `organizations/{{org_name}}`.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("proxies")]
        private InputList<string>? _proxies;

        /// <summary>
        /// Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
        /// Apigee rejects requests to API proxies that are not listed.
        /// </summary>
        public InputList<string> Proxies
        {
            get => _proxies ?? (_proxies = new InputList<string>());
            set => _proxies = value;
        }

        /// <summary>
        /// Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
        /// For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
        /// </summary>
        [Input("quota")]
        public Input<string>? Quota { get; set; }

        /// <summary>
        /// Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
        /// Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
        /// </summary>
        [Input("quotaCounterScope")]
        public Input<string>? QuotaCounterScope { get; set; }

        /// <summary>
        /// Time interval over which the number of request messages is calculated.
        /// </summary>
        [Input("quotaInterval")]
        public Input<string>? QuotaInterval { get; set; }

        /// <summary>
        /// Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
        /// </summary>
        [Input("quotaTimeUnit")]
        public Input<string>? QuotaTimeUnit { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
        /// </summary>
        [Input("space")]
        public Input<string>? Space { get; set; }

        public ApiProductState()
        {
        }
        public static new ApiProductState Empty => new ApiProductState();
    }
}
