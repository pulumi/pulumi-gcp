// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apigee
{
    /// <summary>
    /// Apigee Dns Zone.
    /// 
    /// To get more information about DnsZone, see:
    /// 
    /// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.dnsZones/create)
    /// * How-to Guides
    ///     * [Creating a DnsZone](https://cloud.google.com/apigee/docs/api-platform/get-started/create-dns)
    /// 
    /// ## Example Usage
    /// 
    /// ### Apigee Dns Zone Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Gcp.Organizations.GetClientConfig.Invoke();
    /// 
    ///     var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    ///     {
    ///         Name = "apigee-network",
    ///     });
    /// 
    ///     var org = new Gcp.Apigee.Organization("org", new()
    ///     {
    ///         Description = "Terraform-provisioned basic Apigee Org without VPC Peering.",
    ///         AnalyticsRegion = "us-central1",
    ///         ProjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.Project),
    ///         DisableVpcPeering = true,
    ///     });
    /// 
    ///     var apigeeDnsZone = new Gcp.Apigee.DnsZone("apigee_dns_zone", new()
    ///     {
    ///         OrgId = apigeeOrg.Id,
    ///         DnsZoneId = "test1",
    ///         Domain = "foo.com",
    ///         Description = "test",
    ///         PeeringConfig = new Gcp.Apigee.Inputs.DnsZonePeeringConfigArgs
    ///         {
    ///             TargetProjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.Project),
    ///             TargetNetworkId = apigeeNetwork.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DnsZone can be imported using any of these accepted formats:
    /// 
    /// * `{{org_id}}/dnsZones/{{dns_zone_id}}`
    /// 
    /// * `{{org_id}}/{{dns_zone_id}}`
    /// 
    /// When using the `pulumi import` command, DnsZone can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/dnsZone:DnsZone default {{org_id}}/dnsZones/{{dns_zone_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/dnsZone:DnsZone default {{org_id}}/{{dns_zone_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:apigee/dnsZone:DnsZone")]
    public partial class DnsZone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description for the zone.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// ID of the dns zone.
        /// </summary>
        [Output("dnsZoneId")]
        public Output<string> DnsZoneId { get; private set; } = null!;

        /// <summary>
        /// Doamin for the zone.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Name of the Dns Zone in the following format:
        /// organizations/{organization}/dnsZones/{dnsZone}.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Apigee Organization associated with the Apigee instance,
        /// in the format `organizations/{{org_name}}`.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Peering zone config
        /// Structure is documented below.
        /// </summary>
        [Output("peeringConfig")]
        public Output<Outputs.DnsZonePeeringConfig> PeeringConfig { get; private set; } = null!;


        /// <summary>
        /// Create a DnsZone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsZone(string name, DnsZoneArgs args, CustomResourceOptions? options = null)
            : base("gcp:apigee/dnsZone:DnsZone", name, args ?? new DnsZoneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsZone(string name, Input<string> id, DnsZoneState? state = null, CustomResourceOptions? options = null)
            : base("gcp:apigee/dnsZone:DnsZone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsZone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsZone Get(string name, Input<string> id, DnsZoneState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsZone(name, id, state, options);
        }
    }

    public sealed class DnsZoneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description for the zone.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// ID of the dns zone.
        /// </summary>
        [Input("dnsZoneId", required: true)]
        public Input<string> DnsZoneId { get; set; } = null!;

        /// <summary>
        /// Doamin for the zone.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// The Apigee Organization associated with the Apigee instance,
        /// in the format `organizations/{{org_name}}`.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Peering zone config
        /// Structure is documented below.
        /// </summary>
        [Input("peeringConfig", required: true)]
        public Input<Inputs.DnsZonePeeringConfigArgs> PeeringConfig { get; set; } = null!;

        public DnsZoneArgs()
        {
        }
        public static new DnsZoneArgs Empty => new DnsZoneArgs();
    }

    public sealed class DnsZoneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description for the zone.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ID of the dns zone.
        /// </summary>
        [Input("dnsZoneId")]
        public Input<string>? DnsZoneId { get; set; }

        /// <summary>
        /// Doamin for the zone.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Name of the Dns Zone in the following format:
        /// organizations/{organization}/dnsZones/{dnsZone}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Apigee Organization associated with the Apigee instance,
        /// in the format `organizations/{{org_name}}`.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Peering zone config
        /// Structure is documented below.
        /// </summary>
        [Input("peeringConfig")]
        public Input<Inputs.DnsZonePeeringConfigGetArgs>? PeeringConfig { get; set; }

        public DnsZoneState()
        {
        }
        public static new DnsZoneState Empty => new DnsZoneState();
    }
}
