// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apigee.Inputs
{

    public sealed class DeveloperAppCredentialArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiProducts")]
        private InputList<Inputs.DeveloperAppCredentialApiProductArgs>? _apiProducts;

        /// <summary>
        /// List of API products associated with the developer app.
        /// </summary>
        public InputList<Inputs.DeveloperAppCredentialApiProductArgs> ApiProducts
        {
            get => _apiProducts ?? (_apiProducts = new InputList<Inputs.DeveloperAppCredentialApiProductArgs>());
            set => _apiProducts = value;
        }

        [Input("attributes")]
        private InputList<Inputs.DeveloperAppCredentialAttributeArgs>? _attributes;

        /// <summary>
        /// Developer attributes (name/value pairs). The custom attribute limit is 18.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DeveloperAppCredentialAttributeArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.DeveloperAppCredentialAttributeArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// (Output)
        /// Consumer key.
        /// </summary>
        [Input("consumerKey")]
        public Input<string>? ConsumerKey { get; set; }

        [Input("consumerSecret")]
        private Input<string>? _consumerSecret;

        /// <summary>
        /// (Output)
        /// Secret key.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? ConsumerSecret
        {
            get => _consumerSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _consumerSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Output)
        /// Time the credential will expire in milliseconds since epoch.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// (Output)
        /// Time the credential was issued in milliseconds since epoch.
        /// </summary>
        [Input("issuedAt")]
        public Input<string>? IssuedAt { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// Scopes to apply to the developer app.
        /// The specified scopes must already exist for the API product that
        /// you associate with the developer app.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Status of the credential. Valid values include approved or revoked.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public DeveloperAppCredentialArgs()
        {
        }
        public static new DeveloperAppCredentialArgs Empty => new DeveloperAppCredentialArgs();
    }
}
