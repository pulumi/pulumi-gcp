// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apigee
{
    /// <summary>
    /// Authorize the Runtime components to access directly with Apigee Control Plane.
    /// 
    /// To get more information about ControlPlaneAccess, see:
    /// 
    /// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations/updateControlPlaneAccess)
    /// * How-to Guides
    ///     * [Enable ControlPlane access](https://cloud.google.com/apigee/docs/hybrid/v1.14/install-enable-control-plane-access)
    /// 
    /// ## Example Usage
    /// 
    /// ### Apigee Control Plane Access Basic Test
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = new Gcp.Organizations.Project("project", new()
    ///     {
    ///         ProjectId = "my-project",
    ///         Name = "my-project",
    ///         OrgId = "123456789",
    ///         BillingAccount = "000000-0000000-0000000-000000",
    ///         DeletionPolicy = "DELETE",
    ///     });
    /// 
    ///     var apigee = new Gcp.Projects.Service("apigee", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         ServiceName = "apigee.googleapis.com",
    ///     });
    /// 
    ///     var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    ///     {
    ///         AnalyticsRegion = "us-central1",
    ///         ProjectId = project.ProjectId,
    ///         RuntimeType = "HYBRID",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigee,
    ///         },
    ///     });
    /// 
    ///     var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    ///     {
    ///         AccountId = "my-account",
    ///         DisplayName = "Service Account",
    ///     });
    /// 
    ///     var synchronizer_iam = new Gcp.Projects.IAMMember("synchronizer-iam", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         Role = "roles/apigee.synchronizerManager",
    ///         Member = serviceAccount.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     });
    /// 
    ///     var apigeeControlPlaneAccess = new Gcp.Apigee.ControlPlaneAccess("apigee_control_plane_access", new()
    ///     {
    ///         Name = apigeeOrg.Name,
    ///         SynchronizerIdentities = new[]
    ///         {
    ///             serviceAccount.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///         },
    ///         AnalyticsPublisherIdentities = new[]
    ///         {
    ///             serviceAccount.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ControlPlaneAccess can be imported using any of these accepted formats:
    /// 
    /// * `organizations/{{name}}/controlPlaneAccess`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, ControlPlaneAccess can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/controlPlaneAccess:ControlPlaneAccess default organizations/{{name}}/controlPlaneAccess
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/controlPlaneAccess:ControlPlaneAccess default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:apigee/controlPlaneAccess:ControlPlaneAccess")]
    public partial class ControlPlaneAccess : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
        /// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
        /// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
        /// </summary>
        [Output("analyticsPublisherIdentities")]
        public Output<ImmutableArray<string>> AnalyticsPublisherIdentities { get; private set; } = null!;

        /// <summary>
        /// Name of the Apigee organization.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
        /// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
        /// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
        /// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
        /// </summary>
        [Output("synchronizerIdentities")]
        public Output<ImmutableArray<string>> SynchronizerIdentities { get; private set; } = null!;


        /// <summary>
        /// Create a ControlPlaneAccess resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ControlPlaneAccess(string name, ControlPlaneAccessArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:apigee/controlPlaneAccess:ControlPlaneAccess", name, args ?? new ControlPlaneAccessArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ControlPlaneAccess(string name, Input<string> id, ControlPlaneAccessState? state = null, CustomResourceOptions? options = null)
            : base("gcp:apigee/controlPlaneAccess:ControlPlaneAccess", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ControlPlaneAccess resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ControlPlaneAccess Get(string name, Input<string> id, ControlPlaneAccessState? state = null, CustomResourceOptions? options = null)
        {
            return new ControlPlaneAccess(name, id, state, options);
        }
    }

    public sealed class ControlPlaneAccessArgs : global::Pulumi.ResourceArgs
    {
        [Input("analyticsPublisherIdentities")]
        private InputList<string>? _analyticsPublisherIdentities;

        /// <summary>
        /// Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
        /// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
        /// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
        /// </summary>
        public InputList<string> AnalyticsPublisherIdentities
        {
            get => _analyticsPublisherIdentities ?? (_analyticsPublisherIdentities = new InputList<string>());
            set => _analyticsPublisherIdentities = value;
        }

        /// <summary>
        /// Name of the Apigee organization.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("synchronizerIdentities")]
        private InputList<string>? _synchronizerIdentities;

        /// <summary>
        /// Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
        /// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
        /// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
        /// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
        /// </summary>
        public InputList<string> SynchronizerIdentities
        {
            get => _synchronizerIdentities ?? (_synchronizerIdentities = new InputList<string>());
            set => _synchronizerIdentities = value;
        }

        public ControlPlaneAccessArgs()
        {
        }
        public static new ControlPlaneAccessArgs Empty => new ControlPlaneAccessArgs();
    }

    public sealed class ControlPlaneAccessState : global::Pulumi.ResourceArgs
    {
        [Input("analyticsPublisherIdentities")]
        private InputList<string>? _analyticsPublisherIdentities;

        /// <summary>
        /// Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
        /// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
        /// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
        /// </summary>
        public InputList<string> AnalyticsPublisherIdentities
        {
            get => _analyticsPublisherIdentities ?? (_analyticsPublisherIdentities = new InputList<string>());
            set => _analyticsPublisherIdentities = value;
        }

        /// <summary>
        /// Name of the Apigee organization.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("synchronizerIdentities")]
        private InputList<string>? _synchronizerIdentities;

        /// <summary>
        /// Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
        /// The `service-account-name` is formatted like an email address. For example: serviceAccount@my_project_id.iam.gserviceaccount.com
        /// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
        /// The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
        /// </summary>
        public InputList<string> SynchronizerIdentities
        {
            get => _synchronizerIdentities ?? (_synchronizerIdentities = new InputList<string>());
            set => _synchronizerIdentities = value;
        }

        public ControlPlaneAccessState()
        {
        }
        public static new ControlPlaneAccessState Empty => new ControlPlaneAccessState();
    }
}
