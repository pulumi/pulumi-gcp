// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apigee
{
    /// <summary>
    /// A SecurityAction is rule that can be enforced at an environment level.
    /// The result is one of: - A denied API call - An explicitly allowed API call
    /// - A flagged API call (HTTP headers added before the target receives it)
    ///   At least one condition is required to create a SecurityAction.
    /// 
    /// To get more information about SecurityAction, see:
    /// 
    /// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.securityActions/create)
    /// * How-to Guides
    ///     * [Creating security actions](https://cloud.google.com/apigee/docs/api-security/security-actions-api#create-security-actions)
    /// 
    /// ## Example Usage
    /// 
    /// ### Apigee Security Action Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Gcp.Organizations.GetClientConfig.Invoke();
    /// 
    ///     var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    ///     {
    ///         Name = "my-network",
    ///     });
    /// 
    ///     var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    ///     {
    ///         Name = "my-address",
    ///         Purpose = "VPC_PEERING",
    ///         AddressType = "INTERNAL",
    ///         PrefixLength = 16,
    ///         Network = apigeeNetwork.Id,
    ///     });
    /// 
    ///     var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    ///     {
    ///         Network = apigeeNetwork.Id,
    ///         Service = "servicenetworking.googleapis.com",
    ///         ReservedPeeringRanges = new[]
    ///         {
    ///             apigeeRange.Name,
    ///         },
    ///     });
    /// 
    ///     var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    ///     {
    ///         AnalyticsRegion = "us-central1",
    ///         ProjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.Project),
    ///         AuthorizedNetwork = apigeeNetwork.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigeeVpcConnection,
    ///         },
    ///     });
    /// 
    ///     var env = new Gcp.Apigee.Environment("env", new()
    ///     {
    ///         Name = "my-environment",
    ///         Description = "Apigee Environment",
    ///         DisplayName = "environment-1",
    ///         OrgId = apigeeOrg.Id,
    ///     });
    /// 
    ///     var apigeeOrgSecurityAddonsConfig = new Gcp.Apigee.AddonsConfig("apigee_org_security_addons_config", new()
    ///     {
    ///         Org = apigeeOrg.Name,
    ///         AddonsConfigDetails = new Gcp.Apigee.Inputs.AddonsConfigAddonsConfigArgs
    ///         {
    ///             ApiSecurityConfig = new Gcp.Apigee.Inputs.AddonsConfigAddonsConfigApiSecurityConfigArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var apigeeSecurityAction = new Gcp.Apigee.SecurityAction("apigee_security_action", new()
    ///     {
    ///         SecurityActionId = "my-security-action",
    ///         OrgId = apigeeOrg.Name,
    ///         EnvId = env.Name,
    ///         Description = "Apigee Security Action",
    ///         State = "ENABLED",
    ///         ConditionConfig = new Gcp.Apigee.Inputs.SecurityActionConditionConfigArgs
    ///         {
    ///             IpAddressRanges = new[]
    ///             {
    ///                 "100.0.220.1",
    ///                 "200.0.0.1",
    ///             },
    ///             BotReasons = new[]
    ///             {
    ///                 "Flooder",
    ///                 "Public Cloud Azure",
    ///                 "Public Cloud AWS",
    ///             },
    ///         },
    ///         Allow = null,
    ///         ExpireTime = "2025-12-31T23:59:59Z",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigeeOrgSecurityAddonsConfig,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SecurityAction can be imported using any of these accepted formats:
    /// 
    /// * `organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}`
    /// 
    /// * `{{org_id}}/{{env_id}}/{{security_action_id}}`
    /// 
    /// When using the `pulumi import` command, SecurityAction can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/securityAction:SecurityAction default organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/securityAction:SecurityAction default {{org_id}}/{{env_id}}/{{security_action_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:apigee/securityAction:SecurityAction")]
    public partial class SecurityAction : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow a request through if it matches this SecurityAction.
        /// </summary>
        [Output("allow")]
        public Output<Outputs.SecurityActionAllow?> Allow { get; private set; } = null!;

        /// <summary>
        /// If unset, this would apply to all proxies in the environment.
        /// If set, this action is enforced only if at least one proxy in the repeated
        /// list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
        /// There can be at most 100 enabled actions with proxies set in an env.
        /// Several other restrictions apply on conditions and are detailed later.
        /// </summary>
        [Output("apiProxies")]
        public Output<ImmutableArray<string>> ApiProxies { get; private set; } = null!;

        /// <summary>
        /// A valid SecurityAction must contain at least one condition.
        /// Structure is documented below.
        /// </summary>
        [Output("conditionConfig")]
        public Output<Outputs.SecurityActionConditionConfig> ConditionConfig { get; private set; } = null!;

        /// <summary>
        /// The create time for this SecurityAction.
        /// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
        /// Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Deny a request through if it matches this SecurityAction.
        /// Structure is documented below.
        /// </summary>
        [Output("deny")]
        public Output<Outputs.SecurityActionDeny?> Deny { get; private set; } = null!;

        /// <summary>
        /// An optional user provided description of the SecurityAction.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Apigee environment that this security action applies to.
        /// </summary>
        [Output("envId")]
        public Output<string> EnvId { get; private set; } = null!;

        /// <summary>
        /// The expiration for this SecurityAction.
        /// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
        /// fractional digits. Offsets other than "Z" are also accepted.
        /// Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
        /// </summary>
        [Output("expireTime")]
        public Output<string?> ExpireTime { get; private set; } = null!;

        /// <summary>
        /// Flag a request through if it matches this SecurityAction.
        /// Structure is documented below.
        /// </summary>
        [Output("flag")]
        public Output<Outputs.SecurityActionFlag?> Flag { get; private set; } = null!;

        /// <summary>
        /// The organization that this security action applies to.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The ID to use for the SecurityAction, which will become the final component of the action's resource name.
        /// This value should be 0-61 characters, and valid format is (^a-z?$).
        /// </summary>
        [Output("securityActionId")]
        public Output<string> SecurityActionId { get; private set; } = null!;

        /// <summary>
        /// Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
        /// Possible values are: `ENABLED`, `DISABLED`.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The TTL for this SecurityAction.
        /// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
        /// </summary>
        [Output("ttl")]
        public Output<string?> Ttl { get; private set; } = null!;

        /// <summary>
        /// The update time for this SecurityAction. This reflects when this SecurityAction changed states.
        /// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
        /// Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityAction resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityAction(string name, SecurityActionArgs args, CustomResourceOptions? options = null)
            : base("gcp:apigee/securityAction:SecurityAction", name, args ?? new SecurityActionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityAction(string name, Input<string> id, SecurityActionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:apigee/securityAction:SecurityAction", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityAction resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityAction Get(string name, Input<string> id, SecurityActionState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityAction(name, id, state, options);
        }
    }

    public sealed class SecurityActionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow a request through if it matches this SecurityAction.
        /// </summary>
        [Input("allow")]
        public Input<Inputs.SecurityActionAllowArgs>? Allow { get; set; }

        [Input("apiProxies")]
        private InputList<string>? _apiProxies;

        /// <summary>
        /// If unset, this would apply to all proxies in the environment.
        /// If set, this action is enforced only if at least one proxy in the repeated
        /// list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
        /// There can be at most 100 enabled actions with proxies set in an env.
        /// Several other restrictions apply on conditions and are detailed later.
        /// </summary>
        public InputList<string> ApiProxies
        {
            get => _apiProxies ?? (_apiProxies = new InputList<string>());
            set => _apiProxies = value;
        }

        /// <summary>
        /// A valid SecurityAction must contain at least one condition.
        /// Structure is documented below.
        /// </summary>
        [Input("conditionConfig", required: true)]
        public Input<Inputs.SecurityActionConditionConfigArgs> ConditionConfig { get; set; } = null!;

        /// <summary>
        /// Deny a request through if it matches this SecurityAction.
        /// Structure is documented below.
        /// </summary>
        [Input("deny")]
        public Input<Inputs.SecurityActionDenyArgs>? Deny { get; set; }

        /// <summary>
        /// An optional user provided description of the SecurityAction.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Apigee environment that this security action applies to.
        /// </summary>
        [Input("envId", required: true)]
        public Input<string> EnvId { get; set; } = null!;

        /// <summary>
        /// The expiration for this SecurityAction.
        /// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
        /// fractional digits. Offsets other than "Z" are also accepted.
        /// Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
        /// </summary>
        [Input("expireTime")]
        public Input<string>? ExpireTime { get; set; }

        /// <summary>
        /// Flag a request through if it matches this SecurityAction.
        /// Structure is documented below.
        /// </summary>
        [Input("flag")]
        public Input<Inputs.SecurityActionFlagArgs>? Flag { get; set; }

        /// <summary>
        /// The organization that this security action applies to.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// The ID to use for the SecurityAction, which will become the final component of the action's resource name.
        /// This value should be 0-61 characters, and valid format is (^a-z?$).
        /// </summary>
        [Input("securityActionId", required: true)]
        public Input<string> SecurityActionId { get; set; } = null!;

        /// <summary>
        /// Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
        /// Possible values are: `ENABLED`, `DISABLED`.
        /// </summary>
        [Input("state", required: true)]
        public Input<string> State { get; set; } = null!;

        /// <summary>
        /// The TTL for this SecurityAction.
        /// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public SecurityActionArgs()
        {
        }
        public static new SecurityActionArgs Empty => new SecurityActionArgs();
    }

    public sealed class SecurityActionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow a request through if it matches this SecurityAction.
        /// </summary>
        [Input("allow")]
        public Input<Inputs.SecurityActionAllowGetArgs>? Allow { get; set; }

        [Input("apiProxies")]
        private InputList<string>? _apiProxies;

        /// <summary>
        /// If unset, this would apply to all proxies in the environment.
        /// If set, this action is enforced only if at least one proxy in the repeated
        /// list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
        /// There can be at most 100 enabled actions with proxies set in an env.
        /// Several other restrictions apply on conditions and are detailed later.
        /// </summary>
        public InputList<string> ApiProxies
        {
            get => _apiProxies ?? (_apiProxies = new InputList<string>());
            set => _apiProxies = value;
        }

        /// <summary>
        /// A valid SecurityAction must contain at least one condition.
        /// Structure is documented below.
        /// </summary>
        [Input("conditionConfig")]
        public Input<Inputs.SecurityActionConditionConfigGetArgs>? ConditionConfig { get; set; }

        /// <summary>
        /// The create time for this SecurityAction.
        /// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
        /// Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Deny a request through if it matches this SecurityAction.
        /// Structure is documented below.
        /// </summary>
        [Input("deny")]
        public Input<Inputs.SecurityActionDenyGetArgs>? Deny { get; set; }

        /// <summary>
        /// An optional user provided description of the SecurityAction.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Apigee environment that this security action applies to.
        /// </summary>
        [Input("envId")]
        public Input<string>? EnvId { get; set; }

        /// <summary>
        /// The expiration for this SecurityAction.
        /// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
        /// fractional digits. Offsets other than "Z" are also accepted.
        /// Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
        /// </summary>
        [Input("expireTime")]
        public Input<string>? ExpireTime { get; set; }

        /// <summary>
        /// Flag a request through if it matches this SecurityAction.
        /// Structure is documented below.
        /// </summary>
        [Input("flag")]
        public Input<Inputs.SecurityActionFlagGetArgs>? Flag { get; set; }

        /// <summary>
        /// The organization that this security action applies to.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The ID to use for the SecurityAction, which will become the final component of the action's resource name.
        /// This value should be 0-61 characters, and valid format is (^a-z?$).
        /// </summary>
        [Input("securityActionId")]
        public Input<string>? SecurityActionId { get; set; }

        /// <summary>
        /// Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
        /// Possible values are: `ENABLED`, `DISABLED`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The TTL for this SecurityAction.
        /// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        /// <summary>
        /// The update time for this SecurityAction. This reflects when this SecurityAction changed states.
        /// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
        /// Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public SecurityActionState()
        {
        }
        public static new SecurityActionState Empty => new SecurityActionState();
    }
}
