// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apigee
{
    /// <summary>
    /// An Environment Keystore Alias for Self Signed Certificate Format in Apigee
    /// 
    /// To get more information about KeystoresAliasesSelfSignedCert, see:
    /// 
    /// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases/create)
    /// * How-to Guides
    ///     * [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)
    /// 
    /// ## Example Usage
    /// ### Apigee Env Keystore Alias Self Signed Cert
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = new Gcp.Organizations.Project("project", new()
    ///     {
    ///         ProjectId = "my-project",
    ///         OrgId = "123456789",
    ///         BillingAccount = "000000-0000000-0000000-000000",
    ///     });
    /// 
    ///     var apigee = new Gcp.Projects.Service("apigee", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         ServiceName = "apigee.googleapis.com",
    ///     });
    /// 
    ///     var servicenetworking = new Gcp.Projects.Service("servicenetworking", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         ServiceName = "servicenetworking.googleapis.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             apigee,
    ///         },
    ///     });
    /// 
    ///     var compute = new Gcp.Projects.Service("compute", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         ServiceName = "compute.googleapis.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             servicenetworking,
    ///         },
    ///     });
    /// 
    ///     var apigeeNetwork = new Gcp.Compute.Network("apigeeNetwork", new()
    ///     {
    ///         Project = project.ProjectId,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             compute,
    ///         },
    ///     });
    /// 
    ///     var apigeeRange = new Gcp.Compute.GlobalAddress("apigeeRange", new()
    ///     {
    ///         Purpose = "VPC_PEERING",
    ///         AddressType = "INTERNAL",
    ///         PrefixLength = 16,
    ///         Network = apigeeNetwork.Id,
    ///         Project = project.ProjectId,
    ///     });
    /// 
    ///     var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigeeVpcConnection", new()
    ///     {
    ///         Network = apigeeNetwork.Id,
    ///         Service = "servicenetworking.googleapis.com",
    ///         ReservedPeeringRanges = new[]
    ///         {
    ///             apigeeRange.Name,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             servicenetworking,
    ///         },
    ///     });
    /// 
    ///     var apigeeOrg = new Gcp.Apigee.Organization("apigeeOrg", new()
    ///     {
    ///         AnalyticsRegion = "us-central1",
    ///         ProjectId = project.ProjectId,
    ///         AuthorizedNetwork = apigeeNetwork.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             apigeeVpcConnection,
    ///             apigee,
    ///         },
    ///     });
    /// 
    ///     var apigeeEnvironmentKeystoreSsAliasEnvironment = new Gcp.Apigee.Environment("apigeeEnvironmentKeystoreSsAliasEnvironment", new()
    ///     {
    ///         OrgId = apigeeOrg.Id,
    ///         Description = "Apigee Environment",
    ///         DisplayName = "environment-1",
    ///     });
    /// 
    ///     var apigeeEnvironmentKeystoreAlias = new Gcp.Apigee.EnvKeystore("apigeeEnvironmentKeystoreAlias", new()
    ///     {
    ///         EnvId = apigeeEnvironmentKeystoreSsAliasEnvironment.Id,
    ///     });
    /// 
    ///     var apigeeEnvironmentKeystoreSsAliasKeystoresAliasesSelfSignedCert = new Gcp.Apigee.KeystoresAliasesSelfSignedCert("apigeeEnvironmentKeystoreSsAliasKeystoresAliasesSelfSignedCert", new()
    ///     {
    ///         Environment = apigeeEnvironmentKeystoreSsAliasEnvironment.Name,
    ///         OrgId = apigeeOrg.Name,
    ///         Keystore = apigeeEnvironmentKeystoreAlias.Name,
    ///         Alias = "alias",
    ///         KeySize = "1024",
    ///         SigAlg = "SHA512withRSA",
    ///         CertValidityInDays = 4,
    ///         Subject = new Gcp.Apigee.Inputs.KeystoresAliasesSelfSignedCertSubjectArgs
    ///         {
    ///             CommonName = "selfsigned_example",
    ///             CountryCode = "US",
    ///             Locality = "TX",
    ///             Org = "CCE",
    ///             OrgUnit = "PSO",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// KeystoresAliasesSelfSignedCert can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCert default organizations/{{org_id}}/environments/{{environment}}/keystores/{{keystore}}/aliases/{{alias}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCert default {{org_id}}/{{environment}}/{{keystore}}/{{alias}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCert")]
    public partial class KeystoresAliasesSelfSignedCert : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Alias for the key/certificate pair. Values must match the regular expression [\w\s-.]{1,255}.
        /// This must be provided for all formats except selfsignedcert; self-signed certs may specify the alias in either
        /// this parameter or the JSON body.
        /// </summary>
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        /// <summary>
        /// Validity duration of certificate, in days. Accepts positive non-zero value. Defaults to 365.
        /// </summary>
        [Output("certValidityInDays")]
        public Output<int?> CertValidityInDays { get; private set; } = null!;

        /// <summary>
        /// Chain of certificates under this alias.
        /// Structure is documented below.
        /// </summary>
        [Output("certsInfos")]
        public Output<ImmutableArray<Outputs.KeystoresAliasesSelfSignedCertCertsInfo>> CertsInfos { get; private set; } = null!;

        /// <summary>
        /// The Apigee environment name
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// Key size. Default and maximum value is 2048 bits.
        /// </summary>
        [Output("keySize")]
        public Output<string?> KeySize { get; private set; } = null!;

        /// <summary>
        /// The Apigee keystore name associated in an Apigee environment
        /// </summary>
        [Output("keystore")]
        public Output<string> Keystore { get; private set; } = null!;

        /// <summary>
        /// The Apigee Organization name associated with the Apigee environment
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Signature algorithm to generate private key. Valid values are SHA512withRSA, SHA384withRSA, and SHA256withRSA
        /// </summary>
        [Output("sigAlg")]
        public Output<string> SigAlg { get; private set; } = null!;

        /// <summary>
        /// Subject details.
        /// Structure is documented below.
        /// </summary>
        [Output("subject")]
        public Output<Outputs.KeystoresAliasesSelfSignedCertSubject> Subject { get; private set; } = null!;

        /// <summary>
        /// List of alternative host names. Maximum length is 255 characters for each value.
        /// Structure is documented below.
        /// </summary>
        [Output("subjectAlternativeDnsNames")]
        public Output<Outputs.KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNames?> SubjectAlternativeDnsNames { get; private set; } = null!;

        /// <summary>
        /// Optional.Type of Alias
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a KeystoresAliasesSelfSignedCert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeystoresAliasesSelfSignedCert(string name, KeystoresAliasesSelfSignedCertArgs args, CustomResourceOptions? options = null)
            : base("gcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCert", name, args ?? new KeystoresAliasesSelfSignedCertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KeystoresAliasesSelfSignedCert(string name, Input<string> id, KeystoresAliasesSelfSignedCertState? state = null, CustomResourceOptions? options = null)
            : base("gcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeystoresAliasesSelfSignedCert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeystoresAliasesSelfSignedCert Get(string name, Input<string> id, KeystoresAliasesSelfSignedCertState? state = null, CustomResourceOptions? options = null)
        {
            return new KeystoresAliasesSelfSignedCert(name, id, state, options);
        }
    }

    public sealed class KeystoresAliasesSelfSignedCertArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alias for the key/certificate pair. Values must match the regular expression [\w\s-.]{1,255}.
        /// This must be provided for all formats except selfsignedcert; self-signed certs may specify the alias in either
        /// this parameter or the JSON body.
        /// </summary>
        [Input("alias", required: true)]
        public Input<string> Alias { get; set; } = null!;

        /// <summary>
        /// Validity duration of certificate, in days. Accepts positive non-zero value. Defaults to 365.
        /// </summary>
        [Input("certValidityInDays")]
        public Input<int>? CertValidityInDays { get; set; }

        /// <summary>
        /// The Apigee environment name
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// Key size. Default and maximum value is 2048 bits.
        /// </summary>
        [Input("keySize")]
        public Input<string>? KeySize { get; set; }

        /// <summary>
        /// The Apigee keystore name associated in an Apigee environment
        /// </summary>
        [Input("keystore", required: true)]
        public Input<string> Keystore { get; set; } = null!;

        /// <summary>
        /// The Apigee Organization name associated with the Apigee environment
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Signature algorithm to generate private key. Valid values are SHA512withRSA, SHA384withRSA, and SHA256withRSA
        /// </summary>
        [Input("sigAlg", required: true)]
        public Input<string> SigAlg { get; set; } = null!;

        /// <summary>
        /// Subject details.
        /// Structure is documented below.
        /// </summary>
        [Input("subject", required: true)]
        public Input<Inputs.KeystoresAliasesSelfSignedCertSubjectArgs> Subject { get; set; } = null!;

        /// <summary>
        /// List of alternative host names. Maximum length is 255 characters for each value.
        /// Structure is documented below.
        /// </summary>
        [Input("subjectAlternativeDnsNames")]
        public Input<Inputs.KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNamesArgs>? SubjectAlternativeDnsNames { get; set; }

        public KeystoresAliasesSelfSignedCertArgs()
        {
        }
        public static new KeystoresAliasesSelfSignedCertArgs Empty => new KeystoresAliasesSelfSignedCertArgs();
    }

    public sealed class KeystoresAliasesSelfSignedCertState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alias for the key/certificate pair. Values must match the regular expression [\w\s-.]{1,255}.
        /// This must be provided for all formats except selfsignedcert; self-signed certs may specify the alias in either
        /// this parameter or the JSON body.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// Validity duration of certificate, in days. Accepts positive non-zero value. Defaults to 365.
        /// </summary>
        [Input("certValidityInDays")]
        public Input<int>? CertValidityInDays { get; set; }

        [Input("certsInfos")]
        private InputList<Inputs.KeystoresAliasesSelfSignedCertCertsInfoGetArgs>? _certsInfos;

        /// <summary>
        /// Chain of certificates under this alias.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.KeystoresAliasesSelfSignedCertCertsInfoGetArgs> CertsInfos
        {
            get => _certsInfos ?? (_certsInfos = new InputList<Inputs.KeystoresAliasesSelfSignedCertCertsInfoGetArgs>());
            set => _certsInfos = value;
        }

        /// <summary>
        /// The Apigee environment name
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// Key size. Default and maximum value is 2048 bits.
        /// </summary>
        [Input("keySize")]
        public Input<string>? KeySize { get; set; }

        /// <summary>
        /// The Apigee keystore name associated in an Apigee environment
        /// </summary>
        [Input("keystore")]
        public Input<string>? Keystore { get; set; }

        /// <summary>
        /// The Apigee Organization name associated with the Apigee environment
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Signature algorithm to generate private key. Valid values are SHA512withRSA, SHA384withRSA, and SHA256withRSA
        /// </summary>
        [Input("sigAlg")]
        public Input<string>? SigAlg { get; set; }

        /// <summary>
        /// Subject details.
        /// Structure is documented below.
        /// </summary>
        [Input("subject")]
        public Input<Inputs.KeystoresAliasesSelfSignedCertSubjectGetArgs>? Subject { get; set; }

        /// <summary>
        /// List of alternative host names. Maximum length is 255 characters for each value.
        /// Structure is documented below.
        /// </summary>
        [Input("subjectAlternativeDnsNames")]
        public Input<Inputs.KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNamesGetArgs>? SubjectAlternativeDnsNames { get; set; }

        /// <summary>
        /// Optional.Type of Alias
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public KeystoresAliasesSelfSignedCertState()
        {
        }
        public static new KeystoresAliasesSelfSignedCertState Empty => new KeystoresAliasesSelfSignedCertState();
    }
}
