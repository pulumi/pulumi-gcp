// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apigee
{
    /// <summary>
    /// Creates an app associated with a developer.
    /// This API associates the developer app with the specified API product
    /// and auto-generates an API key for the app to use in calls to API proxies
    /// inside that API product.
    /// 
    /// To get more information about DeveloperApp, see:
    /// 
    /// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.developers.apps)
    /// * How-to Guides
    ///     * [Creating a developer](https://cloud.google.com/apigee/docs/api-platform/publish/creating-apps-surface-your-api)
    /// 
    /// ## Example Usage
    /// 
    /// ### Apigee Developer App Basic
    /// 
    /// ### Apigee Developer App Basic Test
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = new Gcp.Organizations.Project("project", new()
    ///     {
    ///         ProjectId = "prj",
    ///         Name = "prj",
    ///         OrgId = "123456789",
    ///         BillingAccount = "000000-0000000-0000000-000000",
    ///         DeletionPolicy = "DELETE",
    ///     });
    /// 
    ///     var wait60Seconds = new Time.Index.Sleep("wait_60_seconds", new()
    ///     {
    ///         CreateDuration = "60s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             project,
    ///         },
    ///     });
    /// 
    ///     var apigee = new Gcp.Projects.Service("apigee", new()
    ///     {
    ///         Project = project.ProjectId,
    ///         ServiceName = "apigee.googleapis.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait60Seconds,
    ///         },
    ///     });
    /// 
    ///     var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    ///     {
    ///         AnalyticsRegion = "us-central1",
    ///         ProjectId = project.ProjectId,
    ///         DisableVpcPeering = true,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigee,
    ///         },
    ///     });
    /// 
    ///     var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    ///     {
    ///         Name = "instance",
    ///         Location = "us-central1",
    ///         OrgId = apigeeOrg.Id,
    ///     });
    /// 
    ///     var apiProduct = new Gcp.Apigee.ApiProduct("api_product", new()
    ///     {
    ///         Name = "sample-api",
    ///         OrgId = apigeeOrg.Id,
    ///         DisplayName = "A sample API Product",
    ///         ApprovalType = "auto",
    ///         Scopes = new[]
    ///         {
    ///             "read:weather",
    ///             "write:reports",
    ///             "write:files",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigeeInstance,
    ///         },
    ///     });
    /// 
    ///     var developer = new Gcp.Apigee.Developer("developer", new()
    ///     {
    ///         Email = "john.doe@acme.com",
    ///         FirstName = "John",
    ///         LastName = "Doe",
    ///         UserName = "john.doe",
    ///         OrgId = apigeeOrg.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             apigeeInstance,
    ///         },
    ///     });
    /// 
    ///     var apigeeDeveloperApp = new Gcp.Apigee.DeveloperApp("apigee_developer_app", new()
    ///     {
    ///         Name = "sample-app",
    ///         AppFamily = "default",
    ///         DeveloperEmail = developer.Email,
    ///         OrgId = apigeeOrg.Id,
    ///         CallbackUrl = "https://example-call.url",
    ///         KeyExpiresIn = "-1",
    ///         Status = "approved",
    ///         ApiProducts = new[]
    ///         {
    ///             apiProduct.Name,
    ///         },
    ///         Scopes = apiProduct.Scopes,
    ///         Attributes = new[]
    ///         {
    ///             new Gcp.Apigee.Inputs.DeveloperAppAttributeArgs
    ///             {
    ///                 Name = "sample_name",
    ///                 Value = "sample_value",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DeveloperApp can be imported using any of these accepted formats:
    /// 
    /// * `{{org_id}}/developers/{{developer_email}}/apps/{{name}}`
    /// 
    /// * `{{org_id}}/{{developer_email}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, DeveloperApp can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/developerApp:DeveloperApp default {{org_id}}/developers/{{developer_email}}/apps/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/developerApp:DeveloperApp default {{org_id}}/{{developer_email}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:apigee/developerApp:DeveloperApp")]
    public partial class DeveloperApp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of API products associated with the developer app.
        /// </summary>
        [Output("apiProducts")]
        public Output<ImmutableArray<string>> ApiProducts { get; private set; } = null!;

        /// <summary>
        /// Developer app family.
        /// </summary>
        [Output("appFamily")]
        public Output<string> AppFamily { get; private set; } = null!;

        /// <summary>
        /// ID of the developer app. This ID is not user specified but is
        /// automatically generated on app creation. appId is a UUID.
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// Developer attributes (name/value pairs). The custom attribute limit is 18.
        /// Structure is documented below.
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableArray<Outputs.DeveloperAppAttribute>> Attributes { get; private set; } = null!;

        /// <summary>
        /// Callback URL used by OAuth 2.0 authorization servers to communicate
        /// authorization codes back to developer apps.
        /// </summary>
        [Output("callbackUrl")]
        public Output<string> CallbackUrl { get; private set; } = null!;

        /// <summary>
        /// Time at which the developer was created in milliseconds since epoch.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Output only. Set of credentials for the developer app consisting of
        /// the consumer key/secret pairs associated with the API products.
        /// Structure is documented below.
        /// </summary>
        [Output("credentials")]
        public Output<ImmutableArray<Outputs.DeveloperAppCredential>> Credentials { get; private set; } = null!;

        /// <summary>
        /// Email address of the developer.
        /// This value is used to uniquely identify the developer in Apigee hybrid.
        /// Note that the email address has to be in lowercase only.
        /// </summary>
        [Output("developerEmail")]
        public Output<string> DeveloperEmail { get; private set; } = null!;

        /// <summary>
        /// ID of the developer.
        /// </summary>
        [Output("developerId")]
        public Output<string> DeveloperId { get; private set; } = null!;

        /// <summary>
        /// Expiration time, in milliseconds, for the consumer key that is generated
        /// for the developer app. If not set or left to the default value of -1,
        /// the API key never expires. The expiration time can't be updated after it is set.
        /// </summary>
        [Output("keyExpiresIn")]
        public Output<string?> KeyExpiresIn { get; private set; } = null!;

        /// <summary>
        /// Time at which the developer was last modified in milliseconds since epoch.
        /// </summary>
        [Output("lastModifiedAt")]
        public Output<string> LastModifiedAt { get; private set; } = null!;

        /// <summary>
        /// Name of the developer app.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Apigee Organization associated with the Apigee instance,
        /// in the format `organizations/{{org_name}}`.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Scopes to apply to the developer app.
        /// The specified scopes must already exist for the API product that
        /// you associate with the developer app.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// Status of the credential. Valid values include approved or revoked.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a DeveloperApp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeveloperApp(string name, DeveloperAppArgs args, CustomResourceOptions? options = null)
            : base("gcp:apigee/developerApp:DeveloperApp", name, args ?? new DeveloperAppArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeveloperApp(string name, Input<string> id, DeveloperAppState? state = null, CustomResourceOptions? options = null)
            : base("gcp:apigee/developerApp:DeveloperApp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeveloperApp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeveloperApp Get(string name, Input<string> id, DeveloperAppState? state = null, CustomResourceOptions? options = null)
        {
            return new DeveloperApp(name, id, state, options);
        }
    }

    public sealed class DeveloperAppArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiProducts")]
        private InputList<string>? _apiProducts;

        /// <summary>
        /// List of API products associated with the developer app.
        /// </summary>
        public InputList<string> ApiProducts
        {
            get => _apiProducts ?? (_apiProducts = new InputList<string>());
            set => _apiProducts = value;
        }

        /// <summary>
        /// Developer app family.
        /// </summary>
        [Input("appFamily")]
        public Input<string>? AppFamily { get; set; }

        [Input("attributes")]
        private InputList<Inputs.DeveloperAppAttributeArgs>? _attributes;

        /// <summary>
        /// Developer attributes (name/value pairs). The custom attribute limit is 18.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DeveloperAppAttributeArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.DeveloperAppAttributeArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// Callback URL used by OAuth 2.0 authorization servers to communicate
        /// authorization codes back to developer apps.
        /// </summary>
        [Input("callbackUrl", required: true)]
        public Input<string> CallbackUrl { get; set; } = null!;

        /// <summary>
        /// Email address of the developer.
        /// This value is used to uniquely identify the developer in Apigee hybrid.
        /// Note that the email address has to be in lowercase only.
        /// </summary>
        [Input("developerEmail", required: true)]
        public Input<string> DeveloperEmail { get; set; } = null!;

        /// <summary>
        /// Expiration time, in milliseconds, for the consumer key that is generated
        /// for the developer app. If not set or left to the default value of -1,
        /// the API key never expires. The expiration time can't be updated after it is set.
        /// </summary>
        [Input("keyExpiresIn")]
        public Input<string>? KeyExpiresIn { get; set; }

        /// <summary>
        /// Name of the developer app.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Apigee Organization associated with the Apigee instance,
        /// in the format `organizations/{{org_name}}`.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// Scopes to apply to the developer app.
        /// The specified scopes must already exist for the API product that
        /// you associate with the developer app.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Status of the credential. Valid values include approved or revoked.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public DeveloperAppArgs()
        {
        }
        public static new DeveloperAppArgs Empty => new DeveloperAppArgs();
    }

    public sealed class DeveloperAppState : global::Pulumi.ResourceArgs
    {
        [Input("apiProducts")]
        private InputList<string>? _apiProducts;

        /// <summary>
        /// List of API products associated with the developer app.
        /// </summary>
        public InputList<string> ApiProducts
        {
            get => _apiProducts ?? (_apiProducts = new InputList<string>());
            set => _apiProducts = value;
        }

        /// <summary>
        /// Developer app family.
        /// </summary>
        [Input("appFamily")]
        public Input<string>? AppFamily { get; set; }

        /// <summary>
        /// ID of the developer app. This ID is not user specified but is
        /// automatically generated on app creation. appId is a UUID.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        [Input("attributes")]
        private InputList<Inputs.DeveloperAppAttributeGetArgs>? _attributes;

        /// <summary>
        /// Developer attributes (name/value pairs). The custom attribute limit is 18.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DeveloperAppAttributeGetArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.DeveloperAppAttributeGetArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// Callback URL used by OAuth 2.0 authorization servers to communicate
        /// authorization codes back to developer apps.
        /// </summary>
        [Input("callbackUrl")]
        public Input<string>? CallbackUrl { get; set; }

        /// <summary>
        /// Time at which the developer was created in milliseconds since epoch.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("credentials")]
        private InputList<Inputs.DeveloperAppCredentialGetArgs>? _credentials;

        /// <summary>
        /// Output only. Set of credentials for the developer app consisting of
        /// the consumer key/secret pairs associated with the API products.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DeveloperAppCredentialGetArgs> Credentials
        {
            get => _credentials ?? (_credentials = new InputList<Inputs.DeveloperAppCredentialGetArgs>());
            set => _credentials = value;
        }

        /// <summary>
        /// Email address of the developer.
        /// This value is used to uniquely identify the developer in Apigee hybrid.
        /// Note that the email address has to be in lowercase only.
        /// </summary>
        [Input("developerEmail")]
        public Input<string>? DeveloperEmail { get; set; }

        /// <summary>
        /// ID of the developer.
        /// </summary>
        [Input("developerId")]
        public Input<string>? DeveloperId { get; set; }

        /// <summary>
        /// Expiration time, in milliseconds, for the consumer key that is generated
        /// for the developer app. If not set or left to the default value of -1,
        /// the API key never expires. The expiration time can't be updated after it is set.
        /// </summary>
        [Input("keyExpiresIn")]
        public Input<string>? KeyExpiresIn { get; set; }

        /// <summary>
        /// Time at which the developer was last modified in milliseconds since epoch.
        /// </summary>
        [Input("lastModifiedAt")]
        public Input<string>? LastModifiedAt { get; set; }

        /// <summary>
        /// Name of the developer app.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Apigee Organization associated with the Apigee instance,
        /// in the format `organizations/{{org_name}}`.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// Scopes to apply to the developer app.
        /// The specified scopes must already exist for the API product that
        /// you associate with the developer app.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Status of the credential. Valid values include approved or revoked.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public DeveloperAppState()
        {
        }
        public static new DeveloperAppState Empty => new DeveloperAppState();
    }
}
