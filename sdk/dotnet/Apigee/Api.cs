// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Apigee
{
    /// <summary>
    /// To get more information about API proxies see, see:
    /// 
    /// * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.apis)
    /// * How-to Guides
    ///   * [API proxies](https://cloud.google.com/apigee/docs/resources)
    /// 
    /// ## Import
    /// 
    /// An API proxy can be imported using any of these accepted formats:
    /// 
    /// * `{{org_id}}/apis/{{name}}`
    /// 
    /// * `{{org_id}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, API proxy can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/api:Api default {{org_id}}/apis/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:apigee/api:Api default {{org_id}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:apigee/api:Api")]
    public partial class Api : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Path to the config zip bundle.
        /// 
        /// - - -
        /// </summary>
        [Output("configBundle")]
        public Output<string> ConfigBundle { get; private set; } = null!;

        [Output("detectMd5hash")]
        public Output<string?> DetectMd5hash { get; private set; } = null!;

        /// <summary>
        /// The id of the most recently created revision for this API proxy.
        /// </summary>
        [Output("latestRevisionId")]
        public Output<string> LatestRevisionId { get; private set; } = null!;

        /// <summary>
        /// (Computed) Base 64 MD5 hash of the uploaded data. It is speculative as remote does not return hash of the bundle. Remote changes are detected using returned last_modified timestamp.
        /// </summary>
        [Output("md5hash")]
        public Output<string> Md5hash { get; private set; } = null!;

        /// <summary>
        /// Metadata describing the API proxy.
        /// Structure is documented below.
        /// </summary>
        [Output("metaDatas")]
        public Output<ImmutableArray<Outputs.ApiMetaData>> MetaDatas { get; private set; } = null!;

        /// <summary>
        /// The ID of the API proxy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Apigee Organization name associated with the Apigee instance.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// A list of revisions of this API proxy.
        /// </summary>
        [Output("revisions")]
        public Output<ImmutableArray<string>> Revisions { get; private set; } = null!;


        /// <summary>
        /// Create a Api resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Api(string name, ApiArgs args, CustomResourceOptions? options = null)
            : base("gcp:apigee/api:Api", name, args ?? new ApiArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Api(string name, Input<string> id, ApiState? state = null, CustomResourceOptions? options = null)
            : base("gcp:apigee/api:Api", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Api resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Api Get(string name, Input<string> id, ApiState? state = null, CustomResourceOptions? options = null)
        {
            return new Api(name, id, state, options);
        }
    }

    public sealed class ApiArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Path to the config zip bundle.
        /// 
        /// - - -
        /// </summary>
        [Input("configBundle", required: true)]
        public Input<string> ConfigBundle { get; set; } = null!;

        [Input("detectMd5hash")]
        public Input<string>? DetectMd5hash { get; set; }

        /// <summary>
        /// The ID of the API proxy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Apigee Organization name associated with the Apigee instance.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        public ApiArgs()
        {
        }
        public static new ApiArgs Empty => new ApiArgs();
    }

    public sealed class ApiState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Path to the config zip bundle.
        /// 
        /// - - -
        /// </summary>
        [Input("configBundle")]
        public Input<string>? ConfigBundle { get; set; }

        [Input("detectMd5hash")]
        public Input<string>? DetectMd5hash { get; set; }

        /// <summary>
        /// The id of the most recently created revision for this API proxy.
        /// </summary>
        [Input("latestRevisionId")]
        public Input<string>? LatestRevisionId { get; set; }

        /// <summary>
        /// (Computed) Base 64 MD5 hash of the uploaded data. It is speculative as remote does not return hash of the bundle. Remote changes are detected using returned last_modified timestamp.
        /// </summary>
        [Input("md5hash")]
        public Input<string>? Md5hash { get; set; }

        [Input("metaDatas")]
        private InputList<Inputs.ApiMetaDataGetArgs>? _metaDatas;

        /// <summary>
        /// Metadata describing the API proxy.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ApiMetaDataGetArgs> MetaDatas
        {
            get => _metaDatas ?? (_metaDatas = new InputList<Inputs.ApiMetaDataGetArgs>());
            set => _metaDatas = value;
        }

        /// <summary>
        /// The ID of the API proxy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Apigee Organization name associated with the Apigee instance.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("revisions")]
        private InputList<string>? _revisions;

        /// <summary>
        /// A list of revisions of this API proxy.
        /// </summary>
        public InputList<string> Revisions
        {
            get => _revisions ?? (_revisions = new InputList<string>());
            set => _revisions = value;
        }

        public ApiState()
        {
        }
        public static new ApiState Empty => new ApiState();
    }
}
