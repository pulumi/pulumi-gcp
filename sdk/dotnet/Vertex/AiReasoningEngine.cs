// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Vertex
{
    /// <summary>
    /// ReasoningEngine provides a customizable runtime for models to determine which actions to take and in which order.
    /// 
    /// To get more information about ReasoningEngine, see:
    /// 
    /// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.reasoningEngines/)
    /// * How-to Guides
    ///     * [Develop and deploy agents on Vertex AI Agent Engine](https://cloud.google.com/vertex-ai/generative-ai/docs/agent-engine/quickstart)
    /// 
    /// ## Example Usage
    /// 
    /// ### Vertex Ai Reasoning Engine Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var classMethods = new[]
    ///     {
    ///         
    ///         {
    ///             { "apiMode", "async" },
    ///             { "description", null },
    ///             { "name", "async_query" },
    ///             { "parameters", 
    ///             {
    ///                 { "type", "object" },
    ///                 { "required", new[] {} },
    ///                 { "properties", null },
    ///             } },
    ///         },
    ///     };
    /// 
    ///     var secret = new Gcp.SecretManager.Secret("secret", new()
    ///     {
    ///         SecretId = "secret",
    ///         Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///         {
    ///             Auto = null,
    ///         },
    ///     });
    /// 
    ///     var secretVersion = new Gcp.SecretManager.SecretVersion("secret_version", new()
    ///     {
    ///         Secret = secret.Id,
    ///         SecretData = "test",
    ///     });
    /// 
    ///     var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    ///     {
    ///         AccountId = "sa",
    ///     });
    /// 
    ///     var secretAccess = new Gcp.SecretManager.SecretIamMember("secret_access", new()
    ///     {
    ///         SecretId = secret.Id,
    ///         Role = "roles/secretmanager.secretAccessor",
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var saIamObjectViewer = new Gcp.Projects.IAMMember("sa_iam_object_viewer", new()
    ///     {
    ///         Role = "roles/storage.objectViewer",
    ///         Project = project.Apply(getProjectResult =&gt; getProjectResult.Id),
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    ///     var saIamAiPlatformUser = new Gcp.Projects.IAMMember("sa_iam_ai_platform_user", new()
    ///     {
    ///         Role = "roles/aiplatform.user",
    ///         Project = project.Apply(getProjectResult =&gt; getProjectResult.Id),
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    ///     var saIamViewer = new Gcp.Projects.IAMMember("sa_iam_viewer", new()
    ///     {
    ///         Role = "roles/viewer",
    ///         Project = project.Apply(getProjectResult =&gt; getProjectResult.Id),
    ///         Member = serviceAccount.Member,
    ///     });
    /// 
    ///     // Ensure we wait enough time for IAM permissions to be propagated
    ///     var wait5Minutes = new Time.Index.Sleep("wait_5_minutes", new()
    ///     {
    ///         CreateDuration = "5m",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             saIamAiPlatformUser,
    ///             saIamObjectViewer,
    ///             saIamViewer,
    ///             secretAccess,
    ///             secretVersion,
    ///         },
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = "reasoning-engine",
    ///         Location = "us-central1",
    ///         UniformBucketLevelAccess = true,
    ///         ForceDestroy = true,
    ///     });
    /// 
    ///     var bucketObjRequirementsTxt = new Gcp.Storage.BucketObject("bucket_obj_requirements_txt", new()
    ///     {
    ///         Name = "requirements.txt",
    ///         Bucket = bucket.Id,
    ///         Source = new FileAsset("./test-fixtures/requirements_adk.txt"),
    ///     });
    /// 
    ///     var bucketObjPickle = new Gcp.Storage.BucketObject("bucket_obj_pickle", new()
    ///     {
    ///         Name = "code.pkl",
    ///         Bucket = bucket.Id,
    ///         Source = new FileAsset("./test-fixtures/pickle_adk.pkl"),
    ///     });
    /// 
    ///     var bucketObjDependenciesTarGz = new Gcp.Storage.BucketObject("bucket_obj_dependencies_tar_gz", new()
    ///     {
    ///         Name = "dependencies.tar.gz",
    ///         Bucket = bucket.Id,
    ///         Source = new FileAsset("./test-fixtures/dependencies_adk.tar.gz"),
    ///     });
    /// 
    ///     var reasoningEngine = new Gcp.Vertex.AiReasoningEngine("reasoning_engine", new()
    ///     {
    ///         DisplayName = "reasoning-engine",
    ///         Description = "A basic reasoning engine",
    ///         Region = "us-central1",
    ///         EncryptionSpec = new Gcp.Vertex.Inputs.AiReasoningEngineEncryptionSpecArgs
    ///         {
    ///             KmsKeyName = "example-key",
    ///         },
    ///         Spec = new Gcp.Vertex.Inputs.AiReasoningEngineSpecArgs
    ///         {
    ///             AgentFramework = "google-adk",
    ///             ClassMethods = JsonSerializer.Serialize(classMethods),
    ///             ServiceAccount = serviceAccount.Email,
    ///             DeploymentSpec = new Gcp.Vertex.Inputs.AiReasoningEngineSpecDeploymentSpecArgs
    ///             {
    ///                 Envs = new[]
    ///                 {
    ///                     new Gcp.Vertex.Inputs.AiReasoningEngineSpecDeploymentSpecEnvArgs
    ///                     {
    ///                         Name = "var_1",
    ///                         Value = "value_2",
    ///                     },
    ///                     new Gcp.Vertex.Inputs.AiReasoningEngineSpecDeploymentSpecEnvArgs
    ///                     {
    ///                         Name = "var_2",
    ///                         Value = "value_2",
    ///                     },
    ///                 },
    ///                 SecretEnvs = new[]
    ///                 {
    ///                     new Gcp.Vertex.Inputs.AiReasoningEngineSpecDeploymentSpecSecretEnvArgs
    ///                     {
    ///                         Name = "secret_var_1",
    ///                         SecretRef = new Gcp.Vertex.Inputs.AiReasoningEngineSpecDeploymentSpecSecretEnvSecretRefArgs
    ///                         {
    ///                             Secret = secret.SecretId,
    ///                             Version = "latest",
    ///                         },
    ///                     },
    ///                     new Gcp.Vertex.Inputs.AiReasoningEngineSpecDeploymentSpecSecretEnvArgs
    ///                     {
    ///                         Name = "secret_var_2",
    ///                         SecretRef = new Gcp.Vertex.Inputs.AiReasoningEngineSpecDeploymentSpecSecretEnvSecretRefArgs
    ///                         {
    ///                             Secret = secret.SecretId,
    ///                             Version = "latest",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             PackageSpec = new Gcp.Vertex.Inputs.AiReasoningEngineSpecPackageSpecArgs
    ///             {
    ///                 DependencyFilesGcsUri = Output.Tuple(bucket.Url, bucketObjDependenciesTarGz.Name).Apply(values =&gt;
    ///                 {
    ///                     var url = values.Item1;
    ///                     var name = values.Item2;
    ///                     return $"{url}/{name}";
    ///                 }),
    ///                 PickleObjectGcsUri = Output.Tuple(bucket.Url, bucketObjPickle.Name).Apply(values =&gt;
    ///                 {
    ///                     var url = values.Item1;
    ///                     var name = values.Item2;
    ///                     return $"{url}/{name}";
    ///                 }),
    ///                 PythonVersion = "3.11",
    ///                 RequirementsGcsUri = Output.Tuple(bucket.Url, bucketObjRequirementsTxt.Name).Apply(values =&gt;
    ///                 {
    ///                     var url = values.Item1;
    ///                     var name = values.Item2;
    ///                     return $"{url}/{name}";
    ///                 }),
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait5Minutes,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ReasoningEngine can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}`
    /// 
    /// * `{{project}}/{{region}}/{{name}}`
    /// 
    /// * `{{region}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, ReasoningEngine can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiReasoningEngine:AiReasoningEngine default projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiReasoningEngine:AiReasoningEngine default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiReasoningEngine:AiReasoningEngine default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiReasoningEngine:AiReasoningEngine default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:vertex/aiReasoningEngine:AiReasoningEngine")]
    public partial class AiReasoningEngine : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format,
        /// with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The description of the ReasoningEngine.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of the ReasoningEngine.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Optional. Customer-managed encryption key spec for a ReasoningEngine.
        /// If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.
        /// Structure is documented below.
        /// </summary>
        [Output("encryptionSpec")]
        public Output<Outputs.AiReasoningEngineEncryptionSpec?> EncryptionSpec { get; private set; } = null!;

        /// <summary>
        /// The generated name of the ReasoningEngine, in the format
        /// 'projects/{project}/locations/{location}/reasoningEngines/{reasoningEngine}'
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The region of the reasoning engine. eg us-central1
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// Optional. Configurations of the ReasoningEngine.
        /// Structure is documented below.
        /// </summary>
        [Output("spec")]
        public Output<Outputs.AiReasoningEngineSpec?> Spec { get; private set; } = null!;

        /// <summary>
        /// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format,
        /// with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a AiReasoningEngine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AiReasoningEngine(string name, AiReasoningEngineArgs args, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiReasoningEngine:AiReasoningEngine", name, args ?? new AiReasoningEngineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AiReasoningEngine(string name, Input<string> id, AiReasoningEngineState? state = null, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiReasoningEngine:AiReasoningEngine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AiReasoningEngine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AiReasoningEngine Get(string name, Input<string> id, AiReasoningEngineState? state = null, CustomResourceOptions? options = null)
        {
            return new AiReasoningEngine(name, id, state, options);
        }
    }

    public sealed class AiReasoningEngineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the ReasoningEngine.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the ReasoningEngine.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Optional. Customer-managed encryption key spec for a ReasoningEngine.
        /// If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.
        /// Structure is documented below.
        /// </summary>
        [Input("encryptionSpec")]
        public Input<Inputs.AiReasoningEngineEncryptionSpecArgs>? EncryptionSpec { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the reasoning engine. eg us-central1
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Optional. Configurations of the ReasoningEngine.
        /// Structure is documented below.
        /// </summary>
        [Input("spec")]
        public Input<Inputs.AiReasoningEngineSpecArgs>? Spec { get; set; }

        public AiReasoningEngineArgs()
        {
        }
        public static new AiReasoningEngineArgs Empty => new AiReasoningEngineArgs();
    }

    public sealed class AiReasoningEngineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format,
        /// with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The description of the ReasoningEngine.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the ReasoningEngine.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Optional. Customer-managed encryption key spec for a ReasoningEngine.
        /// If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.
        /// Structure is documented below.
        /// </summary>
        [Input("encryptionSpec")]
        public Input<Inputs.AiReasoningEngineEncryptionSpecGetArgs>? EncryptionSpec { get; set; }

        /// <summary>
        /// The generated name of the ReasoningEngine, in the format
        /// 'projects/{project}/locations/{location}/reasoningEngines/{reasoningEngine}'
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the reasoning engine. eg us-central1
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Optional. Configurations of the ReasoningEngine.
        /// Structure is documented below.
        /// </summary>
        [Input("spec")]
        public Input<Inputs.AiReasoningEngineSpecGetArgs>? Spec { get; set; }

        /// <summary>
        /// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format,
        /// with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public AiReasoningEngineState()
        {
        }
        public static new AiReasoningEngineState Empty => new AiReasoningEngineState();
    }
}
