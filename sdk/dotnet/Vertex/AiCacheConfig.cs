// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Vertex
{
    /// <summary>
    /// Config of GenAI caching features. This is a singleton resource.
    /// 
    /// To get more information about CacheConfig, see:
    /// 
    /// * [API documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/reference/rest/v1/projects/updateCacheConfig)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/reference/rest/Shared.Types/CacheConfig)
    /// 
    /// ## Example Usage
    /// 
    /// ### Vertex Ai Cache Config
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cacheConfig = new Gcp.Vertex.AiCacheConfig("cache_config", new()
    ///     {
    ///         Project = "my-project-name",
    ///         DisableCache = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// CacheConfig can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/cacheConfig`
    /// 
    /// * `{{project}}`
    /// 
    /// When using the `pulumi import` command, CacheConfig can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiCacheConfig:AiCacheConfig default projects/{{project}}/cacheConfig
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiCacheConfig:AiCacheConfig default {{project}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:vertex/aiCacheConfig:AiCacheConfig")]
    public partial class AiCacheConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If set to true, disables GenAI caching. Otherwise caching is enabled.
        /// </summary>
        [Output("disableCache")]
        public Output<bool> DisableCache { get; private set; } = null!;

        /// <summary>
        /// Identifier. name of the cache config. Format: - `projects/{project}/cacheConfig`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a AiCacheConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AiCacheConfig(string name, AiCacheConfigArgs args, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiCacheConfig:AiCacheConfig", name, args ?? new AiCacheConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AiCacheConfig(string name, Input<string> id, AiCacheConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiCacheConfig:AiCacheConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AiCacheConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AiCacheConfig Get(string name, Input<string> id, AiCacheConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new AiCacheConfig(name, id, state, options);
        }
    }

    public sealed class AiCacheConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, disables GenAI caching. Otherwise caching is enabled.
        /// </summary>
        [Input("disableCache", required: true)]
        public Input<bool> DisableCache { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public AiCacheConfigArgs()
        {
        }
        public static new AiCacheConfigArgs Empty => new AiCacheConfigArgs();
    }

    public sealed class AiCacheConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, disables GenAI caching. Otherwise caching is enabled.
        /// </summary>
        [Input("disableCache")]
        public Input<bool>? DisableCache { get; set; }

        /// <summary>
        /// Identifier. name of the cache config. Format: - `projects/{project}/cacheConfig`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public AiCacheConfigState()
        {
        }
        public static new AiCacheConfigState Empty => new AiCacheConfigState();
    }
}
