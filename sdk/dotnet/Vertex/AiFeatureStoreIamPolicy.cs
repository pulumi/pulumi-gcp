// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Vertex
{
    /// <summary>
    /// A collection of DataItems and Annotations on them.
    /// 
    /// To get more information about Featurestore, see:
    /// 
    /// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/vertex-ai/docs)
    /// 
    /// ## Example Usage
    /// ### Vertex Ai Featurestore
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var featurestore = new Gcp.Vertex.AiFeatureStore("featurestore", new()
    ///     {
    ///         EncryptionSpec = new Gcp.Vertex.Inputs.AiFeatureStoreEncryptionSpecArgs
    ///         {
    ///             KmsKeyName = "kms-name",
    ///         },
    ///         ForceDestroy = true,
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         OnlineServingConfig = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigArgs
    ///         {
    ///             FixedNodeCount = 2,
    ///         },
    ///         Region = "us-central1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Featurestore can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy default projects/{{project}}/locations/{{region}}/featurestores/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy")]
    public partial class AiFeatureStoreIamPolicy : global::Pulumi.CustomResource
    {
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        [Output("featurestore")]
        public Output<string> Featurestore { get; private set; } = null!;

        [Output("policyData")]
        public Output<string> PolicyData { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The region of the dataset. eg us-central1
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a AiFeatureStoreIamPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AiFeatureStoreIamPolicy(string name, AiFeatureStoreIamPolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy", name, args ?? new AiFeatureStoreIamPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AiFeatureStoreIamPolicy(string name, Input<string> id, AiFeatureStoreIamPolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AiFeatureStoreIamPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AiFeatureStoreIamPolicy Get(string name, Input<string> id, AiFeatureStoreIamPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new AiFeatureStoreIamPolicy(name, id, state, options);
        }
    }

    public sealed class AiFeatureStoreIamPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("featurestore", required: true)]
        public Input<string> Featurestore { get; set; } = null!;

        [Input("policyData", required: true)]
        public Input<string> PolicyData { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the dataset. eg us-central1
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public AiFeatureStoreIamPolicyArgs()
        {
        }
        public static new AiFeatureStoreIamPolicyArgs Empty => new AiFeatureStoreIamPolicyArgs();
    }

    public sealed class AiFeatureStoreIamPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("featurestore")]
        public Input<string>? Featurestore { get; set; }

        [Input("policyData")]
        public Input<string>? PolicyData { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the dataset. eg us-central1
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public AiFeatureStoreIamPolicyState()
        {
        }
        public static new AiFeatureStoreIamPolicyState Empty => new AiFeatureStoreIamPolicyState();
    }
}
