// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Vertex
{
    /// <summary>
    /// An endpoint indexes are deployed into. An index endpoint can have multiple deployed indexes.
    /// 
    /// To get more information about IndexEndpointDeployedIndex, see:
    /// 
    /// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex)
    /// 
    /// ## Example Usage
    /// 
    /// ### Vertex Ai Index Endpoint Deployed Index Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sa = new Gcp.ServiceAccount.Account("sa", new()
    ///     {
    ///         Name = "vertex-sa",
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = "bucket-name",
    ///         Location = "us-central1",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var index = new Gcp.Vertex.AiIndex("index", new()
    ///     {
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Region = "us-central1",
    ///         DisplayName = "test-index",
    ///         Description = "index for test",
    ///         Metadata = new Gcp.Vertex.Inputs.AiIndexMetadataArgs
    ///         {
    ///             ContentsDeltaUri = bucket.Name.Apply(name =&gt; $"gs://{name}/contents"),
    ///             Config = new Gcp.Vertex.Inputs.AiIndexMetadataConfigArgs
    ///             {
    ///                 Dimensions = 2,
    ///                 ApproximateNeighborsCount = 150,
    ///                 ShardSize = "SHARD_SIZE_SMALL",
    ///                 DistanceMeasureType = "DOT_PRODUCT_DISTANCE",
    ///                 AlgorithmConfig = new Gcp.Vertex.Inputs.AiIndexMetadataConfigAlgorithmConfigArgs
    ///                 {
    ///                     TreeAhConfig = new Gcp.Vertex.Inputs.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs
    ///                     {
    ///                         LeafNodeEmbeddingCount = 500,
    ///                         LeafNodesToSearchPercent = 7,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         IndexUpdateMethod = "BATCH_UPDATE",
    ///     });
    /// 
    ///     var vertexNetwork = Gcp.Compute.GetNetwork.Invoke(new()
    ///     {
    ///         Name = "network-name",
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var vertexIndexEndpointDeployed = new Gcp.Vertex.AiIndexEndpoint("vertex_index_endpoint_deployed", new()
    ///     {
    ///         DisplayName = "sample-endpoint",
    ///         Description = "A sample vertex endpoint",
    ///         Region = "us-central1",
    ///         Labels = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///         Network = Output.Tuple(project, vertexNetwork).Apply(values =&gt;
    ///         {
    ///             var project = values.Item1;
    ///             var vertexNetwork = values.Item2;
    ///             return $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Number)}/global/networks/{vertexNetwork.Apply(getNetworkResult =&gt; getNetworkResult.Name)}";
    ///         }),
    ///     });
    /// 
    ///     var basicDeployedIndex = new Gcp.Vertex.AiIndexEndpointDeployedIndex("basic_deployed_index", new()
    ///     {
    ///         IndexEndpoint = vertexIndexEndpointDeployed.Id,
    ///         Index = index.Id,
    ///         DeployedIndexId = "deployed_index_id",
    ///         ReservedIpRanges = new[]
    ///         {
    ///             "vertex-ai-range",
    ///         },
    ///         EnableAccessLogging = false,
    ///         DisplayName = "vertex-deployed-index",
    ///         DeployedIndexAuthConfig = new Gcp.Vertex.Inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs
    ///         {
    ///             AuthProvider = new Gcp.Vertex.Inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs
    ///             {
    ///                 Audiences = new[]
    ///                 {
    ///                     "123456-my-app",
    ///                 },
    ///                 AllowedIssuers = new[]
    ///                 {
    ///                     sa.Email,
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             vertexIndexEndpointDeployed,
    ///             sa,
    ///         },
    ///     });
    /// 
    ///     // The sample data comes from the following link:
    ///     // https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
    ///     var data = new Gcp.Storage.BucketObject("data", new()
    ///     {
    ///         Name = "contents/data.json",
    ///         Bucket = bucket.Name,
    ///         Content = @"{""id"": ""42"", ""embedding"": [0.5, 1.0], ""restricts"": [{""namespace"": ""class"", ""allow"": [""cat"", ""pet""]},{""namespace"": ""category"", ""allow"": [""feline""]}]}
    /// {""id"": ""43"", ""embedding"": [0.6, 1.0], ""restricts"": [{""namespace"": ""class"", ""allow"": [""dog"", ""pet""]},{""namespace"": ""category"", ""allow"": [""canine""]}]}
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Vertex Ai Index Endpoint Deployed Index Basic Two
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sa = new Gcp.ServiceAccount.Account("sa", new()
    ///     {
    ///         Name = "vertex-sa",
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = "bucket-name",
    ///         Location = "us-central1",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var index = new Gcp.Vertex.AiIndex("index", new()
    ///     {
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Region = "us-central1",
    ///         DisplayName = "test-index",
    ///         Description = "index for test",
    ///         Metadata = new Gcp.Vertex.Inputs.AiIndexMetadataArgs
    ///         {
    ///             ContentsDeltaUri = bucket.Name.Apply(name =&gt; $"gs://{name}/contents"),
    ///             Config = new Gcp.Vertex.Inputs.AiIndexMetadataConfigArgs
    ///             {
    ///                 Dimensions = 2,
    ///                 ApproximateNeighborsCount = 150,
    ///                 ShardSize = "SHARD_SIZE_SMALL",
    ///                 DistanceMeasureType = "DOT_PRODUCT_DISTANCE",
    ///                 AlgorithmConfig = new Gcp.Vertex.Inputs.AiIndexMetadataConfigAlgorithmConfigArgs
    ///                 {
    ///                     TreeAhConfig = new Gcp.Vertex.Inputs.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs
    ///                     {
    ///                         LeafNodeEmbeddingCount = 500,
    ///                         LeafNodesToSearchPercent = 7,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         IndexUpdateMethod = "BATCH_UPDATE",
    ///     });
    /// 
    ///     var vertexNetwork = Gcp.Compute.GetNetwork.Invoke(new()
    ///     {
    ///         Name = "network-name",
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var vertexIndexEndpointDeployed = new Gcp.Vertex.AiIndexEndpoint("vertex_index_endpoint_deployed", new()
    ///     {
    ///         DisplayName = "sample-endpoint",
    ///         Description = "A sample vertex endpoint",
    ///         Region = "us-central1",
    ///         Labels = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///         Network = Output.Tuple(project, vertexNetwork).Apply(values =&gt;
    ///         {
    ///             var project = values.Item1;
    ///             var vertexNetwork = values.Item2;
    ///             return $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Number)}/global/networks/{vertexNetwork.Apply(getNetworkResult =&gt; getNetworkResult.Name)}";
    ///         }),
    ///     });
    /// 
    ///     var basicDeployedIndex = new Gcp.Vertex.AiIndexEndpointDeployedIndex("basic_deployed_index", new()
    ///     {
    ///         IndexEndpoint = vertexIndexEndpointDeployed.Id,
    ///         Index = index.Id,
    ///         DeployedIndexId = "deployed_index_id",
    ///         ReservedIpRanges = new[]
    ///         {
    ///             "vertex-ai-range",
    ///         },
    ///         EnableAccessLogging = false,
    ///         DisplayName = "vertex-deployed-index",
    ///         DeployedIndexAuthConfig = new Gcp.Vertex.Inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs
    ///         {
    ///             AuthProvider = new Gcp.Vertex.Inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs
    ///             {
    ///                 Audiences = new[]
    ///                 {
    ///                     "123456-my-app",
    ///                 },
    ///                 AllowedIssuers = new[]
    ///                 {
    ///                     sa.Email,
    ///                 },
    ///             },
    ///         },
    ///         AutomaticResources = new Gcp.Vertex.Inputs.AiIndexEndpointDeployedIndexAutomaticResourcesArgs
    ///         {
    ///             MaxReplicaCount = 4,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             vertexIndexEndpointDeployed,
    ///             sa,
    ///         },
    ///     });
    /// 
    ///     // The sample data comes from the following link:
    ///     // https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
    ///     var data = new Gcp.Storage.BucketObject("data", new()
    ///     {
    ///         Name = "contents/data.json",
    ///         Bucket = bucket.Name,
    ///         Content = @"{""id"": ""42"", ""embedding"": [0.5, 1.0], ""restricts"": [{""namespace"": ""class"", ""allow"": [""cat"", ""pet""]},{""namespace"": ""category"", ""allow"": [""feline""]}]}
    /// {""id"": ""43"", ""embedding"": [0.6, 1.0], ""restricts"": [{""namespace"": ""class"", ""allow"": [""dog"", ""pet""]},{""namespace"": ""category"", ""allow"": [""canine""]}]}
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// IndexEndpointDeployedIndex can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{region}}/indexEndpoints/{{index_endpoint}}/deployedIndex/{{deployed_index_id}}`
    /// 
    /// * `{{project}}/{{region}}/{{index_endpoint}}/{{deployed_index_id}}`
    /// 
    /// * `{{region}}/{{index_endpoint}}/{{deployed_index_id}}`
    /// 
    /// * `{{index_endpoint}}/{{deployed_index_id}}`
    /// 
    /// When using the `pulumi import` command, IndexEndpointDeployedIndex can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex default projects/{{project}}/locations/{{region}}/indexEndpoints/{{index_endpoint}}/deployedIndex/{{deployed_index_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex default {{project}}/{{region}}/{{index_endpoint}}/{{deployed_index_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex default {{region}}/{{index_endpoint}}/{{deployed_index_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex default {{index_endpoint}}/{{deployed_index_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex")]
    public partial class AiIndexEndpointDeployedIndex : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally allows only a modest additional configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("automaticResources")]
        public Output<Outputs.AiIndexEndpointDeployedIndexAutomaticResources> AutomaticResources { get; private set; } = null!;

        /// <summary>
        /// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail. We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
        /// Available machine types for SMALL shard: e2-standard-2 and all machine types available for MEDIUM and LARGE shard.
        /// Available machine types for MEDIUM shard: e2-standard-16 and all machine types available for LARGE shard.
        /// Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32.
        /// n1-standard-16 and n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
        /// Structure is documented below.
        /// </summary>
        [Output("dedicatedResources")]
        public Output<Outputs.AiIndexEndpointDeployedIndexDedicatedResources?> DedicatedResources { get; private set; } = null!;

        /// <summary>
        /// If set, the authentication is enabled for the private endpoint.
        /// Structure is documented below.
        /// </summary>
        [Output("deployedIndexAuthConfig")]
        public Output<Outputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfig?> DeployedIndexAuthConfig { get; private set; } = null!;

        /// <summary>
        /// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
        /// </summary>
        [Output("deployedIndexId")]
        public Output<string> DeployedIndexId { get; private set; } = null!;

        /// <summary>
        /// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group.
        /// Creating deployment_groups with reserved_ip_ranges is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See the official documentation here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
        /// Note: we only support up to 5 deployment groups (not including 'default').
        /// </summary>
        [Output("deploymentGroup")]
        public Output<string?> DeploymentGroup { get; private set; } = null!;

        /// <summary>
        /// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// If true, private endpoint's access logs are sent to Cloud Logging.
        /// </summary>
        [Output("enableAccessLogging")]
        public Output<bool?> EnableAccessLogging { get; private set; } = null!;

        /// <summary>
        /// The name of the Index this is the deployment of.
        /// </summary>
        [Output("index")]
        public Output<string> Index { get; private set; } = null!;

        /// <summary>
        /// Identifies the index endpoint. Must be in the format
        /// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("indexEndpoint")]
        public Output<string> IndexEndpoint { get; private set; } = null!;

        /// <summary>
        /// The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously updated in the background to reflect these changes. If this timestamp's value is at least the [Index.update_time](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes#Index.FIELDS.update_time) of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older, then to see which updates this DeployedIndex already contains (and which it does not), one must [list](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.operations/list#google.longrunning.Operations.ListOperations) the operations that are running on the original Index. Only the successfully completed Operations with updateTime equal or before this sync time are contained in this DeployedIndex.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("indexSyncTime")]
        public Output<string> IndexSyncTime { get; private set; } = null!;

        /// <summary>
        /// The name of the DeployedIndex resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provides paths for users to send requests directly to the deployed index services running on Cloud via private services access. This field is populated if [network](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#IndexEndpoint.FIELDS.network) is configured.
        /// Structure is documented below.
        /// </summary>
        [Output("privateEndpoints")]
        public Output<ImmutableArray<Outputs.AiIndexEndpointDeployedIndexPrivateEndpoint>> PrivateEndpoints { get; private set; } = null!;

        /// <summary>
        /// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex.
        /// If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network.
        /// The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range'].
        /// For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
        /// </summary>
        [Output("reservedIpRanges")]
        public Output<ImmutableArray<string>> ReservedIpRanges { get; private set; } = null!;


        /// <summary>
        /// Create a AiIndexEndpointDeployedIndex resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AiIndexEndpointDeployedIndex(string name, AiIndexEndpointDeployedIndexArgs args, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex", name, args ?? new AiIndexEndpointDeployedIndexArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AiIndexEndpointDeployedIndex(string name, Input<string> id, AiIndexEndpointDeployedIndexState? state = null, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AiIndexEndpointDeployedIndex resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AiIndexEndpointDeployedIndex Get(string name, Input<string> id, AiIndexEndpointDeployedIndexState? state = null, CustomResourceOptions? options = null)
        {
            return new AiIndexEndpointDeployedIndex(name, id, state, options);
        }
    }

    public sealed class AiIndexEndpointDeployedIndexArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally allows only a modest additional configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("automaticResources")]
        public Input<Inputs.AiIndexEndpointDeployedIndexAutomaticResourcesArgs>? AutomaticResources { get; set; }

        /// <summary>
        /// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail. We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
        /// Available machine types for SMALL shard: e2-standard-2 and all machine types available for MEDIUM and LARGE shard.
        /// Available machine types for MEDIUM shard: e2-standard-16 and all machine types available for LARGE shard.
        /// Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32.
        /// n1-standard-16 and n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
        /// Structure is documented below.
        /// </summary>
        [Input("dedicatedResources")]
        public Input<Inputs.AiIndexEndpointDeployedIndexDedicatedResourcesArgs>? DedicatedResources { get; set; }

        /// <summary>
        /// If set, the authentication is enabled for the private endpoint.
        /// Structure is documented below.
        /// </summary>
        [Input("deployedIndexAuthConfig")]
        public Input<Inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs>? DeployedIndexAuthConfig { get; set; }

        /// <summary>
        /// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
        /// </summary>
        [Input("deployedIndexId", required: true)]
        public Input<string> DeployedIndexId { get; set; } = null!;

        /// <summary>
        /// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group.
        /// Creating deployment_groups with reserved_ip_ranges is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See the official documentation here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
        /// Note: we only support up to 5 deployment groups (not including 'default').
        /// </summary>
        [Input("deploymentGroup")]
        public Input<string>? DeploymentGroup { get; set; }

        /// <summary>
        /// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// If true, private endpoint's access logs are sent to Cloud Logging.
        /// </summary>
        [Input("enableAccessLogging")]
        public Input<bool>? EnableAccessLogging { get; set; }

        /// <summary>
        /// The name of the Index this is the deployment of.
        /// </summary>
        [Input("index", required: true)]
        public Input<string> Index { get; set; } = null!;

        /// <summary>
        /// Identifies the index endpoint. Must be in the format
        /// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("indexEndpoint", required: true)]
        public Input<string> IndexEndpoint { get; set; } = null!;

        [Input("reservedIpRanges")]
        private InputList<string>? _reservedIpRanges;

        /// <summary>
        /// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex.
        /// If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network.
        /// The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range'].
        /// For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
        /// </summary>
        public InputList<string> ReservedIpRanges
        {
            get => _reservedIpRanges ?? (_reservedIpRanges = new InputList<string>());
            set => _reservedIpRanges = value;
        }

        public AiIndexEndpointDeployedIndexArgs()
        {
        }
        public static new AiIndexEndpointDeployedIndexArgs Empty => new AiIndexEndpointDeployedIndexArgs();
    }

    public sealed class AiIndexEndpointDeployedIndexState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally allows only a modest additional configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("automaticResources")]
        public Input<Inputs.AiIndexEndpointDeployedIndexAutomaticResourcesGetArgs>? AutomaticResources { get; set; }

        /// <summary>
        /// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail. We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
        /// Available machine types for SMALL shard: e2-standard-2 and all machine types available for MEDIUM and LARGE shard.
        /// Available machine types for MEDIUM shard: e2-standard-16 and all machine types available for LARGE shard.
        /// Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32.
        /// n1-standard-16 and n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
        /// Structure is documented below.
        /// </summary>
        [Input("dedicatedResources")]
        public Input<Inputs.AiIndexEndpointDeployedIndexDedicatedResourcesGetArgs>? DedicatedResources { get; set; }

        /// <summary>
        /// If set, the authentication is enabled for the private endpoint.
        /// Structure is documented below.
        /// </summary>
        [Input("deployedIndexAuthConfig")]
        public Input<Inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigGetArgs>? DeployedIndexAuthConfig { get; set; }

        /// <summary>
        /// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
        /// </summary>
        [Input("deployedIndexId")]
        public Input<string>? DeployedIndexId { get; set; }

        /// <summary>
        /// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group.
        /// Creating deployment_groups with reserved_ip_ranges is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See the official documentation here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
        /// Note: we only support up to 5 deployment groups (not including 'default').
        /// </summary>
        [Input("deploymentGroup")]
        public Input<string>? DeploymentGroup { get; set; }

        /// <summary>
        /// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// If true, private endpoint's access logs are sent to Cloud Logging.
        /// </summary>
        [Input("enableAccessLogging")]
        public Input<bool>? EnableAccessLogging { get; set; }

        /// <summary>
        /// The name of the Index this is the deployment of.
        /// </summary>
        [Input("index")]
        public Input<string>? Index { get; set; }

        /// <summary>
        /// Identifies the index endpoint. Must be in the format
        /// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("indexEndpoint")]
        public Input<string>? IndexEndpoint { get; set; }

        /// <summary>
        /// The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously updated in the background to reflect these changes. If this timestamp's value is at least the [Index.update_time](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes#Index.FIELDS.update_time) of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older, then to see which updates this DeployedIndex already contains (and which it does not), one must [list](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.operations/list#google.longrunning.Operations.ListOperations) the operations that are running on the original Index. Only the successfully completed Operations with updateTime equal or before this sync time are contained in this DeployedIndex.
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("indexSyncTime")]
        public Input<string>? IndexSyncTime { get; set; }

        /// <summary>
        /// The name of the DeployedIndex resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateEndpoints")]
        private InputList<Inputs.AiIndexEndpointDeployedIndexPrivateEndpointGetArgs>? _privateEndpoints;

        /// <summary>
        /// Provides paths for users to send requests directly to the deployed index services running on Cloud via private services access. This field is populated if [network](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#IndexEndpoint.FIELDS.network) is configured.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AiIndexEndpointDeployedIndexPrivateEndpointGetArgs> PrivateEndpoints
        {
            get => _privateEndpoints ?? (_privateEndpoints = new InputList<Inputs.AiIndexEndpointDeployedIndexPrivateEndpointGetArgs>());
            set => _privateEndpoints = value;
        }

        [Input("reservedIpRanges")]
        private InputList<string>? _reservedIpRanges;

        /// <summary>
        /// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex.
        /// If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network.
        /// The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range'].
        /// For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
        /// </summary>
        public InputList<string> ReservedIpRanges
        {
            get => _reservedIpRanges ?? (_reservedIpRanges = new InputList<string>());
            set => _reservedIpRanges = value;
        }

        public AiIndexEndpointDeployedIndexState()
        {
        }
        public static new AiIndexEndpointDeployedIndexState Empty => new AiIndexEndpointDeployedIndexState();
    }
}
