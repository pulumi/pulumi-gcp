// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Vertex.Outputs
{

    [OutputType]
    public sealed class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbe
    {
        /// <summary>
        /// ExecAction specifies a command to execute.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExec? Exec;
        /// <summary>
        /// Number of consecutive failures before the probe is considered failed.
        /// Defaults to 3. Minimum value is 1.
        /// Maps to Kubernetes probe argument 'failureThreshold'.
        /// </summary>
        public readonly int? FailureThreshold;
        /// <summary>
        /// GrpcAction checks the health of a container using a gRPC service.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpc? Grpc;
        /// <summary>
        /// HttpGetAction describes an action based on HTTP Get requests.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGet? HttpGet;
        /// <summary>
        /// Number of seconds to wait before starting the probe. Defaults to 0.
        /// Minimum value is 0.
        /// Maps to Kubernetes probe argument 'initialDelaySeconds'.
        /// </summary>
        public readonly int? InitialDelaySeconds;
        /// <summary>
        /// How often (in seconds) to perform the probe. Default to 10 seconds.
        /// Minimum value is 1. Must be less than timeout_seconds.
        /// Maps to Kubernetes probe argument 'periodSeconds'.
        /// </summary>
        public readonly int? PeriodSeconds;
        /// <summary>
        /// Number of consecutive successes before the probe is considered successful.
        /// Defaults to 1. Minimum value is 1.
        /// Maps to Kubernetes probe argument 'successThreshold'.
        /// </summary>
        public readonly int? SuccessThreshold;
        /// <summary>
        /// TcpSocketAction probes the health of a container by opening a TCP socket
        /// connection.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocket? TcpSocket;
        /// <summary>
        /// Number of seconds after which the probe times out. Defaults to 1 second.
        /// Minimum value is 1. Must be greater or equal to period_seconds.
        /// Maps to Kubernetes probe argument 'timeoutSeconds'.
        /// </summary>
        public readonly int? TimeoutSeconds;

        [OutputConstructor]
        private AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbe(
            Outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExec? exec,

            int? failureThreshold,

            Outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpc? grpc,

            Outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGet? httpGet,

            int? initialDelaySeconds,

            int? periodSeconds,

            int? successThreshold,

            Outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocket? tcpSocket,

            int? timeoutSeconds)
        {
            Exec = exec;
            FailureThreshold = failureThreshold;
            Grpc = grpc;
            HttpGet = httpGet;
            InitialDelaySeconds = initialDelaySeconds;
            PeriodSeconds = periodSeconds;
            SuccessThreshold = successThreshold;
            TcpSocket = tcpSocket;
            TimeoutSeconds = timeoutSeconds;
        }
    }
}
