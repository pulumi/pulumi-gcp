// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Vertex.Outputs
{

    [OutputType]
    public sealed class AiEndpointWithModelGardenDeploymentModelConfig
    {
        /// <summary>
        /// Whether the user accepts the End User License Agreement (EULA)
        /// for the model.
        /// </summary>
        public readonly bool? AcceptEula;
        /// <summary>
        /// Specification of a container for serving predictions. Some fields in this
        /// message correspond to fields in the [Kubernetes Container v1 core
        /// specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpec? ContainerSpec;
        /// <summary>
        /// The Hugging Face read access token used to access the model
        /// artifacts of gated models.
        /// </summary>
        public readonly string? HuggingFaceAccessToken;
        /// <summary>
        /// If true, the model will deploy with a cached version instead of directly
        /// downloading the model artifacts from Hugging Face. This is suitable for
        /// VPC-SC users with limited internet access.
        /// </summary>
        public readonly bool? HuggingFaceCacheEnabled;
        /// <summary>
        /// The user-specified display name of the uploaded model. If not
        /// set, a default name will be used.
        /// </summary>
        public readonly string? ModelDisplayName;

        [OutputConstructor]
        private AiEndpointWithModelGardenDeploymentModelConfig(
            bool? acceptEula,

            Outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpec? containerSpec,

            string? huggingFaceAccessToken,

            bool? huggingFaceCacheEnabled,

            string? modelDisplayName)
        {
            AcceptEula = acceptEula;
            ContainerSpec = containerSpec;
            HuggingFaceAccessToken = huggingFaceAccessToken;
            HuggingFaceCacheEnabled = huggingFaceCacheEnabled;
            ModelDisplayName = modelDisplayName;
        }
    }
}
