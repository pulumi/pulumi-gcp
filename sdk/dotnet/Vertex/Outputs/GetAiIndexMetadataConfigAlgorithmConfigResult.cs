// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Vertex.Outputs
{

    [OutputType]
    public sealed class GetAiIndexMetadataConfigAlgorithmConfigResult
    {
        /// <summary>
        /// Configuration options for using brute force search, which simply implements the
        /// standard linear search in the database for each query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAiIndexMetadataConfigAlgorithmConfigBruteForceConfigResult> BruteForceConfigs;
        /// <summary>
        /// Configuration options for using the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
        /// Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAiIndexMetadataConfigAlgorithmConfigTreeAhConfigResult> TreeAhConfigs;

        [OutputConstructor]
        private GetAiIndexMetadataConfigAlgorithmConfigResult(
            ImmutableArray<Outputs.GetAiIndexMetadataConfigAlgorithmConfigBruteForceConfigResult> bruteForceConfigs,

            ImmutableArray<Outputs.GetAiIndexMetadataConfigAlgorithmConfigTreeAhConfigResult> treeAhConfigs)
        {
            BruteForceConfigs = bruteForceConfigs;
            TreeAhConfigs = treeAhConfigs;
        }
    }
}
