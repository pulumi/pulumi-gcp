// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Vertex
{
    /// <summary>
    /// FeatureView is representation of values that the FeatureOnlineStore will serve based on its syncConfig.
    /// 
    /// To get more information about FeatureOnlineStoreFeatureview, see:
    /// 
    /// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featureOnlineStores.featureViews)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/vertex-ai/docs)
    /// 
    /// ## Example Usage
    /// 
    /// ### Vertex Ai Featureonlinestore Featureview
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var featureonlinestore = new Gcp.Vertex.AiFeatureOnlineStore("featureonlinestore", new()
    ///     {
    ///         Name = "example_feature_view",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Region = "us-central1",
    ///         Bigtable = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableArgs
    ///         {
    ///             AutoScaling = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs
    ///             {
    ///                 MinNodeCount = 1,
    ///                 MaxNodeCount = 2,
    ///                 CpuUtilizationTarget = 80,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var tf_test_dataset = new Gcp.BigQuery.Dataset("tf-test-dataset", new()
    ///     {
    ///         DatasetId = "example_feature_view",
    ///         FriendlyName = "test",
    ///         Description = "This is a test description",
    ///         Location = "US",
    ///     });
    /// 
    ///     var tf_test_table = new Gcp.BigQuery.Table("tf-test-table", new()
    ///     {
    ///         DeletionProtection = false,
    ///         DatasetId = tf_test_dataset.DatasetId,
    ///         TableId = "example_feature_view",
    ///         Schema = @"  [
    ///   {
    ///     ""name"": ""entity_id"",
    ///     ""mode"": ""NULLABLE"",
    ///     ""type"": ""STRING"",
    ///     ""description"": ""Test default entity_id""
    ///   },
    ///     {
    ///     ""name"": ""test_entity_column"",
    ///     ""mode"": ""NULLABLE"",
    ///     ""type"": ""STRING"",
    ///     ""description"": ""test secondary entity column""
    ///   },
    ///   {
    ///     ""name"": ""feature_timestamp"",
    ///     ""mode"": ""NULLABLE"",
    ///     ""type"": ""TIMESTAMP"",
    ///     ""description"": ""Default timestamp value""
    ///   }
    /// ]
    /// ",
    ///     });
    /// 
    ///     var featureview = new Gcp.Vertex.AiFeatureOnlineStoreFeatureview("featureview", new()
    ///     {
    ///         Name = "example_feature_view",
    ///         Region = "us-central1",
    ///         FeatureOnlineStore = featureonlinestore.Name,
    ///         SyncConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs
    ///         {
    ///             Cron = "0 0 * * *",
    ///         },
    ///         BigQuerySource = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs
    ///         {
    ///             Uri = Output.Tuple(tf_test_table.Project, tf_test_table.DatasetId, tf_test_table.TableId).Apply(values =&gt;
    ///             {
    ///                 var project = values.Item1;
    ///                 var datasetId = values.Item2;
    ///                 var tableId = values.Item3;
    ///                 return $"bq://{project}.{datasetId}.{tableId}";
    ///             }),
    ///             EntityIdColumns = new[]
    ///             {
    ///                 "test_entity_column",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    /// });
    /// ```
    /// ### Vertex Ai Featureonlinestore Featureview Feature Registry
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var featureonlinestore = new Gcp.Vertex.AiFeatureOnlineStore("featureonlinestore", new()
    ///     {
    ///         Name = "example_feature_view_feature_registry",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Region = "us-central1",
    ///         Bigtable = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableArgs
    ///         {
    ///             AutoScaling = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs
    ///             {
    ///                 MinNodeCount = 1,
    ///                 MaxNodeCount = 2,
    ///                 CpuUtilizationTarget = 80,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var sampleDataset = new Gcp.BigQuery.Dataset("sample_dataset", new()
    ///     {
    ///         DatasetId = "example_feature_view_feature_registry",
    ///         FriendlyName = "test",
    ///         Description = "This is a test description",
    ///         Location = "US",
    ///     });
    /// 
    ///     var sampleTable = new Gcp.BigQuery.Table("sample_table", new()
    ///     {
    ///         DeletionProtection = false,
    ///         DatasetId = sampleDataset.DatasetId,
    ///         TableId = "example_feature_view_feature_registry",
    ///         Schema = @"[
    ///     {
    ///         ""name"": ""feature_id"",
    ///         ""type"": ""STRING"",
    ///         ""mode"": ""NULLABLE""
    ///     },
    ///     {
    ///         ""name"": ""example_feature_view_feature_registry"",
    ///         ""type"": ""STRING"",
    ///         ""mode"": ""NULLABLE""
    ///     },
    ///     {
    ///         ""name"": ""feature_timestamp"",
    ///         ""type"": ""TIMESTAMP"",
    ///         ""mode"": ""NULLABLE""
    ///     }
    /// ]
    /// ",
    ///     });
    /// 
    ///     var sampleFeatureGroup = new Gcp.Vertex.AiFeatureGroup("sample_feature_group", new()
    ///     {
    ///         Name = "example_feature_view_feature_registry",
    ///         Description = "A sample feature group",
    ///         Region = "us-central1",
    ///         Labels = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///         BigQuery = new Gcp.Vertex.Inputs.AiFeatureGroupBigQueryArgs
    ///         {
    ///             BigQuerySource = new Gcp.Vertex.Inputs.AiFeatureGroupBigQueryBigQuerySourceArgs
    ///             {
    ///                 InputUri = Output.Tuple(sampleTable.Project, sampleTable.DatasetId, sampleTable.TableId).Apply(values =&gt;
    ///                 {
    ///                     var project = values.Item1;
    ///                     var datasetId = values.Item2;
    ///                     var tableId = values.Item3;
    ///                     return $"bq://{project}.{datasetId}.{tableId}";
    ///                 }),
    ///             },
    ///             EntityIdColumns = new[]
    ///             {
    ///                 "feature_id",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var sampleFeature = new Gcp.Vertex.AiFeatureGroupFeature("sample_feature", new()
    ///     {
    ///         Name = "example_feature_view_feature_registry",
    ///         Region = "us-central1",
    ///         FeatureGroup = sampleFeatureGroup.Name,
    ///         Description = "A sample feature",
    ///         Labels = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///     });
    /// 
    ///     var featureviewFeatureregistry = new Gcp.Vertex.AiFeatureOnlineStoreFeatureview("featureview_featureregistry", new()
    ///     {
    ///         Name = "example_feature_view_feature_registry",
    ///         Region = "us-central1",
    ///         FeatureOnlineStore = featureonlinestore.Name,
    ///         SyncConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs
    ///         {
    ///             Cron = "0 0 * * *",
    ///         },
    ///         FeatureRegistrySource = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs
    ///         {
    ///             FeatureGroups = new[]
    ///             {
    ///                 new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs
    ///                 {
    ///                     FeatureGroupId = sampleFeatureGroup.Name,
    ///                     FeatureIds = new[]
    ///                     {
    ///                         sampleFeature.Name,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Vertex Ai Featureonlinestore Featureview Cross Project
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Time = Pulumi.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testProject = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var project = new Gcp.Organizations.Project("project", new()
    ///     {
    ///         ProjectId = "tf-test_89313",
    ///         Name = "tf-test_60646",
    ///         OrgId = "123456789",
    ///         BillingAccount = "000000-0000000-0000000-000000",
    ///         DeletionPolicy = "DELETE",
    ///     });
    /// 
    ///     var wait60Seconds = new Time.Index.Sleep("wait_60_seconds", new()
    ///     {
    ///         CreateDuration = "60s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             project,
    ///         },
    ///     });
    /// 
    ///     var vertexai = new Gcp.Projects.Service("vertexai", new()
    ///     {
    ///         ServiceName = "aiplatform.googleapis.com",
    ///         Project = project.ProjectId,
    ///         DisableOnDestroy = false,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             wait60Seconds,
    ///         },
    ///     });
    /// 
    ///     var featureonlinestore = new Gcp.Vertex.AiFeatureOnlineStore("featureonlinestore", new()
    ///     {
    ///         Name = "example_cross_project_featureview",
    ///         Project = project.ProjectId,
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Region = "us-central1",
    ///         Bigtable = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableArgs
    ///         {
    ///             AutoScaling = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs
    ///             {
    ///                 MinNodeCount = 1,
    ///                 MaxNodeCount = 2,
    ///                 CpuUtilizationTarget = 80,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             vertexai,
    ///         },
    ///     });
    /// 
    ///     var sampleDataset = new Gcp.BigQuery.Dataset("sample_dataset", new()
    ///     {
    ///         DatasetId = "example_cross_project_featureview",
    ///         FriendlyName = "test",
    ///         Description = "This is a test description",
    ///         Location = "US",
    ///     });
    /// 
    ///     var viewer = new Gcp.BigQuery.DatasetIamMember("viewer", new()
    ///     {
    ///         Project = testProject.Apply(getProjectResult =&gt; getProjectResult.ProjectId),
    ///         DatasetId = sampleDataset.DatasetId,
    ///         Role = "roles/bigquery.dataViewer",
    ///         Member = project.Number.Apply(number =&gt; $"serviceAccount:service-{number}@gcp-sa-aiplatform.iam.gserviceaccount.com"),
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             featureonlinestore,
    ///         },
    ///     });
    /// 
    ///     var wait30Seconds = new Time.Index.Sleep("wait_30_seconds", new()
    ///     {
    ///         CreateDuration = "30s",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             viewer,
    ///         },
    ///     });
    /// 
    ///     var sampleTable = new Gcp.BigQuery.Table("sample_table", new()
    ///     {
    ///         DeletionProtection = false,
    ///         DatasetId = sampleDataset.DatasetId,
    ///         TableId = "example_cross_project_featureview",
    ///         Schema = @"[
    ///     {
    ///         ""name"": ""feature_id"",
    ///         ""type"": ""STRING"",
    ///         ""mode"": ""NULLABLE""
    ///     },
    ///     {
    ///         ""name"": ""example_cross_project_featureview"",
    ///         ""type"": ""STRING"",
    ///         ""mode"": ""NULLABLE""
    ///     },
    ///     {
    ///         ""name"": ""feature_timestamp"",
    ///         ""type"": ""TIMESTAMP"",
    ///         ""mode"": ""NULLABLE""
    ///     }
    /// ]
    /// ",
    ///     });
    /// 
    ///     var sampleFeatureGroup = new Gcp.Vertex.AiFeatureGroup("sample_feature_group", new()
    ///     {
    ///         Name = "example_cross_project_featureview",
    ///         Description = "A sample feature group",
    ///         Region = "us-central1",
    ///         Labels = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///         BigQuery = new Gcp.Vertex.Inputs.AiFeatureGroupBigQueryArgs
    ///         {
    ///             BigQuerySource = new Gcp.Vertex.Inputs.AiFeatureGroupBigQueryBigQuerySourceArgs
    ///             {
    ///                 InputUri = Output.Tuple(sampleTable.Project, sampleTable.DatasetId, sampleTable.TableId).Apply(values =&gt;
    ///                 {
    ///                     var project = values.Item1;
    ///                     var datasetId = values.Item2;
    ///                     var tableId = values.Item3;
    ///                     return $"bq://{project}.{datasetId}.{tableId}";
    ///                 }),
    ///             },
    ///             EntityIdColumns = new[]
    ///             {
    ///                 "feature_id",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var sampleFeature = new Gcp.Vertex.AiFeatureGroupFeature("sample_feature", new()
    ///     {
    ///         Name = "example_cross_project_featureview",
    ///         Region = "us-central1",
    ///         FeatureGroup = sampleFeatureGroup.Name,
    ///         Description = "A sample feature",
    ///         Labels = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///     });
    /// 
    ///     var crossProjectFeatureview = new Gcp.Vertex.AiFeatureOnlineStoreFeatureview("cross_project_featureview", new()
    ///     {
    ///         Name = "example_cross_project_featureview",
    ///         Project = project.ProjectId,
    ///         Region = "us-central1",
    ///         FeatureOnlineStore = featureonlinestore.Name,
    ///         SyncConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs
    ///         {
    ///             Cron = "0 0 * * *",
    ///         },
    ///         FeatureRegistrySource = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs
    ///         {
    ///             FeatureGroups = new[]
    ///             {
    ///                 new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs
    ///                 {
    ///                     FeatureGroupId = sampleFeatureGroup.Name,
    ///                     FeatureIds = new[]
    ///                     {
    ///                         sampleFeature.Name,
    ///                     },
    ///                 },
    ///             },
    ///             ProjectNumber = testProject.Apply(getProjectResult =&gt; getProjectResult.Number),
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             vertexai,
    ///             wait30Seconds,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Vertex Ai Featureonlinestore Featureview With Vector Search
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var featureonlinestore = new Gcp.Vertex.AiFeatureOnlineStore("featureonlinestore", new()
    ///     {
    ///         Name = "example_feature_view_vector_search",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Region = "us-central1",
    ///         Bigtable = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableArgs
    ///         {
    ///             AutoScaling = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs
    ///             {
    ///                 MinNodeCount = 1,
    ///                 MaxNodeCount = 2,
    ///                 CpuUtilizationTarget = 80,
    ///             },
    ///         },
    ///         EmbeddingManagement = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreEmbeddingManagementArgs
    ///         {
    ///             Enabled = true,
    ///         },
    ///     });
    /// 
    ///     var tf_test_dataset = new Gcp.BigQuery.Dataset("tf-test-dataset", new()
    ///     {
    ///         DatasetId = "example_feature_view_vector_search",
    ///         FriendlyName = "test",
    ///         Description = "This is a test description",
    ///         Location = "US",
    ///     });
    /// 
    ///     var tf_test_table = new Gcp.BigQuery.Table("tf-test-table", new()
    ///     {
    ///         DeletionProtection = false,
    ///         DatasetId = tf_test_dataset.DatasetId,
    ///         TableId = "example_feature_view_vector_search",
    ///         Schema = @"[
    /// {
    ///   ""name"": ""test_primary_id"",
    ///   ""mode"": ""NULLABLE"",
    ///   ""type"": ""STRING"",
    ///   ""description"": ""primary test id""
    /// },
    /// {
    ///   ""name"": ""embedding"",
    ///   ""mode"": ""REPEATED"",
    ///   ""type"": ""FLOAT"",
    ///   ""description"": ""embedding column for primary_id column""
    /// },
    /// {
    ///   ""name"": ""country"",
    ///   ""mode"": ""NULLABLE"",
    ///   ""type"": ""STRING"",
    ///   ""description"": ""country""
    /// },
    /// {
    ///   ""name"": ""test_crowding_column"",
    ///   ""mode"": ""NULLABLE"",
    ///   ""type"": ""INTEGER"",
    ///   ""description"": ""test crowding column""
    /// },
    /// {
    ///   ""name"": ""entity_id"",
    ///   ""mode"": ""NULLABLE"",
    ///   ""type"": ""STRING"",
    ///   ""description"": ""Test default entity_id""
    /// },
    /// {
    ///   ""name"": ""test_entity_column"",
    ///   ""mode"": ""NULLABLE"",
    ///   ""type"": ""STRING"",
    ///   ""description"": ""test secondary entity column""
    /// },
    /// {
    ///   ""name"": ""feature_timestamp"",
    ///   ""mode"": ""NULLABLE"",
    ///   ""type"": ""TIMESTAMP"",
    ///   ""description"": ""Default timestamp value""
    /// }
    /// ]
    /// ",
    ///     });
    /// 
    ///     var featureviewVectorSearch = new Gcp.Vertex.AiFeatureOnlineStoreFeatureview("featureview_vector_search", new()
    ///     {
    ///         Name = "example_feature_view_vector_search",
    ///         Region = "us-central1",
    ///         FeatureOnlineStore = featureonlinestore.Name,
    ///         SyncConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs
    ///         {
    ///             Cron = "0 0 * * *",
    ///         },
    ///         BigQuerySource = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs
    ///         {
    ///             Uri = Output.Tuple(tf_test_table.Project, tf_test_table.DatasetId, tf_test_table.TableId).Apply(values =&gt;
    ///             {
    ///                 var project = values.Item1;
    ///                 var datasetId = values.Item2;
    ///                 var tableId = values.Item3;
    ///                 return $"bq://{project}.{datasetId}.{tableId}";
    ///             }),
    ///             EntityIdColumns = new[]
    ///             {
    ///                 "test_entity_column",
    ///             },
    ///         },
    ///         VectorSearchConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs
    ///         {
    ///             EmbeddingColumn = "embedding",
    ///             FilterColumns = new[]
    ///             {
    ///                 "country",
    ///             },
    ///             CrowdingColumn = "test_crowding_column",
    ///             DistanceMeasureType = "DOT_PRODUCT_DISTANCE",
    ///             TreeAhConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs
    ///             {
    ///                 LeafNodeEmbeddingCount = "1000",
    ///             },
    ///             EmbeddingDimension = 2,
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// FeatureOnlineStoreFeatureview can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{region}}/featureOnlineStores/{{feature_online_store}}/featureViews/{{name}}`
    /// 
    /// * `{{project}}/{{region}}/{{feature_online_store}}/{{name}}`
    /// 
    /// * `{{region}}/{{feature_online_store}}/{{name}}`
    /// 
    /// * `{{feature_online_store}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, FeatureOnlineStoreFeatureview can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview default projects/{{project}}/locations/{{region}}/featureOnlineStores/{{feature_online_store}}/featureViews/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview default {{project}}/{{region}}/{{feature_online_store}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview default {{region}}/{{feature_online_store}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview default {{feature_online_store}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview")]
    public partial class AiFeatureOnlineStoreFeatureview : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
        /// Structure is documented below.
        /// </summary>
        [Output("bigQuerySource")]
        public Output<Outputs.AiFeatureOnlineStoreFeatureviewBigQuerySource?> BigQuerySource { get; private set; } = null!;

        /// <summary>
        /// The timestamp of when the featureOnlinestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The name of the FeatureOnlineStore to use for the featureview.
        /// </summary>
        [Output("featureOnlineStore")]
        public Output<string> FeatureOnlineStore { get; private set; } = null!;

        /// <summary>
        /// Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
        /// Structure is documented below.
        /// </summary>
        [Output("featureRegistrySource")]
        public Output<Outputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySource?> FeatureRegistrySource { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs to assign to this FeatureView.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the FeatureView. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The region for the resource. It should be the same as the featureonlinestore region.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.
        /// Structure is documented below.
        /// </summary>
        [Output("syncConfig")]
        public Output<Outputs.AiFeatureOnlineStoreFeatureviewSyncConfig?> SyncConfig { get; private set; } = null!;

        /// <summary>
        /// The timestamp of when the featureOnlinestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Configuration for vector search. It contains the required configurations to create an index from source data, so that approximate nearest neighbor (a.k.a ANN) algorithms search can be performed during online serving.
        /// Structure is documented below.
        /// </summary>
        [Output("vectorSearchConfig")]
        public Output<Outputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfig?> VectorSearchConfig { get; private set; } = null!;


        /// <summary>
        /// Create a AiFeatureOnlineStoreFeatureview resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AiFeatureOnlineStoreFeatureview(string name, AiFeatureOnlineStoreFeatureviewArgs args, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview", name, args ?? new AiFeatureOnlineStoreFeatureviewArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AiFeatureOnlineStoreFeatureview(string name, Input<string> id, AiFeatureOnlineStoreFeatureviewState? state = null, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AiFeatureOnlineStoreFeatureview resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AiFeatureOnlineStoreFeatureview Get(string name, Input<string> id, AiFeatureOnlineStoreFeatureviewState? state = null, CustomResourceOptions? options = null)
        {
            return new AiFeatureOnlineStoreFeatureview(name, id, state, options);
        }
    }

    public sealed class AiFeatureOnlineStoreFeatureviewArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
        /// Structure is documented below.
        /// </summary>
        [Input("bigQuerySource")]
        public Input<Inputs.AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs>? BigQuerySource { get; set; }

        /// <summary>
        /// The name of the FeatureOnlineStore to use for the featureview.
        /// </summary>
        [Input("featureOnlineStore", required: true)]
        public Input<string> FeatureOnlineStore { get; set; } = null!;

        /// <summary>
        /// Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
        /// Structure is documented below.
        /// </summary>
        [Input("featureRegistrySource")]
        public Input<Inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs>? FeatureRegistrySource { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to this FeatureView.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the FeatureView. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region for the resource. It should be the same as the featureonlinestore region.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.
        /// Structure is documented below.
        /// </summary>
        [Input("syncConfig")]
        public Input<Inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs>? SyncConfig { get; set; }

        /// <summary>
        /// Configuration for vector search. It contains the required configurations to create an index from source data, so that approximate nearest neighbor (a.k.a ANN) algorithms search can be performed during online serving.
        /// Structure is documented below.
        /// </summary>
        [Input("vectorSearchConfig")]
        public Input<Inputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs>? VectorSearchConfig { get; set; }

        public AiFeatureOnlineStoreFeatureviewArgs()
        {
        }
        public static new AiFeatureOnlineStoreFeatureviewArgs Empty => new AiFeatureOnlineStoreFeatureviewArgs();
    }

    public sealed class AiFeatureOnlineStoreFeatureviewState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
        /// Structure is documented below.
        /// </summary>
        [Input("bigQuerySource")]
        public Input<Inputs.AiFeatureOnlineStoreFeatureviewBigQuerySourceGetArgs>? BigQuerySource { get; set; }

        /// <summary>
        /// The timestamp of when the featureOnlinestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The name of the FeatureOnlineStore to use for the featureview.
        /// </summary>
        [Input("featureOnlineStore")]
        public Input<string>? FeatureOnlineStore { get; set; }

        /// <summary>
        /// Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
        /// Structure is documented below.
        /// </summary>
        [Input("featureRegistrySource")]
        public Input<Inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceGetArgs>? FeatureRegistrySource { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to this FeatureView.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the FeatureView. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The region for the resource. It should be the same as the featureonlinestore region.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.
        /// Structure is documented below.
        /// </summary>
        [Input("syncConfig")]
        public Input<Inputs.AiFeatureOnlineStoreFeatureviewSyncConfigGetArgs>? SyncConfig { get; set; }

        /// <summary>
        /// The timestamp of when the featureOnlinestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// Configuration for vector search. It contains the required configurations to create an index from source data, so that approximate nearest neighbor (a.k.a ANN) algorithms search can be performed during online serving.
        /// Structure is documented below.
        /// </summary>
        [Input("vectorSearchConfig")]
        public Input<Inputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigGetArgs>? VectorSearchConfig { get; set; }

        public AiFeatureOnlineStoreFeatureviewState()
        {
        }
        public static new AiFeatureOnlineStoreFeatureviewState Empty => new AiFeatureOnlineStoreFeatureviewState();
    }
}
