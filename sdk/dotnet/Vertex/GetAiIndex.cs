// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Vertex
{
    public static class GetAiIndex
    {
        /// <summary>
        /// A representation of a collection of database items organized in a way that allows for approximate nearest neighbor (a.k.a ANN) algorithms search.
        /// </summary>
        public static Task<GetAiIndexResult> InvokeAsync(GetAiIndexArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAiIndexResult>("gcp:vertex/getAiIndex:getAiIndex", args ?? new GetAiIndexArgs(), options.WithDefaults());

        /// <summary>
        /// A representation of a collection of database items organized in a way that allows for approximate nearest neighbor (a.k.a ANN) algorithms search.
        /// </summary>
        public static Output<GetAiIndexResult> Invoke(GetAiIndexInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAiIndexResult>("gcp:vertex/getAiIndex:getAiIndex", args ?? new GetAiIndexInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAiIndexArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the index.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The region of the index.
        /// </summary>
        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        public GetAiIndexArgs()
        {
        }
        public static new GetAiIndexArgs Empty => new GetAiIndexArgs();
    }

    public sealed class GetAiIndexInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the index.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the index.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public GetAiIndexInvokeArgs()
        {
        }
        public static new GetAiIndexInvokeArgs Empty => new GetAiIndexInvokeArgs();
    }


    [OutputType]
    public sealed class GetAiIndexResult
    {
        public readonly string CreateTime;
        public readonly ImmutableArray<Outputs.GetAiIndexDeployedIndexResult> DeployedIndexes;
        public readonly string Description;
        public readonly string DisplayName;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetAiIndexIndexStatResult> IndexStats;
        public readonly string IndexUpdateMethod;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string MetadataSchemaUri;
        public readonly ImmutableArray<Outputs.GetAiIndexMetadataResult> Metadatas;
        public readonly string Name;
        public readonly string? Project;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly string Region;
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetAiIndexResult(
            string createTime,

            ImmutableArray<Outputs.GetAiIndexDeployedIndexResult> deployedIndexes,

            string description,

            string displayName,

            ImmutableDictionary<string, string> effectiveLabels,

            string etag,

            string id,

            ImmutableArray<Outputs.GetAiIndexIndexStatResult> indexStats,

            string indexUpdateMethod,

            ImmutableDictionary<string, string> labels,

            string metadataSchemaUri,

            ImmutableArray<Outputs.GetAiIndexMetadataResult> metadatas,

            string name,

            string? project,

            ImmutableDictionary<string, string> pulumiLabels,

            string region,

            string updateTime)
        {
            CreateTime = createTime;
            DeployedIndexes = deployedIndexes;
            Description = description;
            DisplayName = displayName;
            EffectiveLabels = effectiveLabels;
            Etag = etag;
            Id = id;
            IndexStats = indexStats;
            IndexUpdateMethod = indexUpdateMethod;
            Labels = labels;
            MetadataSchemaUri = metadataSchemaUri;
            Metadatas = metadatas;
            Name = name;
            Project = project;
            PulumiLabels = pulumiLabels;
            Region = region;
            UpdateTime = updateTime;
        }
    }
}
