// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Vertex
{
    /// <summary>
    /// Create an Endpoint and deploy a Model Garden model to it.
    /// 
    /// To get more information about EndpointWithModelGardenDeployment, see:
    /// 
    /// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations/deploy)
    /// * How-to Guides
    ///     * [Overview of Model Garden](https://cloud.google.com/vertex-ai/generative-ai/docs/model-garden/explore-models)
    ///     * [Overview of self-deployed models](https://cloud.google.com/vertex-ai/generative-ai/docs/model-garden/self-deployed-models)
    ///     * [Use models in Model Garden](https://cloud.google.com/vertex-ai/generative-ai/docs/model-garden/use-models)
    /// 
    /// ## Example Usage
    /// 
    /// ### Vertex Ai Deploy Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var deploy = new Gcp.Vertex.AiEndpointWithModelGardenDeployment("deploy", new()
    ///     {
    ///         PublisherModelName = "publishers/google/models/paligemma@paligemma-224-float32",
    ///         Location = "us-central1",
    ///         ModelConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentModelConfigArgs
    ///         {
    ///             AcceptEula = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Vertex Ai Deploy Huggingface Model
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var deploy = new Gcp.Vertex.AiEndpointWithModelGardenDeployment("deploy", new()
    ///     {
    ///         HuggingFaceModelId = "Qwen/Qwen3-0.6B",
    ///         Location = "us-central1",
    ///         ModelConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentModelConfigArgs
    ///         {
    ///             AcceptEula = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Vertex Ai Deploy With Configs
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var deploy = new Gcp.Vertex.AiEndpointWithModelGardenDeployment("deploy", new()
    ///     {
    ///         PublisherModelName = "publishers/google/models/paligemma@paligemma-224-float32",
    ///         Location = "us-central1",
    ///         ModelConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentModelConfigArgs
    ///         {
    ///             AcceptEula = true,
    ///         },
    ///         DeployConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigArgs
    ///         {
    ///             DedicatedResources = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs
    ///             {
    ///                 MachineSpec = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs
    ///                 {
    ///                     MachineType = "g2-standard-16",
    ///                     AcceleratorType = "NVIDIA_L4",
    ///                     AcceleratorCount = 1,
    ///                 },
    ///                 MinReplicaCount = 1,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Vertex Ai Deploy Multiple Models In Parallel
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var deploy_gemma_11_2b_it = new Gcp.Vertex.AiEndpointWithModelGardenDeployment("deploy-gemma-1_1-2b-it", new()
    ///     {
    ///         PublisherModelName = "publishers/google/models/gemma@gemma-1.1-2b-it",
    ///         Location = "us-central1",
    ///         ModelConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentModelConfigArgs
    ///         {
    ///             AcceptEula = true,
    ///         },
    ///         DeployConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigArgs
    ///         {
    ///             DedicatedResources = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs
    ///             {
    ///                 MachineSpec = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs
    ///                 {
    ///                     MachineType = "g2-standard-12",
    ///                     AcceleratorType = "us-central1",
    ///                     AcceleratorCount = 1,
    ///                 },
    ///                 MinReplicaCount = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var deploy_qwen3_06b = new Gcp.Vertex.AiEndpointWithModelGardenDeployment("deploy-qwen3-0_6b", new()
    ///     {
    ///         HuggingFaceModelId = "Qwen/Qwen3-0.6B",
    ///         Location = "us-central1",
    ///         ModelConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentModelConfigArgs
    ///         {
    ///             AcceptEula = true,
    ///         },
    ///         DeployConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigArgs
    ///         {
    ///             DedicatedResources = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs
    ///             {
    ///                 MachineSpec = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs
    ///                 {
    ///                     MachineType = "g2-standard-12",
    ///                     AcceleratorType = "NVIDIA_L4",
    ///                     AcceleratorCount = 1,
    ///                 },
    ///                 MinReplicaCount = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var deploy_llama_32_1b = new Gcp.Vertex.AiEndpointWithModelGardenDeployment("deploy-llama-3_2-1b", new()
    ///     {
    ///         PublisherModelName = "publishers/meta/models/llama3-2@llama-3.2-1b",
    ///         Location = "us-central1",
    ///         ModelConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentModelConfigArgs
    ///         {
    ///             AcceptEula = true,
    ///         },
    ///         DeployConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigArgs
    ///         {
    ///             DedicatedResources = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs
    ///             {
    ///                 MachineSpec = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs
    ///                 {
    ///                     MachineType = "g2-standard-12",
    ///                     AcceleratorType = "NVIDIA_L4",
    ///                     AcceleratorCount = 1,
    ///                 },
    ///                 MinReplicaCount = 1,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Vertex Ai Deploy Multiple Models In Sequence
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var deploy_gemma_11_2b_it = new Gcp.Vertex.AiEndpointWithModelGardenDeployment("deploy-gemma-1_1-2b-it", new()
    ///     {
    ///         PublisherModelName = "publishers/google/models/gemma@gemma-1.1-2b-it",
    ///         Location = "us-central1",
    ///         ModelConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentModelConfigArgs
    ///         {
    ///             AcceptEula = true,
    ///         },
    ///         DeployConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigArgs
    ///         {
    ///             DedicatedResources = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs
    ///             {
    ///                 MachineSpec = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs
    ///                 {
    ///                     MachineType = "g2-standard-12",
    ///                     AcceleratorType = "NVIDIA_L4",
    ///                     AcceleratorCount = 1,
    ///                 },
    ///                 MinReplicaCount = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var deploy_qwen3_06b = new Gcp.Vertex.AiEndpointWithModelGardenDeployment("deploy-qwen3-0_6b", new()
    ///     {
    ///         HuggingFaceModelId = "Qwen/Qwen3-0.6B",
    ///         Location = "us-central1",
    ///         ModelConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentModelConfigArgs
    ///         {
    ///             AcceptEula = true,
    ///         },
    ///         DeployConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigArgs
    ///         {
    ///             DedicatedResources = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs
    ///             {
    ///                 MachineSpec = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs
    ///                 {
    ///                     MachineType = "g2-standard-12",
    ///                     AcceleratorType = "NVIDIA_L4",
    ///                     AcceleratorCount = 1,
    ///                 },
    ///                 MinReplicaCount = 1,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             deploy_gemma_11_2b_it,
    ///         },
    ///     });
    /// 
    ///     var deploy_llama_32_1b = new Gcp.Vertex.AiEndpointWithModelGardenDeployment("deploy-llama-3_2-1b", new()
    ///     {
    ///         PublisherModelName = "publishers/meta/models/llama3-2@llama-3.2-1b",
    ///         Location = "us-central1",
    ///         ModelConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentModelConfigArgs
    ///         {
    ///             AcceptEula = true,
    ///         },
    ///         DeployConfig = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigArgs
    ///         {
    ///             DedicatedResources = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs
    ///             {
    ///                 MachineSpec = new Gcp.Vertex.Inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs
    ///                 {
    ///                     MachineType = "g2-standard-12",
    ///                     AcceleratorType = "NVIDIA_L4",
    ///                     AcceleratorCount = 1,
    ///                 },
    ///                 MinReplicaCount = 1,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             deploy_qwen3_06b,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource does not support import.
    /// </summary>
    [GcpResourceType("gcp:vertex/aiEndpointWithModelGardenDeployment:AiEndpointWithModelGardenDeployment")]
    public partial class AiEndpointWithModelGardenDeployment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The deploy config to use for the deployment.
        /// Structure is documented below.
        /// </summary>
        [Output("deployConfig")]
        public Output<Outputs.AiEndpointWithModelGardenDeploymentDeployConfig?> DeployConfig { get; private set; } = null!;

        /// <summary>
        /// Output only. The display name assigned to the model deployed to the endpoint.
        /// This is not required to delete the resource but is used for debug logging.
        /// </summary>
        [Output("deployedModelDisplayName")]
        public Output<string> DeployedModelDisplayName { get; private set; } = null!;

        /// <summary>
        /// Output only. The unique numeric ID that Vertex AI assigns to the model at the time it is deployed to the endpoint.
        /// It is required to undeploy the model from the endpoint during resource deletion as described in
        /// https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints/undeployModel.
        /// </summary>
        [Output("deployedModelId")]
        public Output<string> DeployedModelId { get; private set; } = null!;

        /// <summary>
        /// Resource ID segment making up resource `endpoint`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The endpoint config to use for the deployment.
        /// Structure is documented below.
        /// </summary>
        [Output("endpointConfig")]
        public Output<Outputs.AiEndpointWithModelGardenDeploymentEndpointConfig?> EndpointConfig { get; private set; } = null!;

        /// <summary>
        /// The Hugging Face model to deploy.
        /// Format: Hugging Face model ID like `google/gemma-2-2b-it`.
        /// </summary>
        [Output("huggingFaceModelId")]
        public Output<string?> HuggingFaceModelId { get; private set; } = null!;

        /// <summary>
        /// Resource ID segment making up resource `location`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The model config to use for the deployment.
        /// Structure is documented below.
        /// </summary>
        [Output("modelConfig")]
        public Output<Outputs.AiEndpointWithModelGardenDeploymentModelConfig?> ModelConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The Model Garden model to deploy.
        /// Format:
        /// `publishers/{publisher}/models/{publisher_model}@{version_id}`, or
        /// `publishers/hf-{hugging-face-author}/models/{hugging-face-model-name}@001`.
        /// </summary>
        [Output("publisherModelName")]
        public Output<string?> PublisherModelName { get; private set; } = null!;


        /// <summary>
        /// Create a AiEndpointWithModelGardenDeployment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AiEndpointWithModelGardenDeployment(string name, AiEndpointWithModelGardenDeploymentArgs args, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiEndpointWithModelGardenDeployment:AiEndpointWithModelGardenDeployment", name, args ?? new AiEndpointWithModelGardenDeploymentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AiEndpointWithModelGardenDeployment(string name, Input<string> id, AiEndpointWithModelGardenDeploymentState? state = null, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiEndpointWithModelGardenDeployment:AiEndpointWithModelGardenDeployment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AiEndpointWithModelGardenDeployment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AiEndpointWithModelGardenDeployment Get(string name, Input<string> id, AiEndpointWithModelGardenDeploymentState? state = null, CustomResourceOptions? options = null)
        {
            return new AiEndpointWithModelGardenDeployment(name, id, state, options);
        }
    }

    public sealed class AiEndpointWithModelGardenDeploymentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The deploy config to use for the deployment.
        /// Structure is documented below.
        /// </summary>
        [Input("deployConfig")]
        public Input<Inputs.AiEndpointWithModelGardenDeploymentDeployConfigArgs>? DeployConfig { get; set; }

        /// <summary>
        /// The endpoint config to use for the deployment.
        /// Structure is documented below.
        /// </summary>
        [Input("endpointConfig")]
        public Input<Inputs.AiEndpointWithModelGardenDeploymentEndpointConfigArgs>? EndpointConfig { get; set; }

        /// <summary>
        /// The Hugging Face model to deploy.
        /// Format: Hugging Face model ID like `google/gemma-2-2b-it`.
        /// </summary>
        [Input("huggingFaceModelId")]
        public Input<string>? HuggingFaceModelId { get; set; }

        /// <summary>
        /// Resource ID segment making up resource `location`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The model config to use for the deployment.
        /// Structure is documented below.
        /// </summary>
        [Input("modelConfig")]
        public Input<Inputs.AiEndpointWithModelGardenDeploymentModelConfigArgs>? ModelConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Model Garden model to deploy.
        /// Format:
        /// `publishers/{publisher}/models/{publisher_model}@{version_id}`, or
        /// `publishers/hf-{hugging-face-author}/models/{hugging-face-model-name}@001`.
        /// </summary>
        [Input("publisherModelName")]
        public Input<string>? PublisherModelName { get; set; }

        public AiEndpointWithModelGardenDeploymentArgs()
        {
        }
        public static new AiEndpointWithModelGardenDeploymentArgs Empty => new AiEndpointWithModelGardenDeploymentArgs();
    }

    public sealed class AiEndpointWithModelGardenDeploymentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The deploy config to use for the deployment.
        /// Structure is documented below.
        /// </summary>
        [Input("deployConfig")]
        public Input<Inputs.AiEndpointWithModelGardenDeploymentDeployConfigGetArgs>? DeployConfig { get; set; }

        /// <summary>
        /// Output only. The display name assigned to the model deployed to the endpoint.
        /// This is not required to delete the resource but is used for debug logging.
        /// </summary>
        [Input("deployedModelDisplayName")]
        public Input<string>? DeployedModelDisplayName { get; set; }

        /// <summary>
        /// Output only. The unique numeric ID that Vertex AI assigns to the model at the time it is deployed to the endpoint.
        /// It is required to undeploy the model from the endpoint during resource deletion as described in
        /// https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints/undeployModel.
        /// </summary>
        [Input("deployedModelId")]
        public Input<string>? DeployedModelId { get; set; }

        /// <summary>
        /// Resource ID segment making up resource `endpoint`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The endpoint config to use for the deployment.
        /// Structure is documented below.
        /// </summary>
        [Input("endpointConfig")]
        public Input<Inputs.AiEndpointWithModelGardenDeploymentEndpointConfigGetArgs>? EndpointConfig { get; set; }

        /// <summary>
        /// The Hugging Face model to deploy.
        /// Format: Hugging Face model ID like `google/gemma-2-2b-it`.
        /// </summary>
        [Input("huggingFaceModelId")]
        public Input<string>? HuggingFaceModelId { get; set; }

        /// <summary>
        /// Resource ID segment making up resource `location`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The model config to use for the deployment.
        /// Structure is documented below.
        /// </summary>
        [Input("modelConfig")]
        public Input<Inputs.AiEndpointWithModelGardenDeploymentModelConfigGetArgs>? ModelConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Model Garden model to deploy.
        /// Format:
        /// `publishers/{publisher}/models/{publisher_model}@{version_id}`, or
        /// `publishers/hf-{hugging-face-author}/models/{hugging-face-model-name}@001`.
        /// </summary>
        [Input("publisherModelName")]
        public Input<string>? PublisherModelName { get; set; }

        public AiEndpointWithModelGardenDeploymentState()
        {
        }
        public static new AiEndpointWithModelGardenDeploymentState Empty => new AiEndpointWithModelGardenDeploymentState();
    }
}
