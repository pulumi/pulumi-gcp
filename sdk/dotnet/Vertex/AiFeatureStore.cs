// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Vertex
{
    /// <summary>
    /// A collection of DataItems and Annotations on them.
    /// 
    /// To get more information about Featurestore, see:
    /// 
    /// * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/vertex-ai/docs)
    /// 
    /// ## Example Usage
    /// ### Vertex Ai Featurestore
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var featurestore = new Gcp.Vertex.AiFeatureStore("featurestore", new()
    ///     {
    ///         EncryptionSpec = new Gcp.Vertex.Inputs.AiFeatureStoreEncryptionSpecArgs
    ///         {
    ///             KmsKeyName = "kms-name",
    ///         },
    ///         ForceDestroy = true,
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         OnlineServingConfig = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigArgs
    ///         {
    ///             FixedNodeCount = 2,
    ///         },
    ///         Region = "us-central1",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Vertex Ai Featurestore With Beta Fields
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var featurestore = new Gcp.Vertex.AiFeatureStore("featurestore", new()
    ///     {
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Region = "us-central1",
    ///         OnlineServingConfig = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigArgs
    ///         {
    ///             FixedNodeCount = 2,
    ///         },
    ///         EncryptionSpec = new Gcp.Vertex.Inputs.AiFeatureStoreEncryptionSpecArgs
    ///         {
    ///             KmsKeyName = "kms-name",
    ///         },
    ///         OnlineStorageTtlDays = 30,
    ///         ForceDestroy = true,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Vertex Ai Featurestore Scaling
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var featurestore = new Gcp.Vertex.AiFeatureStore("featurestore", new()
    ///     {
    ///         EncryptionSpec = new Gcp.Vertex.Inputs.AiFeatureStoreEncryptionSpecArgs
    ///         {
    ///             KmsKeyName = "kms-name",
    ///         },
    ///         ForceDestroy = true,
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         OnlineServingConfig = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigArgs
    ///         {
    ///             Scaling = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigScalingArgs
    ///             {
    ///                 MaxNodeCount = 10,
    ///                 MinNodeCount = 2,
    ///             },
    ///         },
    ///         Region = "us-central1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Featurestore can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default projects/{{project}}/locations/{{region}}/featurestores/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:vertex/aiFeatureStore:AiFeatureStore")]
    public partial class AiFeatureStore : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// If set, both of the online and offline data storage will be secured by this key.
        /// Structure is documented below.
        /// </summary>
        [Output("encryptionSpec")]
        public Output<Outputs.AiFeatureStoreEncryptionSpec?> EncryptionSpec { get; private set; } = null!;

        /// <summary>
        /// Used to perform consistent read-modify-write updates.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// If set to true, any EntityTypes and Features for this Featurestore will also be deleted
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs to assign to this Featurestore.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Config for online serving resources.
        /// Structure is documented below.
        /// </summary>
        [Output("onlineServingConfig")]
        public Output<Outputs.AiFeatureStoreOnlineServingConfig?> OnlineServingConfig { get; private set; } = null!;

        /// <summary>
        /// TTL in days for feature values that will be stored in online serving storage. The Feature Store online storage
        /// periodically removes obsolete feature values older than onlineStorageTtlDays since the feature generation time. Note
        /// that onlineStorageTtlDays should be less than or equal to offlineStorageTtlDays for each EntityType under a
        /// featurestore. If not set, default to 4000 days
        /// </summary>
        [Output("onlineStorageTtlDays")]
        public Output<int?> OnlineStorageTtlDays { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The region of the dataset. eg us-central1
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a AiFeatureStore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AiFeatureStore(string name, AiFeatureStoreArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiFeatureStore:AiFeatureStore", name, args ?? new AiFeatureStoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AiFeatureStore(string name, Input<string> id, AiFeatureStoreState? state = null, CustomResourceOptions? options = null)
            : base("gcp:vertex/aiFeatureStore:AiFeatureStore", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AiFeatureStore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AiFeatureStore Get(string name, Input<string> id, AiFeatureStoreState? state = null, CustomResourceOptions? options = null)
        {
            return new AiFeatureStore(name, id, state, options);
        }
    }

    public sealed class AiFeatureStoreArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set, both of the online and offline data storage will be secured by this key.
        /// Structure is documented below.
        /// </summary>
        [Input("encryptionSpec")]
        public Input<Inputs.AiFeatureStoreEncryptionSpecArgs>? EncryptionSpec { get; set; }

        /// <summary>
        /// If set to true, any EntityTypes and Features for this Featurestore will also be deleted
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to this Featurestore.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Config for online serving resources.
        /// Structure is documented below.
        /// </summary>
        [Input("onlineServingConfig")]
        public Input<Inputs.AiFeatureStoreOnlineServingConfigArgs>? OnlineServingConfig { get; set; }

        /// <summary>
        /// TTL in days for feature values that will be stored in online serving storage. The Feature Store online storage
        /// periodically removes obsolete feature values older than onlineStorageTtlDays since the feature generation time. Note
        /// that onlineStorageTtlDays should be less than or equal to offlineStorageTtlDays for each EntityType under a
        /// featurestore. If not set, default to 4000 days
        /// </summary>
        [Input("onlineStorageTtlDays")]
        public Input<int>? OnlineStorageTtlDays { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the dataset. eg us-central1
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public AiFeatureStoreArgs()
        {
        }
        public static new AiFeatureStoreArgs Empty => new AiFeatureStoreArgs();
    }

    public sealed class AiFeatureStoreState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// If set, both of the online and offline data storage will be secured by this key.
        /// Structure is documented below.
        /// </summary>
        [Input("encryptionSpec")]
        public Input<Inputs.AiFeatureStoreEncryptionSpecGetArgs>? EncryptionSpec { get; set; }

        /// <summary>
        /// Used to perform consistent read-modify-write updates.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// If set to true, any EntityTypes and Features for this Featurestore will also be deleted
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to this Featurestore.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Config for online serving resources.
        /// Structure is documented below.
        /// </summary>
        [Input("onlineServingConfig")]
        public Input<Inputs.AiFeatureStoreOnlineServingConfigGetArgs>? OnlineServingConfig { get; set; }

        /// <summary>
        /// TTL in days for feature values that will be stored in online serving storage. The Feature Store online storage
        /// periodically removes obsolete feature values older than onlineStorageTtlDays since the feature generation time. Note
        /// that onlineStorageTtlDays should be less than or equal to offlineStorageTtlDays for each EntityType under a
        /// featurestore. If not set, default to 4000 days
        /// </summary>
        [Input("onlineStorageTtlDays")]
        public Input<int>? OnlineStorageTtlDays { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the dataset. eg us-central1
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public AiFeatureStoreState()
        {
        }
        public static new AiFeatureStoreState Empty => new AiFeatureStoreState();
    }
}
