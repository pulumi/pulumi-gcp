// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudRunV2.Outputs
{

    [OutputType]
    public sealed class GetWorkerPoolTerminalConditionResult
    {
        /// <summary>
        /// A reason for the execution condition.
        /// </summary>
        public readonly string ExecutionReason;
        /// <summary>
        /// Last time the condition transitioned from one status to another.
        /// </summary>
        public readonly string LastTransitionTime;
        /// <summary>
        /// Human readable message indicating details about the current status.
        /// </summary>
        public readonly string Message;
        /// <summary>
        /// A common (workerPool-level) reason for this condition.
        /// </summary>
        public readonly string Reason;
        /// <summary>
        /// A reason for the revision condition.
        /// </summary>
        public readonly string RevisionReason;
        /// <summary>
        /// How to interpret failures of this condition, one of Error, Warning, Info
        /// </summary>
        public readonly string Severity;
        /// <summary>
        /// State of the condition.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetWorkerPoolTerminalConditionResult(
            string executionReason,

            string lastTransitionTime,

            string message,

            string reason,

            string revisionReason,

            string severity,

            string state,

            string type)
        {
            ExecutionReason = executionReason;
            LastTransitionTime = lastTransitionTime;
            Message = message;
            Reason = reason;
            RevisionReason = revisionReason;
            Severity = severity;
            State = state;
            Type = type;
        }
    }
}
