// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudRunV2.Outputs
{

    [OutputType]
    public sealed class JobTemplateTemplateContainer
    {
        /// <summary>
        /// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
        /// </summary>
        public readonly ImmutableArray<string> Args;
        /// <summary>
        /// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        /// </summary>
        public readonly ImmutableArray<string> Commands;
        /// <summary>
        /// Names of the containers that must start before this container.
        /// </summary>
        public readonly ImmutableArray<string> DependsOns;
        /// <summary>
        /// List of environment variables to set in the container.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.JobTemplateTemplateContainerEnv> Envs;
        /// <summary>
        /// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// Name of the container specified as a DNS_LABEL.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
        /// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.JobTemplateTemplateContainerPort> Ports;
        /// <summary>
        /// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.JobTemplateTemplateContainerResources? Resources;
        /// <summary>
        /// Startup probe of application within the container.
        /// All other probes are disabled if a startup probe is provided, until it
        /// succeeds. Container will not be added to service endpoints if the probe fails.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.JobTemplateTemplateContainerStartupProbe? StartupProbe;
        /// <summary>
        /// Volume to mount into the container's filesystem.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.JobTemplateTemplateContainerVolumeMount> VolumeMounts;
        /// <summary>
        /// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
        /// </summary>
        public readonly string? WorkingDir;

        [OutputConstructor]
        private JobTemplateTemplateContainer(
            ImmutableArray<string> args,

            ImmutableArray<string> commands,

            ImmutableArray<string> dependsOns,

            ImmutableArray<Outputs.JobTemplateTemplateContainerEnv> envs,

            string image,

            string? name,

            ImmutableArray<Outputs.JobTemplateTemplateContainerPort> ports,

            Outputs.JobTemplateTemplateContainerResources? resources,

            Outputs.JobTemplateTemplateContainerStartupProbe? startupProbe,

            ImmutableArray<Outputs.JobTemplateTemplateContainerVolumeMount> volumeMounts,

            string? workingDir)
        {
            Args = args;
            Commands = commands;
            DependsOns = dependsOns;
            Envs = envs;
            Image = image;
            Name = name;
            Ports = ports;
            Resources = resources;
            StartupProbe = startupProbe;
            VolumeMounts = volumeMounts;
            WorkingDir = workingDir;
        }
    }
}
