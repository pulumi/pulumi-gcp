// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudRunV2.Outputs
{

    [OutputType]
    public sealed class GetWorkerPoolTemplateContainerResult
    {
        /// <summary>
        /// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
        /// </summary>
        public readonly ImmutableArray<string> Args;
        /// <summary>
        /// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        /// </summary>
        public readonly ImmutableArray<string> Commands;
        /// <summary>
        /// List of environment variables to set in the container.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkerPoolTemplateContainerEnvResult> Envs;
        /// <summary>
        /// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// Periodic probe of container liveness. Container will be restarted if the probe fails.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkerPoolTemplateContainerLivenessProbeResult> LivenessProbes;
        /// <summary>
        /// The name of the Cloud Run v2 Worker Pool.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkerPoolTemplateContainerResourceResult> Resources;
        /// <summary>
        /// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkerPoolTemplateContainerStartupProbeResult> StartupProbes;
        /// <summary>
        /// Volume to mount into the container's filesystem.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkerPoolTemplateContainerVolumeMountResult> VolumeMounts;
        /// <summary>
        /// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
        /// </summary>
        public readonly string WorkingDir;

        [OutputConstructor]
        private GetWorkerPoolTemplateContainerResult(
            ImmutableArray<string> args,

            ImmutableArray<string> commands,

            ImmutableArray<Outputs.GetWorkerPoolTemplateContainerEnvResult> envs,

            string image,

            ImmutableArray<Outputs.GetWorkerPoolTemplateContainerLivenessProbeResult> livenessProbes,

            string name,

            ImmutableArray<Outputs.GetWorkerPoolTemplateContainerResourceResult> resources,

            ImmutableArray<Outputs.GetWorkerPoolTemplateContainerStartupProbeResult> startupProbes,

            ImmutableArray<Outputs.GetWorkerPoolTemplateContainerVolumeMountResult> volumeMounts,

            string workingDir)
        {
            Args = args;
            Commands = commands;
            Envs = envs;
            Image = image;
            LivenessProbes = livenessProbes;
            Name = name;
            Resources = resources;
            StartupProbes = startupProbes;
            VolumeMounts = volumeMounts;
            WorkingDir = workingDir;
        }
    }
}
