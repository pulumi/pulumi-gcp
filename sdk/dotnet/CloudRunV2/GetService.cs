// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudRunV2
{
    public static class GetService
    {
        /// <summary>
        /// Get information about a Google Cloud Run v2 Service. For more information see
        /// the [official documentation](https://cloud.google.com/run/docs/)
        /// and [API](https://cloud.google.com/run/docs/apis).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.%[1]s;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myService = Gcp.CloudRunV2.GetService.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///         Name = "my-service",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("gcp:cloudrunv2/getService:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Google Cloud Run v2 Service. For more information see
        /// the [official documentation](https://cloud.google.com/run/docs/)
        /// and [API](https://cloud.google.com/run/docs/apis).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.%[1]s;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myService = Gcp.CloudRunV2.GetService.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///         Name = "my-service",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("gcp:cloudrunv2/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the instance. eg us-central1
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The name of the Cloud Run v2 Service.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetServiceArgs()
        {
        }
        public static new GetServiceArgs Empty => new GetServiceArgs();
    }

    public sealed class GetServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the instance. eg us-central1
        /// 
        /// - - -
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the Cloud Run v2 Service.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetServiceInvokeArgs()
        {
        }
        public static new GetServiceInvokeArgs Empty => new GetServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        public readonly ImmutableDictionary<string, string> Annotations;
        public readonly ImmutableArray<Outputs.GetServiceBinaryAuthorizationResult> BinaryAuthorizations;
        public readonly string Client;
        public readonly string ClientVersion;
        public readonly ImmutableArray<Outputs.GetServiceConditionResult> Conditions;
        public readonly string CreateTime;
        public readonly string Creator;
        public readonly ImmutableArray<string> CustomAudiences;
        public readonly string DeleteTime;
        public readonly string Description;
        public readonly ImmutableDictionary<string, string> EffectiveAnnotations;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly string Etag;
        public readonly string ExpireTime;
        public readonly string Generation;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Ingress;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string LastModifier;
        public readonly string LatestCreatedRevision;
        public readonly string LatestReadyRevision;
        public readonly string LaunchStage;
        public readonly string? Location;
        public readonly string Name;
        public readonly string ObservedGeneration;
        public readonly string? Project;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly bool Reconciling;
        public readonly ImmutableArray<Outputs.GetServiceTemplateResult> Templates;
        public readonly ImmutableArray<Outputs.GetServiceTerminalConditionResult> TerminalConditions;
        public readonly ImmutableArray<Outputs.GetServiceTrafficStatusResult> TrafficStatuses;
        public readonly ImmutableArray<Outputs.GetServiceTrafficResult> Traffics;
        public readonly string Uid;
        public readonly string UpdateTime;
        public readonly string Uri;

        [OutputConstructor]
        private GetServiceResult(
            ImmutableDictionary<string, string> annotations,

            ImmutableArray<Outputs.GetServiceBinaryAuthorizationResult> binaryAuthorizations,

            string client,

            string clientVersion,

            ImmutableArray<Outputs.GetServiceConditionResult> conditions,

            string createTime,

            string creator,

            ImmutableArray<string> customAudiences,

            string deleteTime,

            string description,

            ImmutableDictionary<string, string> effectiveAnnotations,

            ImmutableDictionary<string, string> effectiveLabels,

            string etag,

            string expireTime,

            string generation,

            string id,

            string ingress,

            ImmutableDictionary<string, string> labels,

            string lastModifier,

            string latestCreatedRevision,

            string latestReadyRevision,

            string launchStage,

            string? location,

            string name,

            string observedGeneration,

            string? project,

            ImmutableDictionary<string, string> pulumiLabels,

            bool reconciling,

            ImmutableArray<Outputs.GetServiceTemplateResult> templates,

            ImmutableArray<Outputs.GetServiceTerminalConditionResult> terminalConditions,

            ImmutableArray<Outputs.GetServiceTrafficStatusResult> trafficStatuses,

            ImmutableArray<Outputs.GetServiceTrafficResult> traffics,

            string uid,

            string updateTime,

            string uri)
        {
            Annotations = annotations;
            BinaryAuthorizations = binaryAuthorizations;
            Client = client;
            ClientVersion = clientVersion;
            Conditions = conditions;
            CreateTime = createTime;
            Creator = creator;
            CustomAudiences = customAudiences;
            DeleteTime = deleteTime;
            Description = description;
            EffectiveAnnotations = effectiveAnnotations;
            EffectiveLabels = effectiveLabels;
            Etag = etag;
            ExpireTime = expireTime;
            Generation = generation;
            Id = id;
            Ingress = ingress;
            Labels = labels;
            LastModifier = lastModifier;
            LatestCreatedRevision = latestCreatedRevision;
            LatestReadyRevision = latestReadyRevision;
            LaunchStage = launchStage;
            Location = location;
            Name = name;
            ObservedGeneration = observedGeneration;
            Project = project;
            PulumiLabels = pulumiLabels;
            Reconciling = reconciling;
            Templates = templates;
            TerminalConditions = terminalConditions;
            TrafficStatuses = trafficStatuses;
            Traffics = traffics;
            Uid = uid;
            UpdateTime = updateTime;
            Uri = uri;
        }
    }
}
