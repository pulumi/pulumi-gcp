// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudRunV2
{
    /// <summary>
    /// Service acts as a top-level container that manages a set of configurations and revision templates which implement a network service. Service exists to provide a singular abstraction which can be access controlled, reasoned about, and which encapsulates software lifecycle decisions such as rollout policy and team resource ownership.
    /// 
    /// To get more information about Service, see:
    /// 
    /// * [API documentation](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/run/docs/)
    /// 
    /// ## Example Usage
    /// ### Cloudrunv2 Service Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRunV2.Service("default", new()
    ///     {
    ///         BinaryAuthorization = new Gcp.CloudRunV2.Inputs.ServiceBinaryAuthorizationArgs
    ///         {
    ///             BreakglassJustification = "Some justification",
    ///             UseDefault = true,
    ///         },
    ///         Ingress = "INGRESS_TRAFFIC_ALL",
    ///         Location = "us-central1",
    ///         Template = new Gcp.CloudRunV2.Inputs.ServiceTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Service Sql
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var secret = new Gcp.SecretManager.Secret("secret", new()
    ///     {
    ///         SecretId = "secret-1",
    ///         Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///         {
    ///             Automatic = true,
    ///         },
    ///     });
    /// 
    ///     var secret_version_data = new Gcp.SecretManager.SecretVersion("secret-version-data", new()
    ///     {
    ///         Secret = secret.Name,
    ///         SecretData = "secret-data",
    ///     });
    /// 
    ///     var instance = new Gcp.Sql.DatabaseInstance("instance", new()
    ///     {
    ///         Region = "us-central1",
    ///         DatabaseVersion = "MYSQL_5_7",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-f1-micro",
    ///         },
    ///         DeletionProtection = true,
    ///     });
    /// 
    ///     var @default = new Gcp.CloudRunV2.Service("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Ingress = "INGRESS_TRAFFIC_ALL",
    ///         Template = new Gcp.CloudRunV2.Inputs.ServiceTemplateArgs
    ///         {
    ///             Scaling = new Gcp.CloudRunV2.Inputs.ServiceTemplateScalingArgs
    ///             {
    ///                 MaxInstanceCount = 2,
    ///             },
    ///             Volumes = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.ServiceTemplateVolumeArgs
    ///                 {
    ///                     Name = "cloudsql",
    ///                     CloudSqlInstance = new Gcp.CloudRunV2.Inputs.ServiceTemplateVolumeCloudSqlInstanceArgs
    ///                     {
    ///                         Instances = new[]
    ///                         {
    ///                             instance.ConnectionName,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                     Envs = new[]
    ///                     {
    ///                         new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerEnvArgs
    ///                         {
    ///                             Name = "FOO",
    ///                             Value = "bar",
    ///                         },
    ///                         new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerEnvArgs
    ///                         {
    ///                             Name = "SECRET_ENV_VAR",
    ///                             ValueSource = new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerEnvValueSourceArgs
    ///                             {
    ///                                 SecretKeyRef = new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerEnvValueSourceSecretKeyRefArgs
    ///                                 {
    ///                                     Secret = secret.SecretId,
    ///                                     Version = "1",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     VolumeMounts = new[]
    ///                     {
    ///                         new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerVolumeMountArgs
    ///                         {
    ///                             Name = "cloudsql",
    ///                             MountPath = "/cloudsql",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Traffics = new[]
    ///         {
    ///             new Gcp.CloudRunV2.Inputs.ServiceTrafficArgs
    ///             {
    ///                 Type = "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST",
    ///                 Percent = 100,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             secret_version_data,
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var secret_access = new Gcp.SecretManager.SecretIamMember("secret-access", new()
    ///     {
    ///         SecretId = secret.Id,
    ///         Role = "roles/secretmanager.secretAccessor",
    ///         Member = $"serviceAccount:{project.Apply(getProjectResult =&gt; getProjectResult.Number)}-compute@developer.gserviceaccount.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             secret,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Service Vpcaccess
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var customTestNetwork = new Gcp.Compute.Network("customTestNetwork", new()
    ///     {
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var customTestSubnetwork = new Gcp.Compute.Subnetwork("customTestSubnetwork", new()
    ///     {
    ///         IpCidrRange = "10.2.0.0/28",
    ///         Region = "us-central1",
    ///         Network = customTestNetwork.Id,
    ///     });
    /// 
    ///     var connector = new Gcp.VpcAccess.Connector("connector", new()
    ///     {
    ///         Subnet = new Gcp.VpcAccess.Inputs.ConnectorSubnetArgs
    ///         {
    ///             Name = customTestSubnetwork.Name,
    ///         },
    ///         MachineType = "e2-standard-4",
    ///         MinInstances = 2,
    ///         MaxInstances = 3,
    ///         Region = "us-central1",
    ///     });
    /// 
    ///     var @default = new Gcp.CloudRunV2.Service("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Template = new Gcp.CloudRunV2.Inputs.ServiceTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                 },
    ///             },
    ///             VpcAccess = new Gcp.CloudRunV2.Inputs.ServiceTemplateVpcAccessArgs
    ///             {
    ///                 Connector = connector.Id,
    ///                 Egress = "ALL_TRAFFIC",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Service Probes
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRunV2.Service("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Template = new Gcp.CloudRunV2.Inputs.ServiceTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                     LivenessProbe = new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerLivenessProbeArgs
    ///                     {
    ///                         HttpGet = new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerLivenessProbeHttpGetArgs
    ///                         {
    ///                             Path = "/",
    ///                         },
    ///                     },
    ///                     StartupProbe = new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerStartupProbeArgs
    ///                     {
    ///                         FailureThreshold = 1,
    ///                         InitialDelaySeconds = 0,
    ///                         PeriodSeconds = 3,
    ///                         TcpSocket = new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerStartupProbeTcpSocketArgs
    ///                         {
    ///                             Port = 8080,
    ///                         },
    ///                         TimeoutSeconds = 1,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Service Secret
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var secret = new Gcp.SecretManager.Secret("secret", new()
    ///     {
    ///         SecretId = "secret-1",
    ///         Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///         {
    ///             Automatic = true,
    ///         },
    ///     });
    /// 
    ///     var secret_version_data = new Gcp.SecretManager.SecretVersion("secret-version-data", new()
    ///     {
    ///         Secret = secret.Name,
    ///         SecretData = "secret-data",
    ///     });
    /// 
    ///     var @default = new Gcp.CloudRunV2.Service("default", new()
    ///     {
    ///         Location = "us-central1",
    ///         Ingress = "INGRESS_TRAFFIC_ALL",
    ///         Template = new Gcp.CloudRunV2.Inputs.ServiceTemplateArgs
    ///         {
    ///             Volumes = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.ServiceTemplateVolumeArgs
    ///                 {
    ///                     Name = "a-volume",
    ///                     Secret = new Gcp.CloudRunV2.Inputs.ServiceTemplateVolumeSecretArgs
    ///                     {
    ///                         Secret = secret.SecretId,
    ///                         DefaultMode = 292,
    ///                         Items = new[]
    ///                         {
    ///                             new Gcp.CloudRunV2.Inputs.ServiceTemplateVolumeSecretItemArgs
    ///                             {
    ///                                 Version = "1",
    ///                                 Path = "my-secret",
    ///                                 Mode = 256,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                     VolumeMounts = new[]
    ///                     {
    ///                         new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerVolumeMountArgs
    ///                         {
    ///                             Name = "a-volume",
    ///                             MountPath = "/secrets",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             secret_version_data,
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var secret_access = new Gcp.SecretManager.SecretIamMember("secret-access", new()
    ///     {
    ///         SecretId = secret.Id,
    ///         Role = "roles/secretmanager.secretAccessor",
    ///         Member = $"serviceAccount:{project.Apply(getProjectResult =&gt; getProjectResult.Number)}-compute@developer.gserviceaccount.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             secret,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:cloudrunv2/service:Service default projects/{{project}}/locations/{{location}}/services/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:cloudrunv2/service:Service default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:cloudrunv2/service:Service default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:cloudrunv2/service:Service")]
    public partial class Service : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Settings for the Binary Authorization feature.
        /// Structure is documented below.
        /// </summary>
        [Output("binaryAuthorization")]
        public Output<Outputs.ServiceBinaryAuthorization?> BinaryAuthorization { get; private set; } = null!;

        /// <summary>
        /// Arbitrary identifier for the API client.
        /// </summary>
        [Output("client")]
        public Output<string?> Client { get; private set; } = null!;

        /// <summary>
        /// Arbitrary version identifier for the API client.
        /// </summary>
        [Output("clientVersion")]
        public Output<string?> ClientVersion { get; private set; } = null!;

        /// <summary>
        /// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the
        /// Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation
        /// process in Cloud Run.
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.ServiceCondition>> Conditions { get; private set; } = null!;

        /// <summary>
        /// User-provided description of the Service. This field currently has a 512-character limit.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during
        /// updates.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this
        /// is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
        /// </summary>
        [Output("generation")]
        public Output<string> Generation { get; private set; } = null!;

        /// <summary>
        /// Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
        /// Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
        /// </summary>
        [Output("ingress")]
        public Output<string> Ingress { get; private set; } = null!;

        /// <summary>
        /// Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in
        /// Cloud Run.
        /// </summary>
        [Output("latestCreatedRevision")]
        public Output<string> LatestCreatedRevision { get; private set; } = null!;

        /// <summary>
        /// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on
        /// reconciliation process in Cloud Run.
        /// </summary>
        [Output("latestReadyRevision")]
        public Output<string> LatestReadyRevision { get; private set; } = null!;

        /// <summary>
        /// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
        /// Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
        /// </summary>
        [Output("launchStage")]
        public Output<string> LaunchStage { get; private set; } = null!;

        /// <summary>
        /// The location of the cloud run service
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Volume's name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The generation of this Service currently serving traffic. See comments in reconciling for additional information on
        /// reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its
        /// JSON representation will be a string instead of an integer.
        /// </summary>
        [Output("observedGeneration")]
        public Output<string> ObservedGeneration { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new
        /// Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring
        /// the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process,
        /// observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the
        /// intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation
        /// succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be
        /// found in terminalCondition.state. If reconciliation succeeded, the following fields will match: traffic and
        /// trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision. If reconciliation
        /// failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision,
        /// or empty for newly created Services. Additional information on the failure can be found in terminalCondition and
        /// conditions.
        /// </summary>
        [Output("reconciling")]
        public Output<bool> Reconciling { get; private set; } = null!;

        /// <summary>
        /// The template used to create revisions for this Service.
        /// Structure is documented below.
        /// </summary>
        [Output("template")]
        public Output<Outputs.ServiceTemplate> Template { get; private set; } = null!;

        /// <summary>
        /// The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach
        /// a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
        /// </summary>
        [Output("terminalConditions")]
        public Output<ImmutableArray<Outputs.ServiceTerminalCondition>> TerminalConditions { get; private set; } = null!;

        /// <summary>
        /// Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on
        /// reconciliation process in Cloud Run.
        /// </summary>
        [Output("trafficStatuses")]
        public Output<ImmutableArray<Outputs.ServiceTrafficStatus>> TrafficStatuses { get; private set; } = null!;

        /// <summary>
        /// Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
        /// Structure is documented below.
        /// </summary>
        [Output("traffics")]
        public Output<ImmutableArray<Outputs.ServiceTraffic>> Traffics { get; private set; } = null!;

        /// <summary>
        /// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until
        /// the resource is deleted.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The main URI in which this Service is serving traffic.
        /// </summary>
        [Output("uri")]
        public Output<string> Uri { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("gcp:cloudrunv2/service:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:cloudrunv2/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Settings for the Binary Authorization feature.
        /// Structure is documented below.
        /// </summary>
        [Input("binaryAuthorization")]
        public Input<Inputs.ServiceBinaryAuthorizationArgs>? BinaryAuthorization { get; set; }

        /// <summary>
        /// Arbitrary identifier for the API client.
        /// </summary>
        [Input("client")]
        public Input<string>? Client { get; set; }

        /// <summary>
        /// Arbitrary version identifier for the API client.
        /// </summary>
        [Input("clientVersion")]
        public Input<string>? ClientVersion { get; set; }

        /// <summary>
        /// User-provided description of the Service. This field currently has a 512-character limit.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
        /// Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
        /// </summary>
        [Input("ingress")]
        public Input<string>? Ingress { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
        /// Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
        /// </summary>
        [Input("launchStage")]
        public Input<string>? LaunchStage { get; set; }

        /// <summary>
        /// The location of the cloud run service
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Volume's name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The template used to create revisions for this Service.
        /// Structure is documented below.
        /// </summary>
        [Input("template", required: true)]
        public Input<Inputs.ServiceTemplateArgs> Template { get; set; } = null!;

        [Input("traffics")]
        private InputList<Inputs.ServiceTrafficArgs>? _traffics;

        /// <summary>
        /// Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ServiceTrafficArgs> Traffics
        {
            get => _traffics ?? (_traffics = new InputList<Inputs.ServiceTrafficArgs>());
            set => _traffics = value;
        }

        public ServiceArgs()
        {
        }
        public static new ServiceArgs Empty => new ServiceArgs();
    }

    public sealed class ServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Settings for the Binary Authorization feature.
        /// Structure is documented below.
        /// </summary>
        [Input("binaryAuthorization")]
        public Input<Inputs.ServiceBinaryAuthorizationGetArgs>? BinaryAuthorization { get; set; }

        /// <summary>
        /// Arbitrary identifier for the API client.
        /// </summary>
        [Input("client")]
        public Input<string>? Client { get; set; }

        /// <summary>
        /// Arbitrary version identifier for the API client.
        /// </summary>
        [Input("clientVersion")]
        public Input<string>? ClientVersion { get; set; }

        [Input("conditions")]
        private InputList<Inputs.ServiceConditionGetArgs>? _conditions;

        /// <summary>
        /// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the
        /// Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation
        /// process in Cloud Run.
        /// </summary>
        public InputList<Inputs.ServiceConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.ServiceConditionGetArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// User-provided description of the Service. This field currently has a 512-character limit.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during
        /// updates.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this
        /// is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
        /// </summary>
        [Input("generation")]
        public Input<string>? Generation { get; set; }

        /// <summary>
        /// Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
        /// Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
        /// </summary>
        [Input("ingress")]
        public Input<string>? Ingress { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in
        /// Cloud Run.
        /// </summary>
        [Input("latestCreatedRevision")]
        public Input<string>? LatestCreatedRevision { get; set; }

        /// <summary>
        /// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on
        /// reconciliation process in Cloud Run.
        /// </summary>
        [Input("latestReadyRevision")]
        public Input<string>? LatestReadyRevision { get; set; }

        /// <summary>
        /// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
        /// Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
        /// </summary>
        [Input("launchStage")]
        public Input<string>? LaunchStage { get; set; }

        /// <summary>
        /// The location of the cloud run service
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Volume's name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The generation of this Service currently serving traffic. See comments in reconciling for additional information on
        /// reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its
        /// JSON representation will be a string instead of an integer.
        /// </summary>
        [Input("observedGeneration")]
        public Input<string>? ObservedGeneration { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new
        /// Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring
        /// the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process,
        /// observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the
        /// intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation
        /// succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be
        /// found in terminalCondition.state. If reconciliation succeeded, the following fields will match: traffic and
        /// trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision. If reconciliation
        /// failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision,
        /// or empty for newly created Services. Additional information on the failure can be found in terminalCondition and
        /// conditions.
        /// </summary>
        [Input("reconciling")]
        public Input<bool>? Reconciling { get; set; }

        /// <summary>
        /// The template used to create revisions for this Service.
        /// Structure is documented below.
        /// </summary>
        [Input("template")]
        public Input<Inputs.ServiceTemplateGetArgs>? Template { get; set; }

        [Input("terminalConditions")]
        private InputList<Inputs.ServiceTerminalConditionGetArgs>? _terminalConditions;

        /// <summary>
        /// The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach
        /// a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
        /// </summary>
        public InputList<Inputs.ServiceTerminalConditionGetArgs> TerminalConditions
        {
            get => _terminalConditions ?? (_terminalConditions = new InputList<Inputs.ServiceTerminalConditionGetArgs>());
            set => _terminalConditions = value;
        }

        [Input("trafficStatuses")]
        private InputList<Inputs.ServiceTrafficStatusGetArgs>? _trafficStatuses;

        /// <summary>
        /// Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on
        /// reconciliation process in Cloud Run.
        /// </summary>
        public InputList<Inputs.ServiceTrafficStatusGetArgs> TrafficStatuses
        {
            get => _trafficStatuses ?? (_trafficStatuses = new InputList<Inputs.ServiceTrafficStatusGetArgs>());
            set => _trafficStatuses = value;
        }

        [Input("traffics")]
        private InputList<Inputs.ServiceTrafficGetArgs>? _traffics;

        /// <summary>
        /// Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ServiceTrafficGetArgs> Traffics
        {
            get => _traffics ?? (_traffics = new InputList<Inputs.ServiceTrafficGetArgs>());
            set => _traffics = value;
        }

        /// <summary>
        /// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until
        /// the resource is deleted.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The main URI in which this Service is serving traffic.
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public ServiceState()
        {
        }
        public static new ServiceState Empty => new ServiceState();
    }
}
