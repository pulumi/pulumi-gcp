// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudRunV2
{
    /// <summary>
    /// WorkerPool acts as a top-level container that manages a set of configurations and revision templates which implement a pull-based workload. WorkerPool exists to provide a singular abstraction which can be access controlled, reasoned about, and which encapsulates software lifecycle decisions such as rollout policy and team resource ownership.
    /// 
    /// To get more information about WorkerPool, see:
    /// 
    /// * [API documentation](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.workerPools)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/run/docs/)
    /// 
    /// ## Example Usage
    /// 
    /// ### Cloudrunv2 Worker Pool Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRunV2.WorkerPool("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "us-central1",
    ///         DeletionProtection = false,
    ///         LaunchStage = "BETA",
    ///         Template = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/worker-pool",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Worker Pool Limits
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRunV2.WorkerPool("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "us-central1",
    ///         DeletionProtection = false,
    ///         LaunchStage = "BETA",
    ///         Template = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/worker-pool",
    ///                     Resources = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerResourcesArgs
    ///                     {
    ///                         Limits = 
    ///                         {
    ///                             { "cpu", "2" },
    ///                             { "memory", "1024Mi" },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Worker Pool Sql
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var secret = new Gcp.SecretManager.Secret("secret", new()
    ///     {
    ///         SecretId = "secret-1",
    ///         Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///         {
    ///             Auto = null,
    ///         },
    ///     });
    /// 
    ///     var secret_version_data = new Gcp.SecretManager.SecretVersion("secret-version-data", new()
    ///     {
    ///         Secret = secret.Name,
    ///         SecretData = "secret-data",
    ///     });
    /// 
    ///     var instance = new Gcp.Sql.DatabaseInstance("instance", new()
    ///     {
    ///         Name = "cloudrun-sql",
    ///         Region = "us-central1",
    ///         DatabaseVersion = "MYSQL_5_7",
    ///         Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
    ///         {
    ///             Tier = "db-f1-micro",
    ///         },
    ///         DeletionProtection = true,
    ///     });
    /// 
    ///     var @default = new Gcp.CloudRunV2.WorkerPool("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "us-central1",
    ///         DeletionProtection = false,
    ///         LaunchStage = "BETA",
    ///         Template = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateArgs
    ///         {
    ///             Volumes = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVolumeArgs
    ///                 {
    ///                     Name = "cloudsql",
    ///                     CloudSqlInstance = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVolumeCloudSqlInstanceArgs
    ///                     {
    ///                         Instances = new[]
    ///                         {
    ///                             instance.ConnectionName,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/worker-pool",
    ///                     Envs = new[]
    ///                     {
    ///                         new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerEnvArgs
    ///                         {
    ///                             Name = "FOO",
    ///                             Value = "bar",
    ///                         },
    ///                         new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerEnvArgs
    ///                         {
    ///                             Name = "SECRET_ENV_VAR",
    ///                             ValueSource = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerEnvValueSourceArgs
    ///                             {
    ///                                 SecretKeyRef = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerEnvValueSourceSecretKeyRefArgs
    ///                                 {
    ///                                     Secret = secret.SecretId,
    ///                                     Version = "1",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     VolumeMounts = new[]
    ///                     {
    ///                         new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerVolumeMountArgs
    ///                         {
    ///                             Name = "cloudsql",
    ///                             MountPath = "/cloudsql",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         InstanceSplits = new[]
    ///         {
    ///             new Gcp.CloudRunV2.Inputs.WorkerPoolInstanceSplitArgs
    ///             {
    ///                 Type = "INSTANCE_SPLIT_ALLOCATION_TYPE_LATEST",
    ///                 Percent = 100,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             secret_version_data,
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var secret_access = new Gcp.SecretManager.SecretIamMember("secret-access", new()
    ///     {
    ///         SecretId = secret.Id,
    ///         Role = "roles/secretmanager.secretAccessor",
    ///         Member = $"serviceAccount:{project.Apply(getProjectResult =&gt; getProjectResult.Number)}-compute@developer.gserviceaccount.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             secret,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Worker Pool Directvpc
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRunV2.WorkerPool("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "us-central1",
    ///         DeletionProtection = false,
    ///         LaunchStage = "BETA",
    ///         Template = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/worker-pool",
    ///                 },
    ///             },
    ///             VpcAccess = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVpcAccessArgs
    ///             {
    ///                 NetworkInterfaces = new[]
    ///                 {
    ///                     new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVpcAccessNetworkInterfaceArgs
    ///                     {
    ///                         Network = "default",
    ///                         Subnetwork = "default",
    ///                         Tags = new[]
    ///                         {
    ///                             "tag1",
    ///                             "tag2",
    ///                             "tag3",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Worker Pool Gpu
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRunV2.WorkerPool("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "us-central1",
    ///         DeletionProtection = false,
    ///         LaunchStage = "BETA",
    ///         Template = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/worker-pool",
    ///                     Resources = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerResourcesArgs
    ///                     {
    ///                         Limits = 
    ///                         {
    ///                             { "cpu", "4" },
    ///                             { "memory", "16Gi" },
    ///                             { "nvidia.com/gpu", "1" },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             NodeSelector = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateNodeSelectorArgs
    ///             {
    ///                 Accelerator = "nvidia-l4",
    ///             },
    ///             GpuZonalRedundancyDisabled = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Worker Pool Secret
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var secret = new Gcp.SecretManager.Secret("secret", new()
    ///     {
    ///         SecretId = "secret-1",
    ///         Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
    ///         {
    ///             Auto = null,
    ///         },
    ///     });
    /// 
    ///     var secret_version_data = new Gcp.SecretManager.SecretVersion("secret-version-data", new()
    ///     {
    ///         Secret = secret.Name,
    ///         SecretData = "secret-data",
    ///     });
    /// 
    ///     var @default = new Gcp.CloudRunV2.WorkerPool("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "us-central1",
    ///         DeletionProtection = false,
    ///         LaunchStage = "BETA",
    ///         Template = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateArgs
    ///         {
    ///             Volumes = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVolumeArgs
    ///                 {
    ///                     Name = "a-volume",
    ///                     Secret = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVolumeSecretArgs
    ///                     {
    ///                         Secret = secret.SecretId,
    ///                         DefaultMode = 292,
    ///                         Items = new[]
    ///                         {
    ///                             new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVolumeSecretItemArgs
    ///                             {
    ///                                 Version = "1",
    ///                                 Path = "my-secret",
    ///                                 Mode = 444,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/worker-pool",
    ///                     VolumeMounts = new[]
    ///                     {
    ///                         new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerVolumeMountArgs
    ///                         {
    ///                             Name = "a-volume",
    ///                             MountPath = "/secrets",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             secret_version_data,
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var secret_access = new Gcp.SecretManager.SecretIamMember("secret-access", new()
    ///     {
    ///         SecretId = secret.Id,
    ///         Role = "roles/secretmanager.secretAccessor",
    ///         Member = $"serviceAccount:{project.Apply(getProjectResult =&gt; getProjectResult.Number)}-compute@developer.gserviceaccount.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             secret,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Worker Pool Multicontainer
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRunV2.WorkerPool("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "us-central1",
    ///         DeletionProtection = false,
    ///         LaunchStage = "BETA",
    ///         Template = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerArgs
    ///                 {
    ///                     Name = "hello-1",
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/worker-pool",
    ///                     VolumeMounts = new[]
    ///                     {
    ///                         new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerVolumeMountArgs
    ///                         {
    ///                             Name = "empty-dir-volume",
    ///                             MountPath = "/mnt",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerArgs
    ///                 {
    ///                     Name = "hello-2",
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/worker-pool",
    ///                 },
    ///             },
    ///             Volumes = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVolumeArgs
    ///                 {
    ///                     Name = "empty-dir-volume",
    ///                     EmptyDir = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVolumeEmptyDirArgs
    ///                     {
    ///                         Medium = "MEMORY",
    ///                         SizeLimit = "256Mi",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Worker Pool Mount Gcs
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultBucket = new Gcp.Storage.Bucket("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var @default = new Gcp.CloudRunV2.WorkerPool("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "us-central1",
    ///         DeletionProtection = false,
    ///         LaunchStage = "BETA",
    ///         Template = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/worker-pool",
    ///                     VolumeMounts = new[]
    ///                     {
    ///                         new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerVolumeMountArgs
    ///                         {
    ///                             Name = "bucket",
    ///                             MountPath = "/var/www",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Volumes = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVolumeArgs
    ///                 {
    ///                     Name = "bucket",
    ///                     Gcs = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVolumeGcsArgs
    ///                     {
    ///                         Bucket = defaultBucket.Name,
    ///                         ReadOnly = false,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Worker Pool Mount Nfs
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultInstance = new Gcp.Filestore.Instance("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "us-central1-b",
    ///         Tier = "BASIC_HDD",
    ///         FileShares = new Gcp.Filestore.Inputs.InstanceFileSharesArgs
    ///         {
    ///             CapacityGb = 1024,
    ///             Name = "share1",
    ///         },
    ///         Networks = new[]
    ///         {
    ///             new Gcp.Filestore.Inputs.InstanceNetworkArgs
    ///             {
    ///                 Network = "default",
    ///                 Modes = new[]
    ///                 {
    ///                     "MODE_IPV4",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.CloudRunV2.WorkerPool("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "us-central1",
    ///         DeletionProtection = false,
    ///         LaunchStage = "BETA",
    ///         Template = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/worker-pool:latest",
    ///                     VolumeMounts = new[]
    ///                     {
    ///                         new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerVolumeMountArgs
    ///                         {
    ///                             Name = "nfs",
    ///                             MountPath = "/mnt/nfs/filestore",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             VpcAccess = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVpcAccessArgs
    ///             {
    ///                 NetworkInterfaces = new[]
    ///                 {
    ///                     new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVpcAccessNetworkInterfaceArgs
    ///                     {
    ///                         Network = "default",
    ///                         Subnetwork = "default",
    ///                     },
    ///                 },
    ///             },
    ///             Volumes = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVolumeArgs
    ///                 {
    ///                     Name = "nfs",
    ///                     Nfs = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVolumeNfsArgs
    ///                     {
    ///                         Server = defaultInstance.Networks.Apply(networks =&gt; networks[0].IpAddresses[0]),
    ///                         Path = "/share1",
    ///                         ReadOnly = false,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Worker Pool Custom Audiences
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CloudRunV2.WorkerPool("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "us-central1",
    ///         DeletionProtection = false,
    ///         LaunchStage = "BETA",
    ///         CustomAudiences = new[]
    ///         {
    ///             "aud1",
    ///         },
    ///         Template = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/worker-pool",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudrunv2 Worker Pool Startup Liveness Probe
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var customTest = new Gcp.Compute.Network("custom_test", new()
    ///     {
    ///         Name = "wp-net",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var customTestSubnetwork = new Gcp.Compute.Subnetwork("custom_test", new()
    ///     {
    ///         Name = "wp-subnet",
    ///         IpCidrRange = "10.2.0.0/28",
    ///         Region = "us-central1",
    ///         Network = customTest.Id,
    ///     });
    /// 
    ///     var @default = new Gcp.CloudRunV2.WorkerPool("default", new()
    ///     {
    ///         Name = "cloudrun-worker-pool",
    ///         Location = "us-central1",
    ///         LaunchStage = "BETA",
    ///         DeletionProtection = false,
    ///         Template = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateArgs
    ///         {
    ///             Annotations = null,
    ///             Labels = null,
    ///             Containers = new[]
    ///             {
    ///                 new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerArgs
    ///                 {
    ///                     Image = "us-docker.pkg.dev/cloudrun/container/hello",
    ///                     Commands = new() { },
    ///                     Args = new() { },
    ///                     StartupProbe = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerStartupProbeArgs
    ///                     {
    ///                         InitialDelaySeconds = 0,
    ///                         TimeoutSeconds = 1,
    ///                         PeriodSeconds = 3,
    ///                         FailureThreshold = 3,
    ///                         TcpSocket = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerStartupProbeTcpSocketArgs
    ///                         {
    ///                             Port = 8080,
    ///                         },
    ///                     },
    ///                     LivenessProbe = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerLivenessProbeArgs
    ///                     {
    ///                         InitialDelaySeconds = 0,
    ///                         TimeoutSeconds = 1,
    ///                         PeriodSeconds = 10,
    ///                         FailureThreshold = 3,
    ///                         HttpGet = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateContainerLivenessProbeHttpGetArgs
    ///                         {
    ///                             Path = "/",
    ///                             Port = 8080,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             VpcAccess = new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVpcAccessArgs
    ///             {
    ///                 NetworkInterfaces = new[]
    ///                 {
    ///                     new Gcp.CloudRunV2.Inputs.WorkerPoolTemplateVpcAccessNetworkInterfaceArgs
    ///                     {
    ///                         Network = customTest.Id,
    ///                         Subnetwork = customTestSubnetwork.Id,
    ///                         Tags = new() { },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WorkerPool can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/workerPools/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, WorkerPool can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:cloudrunv2/workerPool:WorkerPool default projects/{{project}}/locations/{{location}}/workerPools/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:cloudrunv2/workerPool:WorkerPool default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:cloudrunv2/workerPool:WorkerPool default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:cloudrunv2/workerPool:WorkerPool")]
    public partial class WorkerPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
        /// Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources.
        /// All system annotations in v1 now have a corresponding field in v2 WorkerPool.
        /// This field follows Kubernetes annotations' namespacing, limits, and rules.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `EffectiveAnnotations` for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Settings for the Binary Authorization feature.
        /// Structure is documented below.
        /// </summary>
        [Output("binaryAuthorization")]
        public Output<Outputs.WorkerPoolBinaryAuthorization?> BinaryAuthorization { get; private set; } = null!;

        /// <summary>
        /// Arbitrary identifier for the API client.
        /// </summary>
        [Output("client")]
        public Output<string?> Client { get; private set; } = null!;

        /// <summary>
        /// Arbitrary version identifier for the API client.
        /// </summary>
        [Output("clientVersion")]
        public Output<string?> ClientVersion { get; private set; } = null!;

        /// <summary>
        /// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the WorkerPool does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
        /// Structure is documented below.
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.WorkerPoolCondition>> Conditions { get; private set; } = null!;

        /// <summary>
        /// The creation time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Email address of the authenticated creator.
        /// </summary>
        [Output("creator")]
        public Output<string> Creator { get; private set; } = null!;

        /// <summary>
        /// One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
        /// For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
        /// </summary>
        [Output("customAudiences")]
        public Output<ImmutableArray<string>> CustomAudiences { get; private set; } = null!;

        /// <summary>
        /// The deletion time.
        /// </summary>
        [Output("deleteTime")]
        public Output<string> DeleteTime { get; private set; } = null!;

        [Output("deletionProtection")]
        public Output<bool?> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// User-provided description of the WorkerPool. This field currently has a 512-character limit.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// For a deleted resource, the time after which it will be permanently deleted.
        /// </summary>
        [Output("expireTime")]
        public Output<string> ExpireTime { get; private set; } = null!;

        /// <summary>
        /// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
        /// </summary>
        [Output("generation")]
        public Output<string> Generation { get; private set; } = null!;

        /// <summary>
        /// Detailed status information for corresponding instance splits. See comments in reconciling for additional information on reconciliation process in Cloud Run.
        /// Structure is documented below.
        /// </summary>
        [Output("instanceSplitStatuses")]
        public Output<ImmutableArray<Outputs.WorkerPoolInstanceSplitStatus>> InstanceSplitStatuses { get; private set; } = null!;

        /// <summary>
        /// Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.
        /// Structure is documented below.
        /// </summary>
        [Output("instanceSplits")]
        public Output<ImmutableArray<Outputs.WorkerPoolInstanceSplit>> InstanceSplits { get; private set; } = null!;

        /// <summary>
        /// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
        /// environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
        /// Cloud Run API v2 does not support labels with  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected.
        /// All system labels in v1 now have a corresponding field in v2 WorkerPool.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Email address of the last authenticated modifier.
        /// </summary>
        [Output("lastModifier")]
        public Output<string> LastModifier { get; private set; } = null!;

        /// <summary>
        /// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
        /// </summary>
        [Output("latestCreatedRevision")]
        public Output<string> LatestCreatedRevision { get; private set; } = null!;

        /// <summary>
        /// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
        /// </summary>
        [Output("latestReadyRevision")]
        public Output<string> LatestReadyRevision { get; private set; } = null!;

        /// <summary>
        /// The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
        /// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
        /// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
        /// Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.
        /// </summary>
        [Output("launchStage")]
        public Output<string> LaunchStage { get; private set; } = null!;

        /// <summary>
        /// The location of the cloud run worker pool
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Name of the WorkerPool.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The generation of this WorkerPool currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
        /// </summary>
        [Output("observedGeneration")]
        public Output<string> ObservedGeneration { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Returns true if the WorkerPool is currently being acted upon by the system to bring it into the desired state.
        /// When a new WorkerPool is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the WorkerPool to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the WorkerPool, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
        /// If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
        /// If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created WorkerPools. Additional information on the failure can be found in terminalCondition and conditions.
        /// </summary>
        [Output("reconciling")]
        public Output<bool> Reconciling { get; private set; } = null!;

        /// <summary>
        /// Scaling settings that apply to the worker pool.
        /// Structure is documented below.
        /// </summary>
        [Output("scaling")]
        public Output<Outputs.WorkerPoolScaling> Scaling { get; private set; } = null!;

        /// <summary>
        /// The template used to create revisions for this WorkerPool.
        /// Structure is documented below.
        /// </summary>
        [Output("template")]
        public Output<Outputs.WorkerPoolTemplate> Template { get; private set; } = null!;

        /// <summary>
        /// The Condition of this WorkerPool, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
        /// Structure is documented below.
        /// </summary>
        [Output("terminalConditions")]
        public Output<ImmutableArray<Outputs.WorkerPoolTerminalCondition>> TerminalConditions { get; private set; } = null!;

        /// <summary>
        /// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The last-modified time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a WorkerPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkerPool(string name, WorkerPoolArgs args, CustomResourceOptions? options = null)
            : base("gcp:cloudrunv2/workerPool:WorkerPool", name, args ?? new WorkerPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkerPool(string name, Input<string> id, WorkerPoolState? state = null, CustomResourceOptions? options = null)
            : base("gcp:cloudrunv2/workerPool:WorkerPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkerPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkerPool Get(string name, Input<string> id, WorkerPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkerPool(name, id, state, options);
        }
    }

    public sealed class WorkerPoolArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
        /// Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources.
        /// All system annotations in v1 now have a corresponding field in v2 WorkerPool.
        /// This field follows Kubernetes annotations' namespacing, limits, and rules.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `EffectiveAnnotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Settings for the Binary Authorization feature.
        /// Structure is documented below.
        /// </summary>
        [Input("binaryAuthorization")]
        public Input<Inputs.WorkerPoolBinaryAuthorizationArgs>? BinaryAuthorization { get; set; }

        /// <summary>
        /// Arbitrary identifier for the API client.
        /// </summary>
        [Input("client")]
        public Input<string>? Client { get; set; }

        /// <summary>
        /// Arbitrary version identifier for the API client.
        /// </summary>
        [Input("clientVersion")]
        public Input<string>? ClientVersion { get; set; }

        [Input("customAudiences")]
        private InputList<string>? _customAudiences;

        /// <summary>
        /// One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
        /// For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
        /// </summary>
        public InputList<string> CustomAudiences
        {
            get => _customAudiences ?? (_customAudiences = new InputList<string>());
            set => _customAudiences = value;
        }

        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// User-provided description of the WorkerPool. This field currently has a 512-character limit.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("instanceSplits")]
        private InputList<Inputs.WorkerPoolInstanceSplitArgs>? _instanceSplits;

        /// <summary>
        /// Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WorkerPoolInstanceSplitArgs> InstanceSplits
        {
            get => _instanceSplits ?? (_instanceSplits = new InputList<Inputs.WorkerPoolInstanceSplitArgs>());
            set => _instanceSplits = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
        /// environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
        /// Cloud Run API v2 does not support labels with  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected.
        /// All system labels in v1 now have a corresponding field in v2 WorkerPool.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
        /// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
        /// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
        /// Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.
        /// </summary>
        [Input("launchStage")]
        public Input<string>? LaunchStage { get; set; }

        /// <summary>
        /// The location of the cloud run worker pool
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Name of the WorkerPool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Scaling settings that apply to the worker pool.
        /// Structure is documented below.
        /// </summary>
        [Input("scaling")]
        public Input<Inputs.WorkerPoolScalingArgs>? Scaling { get; set; }

        /// <summary>
        /// The template used to create revisions for this WorkerPool.
        /// Structure is documented below.
        /// </summary>
        [Input("template", required: true)]
        public Input<Inputs.WorkerPoolTemplateArgs> Template { get; set; } = null!;

        public WorkerPoolArgs()
        {
        }
        public static new WorkerPoolArgs Empty => new WorkerPoolArgs();
    }

    public sealed class WorkerPoolState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
        /// Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources.
        /// All system annotations in v1 now have a corresponding field in v2 WorkerPool.
        /// This field follows Kubernetes annotations' namespacing, limits, and rules.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `EffectiveAnnotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Settings for the Binary Authorization feature.
        /// Structure is documented below.
        /// </summary>
        [Input("binaryAuthorization")]
        public Input<Inputs.WorkerPoolBinaryAuthorizationGetArgs>? BinaryAuthorization { get; set; }

        /// <summary>
        /// Arbitrary identifier for the API client.
        /// </summary>
        [Input("client")]
        public Input<string>? Client { get; set; }

        /// <summary>
        /// Arbitrary version identifier for the API client.
        /// </summary>
        [Input("clientVersion")]
        public Input<string>? ClientVersion { get; set; }

        [Input("conditions")]
        private InputList<Inputs.WorkerPoolConditionGetArgs>? _conditions;

        /// <summary>
        /// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the WorkerPool does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WorkerPoolConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.WorkerPoolConditionGetArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The creation time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Email address of the authenticated creator.
        /// </summary>
        [Input("creator")]
        public Input<string>? Creator { get; set; }

        [Input("customAudiences")]
        private InputList<string>? _customAudiences;

        /// <summary>
        /// One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
        /// For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
        /// </summary>
        public InputList<string> CustomAudiences
        {
            get => _customAudiences ?? (_customAudiences = new InputList<string>());
            set => _customAudiences = value;
        }

        /// <summary>
        /// The deletion time.
        /// </summary>
        [Input("deleteTime")]
        public Input<string>? DeleteTime { get; set; }

        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// User-provided description of the WorkerPool. This field currently has a 512-character limit.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// For a deleted resource, the time after which it will be permanently deleted.
        /// </summary>
        [Input("expireTime")]
        public Input<string>? ExpireTime { get; set; }

        /// <summary>
        /// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
        /// </summary>
        [Input("generation")]
        public Input<string>? Generation { get; set; }

        [Input("instanceSplitStatuses")]
        private InputList<Inputs.WorkerPoolInstanceSplitStatusGetArgs>? _instanceSplitStatuses;

        /// <summary>
        /// Detailed status information for corresponding instance splits. See comments in reconciling for additional information on reconciliation process in Cloud Run.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WorkerPoolInstanceSplitStatusGetArgs> InstanceSplitStatuses
        {
            get => _instanceSplitStatuses ?? (_instanceSplitStatuses = new InputList<Inputs.WorkerPoolInstanceSplitStatusGetArgs>());
            set => _instanceSplitStatuses = value;
        }

        [Input("instanceSplits")]
        private InputList<Inputs.WorkerPoolInstanceSplitGetArgs>? _instanceSplits;

        /// <summary>
        /// Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WorkerPoolInstanceSplitGetArgs> InstanceSplits
        {
            get => _instanceSplits ?? (_instanceSplits = new InputList<Inputs.WorkerPoolInstanceSplitGetArgs>());
            set => _instanceSplits = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
        /// environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
        /// Cloud Run API v2 does not support labels with  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected.
        /// All system labels in v1 now have a corresponding field in v2 WorkerPool.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Email address of the last authenticated modifier.
        /// </summary>
        [Input("lastModifier")]
        public Input<string>? LastModifier { get; set; }

        /// <summary>
        /// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
        /// </summary>
        [Input("latestCreatedRevision")]
        public Input<string>? LatestCreatedRevision { get; set; }

        /// <summary>
        /// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
        /// </summary>
        [Input("latestReadyRevision")]
        public Input<string>? LatestReadyRevision { get; set; }

        /// <summary>
        /// The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
        /// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
        /// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
        /// Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.
        /// </summary>
        [Input("launchStage")]
        public Input<string>? LaunchStage { get; set; }

        /// <summary>
        /// The location of the cloud run worker pool
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the WorkerPool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The generation of this WorkerPool currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
        /// </summary>
        [Input("observedGeneration")]
        public Input<string>? ObservedGeneration { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Returns true if the WorkerPool is currently being acted upon by the system to bring it into the desired state.
        /// When a new WorkerPool is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the WorkerPool to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the WorkerPool, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
        /// If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
        /// If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created WorkerPools. Additional information on the failure can be found in terminalCondition and conditions.
        /// </summary>
        [Input("reconciling")]
        public Input<bool>? Reconciling { get; set; }

        /// <summary>
        /// Scaling settings that apply to the worker pool.
        /// Structure is documented below.
        /// </summary>
        [Input("scaling")]
        public Input<Inputs.WorkerPoolScalingGetArgs>? Scaling { get; set; }

        /// <summary>
        /// The template used to create revisions for this WorkerPool.
        /// Structure is documented below.
        /// </summary>
        [Input("template")]
        public Input<Inputs.WorkerPoolTemplateGetArgs>? Template { get; set; }

        [Input("terminalConditions")]
        private InputList<Inputs.WorkerPoolTerminalConditionGetArgs>? _terminalConditions;

        /// <summary>
        /// The Condition of this WorkerPool, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WorkerPoolTerminalConditionGetArgs> TerminalConditions
        {
            get => _terminalConditions ?? (_terminalConditions = new InputList<Inputs.WorkerPoolTerminalConditionGetArgs>());
            set => _terminalConditions = value;
        }

        /// <summary>
        /// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The last-modified time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public WorkerPoolState()
        {
        }
        public static new WorkerPoolState Empty => new WorkerPoolState();
    }
}
