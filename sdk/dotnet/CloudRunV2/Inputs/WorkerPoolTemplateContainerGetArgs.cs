// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudRunV2.Inputs
{

    public sealed class WorkerPoolTemplateContainerGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;

        /// <summary>
        /// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
        /// </summary>
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        [Input("commands")]
        private InputList<string>? _commands;

        /// <summary>
        /// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        /// </summary>
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        [Input("envs")]
        private InputList<Inputs.WorkerPoolTemplateContainerEnvGetArgs>? _envs;

        /// <summary>
        /// List of environment variables to set in the container.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WorkerPoolTemplateContainerEnvGetArgs> Envs
        {
            get => _envs ?? (_envs = new InputList<Inputs.WorkerPoolTemplateContainerEnvGetArgs>());
            set => _envs = value;
        }

        /// <summary>
        /// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// Name of the container specified as a DNS_LABEL.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        /// Structure is documented below.
        /// </summary>
        [Input("resources")]
        public Input<Inputs.WorkerPoolTemplateContainerResourcesGetArgs>? Resources { get; set; }

        [Input("volumeMounts")]
        private InputList<Inputs.WorkerPoolTemplateContainerVolumeMountGetArgs>? _volumeMounts;

        /// <summary>
        /// Volume to mount into the container's filesystem.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WorkerPoolTemplateContainerVolumeMountGetArgs> VolumeMounts
        {
            get => _volumeMounts ?? (_volumeMounts = new InputList<Inputs.WorkerPoolTemplateContainerVolumeMountGetArgs>());
            set => _volumeMounts = value;
        }

        /// <summary>
        /// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
        /// </summary>
        [Input("workingDir")]
        public Input<string>? WorkingDir { get; set; }

        public WorkerPoolTemplateContainerGetArgs()
        {
        }
        public static new WorkerPoolTemplateContainerGetArgs Empty => new WorkerPoolTemplateContainerGetArgs();
    }
}
