// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.GkeHub
{
    public static class GetFeature
    {
        public static Task<GetFeatureResult> InvokeAsync(GetFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFeatureResult>("gcp:gkehub/getFeature:getFeature", args ?? new GetFeatureArgs(), options.WithDefaults());

        public static Output<GetFeatureResult> Invoke(GetFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFeatureResult>("gcp:gkehub/getFeature:getFeature", args ?? new GetFeatureInvokeArgs(), options.WithDefaults());

        public static Output<GetFeatureResult> Invoke(GetFeatureInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFeatureResult>("gcp:gkehub/getFeature:getFeature", args ?? new GetFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFeatureArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetFeatureArgs()
        {
        }
        public static new GetFeatureArgs Empty => new GetFeatureArgs();
    }

    public sealed class GetFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetFeatureInvokeArgs()
        {
        }
        public static new GetFeatureInvokeArgs Empty => new GetFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetFeatureResult
    {
        public readonly string CreateTime;
        public readonly string DeleteTime;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly ImmutableArray<Outputs.GetFeatureFleetDefaultMemberConfigResult> FleetDefaultMemberConfigs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Location;
        public readonly string Name;
        public readonly string? Project;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly ImmutableArray<Outputs.GetFeatureResourceStateResult> ResourceStates;
        public readonly ImmutableArray<Outputs.GetFeatureSpecResult> Specs;
        public readonly ImmutableArray<Outputs.GetFeatureStateResult> States;
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetFeatureResult(
            string createTime,

            string deleteTime,

            ImmutableDictionary<string, string> effectiveLabels,

            ImmutableArray<Outputs.GetFeatureFleetDefaultMemberConfigResult> fleetDefaultMemberConfigs,

            string id,

            ImmutableDictionary<string, string> labels,

            string location,

            string name,

            string? project,

            ImmutableDictionary<string, string> pulumiLabels,

            ImmutableArray<Outputs.GetFeatureResourceStateResult> resourceStates,

            ImmutableArray<Outputs.GetFeatureSpecResult> specs,

            ImmutableArray<Outputs.GetFeatureStateResult> states,

            string updateTime)
        {
            CreateTime = createTime;
            DeleteTime = deleteTime;
            EffectiveLabels = effectiveLabels;
            FleetDefaultMemberConfigs = fleetDefaultMemberConfigs;
            Id = id;
            Labels = labels;
            Location = location;
            Name = name;
            Project = project;
            PulumiLabels = pulumiLabels;
            ResourceStates = resourceStates;
            Specs = specs;
            States = states;
            UpdateTime = updateTime;
        }
    }
}
