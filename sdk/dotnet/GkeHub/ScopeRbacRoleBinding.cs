// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.GkeHub
{
    /// <summary>
    /// RBACRoleBinding represents a rbacrolebinding across the Fleet.
    /// 
    /// To get more information about ScopeRBACRoleBinding, see:
    /// 
    /// * [API documentation](https://cloud.google.com/anthos/fleet-management/docs/reference/rest/v1/projects.locations.scopes.rbacrolebindings)
    /// * How-to Guides
    ///     * [Registering a Cluster](https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster#register_cluster)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ScopeRBACRoleBinding can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default projects/{{project}}/locations/global/scopes/{{scope_id}}/rbacrolebindings/{{scope_rbac_role_binding_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default {{project}}/{{scope_id}}/{{scope_rbac_role_binding_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default {{scope_id}}/{{scope_rbac_role_binding_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding")]
    public partial class ScopeRbacRoleBinding : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time the RBAC Role Binding was created in UTC.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Time the RBAC Role Binding was deleted in UTC.
        /// </summary>
        [Output("deleteTime")]
        public Output<string> DeleteTime { get; private set; } = null!;

        /// <summary>
        /// Principal that is be authorized in the cluster (at least of one the oneof
        /// is required). Updating one will unset the other automatically.
        /// group is the group, as seen by the kubernetes cluster.
        /// </summary>
        [Output("group")]
        public Output<string?> Group { get; private set; } = null!;

        /// <summary>
        /// Labels for this ScopeRBACRoleBinding.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The resource name for the RBAC Role Binding
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Role to bind to the principal.
        /// Structure is documented below.
        /// </summary>
        [Output("role")]
        public Output<Outputs.ScopeRbacRoleBindingRole> Role { get; private set; } = null!;

        /// <summary>
        /// Id of the scope
        /// </summary>
        [Output("scopeId")]
        public Output<string> ScopeId { get; private set; } = null!;

        /// <summary>
        /// The client-provided identifier of the RBAC Role Binding.
        /// </summary>
        [Output("scopeRbacRoleBindingId")]
        public Output<string> ScopeRbacRoleBindingId { get; private set; } = null!;

        /// <summary>
        /// State of the RBAC Role Binding resource.
        /// Structure is documented below.
        /// </summary>
        [Output("states")]
        public Output<ImmutableArray<Outputs.ScopeRbacRoleBindingState>> States { get; private set; } = null!;

        /// <summary>
        /// Google-generated UUID for this resource.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Time the RBAC Role Binding was updated in UTC.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Principal that is be authorized in the cluster (at least of one the oneof
        /// is required). Updating one will unset the other automatically.
        /// user is the name of the user as seen by the kubernetes cluster, example
        /// "alice" or "alice@domain.tld"
        /// </summary>
        [Output("user")]
        public Output<string?> User { get; private set; } = null!;


        /// <summary>
        /// Create a ScopeRbacRoleBinding resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScopeRbacRoleBinding(string name, ScopeRbacRoleBindingArgs args, CustomResourceOptions? options = null)
            : base("gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding", name, args ?? new ScopeRbacRoleBindingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScopeRbacRoleBinding(string name, Input<string> id, ScopeRbacRoleBindingState? state = null, CustomResourceOptions? options = null)
            : base("gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScopeRbacRoleBinding resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScopeRbacRoleBinding Get(string name, Input<string> id, ScopeRbacRoleBindingState? state = null, CustomResourceOptions? options = null)
        {
            return new ScopeRbacRoleBinding(name, id, state, options);
        }
    }

    public sealed class ScopeRbacRoleBindingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Principal that is be authorized in the cluster (at least of one the oneof
        /// is required). Updating one will unset the other automatically.
        /// group is the group, as seen by the kubernetes cluster.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for this ScopeRBACRoleBinding.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Role to bind to the principal.
        /// Structure is documented below.
        /// </summary>
        [Input("role", required: true)]
        public Input<Inputs.ScopeRbacRoleBindingRoleArgs> Role { get; set; } = null!;

        /// <summary>
        /// Id of the scope
        /// </summary>
        [Input("scopeId", required: true)]
        public Input<string> ScopeId { get; set; } = null!;

        /// <summary>
        /// The client-provided identifier of the RBAC Role Binding.
        /// </summary>
        [Input("scopeRbacRoleBindingId", required: true)]
        public Input<string> ScopeRbacRoleBindingId { get; set; } = null!;

        /// <summary>
        /// Principal that is be authorized in the cluster (at least of one the oneof
        /// is required). Updating one will unset the other automatically.
        /// user is the name of the user as seen by the kubernetes cluster, example
        /// "alice" or "alice@domain.tld"
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public ScopeRbacRoleBindingArgs()
        {
        }
        public static new ScopeRbacRoleBindingArgs Empty => new ScopeRbacRoleBindingArgs();
    }

    public sealed class ScopeRbacRoleBindingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time the RBAC Role Binding was created in UTC.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Time the RBAC Role Binding was deleted in UTC.
        /// </summary>
        [Input("deleteTime")]
        public Input<string>? DeleteTime { get; set; }

        /// <summary>
        /// Principal that is be authorized in the cluster (at least of one the oneof
        /// is required). Updating one will unset the other automatically.
        /// group is the group, as seen by the kubernetes cluster.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for this ScopeRBACRoleBinding.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The resource name for the RBAC Role Binding
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Role to bind to the principal.
        /// Structure is documented below.
        /// </summary>
        [Input("role")]
        public Input<Inputs.ScopeRbacRoleBindingRoleGetArgs>? Role { get; set; }

        /// <summary>
        /// Id of the scope
        /// </summary>
        [Input("scopeId")]
        public Input<string>? ScopeId { get; set; }

        /// <summary>
        /// The client-provided identifier of the RBAC Role Binding.
        /// </summary>
        [Input("scopeRbacRoleBindingId")]
        public Input<string>? ScopeRbacRoleBindingId { get; set; }

        [Input("states")]
        private InputList<Inputs.ScopeRbacRoleBindingStateGetArgs>? _states;

        /// <summary>
        /// State of the RBAC Role Binding resource.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ScopeRbacRoleBindingStateGetArgs> States
        {
            get => _states ?? (_states = new InputList<Inputs.ScopeRbacRoleBindingStateGetArgs>());
            set => _states = value;
        }

        /// <summary>
        /// Google-generated UUID for this resource.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Time the RBAC Role Binding was updated in UTC.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// Principal that is be authorized in the cluster (at least of one the oneof
        /// is required). Updating one will unset the other automatically.
        /// user is the name of the user as seen by the kubernetes cluster, example
        /// "alice" or "alice@domain.tld"
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public ScopeRbacRoleBindingState()
        {
        }
        public static new ScopeRbacRoleBindingState Empty => new ScopeRbacRoleBindingState();
    }
}
