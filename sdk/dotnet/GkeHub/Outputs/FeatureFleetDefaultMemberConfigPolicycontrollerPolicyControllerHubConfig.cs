// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.GkeHub.Outputs
{

    [OutputType]
    public sealed class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig
    {
        /// <summary>
        /// Interval for Policy Controller Audit scans (in seconds). When set to 0, this disables audit functionality altogether.
        /// </summary>
        public readonly int? AuditIntervalSeconds;
        /// <summary>
        /// The maximum number of audit violations to be stored in a constraint. If not set, the internal default of 20 will be used.
        /// </summary>
        public readonly int? ConstraintViolationLimit;
        /// <summary>
        /// Map of deployment configs to deployments ("admission", "audit", "mutation").
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig> DeploymentConfigs;
        /// <summary>
        /// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        /// </summary>
        public readonly ImmutableArray<string> ExemptableNamespaces;
        /// <summary>
        /// Configures the mode of the Policy Controller installation
        /// Possible values are: `INSTALL_SPEC_UNSPECIFIED`, `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED`, `INSTALL_SPEC_DETACHED`.
        /// </summary>
        public readonly string InstallSpec;
        /// <summary>
        /// Logs all denies and dry run failures.
        /// </summary>
        public readonly bool? LogDeniesEnabled;
        /// <summary>
        /// Monitoring specifies the configuration of monitoring Policy Controller.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoring? Monitoring;
        /// <summary>
        /// Enables the ability to mutate resources using Policy Controller.
        /// </summary>
        public readonly bool? MutationEnabled;
        /// <summary>
        /// Specifies the desired policy content on the cluster.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent? PolicyContent;
        /// <summary>
        /// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        /// </summary>
        public readonly bool? ReferentialRulesEnabled;

        [OutputConstructor]
        private FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig(
            int? auditIntervalSeconds,

            int? constraintViolationLimit,

            ImmutableArray<Outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig> deploymentConfigs,

            ImmutableArray<string> exemptableNamespaces,

            string installSpec,

            bool? logDeniesEnabled,

            Outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoring? monitoring,

            bool? mutationEnabled,

            Outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent? policyContent,

            bool? referentialRulesEnabled)
        {
            AuditIntervalSeconds = auditIntervalSeconds;
            ConstraintViolationLimit = constraintViolationLimit;
            DeploymentConfigs = deploymentConfigs;
            ExemptableNamespaces = exemptableNamespaces;
            InstallSpec = installSpec;
            LogDeniesEnabled = logDeniesEnabled;
            Monitoring = monitoring;
            MutationEnabled = mutationEnabled;
            PolicyContent = policyContent;
            ReferentialRulesEnabled = referentialRulesEnabled;
        }
    }
}
