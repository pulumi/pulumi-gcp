// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.CloudAsset
{
    public static class GetResourcesSearchAll
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Searching For All Projects In An Org
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var projects = Gcp.CloudAsset.GetResourcesSearchAll.Invoke(new()
        ///     {
        ///         Scope = "organizations/0123456789",
        ///         AssetTypes = new[]
        ///         {
        ///             "cloudresourcemanager.googleapis.com/Project",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Searching For All Projects With CloudBuild API Enabled
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cloudBuildProjects = Gcp.CloudAsset.GetResourcesSearchAll.Invoke(new()
        ///     {
        ///         Scope = "organizations/0123456789",
        ///         AssetTypes = new[]
        ///         {
        ///             "serviceusage.googleapis.com/Service",
        ///         },
        ///         Query = "displayName:cloudbuild.googleapis.com AND state:ENABLED",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Searching For All Service Accounts In A Project
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var projectServiceAccounts = Gcp.CloudAsset.GetResourcesSearchAll.Invoke(new()
        ///     {
        ///         Scope = "projects/my-project-id",
        ///         AssetTypes = new[]
        ///         {
        ///             "iam.googleapis.com/ServiceAccount",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetResourcesSearchAllResult> InvokeAsync(GetResourcesSearchAllArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResourcesSearchAllResult>("gcp:cloudasset/getResourcesSearchAll:getResourcesSearchAll", args ?? new GetResourcesSearchAllArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Searching For All Projects In An Org
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var projects = Gcp.CloudAsset.GetResourcesSearchAll.Invoke(new()
        ///     {
        ///         Scope = "organizations/0123456789",
        ///         AssetTypes = new[]
        ///         {
        ///             "cloudresourcemanager.googleapis.com/Project",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Searching For All Projects With CloudBuild API Enabled
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cloudBuildProjects = Gcp.CloudAsset.GetResourcesSearchAll.Invoke(new()
        ///     {
        ///         Scope = "organizations/0123456789",
        ///         AssetTypes = new[]
        ///         {
        ///             "serviceusage.googleapis.com/Service",
        ///         },
        ///         Query = "displayName:cloudbuild.googleapis.com AND state:ENABLED",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Searching For All Service Accounts In A Project
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var projectServiceAccounts = Gcp.CloudAsset.GetResourcesSearchAll.Invoke(new()
        ///     {
        ///         Scope = "projects/my-project-id",
        ///         AssetTypes = new[]
        ///         {
        ///             "iam.googleapis.com/ServiceAccount",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetResourcesSearchAllResult> Invoke(GetResourcesSearchAllInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResourcesSearchAllResult>("gcp:cloudasset/getResourcesSearchAll:getResourcesSearchAll", args ?? new GetResourcesSearchAllInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetResourcesSearchAllArgs : global::Pulumi.InvokeArgs
    {
        [Input("assetTypes")]
        private List<string>? _assetTypes;

        /// <summary>
        /// A list of asset types that this request searches for. If empty, it will search all the [supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types).
        /// </summary>
        public List<string> AssetTypes
        {
            get => _assetTypes ?? (_assetTypes = new List<string>());
            set => _assetTypes = value;
        }

        /// <summary>
        /// The query statement. See [how to construct a query](https://cloud.google.com/asset-inventory/docs/searching-resources#how_to_construct_a_query) for more information. If not specified or empty, it will search all the resources within the specified `scope` and `asset_types`.
        /// </summary>
        [Input("query")]
        public string? Query { get; set; }

        /// <summary>
        /// A scope can be a project, a folder, or an organization. The allowed value must be: organization number (such as "organizations/123"), folder number (such as "folders/1234"), project number (such as "projects/12345") or project id (such as "projects/abc")
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetResourcesSearchAllArgs()
        {
        }
        public static new GetResourcesSearchAllArgs Empty => new GetResourcesSearchAllArgs();
    }

    public sealed class GetResourcesSearchAllInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("assetTypes")]
        private InputList<string>? _assetTypes;

        /// <summary>
        /// A list of asset types that this request searches for. If empty, it will search all the [supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types).
        /// </summary>
        public InputList<string> AssetTypes
        {
            get => _assetTypes ?? (_assetTypes = new InputList<string>());
            set => _assetTypes = value;
        }

        /// <summary>
        /// The query statement. See [how to construct a query](https://cloud.google.com/asset-inventory/docs/searching-resources#how_to_construct_a_query) for more information. If not specified or empty, it will search all the resources within the specified `scope` and `asset_types`.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// A scope can be a project, a folder, or an organization. The allowed value must be: organization number (such as "organizations/123"), folder number (such as "folders/1234"), project number (such as "projects/12345") or project id (such as "projects/abc")
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetResourcesSearchAllInvokeArgs()
        {
        }
        public static new GetResourcesSearchAllInvokeArgs Empty => new GetResourcesSearchAllInvokeArgs();
    }


    [OutputType]
    public sealed class GetResourcesSearchAllResult
    {
        public readonly ImmutableArray<string> AssetTypes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Query;
        /// <summary>
        /// A list of search results based on provided inputs. Structure is defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetResourcesSearchAllResultResult> Results;
        public readonly string Scope;

        [OutputConstructor]
        private GetResourcesSearchAllResult(
            ImmutableArray<string> assetTypes,

            string id,

            string? query,

            ImmutableArray<Outputs.GetResourcesSearchAllResultResult> results,

            string scope)
        {
            AssetTypes = assetTypes;
            Id = id;
            Query = query;
            Results = results;
            Scope = scope;
        }
    }
}
