// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Beyondcorp
{
    /// <summary>
    /// A BeyondCorp AppGateway resource represents a BeyondCorp protected AppGateway to a remote application. It creates
    /// all the necessary GCP components needed for creating a BeyondCorp protected AppGateway. Multiple connectors can be
    /// authorised for a single AppGateway.
    /// 
    /// To get more information about AppGateway, see:
    /// 
    /// * [API documentation](https://cloud.google.com/beyondcorp/docs/reference/rest#rest-resource:-v1.projects.locations.appgateways)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/beyondcorp-enterprise/docs/enable-app-connector)
    /// 
    /// ## Example Usage
    /// ### Beyondcorp App Gateway Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var appGateway = new Gcp.Beyondcorp.AppGateway("appGateway", new()
    ///     {
    ///         HostType = "GCP_REGIONAL_MIG",
    ///         Region = "us-central1",
    ///         Type = "TCP_PROXY",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Beyondcorp App Gateway Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var appGateway = new Gcp.Beyondcorp.AppGateway("appGateway", new()
    ///     {
    ///         DisplayName = "some display name",
    ///         HostType = "GCP_REGIONAL_MIG",
    ///         Labels = 
    ///         {
    ///             { "bar", "baz" },
    ///             { "foo", "bar" },
    ///         },
    ///         Region = "us-central1",
    ///         Type = "TCP_PROXY",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// AppGateway can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:beyondcorp/appGateway:AppGateway default projects/{{project}}/locations/{{region}}/appGateways/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:beyondcorp/appGateway:AppGateway default {{project}}/{{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:beyondcorp/appGateway:AppGateway default {{region}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:beyondcorp/appGateway:AppGateway default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:beyondcorp/appGateway:AppGateway")]
    public partial class AppGateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of connections allocated for the Gateway.
        /// Structure is documented below.
        /// </summary>
        [Output("allocatedConnections")]
        public Output<ImmutableArray<Outputs.AppGatewayAllocatedConnection>> AllocatedConnections { get; private set; } = null!;

        /// <summary>
        /// An arbitrary user-provided name for the AppGateway.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The type of hosting used by the AppGateway.
        /// Default value is `HOST_TYPE_UNSPECIFIED`.
        /// Possible values are `HOST_TYPE_UNSPECIFIED` and `GCP_REGIONAL_MIG`.
        /// </summary>
        [Output("hostType")]
        public Output<string?> HostType { get; private set; } = null!;

        /// <summary>
        /// Resource labels to represent user provided metadata.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// ID of the AppGateway.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The region of the AppGateway.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// Represents the different states of a AppGateway.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The type of network connectivity used by the AppGateway.
        /// Default value is `TYPE_UNSPECIFIED`.
        /// Possible values are `TYPE_UNSPECIFIED` and `TCP_PROXY`.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// Server-defined URI for this resource.
        /// </summary>
        [Output("uri")]
        public Output<string> Uri { get; private set; } = null!;


        /// <summary>
        /// Create a AppGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppGateway(string name, AppGatewayArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:beyondcorp/appGateway:AppGateway", name, args ?? new AppGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppGateway(string name, Input<string> id, AppGatewayState? state = null, CustomResourceOptions? options = null)
            : base("gcp:beyondcorp/appGateway:AppGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppGateway Get(string name, Input<string> id, AppGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new AppGateway(name, id, state, options);
        }
    }

    public sealed class AppGatewayArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An arbitrary user-provided name for the AppGateway.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The type of hosting used by the AppGateway.
        /// Default value is `HOST_TYPE_UNSPECIFIED`.
        /// Possible values are `HOST_TYPE_UNSPECIFIED` and `GCP_REGIONAL_MIG`.
        /// </summary>
        [Input("hostType")]
        public Input<string>? HostType { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels to represent user provided metadata.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// ID of the AppGateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the AppGateway.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The type of network connectivity used by the AppGateway.
        /// Default value is `TYPE_UNSPECIFIED`.
        /// Possible values are `TYPE_UNSPECIFIED` and `TCP_PROXY`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AppGatewayArgs()
        {
        }
        public static new AppGatewayArgs Empty => new AppGatewayArgs();
    }

    public sealed class AppGatewayState : global::Pulumi.ResourceArgs
    {
        [Input("allocatedConnections")]
        private InputList<Inputs.AppGatewayAllocatedConnectionGetArgs>? _allocatedConnections;

        /// <summary>
        /// A list of connections allocated for the Gateway.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AppGatewayAllocatedConnectionGetArgs> AllocatedConnections
        {
            get => _allocatedConnections ?? (_allocatedConnections = new InputList<Inputs.AppGatewayAllocatedConnectionGetArgs>());
            set => _allocatedConnections = value;
        }

        /// <summary>
        /// An arbitrary user-provided name for the AppGateway.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The type of hosting used by the AppGateway.
        /// Default value is `HOST_TYPE_UNSPECIFIED`.
        /// Possible values are `HOST_TYPE_UNSPECIFIED` and `GCP_REGIONAL_MIG`.
        /// </summary>
        [Input("hostType")]
        public Input<string>? HostType { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels to represent user provided metadata.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// ID of the AppGateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region of the AppGateway.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Represents the different states of a AppGateway.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The type of network connectivity used by the AppGateway.
        /// Default value is `TYPE_UNSPECIFIED`.
        /// Possible values are `TYPE_UNSPECIFIED` and `TCP_PROXY`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Server-defined URI for this resource.
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public AppGatewayState()
        {
        }
        public static new AppGatewayState Empty => new AppGatewayState();
    }
}
