// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Tpu
{
    public static class GetTensorflowVersions
    {
        /// <summary>
        /// Get TensorFlow versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v1/projects.locations.tensorflowVersions).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var available = Output.Create(Gcp.Tpu.GetTensorflowVersions.InvokeAsync());
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Configure Basic TPU Node With Available Version
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var available = Output.Create(Gcp.Tpu.GetTensorflowVersions.InvokeAsync());
        ///         var tpu = new Gcp.Tpu.Node("tpu", new Gcp.Tpu.NodeArgs
        ///         {
        ///             Zone = "us-central1-b",
        ///             AcceleratorType = "v3-8",
        ///             TensorflowVersion = available.Apply(available =&gt; available.Versions?[0]),
        ///             CidrBlock = "10.2.0.0/29",
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTensorflowVersionsResult> InvokeAsync(GetTensorflowVersionsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTensorflowVersionsResult>("gcp:tpu/getTensorflowVersions:getTensorflowVersions", args ?? new GetTensorflowVersionsArgs(), options.WithVersion());
    }


    public sealed class GetTensorflowVersionsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The project to list versions for. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The zone to list versions for. If it
        /// is not provided, the provider zone is used.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetTensorflowVersionsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTensorflowVersionsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Project;
        /// <summary>
        /// The list of TensorFlow versions available for the given project and zone.
        /// </summary>
        public readonly ImmutableArray<string> Versions;
        public readonly string Zone;

        [OutputConstructor]
        private GetTensorflowVersionsResult(
            string id,

            string project,

            ImmutableArray<string> versions,

            string zone)
        {
            Id = id;
            Project = project;
            Versions = versions;
            Zone = zone;
        }
    }
}
