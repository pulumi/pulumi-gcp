// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Tpu
{
    /// <summary>
    /// A Cloud TPU Queued Resource.
    /// 
    /// To get more information about QueuedResource, see:
    /// 
    /// * [API documentation](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.queuedResources)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/tpu/docs/)
    /// 
    /// ## Example Usage
    /// 
    /// ### Tpu V2 Queued Resource Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var qr = new Gcp.Tpu.V2QueuedResource("qr", new()
    ///     {
    ///         Name = "test-qr",
    ///         Zone = "us-central1-c",
    ///         Project = "my-project-name",
    ///         Tpu = new Gcp.Tpu.Inputs.V2QueuedResourceTpuArgs
    ///         {
    ///             NodeSpecs = new[]
    ///             {
    ///                 new Gcp.Tpu.Inputs.V2QueuedResourceTpuNodeSpecArgs
    ///                 {
    ///                     Parent = "projects/my-project-name/locations/us-central1-c",
    ///                     NodeId = "test-tpu",
    ///                     Node = new Gcp.Tpu.Inputs.V2QueuedResourceTpuNodeSpecNodeArgs
    ///                     {
    ///                         RuntimeVersion = "tpu-vm-tf-2.13.0",
    ///                         AcceleratorType = "v2-8",
    ///                         Description = "Text description of the TPU.",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Tpu V2 Queued Resource Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Name = "tpu-net",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var subnet = new Gcp.Compute.Subnetwork("subnet", new()
    ///     {
    ///         Name = "tpu-subnet",
    ///         IpCidrRange = "10.0.0.0/16",
    ///         Region = "us-central1",
    ///         Network = network.Id,
    ///     });
    /// 
    ///     var qr = new Gcp.Tpu.V2QueuedResource("qr", new()
    ///     {
    ///         Name = "test-qr",
    ///         Zone = "us-central1-c",
    ///         Project = "my-project-name",
    ///         Tpu = new Gcp.Tpu.Inputs.V2QueuedResourceTpuArgs
    ///         {
    ///             NodeSpecs = new[]
    ///             {
    ///                 new Gcp.Tpu.Inputs.V2QueuedResourceTpuNodeSpecArgs
    ///                 {
    ///                     Parent = "projects/my-project-name/locations/us-central1-c",
    ///                     NodeId = "test-tpu",
    ///                     Node = new Gcp.Tpu.Inputs.V2QueuedResourceTpuNodeSpecNodeArgs
    ///                     {
    ///                         RuntimeVersion = "tpu-vm-tf-2.13.0",
    ///                         AcceleratorType = "v2-8",
    ///                         Description = "Text description of the TPU.",
    ///                         NetworkConfig = new Gcp.Tpu.Inputs.V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs
    ///                         {
    ///                             CanIpForward = true,
    ///                             EnableExternalIps = true,
    ///                             Network = network.Id,
    ///                             Subnetwork = subnet.Id,
    ///                             QueueCount = 32,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// QueuedResource can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}`
    /// 
    /// * `{{project}}/{{zone}}/{{name}}`
    /// 
    /// * `{{zone}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, QueuedResource can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default {{project}}/{{zone}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default {{zone}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:tpu/v2QueuedResource:V2QueuedResource")]
    public partial class V2QueuedResource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The immutable name of the Queued Resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Defines a TPU resource.
        /// Structure is documented below.
        /// </summary>
        [Output("tpu")]
        public Output<Outputs.V2QueuedResourceTpu?> Tpu { get; private set; } = null!;

        /// <summary>
        /// The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a V2QueuedResource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public V2QueuedResource(string name, V2QueuedResourceArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:tpu/v2QueuedResource:V2QueuedResource", name, args ?? new V2QueuedResourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private V2QueuedResource(string name, Input<string> id, V2QueuedResourceState? state = null, CustomResourceOptions? options = null)
            : base("gcp:tpu/v2QueuedResource:V2QueuedResource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing V2QueuedResource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static V2QueuedResource Get(string name, Input<string> id, V2QueuedResourceState? state = null, CustomResourceOptions? options = null)
        {
            return new V2QueuedResource(name, id, state, options);
        }
    }

    public sealed class V2QueuedResourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The immutable name of the Queued Resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Defines a TPU resource.
        /// Structure is documented below.
        /// </summary>
        [Input("tpu")]
        public Input<Inputs.V2QueuedResourceTpuArgs>? Tpu { get; set; }

        /// <summary>
        /// The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public V2QueuedResourceArgs()
        {
        }
        public static new V2QueuedResourceArgs Empty => new V2QueuedResourceArgs();
    }

    public sealed class V2QueuedResourceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The immutable name of the Queued Resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Defines a TPU resource.
        /// Structure is documented below.
        /// </summary>
        [Input("tpu")]
        public Input<Inputs.V2QueuedResourceTpuGetArgs>? Tpu { get; set; }

        /// <summary>
        /// The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public V2QueuedResourceState()
        {
        }
        public static new V2QueuedResourceState Empty => new V2QueuedResourceState();
    }
}
