// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Tpu
{
    public static class GetV2AcceleratorTypes
    {
        /// <summary>
        /// Get accelerator types available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.acceleratorTypes).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var available = Gcp.Tpu.GetV2AcceleratorTypes.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Configure Basic TPU VM With Available Type
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var availableV2AcceleratorTypes = Gcp.Tpu.GetV2AcceleratorTypes.Invoke();
        /// 
        ///     var availableV2RuntimeVersions = Gcp.Tpu.GetV2RuntimeVersions.Invoke();
        /// 
        ///     var tpu = new Gcp.Tpu.V2Vm("tpu", new()
        ///     {
        ///         Zone = "us-central1-b",
        ///         RuntimeVersion = availableV2RuntimeVersions.Apply(getV2RuntimeVersionsResult =&gt; getV2RuntimeVersionsResult.Versions[0]),
        ///         AcceleratorType = availableV2AcceleratorTypes.Apply(getV2AcceleratorTypesResult =&gt; getV2AcceleratorTypesResult.Types[0]),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetV2AcceleratorTypesResult> InvokeAsync(GetV2AcceleratorTypesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetV2AcceleratorTypesResult>("gcp:tpu/getV2AcceleratorTypes:getV2AcceleratorTypes", args ?? new GetV2AcceleratorTypesArgs(), options.WithDefaults());

        /// <summary>
        /// Get accelerator types available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.acceleratorTypes).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var available = Gcp.Tpu.GetV2AcceleratorTypes.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Configure Basic TPU VM With Available Type
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var availableV2AcceleratorTypes = Gcp.Tpu.GetV2AcceleratorTypes.Invoke();
        /// 
        ///     var availableV2RuntimeVersions = Gcp.Tpu.GetV2RuntimeVersions.Invoke();
        /// 
        ///     var tpu = new Gcp.Tpu.V2Vm("tpu", new()
        ///     {
        ///         Zone = "us-central1-b",
        ///         RuntimeVersion = availableV2RuntimeVersions.Apply(getV2RuntimeVersionsResult =&gt; getV2RuntimeVersionsResult.Versions[0]),
        ///         AcceleratorType = availableV2AcceleratorTypes.Apply(getV2AcceleratorTypesResult =&gt; getV2AcceleratorTypesResult.Types[0]),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetV2AcceleratorTypesResult> Invoke(GetV2AcceleratorTypesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetV2AcceleratorTypesResult>("gcp:tpu/getV2AcceleratorTypes:getV2AcceleratorTypes", args ?? new GetV2AcceleratorTypesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetV2AcceleratorTypesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The project to list types for. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The zone to list types for. If it
        /// is not provided, the provider zone is used.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetV2AcceleratorTypesArgs()
        {
        }
        public static new GetV2AcceleratorTypesArgs Empty => new GetV2AcceleratorTypesArgs();
    }

    public sealed class GetV2AcceleratorTypesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The project to list types for. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The zone to list types for. If it
        /// is not provided, the provider zone is used.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetV2AcceleratorTypesInvokeArgs()
        {
        }
        public static new GetV2AcceleratorTypesInvokeArgs Empty => new GetV2AcceleratorTypesInvokeArgs();
    }


    [OutputType]
    public sealed class GetV2AcceleratorTypesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Project;
        /// <summary>
        /// The list of accelerator types available for the given project and zone.
        /// </summary>
        public readonly ImmutableArray<string> Types;
        public readonly string Zone;

        [OutputConstructor]
        private GetV2AcceleratorTypesResult(
            string id,

            string project,

            ImmutableArray<string> types,

            string zone)
        {
            Id = id;
            Project = project;
            Types = types;
            Zone = zone;
        }
    }
}
