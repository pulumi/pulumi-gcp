// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ArtifactRegistry
{
    public static class GetNpmPackage
    {
        /// <summary>
        /// This data source fetches information from a provided Artifact Registry repository, based on a the latest version of the package and optional version.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var npmRepo = new Gcp.ArtifactRegistry.Repository("npm_repo", new()
        ///     {
        ///         Location = "us-central1",
        ///         RepositoryId = "my-npm-repo",
        ///         Format = "NPM",
        ///     });
        /// 
        ///     var latest = Gcp.ArtifactRegistry.GetNpmPackage.Invoke(new()
        ///     {
        ///         Location = npmRepo.Location,
        ///         RepositoryId = npmRepo.RepositoryId,
        ///         PackageName = "example-pkg",
        ///     });
        /// 
        ///     var withVersion = Gcp.ArtifactRegistry.GetNpmPackage.Invoke(new()
        ///     {
        ///         Location = npmRepo.Location,
        ///         RepositoryId = npmRepo.RepositoryId,
        ///         PackageName = "example-pkg:1.0.0",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNpmPackageResult> InvokeAsync(GetNpmPackageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNpmPackageResult>("gcp:artifactregistry/getNpmPackage:getNpmPackage", args ?? new GetNpmPackageArgs(), options.WithDefaults());

        /// <summary>
        /// This data source fetches information from a provided Artifact Registry repository, based on a the latest version of the package and optional version.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var npmRepo = new Gcp.ArtifactRegistry.Repository("npm_repo", new()
        ///     {
        ///         Location = "us-central1",
        ///         RepositoryId = "my-npm-repo",
        ///         Format = "NPM",
        ///     });
        /// 
        ///     var latest = Gcp.ArtifactRegistry.GetNpmPackage.Invoke(new()
        ///     {
        ///         Location = npmRepo.Location,
        ///         RepositoryId = npmRepo.RepositoryId,
        ///         PackageName = "example-pkg",
        ///     });
        /// 
        ///     var withVersion = Gcp.ArtifactRegistry.GetNpmPackage.Invoke(new()
        ///     {
        ///         Location = npmRepo.Location,
        ///         RepositoryId = npmRepo.RepositoryId,
        ///         PackageName = "example-pkg:1.0.0",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNpmPackageResult> Invoke(GetNpmPackageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNpmPackageResult>("gcp:artifactregistry/getNpmPackage:getNpmPackage", args ?? new GetNpmPackageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source fetches information from a provided Artifact Registry repository, based on a the latest version of the package and optional version.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var npmRepo = new Gcp.ArtifactRegistry.Repository("npm_repo", new()
        ///     {
        ///         Location = "us-central1",
        ///         RepositoryId = "my-npm-repo",
        ///         Format = "NPM",
        ///     });
        /// 
        ///     var latest = Gcp.ArtifactRegistry.GetNpmPackage.Invoke(new()
        ///     {
        ///         Location = npmRepo.Location,
        ///         RepositoryId = npmRepo.RepositoryId,
        ///         PackageName = "example-pkg",
        ///     });
        /// 
        ///     var withVersion = Gcp.ArtifactRegistry.GetNpmPackage.Invoke(new()
        ///     {
        ///         Location = npmRepo.Location,
        ///         RepositoryId = npmRepo.RepositoryId,
        ///         PackageName = "example-pkg:1.0.0",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNpmPackageResult> Invoke(GetNpmPackageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNpmPackageResult>("gcp:artifactregistry/getNpmPackage:getNpmPackage", args ?? new GetNpmPackageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNpmPackageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the Artifact Registry repository.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The name of the package to fetch. Can optionally include a specific version (e.g., `my_pkg:1.2.3`). If no version is provided, the latest version is used.
        /// </summary>
        [Input("packageName", required: true)]
        public string PackageName { get; set; } = null!;

        /// <summary>
        /// The ID of the project that owns the repository. If not provided, the provider-level project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The ID of the repository containing the NPM package.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetNpmPackageArgs()
        {
        }
        public static new GetNpmPackageArgs Empty => new GetNpmPackageArgs();
    }

    public sealed class GetNpmPackageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the Artifact Registry repository.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of the package to fetch. Can optionally include a specific version (e.g., `my_pkg:1.2.3`). If no version is provided, the latest version is used.
        /// </summary>
        [Input("packageName", required: true)]
        public Input<string> PackageName { get; set; } = null!;

        /// <summary>
        /// The ID of the project that owns the repository. If not provided, the provider-level project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The ID of the repository containing the NPM package.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetNpmPackageInvokeArgs()
        {
        }
        public static new GetNpmPackageInvokeArgs Empty => new GetNpmPackageInvokeArgs();
    }


    [OutputType]
    public sealed class GetNpmPackageResult
    {
        /// <summary>
        /// The time the package was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        /// <summary>
        /// The fully qualified name of the fetched package. Format:  
        /// ```
        /// projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/npmPackages/{{package}}:{{version}}
        /// ```
        /// </summary>
        public readonly string Name;
        public readonly string PackageName;
        public readonly string? Project;
        public readonly string RepositoryId;
        /// <summary>
        /// A list of all Tags attached to this package.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The time the package was last updated.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// The version of the NPM package.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetNpmPackageResult(
            string createTime,

            string id,

            string location,

            string name,

            string packageName,

            string? project,

            string repositoryId,

            ImmutableArray<string> tags,

            string updateTime,

            string version)
        {
            CreateTime = createTime;
            Id = id;
            Location = location;
            Name = name;
            PackageName = packageName;
            Project = project;
            RepositoryId = repositoryId;
            Tags = tags;
            UpdateTime = updateTime;
            Version = version;
        }
    }
}
