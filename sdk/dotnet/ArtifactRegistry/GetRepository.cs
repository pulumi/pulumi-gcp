// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ArtifactRegistry
{
    public static class GetRepository
    {
        /// <summary>
        /// Get information about a Google Artifact Registry Repository. For more information see
        /// the [official documentation](https://cloud.google.com/artifact-registry/docs/)
        /// and [API](https://cloud.google.com/artifact-registry/docs/apis).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_repo = Gcp.ArtifactRegistry.GetRepository.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///         RepositoryId = "my-repository",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRepositoryResult> InvokeAsync(GetRepositoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryResult>("gcp:artifactregistry/getRepository:getRepository", args ?? new GetRepositoryArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Google Artifact Registry Repository. For more information see
        /// the [official documentation](https://cloud.google.com/artifact-registry/docs/)
        /// and [API](https://cloud.google.com/artifact-registry/docs/apis).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_repo = Gcp.ArtifactRegistry.GetRepository.Invoke(new()
        ///     {
        ///         Location = "us-central1",
        ///         RepositoryId = "my-repository",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRepositoryResult> Invoke(GetRepositoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryResult>("gcp:artifactregistry/getRepository:getRepository", args ?? new GetRepositoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the artifact registry repository. eg us-central1
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The last part of the repository name.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetRepositoryArgs()
        {
        }
        public static new GetRepositoryArgs Empty => new GetRepositoryArgs();
    }

    public sealed class GetRepositoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the artifact registry repository. eg us-central1
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The project in which the resource belongs. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The last part of the repository name.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetRepositoryInvokeArgs()
        {
        }
        public static new GetRepositoryInvokeArgs Empty => new GetRepositoryInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryResult
    {
        public readonly string CreateTime;
        public readonly string Description;
        public readonly string Format;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KmsKeyName;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Location;
        public readonly ImmutableArray<Outputs.GetRepositoryMavenConfigResult> MavenConfigs;
        public readonly string Name;
        public readonly string? Project;
        public readonly string RepositoryId;
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetRepositoryResult(
            string createTime,

            string description,

            string format,

            string id,

            string kmsKeyName,

            ImmutableDictionary<string, string> labels,

            string location,

            ImmutableArray<Outputs.GetRepositoryMavenConfigResult> mavenConfigs,

            string name,

            string? project,

            string repositoryId,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            Format = format;
            Id = id;
            KmsKeyName = kmsKeyName;
            Labels = labels;
            Location = location;
            MavenConfigs = mavenConfigs;
            Name = name;
            Project = project;
            RepositoryId = repositoryId;
            UpdateTime = updateTime;
        }
    }
}
