// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ArtifactRegistry
{
    public static class GetLocations
    {
        /// <summary>
        /// Get Artifact Registry locations available for a project. 
        /// 
        /// To get more information about Artifact Registry, see:
        /// 
        /// * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations/list)
        /// * How-to Guides
        ///     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
        ///     
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var available = Gcp.ArtifactRegistry.GetLocations.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Multi-Regional Artifact Registry Deployment
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var available = Gcp.ArtifactRegistry.GetLocations.Invoke();
        /// 
        ///     var repoOne = new Gcp.ArtifactRegistry.Repository("repo_one", new()
        ///     {
        ///         Location = available.Apply(getLocationsResult =&gt; getLocationsResult.Locations[0]),
        ///         RepositoryId = "repo-one",
        ///         Format = "apt",
        ///     });
        /// 
        ///     var repoTwo = new Gcp.ArtifactRegistry.Repository("repo_two", new()
        ///     {
        ///         Location = available.Apply(getLocationsResult =&gt; getLocationsResult.Locations[1]),
        ///         RepositoryId = "repo-two",
        ///         Format = "apt",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLocationsResult> InvokeAsync(GetLocationsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLocationsResult>("gcp:artifactregistry/getLocations:getLocations", args ?? new GetLocationsArgs(), options.WithDefaults());

        /// <summary>
        /// Get Artifact Registry locations available for a project. 
        /// 
        /// To get more information about Artifact Registry, see:
        /// 
        /// * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations/list)
        /// * How-to Guides
        ///     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
        ///     
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var available = Gcp.ArtifactRegistry.GetLocations.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Multi-Regional Artifact Registry Deployment
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var available = Gcp.ArtifactRegistry.GetLocations.Invoke();
        /// 
        ///     var repoOne = new Gcp.ArtifactRegistry.Repository("repo_one", new()
        ///     {
        ///         Location = available.Apply(getLocationsResult =&gt; getLocationsResult.Locations[0]),
        ///         RepositoryId = "repo-one",
        ///         Format = "apt",
        ///     });
        /// 
        ///     var repoTwo = new Gcp.ArtifactRegistry.Repository("repo_two", new()
        ///     {
        ///         Location = available.Apply(getLocationsResult =&gt; getLocationsResult.Locations[1]),
        ///         RepositoryId = "repo-two",
        ///         Format = "apt",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLocationsResult> Invoke(GetLocationsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocationsResult>("gcp:artifactregistry/getLocations:getLocations", args ?? new GetLocationsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get Artifact Registry locations available for a project. 
        /// 
        /// To get more information about Artifact Registry, see:
        /// 
        /// * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations/list)
        /// * How-to Guides
        ///     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
        ///     
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var available = Gcp.ArtifactRegistry.GetLocations.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Multi-Regional Artifact Registry Deployment
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var available = Gcp.ArtifactRegistry.GetLocations.Invoke();
        /// 
        ///     var repoOne = new Gcp.ArtifactRegistry.Repository("repo_one", new()
        ///     {
        ///         Location = available.Apply(getLocationsResult =&gt; getLocationsResult.Locations[0]),
        ///         RepositoryId = "repo-one",
        ///         Format = "apt",
        ///     });
        /// 
        ///     var repoTwo = new Gcp.ArtifactRegistry.Repository("repo_two", new()
        ///     {
        ///         Location = available.Apply(getLocationsResult =&gt; getLocationsResult.Locations[1]),
        ///         RepositoryId = "repo-two",
        ///         Format = "apt",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLocationsResult> Invoke(GetLocationsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocationsResult>("gcp:artifactregistry/getLocations:getLocations", args ?? new GetLocationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLocationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The project to list versions for. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        public GetLocationsArgs()
        {
        }
        public static new GetLocationsArgs Empty => new GetLocationsArgs();
    }

    public sealed class GetLocationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The project to list versions for. If it
        /// is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetLocationsInvokeArgs()
        {
        }
        public static new GetLocationsInvokeArgs Empty => new GetLocationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetLocationsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of Artifact Registry locations available for the given project.
        /// </summary>
        public readonly ImmutableArray<string> Locations;
        public readonly string Project;

        [OutputConstructor]
        private GetLocationsResult(
            string id,

            ImmutableArray<string> locations,

            string project)
        {
            Id = id;
            Locations = locations;
            Project = project;
        }
    }
}
