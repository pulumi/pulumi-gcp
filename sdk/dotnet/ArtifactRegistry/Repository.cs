// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ArtifactRegistry
{
    /// <summary>
    /// A repository for storing artifacts
    /// 
    /// To get more information about Repository, see:
    /// 
    /// * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
    /// 
    /// ## Example Usage
    /// ### Artifact Registry Repository Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    ///     {
    ///         Description = "example docker repository",
    ///         Format = "DOCKER",
    ///         Location = "us-central1",
    ///         RepositoryId = "my-repository",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Artifact Registry Repository Docker
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    ///     {
    ///         Description = "example docker repository",
    ///         DockerConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryDockerConfigArgs
    ///         {
    ///             ImmutableTags = true,
    ///         },
    ///         Format = "DOCKER",
    ///         Location = "us-central1",
    ///         RepositoryId = "my-repository",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Artifact Registry Repository Cmek
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var cryptoKey = new Gcp.Kms.CryptoKeyIAMMember("cryptoKey", new()
    ///     {
    ///         CryptoKeyId = "kms-key",
    ///         Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-artifactregistry.iam.gserviceaccount.com",
    ///     });
    /// 
    ///     var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    ///     {
    ///         Location = "us-central1",
    ///         RepositoryId = "my-repository",
    ///         Description = "example docker repository with cmek",
    ///         Format = "DOCKER",
    ///         KmsKeyName = "kms-key",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             cryptoKey,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Artifact Registry Repository Virtual
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_repo_upstream = new Gcp.ArtifactRegistry.Repository("my-repo-upstream", new()
    ///     {
    ///         Location = "us-central1",
    ///         RepositoryId = "my-repository-upstream",
    ///         Description = "example docker repository (upstream source)",
    ///         Format = "DOCKER",
    ///     });
    /// 
    ///     var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    ///     {
    ///         Location = "us-central1",
    ///         RepositoryId = "my-repository",
    ///         Description = "example virtual docker repository",
    ///         Format = "DOCKER",
    ///         Mode = "VIRTUAL_REPOSITORY",
    ///         VirtualRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryVirtualRepositoryConfigArgs
    ///         {
    ///             UpstreamPolicies = new[]
    ///             {
    ///                 new Gcp.ArtifactRegistry.Inputs.RepositoryVirtualRepositoryConfigUpstreamPolicyArgs
    ///                 {
    ///                     Id = "my-repository-upstream",
    ///                     Repository = my_repo_upstream.Id,
    ///                     Priority = 1,
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[] {},
    ///     });
    /// 
    /// });
    /// ```
    /// ### Artifact Registry Repository Remote
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    ///     {
    ///         Description = "example remote docker repository",
    ///         Format = "DOCKER",
    ///         Location = "us-central1",
    ///         Mode = "REMOTE_REPOSITORY",
    ///         RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
    ///         {
    ///             Description = "docker hub",
    ///             DockerRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigDockerRepositoryArgs
    ///             {
    ///                 PublicRepository = "DOCKER_HUB",
    ///             },
    ///         },
    ///         RepositoryId = "my-repository",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Artifact Registry Repository Remote Apt
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    ///     {
    ///         Description = "example remote apt repository",
    ///         Format = "APT",
    ///         Location = "us-central1",
    ///         Mode = "REMOTE_REPOSITORY",
    ///         RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
    ///         {
    ///             AptRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigAptRepositoryArgs
    ///             {
    ///                 PublicRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs
    ///                 {
    ///                     RepositoryBase = "DEBIAN",
    ///                     RepositoryPath = "debian/dists/buster",
    ///                 },
    ///             },
    ///             Description = "Debian buster remote repository",
    ///         },
    ///         RepositoryId = "debian-buster",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Artifact Registry Repository Remote Yum
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    ///     {
    ///         Description = "example remote yum repository",
    ///         Format = "YUM",
    ///         Location = "us-central1",
    ///         Mode = "REMOTE_REPOSITORY",
    ///         RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
    ///         {
    ///             Description = "Centos 8 remote repository",
    ///             YumRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigYumRepositoryArgs
    ///             {
    ///                 PublicRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs
    ///                 {
    ///                     RepositoryBase = "CENTOS",
    ///                     RepositoryPath = "8-stream/BaseOs/x86_64/os",
    ///                 },
    ///             },
    ///         },
    ///         RepositoryId = "centos-8",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Artifact Registry Repository Cleanup
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    ///     {
    ///         Location = "us-central1",
    ///         RepositoryId = "my-repository",
    ///         Description = "example docker repository with cleanup policies",
    ///         Format = "DOCKER",
    ///         CleanupPolicyDryRun = false,
    ///         CleanupPolicies = new[]
    ///         {
    ///             new Gcp.ArtifactRegistry.Inputs.RepositoryCleanupPolicyArgs
    ///             {
    ///                 Id = "delete-prerelease",
    ///                 Action = "DELETE",
    ///                 Condition = new Gcp.ArtifactRegistry.Inputs.RepositoryCleanupPolicyConditionArgs
    ///                 {
    ///                     TagState = "TAGGED",
    ///                     TagPrefixes = new[]
    ///                     {
    ///                         "alpha",
    ///                         "v0",
    ///                     },
    ///                     OlderThan = "2592000s",
    ///                 },
    ///             },
    ///             new Gcp.ArtifactRegistry.Inputs.RepositoryCleanupPolicyArgs
    ///             {
    ///                 Id = "keep-tagged-release",
    ///                 Action = "KEEP",
    ///                 Condition = new Gcp.ArtifactRegistry.Inputs.RepositoryCleanupPolicyConditionArgs
    ///                 {
    ///                     TagState = "TAGGED",
    ///                     TagPrefixes = new[]
    ///                     {
    ///                         "release",
    ///                     },
    ///                     PackageNamePrefixes = new[]
    ///                     {
    ///                         "webapp",
    ///                         "mobile",
    ///                     },
    ///                 },
    ///             },
    ///             new Gcp.ArtifactRegistry.Inputs.RepositoryCleanupPolicyArgs
    ///             {
    ///                 Id = "keep-minimum-versions",
    ///                 Action = "KEEP",
    ///                 MostRecentVersions = new Gcp.ArtifactRegistry.Inputs.RepositoryCleanupPolicyMostRecentVersionsArgs
    ///                 {
    ///                     PackageNamePrefixes = new[]
    ///                     {
    ///                         "webapp",
    ///                         "mobile",
    ///                         "sandbox",
    ///                     },
    ///                     KeepCount = 5,
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Repository can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:artifactregistry/repository:Repository default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:artifactregistry/repository:Repository default {{project}}/{{location}}/{{repository_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:artifactregistry/repository:Repository default {{location}}/{{repository_id}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:artifactregistry/repository:Repository default {{repository_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:artifactregistry/repository:Repository")]
    public partial class Repository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically
        /// deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be
        /// under 128 characters in length.
        /// </summary>
        [Output("cleanupPolicies")]
        public Output<ImmutableArray<Outputs.RepositoryCleanupPolicy>> CleanupPolicies { get; private set; } = null!;

        /// <summary>
        /// If true, the cleanup pipeline is prevented from deleting versions in this repository.
        /// </summary>
        [Output("cleanupPolicyDryRun")]
        public Output<bool?> CleanupPolicyDryRun { get; private set; } = null!;

        /// <summary>
        /// The time when the repository was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The user-provided description of the repository.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Docker repository config contains repository level configuration for the repositories of docker type.
        /// Structure is documented below.
        /// </summary>
        [Output("dockerConfig")]
        public Output<Outputs.RepositoryDockerConfig?> DockerConfig { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
        /// clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The format of packages that are stored in the repository. Supported formats
        /// can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
        /// You can only create alpha formats if you are a member of the
        /// [alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("format")]
        public Output<string> Format { get; private set; } = null!;

        /// <summary>
        /// The Cloud KMS resource name of the customer managed encryption key that’s
        /// used to encrypt the contents of the Repository. Has the form:
        /// `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
        /// This value may not be changed after the Repository has been created.
        /// </summary>
        [Output("kmsKeyName")]
        public Output<string?> KmsKeyName { get; private set; } = null!;

        /// <summary>
        /// Labels with user-defined metadata.
        /// This field may contain up to 64 entries. Label keys and values may be no
        /// longer than 63 characters. Label keys must begin with a lowercase letter
        /// and may only contain lowercase letters, numeric characters, underscores,
        /// and dashes.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the location this repository is located in.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// MavenRepositoryConfig is maven related repository details.
        /// Provides additional configuration details for repositories of the maven
        /// format type.
        /// Structure is documented below.
        /// </summary>
        [Output("mavenConfig")]
        public Output<Outputs.RepositoryMavenConfig?> MavenConfig { get; private set; } = null!;

        /// <summary>
        /// The mode configures the repository to serve artifacts from different sources.
        /// Default value is `STANDARD_REPOSITORY`.
        /// Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// The name of the repository, for example:
        /// "repo1"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Configuration specific for a Remote Repository.
        /// Structure is documented below.
        /// </summary>
        [Output("remoteRepositoryConfig")]
        public Output<Outputs.RepositoryRemoteRepositoryConfig?> RemoteRepositoryConfig { get; private set; } = null!;

        /// <summary>
        /// The last part of the repository name, for example:
        /// "repo1"
        /// </summary>
        [Output("repositoryId")]
        public Output<string> RepositoryId { get; private set; } = null!;

        /// <summary>
        /// The time when the repository was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Configuration specific for a Virtual Repository.
        /// Structure is documented below.
        /// </summary>
        [Output("virtualRepositoryConfig")]
        public Output<Outputs.RepositoryVirtualRepositoryConfig?> VirtualRepositoryConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Repository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Repository(string name, RepositoryArgs args, CustomResourceOptions? options = null)
            : base("gcp:artifactregistry/repository:Repository", name, args ?? new RepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Repository(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
            : base("gcp:artifactregistry/repository:Repository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Repository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Repository Get(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new Repository(name, id, state, options);
        }
    }

    public sealed class RepositoryArgs : global::Pulumi.ResourceArgs
    {
        [Input("cleanupPolicies")]
        private InputList<Inputs.RepositoryCleanupPolicyArgs>? _cleanupPolicies;

        /// <summary>
        /// Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically
        /// deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be
        /// under 128 characters in length.
        /// </summary>
        public InputList<Inputs.RepositoryCleanupPolicyArgs> CleanupPolicies
        {
            get => _cleanupPolicies ?? (_cleanupPolicies = new InputList<Inputs.RepositoryCleanupPolicyArgs>());
            set => _cleanupPolicies = value;
        }

        /// <summary>
        /// If true, the cleanup pipeline is prevented from deleting versions in this repository.
        /// </summary>
        [Input("cleanupPolicyDryRun")]
        public Input<bool>? CleanupPolicyDryRun { get; set; }

        /// <summary>
        /// The user-provided description of the repository.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Docker repository config contains repository level configuration for the repositories of docker type.
        /// Structure is documented below.
        /// </summary>
        [Input("dockerConfig")]
        public Input<Inputs.RepositoryDockerConfigArgs>? DockerConfig { get; set; }

        /// <summary>
        /// The format of packages that are stored in the repository. Supported formats
        /// can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
        /// You can only create alpha formats if you are a member of the
        /// [alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("format", required: true)]
        public Input<string> Format { get; set; } = null!;

        /// <summary>
        /// The Cloud KMS resource name of the customer managed encryption key that’s
        /// used to encrypt the contents of the Repository. Has the form:
        /// `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
        /// This value may not be changed after the Repository has been created.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels with user-defined metadata.
        /// This field may contain up to 64 entries. Label keys and values may be no
        /// longer than 63 characters. Label keys must begin with a lowercase letter
        /// and may only contain lowercase letters, numeric characters, underscores,
        /// and dashes.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the location this repository is located in.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// MavenRepositoryConfig is maven related repository details.
        /// Provides additional configuration details for repositories of the maven
        /// format type.
        /// Structure is documented below.
        /// </summary>
        [Input("mavenConfig")]
        public Input<Inputs.RepositoryMavenConfigArgs>? MavenConfig { get; set; }

        /// <summary>
        /// The mode configures the repository to serve artifacts from different sources.
        /// Default value is `STANDARD_REPOSITORY`.
        /// Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Configuration specific for a Remote Repository.
        /// Structure is documented below.
        /// </summary>
        [Input("remoteRepositoryConfig")]
        public Input<Inputs.RepositoryRemoteRepositoryConfigArgs>? RemoteRepositoryConfig { get; set; }

        /// <summary>
        /// The last part of the repository name, for example:
        /// "repo1"
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        /// <summary>
        /// Configuration specific for a Virtual Repository.
        /// Structure is documented below.
        /// </summary>
        [Input("virtualRepositoryConfig")]
        public Input<Inputs.RepositoryVirtualRepositoryConfigArgs>? VirtualRepositoryConfig { get; set; }

        public RepositoryArgs()
        {
        }
        public static new RepositoryArgs Empty => new RepositoryArgs();
    }

    public sealed class RepositoryState : global::Pulumi.ResourceArgs
    {
        [Input("cleanupPolicies")]
        private InputList<Inputs.RepositoryCleanupPolicyGetArgs>? _cleanupPolicies;

        /// <summary>
        /// Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically
        /// deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be
        /// under 128 characters in length.
        /// </summary>
        public InputList<Inputs.RepositoryCleanupPolicyGetArgs> CleanupPolicies
        {
            get => _cleanupPolicies ?? (_cleanupPolicies = new InputList<Inputs.RepositoryCleanupPolicyGetArgs>());
            set => _cleanupPolicies = value;
        }

        /// <summary>
        /// If true, the cleanup pipeline is prevented from deleting versions in this repository.
        /// </summary>
        [Input("cleanupPolicyDryRun")]
        public Input<bool>? CleanupPolicyDryRun { get; set; }

        /// <summary>
        /// The time when the repository was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The user-provided description of the repository.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Docker repository config contains repository level configuration for the repositories of docker type.
        /// Structure is documented below.
        /// </summary>
        [Input("dockerConfig")]
        public Input<Inputs.RepositoryDockerConfigGetArgs>? DockerConfig { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
        /// clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set => _effectiveLabels = value;
        }

        /// <summary>
        /// The format of packages that are stored in the repository. Supported formats
        /// can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
        /// You can only create alpha formats if you are a member of the
        /// [alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The Cloud KMS resource name of the customer managed encryption key that’s
        /// used to encrypt the contents of the Repository. Has the form:
        /// `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
        /// This value may not be changed after the Repository has been created.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels with user-defined metadata.
        /// This field may contain up to 64 entries. Label keys and values may be no
        /// longer than 63 characters. Label keys must begin with a lowercase letter
        /// and may only contain lowercase letters, numeric characters, underscores,
        /// and dashes.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the location this repository is located in.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// MavenRepositoryConfig is maven related repository details.
        /// Provides additional configuration details for repositories of the maven
        /// format type.
        /// Structure is documented below.
        /// </summary>
        [Input("mavenConfig")]
        public Input<Inputs.RepositoryMavenConfigGetArgs>? MavenConfig { get; set; }

        /// <summary>
        /// The mode configures the repository to serve artifacts from different sources.
        /// Default value is `STANDARD_REPOSITORY`.
        /// Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name of the repository, for example:
        /// "repo1"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set => _pulumiLabels = value;
        }

        /// <summary>
        /// Configuration specific for a Remote Repository.
        /// Structure is documented below.
        /// </summary>
        [Input("remoteRepositoryConfig")]
        public Input<Inputs.RepositoryRemoteRepositoryConfigGetArgs>? RemoteRepositoryConfig { get; set; }

        /// <summary>
        /// The last part of the repository name, for example:
        /// "repo1"
        /// </summary>
        [Input("repositoryId")]
        public Input<string>? RepositoryId { get; set; }

        /// <summary>
        /// The time when the repository was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// Configuration specific for a Virtual Repository.
        /// Structure is documented below.
        /// </summary>
        [Input("virtualRepositoryConfig")]
        public Input<Inputs.RepositoryVirtualRepositoryConfigGetArgs>? VirtualRepositoryConfig { get; set; }

        public RepositoryState()
        {
        }
        public static new RepositoryState Empty => new RepositoryState();
    }
}
