// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.ArtifactRegistry
{
    public static class GetVersion
    {
        /// <summary>
        /// This data source fetches information of a version from a provided Artifact Registry repository.
        /// </summary>
        public static Task<GetVersionResult> InvokeAsync(GetVersionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVersionResult>("gcp:artifactregistry/getVersion:getVersion", args ?? new GetVersionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source fetches information of a version from a provided Artifact Registry repository.
        /// </summary>
        public static Output<GetVersionResult> Invoke(GetVersionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVersionResult>("gcp:artifactregistry/getVersion:getVersion", args ?? new GetVersionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source fetches information of a version from a provided Artifact Registry repository.
        /// </summary>
        public static Output<GetVersionResult> Invoke(GetVersionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVersionResult>("gcp:artifactregistry/getVersion:getVersion", args ?? new GetVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVersionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the artifact registry.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The name of the package.
        /// </summary>
        [Input("packageName", required: true)]
        public string PackageName { get; set; } = null!;

        /// <summary>
        /// The project ID in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The last part of the repository name to fetch from.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        /// <summary>
        /// The name of the version.
        /// </summary>
        [Input("versionName", required: true)]
        public string VersionName { get; set; } = null!;

        /// <summary>
        /// The view, which determines what version information is returned in a response. Possible values are `"BASIC"` and `"FULL"`. Defaults to `"BASIC"`.
        /// </summary>
        [Input("view")]
        public string? View { get; set; }

        public GetVersionArgs()
        {
        }
        public static new GetVersionArgs Empty => new GetVersionArgs();
    }

    public sealed class GetVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location of the artifact registry.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of the package.
        /// </summary>
        [Input("packageName", required: true)]
        public Input<string> PackageName { get; set; } = null!;

        /// <summary>
        /// The project ID in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The last part of the repository name to fetch from.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        /// <summary>
        /// The name of the version.
        /// </summary>
        [Input("versionName", required: true)]
        public Input<string> VersionName { get; set; } = null!;

        /// <summary>
        /// The view, which determines what version information is returned in a response. Possible values are `"BASIC"` and `"FULL"`. Defaults to `"BASIC"`.
        /// </summary>
        [Input("view")]
        public Input<string>? View { get; set; }

        public GetVersionInvokeArgs()
        {
        }
        public static new GetVersionInvokeArgs Empty => new GetVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetVersionResult
    {
        /// <summary>
        /// Client specified annotations.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// The time, as a RFC 3339 string, this package was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Description of the version, as specified in its metadata.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        /// <summary>
        /// The name of the version, for example: `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/version1`. If the package part contains slashes, the slashes are escaped.
        /// </summary>
        public readonly string Name;
        public readonly string PackageName;
        public readonly string? Project;
        /// <summary>
        /// A list of related tags. Will contain up to 100 tags that reference this version.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVersionRelatedTagResult> RelatedTags;
        public readonly string RepositoryId;
        /// <summary>
        /// The time, as a RFC 3339 string, this package was last updated. This includes publishing a new version of the package.
        /// </summary>
        public readonly string UpdateTime;
        public readonly string VersionName;
        public readonly string? View;

        [OutputConstructor]
        private GetVersionResult(
            ImmutableDictionary<string, string> annotations,

            string createTime,

            string description,

            string id,

            string location,

            string name,

            string packageName,

            string? project,

            ImmutableArray<Outputs.GetVersionRelatedTagResult> relatedTags,

            string repositoryId,

            string updateTime,

            string versionName,

            string? view)
        {
            Annotations = annotations;
            CreateTime = createTime;
            Description = description;
            Id = id;
            Location = location;
            Name = name;
            PackageName = packageName;
            Project = project;
            RelatedTags = relatedTags;
            RepositoryId = repositoryId;
            UpdateTime = updateTime;
            VersionName = versionName;
            View = view;
        }
    }
}
