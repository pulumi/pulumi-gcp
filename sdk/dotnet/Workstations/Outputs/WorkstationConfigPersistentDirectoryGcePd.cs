// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Workstations.Outputs
{

    [OutputType]
    public sealed class WorkstationConfigPersistentDirectoryGcePd
    {
        /// <summary>
        /// Type of the disk to use. Defaults to `"pd-standard"`.
        /// </summary>
        public readonly string? DiskType;
        /// <summary>
        /// Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if `sourceSnapshot` is set. Defaults to `Ext4`.
        /// </summary>
        public readonly string? FsType;
        /// <summary>
        /// Whether the persistent disk should be deleted when the workstation is deleted. Valid values are `DELETE` and `RETAIN`. Defaults to `DELETE`.
        /// Possible values are: `DELETE`, `RETAIN`.
        /// </summary>
        public readonly string? ReclaimPolicy;
        /// <summary>
        /// The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if `sourceSnapshot` is set.
        /// Valid values are `10`, `50`, `100`, `200`, `500`, or `1000`. Defaults to `200`. If less than `200` GB, the `diskType` must be `pd-balanced` or `pd-ssd`.
        /// </summary>
        public readonly int? SizeGb;
        /// <summary>
        /// Name of the snapshot to use as the source for the disk.
        /// Must be empty if `sourceImage` is set.
        /// Must be empty if `ReadOnly` is false.
        /// Updating `SourceSnapshot` will update content in the ephemeral directory after the workstation is restarted.
        /// </summary>
        public readonly string? SourceSnapshot;

        [OutputConstructor]
        private WorkstationConfigPersistentDirectoryGcePd(
            string? diskType,

            string? fsType,

            string? reclaimPolicy,

            int? sizeGb,

            string? sourceSnapshot)
        {
            DiskType = diskType;
            FsType = fsType;
            ReclaimPolicy = reclaimPolicy;
            SizeGb = sizeGb;
            SourceSnapshot = sourceSnapshot;
        }
    }
}
