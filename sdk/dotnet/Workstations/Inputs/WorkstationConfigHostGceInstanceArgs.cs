// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Workstations.Inputs
{

    public sealed class WorkstationConfigHostGceInstanceArgs : global::Pulumi.ResourceArgs
    {
        [Input("accelerators")]
        private InputList<Inputs.WorkstationConfigHostGceInstanceAcceleratorArgs>? _accelerators;

        /// <summary>
        /// An accelerator card attached to the instance.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WorkstationConfigHostGceInstanceAcceleratorArgs> Accelerators
        {
            get => _accelerators ?? (_accelerators = new InputList<Inputs.WorkstationConfigHostGceInstanceAcceleratorArgs>());
            set => _accelerators = value;
        }

        [Input("boostConfigs")]
        private InputList<Inputs.WorkstationConfigHostGceInstanceBoostConfigArgs>? _boostConfigs;

        /// <summary>
        /// A list of the boost configurations that workstations created using this workstation configuration are allowed to use.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WorkstationConfigHostGceInstanceBoostConfigArgs> BoostConfigs
        {
            get => _boostConfigs ?? (_boostConfigs = new InputList<Inputs.WorkstationConfigHostGceInstanceBoostConfigArgs>());
            set => _boostConfigs = value;
        }

        /// <summary>
        /// Size of the boot disk in GB.
        /// </summary>
        [Input("bootDiskSizeGb")]
        public Input<int>? BootDiskSizeGb { get; set; }

        /// <summary>
        /// A set of Compute Engine Confidential VM instance options.
        /// Structure is documented below.
        /// </summary>
        [Input("confidentialInstanceConfig")]
        public Input<Inputs.WorkstationConfigHostGceInstanceConfidentialInstanceConfigArgs>? ConfidentialInstanceConfig { get; set; }

        /// <summary>
        /// Whether instances have no public IP address.
        /// </summary>
        [Input("disablePublicIpAddresses")]
        public Input<bool>? DisablePublicIpAddresses { get; set; }

        /// <summary>
        /// Whether to disable SSH access to the VM.
        /// </summary>
        [Input("disableSsh")]
        public Input<bool>? DisableSsh { get; set; }

        /// <summary>
        /// Whether to enable nested virtualization on the Compute Engine VMs backing the Workstations.
        /// See https://cloud.google.com/workstations/docs/reference/rest/v1beta/projects.locations.workstationClusters.workstationConfigs#GceInstance.FIELDS.enable_nested_virtualization
        /// </summary>
        [Input("enableNestedVirtualization")]
        public Input<bool>? EnableNestedVirtualization { get; set; }

        /// <summary>
        /// The name of a Compute Engine machine type.
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        /// <summary>
        /// Number of instances to pool for faster workstation startup.
        /// </summary>
        [Input("poolSize")]
        public Input<int>? PoolSize { get; set; }

        /// <summary>
        /// Email address of the service account that will be used on VM instances used to support this config. This service account must have permission to pull the specified container image. If not set, VMs will run without a service account, in which case the image must be publicly accessible.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        [Input("serviceAccountScopes")]
        private InputList<string>? _serviceAccountScopes;

        /// <summary>
        /// Scopes to grant to the service_account. Various scopes are automatically added based on feature usage. When specified, users of workstations under this configuration must have `iam.serviceAccounts.actAs` on the service account.
        /// </summary>
        public InputList<string> ServiceAccountScopes
        {
            get => _serviceAccountScopes ?? (_serviceAccountScopes = new InputList<string>());
            set => _serviceAccountScopes = value;
        }

        /// <summary>
        /// A set of Compute Engine Shielded instance options.
        /// Structure is documented below.
        /// </summary>
        [Input("shieldedInstanceConfig")]
        public Input<Inputs.WorkstationConfigHostGceInstanceShieldedInstanceConfigArgs>? ShieldedInstanceConfig { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Network tags to add to the Compute Engine machines backing the Workstations.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public WorkstationConfigHostGceInstanceArgs()
        {
        }
        public static new WorkstationConfigHostGceInstanceArgs Empty => new WorkstationConfigHostGceInstanceArgs();
    }
}
