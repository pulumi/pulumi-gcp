// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Workstations
{
    /// <summary>
    /// A grouping of workstation configurations and the associated workstations in that region.
    /// 
    /// To get more information about WorkstationCluster, see:
    /// 
    /// * [API documentation](https://cloud.google.com/workstations/docs/reference/rest/v1beta/projects.locations.workstationClusters/create)
    /// * How-to Guides
    ///     * [Workstations](https://cloud.google.com/workstations/docs/)
    /// 
    /// ## Example Usage
    /// 
    /// ### Workstation Cluster Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultNetwork = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "workstation-cluster",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var defaultSubnetwork = new Gcp.Compute.Subnetwork("default", new()
    ///     {
    ///         Name = "workstation-cluster",
    ///         IpCidrRange = "10.0.0.0/24",
    ///         Region = "us-central1",
    ///         Network = defaultNetwork.Name,
    ///     });
    /// 
    ///     var @default = new Gcp.Workstations.WorkstationCluster("default", new()
    ///     {
    ///         WorkstationClusterId = "workstation-cluster",
    ///         Network = defaultNetwork.Id,
    ///         Subnetwork = defaultSubnetwork.Id,
    ///         Location = "us-central1",
    ///         Labels = 
    ///         {
    ///             { "label", "key" },
    ///         },
    ///         Annotations = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    /// });
    /// ```
    /// ### Workstation Cluster Private
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultNetwork = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "workstation-cluster-private",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var defaultSubnetwork = new Gcp.Compute.Subnetwork("default", new()
    ///     {
    ///         Name = "workstation-cluster-private",
    ///         IpCidrRange = "10.0.0.0/24",
    ///         Region = "us-central1",
    ///         Network = defaultNetwork.Name,
    ///     });
    /// 
    ///     var @default = new Gcp.Workstations.WorkstationCluster("default", new()
    ///     {
    ///         WorkstationClusterId = "workstation-cluster-private",
    ///         Network = defaultNetwork.Id,
    ///         Subnetwork = defaultSubnetwork.Id,
    ///         Location = "us-central1",
    ///         PrivateClusterConfig = new Gcp.Workstations.Inputs.WorkstationClusterPrivateClusterConfigArgs
    ///         {
    ///             EnablePrivateEndpoint = true,
    ///         },
    ///         Labels = 
    ///         {
    ///             { "label", "key" },
    ///         },
    ///         Annotations = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    /// });
    /// ```
    /// ### Workstation Cluster Custom Domain
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultNetwork = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "workstation-cluster-custom-domain",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var defaultSubnetwork = new Gcp.Compute.Subnetwork("default", new()
    ///     {
    ///         Name = "workstation-cluster-custom-domain",
    ///         IpCidrRange = "10.0.0.0/24",
    ///         Region = "us-central1",
    ///         Network = defaultNetwork.Name,
    ///     });
    /// 
    ///     var @default = new Gcp.Workstations.WorkstationCluster("default", new()
    ///     {
    ///         WorkstationClusterId = "workstation-cluster-custom-domain",
    ///         Network = defaultNetwork.Id,
    ///         Subnetwork = defaultSubnetwork.Id,
    ///         Location = "us-central1",
    ///         PrivateClusterConfig = new Gcp.Workstations.Inputs.WorkstationClusterPrivateClusterConfigArgs
    ///         {
    ///             EnablePrivateEndpoint = true,
    ///         },
    ///         DomainConfig = new Gcp.Workstations.Inputs.WorkstationClusterDomainConfigArgs
    ///         {
    ///             Domain = "workstations.example.com",
    ///         },
    ///         Labels = 
    ///         {
    ///             { "label", "key" },
    ///         },
    ///         Annotations = 
    ///         {
    ///             { "label-one", "value-one" },
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    /// });
    /// ```
    /// ### Workstation Cluster Tags
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var tagKey = new Gcp.Tags.TagKey("tag_key", new()
    ///     {
    ///         Parent = $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Number)}",
    ///         ShortName = "keyname",
    ///     });
    /// 
    ///     var tagValue = new Gcp.Tags.TagValue("tag_value", new()
    ///     {
    ///         Parent = tagKey.Name.Apply(name =&gt; $"tagKeys/{name}"),
    ///         ShortName = "valuename",
    ///     });
    /// 
    ///     var defaultNetwork = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "workstation-cluster-tags",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var defaultSubnetwork = new Gcp.Compute.Subnetwork("default", new()
    ///     {
    ///         Name = "workstation-cluster-tags",
    ///         IpCidrRange = "10.0.0.0/24",
    ///         Region = "us-central1",
    ///         Network = defaultNetwork.Name,
    ///     });
    /// 
    ///     var @default = new Gcp.Workstations.WorkstationCluster("default", new()
    ///     {
    ///         WorkstationClusterId = "workstation-cluster-tags",
    ///         Network = defaultNetwork.Id,
    ///         Subnetwork = defaultSubnetwork.Id,
    ///         Location = "us-central1",
    ///         Tags = Output.Tuple(project, tagKey.ShortName, tagValue.ShortName).Apply(values =&gt;
    ///         {
    ///             var project = values.Item1;
    ///             var tagKeyShortName = values.Item2;
    ///             var tagValueShortName = values.Item3;
    ///             return 
    ///             {
    ///                 { $"{project.Apply(getProjectResult =&gt; getProjectResult.ProjectId)}/{tagKeyShortName}", tagValueShortName },
    ///             };
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WorkstationCluster can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{workstation_cluster_id}}`
    /// 
    /// * `{{location}}/{{workstation_cluster_id}}`
    /// 
    /// When using the `pulumi import` command, WorkstationCluster can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:workstations/workstationCluster:WorkstationCluster default projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:workstations/workstationCluster:WorkstationCluster default {{project}}/{{location}}/{{workstation_cluster_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:workstations/workstationCluster:WorkstationCluster default {{location}}/{{workstation_cluster_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:workstations/workstationCluster:WorkstationCluster")]
    public partial class WorkstationCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Client-specified annotations. This is distinct from labels.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Status conditions describing the current resource state.
        /// Structure is documented below.
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.WorkstationClusterCondition>> Conditions { get; private set; } = null!;

        /// <summary>
        /// The private IP address of the control plane for this workstation cluster.
        /// Workstation VMs need access to this IP address to work with the service, so make sure that your firewall rules allow egress from the workstation VMs to this address.
        /// </summary>
        [Output("controlPlaneIp")]
        public Output<string> ControlPlaneIp { get; private set; } = null!;

        /// <summary>
        /// Time when this resource was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Whether this resource is in degraded mode, in which case it may require user action to restore full functionality.
        /// Details can be found in the conditions field.
        /// </summary>
        [Output("degraded")]
        public Output<bool> Degraded { get; private set; } = null!;

        /// <summary>
        /// Human-readable name for this resource.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Configuration options for a custom domain.
        /// Structure is documented below.
        /// </summary>
        [Output("domainConfig")]
        public Output<Outputs.WorkstationClusterDomainConfig?> DomainConfig { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Checksum computed by the server.
        /// May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location where the workstation cluster should reside.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the cluster resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The relative resource name of the VPC network on which the instance can be accessed.
        /// It is specified in the following form: "projects/{projectNumber}/global/networks/{network_id}".
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// Configuration for private cluster.
        /// Structure is documented below.
        /// </summary>
        [Output("privateClusterConfig")]
        public Output<Outputs.WorkstationClusterPrivateClusterConfig?> PrivateClusterConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Name of the Compute Engine subnetwork in which instances associated with this cluster will be created.
        /// Must be part of the subnetwork specified for this cluster.
        /// </summary>
        [Output("subnetwork")]
        public Output<string> Subnetwork { get; private set; } = null!;

        /// <summary>
        /// Resource manager tags bound to this resource.
        /// For example:
        /// "123/environment": "production",
        /// "123/costCenter": "marketing"
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The system-generated UID of the resource.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// ID to use for the workstation cluster.
        /// </summary>
        [Output("workstationClusterId")]
        public Output<string> WorkstationClusterId { get; private set; } = null!;


        /// <summary>
        /// Create a WorkstationCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkstationCluster(string name, WorkstationClusterArgs args, CustomResourceOptions? options = null)
            : base("gcp:workstations/workstationCluster:WorkstationCluster", name, args ?? new WorkstationClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkstationCluster(string name, Input<string> id, WorkstationClusterState? state = null, CustomResourceOptions? options = null)
            : base("gcp:workstations/workstationCluster:WorkstationCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkstationCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkstationCluster Get(string name, Input<string> id, WorkstationClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkstationCluster(name, id, state, options);
        }
    }

    public sealed class WorkstationClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Client-specified annotations. This is distinct from labels.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Human-readable name for this resource.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Configuration options for a custom domain.
        /// Structure is documented below.
        /// </summary>
        [Input("domainConfig")]
        public Input<Inputs.WorkstationClusterDomainConfigArgs>? DomainConfig { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where the workstation cluster should reside.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The relative resource name of the VPC network on which the instance can be accessed.
        /// It is specified in the following form: "projects/{projectNumber}/global/networks/{network_id}".
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// Configuration for private cluster.
        /// Structure is documented below.
        /// </summary>
        [Input("privateClusterConfig")]
        public Input<Inputs.WorkstationClusterPrivateClusterConfigArgs>? PrivateClusterConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Name of the Compute Engine subnetwork in which instances associated with this cluster will be created.
        /// Must be part of the subnetwork specified for this cluster.
        /// </summary>
        [Input("subnetwork", required: true)]
        public Input<string> Subnetwork { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource manager tags bound to this resource.
        /// For example:
        /// "123/environment": "production",
        /// "123/costCenter": "marketing"
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// ID to use for the workstation cluster.
        /// </summary>
        [Input("workstationClusterId", required: true)]
        public Input<string> WorkstationClusterId { get; set; } = null!;

        public WorkstationClusterArgs()
        {
        }
        public static new WorkstationClusterArgs Empty => new WorkstationClusterArgs();
    }

    public sealed class WorkstationClusterState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Client-specified annotations. This is distinct from labels.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("conditions")]
        private InputList<Inputs.WorkstationClusterConditionGetArgs>? _conditions;

        /// <summary>
        /// Status conditions describing the current resource state.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.WorkstationClusterConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.WorkstationClusterConditionGetArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The private IP address of the control plane for this workstation cluster.
        /// Workstation VMs need access to this IP address to work with the service, so make sure that your firewall rules allow egress from the workstation VMs to this address.
        /// </summary>
        [Input("controlPlaneIp")]
        public Input<string>? ControlPlaneIp { get; set; }

        /// <summary>
        /// Time when this resource was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Whether this resource is in degraded mode, in which case it may require user action to restore full functionality.
        /// Details can be found in the conditions field.
        /// </summary>
        [Input("degraded")]
        public Input<bool>? Degraded { get; set; }

        /// <summary>
        /// Human-readable name for this resource.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Configuration options for a custom domain.
        /// Structure is documented below.
        /// </summary>
        [Input("domainConfig")]
        public Input<Inputs.WorkstationClusterDomainConfigGetArgs>? DomainConfig { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Checksum computed by the server.
        /// May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location where the workstation cluster should reside.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the cluster resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The relative resource name of the VPC network on which the instance can be accessed.
        /// It is specified in the following form: "projects/{projectNumber}/global/networks/{network_id}".
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// Configuration for private cluster.
        /// Structure is documented below.
        /// </summary>
        [Input("privateClusterConfig")]
        public Input<Inputs.WorkstationClusterPrivateClusterConfigGetArgs>? PrivateClusterConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Name of the Compute Engine subnetwork in which instances associated with this cluster will be created.
        /// Must be part of the subnetwork specified for this cluster.
        /// </summary>
        [Input("subnetwork")]
        public Input<string>? Subnetwork { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource manager tags bound to this resource.
        /// For example:
        /// "123/environment": "production",
        /// "123/costCenter": "marketing"
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The system-generated UID of the resource.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// ID to use for the workstation cluster.
        /// </summary>
        [Input("workstationClusterId")]
        public Input<string>? WorkstationClusterId { get; set; }

        public WorkstationClusterState()
        {
        }
        public static new WorkstationClusterState Empty => new WorkstationClusterState();
    }
}
