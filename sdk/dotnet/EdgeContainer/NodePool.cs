// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.EdgeContainer
{
    /// <summary>
    /// "A set of Kubernetes nodes in a cluster with common configuration and specification."
    /// 
    /// To get more information about NodePool, see:
    /// 
    /// * [API documentation](https://cloud.google.com/distributed-cloud/edge/latest/docs/reference/container/rest/v1/projects.locations.clusters.nodePools)
    /// * How-to Guides
    ///     * [Google Distributed Cloud Edge](https://cloud.google.com/distributed-cloud/edge/latest/docs)
    /// 
    /// ## Example Usage
    /// ### Edgecontainer Node Pool
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.%[1]s;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var cluster = new Gcp.EdgeContainer.Cluster("cluster", new()
    ///     {
    ///         Location = "us-central1",
    ///         Authorization = new Gcp.EdgeContainer.Inputs.ClusterAuthorizationArgs
    ///         {
    ///             AdminUsers = new Gcp.EdgeContainer.Inputs.ClusterAuthorizationAdminUsersArgs
    ///             {
    ///                 Username = "admin@hashicorptest.com",
    ///             },
    ///         },
    ///         Networking = new Gcp.EdgeContainer.Inputs.ClusterNetworkingArgs
    ///         {
    ///             ClusterIpv4CidrBlocks = new[]
    ///             {
    ///                 "10.0.0.0/16",
    ///             },
    ///             ServicesIpv4CidrBlocks = new[]
    ///             {
    ///                 "10.1.0.0/16",
    ///             },
    ///         },
    ///         Fleet = new Gcp.EdgeContainer.Inputs.ClusterFleetArgs
    ///         {
    ///             Project = $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Number)}",
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.EdgeContainer.NodePool("default", new()
    ///     {
    ///         Cluster = cluster.Name,
    ///         Location = "us-central1",
    ///         NodeLocation = "us-central1-edge-example-edgesite",
    ///         NodeCount = 3,
    ///         Labels = 
    ///         {
    ///             { "my_key", "my_val" },
    ///             { "other_key", "other_val" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Edgecontainer Node Pool With Cmek
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.%[1]s;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var cluster = new Gcp.EdgeContainer.Cluster("cluster", new()
    ///     {
    ///         Location = "us-central1",
    ///         Authorization = new Gcp.EdgeContainer.Inputs.ClusterAuthorizationArgs
    ///         {
    ///             AdminUsers = new Gcp.EdgeContainer.Inputs.ClusterAuthorizationAdminUsersArgs
    ///             {
    ///                 Username = "admin@hashicorptest.com",
    ///             },
    ///         },
    ///         Networking = new Gcp.EdgeContainer.Inputs.ClusterNetworkingArgs
    ///         {
    ///             ClusterIpv4CidrBlocks = new[]
    ///             {
    ///                 "10.0.0.0/16",
    ///             },
    ///             ServicesIpv4CidrBlocks = new[]
    ///             {
    ///                 "10.1.0.0/16",
    ///             },
    ///         },
    ///         Fleet = new Gcp.EdgeContainer.Inputs.ClusterFleetArgs
    ///         {
    ///             Project = $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Number)}",
    ///         },
    ///     });
    /// 
    ///     var keyRing = new Gcp.Kms.KeyRing("keyRing", new()
    ///     {
    ///         Location = "us-central1",
    ///     });
    /// 
    ///     var cryptoKeyCryptoKey = new Gcp.Kms.CryptoKey("cryptoKeyCryptoKey", new()
    ///     {
    ///         KeyRing = keyRing.Id,
    ///     });
    /// 
    ///     var cryptoKeyCryptoKeyIAMMember = new Gcp.Kms.CryptoKeyIAMMember("cryptoKeyCryptoKeyIAMMember", new()
    ///     {
    ///         CryptoKeyId = cryptoKeyCryptoKey.Id,
    ///         Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-edgecontainer.iam.gserviceaccount.com",
    ///     });
    /// 
    ///     var @default = new Gcp.EdgeContainer.NodePool("default", new()
    ///     {
    ///         Cluster = cluster.Name,
    ///         Location = "us-central1",
    ///         NodeLocation = "us-central1-edge-example-edgesite",
    ///         NodeCount = 3,
    ///         LocalDiskEncryption = new Gcp.EdgeContainer.Inputs.NodePoolLocalDiskEncryptionArgs
    ///         {
    ///             KmsKey = cryptoKeyCryptoKey.Id,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             cryptoKeyCryptoKeyIAMMember,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Edgecontainer Local Control Plane Node Pool
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.%[1]s;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var defaultCluster = new Gcp.EdgeContainer.Cluster("defaultCluster", new()
    ///     {
    ///         Location = "us-central1",
    ///         Authorization = new Gcp.EdgeContainer.Inputs.ClusterAuthorizationArgs
    ///         {
    ///             AdminUsers = new Gcp.EdgeContainer.Inputs.ClusterAuthorizationAdminUsersArgs
    ///             {
    ///                 Username = "admin@hashicorptest.com",
    ///             },
    ///         },
    ///         Networking = new Gcp.EdgeContainer.Inputs.ClusterNetworkingArgs
    ///         {
    ///             ClusterIpv4CidrBlocks = new[]
    ///             {
    ///                 "10.0.0.0/16",
    ///             },
    ///             ServicesIpv4CidrBlocks = new[]
    ///             {
    ///                 "10.1.0.0/16",
    ///             },
    ///         },
    ///         Fleet = new Gcp.EdgeContainer.Inputs.ClusterFleetArgs
    ///         {
    ///             Project = $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Number)}",
    ///         },
    ///         ExternalLoadBalancerIpv4AddressPools = new[]
    ///         {
    ///             "10.100.0.0-10.100.0.10",
    ///         },
    ///         ControlPlane = new Gcp.EdgeContainer.Inputs.ClusterControlPlaneArgs
    ///         {
    ///             Local = new Gcp.EdgeContainer.Inputs.ClusterControlPlaneLocalArgs
    ///             {
    ///                 NodeLocation = "us-central1-edge-example-edgesite",
    ///                 NodeCount = 1,
    ///                 MachineFilter = "machine-name",
    ///                 SharedDeploymentPolicy = "ALLOWED",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultNodePool = new Gcp.EdgeContainer.NodePool("defaultNodePool", new()
    ///     {
    ///         Cluster = google_edgecontainer_cluster.Cluster.Name,
    ///         Location = "us-central1",
    ///         NodeLocation = "us-central1-edge-example-edgesite",
    ///         NodeCount = 3,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NodePool can be imported using any of these accepted formats* `projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/nodePools/{{name}}` * `{{project}}/{{location}}/{{cluster}}/{{name}}` * `{{location}}/{{cluster}}/{{name}}` In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import NodePool using one of the formats above. For exampletf import {
    /// 
    ///  id = "projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/nodePools/{{name}}"
    /// 
    ///  to = google_edgecontainer_node_pool.default }
    /// 
    /// ```sh
    ///  $ pulumi import gcp:edgecontainer/nodePool:NodePool When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), NodePool can be imported using one of the formats above. For example
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:edgecontainer/nodePool:NodePool default projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/nodePools/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:edgecontainer/nodePool:NodePool default {{project}}/{{location}}/{{cluster}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:edgecontainer/nodePool:NodePool default {{location}}/{{cluster}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:edgecontainer/nodePool:NodePool")]
    public partial class NodePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the target Distributed Cloud Edge Cluster.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("cluster")]
        public Output<string> Cluster { get; private set; } = null!;

        /// <summary>
        /// The time when the node pool was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Labels associated with this resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Local disk encryption options. This field is only used when enabling CMEK support.
        /// Structure is documented below.
        /// </summary>
        [Output("localDiskEncryption")]
        public Output<Outputs.NodePoolLocalDiskEncryption?> LocalDiskEncryption { get; private set; } = null!;

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Only machines matching this filter will be allowed to join the node pool.
        /// The filtering language accepts strings like "name=&lt;name&gt;", and is
        /// documented in more detail in [AIP-160](https://google.aip.dev/160).
        /// </summary>
        [Output("machineFilter")]
        public Output<string> MachineFilter { get; private set; } = null!;

        /// <summary>
        /// The resource name of the node pool.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configuration for each node in the NodePool
        /// Structure is documented below.
        /// </summary>
        [Output("nodeConfig")]
        public Output<Outputs.NodePoolNodeConfig> NodeConfig { get; private set; } = null!;

        /// <summary>
        /// The number of nodes in the pool.
        /// </summary>
        [Output("nodeCount")]
        public Output<int> NodeCount { get; private set; } = null!;

        /// <summary>
        /// Name of the Google Distributed Cloud Edge zone where this node pool will be created. For example: `us-central1-edge-customer-a`.
        /// </summary>
        [Output("nodeLocation")]
        public Output<string> NodeLocation { get; private set; } = null!;

        /// <summary>
        /// The lowest release version among all worker nodes.
        /// </summary>
        [Output("nodeVersion")]
        public Output<string> NodeVersion { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The time when the node pool was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a NodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NodePool(string name, NodePoolArgs args, CustomResourceOptions? options = null)
            : base("gcp:edgecontainer/nodePool:NodePool", name, args ?? new NodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NodePool(string name, Input<string> id, NodePoolState? state = null, CustomResourceOptions? options = null)
            : base("gcp:edgecontainer/nodePool:NodePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NodePool Get(string name, Input<string> id, NodePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new NodePool(name, id, state, options);
        }
    }

    public sealed class NodePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the target Distributed Cloud Edge Cluster.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("cluster", required: true)]
        public Input<string> Cluster { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels associated with this resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Local disk encryption options. This field is only used when enabling CMEK support.
        /// Structure is documented below.
        /// </summary>
        [Input("localDiskEncryption")]
        public Input<Inputs.NodePoolLocalDiskEncryptionArgs>? LocalDiskEncryption { get; set; }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Only machines matching this filter will be allowed to join the node pool.
        /// The filtering language accepts strings like "name=&lt;name&gt;", and is
        /// documented in more detail in [AIP-160](https://google.aip.dev/160).
        /// </summary>
        [Input("machineFilter")]
        public Input<string>? MachineFilter { get; set; }

        /// <summary>
        /// The resource name of the node pool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration for each node in the NodePool
        /// Structure is documented below.
        /// </summary>
        [Input("nodeConfig")]
        public Input<Inputs.NodePoolNodeConfigArgs>? NodeConfig { get; set; }

        /// <summary>
        /// The number of nodes in the pool.
        /// </summary>
        [Input("nodeCount", required: true)]
        public Input<int> NodeCount { get; set; } = null!;

        /// <summary>
        /// Name of the Google Distributed Cloud Edge zone where this node pool will be created. For example: `us-central1-edge-customer-a`.
        /// </summary>
        [Input("nodeLocation", required: true)]
        public Input<string> NodeLocation { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public NodePoolArgs()
        {
        }
        public static new NodePoolArgs Empty => new NodePoolArgs();
    }

    public sealed class NodePoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the target Distributed Cloud Edge Cluster.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("cluster")]
        public Input<string>? Cluster { get; set; }

        /// <summary>
        /// The time when the node pool was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels associated with this resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Local disk encryption options. This field is only used when enabling CMEK support.
        /// Structure is documented below.
        /// </summary>
        [Input("localDiskEncryption")]
        public Input<Inputs.NodePoolLocalDiskEncryptionGetArgs>? LocalDiskEncryption { get; set; }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Only machines matching this filter will be allowed to join the node pool.
        /// The filtering language accepts strings like "name=&lt;name&gt;", and is
        /// documented in more detail in [AIP-160](https://google.aip.dev/160).
        /// </summary>
        [Input("machineFilter")]
        public Input<string>? MachineFilter { get; set; }

        /// <summary>
        /// The resource name of the node pool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration for each node in the NodePool
        /// Structure is documented below.
        /// </summary>
        [Input("nodeConfig")]
        public Input<Inputs.NodePoolNodeConfigGetArgs>? NodeConfig { get; set; }

        /// <summary>
        /// The number of nodes in the pool.
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// Name of the Google Distributed Cloud Edge zone where this node pool will be created. For example: `us-central1-edge-customer-a`.
        /// </summary>
        [Input("nodeLocation")]
        public Input<string>? NodeLocation { get; set; }

        /// <summary>
        /// The lowest release version among all worker nodes.
        /// </summary>
        [Input("nodeVersion")]
        public Input<string>? NodeVersion { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The time when the node pool was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public NodePoolState()
        {
        }
        public static new NodePoolState Empty => new NodePoolState();
    }
}
