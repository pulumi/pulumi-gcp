// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.EdgeContainer
{
    /// <summary>
    /// Cluster contains information about a Google Distributed Cloud Edge Kubernetes cluster.
    /// 
    /// To get more information about Cluster, see:
    /// 
    /// * [API documentation](https://cloud.google.com/distributed-cloud/edge/latest/docs/reference/container/rest/v1/projects.locations.clusters)
    /// * How-to Guides
    ///     * [Create and manage clusters](https://cloud.google.com/distributed-cloud/edge/latest/docs/clusters)
    /// 
    /// ## Example Usage
    /// ### Edgecontainer Cluster
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var @default = new Gcp.EdgeContainer.Cluster("default", new()
    ///     {
    ///         Name = "basic-cluster",
    ///         Location = "us-central1",
    ///         Authorization = new Gcp.EdgeContainer.Inputs.ClusterAuthorizationArgs
    ///         {
    ///             AdminUsers = new Gcp.EdgeContainer.Inputs.ClusterAuthorizationAdminUsersArgs
    ///             {
    ///                 Username = "admin@hashicorptest.com",
    ///             },
    ///         },
    ///         Networking = new Gcp.EdgeContainer.Inputs.ClusterNetworkingArgs
    ///         {
    ///             ClusterIpv4CidrBlocks = new[]
    ///             {
    ///                 "10.0.0.0/16",
    ///             },
    ///             ServicesIpv4CidrBlocks = new[]
    ///             {
    ///                 "10.1.0.0/16",
    ///             },
    ///         },
    ///         Fleet = new Gcp.EdgeContainer.Inputs.ClusterFleetArgs
    ///         {
    ///             Project = $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Number)}",
    ///         },
    ///         Labels = 
    ///         {
    ///             { "my_key", "my_val" },
    ///             { "other_key", "other_val" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Edgecontainer Cluster With Maintenance Window
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var @default = new Gcp.EdgeContainer.Cluster("default", new()
    ///     {
    ///         Name = "cluster-with-maintenance",
    ///         Location = "us-central1",
    ///         Authorization = new Gcp.EdgeContainer.Inputs.ClusterAuthorizationArgs
    ///         {
    ///             AdminUsers = new Gcp.EdgeContainer.Inputs.ClusterAuthorizationAdminUsersArgs
    ///             {
    ///                 Username = "admin@hashicorptest.com",
    ///             },
    ///         },
    ///         Networking = new Gcp.EdgeContainer.Inputs.ClusterNetworkingArgs
    ///         {
    ///             ClusterIpv4CidrBlocks = new[]
    ///             {
    ///                 "10.0.0.0/16",
    ///             },
    ///             ServicesIpv4CidrBlocks = new[]
    ///             {
    ///                 "10.1.0.0/16",
    ///             },
    ///         },
    ///         Fleet = new Gcp.EdgeContainer.Inputs.ClusterFleetArgs
    ///         {
    ///             Project = $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Number)}",
    ///         },
    ///         MaintenancePolicy = new Gcp.EdgeContainer.Inputs.ClusterMaintenancePolicyArgs
    ///         {
    ///             Window = new Gcp.EdgeContainer.Inputs.ClusterMaintenancePolicyWindowArgs
    ///             {
    ///                 RecurringWindow = new Gcp.EdgeContainer.Inputs.ClusterMaintenancePolicyWindowRecurringWindowArgs
    ///                 {
    ///                     Window = new Gcp.EdgeContainer.Inputs.ClusterMaintenancePolicyWindowRecurringWindowWindowArgs
    ///                     {
    ///                         StartTime = "2023-01-01T08:00:00Z",
    ///                         EndTime = "2023-01-01T17:00:00Z",
    ///                     },
    ///                     Recurrence = "FREQ=WEEKLY;BYDAY=SA",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Edgecontainer Local Control Plane Cluster
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var @default = new Gcp.EdgeContainer.Cluster("default", new()
    ///     {
    ///         Name = "local-control-plane-cluster",
    ///         Location = "us-central1",
    ///         Authorization = new Gcp.EdgeContainer.Inputs.ClusterAuthorizationArgs
    ///         {
    ///             AdminUsers = new Gcp.EdgeContainer.Inputs.ClusterAuthorizationAdminUsersArgs
    ///             {
    ///                 Username = "admin@hashicorptest.com",
    ///             },
    ///         },
    ///         Networking = new Gcp.EdgeContainer.Inputs.ClusterNetworkingArgs
    ///         {
    ///             ClusterIpv4CidrBlocks = new[]
    ///             {
    ///                 "10.0.0.0/16",
    ///             },
    ///             ServicesIpv4CidrBlocks = new[]
    ///             {
    ///                 "10.1.0.0/16",
    ///             },
    ///         },
    ///         Fleet = new Gcp.EdgeContainer.Inputs.ClusterFleetArgs
    ///         {
    ///             Project = $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Number)}",
    ///         },
    ///         ExternalLoadBalancerIpv4AddressPools = new[]
    ///         {
    ///             "10.100.0.0-10.100.0.10",
    ///         },
    ///         ControlPlane = new Gcp.EdgeContainer.Inputs.ClusterControlPlaneArgs
    ///         {
    ///             Local = new Gcp.EdgeContainer.Inputs.ClusterControlPlaneLocalArgs
    ///             {
    ///                 NodeLocation = "us-central1-edge-example-edgesite",
    ///                 NodeCount = 1,
    ///                 MachineFilter = "machine-name",
    ///                 SharedDeploymentPolicy = "ALLOWED",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Cluster can be imported using any of these accepted formats:
    /// 
    ///  * `projects/{{project}}/locations/{{location}}/clusters/{{name}}`
    /// 
    ///  * `{{project}}/{{location}}/{{name}}`
    /// 
    ///  * `{{location}}/{{name}}`
    /// 
    ///  When using the `pulumi import` command, Cluster can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:edgecontainer/cluster:Cluster default projects/{{project}}/locations/{{location}}/clusters/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:edgecontainer/cluster:Cluster default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:edgecontainer/cluster:Cluster default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:edgecontainer/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// RBAC policy that will be applied and managed by GEC.
        /// Structure is documented below.
        /// </summary>
        [Output("authorization")]
        public Output<Outputs.ClusterAuthorization> Authorization { get; private set; } = null!;

        /// <summary>
        /// The PEM-encoded public certificate of the cluster's CA.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        [Output("clusterCaCertificate")]
        public Output<string> ClusterCaCertificate { get; private set; } = null!;

        /// <summary>
        /// The configuration of the cluster control plane.
        /// Structure is documented below.
        /// </summary>
        [Output("controlPlane")]
        public Output<Outputs.ClusterControlPlane?> ControlPlane { get; private set; } = null!;

        /// <summary>
        /// Remote control plane disk encryption options. This field is only used when
        /// enabling CMEK support.
        /// Structure is documented below.
        /// </summary>
        [Output("controlPlaneEncryption")]
        public Output<Outputs.ClusterControlPlaneEncryption> ControlPlaneEncryption { get; private set; } = null!;

        /// <summary>
        /// The control plane release version.
        /// </summary>
        [Output("controlPlaneVersion")]
        public Output<string> ControlPlaneVersion { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// The time when the maintenance event request was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The default maximum number of pods per node used if a maximum value is not
        /// specified explicitly for a node pool in this cluster. If unspecified, the
        /// Kubernetes default value will be used.
        /// </summary>
        [Output("defaultMaxPodsPerNode")]
        public Output<int> DefaultMaxPodsPerNode { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// The IP address of the Kubernetes API server.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// Address pools for cluster data plane external load balancing.
        /// </summary>
        [Output("externalLoadBalancerIpv4AddressPools")]
        public Output<ImmutableArray<string>> ExternalLoadBalancerIpv4AddressPools { get; private set; } = null!;

        /// <summary>
        /// Fleet related configuration.
        /// Fleets are a Google Cloud concept for logically organizing clusters,
        /// letting you use and manage multi-cluster capabilities and apply
        /// consistent policies across your systems.
        /// Structure is documented below.
        /// </summary>
        [Output("fleet")]
        public Output<Outputs.ClusterFleet> Fleet { get; private set; } = null!;

        /// <summary>
        /// User-defined labels for the edgecloud cluster.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// All the maintenance events scheduled for the cluster, including the ones
        /// ongoing, planned for the future and done in the past (up to 90 days).
        /// Structure is documented below.
        /// </summary>
        [Output("maintenanceEvents")]
        public Output<ImmutableArray<Outputs.ClusterMaintenanceEvent>> MaintenanceEvents { get; private set; } = null!;

        /// <summary>
        /// Cluster-wide maintenance policy configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("maintenancePolicy")]
        public Output<Outputs.ClusterMaintenancePolicy> MaintenancePolicy { get; private set; } = null!;

        /// <summary>
        /// The GDCE cluster name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Fleet related configuration.
        /// Fleets are a Google Cloud concept for logically organizing clusters,
        /// letting you use and manage multi-cluster capabilities and apply
        /// consistent policies across your systems.
        /// Structure is documented below.
        /// </summary>
        [Output("networking")]
        public Output<Outputs.ClusterNetworking> Networking { get; private set; } = null!;

        /// <summary>
        /// The lowest release version among all worker nodes. This field can be empty
        /// if the cluster does not have any worker nodes.
        /// </summary>
        [Output("nodeVersion")]
        public Output<string> NodeVersion { get; private set; } = null!;

        /// <summary>
        /// The port number of the Kubernetes API server.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The release channel a cluster is subscribed to.
        /// Possible values are: `RELEASE_CHANNEL_UNSPECIFIED`, `NONE`, `REGULAR`.
        /// </summary>
        [Output("releaseChannel")]
        public Output<string> ReleaseChannel { get; private set; } = null!;

        /// <summary>
        /// Indicates the status of the cluster.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Config that customers are allowed to define for GDCE system add-ons.
        /// Structure is documented below.
        /// </summary>
        [Output("systemAddonsConfig")]
        public Output<Outputs.ClusterSystemAddonsConfig> SystemAddonsConfig { get; private set; } = null!;

        /// <summary>
        /// The target cluster version. For example: "1.5.0".
        /// </summary>
        [Output("targetVersion")]
        public Output<string> TargetVersion { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// The time when the maintenance event message was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("gcp:edgecontainer/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("gcp:edgecontainer/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "clusterCaCertificate",
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// RBAC policy that will be applied and managed by GEC.
        /// Structure is documented below.
        /// </summary>
        [Input("authorization", required: true)]
        public Input<Inputs.ClusterAuthorizationArgs> Authorization { get; set; } = null!;

        /// <summary>
        /// The configuration of the cluster control plane.
        /// Structure is documented below.
        /// </summary>
        [Input("controlPlane")]
        public Input<Inputs.ClusterControlPlaneArgs>? ControlPlane { get; set; }

        /// <summary>
        /// Remote control plane disk encryption options. This field is only used when
        /// enabling CMEK support.
        /// Structure is documented below.
        /// </summary>
        [Input("controlPlaneEncryption")]
        public Input<Inputs.ClusterControlPlaneEncryptionArgs>? ControlPlaneEncryption { get; set; }

        /// <summary>
        /// The default maximum number of pods per node used if a maximum value is not
        /// specified explicitly for a node pool in this cluster. If unspecified, the
        /// Kubernetes default value will be used.
        /// </summary>
        [Input("defaultMaxPodsPerNode")]
        public Input<int>? DefaultMaxPodsPerNode { get; set; }

        [Input("externalLoadBalancerIpv4AddressPools")]
        private InputList<string>? _externalLoadBalancerIpv4AddressPools;

        /// <summary>
        /// Address pools for cluster data plane external load balancing.
        /// </summary>
        public InputList<string> ExternalLoadBalancerIpv4AddressPools
        {
            get => _externalLoadBalancerIpv4AddressPools ?? (_externalLoadBalancerIpv4AddressPools = new InputList<string>());
            set => _externalLoadBalancerIpv4AddressPools = value;
        }

        /// <summary>
        /// Fleet related configuration.
        /// Fleets are a Google Cloud concept for logically organizing clusters,
        /// letting you use and manage multi-cluster capabilities and apply
        /// consistent policies across your systems.
        /// Structure is documented below.
        /// </summary>
        [Input("fleet", required: true)]
        public Input<Inputs.ClusterFleetArgs> Fleet { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the edgecloud cluster.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Cluster-wide maintenance policy configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("maintenancePolicy")]
        public Input<Inputs.ClusterMaintenancePolicyArgs>? MaintenancePolicy { get; set; }

        /// <summary>
        /// The GDCE cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Fleet related configuration.
        /// Fleets are a Google Cloud concept for logically organizing clusters,
        /// letting you use and manage multi-cluster capabilities and apply
        /// consistent policies across your systems.
        /// Structure is documented below.
        /// </summary>
        [Input("networking", required: true)]
        public Input<Inputs.ClusterNetworkingArgs> Networking { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The release channel a cluster is subscribed to.
        /// Possible values are: `RELEASE_CHANNEL_UNSPECIFIED`, `NONE`, `REGULAR`.
        /// </summary>
        [Input("releaseChannel")]
        public Input<string>? ReleaseChannel { get; set; }

        /// <summary>
        /// Config that customers are allowed to define for GDCE system add-ons.
        /// Structure is documented below.
        /// </summary>
        [Input("systemAddonsConfig")]
        public Input<Inputs.ClusterSystemAddonsConfigArgs>? SystemAddonsConfig { get; set; }

        /// <summary>
        /// The target cluster version. For example: "1.5.0".
        /// </summary>
        [Input("targetVersion")]
        public Input<string>? TargetVersion { get; set; }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// RBAC policy that will be applied and managed by GEC.
        /// Structure is documented below.
        /// </summary>
        [Input("authorization")]
        public Input<Inputs.ClusterAuthorizationGetArgs>? Authorization { get; set; }

        [Input("clusterCaCertificate")]
        private Input<string>? _clusterCaCertificate;

        /// <summary>
        /// The PEM-encoded public certificate of the cluster's CA.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        /// </summary>
        public Input<string>? ClusterCaCertificate
        {
            get => _clusterCaCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterCaCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The configuration of the cluster control plane.
        /// Structure is documented below.
        /// </summary>
        [Input("controlPlane")]
        public Input<Inputs.ClusterControlPlaneGetArgs>? ControlPlane { get; set; }

        /// <summary>
        /// Remote control plane disk encryption options. This field is only used when
        /// enabling CMEK support.
        /// Structure is documented below.
        /// </summary>
        [Input("controlPlaneEncryption")]
        public Input<Inputs.ClusterControlPlaneEncryptionGetArgs>? ControlPlaneEncryption { get; set; }

        /// <summary>
        /// The control plane release version.
        /// </summary>
        [Input("controlPlaneVersion")]
        public Input<string>? ControlPlaneVersion { get; set; }

        /// <summary>
        /// (Output)
        /// The time when the maintenance event request was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The default maximum number of pods per node used if a maximum value is not
        /// specified explicitly for a node pool in this cluster. If unspecified, the
        /// Kubernetes default value will be used.
        /// </summary>
        [Input("defaultMaxPodsPerNode")]
        public Input<int>? DefaultMaxPodsPerNode { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The IP address of the Kubernetes API server.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        [Input("externalLoadBalancerIpv4AddressPools")]
        private InputList<string>? _externalLoadBalancerIpv4AddressPools;

        /// <summary>
        /// Address pools for cluster data plane external load balancing.
        /// </summary>
        public InputList<string> ExternalLoadBalancerIpv4AddressPools
        {
            get => _externalLoadBalancerIpv4AddressPools ?? (_externalLoadBalancerIpv4AddressPools = new InputList<string>());
            set => _externalLoadBalancerIpv4AddressPools = value;
        }

        /// <summary>
        /// Fleet related configuration.
        /// Fleets are a Google Cloud concept for logically organizing clusters,
        /// letting you use and manage multi-cluster capabilities and apply
        /// consistent policies across your systems.
        /// Structure is documented below.
        /// </summary>
        [Input("fleet")]
        public Input<Inputs.ClusterFleetGetArgs>? Fleet { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined labels for the edgecloud cluster.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("maintenanceEvents")]
        private InputList<Inputs.ClusterMaintenanceEventGetArgs>? _maintenanceEvents;

        /// <summary>
        /// All the maintenance events scheduled for the cluster, including the ones
        /// ongoing, planned for the future and done in the past (up to 90 days).
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ClusterMaintenanceEventGetArgs> MaintenanceEvents
        {
            get => _maintenanceEvents ?? (_maintenanceEvents = new InputList<Inputs.ClusterMaintenanceEventGetArgs>());
            set => _maintenanceEvents = value;
        }

        /// <summary>
        /// Cluster-wide maintenance policy configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("maintenancePolicy")]
        public Input<Inputs.ClusterMaintenancePolicyGetArgs>? MaintenancePolicy { get; set; }

        /// <summary>
        /// The GDCE cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Fleet related configuration.
        /// Fleets are a Google Cloud concept for logically organizing clusters,
        /// letting you use and manage multi-cluster capabilities and apply
        /// consistent policies across your systems.
        /// Structure is documented below.
        /// </summary>
        [Input("networking")]
        public Input<Inputs.ClusterNetworkingGetArgs>? Networking { get; set; }

        /// <summary>
        /// The lowest release version among all worker nodes. This field can be empty
        /// if the cluster does not have any worker nodes.
        /// </summary>
        [Input("nodeVersion")]
        public Input<string>? NodeVersion { get; set; }

        /// <summary>
        /// The port number of the Kubernetes API server.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The release channel a cluster is subscribed to.
        /// Possible values are: `RELEASE_CHANNEL_UNSPECIFIED`, `NONE`, `REGULAR`.
        /// </summary>
        [Input("releaseChannel")]
        public Input<string>? ReleaseChannel { get; set; }

        /// <summary>
        /// Indicates the status of the cluster.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Config that customers are allowed to define for GDCE system add-ons.
        /// Structure is documented below.
        /// </summary>
        [Input("systemAddonsConfig")]
        public Input<Inputs.ClusterSystemAddonsConfigGetArgs>? SystemAddonsConfig { get; set; }

        /// <summary>
        /// The target cluster version. For example: "1.5.0".
        /// </summary>
        [Input("targetVersion")]
        public Input<string>? TargetVersion { get; set; }

        /// <summary>
        /// (Output)
        /// The time when the maintenance event message was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
