// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Lustre
{
    public static class GetInstance
    {
        /// <summary>
        /// Use this data source to get information about a Lustre instance. For more information see the [API docs](https://cloud.google.com/filestore/docs/lustre/reference/rest/v1/projects.locations.instances).
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("gcp:lustre/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Lustre instance. For more information see the [API docs](https://cloud.google.com/filestore/docs/lustre/reference/rest/v1/projects.locations.instances).
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("gcp:lustre/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a Lustre instance. For more information see the [API docs](https://cloud.google.com/filestore/docs/lustre/reference/rest/v1/projects.locations.instances).
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("gcp:lustre/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The instance id of the Lustre instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The ID of the zone in which the resource belongs. If it is not provided, the provider zone is used.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The instance id of the Lustre instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The ID of the zone in which the resource belongs. If it is not provided, the provider zone is used.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        public readonly string CapacityGib;
        public readonly string CreateTime;
        public readonly string Description;
        public readonly ImmutableDictionary<string, string> EffectiveLabels;
        public readonly string Filesystem;
        public readonly bool GkeSupportEnabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Location;
        public readonly string MountPoint;
        public readonly string Name;
        public readonly string Network;
        public readonly string PerUnitStorageThroughput;
        public readonly string? Project;
        public readonly ImmutableDictionary<string, string> PulumiLabels;
        public readonly string State;
        public readonly string UpdateTime;
        public readonly string? Zone;

        [OutputConstructor]
        private GetInstanceResult(
            string capacityGib,

            string createTime,

            string description,

            ImmutableDictionary<string, string> effectiveLabels,

            string filesystem,

            bool gkeSupportEnabled,

            string id,

            string instanceId,

            ImmutableDictionary<string, string> labels,

            string location,

            string mountPoint,

            string name,

            string network,

            string perUnitStorageThroughput,

            string? project,

            ImmutableDictionary<string, string> pulumiLabels,

            string state,

            string updateTime,

            string? zone)
        {
            CapacityGib = capacityGib;
            CreateTime = createTime;
            Description = description;
            EffectiveLabels = effectiveLabels;
            Filesystem = filesystem;
            GkeSupportEnabled = gkeSupportEnabled;
            Id = id;
            InstanceId = instanceId;
            Labels = labels;
            Location = location;
            MountPoint = mountPoint;
            Name = name;
            Network = network;
            PerUnitStorageThroughput = perUnitStorageThroughput;
            Project = project;
            PulumiLabels = pulumiLabels;
            State = state;
            UpdateTime = updateTime;
            Zone = zone;
        }
    }
}
