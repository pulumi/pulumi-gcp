// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkSecurity.Inputs
{

    public sealed class AuthzPolicyHttpRuleToGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("notOperations")]
        private InputList<Inputs.AuthzPolicyHttpRuleToNotOperationGetArgs>? _notOperations;

        /// <summary>
        /// Describes the negated properties of the targets of a request. Matches requests for operations that do not match the criteria specified in this field. At least one of operations or notOperations must be specified.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AuthzPolicyHttpRuleToNotOperationGetArgs> NotOperations
        {
            get => _notOperations ?? (_notOperations = new InputList<Inputs.AuthzPolicyHttpRuleToNotOperationGetArgs>());
            set => _notOperations = value;
        }

        [Input("operations")]
        private InputList<Inputs.AuthzPolicyHttpRuleToOperationGetArgs>? _operations;

        /// <summary>
        /// Describes properties of one or more targets of a request. At least one of operations or notOperations must be specified. Limited to 5 operations. A match occurs when ANY operation (in operations or notOperations) matches. Within an operation, the match follows AND semantics across fields and OR semantics within a field, i.e. a match occurs when ANY path matches AND ANY header matches and ANY method matches.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.AuthzPolicyHttpRuleToOperationGetArgs> Operations
        {
            get => _operations ?? (_operations = new InputList<Inputs.AuthzPolicyHttpRuleToOperationGetArgs>());
            set => _operations = value;
        }

        public AuthzPolicyHttpRuleToGetArgs()
        {
        }
        public static new AuthzPolicyHttpRuleToGetArgs Empty => new AuthzPolicyHttpRuleToGetArgs();
    }
}
