// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkSecurity
{
    /// <summary>
    /// ## Example Usage
    /// ### Network Security Tls Inspection Policy Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultCaPool = new Gcp.CertificateAuthority.CaPool("defaultCaPool", new()
    ///     {
    ///         Location = "us-central1",
    ///         Tier = "DEVOPS",
    ///         PublishingOptions = new Gcp.CertificateAuthority.Inputs.CaPoolPublishingOptionsArgs
    ///         {
    ///             PublishCaCert = false,
    ///             PublishCrl = false,
    ///         },
    ///         IssuancePolicy = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyArgs
    ///         {
    ///             MaximumLifetime = "1209600s",
    ///             BaselineValues = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesArgs
    ///             {
    ///                 CaOptions = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesCaOptionsArgs
    ///                 {
    ///                     IsCa = false,
    ///                 },
    ///                 KeyUsage = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesKeyUsageArgs
    ///                 {
    ///                     BaseKeyUsage = null,
    ///                     ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageArgs
    ///                     {
    ///                         ServerAuth = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var defaultAuthority = new Gcp.CertificateAuthority.Authority("defaultAuthority", new()
    ///     {
    ///         Pool = defaultCaPool.Name,
    ///         CertificateAuthorityId = "my-basic-certificate-authority",
    ///         Location = "us-central1",
    ///         Lifetime = "86400s",
    ///         Type = "SELF_SIGNED",
    ///         DeletionProtection = false,
    ///         SkipGracePeriod = true,
    ///         IgnoreActiveCertificatesOnDeletion = true,
    ///         Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
    ///         {
    ///             SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
    ///             {
    ///                 Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
    ///                 {
    ///                     Organization = "Test LLC",
    ///                     CommonName = "my-ca",
    ///                 },
    ///             },
    ///             X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
    ///             {
    ///                 CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
    ///                 {
    ///                     IsCa = true,
    ///                 },
    ///                 KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
    ///                 {
    ///                     BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
    ///                     {
    ///                         CertSign = true,
    ///                         CrlSign = true,
    ///                     },
    ///                     ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
    ///                     {
    ///                         ServerAuth = false,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
    ///         {
    ///             Algorithm = "RSA_PKCS1_4096_SHA256",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var nsSa = new Gcp.Projects.ServiceIdentity("nsSa", new()
    ///     {
    ///         Service = "networksecurity.googleapis.com",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var tlsInspectionPermission = new Gcp.CertificateAuthority.CaPoolIamMember("tlsInspectionPermission", new()
    ///     {
    ///         CaPool = defaultCaPool.Id,
    ///         Role = "roles/privateca.certificateManager",
    ///         Member = nsSa.Email.Apply(email =&gt; $"serviceAccount:{email}"),
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    ///     var defaultTlsInspectionPolicy = new Gcp.NetworkSecurity.TlsInspectionPolicy("defaultTlsInspectionPolicy", new()
    ///     {
    ///         Location = "us-central1",
    ///         CaPool = defaultCaPool.Id,
    ///         ExcludePublicCaSet = false,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///         DependsOn = new[]
    ///         {
    ///             defaultCaPool,
    ///             defaultAuthority,
    ///             tlsInspectionPermission,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// TlsInspectionPolicy can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy default projects/{{project}}/locations/{{location}}/tlsInspectionPolicies/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy")]
    public partial class TlsInspectionPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A CA pool resource used to issue interception certificates.
        /// </summary>
        [Output("caPool")]
        public Output<string> CaPool { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the resource was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Free-text description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trustConfig. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trustConfig will be accepted.
        /// </summary>
        [Output("excludePublicCaSet")]
        public Output<bool?> ExcludePublicCaSet { get; private set; } = null!;

        /// <summary>
        /// The location of the tls inspection policy.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Short name of the TlsInspectionPolicy resource to be created.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the resource was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a TlsInspectionPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TlsInspectionPolicy(string name, TlsInspectionPolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy", name, args ?? new TlsInspectionPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TlsInspectionPolicy(string name, Input<string> id, TlsInspectionPolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TlsInspectionPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TlsInspectionPolicy Get(string name, Input<string> id, TlsInspectionPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new TlsInspectionPolicy(name, id, state, options);
        }
    }

    public sealed class TlsInspectionPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A CA pool resource used to issue interception certificates.
        /// </summary>
        [Input("caPool", required: true)]
        public Input<string> CaPool { get; set; } = null!;

        /// <summary>
        /// Free-text description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trustConfig. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trustConfig will be accepted.
        /// </summary>
        [Input("excludePublicCaSet")]
        public Input<bool>? ExcludePublicCaSet { get; set; }

        /// <summary>
        /// The location of the tls inspection policy.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Short name of the TlsInspectionPolicy resource to be created.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public TlsInspectionPolicyArgs()
        {
        }
        public static new TlsInspectionPolicyArgs Empty => new TlsInspectionPolicyArgs();
    }

    public sealed class TlsInspectionPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A CA pool resource used to issue interception certificates.
        /// </summary>
        [Input("caPool")]
        public Input<string>? CaPool { get; set; }

        /// <summary>
        /// The timestamp when the resource was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Free-text description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trustConfig. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trustConfig will be accepted.
        /// </summary>
        [Input("excludePublicCaSet")]
        public Input<bool>? ExcludePublicCaSet { get; set; }

        /// <summary>
        /// The location of the tls inspection policy.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Short name of the TlsInspectionPolicy resource to be created.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The timestamp when the resource was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public TlsInspectionPolicyState()
        {
        }
        public static new TlsInspectionPolicyState Empty => new TlsInspectionPolicyState();
    }
}
