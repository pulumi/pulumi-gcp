// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkSecurity
{
    /// <summary>
    /// The TlsInspectionPolicy resource contains references to CA pools in Certificate Authority Service and associated metadata.
    /// 
    /// To get more information about TlsInspectionPolicy, see:
    /// 
    /// * [API documentation](https://cloud.google.com/secure-web-proxy/docs/reference/network-security/rest/v1/projects.locations.tlsInspectionPolicies)
    /// * How-to Guides
    ///     * [Use TlsInspectionPolicy](https://cloud.google.com/secure-web-proxy/docs/tls-inspection-overview)
    /// 
    /// ## Example Usage
    /// 
    /// ### Network Security Tls Inspection Policy Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CertificateAuthority.CaPool("default", new()
    ///     {
    ///         Name = "my-basic-ca-pool",
    ///         Location = "us-central1",
    ///         Tier = "DEVOPS",
    ///         PublishingOptions = new Gcp.CertificateAuthority.Inputs.CaPoolPublishingOptionsArgs
    ///         {
    ///             PublishCaCert = false,
    ///             PublishCrl = false,
    ///         },
    ///         IssuancePolicy = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyArgs
    ///         {
    ///             MaximumLifetime = "1209600s",
    ///             BaselineValues = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesArgs
    ///             {
    ///                 CaOptions = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesCaOptionsArgs
    ///                 {
    ///                     IsCa = false,
    ///                 },
    ///                 KeyUsage = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesKeyUsageArgs
    ///                 {
    ///                     BaseKeyUsage = null,
    ///                     ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageArgs
    ///                     {
    ///                         ServerAuth = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultAuthority = new Gcp.CertificateAuthority.Authority("default", new()
    ///     {
    ///         Pool = @default.Name,
    ///         CertificateAuthorityId = "my-basic-certificate-authority",
    ///         Location = "us-central1",
    ///         Lifetime = "86400s",
    ///         Type = "SELF_SIGNED",
    ///         DeletionProtection = false,
    ///         SkipGracePeriod = true,
    ///         IgnoreActiveCertificatesOnDeletion = true,
    ///         Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
    ///         {
    ///             SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
    ///             {
    ///                 Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
    ///                 {
    ///                     Organization = "Test LLC",
    ///                     CommonName = "my-ca",
    ///                 },
    ///             },
    ///             X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
    ///             {
    ///                 CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
    ///                 {
    ///                     IsCa = true,
    ///                 },
    ///                 KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
    ///                 {
    ///                     BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
    ///                     {
    ///                         CertSign = true,
    ///                         CrlSign = true,
    ///                     },
    ///                     ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
    ///                     {
    ///                         ServerAuth = false,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
    ///         {
    ///             Algorithm = "RSA_PKCS1_4096_SHA256",
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var tlsInspectionPermission = new Gcp.CertificateAuthority.CaPoolIamMember("tls_inspection_permission", new()
    ///     {
    ///         CaPool = @default.Id,
    ///         Role = "roles/privateca.certificateManager",
    ///         Member = $"serviceAccount:service-{project.Apply(getProjectResult =&gt; getProjectResult.Number)}@gcp-sa-networksecurity.iam.gserviceaccount.com",
    ///     });
    /// 
    ///     var defaultTlsInspectionPolicy = new Gcp.NetworkSecurity.TlsInspectionPolicy("default", new()
    ///     {
    ///         Name = "my-tls-inspection-policy",
    ///         Location = "us-central1",
    ///         CaPool = @default.Id,
    ///         ExcludePublicCaSet = false,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             @default,
    ///             defaultAuthority,
    ///             tlsInspectionPermission,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Security Tls Inspection Policy Custom
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.CertificateAuthority.CaPool("default", new()
    ///     {
    ///         Name = "my-basic-ca-pool",
    ///         Location = "us-central1",
    ///         Tier = "DEVOPS",
    ///         PublishingOptions = new Gcp.CertificateAuthority.Inputs.CaPoolPublishingOptionsArgs
    ///         {
    ///             PublishCaCert = false,
    ///             PublishCrl = false,
    ///         },
    ///         IssuancePolicy = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyArgs
    ///         {
    ///             MaximumLifetime = "1209600s",
    ///             BaselineValues = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesArgs
    ///             {
    ///                 CaOptions = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesCaOptionsArgs
    ///                 {
    ///                     IsCa = false,
    ///                 },
    ///                 KeyUsage = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesKeyUsageArgs
    ///                 {
    ///                     BaseKeyUsage = null,
    ///                     ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.CaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageArgs
    ///                     {
    ///                         ServerAuth = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultAuthority = new Gcp.CertificateAuthority.Authority("default", new()
    ///     {
    ///         Pool = @default.Name,
    ///         CertificateAuthorityId = "my-basic-certificate-authority",
    ///         Location = "us-central1",
    ///         Lifetime = "86400s",
    ///         Type = "SELF_SIGNED",
    ///         DeletionProtection = false,
    ///         SkipGracePeriod = true,
    ///         IgnoreActiveCertificatesOnDeletion = true,
    ///         Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
    ///         {
    ///             SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
    ///             {
    ///                 Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
    ///                 {
    ///                     Organization = "Test LLC",
    ///                     CommonName = "my-ca",
    ///                 },
    ///             },
    ///             X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
    ///             {
    ///                 CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
    ///                 {
    ///                     IsCa = true,
    ///                 },
    ///                 KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
    ///                 {
    ///                     BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
    ///                     {
    ///                         CertSign = true,
    ///                         CrlSign = true,
    ///                     },
    ///                     ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
    ///                     {
    ///                         ServerAuth = false,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
    ///         {
    ///             Algorithm = "RSA_PKCS1_4096_SHA256",
    ///         },
    ///     });
    /// 
    ///     var nsSa = new Gcp.Projects.ServiceIdentity("ns_sa", new()
    ///     {
    ///         Service = "networksecurity.googleapis.com",
    ///     });
    /// 
    ///     var defaultCaPoolIamMember = new Gcp.CertificateAuthority.CaPoolIamMember("default", new()
    ///     {
    ///         CaPool = @default.Id,
    ///         Role = "roles/privateca.certificateManager",
    ///         Member = nsSa.Member,
    ///     });
    /// 
    ///     var defaultTrustConfig = new Gcp.CertificateManager.TrustConfig("default", new()
    ///     {
    ///         Name = "my-trust-config",
    ///         Description = "sample trust config description",
    ///         Location = "us-central1",
    ///         TrustStores = new[]
    ///         {
    ///             new Gcp.CertificateManager.Inputs.TrustConfigTrustStoreArgs
    ///             {
    ///                 TrustAnchors = new[]
    ///                 {
    ///                     new Gcp.CertificateManager.Inputs.TrustConfigTrustStoreTrustAnchorArgs
    ///                     {
    ///                         PemCertificate = Std.File.Invoke(new()
    ///                         {
    ///                             Input = "test-fixtures/ca_cert.pem",
    ///                         }).Apply(invoke =&gt; invoke.Result),
    ///                     },
    ///                 },
    ///                 IntermediateCas = new[]
    ///                 {
    ///                     new Gcp.CertificateManager.Inputs.TrustConfigTrustStoreIntermediateCaArgs
    ///                     {
    ///                         PemCertificate = Std.File.Invoke(new()
    ///                         {
    ///                             Input = "test-fixtures/ca_cert.pem",
    ///                         }).Apply(invoke =&gt; invoke.Result),
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultTlsInspectionPolicy = new Gcp.NetworkSecurity.TlsInspectionPolicy("default", new()
    ///     {
    ///         Name = "my-tls-inspection-policy",
    ///         Location = "us-central1",
    ///         CaPool = @default.Id,
    ///         ExcludePublicCaSet = false,
    ///         MinTlsVersion = "TLS_1_0",
    ///         TrustConfig = defaultTrustConfig.Id,
    ///         TlsFeatureProfile = "PROFILE_CUSTOM",
    ///         CustomTlsFeatures = new[]
    ///         {
    ///             "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
    ///             "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
    ///             "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
    ///             "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
    ///             "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
    ///             "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
    ///             "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
    ///             "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
    ///             "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
    ///             "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
    ///             "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
    ///             "TLS_RSA_WITH_AES_128_CBC_SHA",
    ///             "TLS_RSA_WITH_AES_128_GCM_SHA256",
    ///             "TLS_RSA_WITH_AES_256_CBC_SHA",
    ///             "TLS_RSA_WITH_AES_256_GCM_SHA384",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             defaultAuthority,
    ///             defaultCaPoolIamMember,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// TlsInspectionPolicy can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/tlsInspectionPolicies/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, TlsInspectionPolicy can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy default projects/{{project}}/locations/{{location}}/tlsInspectionPolicies/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy")]
    public partial class TlsInspectionPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A CA pool resource used to issue interception certificates.
        /// </summary>
        [Output("caPool")]
        public Output<string> CaPool { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the resource was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// List of custom TLS cipher suites selected. This field is valid only if the selected tls_feature_profile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.
        /// </summary>
        [Output("customTlsFeatures")]
        public Output<ImmutableArray<string>> CustomTlsFeatures { get; private set; } = null!;

        /// <summary>
        /// Free-text description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trustConfig. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trustConfig will be accepted.
        /// </summary>
        [Output("excludePublicCaSet")]
        public Output<bool?> ExcludePublicCaSet { get; private set; } = null!;

        /// <summary>
        /// The location of the tls inspection policy.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
        /// Default value is `TLS_VERSION_UNSPECIFIED`.
        /// Possible values are: `TLS_VERSION_UNSPECIFIED`, `TLS_1_0`, `TLS_1_1`, `TLS_1_2`, `TLS_1_3`.
        /// </summary>
        [Output("minTlsVersion")]
        public Output<string?> MinTlsVersion { get; private set; } = null!;

        /// <summary>
        /// Short name of the TlsInspectionPolicy resource to be created.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\"PROFILE_COMPATIBLE\"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
        /// Default value is `PROFILE_UNSPECIFIED`.
        /// Possible values are: `PROFILE_UNSPECIFIED`, `PROFILE_COMPATIBLE`, `PROFILE_MODERN`, `PROFILE_RESTRICTED`, `PROFILE_CUSTOM`.
        /// </summary>
        [Output("tlsFeatureProfile")]
        public Output<string?> TlsFeatureProfile { get; private set; } = null!;

        /// <summary>
        /// A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \"projects/{project}/locations/{location}/trustConfigs/{trust_config}\". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Trust config and the TLS inspection policy must be in the same region. Note that Secure Web Proxy does not yet honor this field.
        /// </summary>
        [Output("trustConfig")]
        public Output<string?> TrustConfig { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the resource was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a TlsInspectionPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TlsInspectionPolicy(string name, TlsInspectionPolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy", name, args ?? new TlsInspectionPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TlsInspectionPolicy(string name, Input<string> id, TlsInspectionPolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TlsInspectionPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TlsInspectionPolicy Get(string name, Input<string> id, TlsInspectionPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new TlsInspectionPolicy(name, id, state, options);
        }
    }

    public sealed class TlsInspectionPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A CA pool resource used to issue interception certificates.
        /// </summary>
        [Input("caPool", required: true)]
        public Input<string> CaPool { get; set; } = null!;

        [Input("customTlsFeatures")]
        private InputList<string>? _customTlsFeatures;

        /// <summary>
        /// List of custom TLS cipher suites selected. This field is valid only if the selected tls_feature_profile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.
        /// </summary>
        public InputList<string> CustomTlsFeatures
        {
            get => _customTlsFeatures ?? (_customTlsFeatures = new InputList<string>());
            set => _customTlsFeatures = value;
        }

        /// <summary>
        /// Free-text description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trustConfig. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trustConfig will be accepted.
        /// </summary>
        [Input("excludePublicCaSet")]
        public Input<bool>? ExcludePublicCaSet { get; set; }

        /// <summary>
        /// The location of the tls inspection policy.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
        /// Default value is `TLS_VERSION_UNSPECIFIED`.
        /// Possible values are: `TLS_VERSION_UNSPECIFIED`, `TLS_1_0`, `TLS_1_1`, `TLS_1_2`, `TLS_1_3`.
        /// </summary>
        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        /// <summary>
        /// Short name of the TlsInspectionPolicy resource to be created.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\"PROFILE_COMPATIBLE\"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
        /// Default value is `PROFILE_UNSPECIFIED`.
        /// Possible values are: `PROFILE_UNSPECIFIED`, `PROFILE_COMPATIBLE`, `PROFILE_MODERN`, `PROFILE_RESTRICTED`, `PROFILE_CUSTOM`.
        /// </summary>
        [Input("tlsFeatureProfile")]
        public Input<string>? TlsFeatureProfile { get; set; }

        /// <summary>
        /// A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \"projects/{project}/locations/{location}/trustConfigs/{trust_config}\". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Trust config and the TLS inspection policy must be in the same region. Note that Secure Web Proxy does not yet honor this field.
        /// </summary>
        [Input("trustConfig")]
        public Input<string>? TrustConfig { get; set; }

        public TlsInspectionPolicyArgs()
        {
        }
        public static new TlsInspectionPolicyArgs Empty => new TlsInspectionPolicyArgs();
    }

    public sealed class TlsInspectionPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A CA pool resource used to issue interception certificates.
        /// </summary>
        [Input("caPool")]
        public Input<string>? CaPool { get; set; }

        /// <summary>
        /// The timestamp when the resource was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("customTlsFeatures")]
        private InputList<string>? _customTlsFeatures;

        /// <summary>
        /// List of custom TLS cipher suites selected. This field is valid only if the selected tls_feature_profile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.
        /// </summary>
        public InputList<string> CustomTlsFeatures
        {
            get => _customTlsFeatures ?? (_customTlsFeatures = new InputList<string>());
            set => _customTlsFeatures = value;
        }

        /// <summary>
        /// Free-text description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trustConfig. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trustConfig will be accepted.
        /// </summary>
        [Input("excludePublicCaSet")]
        public Input<bool>? ExcludePublicCaSet { get; set; }

        /// <summary>
        /// The location of the tls inspection policy.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
        /// Default value is `TLS_VERSION_UNSPECIFIED`.
        /// Possible values are: `TLS_VERSION_UNSPECIFIED`, `TLS_1_0`, `TLS_1_1`, `TLS_1_2`, `TLS_1_3`.
        /// </summary>
        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        /// <summary>
        /// Short name of the TlsInspectionPolicy resource to be created.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\"PROFILE_COMPATIBLE\"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
        /// Default value is `PROFILE_UNSPECIFIED`.
        /// Possible values are: `PROFILE_UNSPECIFIED`, `PROFILE_COMPATIBLE`, `PROFILE_MODERN`, `PROFILE_RESTRICTED`, `PROFILE_CUSTOM`.
        /// </summary>
        [Input("tlsFeatureProfile")]
        public Input<string>? TlsFeatureProfile { get; set; }

        /// <summary>
        /// A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \"projects/{project}/locations/{location}/trustConfigs/{trust_config}\". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Trust config and the TLS inspection policy must be in the same region. Note that Secure Web Proxy does not yet honor this field.
        /// </summary>
        [Input("trustConfig")]
        public Input<string>? TrustConfig { get; set; }

        /// <summary>
        /// The timestamp when the resource was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public TlsInspectionPolicyState()
        {
        }
        public static new TlsInspectionPolicyState Empty => new TlsInspectionPolicyState();
    }
}
