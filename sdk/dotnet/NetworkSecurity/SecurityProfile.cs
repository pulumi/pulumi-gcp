// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkSecurity
{
    /// <summary>
    /// A security profile defines the behavior associated to a profile type.
    /// 
    /// To get more information about SecurityProfile, see:
    /// 
    /// * [API documentation](https://cloud.google.com/firewall/docs/reference/network-security/rest/v1/organizations.locations.securityProfiles)
    /// * How-to Guides
    ///     * [Create and manage security profiles](https://cloud.google.com/firewall/docs/configure-security-profiles)
    /// 
    /// ## Example Usage
    /// 
    /// ### Network Security Security Profile Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.NetworkSecurity.SecurityProfile("default", new()
    ///     {
    ///         Name = "my-security-profile",
    ///         Parent = "organizations/123456789",
    ///         Description = "my description",
    ///         Type = "THREAT_PREVENTION",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Security Security Profile Overrides
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.NetworkSecurity.SecurityProfile("default", new()
    ///     {
    ///         Name = "my-security-profile",
    ///         Parent = "organizations/123456789",
    ///         Description = "my description",
    ///         Type = "THREAT_PREVENTION",
    ///         ThreatPreventionProfile = new Gcp.NetworkSecurity.Inputs.SecurityProfileThreatPreventionProfileArgs
    ///         {
    ///             SeverityOverrides = new[]
    ///             {
    ///                 new Gcp.NetworkSecurity.Inputs.SecurityProfileThreatPreventionProfileSeverityOverrideArgs
    ///                 {
    ///                     Action = "ALLOW",
    ///                     Severity = "INFORMATIONAL",
    ///                 },
    ///                 new Gcp.NetworkSecurity.Inputs.SecurityProfileThreatPreventionProfileSeverityOverrideArgs
    ///                 {
    ///                     Action = "DENY",
    ///                     Severity = "HIGH",
    ///                 },
    ///             },
    ///             ThreatOverrides = new[]
    ///             {
    ///                 new Gcp.NetworkSecurity.Inputs.SecurityProfileThreatPreventionProfileThreatOverrideArgs
    ///                 {
    ///                     Action = "ALLOW",
    ///                     ThreatId = "280647",
    ///                 },
    ///             },
    ///             AntivirusOverrides = new[]
    ///             {
    ///                 new Gcp.NetworkSecurity.Inputs.SecurityProfileThreatPreventionProfileAntivirusOverrideArgs
    ///                 {
    ///                     Protocol = "SMTP",
    ///                     Action = "ALLOW",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Security Security Profile Mirroring
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "my-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var defaultMirroringDeploymentGroup = new Gcp.NetworkSecurity.MirroringDeploymentGroup("default", new()
    ///     {
    ///         MirroringDeploymentGroupId = "my-dg",
    ///         Location = "global",
    ///         Network = @default.Id,
    ///     });
    /// 
    ///     var defaultMirroringEndpointGroup = new Gcp.NetworkSecurity.MirroringEndpointGroup("default", new()
    ///     {
    ///         MirroringEndpointGroupId = "my-eg",
    ///         Location = "global",
    ///         MirroringDeploymentGroup = defaultMirroringDeploymentGroup.Id,
    ///     });
    /// 
    ///     var defaultSecurityProfile = new Gcp.NetworkSecurity.SecurityProfile("default", new()
    ///     {
    ///         Name = "my-security-profile",
    ///         Parent = "organizations/123456789",
    ///         Description = "my description",
    ///         Type = "CUSTOM_MIRRORING",
    ///         CustomMirroringProfile = new Gcp.NetworkSecurity.Inputs.SecurityProfileCustomMirroringProfileArgs
    ///         {
    ///             MirroringEndpointGroup = defaultMirroringEndpointGroup.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Security Security Profile Intercept
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.Compute.Network("default", new()
    ///     {
    ///         Name = "my-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var defaultInterceptDeploymentGroup = new Gcp.NetworkSecurity.InterceptDeploymentGroup("default", new()
    ///     {
    ///         InterceptDeploymentGroupId = "my-dg",
    ///         Location = "global",
    ///         Network = @default.Id,
    ///     });
    /// 
    ///     var defaultInterceptEndpointGroup = new Gcp.NetworkSecurity.InterceptEndpointGroup("default", new()
    ///     {
    ///         InterceptEndpointGroupId = "my-eg",
    ///         Location = "global",
    ///         InterceptDeploymentGroup = defaultInterceptDeploymentGroup.Id,
    ///     });
    /// 
    ///     var defaultSecurityProfile = new Gcp.NetworkSecurity.SecurityProfile("default", new()
    ///     {
    ///         Name = "my-security-profile",
    ///         Parent = "organizations/123456789",
    ///         Description = "my description",
    ///         Type = "CUSTOM_INTERCEPT",
    ///         CustomInterceptProfile = new Gcp.NetworkSecurity.Inputs.SecurityProfileCustomInterceptProfileArgs
    ///         {
    ///             InterceptEndpointGroup = defaultInterceptEndpointGroup.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SecurityProfile can be imported using any of these accepted formats:
    /// 
    /// * `{{parent}}/locations/{{location}}/securityProfiles/{{name}}`
    /// 
    /// When using the `pulumi import` command, SecurityProfile can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/securityProfile:SecurityProfile default {{parent}}/locations/{{location}}/securityProfiles/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networksecurity/securityProfile:SecurityProfile")]
    public partial class SecurityProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time the security profile was created in UTC.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The configuration for defining the Intercept Endpoint Group used to
        /// intercept traffic to third-party firewall appliances.
        /// Structure is documented below.
        /// </summary>
        [Output("customInterceptProfile")]
        public Output<Outputs.SecurityProfileCustomInterceptProfile?> CustomInterceptProfile { get; private set; } = null!;

        /// <summary>
        /// The configuration for defining the Mirroring Endpoint Group used to
        /// mirror traffic to third-party collectors.
        /// Structure is documented below.
        /// </summary>
        [Output("customMirroringProfile")]
        public Output<Outputs.SecurityProfileCustomMirroringProfile?> CustomMirroringProfile { get; private set; } = null!;

        /// <summary>
        /// An optional description of the security profile. The Max length is 512 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// This checksum is computed by the server based on the value of other fields,
        /// and may be sent on update and delete requests to ensure the client has an up-to-date
        /// value before proceeding.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// A map of key/value label pairs to assign to the resource.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location of the security profile.
        /// The default value is `global`.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the security profile resource.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the parent this security profile belongs to.
        /// Format: organizations/{organization_id}.
        /// </summary>
        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Server-defined URL of this resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// The threat prevention configuration for the security profile.
        /// Structure is documented below.
        /// </summary>
        [Output("threatPreventionProfile")]
        public Output<Outputs.SecurityProfileThreatPreventionProfile?> ThreatPreventionProfile { get; private set; } = null!;

        /// <summary>
        /// The type of security profile.
        /// Possible values are: `THREAT_PREVENTION`, `CUSTOM_MIRRORING`, `CUSTOM_INTERCEPT`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Time the security profile was updated in UTC.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityProfile(string name, SecurityProfileArgs args, CustomResourceOptions? options = null)
            : base("gcp:networksecurity/securityProfile:SecurityProfile", name, args ?? new SecurityProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityProfile(string name, Input<string> id, SecurityProfileState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networksecurity/securityProfile:SecurityProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityProfile Get(string name, Input<string> id, SecurityProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityProfile(name, id, state, options);
        }
    }

    public sealed class SecurityProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration for defining the Intercept Endpoint Group used to
        /// intercept traffic to third-party firewall appliances.
        /// Structure is documented below.
        /// </summary>
        [Input("customInterceptProfile")]
        public Input<Inputs.SecurityProfileCustomInterceptProfileArgs>? CustomInterceptProfile { get; set; }

        /// <summary>
        /// The configuration for defining the Mirroring Endpoint Group used to
        /// mirror traffic to third-party collectors.
        /// Structure is documented below.
        /// </summary>
        [Input("customMirroringProfile")]
        public Input<Inputs.SecurityProfileCustomMirroringProfileArgs>? CustomMirroringProfile { get; set; }

        /// <summary>
        /// An optional description of the security profile. The Max length is 512 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of key/value label pairs to assign to the resource.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the security profile.
        /// The default value is `global`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the security profile resource.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the parent this security profile belongs to.
        /// Format: organizations/{organization_id}.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// The threat prevention configuration for the security profile.
        /// Structure is documented below.
        /// </summary>
        [Input("threatPreventionProfile")]
        public Input<Inputs.SecurityProfileThreatPreventionProfileArgs>? ThreatPreventionProfile { get; set; }

        /// <summary>
        /// The type of security profile.
        /// Possible values are: `THREAT_PREVENTION`, `CUSTOM_MIRRORING`, `CUSTOM_INTERCEPT`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public SecurityProfileArgs()
        {
        }
        public static new SecurityProfileArgs Empty => new SecurityProfileArgs();
    }

    public sealed class SecurityProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time the security profile was created in UTC.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The configuration for defining the Intercept Endpoint Group used to
        /// intercept traffic to third-party firewall appliances.
        /// Structure is documented below.
        /// </summary>
        [Input("customInterceptProfile")]
        public Input<Inputs.SecurityProfileCustomInterceptProfileGetArgs>? CustomInterceptProfile { get; set; }

        /// <summary>
        /// The configuration for defining the Mirroring Endpoint Group used to
        /// mirror traffic to third-party collectors.
        /// Structure is documented below.
        /// </summary>
        [Input("customMirroringProfile")]
        public Input<Inputs.SecurityProfileCustomMirroringProfileGetArgs>? CustomMirroringProfile { get; set; }

        /// <summary>
        /// An optional description of the security profile. The Max length is 512 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// This checksum is computed by the server based on the value of other fields,
        /// and may be sent on update and delete requests to ensure the client has an up-to-date
        /// value before proceeding.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of key/value label pairs to assign to the resource.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the security profile.
        /// The default value is `global`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the security profile resource.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the parent this security profile belongs to.
        /// Format: organizations/{organization_id}.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Server-defined URL of this resource.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// The threat prevention configuration for the security profile.
        /// Structure is documented below.
        /// </summary>
        [Input("threatPreventionProfile")]
        public Input<Inputs.SecurityProfileThreatPreventionProfileGetArgs>? ThreatPreventionProfile { get; set; }

        /// <summary>
        /// The type of security profile.
        /// Possible values are: `THREAT_PREVENTION`, `CUSTOM_MIRRORING`, `CUSTOM_INTERCEPT`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Time the security profile was updated in UTC.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public SecurityProfileState()
        {
        }
        public static new SecurityProfileState Empty => new SecurityProfileState();
    }
}
