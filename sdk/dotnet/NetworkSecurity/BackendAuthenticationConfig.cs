// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkSecurity
{
    /// <summary>
    /// BackendAuthenticationConfig groups the TrustConfig together with other settings that control how the load balancer authenticates, and expresses its identity to the backend.
    /// 
    /// To get more information about BackendAuthenticationConfig, see:
    /// * How-to Guides
    ///     * [Backend mTLS](https://cloud.google.com/load-balancing/docs/backend-authenticated-tls-backend-mtls#backend-authentication-config)
    /// 
    /// ## Example Usage
    /// 
    /// ### Network Security Backend Authentication Config Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Gcp.NetworkSecurity.BackendAuthenticationConfig("default", new()
    ///     {
    ///         Name = "my-backend-authentication-config",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Description = "my description",
    ///         WellKnownRoots = "PUBLIC_ROOTS",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Security Backend Authentication Config Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var certificate = new Gcp.CertificateManager.Certificate("certificate", new()
    ///     {
    ///         Name = "my-certificate",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Location = "global",
    ///         SelfManaged = new Gcp.CertificateManager.Inputs.CertificateSelfManagedArgs
    ///         {
    ///             PemCertificate = Std.File.Invoke(new()
    ///             {
    ///                 Input = "test-fixtures/cert.pem",
    ///             }).Apply(invoke =&gt; invoke.Result),
    ///             PemPrivateKey = Std.File.Invoke(new()
    ///             {
    ///                 Input = "test-fixtures/key.pem",
    ///             }).Apply(invoke =&gt; invoke.Result),
    ///         },
    ///         Scope = "CLIENT_AUTH",
    ///     });
    /// 
    ///     var trustConfig = new Gcp.CertificateManager.TrustConfig("trust_config", new()
    ///     {
    ///         Name = "my-trust-config",
    ///         Description = "sample description for the trust config",
    ///         Location = "global",
    ///         TrustStores = new[]
    ///         {
    ///             new Gcp.CertificateManager.Inputs.TrustConfigTrustStoreArgs
    ///             {
    ///                 TrustAnchors = new[]
    ///                 {
    ///                     new Gcp.CertificateManager.Inputs.TrustConfigTrustStoreTrustAnchorArgs
    ///                     {
    ///                         PemCertificate = Std.File.Invoke(new()
    ///                         {
    ///                             Input = "test-fixtures/cert.pem",
    ///                         }).Apply(invoke =&gt; invoke.Result),
    ///                     },
    ///                 },
    ///                 IntermediateCas = new[]
    ///                 {
    ///                     new Gcp.CertificateManager.Inputs.TrustConfigTrustStoreIntermediateCaArgs
    ///                     {
    ///                         PemCertificate = Std.File.Invoke(new()
    ///                         {
    ///                             Input = "test-fixtures/cert.pem",
    ///                         }).Apply(invoke =&gt; invoke.Result),
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    ///     var @default = new Gcp.NetworkSecurity.BackendAuthenticationConfig("default", new()
    ///     {
    ///         Name = "my-backend-authentication-config",
    ///         Labels = 
    ///         {
    ///             { "bar", "foo" },
    ///         },
    ///         Location = "global",
    ///         Description = "my description",
    ///         WellKnownRoots = "PUBLIC_ROOTS",
    ///         ClientCertificate = certificate.Id,
    ///         TrustConfig = trustConfig.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Backend Service Tls Settings
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultHealthCheck = new Gcp.Compute.HealthCheck("default", new()
    ///     {
    ///         Name = "health-check",
    ///         HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
    ///         {
    ///             Port = 80,
    ///         },
    ///     });
    /// 
    ///     var defaultBackendAuthenticationConfig = new Gcp.NetworkSecurity.BackendAuthenticationConfig("default", new()
    ///     {
    ///         Name = "authentication",
    ///         WellKnownRoots = "PUBLIC_ROOTS",
    ///     });
    /// 
    ///     var @default = new Gcp.Compute.BackendService("default", new()
    ///     {
    ///         Name = "backend-service",
    ///         HealthChecks = defaultHealthCheck.Id,
    ///         LoadBalancingScheme = "EXTERNAL_MANAGED",
    ///         Protocol = "HTTPS",
    ///         TlsSettings = new Gcp.Compute.Inputs.BackendServiceTlsSettingsArgs
    ///         {
    ///             Sni = "example.com",
    ///             SubjectAltNames = new[]
    ///             {
    ///                 new Gcp.Compute.Inputs.BackendServiceTlsSettingsSubjectAltNameArgs
    ///                 {
    ///                     DnsName = "example.com",
    ///                 },
    ///                 new Gcp.Compute.Inputs.BackendServiceTlsSettingsSubjectAltNameArgs
    ///                 {
    ///                     UniformResourceIdentifier = "https://example.com",
    ///                 },
    ///             },
    ///             AuthenticationConfig = defaultBackendAuthenticationConfig.Id.Apply(id =&gt; $"//networksecurity.googleapis.com/{id}"),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// BackendAuthenticationConfig can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/backendAuthenticationConfigs/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, BackendAuthenticationConfig can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig default projects/{{project}}/locations/{{location}}/backendAuthenticationConfigs/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig")]
    public partial class BackendAuthenticationConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Reference to a Certificate resource from the certificatemanager.googleapis.com namespace.
        /// Used by a BackendService to negotiate mTLS when the backend connection uses TLS and the backend requests a client certificate. Must have a CLIENT_AUTH scope.
        /// </summary>
        [Output("clientCertificate")]
        public Output<string?> ClientCertificate { get; private set; } = null!;

        /// <summary>
        /// Time the BackendAuthenticationConfig was created in UTC.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Set of label tags associated with the BackendAuthenticationConfig resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location of the backend authentication config.
        /// The default value is `Global`.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Name of the BackendAuthenticationConfig resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Reference to a TrustConfig resource from the certificatemanager.googleapis.com namespace.
        /// A BackendService uses the chain of trust represented by this TrustConfig, if specified, to validate the server certificates presented by the backend. Required unless wellKnownRoots is set to PUBLIC_ROOTS.
        /// </summary>
        [Output("trustConfig")]
        public Output<string?> TrustConfig { get; private set; } = null!;

        /// <summary>
        /// Time the BackendAuthenticationConfig was updated in UTC.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Well known roots to use for server certificate validation. If set to NONE, the BackendService will only validate server certificates against roots specified in TrustConfig.
        /// If set to PUBLIC_ROOTS, the BackendService uses a set of well-known public roots, in addition to any roots specified in the trustConfig field, when validating the server certificates presented by the backend.
        /// Validation with these roots is only considered when the TlsSettings.sni field in the BackendService is set. The well-known roots are a set of root CAs managed by Google. CAs in this set can be added or removed without notice.
        /// Possible values are: `NONE`, `PUBLIC_ROOTS`.
        /// </summary>
        [Output("wellKnownRoots")]
        public Output<string?> WellKnownRoots { get; private set; } = null!;


        /// <summary>
        /// Create a BackendAuthenticationConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackendAuthenticationConfig(string name, BackendAuthenticationConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig", name, args ?? new BackendAuthenticationConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackendAuthenticationConfig(string name, Input<string> id, BackendAuthenticationConfigState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackendAuthenticationConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackendAuthenticationConfig Get(string name, Input<string> id, BackendAuthenticationConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new BackendAuthenticationConfig(name, id, state, options);
        }
    }

    public sealed class BackendAuthenticationConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Reference to a Certificate resource from the certificatemanager.googleapis.com namespace.
        /// Used by a BackendService to negotiate mTLS when the backend connection uses TLS and the backend requests a client certificate. Must have a CLIENT_AUTH scope.
        /// </summary>
        [Input("clientCertificate")]
        public Input<string>? ClientCertificate { get; set; }

        /// <summary>
        /// A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the BackendAuthenticationConfig resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the backend authentication config.
        /// The default value is `Global`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the BackendAuthenticationConfig resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Reference to a TrustConfig resource from the certificatemanager.googleapis.com namespace.
        /// A BackendService uses the chain of trust represented by this TrustConfig, if specified, to validate the server certificates presented by the backend. Required unless wellKnownRoots is set to PUBLIC_ROOTS.
        /// </summary>
        [Input("trustConfig")]
        public Input<string>? TrustConfig { get; set; }

        /// <summary>
        /// Well known roots to use for server certificate validation. If set to NONE, the BackendService will only validate server certificates against roots specified in TrustConfig.
        /// If set to PUBLIC_ROOTS, the BackendService uses a set of well-known public roots, in addition to any roots specified in the trustConfig field, when validating the server certificates presented by the backend.
        /// Validation with these roots is only considered when the TlsSettings.sni field in the BackendService is set. The well-known roots are a set of root CAs managed by Google. CAs in this set can be added or removed without notice.
        /// Possible values are: `NONE`, `PUBLIC_ROOTS`.
        /// </summary>
        [Input("wellKnownRoots")]
        public Input<string>? WellKnownRoots { get; set; }

        public BackendAuthenticationConfigArgs()
        {
        }
        public static new BackendAuthenticationConfigArgs Empty => new BackendAuthenticationConfigArgs();
    }

    public sealed class BackendAuthenticationConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Reference to a Certificate resource from the certificatemanager.googleapis.com namespace.
        /// Used by a BackendService to negotiate mTLS when the backend connection uses TLS and the backend requests a client certificate. Must have a CLIENT_AUTH scope.
        /// </summary>
        [Input("clientCertificate")]
        public Input<string>? ClientCertificate { get; set; }

        /// <summary>
        /// Time the BackendAuthenticationConfig was created in UTC.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of label tags associated with the BackendAuthenticationConfig resource.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `EffectiveLabels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the backend authentication config.
        /// The default value is `Global`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the BackendAuthenticationConfig resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Reference to a TrustConfig resource from the certificatemanager.googleapis.com namespace.
        /// A BackendService uses the chain of trust represented by this TrustConfig, if specified, to validate the server certificates presented by the backend. Required unless wellKnownRoots is set to PUBLIC_ROOTS.
        /// </summary>
        [Input("trustConfig")]
        public Input<string>? TrustConfig { get; set; }

        /// <summary>
        /// Time the BackendAuthenticationConfig was updated in UTC.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// Well known roots to use for server certificate validation. If set to NONE, the BackendService will only validate server certificates against roots specified in TrustConfig.
        /// If set to PUBLIC_ROOTS, the BackendService uses a set of well-known public roots, in addition to any roots specified in the trustConfig field, when validating the server certificates presented by the backend.
        /// Validation with these roots is only considered when the TlsSettings.sni field in the BackendService is set. The well-known roots are a set of root CAs managed by Google. CAs in this set can be added or removed without notice.
        /// Possible values are: `NONE`, `PUBLIC_ROOTS`.
        /// </summary>
        [Input("wellKnownRoots")]
        public Input<string>? WellKnownRoots { get; set; }

        public BackendAuthenticationConfigState()
        {
        }
        public static new BackendAuthenticationConfigState Empty => new BackendAuthenticationConfigState();
    }
}
