// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkSecurity
{
    /// <summary>
    /// A deployment group aggregates many zonal mirroring backends (deployments)
    /// into a single global mirroring service. Consumers can connect this service
    /// using an endpoint group.
    /// 
    /// To get more information about MirroringDeploymentGroup, see:
    /// 
    /// * [API documentation](https://cloud.google.com/network-security-integration/docs/reference/rest/v1/projects.locations.mirroringDeploymentGroups)
    /// * How-to Guides
    ///     * [Mirroring deployment group overview](https://cloud.google.com/network-security-integration/docs/out-of-band/deployment-groups-overview)
    /// 
    /// ## Example Usage
    /// 
    /// ### Network Security Mirroring Deployment Group Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var network = new Gcp.Compute.Network("network", new()
    ///     {
    ///         Name = "example-network",
    ///         AutoCreateSubnetworks = false,
    ///     });
    /// 
    ///     var @default = new Gcp.NetworkSecurity.MirroringDeploymentGroup("default", new()
    ///     {
    ///         MirroringDeploymentGroupId = "example-dg",
    ///         Location = "global",
    ///         Network = network.Id,
    ///         Description = "some description",
    ///         Labels = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// MirroringDeploymentGroup can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/mirroringDeploymentGroups/{{mirroring_deployment_group_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{mirroring_deployment_group_id}}`
    /// 
    /// * `{{location}}/{{mirroring_deployment_group_id}}`
    /// 
    /// When using the `pulumi import` command, MirroringDeploymentGroup can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup default projects/{{project}}/locations/{{location}}/mirroringDeploymentGroups/{{mirroring_deployment_group_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup default {{project}}/{{location}}/{{mirroring_deployment_group_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup default {{location}}/{{mirroring_deployment_group_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup")]
    public partial class MirroringDeploymentGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of endpoint groups that are connected to this resource.
        /// Structure is documented below.
        /// </summary>
        [Output("connectedEndpointGroups")]
        public Output<ImmutableArray<Outputs.MirroringDeploymentGroupConnectedEndpointGroup>> ConnectedEndpointGroups { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the resource was created.
        /// See https://google.aip.dev/148#timestamps.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// User-provided description of the deployment group.
        /// Used as additional context for the deployment group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Labels are key/value pairs that help to organize and filter resources.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The cloud location of the deployment group, currently restricted to `global`.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The list of locations where the deployment group is present.
        /// Structure is documented below.
        /// </summary>
        [Output("locations")]
        public Output<ImmutableArray<Outputs.MirroringDeploymentGroupLocation>> Locations { get; private set; } = null!;

        /// <summary>
        /// The ID to use for the new deployment group, which will become the final
        /// component of the deployment group's resource name.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("mirroringDeploymentGroupId")]
        public Output<string> MirroringDeploymentGroupId { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// The connected endpoint group's resource name, for example:
        /// `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
        /// See https://google.aip.dev/124.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network that will be used for all child deployments, for example:
        /// `projects/{project}/global/networks/{network}`.
        /// See https://google.aip.dev/124.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// The current state of the resource does not match the user's intended state,
        /// and the system is working to reconcile them. This is part of the normal
        /// operation (e.g. adding a new deployment to the group)
        /// See https://google.aip.dev/128.
        /// </summary>
        [Output("reconciling")]
        public Output<bool> Reconciling { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// The current state of the association in this location.
        /// Possible values:
        /// STATE_UNSPECIFIED
        /// ACTIVE
        /// OUT_OF_SYNC
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the resource was most recently updated.
        /// See https://google.aip.dev/148#timestamps.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a MirroringDeploymentGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MirroringDeploymentGroup(string name, MirroringDeploymentGroupArgs args, CustomResourceOptions? options = null)
            : base("gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup", name, args ?? new MirroringDeploymentGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MirroringDeploymentGroup(string name, Input<string> id, MirroringDeploymentGroupState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MirroringDeploymentGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MirroringDeploymentGroup Get(string name, Input<string> id, MirroringDeploymentGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new MirroringDeploymentGroup(name, id, state, options);
        }
    }

    public sealed class MirroringDeploymentGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User-provided description of the deployment group.
        /// Used as additional context for the deployment group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key/value pairs that help to organize and filter resources.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The cloud location of the deployment group, currently restricted to `global`.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID to use for the new deployment group, which will become the final
        /// component of the deployment group's resource name.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("mirroringDeploymentGroupId", required: true)]
        public Input<string> MirroringDeploymentGroupId { get; set; } = null!;

        /// <summary>
        /// The network that will be used for all child deployments, for example:
        /// `projects/{project}/global/networks/{network}`.
        /// See https://google.aip.dev/124.
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public MirroringDeploymentGroupArgs()
        {
        }
        public static new MirroringDeploymentGroupArgs Empty => new MirroringDeploymentGroupArgs();
    }

    public sealed class MirroringDeploymentGroupState : global::Pulumi.ResourceArgs
    {
        [Input("connectedEndpointGroups")]
        private InputList<Inputs.MirroringDeploymentGroupConnectedEndpointGroupGetArgs>? _connectedEndpointGroups;

        /// <summary>
        /// The list of endpoint groups that are connected to this resource.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.MirroringDeploymentGroupConnectedEndpointGroupGetArgs> ConnectedEndpointGroups
        {
            get => _connectedEndpointGroups ?? (_connectedEndpointGroups = new InputList<Inputs.MirroringDeploymentGroupConnectedEndpointGroupGetArgs>());
            set => _connectedEndpointGroups = value;
        }

        /// <summary>
        /// The timestamp when the resource was created.
        /// See https://google.aip.dev/148#timestamps.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// User-provided description of the deployment group.
        /// Used as additional context for the deployment group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key/value pairs that help to organize and filter resources.
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The cloud location of the deployment group, currently restricted to `global`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("locations")]
        private InputList<Inputs.MirroringDeploymentGroupLocationGetArgs>? _locations;

        /// <summary>
        /// The list of locations where the deployment group is present.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.MirroringDeploymentGroupLocationGetArgs> Locations
        {
            get => _locations ?? (_locations = new InputList<Inputs.MirroringDeploymentGroupLocationGetArgs>());
            set => _locations = value;
        }

        /// <summary>
        /// The ID to use for the new deployment group, which will become the final
        /// component of the deployment group's resource name.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("mirroringDeploymentGroupId")]
        public Input<string>? MirroringDeploymentGroupId { get; set; }

        /// <summary>
        /// (Output)
        /// The connected endpoint group's resource name, for example:
        /// `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
        /// See https://google.aip.dev/124.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network that will be used for all child deployments, for example:
        /// `projects/{project}/global/networks/{network}`.
        /// See https://google.aip.dev/124.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The current state of the resource does not match the user's intended state,
        /// and the system is working to reconcile them. This is part of the normal
        /// operation (e.g. adding a new deployment to the group)
        /// See https://google.aip.dev/128.
        /// </summary>
        [Input("reconciling")]
        public Input<bool>? Reconciling { get; set; }

        /// <summary>
        /// (Output)
        /// The current state of the association in this location.
        /// Possible values:
        /// STATE_UNSPECIFIED
        /// ACTIVE
        /// OUT_OF_SYNC
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The timestamp when the resource was most recently updated.
        /// See https://google.aip.dev/148#timestamps.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public MirroringDeploymentGroupState()
        {
        }
        public static new MirroringDeploymentGroupState Empty => new MirroringDeploymentGroupState();
    }
}
