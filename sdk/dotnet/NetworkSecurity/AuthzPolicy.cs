// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.NetworkSecurity
{
    /// <summary>
    /// AuthzPolicy is a resource that allows to forward traffic to a callout backend designed to scan the traffic for security purposes.
    /// 
    /// To get more information about AuthzPolicy, see:
    /// 
    /// * [API documentation](https://cloud.google.com/load-balancing/docs/reference/network-security/rest/v1beta1/projects.locations.authzPolicies)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// AuthzPolicy can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/authzPolicies/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, AuthzPolicy can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/authzPolicy:AuthzPolicy default projects/{{project}}/locations/{{location}}/authzPolicies/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/authzPolicy:AuthzPolicy default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/authzPolicy:AuthzPolicy default {{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:networksecurity/authzPolicy:AuthzPolicy default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:networksecurity/authzPolicy:AuthzPolicy")]
    public partial class AuthzPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When the action is CUSTOM, customProvider must be specified.
        /// When the action is ALLOW, only requests matching the policy will be allowed.
        /// When the action is DENY, only requests matching the policy will be denied.
        /// When a request arrives, the policies are evaluated in the following order:
        /// 1. If there is a CUSTOM policy that matches the request, the CUSTOM policy is evaluated using the custom authorization providers and the request is denied if the provider rejects the request.
        /// 2. If there are any DENY policies that match the request, the request is denied.
        /// 3. If there are no ALLOW policies for the resource or if any of the ALLOW policies match the request, the request is allowed.
        /// 4. Else the request is denied by default if none of the configured AuthzPolicies with ALLOW action match the request.
        /// Possible values are: `ALLOW`, `DENY`, `CUSTOM`.
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the resource was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Required if the action is CUSTOM. Allows delegating authorization decisions to Cloud IAP or to Service Extensions. One
        /// of cloudIap or authzExtension must be specified.
        /// </summary>
        [Output("customProvider")]
        public Output<Outputs.AuthzPolicyCustomProvider?> CustomProvider { get; private set; } = null!;

        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// A list of authorization HTTP rules to match against the incoming request.A policy match occurs when at least one HTTP
        /// rule matches the request or when no HTTP rules are specified in the policy. At least one HTTP Rule is required for Allow
        /// or Deny Action. Limited to 5 rules.
        /// </summary>
        [Output("httpRules")]
        public Output<ImmutableArray<Outputs.AuthzPolicyHttpRule>> HttpRules { get; private set; } = null!;

        /// <summary>
        /// Set of labels associated with the AuthzExtension resource. **Note**: This field is non-authoritative, and will only
        /// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
        /// present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Identifier. Name of the AuthzPolicy resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Specifies the set of resources to which this policy should be applied to.
        /// Structure is documented below.
        /// </summary>
        [Output("target")]
        public Output<Outputs.AuthzPolicyTarget> Target { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the resource was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a AuthzPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthzPolicy(string name, AuthzPolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:networksecurity/authzPolicy:AuthzPolicy", name, args ?? new AuthzPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuthzPolicy(string name, Input<string> id, AuthzPolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:networksecurity/authzPolicy:AuthzPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthzPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthzPolicy Get(string name, Input<string> id, AuthzPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthzPolicy(name, id, state, options);
        }
    }

    public sealed class AuthzPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When the action is CUSTOM, customProvider must be specified.
        /// When the action is ALLOW, only requests matching the policy will be allowed.
        /// When the action is DENY, only requests matching the policy will be denied.
        /// When a request arrives, the policies are evaluated in the following order:
        /// 1. If there is a CUSTOM policy that matches the request, the CUSTOM policy is evaluated using the custom authorization providers and the request is denied if the provider rejects the request.
        /// 2. If there are any DENY policies that match the request, the request is denied.
        /// 3. If there are no ALLOW policies for the resource or if any of the ALLOW policies match the request, the request is allowed.
        /// 4. Else the request is denied by default if none of the configured AuthzPolicies with ALLOW action match the request.
        /// Possible values are: `ALLOW`, `DENY`, `CUSTOM`.
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// Required if the action is CUSTOM. Allows delegating authorization decisions to Cloud IAP or to Service Extensions. One
        /// of cloudIap or authzExtension must be specified.
        /// </summary>
        [Input("customProvider")]
        public Input<Inputs.AuthzPolicyCustomProviderArgs>? CustomProvider { get; set; }

        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("httpRules")]
        private InputList<Inputs.AuthzPolicyHttpRuleArgs>? _httpRules;

        /// <summary>
        /// A list of authorization HTTP rules to match against the incoming request.A policy match occurs when at least one HTTP
        /// rule matches the request or when no HTTP rules are specified in the policy. At least one HTTP Rule is required for Allow
        /// or Deny Action. Limited to 5 rules.
        /// </summary>
        public InputList<Inputs.AuthzPolicyHttpRuleArgs> HttpRules
        {
            get => _httpRules ?? (_httpRules = new InputList<Inputs.AuthzPolicyHttpRuleArgs>());
            set => _httpRules = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of labels associated with the AuthzExtension resource. **Note**: This field is non-authoritative, and will only
        /// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
        /// present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Identifier. Name of the AuthzPolicy resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Specifies the set of resources to which this policy should be applied to.
        /// Structure is documented below.
        /// </summary>
        [Input("target", required: true)]
        public Input<Inputs.AuthzPolicyTargetArgs> Target { get; set; } = null!;

        public AuthzPolicyArgs()
        {
        }
        public static new AuthzPolicyArgs Empty => new AuthzPolicyArgs();
    }

    public sealed class AuthzPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When the action is CUSTOM, customProvider must be specified.
        /// When the action is ALLOW, only requests matching the policy will be allowed.
        /// When the action is DENY, only requests matching the policy will be denied.
        /// When a request arrives, the policies are evaluated in the following order:
        /// 1. If there is a CUSTOM policy that matches the request, the CUSTOM policy is evaluated using the custom authorization providers and the request is denied if the provider rejects the request.
        /// 2. If there are any DENY policies that match the request, the request is denied.
        /// 3. If there are no ALLOW policies for the resource or if any of the ALLOW policies match the request, the request is allowed.
        /// 4. Else the request is denied by default if none of the configured AuthzPolicies with ALLOW action match the request.
        /// Possible values are: `ALLOW`, `DENY`, `CUSTOM`.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// The timestamp when the resource was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Required if the action is CUSTOM. Allows delegating authorization decisions to Cloud IAP or to Service Extensions. One
        /// of cloudIap or authzExtension must be specified.
        /// </summary>
        [Input("customProvider")]
        public Input<Inputs.AuthzPolicyCustomProviderGetArgs>? CustomProvider { get; set; }

        /// <summary>
        /// A human-readable description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("httpRules")]
        private InputList<Inputs.AuthzPolicyHttpRuleGetArgs>? _httpRules;

        /// <summary>
        /// A list of authorization HTTP rules to match against the incoming request.A policy match occurs when at least one HTTP
        /// rule matches the request or when no HTTP rules are specified in the policy. At least one HTTP Rule is required for Allow
        /// or Deny Action. Limited to 5 rules.
        /// </summary>
        public InputList<Inputs.AuthzPolicyHttpRuleGetArgs> HttpRules
        {
            get => _httpRules ?? (_httpRules = new InputList<Inputs.AuthzPolicyHttpRuleGetArgs>());
            set => _httpRules = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Set of labels associated with the AuthzExtension resource. **Note**: This field is non-authoritative, and will only
        /// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
        /// present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier. Name of the AuthzPolicy resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Specifies the set of resources to which this policy should be applied to.
        /// Structure is documented below.
        /// </summary>
        [Input("target")]
        public Input<Inputs.AuthzPolicyTargetGetArgs>? Target { get; set; }

        /// <summary>
        /// The timestamp when the resource was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public AuthzPolicyState()
        {
        }
        public static new AuthzPolicyState Empty => new AuthzPolicyState();
    }
}
