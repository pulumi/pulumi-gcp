// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DeveloperConnect
{
    /// <summary>
    /// Description
    /// 
    /// ## Example Usage
    /// 
    /// ### Developer Connect Account Connector Github
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_account_connector = new Gcp.DeveloperConnect.AccountConnector("my-account-connector", new()
    ///     {
    ///         Location = "us-central1",
    ///         AccountConnectorId = "tf-test-ac",
    ///         ProviderOauthConfig = new Gcp.DeveloperConnect.Inputs.AccountConnectorProviderOauthConfigArgs
    ///         {
    ///             SystemProviderId = "GITHUB",
    ///             Scopes = new[]
    ///             {
    ///                 "repo",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Developer Connect Account Connector Gitlab
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_account_connector = new Gcp.DeveloperConnect.AccountConnector("my-account-connector", new()
    ///     {
    ///         Location = "us-central1",
    ///         AccountConnectorId = "tf-test-ac",
    ///         ProviderOauthConfig = new Gcp.DeveloperConnect.Inputs.AccountConnectorProviderOauthConfigArgs
    ///         {
    ///             SystemProviderId = "GITLAB",
    ///             Scopes = new[]
    ///             {
    ///                 "api",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Developer Connect Account Connector Google
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_account_connector = new Gcp.DeveloperConnect.AccountConnector("my-account-connector", new()
    ///     {
    ///         Location = "us-central1",
    ///         AccountConnectorId = "tf-test-ac",
    ///         ProviderOauthConfig = new Gcp.DeveloperConnect.Inputs.AccountConnectorProviderOauthConfigArgs
    ///         {
    ///             SystemProviderId = "GOOGLE",
    ///             Scopes = new[]
    ///             {
    ///                 "https://www.googleapis.com/auth/drive.readonly",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Developer Connect Account Connector Sentry
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_account_connector = new Gcp.DeveloperConnect.AccountConnector("my-account-connector", new()
    ///     {
    ///         Location = "us-central1",
    ///         AccountConnectorId = "tf-test-ac",
    ///         ProviderOauthConfig = new Gcp.DeveloperConnect.Inputs.AccountConnectorProviderOauthConfigArgs
    ///         {
    ///             SystemProviderId = "SENTRY",
    ///             Scopes = new[]
    ///             {
    ///                 "org:read",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Developer Connect Account Connector Rovo
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_account_connector = new Gcp.DeveloperConnect.AccountConnector("my-account-connector", new()
    ///     {
    ///         Location = "us-central1",
    ///         AccountConnectorId = "tf-test-ac",
    ///         ProviderOauthConfig = new Gcp.DeveloperConnect.Inputs.AccountConnectorProviderOauthConfigArgs
    ///         {
    ///             SystemProviderId = "ROVO",
    ///             Scopes = new[]
    ///             {
    ///                 "rovo",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Developer Connect Account Connector New Relic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_account_connector = new Gcp.DeveloperConnect.AccountConnector("my-account-connector", new()
    ///     {
    ///         Location = "us-central1",
    ///         AccountConnectorId = "tf-test-ac",
    ///         ProviderOauthConfig = new Gcp.DeveloperConnect.Inputs.AccountConnectorProviderOauthConfigArgs
    ///         {
    ///             SystemProviderId = "NEW_RELIC",
    ///             Scopes = new() { },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Developer Connect Account Connector Datastax
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_account_connector = new Gcp.DeveloperConnect.AccountConnector("my-account-connector", new()
    ///     {
    ///         Location = "us-central1",
    ///         AccountConnectorId = "tf-test-ac",
    ///         ProviderOauthConfig = new Gcp.DeveloperConnect.Inputs.AccountConnectorProviderOauthConfigArgs
    ///         {
    ///             SystemProviderId = "DATASTAX",
    ///             Scopes = new() { },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// AccountConnector can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{account_connector_id}}`
    /// 
    /// * `{{location}}/{{account_connector_id}}`
    /// 
    /// When using the `pulumi import` command, AccountConnector can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:developerconnect/accountConnector:AccountConnector default projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:developerconnect/accountConnector:AccountConnector default {{project}}/{{location}}/{{account_connector_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:developerconnect/accountConnector:AccountConnector default {{location}}/{{account_connector_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:developerconnect/accountConnector:AccountConnector")]
    public partial class AccountConnector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Required. The ID to use for the AccountConnector, which will become the final
        /// component of the AccountConnector's resource name. Its format should adhere
        /// to https://google.aip.dev/122#resource-id-segments Names must be unique
        /// per-project per-location.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("accountConnectorId")]
        public Output<string> AccountConnectorId { get; private set; } = null!;

        /// <summary>
        /// Optional. Allows users to store small amounts of arbitrary data.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Output only. The timestamp when the userConnection was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        [Output("effectiveLabels")]
        public Output<ImmutableDictionary<string, string>> EffectiveLabels { get; private set; } = null!;

        /// <summary>
        /// Optional. Labels as key value pairs
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Identifier. The resource name of the userConnection, in the format
        /// `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Output only. Start OAuth flow by clicking on this URL.
        /// </summary>
        [Output("oauthStartUri")]
        public Output<string> OauthStartUri { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// ProviderOAuthConfig is the OAuth config for a provider.
        /// Structure is documented below.
        /// </summary>
        [Output("providerOauthConfig")]
        public Output<Outputs.AccountConnectorProviderOauthConfig?> ProviderOauthConfig { get; private set; } = null!;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        [Output("pulumiLabels")]
        public Output<ImmutableDictionary<string, string>> PulumiLabels { get; private set; } = null!;

        /// <summary>
        /// Output only. The timestamp when the userConnection was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a AccountConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccountConnector(string name, AccountConnectorArgs args, CustomResourceOptions? options = null)
            : base("gcp:developerconnect/accountConnector:AccountConnector", name, args ?? new AccountConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccountConnector(string name, Input<string> id, AccountConnectorState? state = null, CustomResourceOptions? options = null)
            : base("gcp:developerconnect/accountConnector:AccountConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "effectiveLabels",
                    "pulumiLabels",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccountConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccountConnector Get(string name, Input<string> id, AccountConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new AccountConnector(name, id, state, options);
        }
    }

    public sealed class AccountConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. The ID to use for the AccountConnector, which will become the final
        /// component of the AccountConnector's resource name. Its format should adhere
        /// to https://google.aip.dev/122#resource-id-segments Names must be unique
        /// per-project per-location.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("accountConnectorId", required: true)]
        public Input<string> AccountConnectorId { get; set; } = null!;

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. Allows users to store small amounts of arbitrary data.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels as key value pairs
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// ProviderOAuthConfig is the OAuth config for a provider.
        /// Structure is documented below.
        /// </summary>
        [Input("providerOauthConfig")]
        public Input<Inputs.AccountConnectorProviderOauthConfigArgs>? ProviderOauthConfig { get; set; }

        public AccountConnectorArgs()
        {
        }
        public static new AccountConnectorArgs Empty => new AccountConnectorArgs();
    }

    public sealed class AccountConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. The ID to use for the AccountConnector, which will become the final
        /// component of the AccountConnector's resource name. Its format should adhere
        /// to https://google.aip.dev/122#resource-id-segments Names must be unique
        /// per-project per-location.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("accountConnectorId")]
        public Input<string>? AccountConnectorId { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Optional. Allows users to store small amounts of arbitrary data.
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `effective_annotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Output only. The timestamp when the userConnection was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        [Input("effectiveLabels")]
        private InputMap<string>? _effectiveLabels;

        /// <summary>
        /// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        /// </summary>
        public InputMap<string> EffectiveLabels
        {
            get => _effectiveLabels ?? (_effectiveLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _effectiveLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels as key value pairs
        /// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        /// Please refer to the field `effective_labels` for all of the labels present on the resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Identifier. The resource name of the userConnection, in the format
        /// `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Output only. Start OAuth flow by clicking on this URL.
        /// </summary>
        [Input("oauthStartUri")]
        public Input<string>? OauthStartUri { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// ProviderOAuthConfig is the OAuth config for a provider.
        /// Structure is documented below.
        /// </summary>
        [Input("providerOauthConfig")]
        public Input<Inputs.AccountConnectorProviderOauthConfigGetArgs>? ProviderOauthConfig { get; set; }

        [Input("pulumiLabels")]
        private InputMap<string>? _pulumiLabels;

        /// <summary>
        /// The combination of labels configured directly on the resource
        /// and default labels configured on the provider.
        /// </summary>
        public InputMap<string> PulumiLabels
        {
            get => _pulumiLabels ?? (_pulumiLabels = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _pulumiLabels = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Output only. The timestamp when the userConnection was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public AccountConnectorState()
        {
        }
        public static new AccountConnectorState Empty => new AccountConnectorState();
    }
}
