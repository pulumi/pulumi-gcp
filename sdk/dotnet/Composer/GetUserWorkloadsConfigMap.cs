// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Composer
{
    public static class GetUserWorkloadsConfigMap
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleEnvironment = new Gcp.Composer.Environment("example", new()
        ///     {
        ///         Name = "example-environment",
        ///         Config = new Gcp.Composer.Inputs.EnvironmentConfigArgs
        ///         {
        ///             SoftwareConfig = new Gcp.Composer.Inputs.EnvironmentConfigSoftwareConfigArgs
        ///             {
        ///                 ImageVersion = "composer-3-airflow-2",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var exampleUserWorkloadsConfigMap = new Gcp.Composer.UserWorkloadsConfigMap("example", new()
        ///     {
        ///         Environment = exampleEnvironment.Name,
        ///         Name = "example-config-map",
        ///         Data = 
        ///         {
        ///             { "db_host", "dbhost:5432" },
        ///             { "api_host", "apihost:443" },
        ///         },
        ///     });
        /// 
        ///     var example = Gcp.Composer.GetUserWorkloadsConfigMap.Invoke(new()
        ///     {
        ///         Environment = exampleEnvironment.Name,
        ///         Name = googleComposerUserWorkloadsConfigMap.Example.Name,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["debug"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetUserWorkloadsConfigMapResult> InvokeAsync(GetUserWorkloadsConfigMapArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserWorkloadsConfigMapResult>("gcp:composer/getUserWorkloadsConfigMap:getUserWorkloadsConfigMap", args ?? new GetUserWorkloadsConfigMapArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleEnvironment = new Gcp.Composer.Environment("example", new()
        ///     {
        ///         Name = "example-environment",
        ///         Config = new Gcp.Composer.Inputs.EnvironmentConfigArgs
        ///         {
        ///             SoftwareConfig = new Gcp.Composer.Inputs.EnvironmentConfigSoftwareConfigArgs
        ///             {
        ///                 ImageVersion = "composer-3-airflow-2",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var exampleUserWorkloadsConfigMap = new Gcp.Composer.UserWorkloadsConfigMap("example", new()
        ///     {
        ///         Environment = exampleEnvironment.Name,
        ///         Name = "example-config-map",
        ///         Data = 
        ///         {
        ///             { "db_host", "dbhost:5432" },
        ///             { "api_host", "apihost:443" },
        ///         },
        ///     });
        /// 
        ///     var example = Gcp.Composer.GetUserWorkloadsConfigMap.Invoke(new()
        ///     {
        ///         Environment = exampleEnvironment.Name,
        ///         Name = googleComposerUserWorkloadsConfigMap.Example.Name,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["debug"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserWorkloadsConfigMapResult> Invoke(GetUserWorkloadsConfigMapInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserWorkloadsConfigMapResult>("gcp:composer/getUserWorkloadsConfigMap:getUserWorkloadsConfigMap", args ?? new GetUserWorkloadsConfigMapInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Gcp = Pulumi.Gcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleEnvironment = new Gcp.Composer.Environment("example", new()
        ///     {
        ///         Name = "example-environment",
        ///         Config = new Gcp.Composer.Inputs.EnvironmentConfigArgs
        ///         {
        ///             SoftwareConfig = new Gcp.Composer.Inputs.EnvironmentConfigSoftwareConfigArgs
        ///             {
        ///                 ImageVersion = "composer-3-airflow-2",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var exampleUserWorkloadsConfigMap = new Gcp.Composer.UserWorkloadsConfigMap("example", new()
        ///     {
        ///         Environment = exampleEnvironment.Name,
        ///         Name = "example-config-map",
        ///         Data = 
        ///         {
        ///             { "db_host", "dbhost:5432" },
        ///             { "api_host", "apihost:443" },
        ///         },
        ///     });
        /// 
        ///     var example = Gcp.Composer.GetUserWorkloadsConfigMap.Invoke(new()
        ///     {
        ///         Environment = exampleEnvironment.Name,
        ///         Name = googleComposerUserWorkloadsConfigMap.Example.Name,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["debug"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserWorkloadsConfigMapResult> Invoke(GetUserWorkloadsConfigMapInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserWorkloadsConfigMapResult>("gcp:composer/getUserWorkloadsConfigMap:getUserWorkloadsConfigMap", args ?? new GetUserWorkloadsConfigMapInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserWorkloadsConfigMapArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Environment where the ConfigMap is stored.
        /// </summary>
        [Input("environment", required: true)]
        public string Environment { get; set; } = null!;

        /// <summary>
        /// Name of the ConfigMap.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The location or Compute Engine region of the environment.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetUserWorkloadsConfigMapArgs()
        {
        }
        public static new GetUserWorkloadsConfigMapArgs Empty => new GetUserWorkloadsConfigMapArgs();
    }

    public sealed class GetUserWorkloadsConfigMapInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Environment where the ConfigMap is stored.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// Name of the ConfigMap.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The location or Compute Engine region of the environment.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetUserWorkloadsConfigMapInvokeArgs()
        {
        }
        public static new GetUserWorkloadsConfigMapInvokeArgs Empty => new GetUserWorkloadsConfigMapInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserWorkloadsConfigMapResult
    {
        /// <summary>
        /// The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
        /// For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
        /// </summary>
        public readonly ImmutableDictionary<string, string> Data;
        public readonly string Environment;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string? Project;
        public readonly string? Region;

        [OutputConstructor]
        private GetUserWorkloadsConfigMapResult(
            ImmutableDictionary<string, string> data,

            string environment,

            string id,

            string name,

            string? project,

            string? region)
        {
            Data = data;
            Environment = environment;
            Id = id;
            Name = name;
            Project = project;
            Region = region;
        }
    }
}
