// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Composer
{
    public static partial class Invokes
    {
        /// <summary>
        /// Provides access to available Cloud Composer versions in a region for a given project.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/d/composer_image_versions.html.markdown.
        /// </summary>
        public static Task<GetImageVersionsResult> GetImageVersions(GetImageVersionsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetImageVersionsResult>("gcp:composer/getImageVersions:getImageVersions", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetImageVersionsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the project to list versions in.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// The location to list versions in.
        /// If it is not provider, the provider region is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetImageVersionsArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetImageVersionsResult
    {
        /// <summary>
        /// A list of composer image versions available in the given project and location. Each `image_version` contains:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageVersionsImageVersionsResult> ImageVersions;
        public readonly string Project;
        public readonly string Region;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetImageVersionsResult(
            ImmutableArray<Outputs.GetImageVersionsImageVersionsResult> imageVersions,
            string project,
            string region,
            string id)
        {
            ImageVersions = imageVersions;
            Project = project;
            Region = region;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetImageVersionsImageVersionsResult
    {
        /// <summary>
        /// The string identifier of the image version, in the form: "composer-x.y.z-airflow-a.b(.c)"
        /// </summary>
        public readonly string ImageVersionId;
        /// <summary>
        /// Supported python versions for this image version
        /// </summary>
        public readonly ImmutableArray<string> SupportedPythonVersions;

        [OutputConstructor]
        private GetImageVersionsImageVersionsResult(
            string imageVersionId,
            ImmutableArray<string> supportedPythonVersions)
        {
            ImageVersionId = imageVersionId;
            SupportedPythonVersions = supportedPythonVersions;
        }
    }
    }
}
