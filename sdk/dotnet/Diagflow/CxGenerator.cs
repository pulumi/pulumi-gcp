// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// Generators contain prompt to be sent to the LLM model to generate text. The prompt can contain parameters which will be resolved before calling the model. It can optionally contain banned phrases to ensure the model responses are safe.
    /// 
    /// To get more information about Generator, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.generators)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
    /// 
    /// ## Example Usage
    /// 
    /// ### Dialogflowcx Generator Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agent = new Gcp.Diagflow.CxAgent("agent", new()
    ///     {
    ///         DisplayName = "dialogflowcx-agent-fucntion",
    ///         Location = "global",
    ///         DefaultLanguageCode = "en",
    ///         SupportedLanguageCodes = new[]
    ///         {
    ///             "fr",
    ///             "de",
    ///             "es",
    ///         },
    ///         TimeZone = "America/New_York",
    ///         Description = "Example description.",
    ///     });
    /// 
    ///     var generator = new Gcp.Diagflow.CxGenerator("generator", new()
    ///     {
    ///         Parent = agent.Id,
    ///         LanguageCode = "fr",
    ///         DisplayName = "TF Prompt generator",
    ///         LlmModelSettings = new Gcp.Diagflow.Inputs.CxGeneratorLlmModelSettingsArgs
    ///         {
    ///             Model = "gemini-2.0-flash-001",
    ///             PromptText = "Return me some great results",
    ///         },
    ///         PromptText = new Gcp.Diagflow.Inputs.CxGeneratorPromptTextArgs
    ///         {
    ///             Text = "Send me great results in french",
    ///         },
    ///         ModelParameter = new Gcp.Diagflow.Inputs.CxGeneratorModelParameterArgs
    ///         {
    ///             Temperature = 0.55,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Generator can be imported using any of these accepted formats:
    /// 
    /// * `{{parent}}/generators/{{name}}`
    /// 
    /// * `{{parent}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, Generator can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:diagflow/cxGenerator:CxGenerator default {{parent}}/generators/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:diagflow/cxGenerator:CxGenerator default {{parent}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/cxGenerator:CxGenerator")]
    public partial class CxGenerator : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The human-readable name of the generator, unique within the agent.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The language to create generators for the following fields:
        /// * Generator.prompt_text.text
        /// If not specified, the agent's default language is used.
        /// </summary>
        [Output("languageCode")]
        public Output<string?> LanguageCode { get; private set; } = null!;

        /// <summary>
        /// The LLM model settings.
        /// Structure is documented below.
        /// </summary>
        [Output("llmModelSettings")]
        public Output<Outputs.CxGeneratorLlmModelSettings?> LlmModelSettings { get; private set; } = null!;

        /// <summary>
        /// Parameters passed to the LLM to configure its behavior.
        /// Structure is documented below.
        /// </summary>
        [Output("modelParameter")]
        public Output<Outputs.CxGeneratorModelParameter?> ModelParameter { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the Generator.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/generators/&lt;Generator ID&gt;.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The agent to create a Generator for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;

        /// <summary>
        /// List of custom placeholders in the prompt text.
        /// Structure is documented below.
        /// </summary>
        [Output("placeholders")]
        public Output<ImmutableArray<Outputs.CxGeneratorPlaceholder>> Placeholders { get; private set; } = null!;

        /// <summary>
        /// Prompt for the LLM model.
        /// Structure is documented below.
        /// </summary>
        [Output("promptText")]
        public Output<Outputs.CxGeneratorPromptText> PromptText { get; private set; } = null!;


        /// <summary>
        /// Create a CxGenerator resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CxGenerator(string name, CxGeneratorArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxGenerator:CxGenerator", name, args ?? new CxGeneratorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CxGenerator(string name, Input<string> id, CxGeneratorState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxGenerator:CxGenerator", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CxGenerator resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CxGenerator Get(string name, Input<string> id, CxGeneratorState? state = null, CustomResourceOptions? options = null)
        {
            return new CxGenerator(name, id, state, options);
        }
    }

    public sealed class CxGeneratorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The human-readable name of the generator, unique within the agent.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The language to create generators for the following fields:
        /// * Generator.prompt_text.text
        /// If not specified, the agent's default language is used.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// The LLM model settings.
        /// Structure is documented below.
        /// </summary>
        [Input("llmModelSettings")]
        public Input<Inputs.CxGeneratorLlmModelSettingsArgs>? LlmModelSettings { get; set; }

        /// <summary>
        /// Parameters passed to the LLM to configure its behavior.
        /// Structure is documented below.
        /// </summary>
        [Input("modelParameter")]
        public Input<Inputs.CxGeneratorModelParameterArgs>? ModelParameter { get; set; }

        /// <summary>
        /// The agent to create a Generator for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("placeholders")]
        private InputList<Inputs.CxGeneratorPlaceholderArgs>? _placeholders;

        /// <summary>
        /// List of custom placeholders in the prompt text.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxGeneratorPlaceholderArgs> Placeholders
        {
            get => _placeholders ?? (_placeholders = new InputList<Inputs.CxGeneratorPlaceholderArgs>());
            set => _placeholders = value;
        }

        /// <summary>
        /// Prompt for the LLM model.
        /// Structure is documented below.
        /// </summary>
        [Input("promptText", required: true)]
        public Input<Inputs.CxGeneratorPromptTextArgs> PromptText { get; set; } = null!;

        public CxGeneratorArgs()
        {
        }
        public static new CxGeneratorArgs Empty => new CxGeneratorArgs();
    }

    public sealed class CxGeneratorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The human-readable name of the generator, unique within the agent.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The language to create generators for the following fields:
        /// * Generator.prompt_text.text
        /// If not specified, the agent's default language is used.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// The LLM model settings.
        /// Structure is documented below.
        /// </summary>
        [Input("llmModelSettings")]
        public Input<Inputs.CxGeneratorLlmModelSettingsGetArgs>? LlmModelSettings { get; set; }

        /// <summary>
        /// Parameters passed to the LLM to configure its behavior.
        /// Structure is documented below.
        /// </summary>
        [Input("modelParameter")]
        public Input<Inputs.CxGeneratorModelParameterGetArgs>? ModelParameter { get; set; }

        /// <summary>
        /// The unique identifier of the Generator.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/generators/&lt;Generator ID&gt;.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The agent to create a Generator for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("placeholders")]
        private InputList<Inputs.CxGeneratorPlaceholderGetArgs>? _placeholders;

        /// <summary>
        /// List of custom placeholders in the prompt text.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxGeneratorPlaceholderGetArgs> Placeholders
        {
            get => _placeholders ?? (_placeholders = new InputList<Inputs.CxGeneratorPlaceholderGetArgs>());
            set => _placeholders = value;
        }

        /// <summary>
        /// Prompt for the LLM model.
        /// Structure is documented below.
        /// </summary>
        [Input("promptText")]
        public Input<Inputs.CxGeneratorPromptTextGetArgs>? PromptText { get; set; }

        public CxGeneratorState()
        {
        }
        public static new CxGeneratorState Empty => new CxGeneratorState();
    }
}
