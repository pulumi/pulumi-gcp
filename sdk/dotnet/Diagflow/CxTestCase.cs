// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// You can use the built-in test feature to uncover bugs and prevent regressions. A test execution verifies that agent responses have not changed for end-user inputs defined in the test case.
    /// 
    /// To get more information about TestCase, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.testCases)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
    /// 
    /// ## Example Usage
    /// ### Dialogflowcx Test Case Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agent = new Gcp.Diagflow.CxAgent("agent", new()
    ///     {
    ///         DisplayName = "dialogflowcx-agent",
    ///         Location = "global",
    ///         DefaultLanguageCode = "en",
    ///         SupportedLanguageCodes = new[]
    ///         {
    ///             "fr",
    ///             "de",
    ///             "es",
    ///         },
    ///         TimeZone = "America/New_York",
    ///         Description = "Example description.",
    ///         AvatarUri = "https://storage.cloud.google.com/dialogflow-test-host-image/cloud-logo.png",
    ///         EnableStackdriverLogging = true,
    ///         EnableSpellCorrection = true,
    ///         SpeechToTextSettings = new Gcp.Diagflow.Inputs.CxAgentSpeechToTextSettingsArgs
    ///         {
    ///             EnableSpeechAdaptation = true,
    ///         },
    ///     });
    /// 
    ///     var intent = new Gcp.Diagflow.CxIntent("intent", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "MyIntent",
    ///         Priority = 1,
    ///         TrainingPhrases = new[]
    ///         {
    ///             new Gcp.Diagflow.Inputs.CxIntentTrainingPhraseArgs
    ///             {
    ///                 Parts = new[]
    ///                 {
    ///                     new Gcp.Diagflow.Inputs.CxIntentTrainingPhrasePartArgs
    ///                     {
    ///                         Text = "training phrase",
    ///                     },
    ///                 },
    ///                 RepeatCount = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var page = new Gcp.Diagflow.CxPage("page", new()
    ///     {
    ///         Parent = agent.StartFlow,
    ///         DisplayName = "MyPage",
    ///         TransitionRoutes = new[]
    ///         {
    ///             new Gcp.Diagflow.Inputs.CxPageTransitionRouteArgs
    ///             {
    ///                 Intent = intent.Id,
    ///                 TriggerFulfillment = new Gcp.Diagflow.Inputs.CxPageTransitionRouteTriggerFulfillmentArgs
    ///                 {
    ///                     Messages = new[]
    ///                     {
    ///                         new Gcp.Diagflow.Inputs.CxPageTransitionRouteTriggerFulfillmentMessageArgs
    ///                         {
    ///                             Text = new Gcp.Diagflow.Inputs.CxPageTransitionRouteTriggerFulfillmentMessageTextArgs
    ///                             {
    ///                                 Texts = new[]
    ///                                 {
    ///                                     "Training phrase response",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         EventHandlers = new[]
    ///         {
    ///             new Gcp.Diagflow.Inputs.CxPageEventHandlerArgs
    ///             {
    ///                 Event = "some-event",
    ///                 TriggerFulfillment = new Gcp.Diagflow.Inputs.CxPageEventHandlerTriggerFulfillmentArgs
    ///                 {
    ///                     Messages = new[]
    ///                     {
    ///                         new Gcp.Diagflow.Inputs.CxPageEventHandlerTriggerFulfillmentMessageArgs
    ///                         {
    ///                             Text = new Gcp.Diagflow.Inputs.CxPageEventHandlerTriggerFulfillmentMessageTextArgs
    ///                             {
    ///                                 Texts = new[]
    ///                                 {
    ///                                     "Handling some event",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var basicTestCase = new Gcp.Diagflow.CxTestCase("basicTestCase", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "MyTestCase",
    ///         Tags = new[]
    ///         {
    ///             "#tag1",
    ///         },
    ///         Notes = "demonstrates a simple training phrase response",
    ///         TestConfig = new Gcp.Diagflow.Inputs.CxTestCaseTestConfigArgs
    ///         {
    ///             TrackingParameters = new[]
    ///             {
    ///                 "some_param",
    ///             },
    ///             Page = page.Id,
    ///         },
    ///         TestCaseConversationTurns = new[]
    ///         {
    ///             new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnArgs
    ///             {
    ///                 UserInput = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnUserInputArgs
    ///                 {
    ///                     Input = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnUserInputInputArgs
    ///                     {
    ///                         LanguageCode = "en",
    ///                         Text = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnUserInputInputTextArgs
    ///                         {
    ///                             Text = "training phrase",
    ///                         },
    ///                     },
    ///                     InjectedParameters = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["some_param"] = "1",
    ///                     }),
    ///                     IsWebhookEnabled = true,
    ///                     EnableSentimentAnalysis = true,
    ///                 },
    ///                 VirtualAgentOutput = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs
    ///                 {
    ///                     SessionParameters = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["some_param"] = "1",
    ///                     }),
    ///                     TriggeredIntent = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs
    ///                     {
    ///                         Name = intent.Id,
    ///                     },
    ///                     CurrentPage = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs
    ///                     {
    ///                         Name = page.Id,
    ///                     },
    ///                     TextResponses = new[]
    ///                     {
    ///                         new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs
    ///                         {
    ///                             Texts = new[]
    ///                             {
    ///                                 "Training phrase response",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnArgs
    ///             {
    ///                 UserInput = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnUserInputArgs
    ///                 {
    ///                     Input = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnUserInputInputArgs
    ///                     {
    ///                         Event = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnUserInputInputEventArgs
    ///                         {
    ///                             Event = "some-event",
    ///                         },
    ///                     },
    ///                 },
    ///                 VirtualAgentOutput = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs
    ///                 {
    ///                     CurrentPage = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs
    ///                     {
    ///                         Name = page.Id,
    ///                     },
    ///                     TextResponses = new[]
    ///                     {
    ///                         new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs
    ///                         {
    ///                             Texts = new[]
    ///                             {
    ///                                 "Handling some event",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnArgs
    ///             {
    ///                 UserInput = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnUserInputArgs
    ///                 {
    ///                     Input = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnUserInputInputArgs
    ///                     {
    ///                         Dtmf = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs
    ///                         {
    ///                             Digits = "12",
    ///                             FinishDigit = "3",
    ///                         },
    ///                     },
    ///                 },
    ///                 VirtualAgentOutput = new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs
    ///                 {
    ///                     TextResponses = new[]
    ///                     {
    ///                         new Gcp.Diagflow.Inputs.CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs
    ///                         {
    ///                             Texts = new[]
    ///                             {
    ///                                 "I didn't get that. Can you say it again?",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// TestCase can be imported using any of these accepted formats:
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxTestCase:CxTestCase default {{parent}}/testCases/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/cxTestCase:CxTestCase")]
    public partial class CxTestCase : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When the test was created. A timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the test case, unique within the agent. Limit of 200 characters.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The latest test result.
        /// Structure is documented below.
        /// </summary>
        [Output("lastTestResults")]
        public Output<ImmutableArray<Outputs.CxTestCaseLastTestResult>> LastTestResults { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the intent.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/intents/&lt;Intent ID&gt;.
        /// 
        /// (Optional)
        /// The unique identifier of the page.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/pages/&lt;Page ID&gt;.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Additional freeform notes about the test case. Limit of 400 characters.
        /// </summary>
        [Output("notes")]
        public Output<string?> Notes { get; private set; } = null!;

        /// <summary>
        /// The agent to create the test case for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;

        /// <summary>
        /// Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
        /// Each tag should start with "#" and has a limit of 30 characters
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
        /// Structure is documented below.
        /// </summary>
        [Output("testCaseConversationTurns")]
        public Output<ImmutableArray<Outputs.CxTestCaseTestCaseConversationTurn>> TestCaseConversationTurns { get; private set; } = null!;

        /// <summary>
        /// Config for the test case.
        /// Structure is documented below.
        /// </summary>
        [Output("testConfig")]
        public Output<Outputs.CxTestCaseTestConfig?> TestConfig { get; private set; } = null!;


        /// <summary>
        /// Create a CxTestCase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CxTestCase(string name, CxTestCaseArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxTestCase:CxTestCase", name, args ?? new CxTestCaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CxTestCase(string name, Input<string> id, CxTestCaseState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxTestCase:CxTestCase", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CxTestCase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CxTestCase Get(string name, Input<string> id, CxTestCaseState? state = null, CustomResourceOptions? options = null)
        {
            return new CxTestCase(name, id, state, options);
        }
    }

    public sealed class CxTestCaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The human-readable name of the test case, unique within the agent. Limit of 200 characters.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Additional freeform notes about the test case. Limit of 400 characters.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// The agent to create the test case for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
        /// Each tag should start with "#" and has a limit of 30 characters
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("testCaseConversationTurns")]
        private InputList<Inputs.CxTestCaseTestCaseConversationTurnArgs>? _testCaseConversationTurns;

        /// <summary>
        /// The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxTestCaseTestCaseConversationTurnArgs> TestCaseConversationTurns
        {
            get => _testCaseConversationTurns ?? (_testCaseConversationTurns = new InputList<Inputs.CxTestCaseTestCaseConversationTurnArgs>());
            set => _testCaseConversationTurns = value;
        }

        /// <summary>
        /// Config for the test case.
        /// Structure is documented below.
        /// </summary>
        [Input("testConfig")]
        public Input<Inputs.CxTestCaseTestConfigArgs>? TestConfig { get; set; }

        public CxTestCaseArgs()
        {
        }
        public static new CxTestCaseArgs Empty => new CxTestCaseArgs();
    }

    public sealed class CxTestCaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When the test was created. A timestamp in RFC3339 text format.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        /// <summary>
        /// The human-readable name of the test case, unique within the agent. Limit of 200 characters.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("lastTestResults")]
        private InputList<Inputs.CxTestCaseLastTestResultGetArgs>? _lastTestResults;

        /// <summary>
        /// The latest test result.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxTestCaseLastTestResultGetArgs> LastTestResults
        {
            get => _lastTestResults ?? (_lastTestResults = new InputList<Inputs.CxTestCaseLastTestResultGetArgs>());
            set => _lastTestResults = value;
        }

        /// <summary>
        /// The unique identifier of the intent.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/intents/&lt;Intent ID&gt;.
        /// 
        /// (Optional)
        /// The unique identifier of the page.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/pages/&lt;Page ID&gt;.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Additional freeform notes about the test case. Limit of 400 characters.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// The agent to create the test case for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
        /// Each tag should start with "#" and has a limit of 30 characters
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("testCaseConversationTurns")]
        private InputList<Inputs.CxTestCaseTestCaseConversationTurnGetArgs>? _testCaseConversationTurns;

        /// <summary>
        /// The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxTestCaseTestCaseConversationTurnGetArgs> TestCaseConversationTurns
        {
            get => _testCaseConversationTurns ?? (_testCaseConversationTurns = new InputList<Inputs.CxTestCaseTestCaseConversationTurnGetArgs>());
            set => _testCaseConversationTurns = value;
        }

        /// <summary>
        /// Config for the test case.
        /// Structure is documented below.
        /// </summary>
        [Input("testConfig")]
        public Input<Inputs.CxTestCaseTestConfigGetArgs>? TestConfig { get; set; }

        public CxTestCaseState()
        {
        }
        public static new CxTestCaseState Empty => new CxTestCaseState();
    }
}
