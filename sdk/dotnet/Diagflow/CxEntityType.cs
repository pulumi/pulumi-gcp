// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// Entities are extracted from user input and represent parameters that are meaningful to your application.
    /// For example, a date range, a proper name such as a geographic location or landmark, and so on. Entities represent actionable data for your application.
    /// 
    /// To get more information about EntityType, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.entityTypes)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
    /// 
    /// ## Example Usage
    /// ### Dialogflowcx Entity Type Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agent = new Gcp.Diagflow.CxAgent("agent", new()
    ///     {
    ///         DisplayName = "dialogflowcx-agent",
    ///         Location = "global",
    ///         DefaultLanguageCode = "en",
    ///         SupportedLanguageCodes = new[]
    ///         {
    ///             "fr",
    ///             "de",
    ///             "es",
    ///         },
    ///         TimeZone = "America/New_York",
    ///         Description = "Example description.",
    ///         AvatarUri = "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
    ///         EnableStackdriverLogging = true,
    ///         EnableSpellCorrection = true,
    ///         SpeechToTextSettings = new Gcp.Diagflow.Inputs.CxAgentSpeechToTextSettingsArgs
    ///         {
    ///             EnableSpeechAdaptation = true,
    ///         },
    ///     });
    /// 
    ///     var basicEntityType = new Gcp.Diagflow.CxEntityType("basicEntityType", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "MyEntity",
    ///         Kind = "KIND_MAP",
    ///         Entities = new[]
    ///         {
    ///             new Gcp.Diagflow.Inputs.CxEntityTypeEntityArgs
    ///             {
    ///                 Value = "value1",
    ///                 Synonyms = new[]
    ///                 {
    ///                     "synonym1",
    ///                     "synonym2",
    ///                 },
    ///             },
    ///             new Gcp.Diagflow.Inputs.CxEntityTypeEntityArgs
    ///             {
    ///                 Value = "value2",
    ///                 Synonyms = new[]
    ///                 {
    ///                     "synonym3",
    ///                     "synonym4",
    ///                 },
    ///             },
    ///         },
    ///         EnableFuzzyExtraction = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// EntityType can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxEntityType:CxEntityType default {{parent}}/entityTypes/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxEntityType:CxEntityType default {{parent}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/cxEntityType:CxEntityType")]
    public partial class CxEntityType : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Represents kinds of entities.
        /// * AUTO_EXPANSION_MODE_UNSPECIFIED: Auto expansion disabled for the entity.
        /// * AUTO_EXPANSION_MODE_DEFAULT: Allows an agent to recognize values that have not been explicitly listed in the entity.
        /// Possible values are `AUTO_EXPANSION_MODE_DEFAULT` and `AUTO_EXPANSION_MODE_UNSPECIFIED`.
        /// </summary>
        [Output("autoExpansionMode")]
        public Output<string?> AutoExpansionMode { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the entity type, unique within the agent.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Enables fuzzy entity extraction during classification.
        /// </summary>
        [Output("enableFuzzyExtraction")]
        public Output<bool?> EnableFuzzyExtraction { get; private set; } = null!;

        /// <summary>
        /// The collection of entity entries associated with the entity type.
        /// Structure is documented below.
        /// </summary>
        [Output("entities")]
        public Output<ImmutableArray<Outputs.CxEntityTypeEntity>> Entities { get; private set; } = null!;

        /// <summary>
        /// Collection of exceptional words and phrases that shouldn't be matched. For example, if you have a size entity type with entry giant(an adjective), you might consider adding giants(a noun) as an exclusion.
        /// If the kind of entity type is KIND_MAP, then the phrases specified by entities and excluded phrases should be mutually exclusive.
        /// Structure is documented below.
        /// </summary>
        [Output("excludedPhrases")]
        public Output<ImmutableArray<Outputs.CxEntityTypeExcludedPhrase>> ExcludedPhrases { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the entity type can be automatically expanded.
        /// * KIND_MAP: Map entity types allow mapping of a group of synonyms to a canonical value.
        /// * KIND_LIST: List entity types contain a set of entries that do not map to canonical values. However, list entity types can contain references to other entity types (with or without aliases).
        /// * KIND_REGEXP: Regexp entity types allow to specify regular expressions in entries values.
        /// Possible values are `KIND_MAP`, `KIND_LIST`, and `KIND_REGEXP`.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The language of the following fields in entityType:
        /// EntityType.entities.value
        /// EntityType.entities.synonyms
        /// EntityType.excluded_phrases.value
        /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        /// </summary>
        [Output("languageCode")]
        public Output<string?> LanguageCode { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the entity type.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/entityTypes/&lt;Entity Type ID&gt;.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The agent to create a entity type for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;

        /// <summary>
        /// Indicates whether parameters of the entity type should be redacted in log. If redaction is enabled, page parameters and intent parameters referring to the entity type will be replaced by parameter name when logging.
        /// </summary>
        [Output("redact")]
        public Output<bool?> Redact { get; private set; } = null!;


        /// <summary>
        /// Create a CxEntityType resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CxEntityType(string name, CxEntityTypeArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxEntityType:CxEntityType", name, args ?? new CxEntityTypeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CxEntityType(string name, Input<string> id, CxEntityTypeState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxEntityType:CxEntityType", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CxEntityType resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CxEntityType Get(string name, Input<string> id, CxEntityTypeState? state = null, CustomResourceOptions? options = null)
        {
            return new CxEntityType(name, id, state, options);
        }
    }

    public sealed class CxEntityTypeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Represents kinds of entities.
        /// * AUTO_EXPANSION_MODE_UNSPECIFIED: Auto expansion disabled for the entity.
        /// * AUTO_EXPANSION_MODE_DEFAULT: Allows an agent to recognize values that have not been explicitly listed in the entity.
        /// Possible values are `AUTO_EXPANSION_MODE_DEFAULT` and `AUTO_EXPANSION_MODE_UNSPECIFIED`.
        /// </summary>
        [Input("autoExpansionMode")]
        public Input<string>? AutoExpansionMode { get; set; }

        /// <summary>
        /// The human-readable name of the entity type, unique within the agent.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Enables fuzzy entity extraction during classification.
        /// </summary>
        [Input("enableFuzzyExtraction")]
        public Input<bool>? EnableFuzzyExtraction { get; set; }

        [Input("entities", required: true)]
        private InputList<Inputs.CxEntityTypeEntityArgs>? _entities;

        /// <summary>
        /// The collection of entity entries associated with the entity type.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxEntityTypeEntityArgs> Entities
        {
            get => _entities ?? (_entities = new InputList<Inputs.CxEntityTypeEntityArgs>());
            set => _entities = value;
        }

        [Input("excludedPhrases")]
        private InputList<Inputs.CxEntityTypeExcludedPhraseArgs>? _excludedPhrases;

        /// <summary>
        /// Collection of exceptional words and phrases that shouldn't be matched. For example, if you have a size entity type with entry giant(an adjective), you might consider adding giants(a noun) as an exclusion.
        /// If the kind of entity type is KIND_MAP, then the phrases specified by entities and excluded phrases should be mutually exclusive.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxEntityTypeExcludedPhraseArgs> ExcludedPhrases
        {
            get => _excludedPhrases ?? (_excludedPhrases = new InputList<Inputs.CxEntityTypeExcludedPhraseArgs>());
            set => _excludedPhrases = value;
        }

        /// <summary>
        /// Indicates whether the entity type can be automatically expanded.
        /// * KIND_MAP: Map entity types allow mapping of a group of synonyms to a canonical value.
        /// * KIND_LIST: List entity types contain a set of entries that do not map to canonical values. However, list entity types can contain references to other entity types (with or without aliases).
        /// * KIND_REGEXP: Regexp entity types allow to specify regular expressions in entries values.
        /// Possible values are `KIND_MAP`, `KIND_LIST`, and `KIND_REGEXP`.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// The language of the following fields in entityType:
        /// EntityType.entities.value
        /// EntityType.entities.synonyms
        /// EntityType.excluded_phrases.value
        /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// The agent to create a entity type for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// Indicates whether parameters of the entity type should be redacted in log. If redaction is enabled, page parameters and intent parameters referring to the entity type will be replaced by parameter name when logging.
        /// </summary>
        [Input("redact")]
        public Input<bool>? Redact { get; set; }

        public CxEntityTypeArgs()
        {
        }
        public static new CxEntityTypeArgs Empty => new CxEntityTypeArgs();
    }

    public sealed class CxEntityTypeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Represents kinds of entities.
        /// * AUTO_EXPANSION_MODE_UNSPECIFIED: Auto expansion disabled for the entity.
        /// * AUTO_EXPANSION_MODE_DEFAULT: Allows an agent to recognize values that have not been explicitly listed in the entity.
        /// Possible values are `AUTO_EXPANSION_MODE_DEFAULT` and `AUTO_EXPANSION_MODE_UNSPECIFIED`.
        /// </summary>
        [Input("autoExpansionMode")]
        public Input<string>? AutoExpansionMode { get; set; }

        /// <summary>
        /// The human-readable name of the entity type, unique within the agent.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Enables fuzzy entity extraction during classification.
        /// </summary>
        [Input("enableFuzzyExtraction")]
        public Input<bool>? EnableFuzzyExtraction { get; set; }

        [Input("entities")]
        private InputList<Inputs.CxEntityTypeEntityGetArgs>? _entities;

        /// <summary>
        /// The collection of entity entries associated with the entity type.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxEntityTypeEntityGetArgs> Entities
        {
            get => _entities ?? (_entities = new InputList<Inputs.CxEntityTypeEntityGetArgs>());
            set => _entities = value;
        }

        [Input("excludedPhrases")]
        private InputList<Inputs.CxEntityTypeExcludedPhraseGetArgs>? _excludedPhrases;

        /// <summary>
        /// Collection of exceptional words and phrases that shouldn't be matched. For example, if you have a size entity type with entry giant(an adjective), you might consider adding giants(a noun) as an exclusion.
        /// If the kind of entity type is KIND_MAP, then the phrases specified by entities and excluded phrases should be mutually exclusive.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxEntityTypeExcludedPhraseGetArgs> ExcludedPhrases
        {
            get => _excludedPhrases ?? (_excludedPhrases = new InputList<Inputs.CxEntityTypeExcludedPhraseGetArgs>());
            set => _excludedPhrases = value;
        }

        /// <summary>
        /// Indicates whether the entity type can be automatically expanded.
        /// * KIND_MAP: Map entity types allow mapping of a group of synonyms to a canonical value.
        /// * KIND_LIST: List entity types contain a set of entries that do not map to canonical values. However, list entity types can contain references to other entity types (with or without aliases).
        /// * KIND_REGEXP: Regexp entity types allow to specify regular expressions in entries values.
        /// Possible values are `KIND_MAP`, `KIND_LIST`, and `KIND_REGEXP`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The language of the following fields in entityType:
        /// EntityType.entities.value
        /// EntityType.entities.synonyms
        /// EntityType.excluded_phrases.value
        /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// The unique identifier of the entity type.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/entityTypes/&lt;Entity Type ID&gt;.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The agent to create a entity type for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// Indicates whether parameters of the entity type should be redacted in log. If redaction is enabled, page parameters and intent parameters referring to the entity type will be replaced by parameter name when logging.
        /// </summary>
        [Input("redact")]
        public Input<bool>? Redact { get; set; }

        public CxEntityTypeState()
        {
        }
        public static new CxEntityTypeState Empty => new CxEntityTypeState();
    }
}
