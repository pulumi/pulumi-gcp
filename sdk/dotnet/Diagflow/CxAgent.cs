// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// Agents are best described as Natural Language Understanding (NLU) modules that transform user requests into actionable data. You can include agents in your app, product, or service to determine user intent and respond to the user in a natural way.
    /// 
    /// To get more information about Agent, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
    /// 
    /// ## Example Usage
    /// ### Dialogflowcx Agent Full
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fullAgent = new Gcp.Diagflow.CxAgent("fullAgent", new Gcp.Diagflow.CxAgentArgs
    ///         {
    ///             AvatarUri = "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
    ///             DefaultLanguageCode = "en",
    ///             Description = "Example description.",
    ///             DisplayName = "dialogflowcx-agent",
    ///             EnableSpellCorrection = true,
    ///             EnableStackdriverLogging = true,
    ///             Location = "global",
    ///             SpeechToTextSettings = new Gcp.Diagflow.Inputs.CxAgentSpeechToTextSettingsArgs
    ///             {
    ///                 EnableSpeechAdaptation = true,
    ///             },
    ///             SupportedLanguageCodes = 
    ///             {
    ///                 "fr",
    ///                 "de",
    ///                 "es",
    ///             },
    ///             TimeZone = "America/New_York",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Agent can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxAgent:CxAgent default projects/{{project}}/locations/{{location}}/agents/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxAgent:CxAgent default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxAgent:CxAgent default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/cxAgent:CxAgent")]
    public partial class CxAgent : Pulumi.CustomResource
    {
        /// <summary>
        /// The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted Web Demo integration.
        /// </summary>
        [Output("avatarUri")]
        public Output<string?> AvatarUri { get; private set; } = null!;

        /// <summary>
        /// The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
        /// for a list of the currently supported language codes. This field cannot be updated after creation.
        /// </summary>
        [Output("defaultLanguageCode")]
        public Output<string> DefaultLanguageCode { get; private set; } = null!;

        /// <summary>
        /// The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the agent, unique within the location.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Indicates if automatic spell correction is enabled in detect intent requests.
        /// </summary>
        [Output("enableSpellCorrection")]
        public Output<bool?> EnableSpellCorrection { get; private set; } = null!;

        /// <summary>
        /// Determines whether this agent should log conversation queries.
        /// </summary>
        [Output("enableStackdriverLogging")]
        public Output<bool?> EnableStackdriverLogging { get; private set; } = null!;

        /// <summary>
        /// The name of the location this agent is located in.
        /// &gt; **Note:** The first time you are deploying an Agent in your project you must configure location settings.
        /// This is a one time step but at the moment you can only [configure location settings](https://cloud.google.com/dialogflow/cx/docs/concept/region#location-settings) via the Dialogflow CX console.
        /// Another options is to use global location so you don't need to manually configure location settings.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the agent.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Name of the SecuritySettings reference for the agent. Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/securitySettings/&lt;Security Settings ID&gt;.
        /// </summary>
        [Output("securitySettings")]
        public Output<string?> SecuritySettings { get; private set; } = null!;

        /// <summary>
        /// Settings related to speech recognition.
        /// Structure is documented below.
        /// </summary>
        [Output("speechToTextSettings")]
        public Output<Outputs.CxAgentSpeechToTextSettings?> SpeechToTextSettings { get; private set; } = null!;

        /// <summary>
        /// Name of the start flow in this agent. A start flow will be automatically created when the agent is created, and can only
        /// be deleted by deleting the agent. Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow
        /// ID&gt;.
        /// </summary>
        [Output("startFlow")]
        public Output<string> StartFlow { get; private set; } = null!;

        /// <summary>
        /// The list of all languages supported by this agent (except for the default_language_code).
        /// </summary>
        [Output("supportedLanguageCodes")]
        public Output<ImmutableArray<string>> SupportedLanguageCodes { get; private set; } = null!;

        /// <summary>
        /// The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
        /// Europe/Paris.
        /// </summary>
        [Output("timeZone")]
        public Output<string> TimeZone { get; private set; } = null!;


        /// <summary>
        /// Create a CxAgent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CxAgent(string name, CxAgentArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxAgent:CxAgent", name, args ?? new CxAgentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CxAgent(string name, Input<string> id, CxAgentState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxAgent:CxAgent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CxAgent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CxAgent Get(string name, Input<string> id, CxAgentState? state = null, CustomResourceOptions? options = null)
        {
            return new CxAgent(name, id, state, options);
        }
    }

    public sealed class CxAgentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted Web Demo integration.
        /// </summary>
        [Input("avatarUri")]
        public Input<string>? AvatarUri { get; set; }

        /// <summary>
        /// The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
        /// for a list of the currently supported language codes. This field cannot be updated after creation.
        /// </summary>
        [Input("defaultLanguageCode", required: true)]
        public Input<string> DefaultLanguageCode { get; set; } = null!;

        /// <summary>
        /// The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The human-readable name of the agent, unique within the location.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Indicates if automatic spell correction is enabled in detect intent requests.
        /// </summary>
        [Input("enableSpellCorrection")]
        public Input<bool>? EnableSpellCorrection { get; set; }

        /// <summary>
        /// Determines whether this agent should log conversation queries.
        /// </summary>
        [Input("enableStackdriverLogging")]
        public Input<bool>? EnableStackdriverLogging { get; set; }

        /// <summary>
        /// The name of the location this agent is located in.
        /// &gt; **Note:** The first time you are deploying an Agent in your project you must configure location settings.
        /// This is a one time step but at the moment you can only [configure location settings](https://cloud.google.com/dialogflow/cx/docs/concept/region#location-settings) via the Dialogflow CX console.
        /// Another options is to use global location so you don't need to manually configure location settings.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Name of the SecuritySettings reference for the agent. Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/securitySettings/&lt;Security Settings ID&gt;.
        /// </summary>
        [Input("securitySettings")]
        public Input<string>? SecuritySettings { get; set; }

        /// <summary>
        /// Settings related to speech recognition.
        /// Structure is documented below.
        /// </summary>
        [Input("speechToTextSettings")]
        public Input<Inputs.CxAgentSpeechToTextSettingsArgs>? SpeechToTextSettings { get; set; }

        [Input("supportedLanguageCodes")]
        private InputList<string>? _supportedLanguageCodes;

        /// <summary>
        /// The list of all languages supported by this agent (except for the default_language_code).
        /// </summary>
        public InputList<string> SupportedLanguageCodes
        {
            get => _supportedLanguageCodes ?? (_supportedLanguageCodes = new InputList<string>());
            set => _supportedLanguageCodes = value;
        }

        /// <summary>
        /// The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
        /// Europe/Paris.
        /// </summary>
        [Input("timeZone", required: true)]
        public Input<string> TimeZone { get; set; } = null!;

        public CxAgentArgs()
        {
        }
    }

    public sealed class CxAgentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted Web Demo integration.
        /// </summary>
        [Input("avatarUri")]
        public Input<string>? AvatarUri { get; set; }

        /// <summary>
        /// The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
        /// for a list of the currently supported language codes. This field cannot be updated after creation.
        /// </summary>
        [Input("defaultLanguageCode")]
        public Input<string>? DefaultLanguageCode { get; set; }

        /// <summary>
        /// The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The human-readable name of the agent, unique within the location.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Indicates if automatic spell correction is enabled in detect intent requests.
        /// </summary>
        [Input("enableSpellCorrection")]
        public Input<bool>? EnableSpellCorrection { get; set; }

        /// <summary>
        /// Determines whether this agent should log conversation queries.
        /// </summary>
        [Input("enableStackdriverLogging")]
        public Input<bool>? EnableStackdriverLogging { get; set; }

        /// <summary>
        /// The name of the location this agent is located in.
        /// &gt; **Note:** The first time you are deploying an Agent in your project you must configure location settings.
        /// This is a one time step but at the moment you can only [configure location settings](https://cloud.google.com/dialogflow/cx/docs/concept/region#location-settings) via the Dialogflow CX console.
        /// Another options is to use global location so you don't need to manually configure location settings.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The unique identifier of the agent.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Name of the SecuritySettings reference for the agent. Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/securitySettings/&lt;Security Settings ID&gt;.
        /// </summary>
        [Input("securitySettings")]
        public Input<string>? SecuritySettings { get; set; }

        /// <summary>
        /// Settings related to speech recognition.
        /// Structure is documented below.
        /// </summary>
        [Input("speechToTextSettings")]
        public Input<Inputs.CxAgentSpeechToTextSettingsGetArgs>? SpeechToTextSettings { get; set; }

        /// <summary>
        /// Name of the start flow in this agent. A start flow will be automatically created when the agent is created, and can only
        /// be deleted by deleting the agent. Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow
        /// ID&gt;.
        /// </summary>
        [Input("startFlow")]
        public Input<string>? StartFlow { get; set; }

        [Input("supportedLanguageCodes")]
        private InputList<string>? _supportedLanguageCodes;

        /// <summary>
        /// The list of all languages supported by this agent (except for the default_language_code).
        /// </summary>
        public InputList<string> SupportedLanguageCodes
        {
            get => _supportedLanguageCodes ?? (_supportedLanguageCodes = new InputList<string>());
            set => _supportedLanguageCodes = value;
        }

        /// <summary>
        /// The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
        /// Europe/Paris.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        public CxAgentState()
        {
        }
    }
}
