// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// Playbook is the basic building block to instruct the LLM how to execute a certain task.
    /// 
    /// To get more information about Playbook, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.playbooks)
    /// * How-to Guides
    ///     * [Official CX Documentation](https://cloud.google.com/dialogflow/cx/docs)
    /// 
    /// ## Example Usage
    /// 
    /// ### Dialogflowcx Playbook Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agent = new Gcp.Diagflow.CxAgent("agent", new()
    ///     {
    ///         DisplayName = "dialogflowcx-agent-basic",
    ///         Location = "global",
    ///         DefaultLanguageCode = "en",
    ///         TimeZone = "America/New_York",
    ///         Description = "Example description.",
    ///     });
    /// 
    ///     var my_playbook = new Gcp.Diagflow.CxPlaybook("my-playbook", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "Example Display Name",
    ///         Goal = "Example Goal",
    ///         PlaybookType = "ROUTINE",
    ///         Instruction = new Gcp.Diagflow.Inputs.CxPlaybookInstructionArgs
    ///         {
    ///             Steps = new[]
    ///             {
    ///                 new Gcp.Diagflow.Inputs.CxPlaybookInstructionStepArgs
    ///                 {
    ///                     Text = "step 1",
    ///                     Steps = JsonSerializer.Serialize(new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["text"] = "step 1 1",
    ///                         },
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["text"] = "step 1 2",
    ///                             ["steps"] = new[]
    ///                             {
    ///                                 new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["text"] = "step 1 2 1",
    ///                                 },
    ///                                 new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["text"] = "step 1 2 2",
    ///                                 },
    ///                             },
    ///                         },
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["text"] = "step 1 3",
    ///                         },
    ///                     }),
    ///                 },
    ///                 new Gcp.Diagflow.Inputs.CxPlaybookInstructionStepArgs
    ///                 {
    ///                     Text = "step 2",
    ///                 },
    ///                 new Gcp.Diagflow.Inputs.CxPlaybookInstructionStepArgs
    ///                 {
    ///                     Text = "step 3",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dialogflowcx Playbook Fulfillment
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agent = new Gcp.Diagflow.CxAgent("agent", new()
    ///     {
    ///         DisplayName = "dialogflowcx-agent",
    ///         Location = "global",
    ///         DefaultLanguageCode = "en",
    ///         TimeZone = "America/New_York",
    ///         Description = "Example description.",
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Name = "dialogflowcx-bucket",
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var myWebhook = new Gcp.Diagflow.CxWebhook("my_webhook", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "MyWebhook",
    ///         GenericWebService = new Gcp.Diagflow.Inputs.CxWebhookGenericWebServiceArgs
    ///         {
    ///             Uri = "https://example.com",
    ///         },
    ///     });
    /// 
    ///     var myTool = new Gcp.Diagflow.CxTool("my_tool", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "Example Tool",
    ///         Description = "Example Description",
    ///     });
    /// 
    ///     var myGenerator = new Gcp.Diagflow.CxGenerator("my_generator", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "TF Prompt generator",
    ///         LlmModelSettings = new Gcp.Diagflow.Inputs.CxGeneratorLlmModelSettingsArgs
    ///         {
    ///             Model = "gemini-2.0-flash-001",
    ///             PromptText = "Return me some great results",
    ///         },
    ///         PromptText = new Gcp.Diagflow.Inputs.CxGeneratorPromptTextArgs
    ///         {
    ///             Text = "Send me great results in french",
    ///         },
    ///         ModelParameter = new Gcp.Diagflow.Inputs.CxGeneratorModelParameterArgs
    ///         {
    ///             Temperature = 0.55,
    ///         },
    ///     });
    /// 
    ///     var my_playbook = new Gcp.Diagflow.CxPlaybook("my-playbook", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "Playbook Example with Fulfillment",
    ///         Goal = "Example Goal",
    ///         Instruction = new Gcp.Diagflow.Inputs.CxPlaybookInstructionArgs
    ///         {
    ///             Guidelines = "Example Guidelines",
    ///             Steps = new[]
    ///             {
    ///                 new Gcp.Diagflow.Inputs.CxPlaybookInstructionStepArgs
    ///                 {
    ///                     Text = "step 1",
    ///                     Steps = JsonSerializer.Serialize(new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["text"] = "step 1 1",
    ///                         },
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["text"] = "step 1 2",
    ///                             ["steps"] = new[]
    ///                             {
    ///                                 new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["text"] = "step 1 2 1",
    ///                                 },
    ///                                 new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["text"] = "step 1 2 2",
    ///                                 },
    ///                             },
    ///                         },
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["text"] = "step 1 3",
    ///                         },
    ///                     }),
    ///                 },
    ///                 new Gcp.Diagflow.Inputs.CxPlaybookInstructionStepArgs
    ///                 {
    ///                     Text = "step 2",
    ///                 },
    ///                 new Gcp.Diagflow.Inputs.CxPlaybookInstructionStepArgs
    ///                 {
    ///                     Text = "step 3",
    ///                 },
    ///             },
    ///         },
    ///         LlmModelSettings = new Gcp.Diagflow.Inputs.CxPlaybookLlmModelSettingsArgs
    ///         {
    ///             Model = "gemini-2.0-flash-001",
    ///             PromptText = "Return me some great results",
    ///         },
    ///         ReferencedTools = new[]
    ///         {
    ///             myTool.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Playbook can be imported using any of these accepted formats:
    /// 
    /// * `{{parent}}/playbooks/{{name}}`
    /// 
    /// * `{{parent}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, Playbook can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:diagflow/cxPlaybook:CxPlaybook default {{parent}}/playbooks/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:diagflow/cxPlaybook:CxPlaybook default {{parent}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/cxPlaybook:CxPlaybook")]
    public partial class CxPlaybook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The timestamp of initial playbook creation.
        /// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the playbook, unique within an agent.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// High level description of the goal the playbook intend to accomplish. A goal should be concise since it's visible to other playbooks that may reference this playbook.
        /// </summary>
        [Output("goal")]
        public Output<string> Goal { get; private set; } = null!;

        /// <summary>
        /// Instruction to accomplish target goal.
        /// Structure is documented below.
        /// </summary>
        [Output("instruction")]
        public Output<Outputs.CxPlaybookInstruction?> Instruction { get; private set; } = null!;

        /// <summary>
        /// Llm model settings for the playbook.
        /// Structure is documented below.
        /// </summary>
        [Output("llmModelSettings")]
        public Output<Outputs.CxPlaybookLlmModelSettings?> LlmModelSettings { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the Playbook.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/playbooks/&lt;Playbook ID&gt;.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The agent to create a Playbook for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;

        /// <summary>
        /// Type of the playbook.
        /// Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
        /// </summary>
        [Output("playbookType")]
        public Output<string?> PlaybookType { get; private set; } = null!;

        /// <summary>
        /// The resource name of flows referenced by the current playbook in the instructions.
        /// </summary>
        [Output("referencedFlows")]
        public Output<ImmutableArray<string>> ReferencedFlows { get; private set; } = null!;

        /// <summary>
        /// The resource name of other playbooks referenced by the current playbook in the instructions.
        /// </summary>
        [Output("referencedPlaybooks")]
        public Output<ImmutableArray<string>> ReferencedPlaybooks { get; private set; } = null!;

        /// <summary>
        /// The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
        /// </summary>
        [Output("referencedTools")]
        public Output<ImmutableArray<string>> ReferencedTools { get; private set; } = null!;

        /// <summary>
        /// Estimated number of tokes current playbook takes when sent to the LLM.
        /// </summary>
        [Output("tokenCount")]
        public Output<string> TokenCount { get; private set; } = null!;

        /// <summary>
        /// Last time the playbook version was updated.
        /// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a CxPlaybook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CxPlaybook(string name, CxPlaybookArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxPlaybook:CxPlaybook", name, args ?? new CxPlaybookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CxPlaybook(string name, Input<string> id, CxPlaybookState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxPlaybook:CxPlaybook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CxPlaybook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CxPlaybook Get(string name, Input<string> id, CxPlaybookState? state = null, CustomResourceOptions? options = null)
        {
            return new CxPlaybook(name, id, state, options);
        }
    }

    public sealed class CxPlaybookArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The human-readable name of the playbook, unique within an agent.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// High level description of the goal the playbook intend to accomplish. A goal should be concise since it's visible to other playbooks that may reference this playbook.
        /// </summary>
        [Input("goal", required: true)]
        public Input<string> Goal { get; set; } = null!;

        /// <summary>
        /// Instruction to accomplish target goal.
        /// Structure is documented below.
        /// </summary>
        [Input("instruction")]
        public Input<Inputs.CxPlaybookInstructionArgs>? Instruction { get; set; }

        /// <summary>
        /// Llm model settings for the playbook.
        /// Structure is documented below.
        /// </summary>
        [Input("llmModelSettings")]
        public Input<Inputs.CxPlaybookLlmModelSettingsArgs>? LlmModelSettings { get; set; }

        /// <summary>
        /// The agent to create a Playbook for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// Type of the playbook.
        /// Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
        /// </summary>
        [Input("playbookType")]
        public Input<string>? PlaybookType { get; set; }

        [Input("referencedTools")]
        private InputList<string>? _referencedTools;

        /// <summary>
        /// The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
        /// </summary>
        public InputList<string> ReferencedTools
        {
            get => _referencedTools ?? (_referencedTools = new InputList<string>());
            set => _referencedTools = value;
        }

        public CxPlaybookArgs()
        {
        }
        public static new CxPlaybookArgs Empty => new CxPlaybookArgs();
    }

    public sealed class CxPlaybookState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The timestamp of initial playbook creation.
        /// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The human-readable name of the playbook, unique within an agent.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// High level description of the goal the playbook intend to accomplish. A goal should be concise since it's visible to other playbooks that may reference this playbook.
        /// </summary>
        [Input("goal")]
        public Input<string>? Goal { get; set; }

        /// <summary>
        /// Instruction to accomplish target goal.
        /// Structure is documented below.
        /// </summary>
        [Input("instruction")]
        public Input<Inputs.CxPlaybookInstructionGetArgs>? Instruction { get; set; }

        /// <summary>
        /// Llm model settings for the playbook.
        /// Structure is documented below.
        /// </summary>
        [Input("llmModelSettings")]
        public Input<Inputs.CxPlaybookLlmModelSettingsGetArgs>? LlmModelSettings { get; set; }

        /// <summary>
        /// The unique identifier of the Playbook.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/playbooks/&lt;Playbook ID&gt;.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The agent to create a Playbook for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// Type of the playbook.
        /// Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
        /// </summary>
        [Input("playbookType")]
        public Input<string>? PlaybookType { get; set; }

        [Input("referencedFlows")]
        private InputList<string>? _referencedFlows;

        /// <summary>
        /// The resource name of flows referenced by the current playbook in the instructions.
        /// </summary>
        public InputList<string> ReferencedFlows
        {
            get => _referencedFlows ?? (_referencedFlows = new InputList<string>());
            set => _referencedFlows = value;
        }

        [Input("referencedPlaybooks")]
        private InputList<string>? _referencedPlaybooks;

        /// <summary>
        /// The resource name of other playbooks referenced by the current playbook in the instructions.
        /// </summary>
        public InputList<string> ReferencedPlaybooks
        {
            get => _referencedPlaybooks ?? (_referencedPlaybooks = new InputList<string>());
            set => _referencedPlaybooks = value;
        }

        [Input("referencedTools")]
        private InputList<string>? _referencedTools;

        /// <summary>
        /// The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
        /// </summary>
        public InputList<string> ReferencedTools
        {
            get => _referencedTools ?? (_referencedTools = new InputList<string>());
            set => _referencedTools = value;
        }

        /// <summary>
        /// Estimated number of tokes current playbook takes when sent to the LLM.
        /// </summary>
        [Input("tokenCount")]
        public Input<string>? TokenCount { get; set; }

        /// <summary>
        /// Last time the playbook version was updated.
        /// Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public CxPlaybookState()
        {
        }
        public static new CxPlaybookState Empty => new CxPlaybookState();
    }
}
