// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// A tool provides a list of actions which are available to the Playbook to attain its goal.
    /// A Tool consists of a description of the tool's usage and a specification of the tool which contains the schema and authentication information.
    /// 
    /// To get more information about Tool, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.tools)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
    /// 
    /// ## Example Usage
    /// 
    /// ### Dialogflowcx Tool Open Api
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agent = new Gcp.Diagflow.CxAgent("agent", new()
    ///     {
    ///         DisplayName = "dialogflowcx-agent-open-api",
    ///         Location = "global",
    ///         DefaultLanguageCode = "en",
    ///         TimeZone = "America/New_York",
    ///         Description = "Example description.",
    ///     });
    /// 
    ///     var openApiTool = new Gcp.Diagflow.CxTool("open_api_tool", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "Example Open API Tool",
    ///         Description = "Example Description",
    ///         OpenApiSpec = new Gcp.Diagflow.Inputs.CxToolOpenApiSpecArgs
    ///         {
    ///             Authentication = new Gcp.Diagflow.Inputs.CxToolOpenApiSpecAuthenticationArgs
    ///             {
    ///                 OauthConfig = new Gcp.Diagflow.Inputs.CxToolOpenApiSpecAuthenticationOauthConfigArgs
    ///                 {
    ///                     OauthGrantType = "CLIENT_CREDENTIAL",
    ///                     ClientId = "example client ID",
    ///                     ClientSecret = "example client secret",
    ///                     Scopes = new[]
    ///                     {
    ///                         "example scope",
    ///                     },
    ///                     SecretVersionForClientSecret = "projects/-/secrets/-/versions/-",
    ///                     TokenEndpoint = "https://example.com/oauth/token",
    ///                 },
    ///             },
    ///             TlsConfig = new Gcp.Diagflow.Inputs.CxToolOpenApiSpecTlsConfigArgs
    ///             {
    ///                 CaCerts = new[]
    ///                 {
    ///                     new Gcp.Diagflow.Inputs.CxToolOpenApiSpecTlsConfigCaCertArgs
    ///                     {
    ///                         DisplayName = "example ca cert name",
    ///                         Cert = Std.Base64encode.Invoke(new()
    ///                         {
    ///                             Input = "example cert",
    ///                         }).Apply(invoke =&gt; invoke.Result),
    ///                     },
    ///                 },
    ///             },
    ///             ServiceDirectoryConfig = new Gcp.Diagflow.Inputs.CxToolOpenApiSpecServiceDirectoryConfigArgs
    ///             {
    ///                 Service = "projects/-/locations/-/namespaces/-/services/-",
    ///             },
    ///             TextSchema = @"    {
    ///       ""openapi"": ""3.0.0"",
    ///       ""info"": {
    ///         ""title"": ""Time API"",
    ///         ""version"": ""1.0.0"",
    ///         ""description"": ""A simple API to get the current time.""
    ///       },
    ///       ""servers"": [
    ///         {
    ///           ""url"": ""https://example-api-endpoint.com""
    ///         }
    ///       ],
    ///       ""paths"": {
    ///         ""/time"": {
    ///           ""get"": {
    ///             ""operationId"": ""getCurrentTime"",
    ///             ""summary"": ""Gets the current server time."",
    ///             ""responses"": {
    ///               ""200"": {
    ///                 ""description"": ""Successful response with the current time."",
    ///                 ""content"": {
    ///                   ""application/json"": {
    ///                     ""schema"": {
    ///                       ""type"": ""object"",
    ///                       ""properties"": {
    ///                         ""currentTime"": {
    ///                           ""type"": ""string"",
    ///                           ""format"": ""date-time"",
    ///                           ""description"": ""The current time in ISO 8601 format.""
    ///                         }
    ///                       }
    ///                     }
    ///                   }
    ///                 }
    ///               }
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    /// ",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dialogflowcx Tool Data Store
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myDatastore = new Gcp.DiscoveryEngine.DataStore("my_datastore", new()
    ///     {
    ///         Location = "global",
    ///         DataStoreId = "datastore-tool-test-_79169",
    ///         DisplayName = "datastore for Tool test",
    ///         IndustryVertical = "GENERIC",
    ///         ContentConfig = "NO_CONTENT",
    ///         SolutionTypes = new[]
    ///         {
    ///             "SOLUTION_TYPE_CHAT",
    ///         },
    ///     });
    /// 
    ///     var agent = new Gcp.Diagflow.CxAgent("agent", new()
    ///     {
    ///         DisplayName = "dialogflowcx-agent-data-store",
    ///         Location = "global",
    ///         DefaultLanguageCode = "en",
    ///         TimeZone = "America/New_York",
    ///         Description = "Example description.",
    ///         DeleteChatEngineOnDestroy = true,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             myDatastore,
    ///         },
    ///     });
    /// 
    ///     var project = Gcp.Organizations.GetProject.Invoke();
    /// 
    ///     var dataStoreTool = new Gcp.Diagflow.CxTool("data_store_tool", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "Example Data Store Tool",
    ///         Description = "Example Description",
    ///         DataStoreSpec = new Gcp.Diagflow.Inputs.CxToolDataStoreSpecArgs
    ///         {
    ///             DataStoreConnections = new[]
    ///             {
    ///                 new Gcp.Diagflow.Inputs.CxToolDataStoreSpecDataStoreConnectionArgs
    ///                 {
    ///                     DataStoreType = "UNSTRUCTURED",
    ///                     DataStore = Output.Tuple(project, myDatastore.DataStoreId).Apply(values =&gt;
    ///                     {
    ///                         var project = values.Item1;
    ///                         var dataStoreId = values.Item2;
    ///                         return $"projects/{project.Apply(getProjectResult =&gt; getProjectResult.Number)}/locations/global/collections/default_collection/dataStores/{dataStoreId}";
    ///                     }),
    ///                     DocumentProcessingMode = "DOCUMENTS",
    ///                 },
    ///             },
    ///             FallbackPrompt = null,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             myDatastore,
    ///             agent,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dialogflowcx Tool Function
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agent = new Gcp.Diagflow.CxAgent("agent", new()
    ///     {
    ///         DisplayName = "dialogflowcx-agent-fucntion",
    ///         Location = "global",
    ///         DefaultLanguageCode = "en",
    ///         TimeZone = "America/New_York",
    ///         Description = "Example description.",
    ///     });
    /// 
    ///     var functionTool = new Gcp.Diagflow.CxTool("function_tool", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "Example Function Tool",
    ///         Description = "Example Description",
    ///         FunctionSpec = new Gcp.Diagflow.Inputs.CxToolFunctionSpecArgs
    ///         {
    ///             InputSchema = @"      {
    ///         ""type"": ""object"",
    ///         ""properties"": {
    ///           ""message_to_echo"": {
    ///             ""type"": ""string"",
    ///             ""description"": ""The message that should be echoed back.""
    ///           }
    ///         },
    ///         ""required"": [
    ///           ""message_to_echo""
    ///         ]
    ///       }
    /// ",
    ///             OutputSchema = @"      {
    ///         ""type"": ""object"",
    ///         ""properties"": {
    ///           ""echoed_message"": {
    ///             ""type"": ""string"",
    ///             ""description"": ""The message that is echoed back.""
    ///           }
    ///         }
    ///       }
    /// ",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Tool can be imported using any of these accepted formats:
    /// 
    /// * `{{parent}}/tools/{{name}}`
    /// 
    /// * `{{parent}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, Tool can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:diagflow/cxTool:CxTool default {{parent}}/tools/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:diagflow/cxTool:CxTool default {{parent}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/cxTool:CxTool")]
    public partial class CxTool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Data store search tool specification.
        /// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
        /// Structure is documented below.
        /// </summary>
        [Output("dataStoreSpec")]
        public Output<Outputs.CxToolDataStoreSpec?> DataStoreSpec { get; private set; } = null!;

        /// <summary>
        /// High level description of the Tool and its usage.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the tool, unique within the agent.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Client side executed function specification.
        /// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
        /// Structure is documented below.
        /// </summary>
        [Output("functionSpec")]
        public Output<Outputs.CxToolFunctionSpec?> FunctionSpec { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the Tool.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/tools/&lt;Tool ID&gt;.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// OpenAPI specification of the Tool.
        /// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
        /// Structure is documented below.
        /// </summary>
        [Output("openApiSpec")]
        public Output<Outputs.CxToolOpenApiSpec?> OpenApiSpec { get; private set; } = null!;

        /// <summary>
        /// The agent to create a Tool for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;

        /// <summary>
        /// The tool type.
        /// </summary>
        [Output("toolType")]
        public Output<string> ToolType { get; private set; } = null!;


        /// <summary>
        /// Create a CxTool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CxTool(string name, CxToolArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxTool:CxTool", name, args ?? new CxToolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CxTool(string name, Input<string> id, CxToolState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxTool:CxTool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CxTool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CxTool Get(string name, Input<string> id, CxToolState? state = null, CustomResourceOptions? options = null)
        {
            return new CxTool(name, id, state, options);
        }
    }

    public sealed class CxToolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Data store search tool specification.
        /// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
        /// Structure is documented below.
        /// </summary>
        [Input("dataStoreSpec")]
        public Input<Inputs.CxToolDataStoreSpecArgs>? DataStoreSpec { get; set; }

        /// <summary>
        /// High level description of the Tool and its usage.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// The human-readable name of the tool, unique within the agent.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Client side executed function specification.
        /// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
        /// Structure is documented below.
        /// </summary>
        [Input("functionSpec")]
        public Input<Inputs.CxToolFunctionSpecArgs>? FunctionSpec { get; set; }

        /// <summary>
        /// OpenAPI specification of the Tool.
        /// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
        /// Structure is documented below.
        /// </summary>
        [Input("openApiSpec")]
        public Input<Inputs.CxToolOpenApiSpecArgs>? OpenApiSpec { get; set; }

        /// <summary>
        /// The agent to create a Tool for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        public CxToolArgs()
        {
        }
        public static new CxToolArgs Empty => new CxToolArgs();
    }

    public sealed class CxToolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Data store search tool specification.
        /// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
        /// Structure is documented below.
        /// </summary>
        [Input("dataStoreSpec")]
        public Input<Inputs.CxToolDataStoreSpecGetArgs>? DataStoreSpec { get; set; }

        /// <summary>
        /// High level description of the Tool and its usage.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The human-readable name of the tool, unique within the agent.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Client side executed function specification.
        /// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
        /// Structure is documented below.
        /// </summary>
        [Input("functionSpec")]
        public Input<Inputs.CxToolFunctionSpecGetArgs>? FunctionSpec { get; set; }

        /// <summary>
        /// The unique identifier of the Tool.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/tools/&lt;Tool ID&gt;.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// OpenAPI specification of the Tool.
        /// This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
        /// Structure is documented below.
        /// </summary>
        [Input("openApiSpec")]
        public Input<Inputs.CxToolOpenApiSpecGetArgs>? OpenApiSpec { get; set; }

        /// <summary>
        /// The agent to create a Tool for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// The tool type.
        /// </summary>
        [Input("toolType")]
        public Input<string>? ToolType { get; set; }

        public CxToolState()
        {
        }
        public static new CxToolState Empty => new CxToolState();
    }
}
