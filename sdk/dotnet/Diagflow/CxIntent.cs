// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// An intent represents a user's intent to interact with a conversational agent.
    /// 
    /// To get more information about Intent, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.intents)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
    /// 
    /// ## Example Usage
    /// ### Dialogflowcx Intent Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agent = new Gcp.Diagflow.CxAgent("agent", new()
    ///     {
    ///         DisplayName = "dialogflowcx-agent",
    ///         Location = "global",
    ///         DefaultLanguageCode = "en",
    ///         SupportedLanguageCodes = new[]
    ///         {
    ///             "fr",
    ///             "de",
    ///             "es",
    ///         },
    ///         TimeZone = "America/New_York",
    ///         Description = "Example description.",
    ///         AvatarUri = "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
    ///         EnableStackdriverLogging = true,
    ///         EnableSpellCorrection = true,
    ///         SpeechToTextSettings = new Gcp.Diagflow.Inputs.CxAgentSpeechToTextSettingsArgs
    ///         {
    ///             EnableSpeechAdaptation = true,
    ///         },
    ///     });
    /// 
    ///     var basicIntent = new Gcp.Diagflow.CxIntent("basicIntent", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "Example",
    ///         Priority = 1,
    ///         Description = "Intent example",
    ///         TrainingPhrases = new[]
    ///         {
    ///             new Gcp.Diagflow.Inputs.CxIntentTrainingPhraseArgs
    ///             {
    ///                 Parts = new[]
    ///                 {
    ///                     new Gcp.Diagflow.Inputs.CxIntentTrainingPhrasePartArgs
    ///                     {
    ///                         Text = "training",
    ///                     },
    ///                     new Gcp.Diagflow.Inputs.CxIntentTrainingPhrasePartArgs
    ///                     {
    ///                         Text = "phrase",
    ///                     },
    ///                     new Gcp.Diagflow.Inputs.CxIntentTrainingPhrasePartArgs
    ///                     {
    ///                         Text = "example",
    ///                     },
    ///                 },
    ///                 RepeatCount = 1,
    ///             },
    ///         },
    ///         Parameters = new[]
    ///         {
    ///             new Gcp.Diagflow.Inputs.CxIntentParameterArgs
    ///             {
    ///                 Id = "param1",
    ///                 EntityType = "projects/-/locations/-/agents/-/entityTypes/sys.date",
    ///             },
    ///         },
    ///         Labels = 
    ///         {
    ///             { "label1", "value1" },
    ///             { "label2", "value2" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Intent can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxIntent:CxIntent default {{parent}}/intents/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxIntent:CxIntent default {{parent}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/cxIntent:CxIntent")]
    public partial class CxIntent : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the intent, unique within the agent.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation.
        /// Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event.
        /// </summary>
        [Output("isFallback")]
        public Output<bool?> IsFallback { get; private set; } = null!;

        /// <summary>
        /// The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols '-' and '_'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes.
        /// Prefix "sys-" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. "sys-head" means the intent is a head intent. "sys.contextual" means the intent is a contextual intent.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The language of the following fields in intent:
        /// Intent.training_phrases.parts.text
        /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        /// </summary>
        [Output("languageCode")]
        public Output<string?> LanguageCode { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the intent.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/intents/&lt;Intent ID&gt;.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The collection of parameters associated with the intent.
        /// Structure is documented below.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableArray<Outputs.CxIntentParameter>> Parameters { get; private set; } = null!;

        /// <summary>
        /// The agent to create an intent for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;

        /// <summary>
        /// The priority of this intent. Higher numbers represent higher priorities.
        /// If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the Normal priority in the console.
        /// If the supplied value is negative, the intent is ignored in runtime detect intent requests.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// The collection of training phrases the agent is trained on to identify the intent.
        /// Structure is documented below.
        /// </summary>
        [Output("trainingPhrases")]
        public Output<ImmutableArray<Outputs.CxIntentTrainingPhrase>> TrainingPhrases { get; private set; } = null!;


        /// <summary>
        /// Create a CxIntent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CxIntent(string name, CxIntentArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxIntent:CxIntent", name, args ?? new CxIntentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CxIntent(string name, Input<string> id, CxIntentState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxIntent:CxIntent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CxIntent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CxIntent Get(string name, Input<string> id, CxIntentState? state = null, CustomResourceOptions? options = null)
        {
            return new CxIntent(name, id, state, options);
        }
    }

    public sealed class CxIntentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The human-readable name of the intent, unique within the agent.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation.
        /// Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event.
        /// </summary>
        [Input("isFallback")]
        public Input<bool>? IsFallback { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols '-' and '_'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes.
        /// Prefix "sys-" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. "sys-head" means the intent is a head intent. "sys.contextual" means the intent is a contextual intent.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The language of the following fields in intent:
        /// Intent.training_phrases.parts.text
        /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        [Input("parameters")]
        private InputList<Inputs.CxIntentParameterArgs>? _parameters;

        /// <summary>
        /// The collection of parameters associated with the intent.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxIntentParameterArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.CxIntentParameterArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The agent to create an intent for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// The priority of this intent. Higher numbers represent higher priorities.
        /// If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the Normal priority in the console.
        /// If the supplied value is negative, the intent is ignored in runtime detect intent requests.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("trainingPhrases")]
        private InputList<Inputs.CxIntentTrainingPhraseArgs>? _trainingPhrases;

        /// <summary>
        /// The collection of training phrases the agent is trained on to identify the intent.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxIntentTrainingPhraseArgs> TrainingPhrases
        {
            get => _trainingPhrases ?? (_trainingPhrases = new InputList<Inputs.CxIntentTrainingPhraseArgs>());
            set => _trainingPhrases = value;
        }

        public CxIntentArgs()
        {
        }
        public static new CxIntentArgs Empty => new CxIntentArgs();
    }

    public sealed class CxIntentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The human-readable name of the intent, unique within the agent.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation.
        /// Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event.
        /// </summary>
        [Input("isFallback")]
        public Input<bool>? IsFallback { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols '-' and '_'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes.
        /// Prefix "sys-" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. "sys-head" means the intent is a head intent. "sys.contextual" means the intent is a contextual intent.
        /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The language of the following fields in intent:
        /// Intent.training_phrases.parts.text
        /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// The unique identifier of the intent.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/intents/&lt;Intent ID&gt;.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters")]
        private InputList<Inputs.CxIntentParameterGetArgs>? _parameters;

        /// <summary>
        /// The collection of parameters associated with the intent.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxIntentParameterGetArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.CxIntentParameterGetArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The agent to create an intent for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// The priority of this intent. Higher numbers represent higher priorities.
        /// If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the Normal priority in the console.
        /// If the supplied value is negative, the intent is ignored in runtime detect intent requests.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("trainingPhrases")]
        private InputList<Inputs.CxIntentTrainingPhraseGetArgs>? _trainingPhrases;

        /// <summary>
        /// The collection of training phrases the agent is trained on to identify the intent.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxIntentTrainingPhraseGetArgs> TrainingPhrases
        {
            get => _trainingPhrases ?? (_trainingPhrases = new InputList<Inputs.CxIntentTrainingPhraseGetArgs>());
            set => _trainingPhrases = value;
        }

        public CxIntentState()
        {
        }
        public static new CxIntentState Empty => new CxIntentState();
    }
}
