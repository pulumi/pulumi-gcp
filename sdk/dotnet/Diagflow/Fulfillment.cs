// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// By default, your agent responds to a matched intent with a static response. If you're using one of the integration options, you can provide a more dynamic response by using fulfillment. When you enable fulfillment for an intent, Dialogflow responds to that intent by calling a service that you define. For example, if an end-user wants to schedule a haircut on Friday, your service can check your database and respond to the end-user with availability information for Friday.
    /// 
    /// To get more information about Fulfillment, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/es/docs/reference/rest/v2/projects.agent/getFulfillment)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dialogflow/es/docs/fulfillment-overview)
    /// 
    /// ## Example Usage
    /// ### Dialogflow Fulfillment Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicAgent = new Gcp.Diagflow.Agent("basicAgent", new()
    ///     {
    ///         DisplayName = "example_agent",
    ///         DefaultLanguageCode = "en",
    ///         TimeZone = "America/New_York",
    ///     });
    /// 
    ///     var basicFulfillment = new Gcp.Diagflow.Fulfillment("basicFulfillment", new()
    ///     {
    ///         DisplayName = "basic-fulfillment",
    ///         Enabled = true,
    ///         GenericWebService = new Gcp.Diagflow.Inputs.FulfillmentGenericWebServiceArgs
    ///         {
    ///             Uri = "https://google.com",
    ///             Username = "admin",
    ///             Password = "password",
    ///             RequestHeaders = 
    ///             {
    ///                 { "name", "wrench" },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             basicAgent,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Fulfillment can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/fulfillment:Fulfillment default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/fulfillment:Fulfillment")]
    public partial class Fulfillment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The human-readable name of the fulfillment, unique within the agent.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Whether fulfillment is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The field defines whether the fulfillment is enabled for certain features.
        /// Structure is documented below.
        /// </summary>
        [Output("features")]
        public Output<ImmutableArray<Outputs.FulfillmentFeature>> Features { get; private set; } = null!;

        /// <summary>
        /// Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic authentication with username and password. - Authentication with additional authentication headers.
        /// Structure is documented below.
        /// </summary>
        [Output("genericWebService")]
        public Output<Outputs.FulfillmentGenericWebService?> GenericWebService { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the fulfillment. Format: projects/&lt;Project ID&gt;/agent/fulfillment - projects/&lt;Project
        /// ID&gt;/locations/&lt;Location ID&gt;/agent/fulfillment
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a Fulfillment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Fulfillment(string name, FulfillmentArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/fulfillment:Fulfillment", name, args ?? new FulfillmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Fulfillment(string name, Input<string> id, FulfillmentState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/fulfillment:Fulfillment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Fulfillment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Fulfillment Get(string name, Input<string> id, FulfillmentState? state = null, CustomResourceOptions? options = null)
        {
            return new Fulfillment(name, id, state, options);
        }
    }

    public sealed class FulfillmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The human-readable name of the fulfillment, unique within the agent.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Whether fulfillment is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("features")]
        private InputList<Inputs.FulfillmentFeatureArgs>? _features;

        /// <summary>
        /// The field defines whether the fulfillment is enabled for certain features.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.FulfillmentFeatureArgs> Features
        {
            get => _features ?? (_features = new InputList<Inputs.FulfillmentFeatureArgs>());
            set => _features = value;
        }

        /// <summary>
        /// Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic authentication with username and password. - Authentication with additional authentication headers.
        /// Structure is documented below.
        /// </summary>
        [Input("genericWebService")]
        public Input<Inputs.FulfillmentGenericWebServiceArgs>? GenericWebService { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public FulfillmentArgs()
        {
        }
        public static new FulfillmentArgs Empty => new FulfillmentArgs();
    }

    public sealed class FulfillmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The human-readable name of the fulfillment, unique within the agent.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Whether fulfillment is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("features")]
        private InputList<Inputs.FulfillmentFeatureGetArgs>? _features;

        /// <summary>
        /// The field defines whether the fulfillment is enabled for certain features.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.FulfillmentFeatureGetArgs> Features
        {
            get => _features ?? (_features = new InputList<Inputs.FulfillmentFeatureGetArgs>());
            set => _features = value;
        }

        /// <summary>
        /// Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic authentication with username and password. - Authentication with additional authentication headers.
        /// Structure is documented below.
        /// </summary>
        [Input("genericWebService")]
        public Input<Inputs.FulfillmentGenericWebServiceGetArgs>? GenericWebService { get; set; }

        /// <summary>
        /// The unique identifier of the fulfillment. Format: projects/&lt;Project ID&gt;/agent/fulfillment - projects/&lt;Project
        /// ID&gt;/locations/&lt;Location ID&gt;/agent/fulfillment
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public FulfillmentState()
        {
        }
        public static new FulfillmentState Empty => new FulfillmentState();
    }
}
