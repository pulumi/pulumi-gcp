// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// A conversation profile configures a set of parameters that control the suggestions made to an agent. These parameters control the suggestions that are surfaced during runtime. Each profile configures either a Dialogflow virtual agent or a human agent for a conversation.
    /// 
    /// To get more information about ConversationProfile, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects/conversationProfiles)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dialogflow/docs/)
    /// 
    /// ## Example Usage
    /// 
    /// ### Dialogflow Conversation Profile Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicAgent = new Gcp.Diagflow.Agent("basic_agent", new()
    ///     {
    ///         DisplayName = "example_agent",
    ///         DefaultLanguageCode = "en-us",
    ///         TimeZone = "America/New_York",
    ///     });
    /// 
    ///     var basicProfile = new Gcp.Diagflow.ConversationProfile("basic_profile", new()
    ///     {
    ///         DisplayName = "dialogflow-profile",
    ///         Location = "global",
    ///         AutomatedAgentConfig = new Gcp.Diagflow.Inputs.ConversationProfileAutomatedAgentConfigArgs
    ///         {
    ///             Agent = basicAgent.Id.Apply(id =&gt; $"projects/{id}/locations/global/agent/environments/draft"),
    ///         },
    ///         HumanAgentAssistantConfig = new Gcp.Diagflow.Inputs.ConversationProfileHumanAgentAssistantConfigArgs
    ///         {
    ///             MessageAnalysisConfig = new Gcp.Diagflow.Inputs.ConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigArgs
    ///             {
    ///                 EnableEntityExtraction = true,
    ///                 EnableSentimentAnalysis = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ConversationProfile can be imported using any of these accepted formats:
    /// 
    /// * `{{name}}`
    /// 
    /// When using the `pulumi import` command, ConversationProfile can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:diagflow/conversationProfile:ConversationProfile default {{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/conversationProfile:ConversationProfile")]
    public partial class ConversationProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration for an automated agent to use with this profile
        /// Structure is documented below.
        /// </summary>
        [Output("automatedAgentConfig")]
        public Output<Outputs.ConversationProfileAutomatedAgentConfig?> AutomatedAgentConfig { get; private set; } = null!;

        /// <summary>
        /// Required. Human readable name for this profile. Max length 1024 bytes.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Configuration for connecting to a live agent
        /// Structure is documented below.
        /// </summary>
        [Output("humanAgentAssistantConfig")]
        public Output<Outputs.ConversationProfileHumanAgentAssistantConfig?> HumanAgentAssistantConfig { get; private set; } = null!;

        /// <summary>
        /// Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation.
        /// Structure is documented below.
        /// </summary>
        [Output("humanAgentHandoffConfig")]
        public Output<Outputs.ConversationProfileHumanAgentHandoffConfig?> HumanAgentHandoffConfig { get; private set; } = null!;

        /// <summary>
        /// Language code for the conversation profile. This should be a BCP-47 language tag.
        /// </summary>
        [Output("languageCode")]
        public Output<string> LanguageCode { get; private set; } = null!;

        /// <summary>
        /// desc
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Defines logging behavior for conversation lifecycle events.
        /// Structure is documented below.
        /// </summary>
        [Output("loggingConfig")]
        public Output<Outputs.ConversationProfileLoggingConfig?> LoggingConfig { get; private set; } = null!;

        /// <summary>
        /// name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Pub/Sub topic on which to publish new agent assistant events.
        /// Expects the format "projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/topics/&lt;Topic ID&gt;"
        /// Structure is documented below.
        /// </summary>
        [Output("newMessageEventNotificationConfig")]
        public Output<Outputs.ConversationProfileNewMessageEventNotificationConfig?> NewMessageEventNotificationConfig { get; private set; } = null!;

        /// <summary>
        /// Pub/Sub topic on which to publish new agent assistant events.
        /// Expects the format "projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/topics/&lt;Topic ID&gt;"
        /// Structure is documented below.
        /// </summary>
        [Output("notificationConfig")]
        public Output<Outputs.ConversationProfileNotificationConfig?> NotificationConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Name of the CX SecuritySettings reference for the agent.
        /// </summary>
        [Output("securitySettings")]
        public Output<string?> SecuritySettings { get; private set; } = null!;

        /// <summary>
        /// Settings for speech transcription.
        /// Structure is documented below.
        /// </summary>
        [Output("sttConfig")]
        public Output<Outputs.ConversationProfileSttConfig?> SttConfig { get; private set; } = null!;

        /// <summary>
        /// The time zone of this conversational profile.
        /// </summary>
        [Output("timeZone")]
        public Output<string?> TimeZone { get; private set; } = null!;

        /// <summary>
        /// Configuration for Text-to-Speech synthesization. If agent defines synthesization options as well, agent settings overrides the option here.
        /// Structure is documented below.
        /// </summary>
        [Output("ttsConfig")]
        public Output<Outputs.ConversationProfileTtsConfig?> TtsConfig { get; private set; } = null!;


        /// <summary>
        /// Create a ConversationProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConversationProfile(string name, ConversationProfileArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/conversationProfile:ConversationProfile", name, args ?? new ConversationProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConversationProfile(string name, Input<string> id, ConversationProfileState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/conversationProfile:ConversationProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConversationProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConversationProfile Get(string name, Input<string> id, ConversationProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new ConversationProfile(name, id, state, options);
        }
    }

    public sealed class ConversationProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for an automated agent to use with this profile
        /// Structure is documented below.
        /// </summary>
        [Input("automatedAgentConfig")]
        public Input<Inputs.ConversationProfileAutomatedAgentConfigArgs>? AutomatedAgentConfig { get; set; }

        /// <summary>
        /// Required. Human readable name for this profile. Max length 1024 bytes.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Configuration for connecting to a live agent
        /// Structure is documented below.
        /// </summary>
        [Input("humanAgentAssistantConfig")]
        public Input<Inputs.ConversationProfileHumanAgentAssistantConfigArgs>? HumanAgentAssistantConfig { get; set; }

        /// <summary>
        /// Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation.
        /// Structure is documented below.
        /// </summary>
        [Input("humanAgentHandoffConfig")]
        public Input<Inputs.ConversationProfileHumanAgentHandoffConfigArgs>? HumanAgentHandoffConfig { get; set; }

        /// <summary>
        /// Language code for the conversation profile. This should be a BCP-47 language tag.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// desc
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Defines logging behavior for conversation lifecycle events.
        /// Structure is documented below.
        /// </summary>
        [Input("loggingConfig")]
        public Input<Inputs.ConversationProfileLoggingConfigArgs>? LoggingConfig { get; set; }

        /// <summary>
        /// Pub/Sub topic on which to publish new agent assistant events.
        /// Expects the format "projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/topics/&lt;Topic ID&gt;"
        /// Structure is documented below.
        /// </summary>
        [Input("newMessageEventNotificationConfig")]
        public Input<Inputs.ConversationProfileNewMessageEventNotificationConfigArgs>? NewMessageEventNotificationConfig { get; set; }

        /// <summary>
        /// Pub/Sub topic on which to publish new agent assistant events.
        /// Expects the format "projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/topics/&lt;Topic ID&gt;"
        /// Structure is documented below.
        /// </summary>
        [Input("notificationConfig")]
        public Input<Inputs.ConversationProfileNotificationConfigArgs>? NotificationConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Name of the CX SecuritySettings reference for the agent.
        /// </summary>
        [Input("securitySettings")]
        public Input<string>? SecuritySettings { get; set; }

        /// <summary>
        /// Settings for speech transcription.
        /// Structure is documented below.
        /// </summary>
        [Input("sttConfig")]
        public Input<Inputs.ConversationProfileSttConfigArgs>? SttConfig { get; set; }

        /// <summary>
        /// The time zone of this conversational profile.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// Configuration for Text-to-Speech synthesization. If agent defines synthesization options as well, agent settings overrides the option here.
        /// Structure is documented below.
        /// </summary>
        [Input("ttsConfig")]
        public Input<Inputs.ConversationProfileTtsConfigArgs>? TtsConfig { get; set; }

        public ConversationProfileArgs()
        {
        }
        public static new ConversationProfileArgs Empty => new ConversationProfileArgs();
    }

    public sealed class ConversationProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for an automated agent to use with this profile
        /// Structure is documented below.
        /// </summary>
        [Input("automatedAgentConfig")]
        public Input<Inputs.ConversationProfileAutomatedAgentConfigGetArgs>? AutomatedAgentConfig { get; set; }

        /// <summary>
        /// Required. Human readable name for this profile. Max length 1024 bytes.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Configuration for connecting to a live agent
        /// Structure is documented below.
        /// </summary>
        [Input("humanAgentAssistantConfig")]
        public Input<Inputs.ConversationProfileHumanAgentAssistantConfigGetArgs>? HumanAgentAssistantConfig { get; set; }

        /// <summary>
        /// Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation.
        /// Structure is documented below.
        /// </summary>
        [Input("humanAgentHandoffConfig")]
        public Input<Inputs.ConversationProfileHumanAgentHandoffConfigGetArgs>? HumanAgentHandoffConfig { get; set; }

        /// <summary>
        /// Language code for the conversation profile. This should be a BCP-47 language tag.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// desc
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Defines logging behavior for conversation lifecycle events.
        /// Structure is documented below.
        /// </summary>
        [Input("loggingConfig")]
        public Input<Inputs.ConversationProfileLoggingConfigGetArgs>? LoggingConfig { get; set; }

        /// <summary>
        /// name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Pub/Sub topic on which to publish new agent assistant events.
        /// Expects the format "projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/topics/&lt;Topic ID&gt;"
        /// Structure is documented below.
        /// </summary>
        [Input("newMessageEventNotificationConfig")]
        public Input<Inputs.ConversationProfileNewMessageEventNotificationConfigGetArgs>? NewMessageEventNotificationConfig { get; set; }

        /// <summary>
        /// Pub/Sub topic on which to publish new agent assistant events.
        /// Expects the format "projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/topics/&lt;Topic ID&gt;"
        /// Structure is documented below.
        /// </summary>
        [Input("notificationConfig")]
        public Input<Inputs.ConversationProfileNotificationConfigGetArgs>? NotificationConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Name of the CX SecuritySettings reference for the agent.
        /// </summary>
        [Input("securitySettings")]
        public Input<string>? SecuritySettings { get; set; }

        /// <summary>
        /// Settings for speech transcription.
        /// Structure is documented below.
        /// </summary>
        [Input("sttConfig")]
        public Input<Inputs.ConversationProfileSttConfigGetArgs>? SttConfig { get; set; }

        /// <summary>
        /// The time zone of this conversational profile.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// Configuration for Text-to-Speech synthesization. If agent defines synthesization options as well, agent settings overrides the option here.
        /// Structure is documented below.
        /// </summary>
        [Input("ttsConfig")]
        public Input<Inputs.ConversationProfileTtsConfigGetArgs>? TtsConfig { get; set; }

        public ConversationProfileState()
        {
        }
        public static new ConversationProfileState Empty => new ConversationProfileState();
    }
}
