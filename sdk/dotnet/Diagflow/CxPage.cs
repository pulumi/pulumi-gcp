// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages.
    /// 
    /// To get more information about Page, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
    /// 
    /// ## Example Usage
    /// ### Dialogflowcx Page Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agent = new Gcp.Diagflow.CxAgent("agent", new()
    ///     {
    ///         DisplayName = "dialogflowcx-agent",
    ///         Location = "global",
    ///         DefaultLanguageCode = "en",
    ///         SupportedLanguageCodes = new[]
    ///         {
    ///             "fr",
    ///             "de",
    ///             "es",
    ///         },
    ///         TimeZone = "America/New_York",
    ///         Description = "Example description.",
    ///         AvatarUri = "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
    ///         EnableStackdriverLogging = true,
    ///         EnableSpellCorrection = true,
    ///         SpeechToTextSettings = new Gcp.Diagflow.Inputs.CxAgentSpeechToTextSettingsArgs
    ///         {
    ///             EnableSpeechAdaptation = true,
    ///         },
    ///     });
    /// 
    ///     var myPage2 = new Gcp.Diagflow.CxPage("myPage2", new()
    ///     {
    ///         Parent = agent.StartFlow,
    ///         DisplayName = "MyPage2",
    ///     });
    /// 
    ///     var basicPage = new Gcp.Diagflow.CxPage("basicPage", new()
    ///     {
    ///         Parent = agent.StartFlow,
    ///         DisplayName = "MyPage",
    ///         EntryFulfillment = new Gcp.Diagflow.Inputs.CxPageEntryFulfillmentArgs
    ///         {
    ///             Messages = new[]
    ///             {
    ///                 new Gcp.Diagflow.Inputs.CxPageEntryFulfillmentMessageArgs
    ///                 {
    ///                     Text = new Gcp.Diagflow.Inputs.CxPageEntryFulfillmentMessageTextArgs
    ///                     {
    ///                         Texts = new[]
    ///                         {
    ///                             "Welcome to page",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Form = new Gcp.Diagflow.Inputs.CxPageFormArgs
    ///         {
    ///             Parameters = new[]
    ///             {
    ///                 new Gcp.Diagflow.Inputs.CxPageFormParameterArgs
    ///                 {
    ///                     DisplayName = "param1",
    ///                     EntityType = "projects/-/locations/-/agents/-/entityTypes/sys.date",
    ///                     FillBehavior = new Gcp.Diagflow.Inputs.CxPageFormParameterFillBehaviorArgs
    ///                     {
    ///                         InitialPromptFulfillment = new Gcp.Diagflow.Inputs.CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs
    ///                         {
    ///                             Messages = new[]
    ///                             {
    ///                                 new Gcp.Diagflow.Inputs.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs
    ///                                 {
    ///                                     Text = new Gcp.Diagflow.Inputs.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs
    ///                                     {
    ///                                         Texts = new[]
    ///                                         {
    ///                                             "Please provide param1",
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     Required = true,
    ///                     Redact = true,
    ///                 },
    ///             },
    ///         },
    ///         TransitionRoutes = new[]
    ///         {
    ///             new Gcp.Diagflow.Inputs.CxPageTransitionRouteArgs
    ///             {
    ///                 Condition = "$page.params.status = 'FINAL'",
    ///                 TriggerFulfillment = new Gcp.Diagflow.Inputs.CxPageTransitionRouteTriggerFulfillmentArgs
    ///                 {
    ///                     Messages = new[]
    ///                     {
    ///                         new Gcp.Diagflow.Inputs.CxPageTransitionRouteTriggerFulfillmentMessageArgs
    ///                         {
    ///                             Text = new Gcp.Diagflow.Inputs.CxPageTransitionRouteTriggerFulfillmentMessageTextArgs
    ///                             {
    ///                                 Texts = new[]
    ///                                 {
    ///                                     "information completed, navigating to page 2",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 TargetPage = myPage2.Id,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Page can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxPage:CxPage default {{parent}}/pages/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxPage:CxPage default {{parent}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/cxPage:CxPage")]
    public partial class CxPage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The human-readable name of the page, unique within the agent.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The fulfillment to call when the session is entering the page.
        /// Structure is documented below.
        /// </summary>
        [Output("entryFulfillment")]
        public Output<Outputs.CxPageEntryFulfillment?> EntryFulfillment { get; private set; } = null!;

        /// <summary>
        /// Handlers associated with the page to handle events such as webhook errors, no match or no input.
        /// Structure is documented below.
        /// </summary>
        [Output("eventHandlers")]
        public Output<ImmutableArray<Outputs.CxPageEventHandler>> EventHandlers { get; private set; } = null!;

        /// <summary>
        /// The form associated with the page, used for collecting parameters relevant to the page.
        /// Structure is documented below.
        /// </summary>
        [Output("form")]
        public Output<Outputs.CxPageForm?> Form { get; private set; } = null!;

        /// <summary>
        /// The language of the following fields in page:
        /// Page.entry_fulfillment.messages
        /// Page.entry_fulfillment.conditional_cases
        /// Page.event_handlers.trigger_fulfillment.messages
        /// Page.event_handlers.trigger_fulfillment.conditional_cases
        /// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
        /// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
        /// Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
        /// Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
        /// Page.transition_routes.trigger_fulfillment.messages
        /// Page.transition_routes.trigger_fulfillment.conditional_cases
        /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        /// </summary>
        [Output("languageCode")]
        public Output<string?> LanguageCode { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of this transition route.
        /// The unique identifier of this event handler.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The flow to create a page for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
        /// </summary>
        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;

        /// <summary>
        /// Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
        /// If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route &gt; page's transition route group &gt; flow's transition routes.
        /// If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
        /// Format:projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/transitionRouteGroups/&lt;TransitionRouteGroup ID&gt;.
        /// </summary>
        [Output("transitionRouteGroups")]
        public Output<ImmutableArray<string>> TransitionRouteGroups { get; private set; } = null!;

        /// <summary>
        /// A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
        /// When we are in a certain page, the TransitionRoutes are evalauted in the following order:
        /// TransitionRoutes defined in the page with intent specified.
        /// TransitionRoutes defined in the transition route groups with intent specified.
        /// TransitionRoutes defined in flow with intent specified.
        /// TransitionRoutes defined in the transition route groups with intent specified.
        /// TransitionRoutes defined in the page with only condition specified.
        /// TransitionRoutes defined in the transition route groups with only condition specified.
        /// Structure is documented below.
        /// </summary>
        [Output("transitionRoutes")]
        public Output<ImmutableArray<Outputs.CxPageTransitionRoute>> TransitionRoutes { get; private set; } = null!;


        /// <summary>
        /// Create a CxPage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CxPage(string name, CxPageArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxPage:CxPage", name, args ?? new CxPageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CxPage(string name, Input<string> id, CxPageState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxPage:CxPage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CxPage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CxPage Get(string name, Input<string> id, CxPageState? state = null, CustomResourceOptions? options = null)
        {
            return new CxPage(name, id, state, options);
        }
    }

    public sealed class CxPageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The human-readable name of the page, unique within the agent.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The fulfillment to call when the session is entering the page.
        /// Structure is documented below.
        /// </summary>
        [Input("entryFulfillment")]
        public Input<Inputs.CxPageEntryFulfillmentArgs>? EntryFulfillment { get; set; }

        [Input("eventHandlers")]
        private InputList<Inputs.CxPageEventHandlerArgs>? _eventHandlers;

        /// <summary>
        /// Handlers associated with the page to handle events such as webhook errors, no match or no input.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxPageEventHandlerArgs> EventHandlers
        {
            get => _eventHandlers ?? (_eventHandlers = new InputList<Inputs.CxPageEventHandlerArgs>());
            set => _eventHandlers = value;
        }

        /// <summary>
        /// The form associated with the page, used for collecting parameters relevant to the page.
        /// Structure is documented below.
        /// </summary>
        [Input("form")]
        public Input<Inputs.CxPageFormArgs>? Form { get; set; }

        /// <summary>
        /// The language of the following fields in page:
        /// Page.entry_fulfillment.messages
        /// Page.entry_fulfillment.conditional_cases
        /// Page.event_handlers.trigger_fulfillment.messages
        /// Page.event_handlers.trigger_fulfillment.conditional_cases
        /// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
        /// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
        /// Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
        /// Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
        /// Page.transition_routes.trigger_fulfillment.messages
        /// Page.transition_routes.trigger_fulfillment.conditional_cases
        /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// The flow to create a page for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("transitionRouteGroups")]
        private InputList<string>? _transitionRouteGroups;

        /// <summary>
        /// Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
        /// If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route &gt; page's transition route group &gt; flow's transition routes.
        /// If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
        /// Format:projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/transitionRouteGroups/&lt;TransitionRouteGroup ID&gt;.
        /// </summary>
        public InputList<string> TransitionRouteGroups
        {
            get => _transitionRouteGroups ?? (_transitionRouteGroups = new InputList<string>());
            set => _transitionRouteGroups = value;
        }

        [Input("transitionRoutes")]
        private InputList<Inputs.CxPageTransitionRouteArgs>? _transitionRoutes;

        /// <summary>
        /// A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
        /// When we are in a certain page, the TransitionRoutes are evalauted in the following order:
        /// TransitionRoutes defined in the page with intent specified.
        /// TransitionRoutes defined in the transition route groups with intent specified.
        /// TransitionRoutes defined in flow with intent specified.
        /// TransitionRoutes defined in the transition route groups with intent specified.
        /// TransitionRoutes defined in the page with only condition specified.
        /// TransitionRoutes defined in the transition route groups with only condition specified.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxPageTransitionRouteArgs> TransitionRoutes
        {
            get => _transitionRoutes ?? (_transitionRoutes = new InputList<Inputs.CxPageTransitionRouteArgs>());
            set => _transitionRoutes = value;
        }

        public CxPageArgs()
        {
        }
        public static new CxPageArgs Empty => new CxPageArgs();
    }

    public sealed class CxPageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The human-readable name of the page, unique within the agent.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The fulfillment to call when the session is entering the page.
        /// Structure is documented below.
        /// </summary>
        [Input("entryFulfillment")]
        public Input<Inputs.CxPageEntryFulfillmentGetArgs>? EntryFulfillment { get; set; }

        [Input("eventHandlers")]
        private InputList<Inputs.CxPageEventHandlerGetArgs>? _eventHandlers;

        /// <summary>
        /// Handlers associated with the page to handle events such as webhook errors, no match or no input.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxPageEventHandlerGetArgs> EventHandlers
        {
            get => _eventHandlers ?? (_eventHandlers = new InputList<Inputs.CxPageEventHandlerGetArgs>());
            set => _eventHandlers = value;
        }

        /// <summary>
        /// The form associated with the page, used for collecting parameters relevant to the page.
        /// Structure is documented below.
        /// </summary>
        [Input("form")]
        public Input<Inputs.CxPageFormGetArgs>? Form { get; set; }

        /// <summary>
        /// The language of the following fields in page:
        /// Page.entry_fulfillment.messages
        /// Page.entry_fulfillment.conditional_cases
        /// Page.event_handlers.trigger_fulfillment.messages
        /// Page.event_handlers.trigger_fulfillment.conditional_cases
        /// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
        /// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
        /// Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
        /// Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
        /// Page.transition_routes.trigger_fulfillment.messages
        /// Page.transition_routes.trigger_fulfillment.conditional_cases
        /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// The unique identifier of this transition route.
        /// The unique identifier of this event handler.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The flow to create a page for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("transitionRouteGroups")]
        private InputList<string>? _transitionRouteGroups;

        /// <summary>
        /// Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
        /// If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route &gt; page's transition route group &gt; flow's transition routes.
        /// If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
        /// Format:projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/transitionRouteGroups/&lt;TransitionRouteGroup ID&gt;.
        /// </summary>
        public InputList<string> TransitionRouteGroups
        {
            get => _transitionRouteGroups ?? (_transitionRouteGroups = new InputList<string>());
            set => _transitionRouteGroups = value;
        }

        [Input("transitionRoutes")]
        private InputList<Inputs.CxPageTransitionRouteGetArgs>? _transitionRoutes;

        /// <summary>
        /// A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
        /// When we are in a certain page, the TransitionRoutes are evalauted in the following order:
        /// TransitionRoutes defined in the page with intent specified.
        /// TransitionRoutes defined in the transition route groups with intent specified.
        /// TransitionRoutes defined in flow with intent specified.
        /// TransitionRoutes defined in the transition route groups with intent specified.
        /// TransitionRoutes defined in the page with only condition specified.
        /// TransitionRoutes defined in the transition route groups with only condition specified.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxPageTransitionRouteGetArgs> TransitionRoutes
        {
            get => _transitionRoutes ?? (_transitionRoutes = new InputList<Inputs.CxPageTransitionRouteGetArgs>());
            set => _transitionRoutes = value;
        }

        public CxPageState()
        {
        }
        public static new CxPageState Empty => new CxPageState();
    }
}
