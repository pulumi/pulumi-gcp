// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// Flows represents the conversation flows when you build your chatbot agent.
    /// 
    /// To get more information about Flow, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
    /// 
    /// ## Example Usage
    /// ### Dialogflowcx Flow Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agent = new Gcp.Diagflow.CxAgent("agent", new()
    ///     {
    ///         DisplayName = "dialogflowcx-agent",
    ///         Location = "global",
    ///         DefaultLanguageCode = "en",
    ///         SupportedLanguageCodes = new[]
    ///         {
    ///             "fr",
    ///             "de",
    ///             "es",
    ///         },
    ///         TimeZone = "America/New_York",
    ///         Description = "Example description.",
    ///         AvatarUri = "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
    ///         EnableStackdriverLogging = true,
    ///         EnableSpellCorrection = true,
    ///         SpeechToTextSettings = new Gcp.Diagflow.Inputs.CxAgentSpeechToTextSettingsArgs
    ///         {
    ///             EnableSpeechAdaptation = true,
    ///         },
    ///     });
    /// 
    ///     var basicFlow = new Gcp.Diagflow.CxFlow("basicFlow", new()
    ///     {
    ///         Parent = agent.Id,
    ///         DisplayName = "MyFlow",
    ///         Description = "Test Flow",
    ///         NluSettings = new Gcp.Diagflow.Inputs.CxFlowNluSettingsArgs
    ///         {
    ///             ClassificationThreshold = 0.3,
    ///             ModelType = "MODEL_TYPE_STANDARD",
    ///         },
    ///         EventHandlers = new[]
    ///         {
    ///             new Gcp.Diagflow.Inputs.CxFlowEventHandlerArgs
    ///             {
    ///                 Event = "custom-event",
    ///                 TriggerFulfillment = new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentArgs
    ///                 {
    ///                     ReturnPartialResponses = false,
    ///                     Messages = new[]
    ///                     {
    ///                         new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentMessageArgs
    ///                         {
    ///                             Text = new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs
    ///                             {
    ///                                 Texts = new[]
    ///                                 {
    ///                                     "I didn't get that. Can you say it again?",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Gcp.Diagflow.Inputs.CxFlowEventHandlerArgs
    ///             {
    ///                 Event = "sys.no-match-default",
    ///                 TriggerFulfillment = new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentArgs
    ///                 {
    ///                     ReturnPartialResponses = false,
    ///                     Messages = new[]
    ///                     {
    ///                         new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentMessageArgs
    ///                         {
    ///                             Text = new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs
    ///                             {
    ///                                 Texts = new[]
    ///                                 {
    ///                                     "Sorry, could you say that again?",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Gcp.Diagflow.Inputs.CxFlowEventHandlerArgs
    ///             {
    ///                 Event = "sys.no-input-default",
    ///                 TriggerFulfillment = new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentArgs
    ///                 {
    ///                     ReturnPartialResponses = false,
    ///                     Messages = new[]
    ///                     {
    ///                         new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentMessageArgs
    ///                         {
    ///                             Text = new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs
    ///                             {
    ///                                 Texts = new[]
    ///                                 {
    ///                                     "One more time?",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Flow can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxFlow:CxFlow default {{parent}}/flows/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxFlow:CxFlow default {{parent}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/cxFlow:CxFlow")]
    public partial class CxFlow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the flow.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// A flow's event handlers serve two purposes:
        /// They are responsible for handling events (e.g. no match, webhook errors) in the flow.
        /// They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
        /// Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
        /// Structure is documented below.
        /// </summary>
        [Output("eventHandlers")]
        public Output<ImmutableArray<Outputs.CxFlowEventHandler>> EventHandlers { get; private set; } = null!;

        /// <summary>
        /// The language of the following fields in flow:
        /// Flow.event_handlers.trigger_fulfillment.messages
        /// Flow.event_handlers.trigger_fulfillment.conditional_cases
        /// Flow.transition_routes.trigger_fulfillment.messages
        /// Flow.transition_routes.trigger_fulfillment.conditional_cases
        /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        /// </summary>
        [Output("languageCode")]
        public Output<string?> LanguageCode { get; private set; } = null!;

        /// <summary>
        /// -
        /// The unique identifier of this event handler.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// NLU related settings of the flow.
        /// Structure is documented below.
        /// </summary>
        [Output("nluSettings")]
        public Output<Outputs.CxFlowNluSettings?> NluSettings { get; private set; } = null!;

        /// <summary>
        /// The agent to create a flow for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;

        /// <summary>
        /// A flow's transition route group serve two purposes:
        /// They are responsible for matching the user's first utterances in the flow.
        /// They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
        /// Format:projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/transitionRouteGroups/&lt;TransitionRouteGroup ID&gt;.
        /// </summary>
        [Output("transitionRouteGroups")]
        public Output<ImmutableArray<string>> TransitionRouteGroups { get; private set; } = null!;

        /// <summary>
        /// A flow's transition routes serve two purposes:
        /// They are responsible for matching the user's first utterances in the flow.
        /// They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
        /// </summary>
        [Output("transitionRoutes")]
        public Output<ImmutableArray<Outputs.CxFlowTransitionRoute>> TransitionRoutes { get; private set; } = null!;


        /// <summary>
        /// Create a CxFlow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CxFlow(string name, CxFlowArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxFlow:CxFlow", name, args ?? new CxFlowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CxFlow(string name, Input<string> id, CxFlowState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxFlow:CxFlow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CxFlow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CxFlow Get(string name, Input<string> id, CxFlowState? state = null, CustomResourceOptions? options = null)
        {
            return new CxFlow(name, id, state, options);
        }
    }

    public sealed class CxFlowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The human-readable name of the flow.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("eventHandlers")]
        private InputList<Inputs.CxFlowEventHandlerArgs>? _eventHandlers;

        /// <summary>
        /// A flow's event handlers serve two purposes:
        /// They are responsible for handling events (e.g. no match, webhook errors) in the flow.
        /// They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
        /// Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxFlowEventHandlerArgs> EventHandlers
        {
            get => _eventHandlers ?? (_eventHandlers = new InputList<Inputs.CxFlowEventHandlerArgs>());
            set => _eventHandlers = value;
        }

        /// <summary>
        /// The language of the following fields in flow:
        /// Flow.event_handlers.trigger_fulfillment.messages
        /// Flow.event_handlers.trigger_fulfillment.conditional_cases
        /// Flow.transition_routes.trigger_fulfillment.messages
        /// Flow.transition_routes.trigger_fulfillment.conditional_cases
        /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// NLU related settings of the flow.
        /// Structure is documented below.
        /// </summary>
        [Input("nluSettings")]
        public Input<Inputs.CxFlowNluSettingsArgs>? NluSettings { get; set; }

        /// <summary>
        /// The agent to create a flow for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("transitionRouteGroups")]
        private InputList<string>? _transitionRouteGroups;

        /// <summary>
        /// A flow's transition route group serve two purposes:
        /// They are responsible for matching the user's first utterances in the flow.
        /// They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
        /// Format:projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/transitionRouteGroups/&lt;TransitionRouteGroup ID&gt;.
        /// </summary>
        public InputList<string> TransitionRouteGroups
        {
            get => _transitionRouteGroups ?? (_transitionRouteGroups = new InputList<string>());
            set => _transitionRouteGroups = value;
        }

        [Input("transitionRoutes")]
        private InputList<Inputs.CxFlowTransitionRouteArgs>? _transitionRoutes;

        /// <summary>
        /// A flow's transition routes serve two purposes:
        /// They are responsible for matching the user's first utterances in the flow.
        /// They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
        /// </summary>
        public InputList<Inputs.CxFlowTransitionRouteArgs> TransitionRoutes
        {
            get => _transitionRoutes ?? (_transitionRoutes = new InputList<Inputs.CxFlowTransitionRouteArgs>());
            set => _transitionRoutes = value;
        }

        public CxFlowArgs()
        {
        }
        public static new CxFlowArgs Empty => new CxFlowArgs();
    }

    public sealed class CxFlowState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The human-readable name of the flow.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("eventHandlers")]
        private InputList<Inputs.CxFlowEventHandlerGetArgs>? _eventHandlers;

        /// <summary>
        /// A flow's event handlers serve two purposes:
        /// They are responsible for handling events (e.g. no match, webhook errors) in the flow.
        /// They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
        /// Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxFlowEventHandlerGetArgs> EventHandlers
        {
            get => _eventHandlers ?? (_eventHandlers = new InputList<Inputs.CxFlowEventHandlerGetArgs>());
            set => _eventHandlers = value;
        }

        /// <summary>
        /// The language of the following fields in flow:
        /// Flow.event_handlers.trigger_fulfillment.messages
        /// Flow.event_handlers.trigger_fulfillment.conditional_cases
        /// Flow.transition_routes.trigger_fulfillment.messages
        /// Flow.transition_routes.trigger_fulfillment.conditional_cases
        /// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// -
        /// The unique identifier of this event handler.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// NLU related settings of the flow.
        /// Structure is documented below.
        /// </summary>
        [Input("nluSettings")]
        public Input<Inputs.CxFlowNluSettingsGetArgs>? NluSettings { get; set; }

        /// <summary>
        /// The agent to create a flow for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("transitionRouteGroups")]
        private InputList<string>? _transitionRouteGroups;

        /// <summary>
        /// A flow's transition route group serve two purposes:
        /// They are responsible for matching the user's first utterances in the flow.
        /// They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
        /// Format:projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/transitionRouteGroups/&lt;TransitionRouteGroup ID&gt;.
        /// </summary>
        public InputList<string> TransitionRouteGroups
        {
            get => _transitionRouteGroups ?? (_transitionRouteGroups = new InputList<string>());
            set => _transitionRouteGroups = value;
        }

        [Input("transitionRoutes")]
        private InputList<Inputs.CxFlowTransitionRouteGetArgs>? _transitionRoutes;

        /// <summary>
        /// A flow's transition routes serve two purposes:
        /// They are responsible for matching the user's first utterances in the flow.
        /// They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
        /// </summary>
        public InputList<Inputs.CxFlowTransitionRouteGetArgs> TransitionRoutes
        {
            get => _transitionRoutes ?? (_transitionRoutes = new InputList<Inputs.CxFlowTransitionRouteGetArgs>());
            set => _transitionRoutes = value;
        }

        public CxFlowState()
        {
        }
        public static new CxFlowState Empty => new CxFlowState();
    }
}
