// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow.Outputs
{

    [OutputType]
    public sealed class ConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfig
    {
        /// <summary>
        /// Configs of custom conversation model.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.ConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigConversationModelConfig? ConversationModelConfig;
        /// <summary>
        /// Config to process conversation.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.ConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigConversationProcessConfig? ConversationProcessConfig;
        /// <summary>
        /// Disable the logging of search queries sent by human agents. It can prevent those queries from being stored at answer records.
        /// This feature is only supported for types: KNOWLEDGE_SEARCH.
        /// </summary>
        public readonly bool? DisableAgentQueryLogging;
        /// <summary>
        /// Enable including conversation context during query answer generation.
        /// This feature is only supported for types: KNOWLEDGE_SEARCH.
        /// </summary>
        public readonly bool? EnableConversationAugmentedQuery;
        /// <summary>
        /// Automatically iterates all participants and tries to compile suggestions.
        /// This feature is only supported for types: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST, KNOWLEDGE_ASSIST.
        /// </summary>
        public readonly bool? EnableEventBasedSuggestion;
        /// <summary>
        /// Enable query suggestion only.
        /// This feature is only supported for types: KNOWLEDGE_ASSIST
        /// </summary>
        public readonly bool? EnableQuerySuggestionOnly;
        /// <summary>
        /// Enable query suggestion even if we can't find its answer. By default, queries are suggested only if we find its answer.
        /// This feature is only supported for types: KNOWLEDGE_ASSIST.
        /// </summary>
        public readonly bool? EnableQuerySuggestionWhenNoAnswer;
        /// <summary>
        /// Configs of query.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.ConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigQueryConfig? QueryConfig;
        /// <summary>
        /// The suggestion feature.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.ConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigSuggestionFeature? SuggestionFeature;
        /// <summary>
        /// Settings of suggestion trigger.
        /// This feature is only supported for types: ARTICLE_SUGGESTION, FAQ.
        /// Structure is documented below.
        /// </summary>
        public readonly Outputs.ConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigSuggestionTriggerSettings? SuggestionTriggerSettings;

        [OutputConstructor]
        private ConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfig(
            Outputs.ConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigConversationModelConfig? conversationModelConfig,

            Outputs.ConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigConversationProcessConfig? conversationProcessConfig,

            bool? disableAgentQueryLogging,

            bool? enableConversationAugmentedQuery,

            bool? enableEventBasedSuggestion,

            bool? enableQuerySuggestionOnly,

            bool? enableQuerySuggestionWhenNoAnswer,

            Outputs.ConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigQueryConfig? queryConfig,

            Outputs.ConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigSuggestionFeature? suggestionFeature,

            Outputs.ConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigSuggestionTriggerSettings? suggestionTriggerSettings)
        {
            ConversationModelConfig = conversationModelConfig;
            ConversationProcessConfig = conversationProcessConfig;
            DisableAgentQueryLogging = disableAgentQueryLogging;
            EnableConversationAugmentedQuery = enableConversationAugmentedQuery;
            EnableEventBasedSuggestion = enableEventBasedSuggestion;
            EnableQuerySuggestionOnly = enableQuerySuggestionOnly;
            EnableQuerySuggestionWhenNoAnswer = enableQuerySuggestionWhenNoAnswer;
            QueryConfig = queryConfig;
            SuggestionFeature = suggestionFeature;
            SuggestionTriggerSettings = suggestionTriggerSettings;
        }
    }
}
