// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow.Inputs
{

    public sealed class ConversationProfileSttConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Audio encoding of the audio content to process.
        /// Possible values are: `AUDIO_ENCODING_UNSPECIFIED`, `AUDIO_ENCODING_LINEAR_16`, `AUDIO_ENCODING_FLAC`, `AUDIO_ENCODING_MULAW`, `AUDIO_ENCODING_AMR`, `AUDIO_ENCODING_AMR_WB`, `AUDIO_ENCODING_OGG_OPUS`, `AUDIOENCODING_SPEEX_WITH_HEADER_BYTE`.
        /// </summary>
        [Input("audioEncoding")]
        public Input<string>? AudioEncoding { get; set; }

        /// <summary>
        /// If true, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words.
        /// </summary>
        [Input("enableWordInfo")]
        public Input<bool>? EnableWordInfo { get; set; }

        /// <summary>
        /// The language of the supplied audio.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// Which Speech model to select.
        /// Leave this field unspecified to use Agent Speech settings for model selection.
        /// </summary>
        [Input("model")]
        public Input<string>? Model { get; set; }

        /// <summary>
        /// Sample rate (in Hertz) of the audio content sent in the query.
        /// </summary>
        [Input("sampleRateHertz")]
        public Input<int>? SampleRateHertz { get; set; }

        /// <summary>
        /// The speech model used in speech to text.
        /// Possible values are: `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE`, `USE_STANDARD`, `USE_ENHANCED`.
        /// </summary>
        [Input("speechModelVariant")]
        public Input<string>? SpeechModelVariant { get; set; }

        /// <summary>
        /// Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value.
        /// </summary>
        [Input("useTimeoutBasedEndpointing")]
        public Input<bool>? UseTimeoutBasedEndpointing { get; set; }

        public ConversationProfileSttConfigArgs()
        {
        }
        public static new ConversationProfileSttConfigArgs Empty => new ConversationProfileSttConfigArgs();
    }
}
