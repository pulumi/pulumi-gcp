// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow.Inputs
{

    public sealed class CxFlowTransitionRouteTriggerFulfillmentGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("conditionalCases")]
        private InputList<Inputs.CxFlowTransitionRouteTriggerFulfillmentConditionalCaseGetArgs>? _conditionalCases;

        /// <summary>
        /// Conditional cases for this fulfillment.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxFlowTransitionRouteTriggerFulfillmentConditionalCaseGetArgs> ConditionalCases
        {
            get => _conditionalCases ?? (_conditionalCases = new InputList<Inputs.CxFlowTransitionRouteTriggerFulfillmentConditionalCaseGetArgs>());
            set => _conditionalCases = value;
        }

        [Input("messages")]
        private InputList<Inputs.CxFlowTransitionRouteTriggerFulfillmentMessageGetArgs>? _messages;

        /// <summary>
        /// The list of rich message responses to present to the user.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxFlowTransitionRouteTriggerFulfillmentMessageGetArgs> Messages
        {
            get => _messages ?? (_messages = new InputList<Inputs.CxFlowTransitionRouteTriggerFulfillmentMessageGetArgs>());
            set => _messages = value;
        }

        /// <summary>
        /// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
        /// </summary>
        [Input("returnPartialResponses")]
        public Input<bool>? ReturnPartialResponses { get; set; }

        [Input("setParameterActions")]
        private InputList<Inputs.CxFlowTransitionRouteTriggerFulfillmentSetParameterActionGetArgs>? _setParameterActions;

        /// <summary>
        /// Set parameter values before executing the webhook.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxFlowTransitionRouteTriggerFulfillmentSetParameterActionGetArgs> SetParameterActions
        {
            get => _setParameterActions ?? (_setParameterActions = new InputList<Inputs.CxFlowTransitionRouteTriggerFulfillmentSetParameterActionGetArgs>());
            set => _setParameterActions = value;
        }

        /// <summary>
        /// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        /// <summary>
        /// The webhook to call. Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/webhooks/&lt;Webhook ID&gt;.
        /// </summary>
        [Input("webhook")]
        public Input<string>? Webhook { get; set; }

        public CxFlowTransitionRouteTriggerFulfillmentGetArgs()
        {
        }
        public static new CxFlowTransitionRouteTriggerFulfillmentGetArgs Empty => new CxFlowTransitionRouteTriggerFulfillmentGetArgs();
    }
}
