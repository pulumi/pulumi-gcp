// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow.Inputs
{

    public sealed class CxGeneratorModelParameterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum number of tokens to generate.
        /// </summary>
        [Input("maxDecodeSteps")]
        public Input<int>? MaxDecodeSteps { get; set; }

        /// <summary>
        /// The temperature used for sampling. Temperature sampling occurs after both topP and topK have been applied.
        /// Valid range: [0.0, 1.0] Low temperature = less random. High temperature = more random.
        /// </summary>
        [Input("temperature")]
        public Input<double>? Temperature { get; set; }

        /// <summary>
        /// If set, the sampling process in each step is limited to the topK tokens with highest probabilities.
        /// Valid range: [1, 40] or 1000+. Small topK = less random. Large topK = more random.
        /// </summary>
        [Input("topK")]
        public Input<int>? TopK { get; set; }

        /// <summary>
        /// If set, only the tokens comprising the top topP probability mass are considered.
        /// If both topP and topK are set, topP will be used for further refining candidates selected with topK.
        /// Valid range: (0.0, 1.0]. Small topP = less random. Large topP = more random.
        /// </summary>
        [Input("topP")]
        public Input<double>? TopP { get; set; }

        public CxGeneratorModelParameterArgs()
        {
        }
        public static new CxGeneratorModelParameterArgs Empty => new CxGeneratorModelParameterArgs();
    }
}
