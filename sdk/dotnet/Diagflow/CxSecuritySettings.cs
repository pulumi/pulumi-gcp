// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// Represents the settings related to security issues, such as data redaction and data retention. It may take hours for updates on the settings to propagate to all the related components and take effect.
    /// Multiple security settings can be configured in each location. Each agent can specify the security settings to apply, and each setting can be applied to multiple agents in the same project and location.
    /// 
    /// To get more information about SecuritySettings, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.securitySettings)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
    /// 
    /// ## Example Usage
    /// ### Dialogflowcx Security Settings Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicSecuritySettings = new Gcp.Diagflow.CxSecuritySettings("basicSecuritySettings", new()
    ///     {
    ///         DisplayName = "dialogflowcx-security-settings",
    ///         Location = "global",
    ///         PurgeDataTypes = new[] {},
    ///         RetentionWindowDays = 7,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Dialogflowcx Security Settings Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var inspect = new Gcp.DataLoss.PreventionInspectTemplate("inspect", new()
    ///     {
    ///         Parent = "projects/my-project-name/locations/global",
    ///         DisplayName = "dialogflowcx-inspect-template",
    ///         InspectConfig = new Gcp.DataLoss.Inputs.PreventionInspectTemplateInspectConfigArgs
    ///         {
    ///             InfoTypes = new[]
    ///             {
    ///                 new Gcp.DataLoss.Inputs.PreventionInspectTemplateInspectConfigInfoTypeArgs
    ///                 {
    ///                     Name = "EMAIL_ADDRESS",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var deidentify = new Gcp.DataLoss.PreventionDeidentifyTemplate("deidentify", new()
    ///     {
    ///         Parent = "projects/my-project-name/locations/global",
    ///         DisplayName = "dialogflowcx-deidentify-template",
    ///         DeidentifyConfig = new Gcp.DataLoss.Inputs.PreventionDeidentifyTemplateDeidentifyConfigArgs
    ///         {
    ///             InfoTypeTransformations = new Gcp.DataLoss.Inputs.PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsArgs
    ///             {
    ///                 Transformations = new[]
    ///                 {
    ///                     new Gcp.DataLoss.Inputs.PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationArgs
    ///                     {
    ///                         PrimitiveTransformation = new Gcp.DataLoss.Inputs.PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationArgs
    ///                         {
    ///                             ReplaceConfig = new Gcp.DataLoss.Inputs.PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationReplaceConfigArgs
    ///                             {
    ///                                 NewValue = new Gcp.DataLoss.Inputs.PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationReplaceConfigNewValueArgs
    ///                                 {
    ///                                     StringValue = "[REDACTED]",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var bucket = new Gcp.Storage.Bucket("bucket", new()
    ///     {
    ///         Location = "US",
    ///         UniformBucketLevelAccess = true,
    ///     });
    /// 
    ///     var basicSecuritySettings = new Gcp.Diagflow.CxSecuritySettings("basicSecuritySettings", new()
    ///     {
    ///         DisplayName = "dialogflowcx-security-settings",
    ///         Location = "global",
    ///         RedactionStrategy = "REDACT_WITH_SERVICE",
    ///         RedactionScope = "REDACT_DISK_STORAGE",
    ///         InspectTemplate = inspect.Id,
    ///         DeidentifyTemplate = deidentify.Id,
    ///         PurgeDataTypes = new[]
    ///         {
    ///             "DIALOGFLOW_HISTORY",
    ///         },
    ///         AudioExportSettings = new Gcp.Diagflow.Inputs.CxSecuritySettingsAudioExportSettingsArgs
    ///         {
    ///             GcsBucket = bucket.Id,
    ///             AudioExportPattern = "export",
    ///             EnableAudioRedaction = true,
    ///             AudioFormat = "OGG",
    ///         },
    ///         InsightsExportSettings = new Gcp.Diagflow.Inputs.CxSecuritySettingsInsightsExportSettingsArgs
    ///         {
    ///             EnableInsightsExport = true,
    ///         },
    ///         RetentionStrategy = "REMOVE_AFTER_CONVERSATION",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SecuritySettings can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxSecuritySettings:CxSecuritySettings default projects/{{project}}/locations/{{location}}/securitySettings/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxSecuritySettings:CxSecuritySettings default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxSecuritySettings:CxSecuritySettings default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/cxSecuritySettings:CxSecuritySettings")]
    public partial class CxSecuritySettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Controls audio export settings for post-conversation analytics when ingesting audio to conversations.
        /// If retention_strategy is set to REMOVE_AFTER_CONVERSATION or gcs_bucket is empty, audio export is disabled.
        /// If audio export is enabled, audio is recorded and saved to gcs_bucket, subject to retention policy of gcs_bucket.
        /// This setting won't effect audio input for implicit sessions via [Sessions.DetectIntent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.sessions/detectIntent#google.cloud.dialogflow.cx.v3.Sessions.DetectIntent).
        /// Structure is documented below.
        /// </summary>
        [Output("audioExportSettings")]
        public Output<Outputs.CxSecuritySettingsAudioExportSettings?> AudioExportSettings { get; private set; } = null!;

        /// <summary>
        /// [DLP](https://cloud.google.com/dlp/docs) deidentify template name. Use this template to define de-identification configuration for the content. If empty, Dialogflow replaces sensitive info with [redacted] text.
        /// Note: deidentifyTemplate must be located in the same region as the SecuritySettings.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt;
        /// </summary>
        [Output("deidentifyTemplate")]
        public Output<string?> DeidentifyTemplate { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the security settings, unique within the location.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Controls conversation exporting settings to Insights after conversation is completed.
        /// If retentionStrategy is set to REMOVE_AFTER_CONVERSATION, Insights export is disabled no matter what you configure here.
        /// Structure is documented below.
        /// </summary>
        [Output("insightsExportSettings")]
        public Output<Outputs.CxSecuritySettingsInsightsExportSettings?> InsightsExportSettings { get; private set; } = null!;

        /// <summary>
        /// [DLP](https://cloud.google.com/dlp/docs) inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config.
        /// Note: inspectTemplate must be located in the same region as the SecuritySettings.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt;
        /// </summary>
        [Output("inspectTemplate")]
        public Output<string?> InspectTemplate { get; private set; } = null!;

        /// <summary>
        /// The location these settings are located in. Settings can only be applied to an agent in the same location.
        /// See [Available Regions](https://cloud.google.com/dialogflow/cx/docs/concept/region#avail) for a list of supported locations.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the settings.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/securitySettings/&lt;Security Settings ID&gt;.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// List of types of data to remove when retention settings triggers purge.
        /// Each value may be one of: `DIALOGFLOW_HISTORY`.
        /// </summary>
        [Output("purgeDataTypes")]
        public Output<ImmutableArray<string>> PurgeDataTypes { get; private set; } = null!;

        /// <summary>
        /// Defines what types of data to redact. If not set, defaults to not redacting any kind of data.
        /// * REDACT_DISK_STORAGE: On data to be written to disk or similar devices that are capable of holding data even if power is disconnected. This includes data that are temporarily saved on disk.
        /// Possible values are: `REDACT_DISK_STORAGE`.
        /// </summary>
        [Output("redactionScope")]
        public Output<string?> RedactionScope { get; private set; } = null!;

        /// <summary>
        /// Defines how we redact data. If not set, defaults to not redacting.
        /// * REDACT_WITH_SERVICE: Call redaction service to clean up the data to be persisted.
        /// Possible values are: `REDACT_WITH_SERVICE`.
        /// </summary>
        [Output("redactionStrategy")]
        public Output<string?> RedactionStrategy { get; private set; } = null!;

        /// <summary>
        /// Defines how long we retain persisted data that contains sensitive info. Only one of `retention_window_days` and `retention_strategy` may be set.
        /// * REMOVE_AFTER_CONVERSATION: Removes data when the conversation ends. If there is no conversation explicitly established, a default conversation ends when the corresponding Dialogflow session ends.
        /// Possible values are: `REMOVE_AFTER_CONVERSATION`.
        /// </summary>
        [Output("retentionStrategy")]
        public Output<string?> RetentionStrategy { get; private set; } = null!;

        /// <summary>
        /// Retains the data for the specified number of days. User must set a value lower than Dialogflow's default 365d TTL (30 days for Agent Assist traffic), higher value will be ignored and use default. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use default TTL.
        /// Only one of `retention_window_days` and `retention_strategy` may be set.
        /// </summary>
        [Output("retentionWindowDays")]
        public Output<int?> RetentionWindowDays { get; private set; } = null!;


        /// <summary>
        /// Create a CxSecuritySettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CxSecuritySettings(string name, CxSecuritySettingsArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxSecuritySettings:CxSecuritySettings", name, args ?? new CxSecuritySettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CxSecuritySettings(string name, Input<string> id, CxSecuritySettingsState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxSecuritySettings:CxSecuritySettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CxSecuritySettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CxSecuritySettings Get(string name, Input<string> id, CxSecuritySettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new CxSecuritySettings(name, id, state, options);
        }
    }

    public sealed class CxSecuritySettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Controls audio export settings for post-conversation analytics when ingesting audio to conversations.
        /// If retention_strategy is set to REMOVE_AFTER_CONVERSATION or gcs_bucket is empty, audio export is disabled.
        /// If audio export is enabled, audio is recorded and saved to gcs_bucket, subject to retention policy of gcs_bucket.
        /// This setting won't effect audio input for implicit sessions via [Sessions.DetectIntent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.sessions/detectIntent#google.cloud.dialogflow.cx.v3.Sessions.DetectIntent).
        /// Structure is documented below.
        /// </summary>
        [Input("audioExportSettings")]
        public Input<Inputs.CxSecuritySettingsAudioExportSettingsArgs>? AudioExportSettings { get; set; }

        /// <summary>
        /// [DLP](https://cloud.google.com/dlp/docs) deidentify template name. Use this template to define de-identification configuration for the content. If empty, Dialogflow replaces sensitive info with [redacted] text.
        /// Note: deidentifyTemplate must be located in the same region as the SecuritySettings.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt;
        /// </summary>
        [Input("deidentifyTemplate")]
        public Input<string>? DeidentifyTemplate { get; set; }

        /// <summary>
        /// The human-readable name of the security settings, unique within the location.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Controls conversation exporting settings to Insights after conversation is completed.
        /// If retentionStrategy is set to REMOVE_AFTER_CONVERSATION, Insights export is disabled no matter what you configure here.
        /// Structure is documented below.
        /// </summary>
        [Input("insightsExportSettings")]
        public Input<Inputs.CxSecuritySettingsInsightsExportSettingsArgs>? InsightsExportSettings { get; set; }

        /// <summary>
        /// [DLP](https://cloud.google.com/dlp/docs) inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config.
        /// Note: inspectTemplate must be located in the same region as the SecuritySettings.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt;
        /// </summary>
        [Input("inspectTemplate")]
        public Input<string>? InspectTemplate { get; set; }

        /// <summary>
        /// The location these settings are located in. Settings can only be applied to an agent in the same location.
        /// See [Available Regions](https://cloud.google.com/dialogflow/cx/docs/concept/region#avail) for a list of supported locations.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("purgeDataTypes")]
        private InputList<string>? _purgeDataTypes;

        /// <summary>
        /// List of types of data to remove when retention settings triggers purge.
        /// Each value may be one of: `DIALOGFLOW_HISTORY`.
        /// </summary>
        public InputList<string> PurgeDataTypes
        {
            get => _purgeDataTypes ?? (_purgeDataTypes = new InputList<string>());
            set => _purgeDataTypes = value;
        }

        /// <summary>
        /// Defines what types of data to redact. If not set, defaults to not redacting any kind of data.
        /// * REDACT_DISK_STORAGE: On data to be written to disk or similar devices that are capable of holding data even if power is disconnected. This includes data that are temporarily saved on disk.
        /// Possible values are: `REDACT_DISK_STORAGE`.
        /// </summary>
        [Input("redactionScope")]
        public Input<string>? RedactionScope { get; set; }

        /// <summary>
        /// Defines how we redact data. If not set, defaults to not redacting.
        /// * REDACT_WITH_SERVICE: Call redaction service to clean up the data to be persisted.
        /// Possible values are: `REDACT_WITH_SERVICE`.
        /// </summary>
        [Input("redactionStrategy")]
        public Input<string>? RedactionStrategy { get; set; }

        /// <summary>
        /// Defines how long we retain persisted data that contains sensitive info. Only one of `retention_window_days` and `retention_strategy` may be set.
        /// * REMOVE_AFTER_CONVERSATION: Removes data when the conversation ends. If there is no conversation explicitly established, a default conversation ends when the corresponding Dialogflow session ends.
        /// Possible values are: `REMOVE_AFTER_CONVERSATION`.
        /// </summary>
        [Input("retentionStrategy")]
        public Input<string>? RetentionStrategy { get; set; }

        /// <summary>
        /// Retains the data for the specified number of days. User must set a value lower than Dialogflow's default 365d TTL (30 days for Agent Assist traffic), higher value will be ignored and use default. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use default TTL.
        /// Only one of `retention_window_days` and `retention_strategy` may be set.
        /// </summary>
        [Input("retentionWindowDays")]
        public Input<int>? RetentionWindowDays { get; set; }

        public CxSecuritySettingsArgs()
        {
        }
        public static new CxSecuritySettingsArgs Empty => new CxSecuritySettingsArgs();
    }

    public sealed class CxSecuritySettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Controls audio export settings for post-conversation analytics when ingesting audio to conversations.
        /// If retention_strategy is set to REMOVE_AFTER_CONVERSATION or gcs_bucket is empty, audio export is disabled.
        /// If audio export is enabled, audio is recorded and saved to gcs_bucket, subject to retention policy of gcs_bucket.
        /// This setting won't effect audio input for implicit sessions via [Sessions.DetectIntent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.sessions/detectIntent#google.cloud.dialogflow.cx.v3.Sessions.DetectIntent).
        /// Structure is documented below.
        /// </summary>
        [Input("audioExportSettings")]
        public Input<Inputs.CxSecuritySettingsAudioExportSettingsGetArgs>? AudioExportSettings { get; set; }

        /// <summary>
        /// [DLP](https://cloud.google.com/dlp/docs) deidentify template name. Use this template to define de-identification configuration for the content. If empty, Dialogflow replaces sensitive info with [redacted] text.
        /// Note: deidentifyTemplate must be located in the same region as the SecuritySettings.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt;
        /// </summary>
        [Input("deidentifyTemplate")]
        public Input<string>? DeidentifyTemplate { get; set; }

        /// <summary>
        /// The human-readable name of the security settings, unique within the location.
        /// 
        /// 
        /// - - -
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Controls conversation exporting settings to Insights after conversation is completed.
        /// If retentionStrategy is set to REMOVE_AFTER_CONVERSATION, Insights export is disabled no matter what you configure here.
        /// Structure is documented below.
        /// </summary>
        [Input("insightsExportSettings")]
        public Input<Inputs.CxSecuritySettingsInsightsExportSettingsGetArgs>? InsightsExportSettings { get; set; }

        /// <summary>
        /// [DLP](https://cloud.google.com/dlp/docs) inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config.
        /// Note: inspectTemplate must be located in the same region as the SecuritySettings.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt;
        /// </summary>
        [Input("inspectTemplate")]
        public Input<string>? InspectTemplate { get; set; }

        /// <summary>
        /// The location these settings are located in. Settings can only be applied to an agent in the same location.
        /// See [Available Regions](https://cloud.google.com/dialogflow/cx/docs/concept/region#avail) for a list of supported locations.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The unique identifier of the settings.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/securitySettings/&lt;Security Settings ID&gt;.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("purgeDataTypes")]
        private InputList<string>? _purgeDataTypes;

        /// <summary>
        /// List of types of data to remove when retention settings triggers purge.
        /// Each value may be one of: `DIALOGFLOW_HISTORY`.
        /// </summary>
        public InputList<string> PurgeDataTypes
        {
            get => _purgeDataTypes ?? (_purgeDataTypes = new InputList<string>());
            set => _purgeDataTypes = value;
        }

        /// <summary>
        /// Defines what types of data to redact. If not set, defaults to not redacting any kind of data.
        /// * REDACT_DISK_STORAGE: On data to be written to disk or similar devices that are capable of holding data even if power is disconnected. This includes data that are temporarily saved on disk.
        /// Possible values are: `REDACT_DISK_STORAGE`.
        /// </summary>
        [Input("redactionScope")]
        public Input<string>? RedactionScope { get; set; }

        /// <summary>
        /// Defines how we redact data. If not set, defaults to not redacting.
        /// * REDACT_WITH_SERVICE: Call redaction service to clean up the data to be persisted.
        /// Possible values are: `REDACT_WITH_SERVICE`.
        /// </summary>
        [Input("redactionStrategy")]
        public Input<string>? RedactionStrategy { get; set; }

        /// <summary>
        /// Defines how long we retain persisted data that contains sensitive info. Only one of `retention_window_days` and `retention_strategy` may be set.
        /// * REMOVE_AFTER_CONVERSATION: Removes data when the conversation ends. If there is no conversation explicitly established, a default conversation ends when the corresponding Dialogflow session ends.
        /// Possible values are: `REMOVE_AFTER_CONVERSATION`.
        /// </summary>
        [Input("retentionStrategy")]
        public Input<string>? RetentionStrategy { get; set; }

        /// <summary>
        /// Retains the data for the specified number of days. User must set a value lower than Dialogflow's default 365d TTL (30 days for Agent Assist traffic), higher value will be ignored and use default. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use default TTL.
        /// Only one of `retention_window_days` and `retention_strategy` may be set.
        /// </summary>
        [Input("retentionWindowDays")]
        public Input<int>? RetentionWindowDays { get; set; }

        public CxSecuritySettingsState()
        {
        }
        public static new CxSecuritySettingsState Empty => new CxSecuritySettingsState();
    }
}
