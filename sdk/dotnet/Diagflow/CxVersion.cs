// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Diagflow
{
    /// <summary>
    /// You can create multiple versions of your agent flows and deploy them to separate serving environments.
    /// When you edit a flow, you are editing a draft flow. At any point, you can save a draft flow as a flow version. A flow version is an immutable snapshot of your flow data and associated agent data like intents, entities, webhooks, pages, route groups, etc.
    /// 
    /// To get more information about Version, see:
    /// 
    /// * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.versions)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
    /// 
    /// ## Example Usage
    /// ### Dialogflowcx Version Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agent = new Gcp.Diagflow.CxAgent("agent", new()
    ///     {
    ///         DisplayName = "dialogflowcx-agent",
    ///         Location = "global",
    ///         DefaultLanguageCode = "en",
    ///         SupportedLanguageCodes = new[]
    ///         {
    ///             "fr",
    ///             "de",
    ///             "es",
    ///         },
    ///         TimeZone = "America/New_York",
    ///         Description = "Example description.",
    ///         AvatarUri = "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
    ///         EnableStackdriverLogging = true,
    ///         EnableSpellCorrection = true,
    ///         SpeechToTextSettings = new Gcp.Diagflow.Inputs.CxAgentSpeechToTextSettingsArgs
    ///         {
    ///             EnableSpeechAdaptation = true,
    ///         },
    ///     });
    /// 
    ///     var version1 = new Gcp.Diagflow.CxVersion("version1", new()
    ///     {
    ///         Parent = agent.StartFlow,
    ///         DisplayName = "1.0.0",
    ///         Description = "version 1.0.0",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Version can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxVersion:CxVersion default {{parent}}/versions/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:diagflow/cxVersion:CxVersion default {{parent}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:diagflow/cxVersion:CxVersion")]
    public partial class CxVersion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the version. Limit of 64 characters.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Format: projects//locations//agents//flows//versions/. Version ID is a self-increasing number generated by Dialogflow upon version creation.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The NLU settings of the flow at version creation.
        /// Structure is documented below.
        /// </summary>
        [Output("nluSettings")]
        public Output<ImmutableArray<Outputs.CxVersionNluSetting>> NluSettings { get; private set; } = null!;

        /// <summary>
        /// The Flow to create an Version for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
        /// </summary>
        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;

        /// <summary>
        /// The state of this version.
        /// * RUNNING: Version is not ready to serve (e.g. training is running).
        /// * SUCCEEDED: Training has succeeded and this version is ready to serve.
        /// * FAILED: Version training failed.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a CxVersion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CxVersion(string name, CxVersionArgs args, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxVersion:CxVersion", name, args ?? new CxVersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CxVersion(string name, Input<string> id, CxVersionState? state = null, CustomResourceOptions? options = null)
            : base("gcp:diagflow/cxVersion:CxVersion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CxVersion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CxVersion Get(string name, Input<string> id, CxVersionState? state = null, CustomResourceOptions? options = null)
        {
            return new CxVersion(name, id, state, options);
        }
    }

    public sealed class CxVersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The human-readable name of the version. Limit of 64 characters.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The Flow to create an Version for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        public CxVersionArgs()
        {
        }
        public static new CxVersionArgs Empty => new CxVersionArgs();
    }

    public sealed class CxVersionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The human-readable name of the version. Limit of 64 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Format: projects//locations//agents//flows//versions/. Version ID is a self-increasing number generated by Dialogflow upon version creation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nluSettings")]
        private InputList<Inputs.CxVersionNluSettingGetArgs>? _nluSettings;

        /// <summary>
        /// The NLU settings of the flow at version creation.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.CxVersionNluSettingGetArgs> NluSettings
        {
            get => _nluSettings ?? (_nluSettings = new InputList<Inputs.CxVersionNluSettingGetArgs>());
            set => _nluSettings = value;
        }

        /// <summary>
        /// The Flow to create an Version for.
        /// Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// The state of this version.
        /// * RUNNING: Version is not ready to serve (e.g. training is running).
        /// * SUCCEEDED: Training has succeeded and this version is ready to serve.
        /// * FAILED: Version training failed.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public CxVersionState()
        {
        }
        public static new CxVersionState Empty => new CxVersionState();
    }
}
