// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.GkeOnPrem
{
    /// <summary>
    /// A Google VMware Admin Cluster.
    /// 
    /// To get more information about VmwareAdminCluster, see:
    /// 
    /// * [API documentation](https://cloud.google.com/kubernetes-engine/distributed-cloud/reference/on-prem-api/rest/v1/projects.locations.vmwareAdminClusters)
    /// 
    /// ## Example Usage
    /// 
    /// ### Gkeonprem Vmware Admin Cluster Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var admin_cluster_basic = new Gcp.GkeOnPrem.VmwareAdminCluster("admin-cluster-basic", new()
    ///     {
    ///         Name = "basic",
    ///         Location = "us-west1",
    ///         Description = "test admin cluster",
    ///         BootstrapClusterMembership = "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
    ///         OnPremVersion = "1.31.0-gke.35",
    ///         ImageType = "ubuntu_containerd",
    ///         Vcenter = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterVcenterArgs
    ///         {
    ///             ResourcePool = "test resource pool",
    ///             Datastore = "test data store",
    ///             Datacenter = "test data center",
    ///             Cluster = "test cluster",
    ///             Folder = "test folder",
    ///             CaCertData = "test ca cert data",
    ///             Address = "10.0.0.1",
    ///             DataDisk = "test data disk",
    ///         },
    ///         NetworkConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterNetworkConfigArgs
    ///         {
    ///             ServiceAddressCidrBlocks = new[]
    ///             {
    ///                 "10.96.0.0/12",
    ///             },
    ///             PodAddressCidrBlocks = new[]
    ///             {
    ///                 "192.168.0.0/16",
    ///             },
    ///             DhcpIpConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterNetworkConfigDhcpIpConfigArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         ControlPlaneNode = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterControlPlaneNodeArgs
    ///         {
    ///             Cpus = 4,
    ///             Memory = 8192,
    ///         },
    ///         LoadBalancer = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterLoadBalancerArgs
    ///         {
    ///             VipConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterLoadBalancerVipConfigArgs
    ///             {
    ///                 ControlPlaneVip = "10.251.133.5",
    ///                 AddonsVip = "10.251.135.19",
    ///             },
    ///             F5Config = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterLoadBalancerF5ConfigArgs
    ///             {
    ///                 Address = "10.251.135.22",
    ///                 Partition = "test-parition",
    ///                 SnatPool = "test-snat-pool",
    ///             },
    ///         },
    ///         PrivateRegistryConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterPrivateRegistryConfigArgs
    ///         {
    ///             Address = "test-address",
    ///             CaCert = "test-ca-cert",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Gkeonprem Vmware Admin Cluster Full
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var admin_cluster_full = new Gcp.GkeOnPrem.VmwareAdminCluster("admin-cluster-full", new()
    ///     {
    ///         Name = "full",
    ///         Location = "us-west1",
    ///         Description = "test admin cluster",
    ///         BootstrapClusterMembership = "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
    ///         OnPremVersion = "1.31.0-gke.35",
    ///         ImageType = "ubuntu_containerd",
    ///         Annotations = null,
    ///         Vcenter = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterVcenterArgs
    ///         {
    ///             ResourcePool = "test resource pool",
    ///             Datastore = "test data store",
    ///             Datacenter = "test data center",
    ///             Cluster = "test cluster",
    ///             Folder = "test folder",
    ///             CaCertData = "test ca cert data",
    ///             Address = "10.0.0.1",
    ///             DataDisk = "test data disk",
    ///             StoragePolicyName = "storage_policy_name",
    ///         },
    ///         NetworkConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterNetworkConfigArgs
    ///         {
    ///             ServiceAddressCidrBlocks = new[]
    ///             {
    ///                 "10.96.0.0/12",
    ///             },
    ///             PodAddressCidrBlocks = new[]
    ///             {
    ///                 "192.168.0.0/16",
    ///             },
    ///             HaControlPlaneConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterNetworkConfigHaControlPlaneConfigArgs
    ///             {
    ///                 ControlPlaneIpBlock = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockArgs
    ///                 {
    ///                     Gateway = "10.0.0.3",
    ///                     Ips = new[]
    ///                     {
    ///                         new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockIpArgs
    ///                         {
    ///                             Hostname = "hostname",
    ///                             Ip = "10.0.0.4",
    ///                         },
    ///                     },
    ///                     Netmask = "10.0.0.3/32",
    ///                 },
    ///             },
    ///             HostConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterNetworkConfigHostConfigArgs
    ///             {
    ///                 DnsServers = new[]
    ///                 {
    ///                     "10.254.41.1",
    ///                 },
    ///                 NtpServers = new[]
    ///                 {
    ///                     "216.239.35.8",
    ///                 },
    ///                 DnsSearchDomains = new[]
    ///                 {
    ///                     "test-domain",
    ///                 },
    ///             },
    ///             StaticIpConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterNetworkConfigStaticIpConfigArgs
    ///             {
    ///                 IpBlocks = new[]
    ///                 {
    ///                     new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterNetworkConfigStaticIpConfigIpBlockArgs
    ///                     {
    ///                         Gateway = "10.0.0.1",
    ///                         Ips = new[]
    ///                         {
    ///                             new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterNetworkConfigStaticIpConfigIpBlockIpArgs
    ///                             {
    ///                                 Hostname = "hostname",
    ///                                 Ip = "10.0.0.2",
    ///                             },
    ///                         },
    ///                         Netmask = "10.0.0.3/32",
    ///                     },
    ///                 },
    ///             },
    ///             VcenterNetwork = "test-vcenter-network",
    ///         },
    ///         ControlPlaneNode = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterControlPlaneNodeArgs
    ///         {
    ///             Cpus = 4,
    ///             Memory = 8192,
    ///             Replicas = 3,
    ///         },
    ///         LoadBalancer = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterLoadBalancerArgs
    ///         {
    ///             VipConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterLoadBalancerVipConfigArgs
    ///             {
    ///                 ControlPlaneVip = "10.251.133.5",
    ///                 AddonsVip = "10.251.135.19",
    ///             },
    ///             ManualLbConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterLoadBalancerManualLbConfigArgs
    ///             {
    ///                 AddonsNodePort = 30005,
    ///                 ControlPlaneNodePort = 30006,
    ///                 IngressHttpNodePort = 30007,
    ///                 IngressHttpsNodePort = 30008,
    ///                 KonnectivityServerNodePort = 30009,
    ///             },
    ///         },
    ///         AddonNode = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterAddonNodeArgs
    ///         {
    ///             AutoResizeConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterAddonNodeAutoResizeConfigArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         AntiAffinityGroups = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterAntiAffinityGroupsArgs
    ///         {
    ///             AagConfigDisabled = true,
    ///         },
    ///         Authorization = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterAuthorizationArgs
    ///         {
    ///             ViewerUsers = new[]
    ///             {
    ///                 new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterAuthorizationViewerUserArgs
    ///                 {
    ///                     Username = "user1@gmail.com",
    ///                 },
    ///             },
    ///         },
    ///         AutoRepairConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterAutoRepairConfigArgs
    ///         {
    ///             Enabled = true,
    ///         },
    ///         PlatformConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterPlatformConfigArgs
    ///         {
    ///             RequiredPlatformVersion = "1.31.0",
    ///         },
    ///         PrivateRegistryConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterPrivateRegistryConfigArgs
    ///         {
    ///             Address = "test-address",
    ///             CaCert = "test-ca-cert",
    ///         },
    ///         Proxy = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterProxyArgs
    ///         {
    ///             Url = "http://my-proxy.example.local:80",
    ///             NoProxy = "10.151.222.0/24,my-host.example.local,10.151.2.1",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Gkeonprem Vmware Admin Cluster Metallb
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var admin_cluster_metallb = new Gcp.GkeOnPrem.VmwareAdminCluster("admin-cluster-metallb", new()
    ///     {
    ///         Name = "metallb",
    ///         Location = "us-west1",
    ///         Description = "test admin cluster",
    ///         BootstrapClusterMembership = "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
    ///         OnPremVersion = "1.33.0-gke.35",
    ///         ImageType = "ubuntu_containerd",
    ///         EnableAdvancedCluster = true,
    ///         Vcenter = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterVcenterArgs
    ///         {
    ///             ResourcePool = "test resource pool",
    ///             Datastore = "test data store",
    ///             Datacenter = "test data center",
    ///             Cluster = "test cluster",
    ///             Folder = "test folder",
    ///             CaCertData = "test ca cert data",
    ///             Address = "10.0.0.1",
    ///             DataDisk = "test data disk",
    ///         },
    ///         NetworkConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterNetworkConfigArgs
    ///         {
    ///             ServiceAddressCidrBlocks = new[]
    ///             {
    ///                 "10.96.0.0/12",
    ///             },
    ///             PodAddressCidrBlocks = new[]
    ///             {
    ///                 "192.168.0.0/16",
    ///             },
    ///             DhcpIpConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterNetworkConfigDhcpIpConfigArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         ControlPlaneNode = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterControlPlaneNodeArgs
    ///         {
    ///             Cpus = 4,
    ///             Memory = 8192,
    ///         },
    ///         LoadBalancer = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterLoadBalancerArgs
    ///         {
    ///             VipConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterLoadBalancerVipConfigArgs
    ///             {
    ///                 ControlPlaneVip = "10.251.133.5",
    ///                 AddonsVip = "10.251.135.19",
    ///             },
    ///             MetalLbConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterLoadBalancerMetalLbConfigArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         PrivateRegistryConfig = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterPrivateRegistryConfigArgs
    ///         {
    ///             Address = "test-address",
    ///             CaCert = "test-ca-cert",
    ///         },
    ///         Proxy = new Gcp.GkeOnPrem.Inputs.VmwareAdminClusterProxyArgs
    ///         {
    ///             Url = "http://my-proxy.example.local:80",
    ///             NoProxy = "10.151.222.0/24,my-host.example.local,10.151.2.1",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VmwareAdminCluster can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/vmwareAdminClusters/{{name}}`
    /// 
    /// * `{{project}}/{{location}}/{{name}}`
    /// 
    /// * `{{location}}/{{name}}`
    /// 
    /// When using the `pulumi import` command, VmwareAdminCluster can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster default projects/{{project}}/locations/{{location}}/vmwareAdminClusters/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster")]
    public partial class VmwareAdminCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The VMware admin cluster addon node configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("addonNode")]
        public Output<Outputs.VmwareAdminClusterAddonNode> AddonNode { get; private set; } = null!;

        /// <summary>
        /// Annotations on the VMware Admin Cluster.
        /// This field has the same restrictions as Kubernetes annotations.
        /// The total size of all keys and values combined is limited to 256k.
        /// Key can have 2 segments: prefix (optional) and name (required),
        /// separated by a slash (/).
        /// Prefix must be a DNS subdomain.
        /// Name must be 63 characters or less, begin and end with alphanumerics,
        /// with dashes (-), underscores (_), dots (.), and alphanumerics between.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `EffectiveAnnotations` for all of the annotations present on the resource.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>> Annotations { get; private set; } = null!;

        /// <summary>
        /// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at
        /// least three physical hosts in the datacenter.
        /// Structure is documented below.
        /// </summary>
        [Output("antiAffinityGroups")]
        public Output<Outputs.VmwareAdminClusterAntiAffinityGroups> AntiAffinityGroups { get; private set; } = null!;

        /// <summary>
        /// The VMware admin cluster authorization configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("authorization")]
        public Output<Outputs.VmwareAdminClusterAuthorization?> Authorization { get; private set; } = null!;

        /// <summary>
        /// Configuration for auto repairing.
        /// Structure is documented below.
        /// </summary>
        [Output("autoRepairConfig")]
        public Output<Outputs.VmwareAdminClusterAutoRepairConfig> AutoRepairConfig { get; private set; } = null!;

        /// <summary>
        /// The bootstrap cluster this VMware admin cluster belongs to.
        /// </summary>
        [Output("bootstrapClusterMembership")]
        public Output<string> BootstrapClusterMembership { get; private set; } = null!;

        /// <summary>
        /// The VMware admin cluster control plane node configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("controlPlaneNode")]
        public Output<Outputs.VmwareAdminClusterControlPlaneNode?> ControlPlaneNode { get; private set; } = null!;

        /// <summary>
        /// The time the cluster was created, in RFC3339 text format.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// A human readable description of this VMware admin cluster.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("effectiveAnnotations")]
        public Output<ImmutableDictionary<string, string>> EffectiveAnnotations { get; private set; } = null!;

        /// <summary>
        /// If set, the advanced cluster feature is enabled.
        /// </summary>
        [Output("enableAdvancedCluster")]
        public Output<bool> EnableAdvancedCluster { get; private set; } = null!;

        /// <summary>
        /// The DNS name of VMware admin cluster's API server.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// This checksum is computed by the server based on the value of other
        /// fields, and may be sent on update and delete requests to ensure the
        /// client has an up-to-date value before proceeding.
        /// Allows clients to perform consistent read-modify-writes
        /// through optimistic concurrency control.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Fleet configuration for the cluster.
        /// Structure is documented below.
        /// </summary>
        [Output("fleets")]
        public Output<ImmutableArray<Outputs.VmwareAdminClusterFleet>> Fleets { get; private set; } = null!;

        /// <summary>
        /// The OS image type for the VMware admin cluster.
        /// </summary>
        [Output("imageType")]
        public Output<string> ImageType { get; private set; } = null!;

        /// <summary>
        /// Specifies the load balancer configuration for VMware admin cluster.
        /// Structure is documented below.
        /// </summary>
        [Output("loadBalancer")]
        public Output<Outputs.VmwareAdminClusterLoadBalancer?> LoadBalancer { get; private set; } = null!;

        /// <summary>
        /// The object name of the VMwareAdminCluster custom resource on the
        /// associated admin cluster. This field is used to support conflicting
        /// names when enrolling existing clusters to the API. When used as a part of
        /// cluster enrollment, this field will differ from the ID in the resource
        /// name. For new clusters, this field will match the user provided cluster ID
        /// and be visible in the last component of the resource name. It is not
        /// modifiable.
        /// All users should use this name to access their cluster using gkectl or
        /// kubectl and should expect to see the local name when viewing admin
        /// cluster controller logs.
        /// </summary>
        [Output("localName")]
        public Output<string> LocalName { get; private set; } = null!;

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The VMware admin cluster resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The VMware admin cluster network configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("networkConfig")]
        public Output<Outputs.VmwareAdminClusterNetworkConfig> NetworkConfig { get; private set; } = null!;

        /// <summary>
        /// The Anthos clusters on the VMware version for the admin cluster.
        /// </summary>
        [Output("onPremVersion")]
        public Output<string?> OnPremVersion { get; private set; } = null!;

        /// <summary>
        /// The VMware platform configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("platformConfig")]
        public Output<Outputs.VmwareAdminClusterPlatformConfig?> PlatformConfig { get; private set; } = null!;

        /// <summary>
        /// Configuration for private registry.
        /// Structure is documented below.
        /// </summary>
        [Output("privateRegistryConfig")]
        public Output<Outputs.VmwareAdminClusterPrivateRegistryConfig?> PrivateRegistryConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Configuration for proxy.
        /// Structure is documented below.
        /// </summary>
        [Output("proxy")]
        public Output<Outputs.VmwareAdminClusterProxy?> Proxy { get; private set; } = null!;

        /// <summary>
        /// If set, there are currently changes in flight to the VMware admin cluster.
        /// </summary>
        [Output("reconciling")]
        public Output<bool> Reconciling { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// The lifecycle state of the condition.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// ResourceStatus representing detailed cluster state.
        /// Structure is documented below.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.VmwareAdminClusterStatus>> Statuses { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the VMware Admin Cluster.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The time the cluster was last updated, in RFC3339 text format.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Specifies vCenter config for the admin cluster.
        /// Structure is documented below.
        /// </summary>
        [Output("vcenter")]
        public Output<Outputs.VmwareAdminClusterVcenter?> Vcenter { get; private set; } = null!;


        /// <summary>
        /// Create a VmwareAdminCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VmwareAdminCluster(string name, VmwareAdminClusterArgs args, CustomResourceOptions? options = null)
            : base("gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster", name, args ?? new VmwareAdminClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VmwareAdminCluster(string name, Input<string> id, VmwareAdminClusterState? state = null, CustomResourceOptions? options = null)
            : base("gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VmwareAdminCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VmwareAdminCluster Get(string name, Input<string> id, VmwareAdminClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new VmwareAdminCluster(name, id, state, options);
        }
    }

    public sealed class VmwareAdminClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The VMware admin cluster addon node configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("addonNode")]
        public Input<Inputs.VmwareAdminClusterAddonNodeArgs>? AddonNode { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations on the VMware Admin Cluster.
        /// This field has the same restrictions as Kubernetes annotations.
        /// The total size of all keys and values combined is limited to 256k.
        /// Key can have 2 segments: prefix (optional) and name (required),
        /// separated by a slash (/).
        /// Prefix must be a DNS subdomain.
        /// Name must be 63 characters or less, begin and end with alphanumerics,
        /// with dashes (-), underscores (_), dots (.), and alphanumerics between.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `EffectiveAnnotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at
        /// least three physical hosts in the datacenter.
        /// Structure is documented below.
        /// </summary>
        [Input("antiAffinityGroups")]
        public Input<Inputs.VmwareAdminClusterAntiAffinityGroupsArgs>? AntiAffinityGroups { get; set; }

        /// <summary>
        /// The VMware admin cluster authorization configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("authorization")]
        public Input<Inputs.VmwareAdminClusterAuthorizationArgs>? Authorization { get; set; }

        /// <summary>
        /// Configuration for auto repairing.
        /// Structure is documented below.
        /// </summary>
        [Input("autoRepairConfig")]
        public Input<Inputs.VmwareAdminClusterAutoRepairConfigArgs>? AutoRepairConfig { get; set; }

        /// <summary>
        /// The bootstrap cluster this VMware admin cluster belongs to.
        /// </summary>
        [Input("bootstrapClusterMembership")]
        public Input<string>? BootstrapClusterMembership { get; set; }

        /// <summary>
        /// The VMware admin cluster control plane node configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("controlPlaneNode")]
        public Input<Inputs.VmwareAdminClusterControlPlaneNodeArgs>? ControlPlaneNode { get; set; }

        /// <summary>
        /// A human readable description of this VMware admin cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If set, the advanced cluster feature is enabled.
        /// </summary>
        [Input("enableAdvancedCluster")]
        public Input<bool>? EnableAdvancedCluster { get; set; }

        /// <summary>
        /// The OS image type for the VMware admin cluster.
        /// </summary>
        [Input("imageType")]
        public Input<string>? ImageType { get; set; }

        /// <summary>
        /// Specifies the load balancer configuration for VMware admin cluster.
        /// Structure is documented below.
        /// </summary>
        [Input("loadBalancer")]
        public Input<Inputs.VmwareAdminClusterLoadBalancerArgs>? LoadBalancer { get; set; }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The VMware admin cluster resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The VMware admin cluster network configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("networkConfig", required: true)]
        public Input<Inputs.VmwareAdminClusterNetworkConfigArgs> NetworkConfig { get; set; } = null!;

        /// <summary>
        /// The Anthos clusters on the VMware version for the admin cluster.
        /// </summary>
        [Input("onPremVersion")]
        public Input<string>? OnPremVersion { get; set; }

        /// <summary>
        /// The VMware platform configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("platformConfig")]
        public Input<Inputs.VmwareAdminClusterPlatformConfigArgs>? PlatformConfig { get; set; }

        /// <summary>
        /// Configuration for private registry.
        /// Structure is documented below.
        /// </summary>
        [Input("privateRegistryConfig")]
        public Input<Inputs.VmwareAdminClusterPrivateRegistryConfigArgs>? PrivateRegistryConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Configuration for proxy.
        /// Structure is documented below.
        /// </summary>
        [Input("proxy")]
        public Input<Inputs.VmwareAdminClusterProxyArgs>? Proxy { get; set; }

        /// <summary>
        /// Specifies vCenter config for the admin cluster.
        /// Structure is documented below.
        /// </summary>
        [Input("vcenter")]
        public Input<Inputs.VmwareAdminClusterVcenterArgs>? Vcenter { get; set; }

        public VmwareAdminClusterArgs()
        {
        }
        public static new VmwareAdminClusterArgs Empty => new VmwareAdminClusterArgs();
    }

    public sealed class VmwareAdminClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The VMware admin cluster addon node configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("addonNode")]
        public Input<Inputs.VmwareAdminClusterAddonNodeGetArgs>? AddonNode { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations on the VMware Admin Cluster.
        /// This field has the same restrictions as Kubernetes annotations.
        /// The total size of all keys and values combined is limited to 256k.
        /// Key can have 2 segments: prefix (optional) and name (required),
        /// separated by a slash (/).
        /// Prefix must be a DNS subdomain.
        /// Name must be 63 characters or less, begin and end with alphanumerics,
        /// with dashes (-), underscores (_), dots (.), and alphanumerics between.
        /// 
        /// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        /// Please refer to the field `EffectiveAnnotations` for all of the annotations present on the resource.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at
        /// least three physical hosts in the datacenter.
        /// Structure is documented below.
        /// </summary>
        [Input("antiAffinityGroups")]
        public Input<Inputs.VmwareAdminClusterAntiAffinityGroupsGetArgs>? AntiAffinityGroups { get; set; }

        /// <summary>
        /// The VMware admin cluster authorization configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("authorization")]
        public Input<Inputs.VmwareAdminClusterAuthorizationGetArgs>? Authorization { get; set; }

        /// <summary>
        /// Configuration for auto repairing.
        /// Structure is documented below.
        /// </summary>
        [Input("autoRepairConfig")]
        public Input<Inputs.VmwareAdminClusterAutoRepairConfigGetArgs>? AutoRepairConfig { get; set; }

        /// <summary>
        /// The bootstrap cluster this VMware admin cluster belongs to.
        /// </summary>
        [Input("bootstrapClusterMembership")]
        public Input<string>? BootstrapClusterMembership { get; set; }

        /// <summary>
        /// The VMware admin cluster control plane node configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("controlPlaneNode")]
        public Input<Inputs.VmwareAdminClusterControlPlaneNodeGetArgs>? ControlPlaneNode { get; set; }

        /// <summary>
        /// The time the cluster was created, in RFC3339 text format.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// A human readable description of this VMware admin cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("effectiveAnnotations")]
        private InputMap<string>? _effectiveAnnotations;
        public InputMap<string> EffectiveAnnotations
        {
            get => _effectiveAnnotations ?? (_effectiveAnnotations = new InputMap<string>());
            set => _effectiveAnnotations = value;
        }

        /// <summary>
        /// If set, the advanced cluster feature is enabled.
        /// </summary>
        [Input("enableAdvancedCluster")]
        public Input<bool>? EnableAdvancedCluster { get; set; }

        /// <summary>
        /// The DNS name of VMware admin cluster's API server.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// This checksum is computed by the server based on the value of other
        /// fields, and may be sent on update and delete requests to ensure the
        /// client has an up-to-date value before proceeding.
        /// Allows clients to perform consistent read-modify-writes
        /// through optimistic concurrency control.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("fleets")]
        private InputList<Inputs.VmwareAdminClusterFleetGetArgs>? _fleets;

        /// <summary>
        /// Fleet configuration for the cluster.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.VmwareAdminClusterFleetGetArgs> Fleets
        {
            get => _fleets ?? (_fleets = new InputList<Inputs.VmwareAdminClusterFleetGetArgs>());
            set => _fleets = value;
        }

        /// <summary>
        /// The OS image type for the VMware admin cluster.
        /// </summary>
        [Input("imageType")]
        public Input<string>? ImageType { get; set; }

        /// <summary>
        /// Specifies the load balancer configuration for VMware admin cluster.
        /// Structure is documented below.
        /// </summary>
        [Input("loadBalancer")]
        public Input<Inputs.VmwareAdminClusterLoadBalancerGetArgs>? LoadBalancer { get; set; }

        /// <summary>
        /// The object name of the VMwareAdminCluster custom resource on the
        /// associated admin cluster. This field is used to support conflicting
        /// names when enrolling existing clusters to the API. When used as a part of
        /// cluster enrollment, this field will differ from the ID in the resource
        /// name. For new clusters, this field will match the user provided cluster ID
        /// and be visible in the last component of the resource name. It is not
        /// modifiable.
        /// All users should use this name to access their cluster using gkectl or
        /// kubectl and should expect to see the local name when viewing admin
        /// cluster controller logs.
        /// </summary>
        [Input("localName")]
        public Input<string>? LocalName { get; set; }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The VMware admin cluster resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The VMware admin cluster network configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("networkConfig")]
        public Input<Inputs.VmwareAdminClusterNetworkConfigGetArgs>? NetworkConfig { get; set; }

        /// <summary>
        /// The Anthos clusters on the VMware version for the admin cluster.
        /// </summary>
        [Input("onPremVersion")]
        public Input<string>? OnPremVersion { get; set; }

        /// <summary>
        /// The VMware platform configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("platformConfig")]
        public Input<Inputs.VmwareAdminClusterPlatformConfigGetArgs>? PlatformConfig { get; set; }

        /// <summary>
        /// Configuration for private registry.
        /// Structure is documented below.
        /// </summary>
        [Input("privateRegistryConfig")]
        public Input<Inputs.VmwareAdminClusterPrivateRegistryConfigGetArgs>? PrivateRegistryConfig { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Configuration for proxy.
        /// Structure is documented below.
        /// </summary>
        [Input("proxy")]
        public Input<Inputs.VmwareAdminClusterProxyGetArgs>? Proxy { get; set; }

        /// <summary>
        /// If set, there are currently changes in flight to the VMware admin cluster.
        /// </summary>
        [Input("reconciling")]
        public Input<bool>? Reconciling { get; set; }

        /// <summary>
        /// (Output)
        /// The lifecycle state of the condition.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("statuses")]
        private InputList<Inputs.VmwareAdminClusterStatusGetArgs>? _statuses;

        /// <summary>
        /// ResourceStatus representing detailed cluster state.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.VmwareAdminClusterStatusGetArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.VmwareAdminClusterStatusGetArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// The unique identifier of the VMware Admin Cluster.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The time the cluster was last updated, in RFC3339 text format.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// Specifies vCenter config for the admin cluster.
        /// Structure is documented below.
        /// </summary>
        [Input("vcenter")]
        public Input<Inputs.VmwareAdminClusterVcenterGetArgs>? Vcenter { get; set; }

        public VmwareAdminClusterState()
        {
        }
        public static new VmwareAdminClusterState Empty => new VmwareAdminClusterState();
    }
}
