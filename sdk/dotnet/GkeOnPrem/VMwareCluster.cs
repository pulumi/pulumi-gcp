// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.GkeOnPrem
{
    /// <summary>
    /// ## Example Usage
    /// ### Gkeonprem Vmware Cluster Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cluster_basic = new Gcp.GkeOnPrem.VMwareCluster("cluster-basic", new()
    ///     {
    ///         Location = "us-west1",
    ///         AdminClusterMembership = "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
    ///         Description = "test cluster",
    ///         OnPremVersion = "1.13.1-gke.35",
    ///         Annotations = null,
    ///         NetworkConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigArgs
    ///         {
    ///             ServiceAddressCidrBlocks = new[]
    ///             {
    ///                 "10.96.0.0/12",
    ///             },
    ///             PodAddressCidrBlocks = new[]
    ///             {
    ///                 "192.168.0.0/16",
    ///             },
    ///             DhcpIpConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigDhcpIpConfigArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         ControlPlaneNode = new Gcp.GkeOnPrem.Inputs.VMwareClusterControlPlaneNodeArgs
    ///         {
    ///             Cpus = 4,
    ///             Memory = 8192,
    ///             Replicas = 1,
    ///         },
    ///         LoadBalancer = new Gcp.GkeOnPrem.Inputs.VMwareClusterLoadBalancerArgs
    ///         {
    ///             VipConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterLoadBalancerVipConfigArgs
    ///             {
    ///                 ControlPlaneVip = "10.251.133.5",
    ///                 IngressVip = "10.251.135.19",
    ///             },
    ///             MetalLbConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterLoadBalancerMetalLbConfigArgs
    ///             {
    ///                 AddressPools = new[]
    ///                 {
    ///                     new Gcp.GkeOnPrem.Inputs.VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs
    ///                     {
    ///                         Pool = "ingress-ip",
    ///                         ManualAssign = true,
    ///                         Addresses = new[]
    ///                         {
    ///                             "10.251.135.19",
    ///                         },
    ///                         AvoidBuggyIps = true,
    ///                     },
    ///                     new Gcp.GkeOnPrem.Inputs.VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs
    ///                     {
    ///                         Pool = "lb-test-ip",
    ///                         ManualAssign = true,
    ///                         Addresses = new[]
    ///                         {
    ///                             "10.251.135.19",
    ///                         },
    ///                         AvoidBuggyIps = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Gkeonprem Vmware Cluster F5lb
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cluster_f5lb = new Gcp.GkeOnPrem.VMwareCluster("cluster-f5lb", new()
    ///     {
    ///         Location = "us-west1",
    ///         AdminClusterMembership = "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
    ///         Description = "test cluster",
    ///         OnPremVersion = "1.13.1-gke.35",
    ///         Annotations = null,
    ///         NetworkConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigArgs
    ///         {
    ///             ServiceAddressCidrBlocks = new[]
    ///             {
    ///                 "10.96.0.0/12",
    ///             },
    ///             PodAddressCidrBlocks = new[]
    ///             {
    ///                 "192.168.0.0/16",
    ///             },
    ///             DhcpIpConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigDhcpIpConfigArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///             ControlPlaneV2Config = new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigControlPlaneV2ConfigArgs
    ///             {
    ///                 ControlPlaneIpBlock = new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlockArgs
    ///                 {
    ///                     Ips = new[]
    ///                     {
    ///                         new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlockIpArgs
    ///                         {
    ///                             Hostname = "test-hostname",
    ///                             Ip = "10.0.0.1",
    ///                         },
    ///                     },
    ///                     Netmask = "10.0.0.1/32",
    ///                     Gateway = "test-gateway",
    ///                 },
    ///             },
    ///         },
    ///         ControlPlaneNode = new Gcp.GkeOnPrem.Inputs.VMwareClusterControlPlaneNodeArgs
    ///         {
    ///             Cpus = 4,
    ///             Memory = 8192,
    ///             Replicas = 1,
    ///             AutoResizeConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterControlPlaneNodeAutoResizeConfigArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         LoadBalancer = new Gcp.GkeOnPrem.Inputs.VMwareClusterLoadBalancerArgs
    ///         {
    ///             VipConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterLoadBalancerVipConfigArgs
    ///             {
    ///                 ControlPlaneVip = "10.251.133.5",
    ///                 IngressVip = "10.251.135.19",
    ///             },
    ///             F5Config = new Gcp.GkeOnPrem.Inputs.VMwareClusterLoadBalancerF5ConfigArgs
    ///             {
    ///                 Address = "10.0.0.1",
    ///                 Partition = "test-partition",
    ///                 SnatPool = "test-snap-pool",
    ///             },
    ///         },
    ///         DataplaneV2 = new Gcp.GkeOnPrem.Inputs.VMwareClusterDataplaneV2Args
    ///         {
    ///             DataplaneV2Enabled = true,
    ///             WindowsDataplaneV2Enabled = true,
    ///             AdvancedNetworking = true,
    ///         },
    ///         VmTrackingEnabled = true,
    ///         EnableControlPlaneV2 = true,
    ///         Authorization = new Gcp.GkeOnPrem.Inputs.VMwareClusterAuthorizationArgs
    ///         {
    ///             AdminUsers = new[]
    ///             {
    ///                 new Gcp.GkeOnPrem.Inputs.VMwareClusterAuthorizationAdminUserArgs
    ///                 {
    ///                     Username = "testuser@gmail.com",
    ///                 },
    ///             },
    ///         },
    ///         AntiAffinityGroups = new Gcp.GkeOnPrem.Inputs.VMwareClusterAntiAffinityGroupsArgs
    ///         {
    ///             AagConfigDisabled = true,
    ///         },
    ///         AutoRepairConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterAutoRepairConfigArgs
    ///         {
    ///             Enabled = true,
    ///         },
    ///         Storage = new Gcp.GkeOnPrem.Inputs.VMwareClusterStorageArgs
    ///         {
    ///             VsphereCsiDisabled = true,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Gkeonprem Vmware Cluster Manuallb
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cluster_manuallb = new Gcp.GkeOnPrem.VMwareCluster("cluster-manuallb", new()
    ///     {
    ///         Location = "us-west1",
    ///         AdminClusterMembership = "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
    ///         Description = "test cluster",
    ///         OnPremVersion = "1.13.1-gke.35",
    ///         Annotations = null,
    ///         NetworkConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigArgs
    ///         {
    ///             ServiceAddressCidrBlocks = new[]
    ///             {
    ///                 "10.96.0.0/12",
    ///             },
    ///             PodAddressCidrBlocks = new[]
    ///             {
    ///                 "192.168.0.0/16",
    ///             },
    ///             HostConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigHostConfigArgs
    ///             {
    ///                 DnsServers = new[]
    ///                 {
    ///                     "10.254.41.1",
    ///                 },
    ///                 NtpServers = new[]
    ///                 {
    ///                     "216.239.35.8",
    ///                 },
    ///                 DnsSearchDomains = new[]
    ///                 {
    ///                     "test-domain",
    ///                 },
    ///             },
    ///             StaticIpConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigStaticIpConfigArgs
    ///             {
    ///                 IpBlocks = new[]
    ///                 {
    ///                     new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigStaticIpConfigIpBlockArgs
    ///                     {
    ///                         Netmask = "255.255.252.0",
    ///                         Gateway = "10.251.31.254",
    ///                         Ips = new[]
    ///                         {
    ///                             new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigStaticIpConfigIpBlockIpArgs
    ///                             {
    ///                                 Ip = "10.251.30.153",
    ///                                 Hostname = "test-hostname1",
    ///                             },
    ///                             new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigStaticIpConfigIpBlockIpArgs
    ///                             {
    ///                                 Ip = "10.251.31.206",
    ///                                 Hostname = "test-hostname2",
    ///                             },
    ///                             new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigStaticIpConfigIpBlockIpArgs
    ///                             {
    ///                                 Ip = "10.251.31.193",
    ///                                 Hostname = "test-hostname3",
    ///                             },
    ///                             new Gcp.GkeOnPrem.Inputs.VMwareClusterNetworkConfigStaticIpConfigIpBlockIpArgs
    ///                             {
    ///                                 Ip = "10.251.30.230",
    ///                                 Hostname = "test-hostname4",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         ControlPlaneNode = new Gcp.GkeOnPrem.Inputs.VMwareClusterControlPlaneNodeArgs
    ///         {
    ///             Cpus = 4,
    ///             Memory = 8192,
    ///             Replicas = 1,
    ///             AutoResizeConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterControlPlaneNodeAutoResizeConfigArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         LoadBalancer = new Gcp.GkeOnPrem.Inputs.VMwareClusterLoadBalancerArgs
    ///         {
    ///             VipConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterLoadBalancerVipConfigArgs
    ///             {
    ///                 ControlPlaneVip = "10.251.133.5",
    ///                 IngressVip = "10.251.135.19",
    ///             },
    ///             ManualLbConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterLoadBalancerManualLbConfigArgs
    ///             {
    ///                 IngressHttpNodePort = 30005,
    ///                 IngressHttpsNodePort = 30006,
    ///                 ControlPlaneNodePort = 30007,
    ///                 KonnectivityServerNodePort = 30008,
    ///             },
    ///         },
    ///         DataplaneV2 = new Gcp.GkeOnPrem.Inputs.VMwareClusterDataplaneV2Args
    ///         {
    ///             DataplaneV2Enabled = true,
    ///             WindowsDataplaneV2Enabled = true,
    ///             AdvancedNetworking = true,
    ///         },
    ///         VmTrackingEnabled = true,
    ///         EnableControlPlaneV2 = true,
    ///         Authorization = new Gcp.GkeOnPrem.Inputs.VMwareClusterAuthorizationArgs
    ///         {
    ///             AdminUsers = new[]
    ///             {
    ///                 new Gcp.GkeOnPrem.Inputs.VMwareClusterAuthorizationAdminUserArgs
    ///                 {
    ///                     Username = "testuser@gmail.com",
    ///                 },
    ///             },
    ///         },
    ///         AntiAffinityGroups = new Gcp.GkeOnPrem.Inputs.VMwareClusterAntiAffinityGroupsArgs
    ///         {
    ///             AagConfigDisabled = true,
    ///         },
    ///         AutoRepairConfig = new Gcp.GkeOnPrem.Inputs.VMwareClusterAutoRepairConfigArgs
    ///         {
    ///             Enabled = true,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = google_beta,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VmwareCluster can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import gcp:gkeonprem/vMwareCluster:VMwareCluster default projects/{{project}}/locations/{{location}}/vmwareClusters/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:gkeonprem/vMwareCluster:VMwareCluster default {{project}}/{{location}}/{{name}}
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import gcp:gkeonprem/vMwareCluster:VMwareCluster default {{location}}/{{name}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:gkeonprem/vMwareCluster:VMwareCluster")]
    public partial class VMwareCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The admin cluster this VMware User Cluster belongs to.
        /// This is the full resource name of the admin cluster's hub membership.
        /// In the future, references to other resource types might be allowed if
        /// admin clusters are modeled as their own resources.
        /// </summary>
        [Output("adminClusterMembership")]
        public Output<string> AdminClusterMembership { get; private set; } = null!;

        /// <summary>
        /// Annotations on the VMware User Cluster.
        /// This field has the same restrictions as Kubernetes annotations.
        /// The total size of all keys and values combined is limited to 256k.
        /// Key can have 2 segments: prefix (optional) and name (required),
        /// separated by a slash (/).
        /// Prefix must be a DNS subdomain.
        /// Name must be 63 characters or less, begin and end with alphanumerics,
        /// with dashes (-), underscores (_), dots (.), and alphanumerics between.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>> Annotations { get; private set; } = null!;

        /// <summary>
        /// AAGConfig specifies whether to spread VMware User Cluster nodes across at
        /// least three physical hosts in the datacenter.
        /// Structure is documented below.
        /// </summary>
        [Output("antiAffinityGroups")]
        public Output<Outputs.VMwareClusterAntiAffinityGroups> AntiAffinityGroups { get; private set; } = null!;

        /// <summary>
        /// RBAC policy that will be applied and managed by GKE On-Prem.
        /// Structure is documented below.
        /// </summary>
        [Output("authorization")]
        public Output<Outputs.VMwareClusterAuthorization?> Authorization { get; private set; } = null!;

        /// <summary>
        /// Configuration for auto repairing.
        /// Structure is documented below.
        /// </summary>
        [Output("autoRepairConfig")]
        public Output<Outputs.VMwareClusterAutoRepairConfig> AutoRepairConfig { get; private set; } = null!;

        /// <summary>
        /// VMware User Cluster control plane nodes must have either 1 or 3 replicas.
        /// Structure is documented below.
        /// </summary>
        [Output("controlPlaneNode")]
        public Output<Outputs.VMwareClusterControlPlaneNode> ControlPlaneNode { get; private set; } = null!;

        /// <summary>
        /// The time at which VMware User Cluster was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
        /// Structure is documented below.
        /// </summary>
        [Output("dataplaneV2")]
        public Output<Outputs.VMwareClusterDataplaneV2> DataplaneV2 { get; private set; } = null!;

        /// <summary>
        /// The time at which VMware User Cluster was deleted.
        /// </summary>
        [Output("deleteTime")]
        public Output<string> DeleteTime { get; private set; } = null!;

        /// <summary>
        /// A human readable description of this VMware User Cluster.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable control plane V2. Default to false.
        /// </summary>
        [Output("enableControlPlaneV2")]
        public Output<bool?> EnableControlPlaneV2 { get; private set; } = null!;

        /// <summary>
        /// The DNS name of VMware User Cluster's API server.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// This checksum is computed by the server based on the value of other
        /// fields, and may be sent on update and delete requests to ensure the
        /// client has an up-to-date value before proceeding.
        /// Allows clients to perform consistent read-modify-writes
        /// through optimistic concurrency control.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Fleet configuration for the cluster.
        /// Structure is documented below.
        /// </summary>
        [Output("fleets")]
        public Output<ImmutableArray<Outputs.VMwareClusterFleet>> Fleets { get; private set; } = null!;

        /// <summary>
        /// Load Balancer configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("loadBalancer")]
        public Output<Outputs.VMwareClusterLoadBalancer?> LoadBalancer { get; private set; } = null!;

        /// <summary>
        /// The object name of the VMware OnPremUserCluster custom resource on the
        /// associated admin cluster. This field is used to support conflicting
        /// names when enrolling existing clusters to the API. When used as a part of
        /// cluster enrollment, this field will differ from the ID in the resource
        /// name. For new clusters, this field will match the user provided cluster ID
        /// and be visible in the last component of the resource name. It is not
        /// modifiable.
        /// All users should use this name to access their cluster using gkectl or
        /// kubectl and should expect to see the local name when viewing admin
        /// cluster controller logs.
        /// </summary>
        [Output("localName")]
        public Output<string> LocalName { get; private set; } = null!;

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The VMware cluster name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The VMware User Cluster network configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("networkConfig")]
        public Output<Outputs.VMwareClusterNetworkConfig?> NetworkConfig { get; private set; } = null!;

        /// <summary>
        /// The Anthos clusters on the VMware version for your user cluster.
        /// </summary>
        [Output("onPremVersion")]
        public Output<string> OnPremVersion { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// If set, there are currently changes in flight to the VMware User Cluster.
        /// </summary>
        [Output("reconciling")]
        public Output<bool> Reconciling { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// The lifecycle state of the condition.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// Specifies the detailed validation check status
        /// Structure is documented below.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.VMwareClusterStatus>> Statuses { get; private set; } = null!;

        /// <summary>
        /// Storage configuration.
        /// Structure is documented below.
        /// </summary>
        [Output("storage")]
        public Output<Outputs.VMwareClusterStorage> Storage { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the VMware User Cluster.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The time at which VMware User Cluster was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// ValidationCheck represents the result of the preflight check job.
        /// Structure is documented below.
        /// </summary>
        [Output("validationChecks")]
        public Output<ImmutableArray<Outputs.VMwareClusterValidationCheck>> ValidationChecks { get; private set; } = null!;

        /// <summary>
        /// VmwareVCenterConfig specifies vCenter config for the user cluster.
        /// Inherited from the admin cluster.
        /// Structure is documented below.
        /// </summary>
        [Output("vcenters")]
        public Output<ImmutableArray<Outputs.VMwareClusterVcenter>> Vcenters { get; private set; } = null!;

        /// <summary>
        /// Enable VM tracking.
        /// </summary>
        [Output("vmTrackingEnabled")]
        public Output<bool> VmTrackingEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a VMwareCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VMwareCluster(string name, VMwareClusterArgs args, CustomResourceOptions? options = null)
            : base("gcp:gkeonprem/vMwareCluster:VMwareCluster", name, args ?? new VMwareClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VMwareCluster(string name, Input<string> id, VMwareClusterState? state = null, CustomResourceOptions? options = null)
            : base("gcp:gkeonprem/vMwareCluster:VMwareCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VMwareCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VMwareCluster Get(string name, Input<string> id, VMwareClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new VMwareCluster(name, id, state, options);
        }
    }

    public sealed class VMwareClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The admin cluster this VMware User Cluster belongs to.
        /// This is the full resource name of the admin cluster's hub membership.
        /// In the future, references to other resource types might be allowed if
        /// admin clusters are modeled as their own resources.
        /// </summary>
        [Input("adminClusterMembership", required: true)]
        public Input<string> AdminClusterMembership { get; set; } = null!;

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations on the VMware User Cluster.
        /// This field has the same restrictions as Kubernetes annotations.
        /// The total size of all keys and values combined is limited to 256k.
        /// Key can have 2 segments: prefix (optional) and name (required),
        /// separated by a slash (/).
        /// Prefix must be a DNS subdomain.
        /// Name must be 63 characters or less, begin and end with alphanumerics,
        /// with dashes (-), underscores (_), dots (.), and alphanumerics between.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// AAGConfig specifies whether to spread VMware User Cluster nodes across at
        /// least three physical hosts in the datacenter.
        /// Structure is documented below.
        /// </summary>
        [Input("antiAffinityGroups")]
        public Input<Inputs.VMwareClusterAntiAffinityGroupsArgs>? AntiAffinityGroups { get; set; }

        /// <summary>
        /// RBAC policy that will be applied and managed by GKE On-Prem.
        /// Structure is documented below.
        /// </summary>
        [Input("authorization")]
        public Input<Inputs.VMwareClusterAuthorizationArgs>? Authorization { get; set; }

        /// <summary>
        /// Configuration for auto repairing.
        /// Structure is documented below.
        /// </summary>
        [Input("autoRepairConfig")]
        public Input<Inputs.VMwareClusterAutoRepairConfigArgs>? AutoRepairConfig { get; set; }

        /// <summary>
        /// VMware User Cluster control plane nodes must have either 1 or 3 replicas.
        /// Structure is documented below.
        /// </summary>
        [Input("controlPlaneNode", required: true)]
        public Input<Inputs.VMwareClusterControlPlaneNodeArgs> ControlPlaneNode { get; set; } = null!;

        /// <summary>
        /// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
        /// Structure is documented below.
        /// </summary>
        [Input("dataplaneV2")]
        public Input<Inputs.VMwareClusterDataplaneV2Args>? DataplaneV2 { get; set; }

        /// <summary>
        /// A human readable description of this VMware User Cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable control plane V2. Default to false.
        /// </summary>
        [Input("enableControlPlaneV2")]
        public Input<bool>? EnableControlPlaneV2 { get; set; }

        /// <summary>
        /// Load Balancer configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("loadBalancer")]
        public Input<Inputs.VMwareClusterLoadBalancerArgs>? LoadBalancer { get; set; }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The VMware cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The VMware User Cluster network configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("networkConfig")]
        public Input<Inputs.VMwareClusterNetworkConfigArgs>? NetworkConfig { get; set; }

        /// <summary>
        /// The Anthos clusters on the VMware version for your user cluster.
        /// </summary>
        [Input("onPremVersion", required: true)]
        public Input<string> OnPremVersion { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Storage configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("storage")]
        public Input<Inputs.VMwareClusterStorageArgs>? Storage { get; set; }

        /// <summary>
        /// Enable VM tracking.
        /// </summary>
        [Input("vmTrackingEnabled")]
        public Input<bool>? VmTrackingEnabled { get; set; }

        public VMwareClusterArgs()
        {
        }
        public static new VMwareClusterArgs Empty => new VMwareClusterArgs();
    }

    public sealed class VMwareClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The admin cluster this VMware User Cluster belongs to.
        /// This is the full resource name of the admin cluster's hub membership.
        /// In the future, references to other resource types might be allowed if
        /// admin clusters are modeled as their own resources.
        /// </summary>
        [Input("adminClusterMembership")]
        public Input<string>? AdminClusterMembership { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations on the VMware User Cluster.
        /// This field has the same restrictions as Kubernetes annotations.
        /// The total size of all keys and values combined is limited to 256k.
        /// Key can have 2 segments: prefix (optional) and name (required),
        /// separated by a slash (/).
        /// Prefix must be a DNS subdomain.
        /// Name must be 63 characters or less, begin and end with alphanumerics,
        /// with dashes (-), underscores (_), dots (.), and alphanumerics between.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// AAGConfig specifies whether to spread VMware User Cluster nodes across at
        /// least three physical hosts in the datacenter.
        /// Structure is documented below.
        /// </summary>
        [Input("antiAffinityGroups")]
        public Input<Inputs.VMwareClusterAntiAffinityGroupsGetArgs>? AntiAffinityGroups { get; set; }

        /// <summary>
        /// RBAC policy that will be applied and managed by GKE On-Prem.
        /// Structure is documented below.
        /// </summary>
        [Input("authorization")]
        public Input<Inputs.VMwareClusterAuthorizationGetArgs>? Authorization { get; set; }

        /// <summary>
        /// Configuration for auto repairing.
        /// Structure is documented below.
        /// </summary>
        [Input("autoRepairConfig")]
        public Input<Inputs.VMwareClusterAutoRepairConfigGetArgs>? AutoRepairConfig { get; set; }

        /// <summary>
        /// VMware User Cluster control plane nodes must have either 1 or 3 replicas.
        /// Structure is documented below.
        /// </summary>
        [Input("controlPlaneNode")]
        public Input<Inputs.VMwareClusterControlPlaneNodeGetArgs>? ControlPlaneNode { get; set; }

        /// <summary>
        /// The time at which VMware User Cluster was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
        /// Structure is documented below.
        /// </summary>
        [Input("dataplaneV2")]
        public Input<Inputs.VMwareClusterDataplaneV2GetArgs>? DataplaneV2 { get; set; }

        /// <summary>
        /// The time at which VMware User Cluster was deleted.
        /// </summary>
        [Input("deleteTime")]
        public Input<string>? DeleteTime { get; set; }

        /// <summary>
        /// A human readable description of this VMware User Cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable control plane V2. Default to false.
        /// </summary>
        [Input("enableControlPlaneV2")]
        public Input<bool>? EnableControlPlaneV2 { get; set; }

        /// <summary>
        /// The DNS name of VMware User Cluster's API server.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// This checksum is computed by the server based on the value of other
        /// fields, and may be sent on update and delete requests to ensure the
        /// client has an up-to-date value before proceeding.
        /// Allows clients to perform consistent read-modify-writes
        /// through optimistic concurrency control.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("fleets")]
        private InputList<Inputs.VMwareClusterFleetGetArgs>? _fleets;

        /// <summary>
        /// Fleet configuration for the cluster.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.VMwareClusterFleetGetArgs> Fleets
        {
            get => _fleets ?? (_fleets = new InputList<Inputs.VMwareClusterFleetGetArgs>());
            set => _fleets = value;
        }

        /// <summary>
        /// Load Balancer configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("loadBalancer")]
        public Input<Inputs.VMwareClusterLoadBalancerGetArgs>? LoadBalancer { get; set; }

        /// <summary>
        /// The object name of the VMware OnPremUserCluster custom resource on the
        /// associated admin cluster. This field is used to support conflicting
        /// names when enrolling existing clusters to the API. When used as a part of
        /// cluster enrollment, this field will differ from the ID in the resource
        /// name. For new clusters, this field will match the user provided cluster ID
        /// and be visible in the last component of the resource name. It is not
        /// modifiable.
        /// All users should use this name to access their cluster using gkectl or
        /// kubectl and should expect to see the local name when viewing admin
        /// cluster controller logs.
        /// </summary>
        [Input("localName")]
        public Input<string>? LocalName { get; set; }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The VMware cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The VMware User Cluster network configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("networkConfig")]
        public Input<Inputs.VMwareClusterNetworkConfigGetArgs>? NetworkConfig { get; set; }

        /// <summary>
        /// The Anthos clusters on the VMware version for your user cluster.
        /// </summary>
        [Input("onPremVersion")]
        public Input<string>? OnPremVersion { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// If set, there are currently changes in flight to the VMware User Cluster.
        /// </summary>
        [Input("reconciling")]
        public Input<bool>? Reconciling { get; set; }

        /// <summary>
        /// (Output)
        /// The lifecycle state of the condition.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("statuses")]
        private InputList<Inputs.VMwareClusterStatusGetArgs>? _statuses;

        /// <summary>
        /// (Output)
        /// Specifies the detailed validation check status
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.VMwareClusterStatusGetArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.VMwareClusterStatusGetArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// Storage configuration.
        /// Structure is documented below.
        /// </summary>
        [Input("storage")]
        public Input<Inputs.VMwareClusterStorageGetArgs>? Storage { get; set; }

        /// <summary>
        /// The unique identifier of the VMware User Cluster.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The time at which VMware User Cluster was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        [Input("validationChecks")]
        private InputList<Inputs.VMwareClusterValidationCheckGetArgs>? _validationChecks;

        /// <summary>
        /// ValidationCheck represents the result of the preflight check job.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.VMwareClusterValidationCheckGetArgs> ValidationChecks
        {
            get => _validationChecks ?? (_validationChecks = new InputList<Inputs.VMwareClusterValidationCheckGetArgs>());
            set => _validationChecks = value;
        }

        [Input("vcenters")]
        private InputList<Inputs.VMwareClusterVcenterGetArgs>? _vcenters;

        /// <summary>
        /// VmwareVCenterConfig specifies vCenter config for the user cluster.
        /// Inherited from the admin cluster.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.VMwareClusterVcenterGetArgs> Vcenters
        {
            get => _vcenters ?? (_vcenters = new InputList<Inputs.VMwareClusterVcenterGetArgs>());
            set => _vcenters = value;
        }

        /// <summary>
        /// Enable VM tracking.
        /// </summary>
        [Input("vmTrackingEnabled")]
        public Input<bool>? VmTrackingEnabled { get; set; }

        public VMwareClusterState()
        {
        }
        public static new VMwareClusterState Empty => new VMwareClusterState();
    }
}
