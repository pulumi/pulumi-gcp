// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Chronicle
{
    /// <summary>
    /// Reference lists are user-defined lists of values which users can use in multiple Rules.
    /// 
    /// To get more information about ReferenceList, see:
    /// 
    /// * [API documentation](https://cloud.google.com/chronicle/docs/reference/rest/v1/projects.locations.instances.referenceLists)
    /// * How-to Guides
    ///     * [Google SecOps Guides](https://cloud.google.com/chronicle/docs/secops/secops-overview)
    /// 
    /// ## Example Usage
    /// 
    /// ### Chronicle Referencelist Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testScope = new Gcp.Chronicle.DataAccessScope("test_scope", new()
    ///     {
    ///         Location = "us",
    ///         Instance = "00000000-0000-0000-0000-000000000000",
    ///         DataAccessScopeId = "scope-id",
    ///         Description = "test scope description",
    ///         AllowedDataAccessLabels = new[]
    ///         {
    ///             new Gcp.Chronicle.Inputs.DataAccessScopeAllowedDataAccessLabelArgs
    ///             {
    ///                 LogType = "GCP_CLOUDAUDIT",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.Chronicle.ReferenceList("example", new()
    ///     {
    ///         Location = "us",
    ///         Instance = "00000000-0000-0000-0000-000000000000",
    ///         ReferenceListId = "reference_list_id",
    ///         Description = "referencelist-description",
    ///         Entries = new[]
    ///         {
    ///             new Gcp.Chronicle.Inputs.ReferenceListEntryArgs
    ///             {
    ///                 Value = "referencelist-entry-value",
    ///             },
    ///         },
    ///         SyntaxType = "REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING",
    ///         ScopeInfos = new[]
    ///         {
    ///             new Gcp.Chronicle.Inputs.ReferenceListScopeInfoArgs
    ///             {
    ///                 ReferenceListScope = new Gcp.Chronicle.Inputs.ReferenceListScopeInfoReferenceListScopeArgs
    ///                 {
    ///                     ScopeNames = new[]
    ///                     {
    ///                         testScope.Name,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ReferenceList can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/instances/{{instance}}/referenceLists/{{reference_list_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{instance}}/{{reference_list_id}}`
    /// 
    /// * `{{location}}/{{instance}}/{{reference_list_id}}`
    /// 
    /// When using the `pulumi import` command, ReferenceList can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:chronicle/referenceList:ReferenceList default projects/{{project}}/locations/{{location}}/instances/{{instance}}/referenceLists/{{reference_list_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:chronicle/referenceList:ReferenceList default {{project}}/{{location}}/{{instance}}/{{reference_list_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:chronicle/referenceList:ReferenceList default {{location}}/{{instance}}/{{reference_list_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:chronicle/referenceList:ReferenceList")]
    public partial class ReferenceList : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Required. A user-provided description of the reference list.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Output only. The unique display name of the reference list.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Required. The entries of the reference list.
        /// When listed, they are returned in the order that was specified at creation
        /// or update. The combined size of the values of the reference list may not
        /// exceed 6MB.
        /// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
        /// Structure is documented below.
        /// </summary>
        [Output("entries")]
        public Output<ImmutableArray<Outputs.ReferenceListEntry>> Entries { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the Chronicle instance, which is the same as the customer ID.
        /// </summary>
        [Output("instance")]
        public Output<string> Instance { get; private set; } = null!;

        /// <summary>
        /// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Output only. The resource name of the reference list.
        /// Format:
        /// projects/{project}/locations/{location}/instances/{instance}/referenceLists/{reference_list}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Required. The ID to use for the reference list. This is also the display name for
        /// the reference list. It must satisfy the following requirements:
        /// - Starts with letter.
        /// - Contains only letters, numbers and underscore.
        /// - Has length &lt; 256.
        /// - Must be unique.
        /// </summary>
        [Output("referenceListId")]
        public Output<string> ReferenceListId { get; private set; } = null!;

        /// <summary>
        /// Output only. The timestamp when the reference list was last updated.
        /// </summary>
        [Output("revisionCreateTime")]
        public Output<string> RevisionCreateTime { get; private set; } = null!;

        /// <summary>
        /// Output only. The count of self-authored rules using the reference list.
        /// </summary>
        [Output("ruleAssociationsCount")]
        public Output<int> RuleAssociationsCount { get; private set; } = null!;

        /// <summary>
        /// Output only. The resource names for the associated self-authored Rules that use this
        /// reference list.
        /// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<string>> Rules { get; private set; } = null!;

        /// <summary>
        /// ScopeInfo specifies the scope info of the reference list.
        /// Structure is documented below.
        /// </summary>
        [Output("scopeInfos")]
        public Output<ImmutableArray<Outputs.ReferenceListScopeInfo>> ScopeInfos { get; private set; } = null!;

        /// <summary>
        /// Possible values:
        /// REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
        /// REFERENCE_LIST_SYNTAX_TYPE_REGEX
        /// REFERENCE_LIST_SYNTAX_TYPE_CIDR
        /// </summary>
        [Output("syntaxType")]
        public Output<string> SyntaxType { get; private set; } = null!;


        /// <summary>
        /// Create a ReferenceList resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReferenceList(string name, ReferenceListArgs args, CustomResourceOptions? options = null)
            : base("gcp:chronicle/referenceList:ReferenceList", name, args ?? new ReferenceListArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReferenceList(string name, Input<string> id, ReferenceListState? state = null, CustomResourceOptions? options = null)
            : base("gcp:chronicle/referenceList:ReferenceList", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReferenceList resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReferenceList Get(string name, Input<string> id, ReferenceListState? state = null, CustomResourceOptions? options = null)
        {
            return new ReferenceList(name, id, state, options);
        }
    }

    public sealed class ReferenceListArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. A user-provided description of the reference list.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("entries", required: true)]
        private InputList<Inputs.ReferenceListEntryArgs>? _entries;

        /// <summary>
        /// Required. The entries of the reference list.
        /// When listed, they are returned in the order that was specified at creation
        /// or update. The combined size of the values of the reference list may not
        /// exceed 6MB.
        /// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ReferenceListEntryArgs> Entries
        {
            get => _entries ?? (_entries = new InputList<Inputs.ReferenceListEntryArgs>());
            set => _entries = value;
        }

        /// <summary>
        /// The unique identifier for the Chronicle instance, which is the same as the customer ID.
        /// </summary>
        [Input("instance", required: true)]
        public Input<string> Instance { get; set; } = null!;

        /// <summary>
        /// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Required. The ID to use for the reference list. This is also the display name for
        /// the reference list. It must satisfy the following requirements:
        /// - Starts with letter.
        /// - Contains only letters, numbers and underscore.
        /// - Has length &lt; 256.
        /// - Must be unique.
        /// </summary>
        [Input("referenceListId", required: true)]
        public Input<string> ReferenceListId { get; set; } = null!;

        [Input("scopeInfos")]
        private InputList<Inputs.ReferenceListScopeInfoArgs>? _scopeInfos;

        /// <summary>
        /// ScopeInfo specifies the scope info of the reference list.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ReferenceListScopeInfoArgs> ScopeInfos
        {
            get => _scopeInfos ?? (_scopeInfos = new InputList<Inputs.ReferenceListScopeInfoArgs>());
            set => _scopeInfos = value;
        }

        /// <summary>
        /// Possible values:
        /// REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
        /// REFERENCE_LIST_SYNTAX_TYPE_REGEX
        /// REFERENCE_LIST_SYNTAX_TYPE_CIDR
        /// </summary>
        [Input("syntaxType", required: true)]
        public Input<string> SyntaxType { get; set; } = null!;

        public ReferenceListArgs()
        {
        }
        public static new ReferenceListArgs Empty => new ReferenceListArgs();
    }

    public sealed class ReferenceListState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. A user-provided description of the reference list.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Output only. The unique display name of the reference list.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("entries")]
        private InputList<Inputs.ReferenceListEntryGetArgs>? _entries;

        /// <summary>
        /// Required. The entries of the reference list.
        /// When listed, they are returned in the order that was specified at creation
        /// or update. The combined size of the values of the reference list may not
        /// exceed 6MB.
        /// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ReferenceListEntryGetArgs> Entries
        {
            get => _entries ?? (_entries = new InputList<Inputs.ReferenceListEntryGetArgs>());
            set => _entries = value;
        }

        /// <summary>
        /// The unique identifier for the Chronicle instance, which is the same as the customer ID.
        /// </summary>
        [Input("instance")]
        public Input<string>? Instance { get; set; }

        /// <summary>
        /// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Output only. The resource name of the reference list.
        /// Format:
        /// projects/{project}/locations/{location}/instances/{instance}/referenceLists/{reference_list}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Required. The ID to use for the reference list. This is also the display name for
        /// the reference list. It must satisfy the following requirements:
        /// - Starts with letter.
        /// - Contains only letters, numbers and underscore.
        /// - Has length &lt; 256.
        /// - Must be unique.
        /// </summary>
        [Input("referenceListId")]
        public Input<string>? ReferenceListId { get; set; }

        /// <summary>
        /// Output only. The timestamp when the reference list was last updated.
        /// </summary>
        [Input("revisionCreateTime")]
        public Input<string>? RevisionCreateTime { get; set; }

        /// <summary>
        /// Output only. The count of self-authored rules using the reference list.
        /// </summary>
        [Input("ruleAssociationsCount")]
        public Input<int>? RuleAssociationsCount { get; set; }

        [Input("rules")]
        private InputList<string>? _rules;

        /// <summary>
        /// Output only. The resource names for the associated self-authored Rules that use this
        /// reference list.
        /// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
        /// </summary>
        public InputList<string> Rules
        {
            get => _rules ?? (_rules = new InputList<string>());
            set => _rules = value;
        }

        [Input("scopeInfos")]
        private InputList<Inputs.ReferenceListScopeInfoGetArgs>? _scopeInfos;

        /// <summary>
        /// ScopeInfo specifies the scope info of the reference list.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.ReferenceListScopeInfoGetArgs> ScopeInfos
        {
            get => _scopeInfos ?? (_scopeInfos = new InputList<Inputs.ReferenceListScopeInfoGetArgs>());
            set => _scopeInfos = value;
        }

        /// <summary>
        /// Possible values:
        /// REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
        /// REFERENCE_LIST_SYNTAX_TYPE_REGEX
        /// REFERENCE_LIST_SYNTAX_TYPE_CIDR
        /// </summary>
        [Input("syntaxType")]
        public Input<string>? SyntaxType { get; set; }

        public ReferenceListState()
        {
        }
        public static new ReferenceListState Empty => new ReferenceListState();
    }
}
