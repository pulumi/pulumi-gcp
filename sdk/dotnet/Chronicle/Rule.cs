// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Chronicle
{
    /// <summary>
    /// The Rule resource represents a user-created rule.
    /// 
    /// To get more information about Rule, see:
    /// 
    /// * [API documentation](https://cloud.google.com/chronicle/docs/reference/rest/v1/projects.locations.instances.rules)
    /// * How-to Guides
    ///     * [Google SecOps Guides](https://cloud.google.com/chronicle/docs/secops/secops-overview)
    /// 
    /// ## Example Usage
    /// 
    /// ### Chronicle Rule Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.Chronicle.Rule("example", new()
    ///     {
    ///         Location = "us",
    ///         Instance = "00000000-0000-0000-0000-000000000000",
    ///         DeletionPolicy = "DEFAULT",
    ///         Text = @"rule test_rule { meta: events:  $userid = $e.principal.user.userid  match: $userid over 10m condition: $e }
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Chronicle Rule With Force Deletion
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Gcp.Chronicle.Rule("example", new()
    ///     {
    ///         Location = "us",
    ///         Instance = "00000000-0000-0000-0000-000000000000",
    ///         DeletionPolicy = "FORCE",
    ///         Text = @"rule test_rule { meta: events:  $userid = $e.principal.user.userid  match: $userid over 10m condition: $e }
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Chronicle Rule With Data Access Scope
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dataAccessScopeTest = new Gcp.Chronicle.DataAccessScope("data_access_scope_test", new()
    ///     {
    ///         Location = "us",
    ///         Instance = "00000000-0000-0000-0000-000000000000",
    ///         DataAccessScopeId = "scope-name",
    ///         Description = "scope-description",
    ///         AllowedDataAccessLabels = new[]
    ///         {
    ///             new Gcp.Chronicle.Inputs.DataAccessScopeAllowedDataAccessLabelArgs
    ///             {
    ///                 LogType = "GCP_CLOUDAUDIT",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var example = new Gcp.Chronicle.Rule("example", new()
    ///     {
    ///         Location = "us",
    ///         Instance = "00000000-0000-0000-0000-000000000000",
    ///         Scope = googleChronicleDataAccessScope.DataAccessScopeTest.Name,
    ///         Text = @"rule test_rule { meta: events:  $userid = $e.principal.user.userid  match: $userid over 10m condition: $e }
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Rule can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule_id}}`
    /// 
    /// * `{{project}}/{{location}}/{{instance}}/{{rule_id}}`
    /// 
    /// * `{{location}}/{{instance}}/{{rule_id}}`
    /// 
    /// When using the `pulumi import` command, Rule can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:chronicle/rule:Rule default projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:chronicle/rule:Rule default {{project}}/{{location}}/{{instance}}/{{rule_id}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:chronicle/rule:Rule default {{location}}/{{instance}}/{{rule_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:chronicle/rule:Rule")]
    public partial class Rule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Output only. The run frequencies that are allowed for the rule.
        /// Populated in BASIC view and FULL view.
        /// </summary>
        [Output("allowedRunFrequencies")]
        public Output<ImmutableArray<string>> AllowedRunFrequencies { get; private set; } = null!;

        /// <summary>
        /// Output only. The author of the rule. Extracted from the meta section of text.
        /// Populated in BASIC view and FULL view.
        /// </summary>
        [Output("author")]
        public Output<string> Author { get; private set; } = null!;

        /// <summary>
        /// Output only. A list of a rule's corresponding compilation diagnostic messages
        /// such as compilation errors and compilation warnings.
        /// Populated in FULL view.
        /// Structure is documented below.
        /// </summary>
        [Output("compilationDiagnostics")]
        public Output<ImmutableArray<Outputs.RuleCompilationDiagnostic>> CompilationDiagnostics { get; private set; } = null!;

        /// <summary>
        /// Output only. The current compilation state of the rule.
        /// Populated in FULL view.
        /// Possible values:
        /// COMPILATION_STATE_UNSPECIFIED
        /// SUCCEEDED
        /// FAILED
        /// </summary>
        [Output("compilationState")]
        public Output<string> CompilationState { get; private set; } = null!;

        /// <summary>
        /// Output only. The timestamp of when the rule was created.
        /// Populated in FULL view.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Output only. Resource names of the data tables used in this rule.
        /// </summary>
        [Output("dataTables")]
        public Output<ImmutableArray<string>> DataTables { get; private set; } = null!;

        /// <summary>
        /// Policy to determine if the rule should be deleted forcefully.
        /// If DeletionPolicy = "FORCE", any retrohunts and any detections associated with the rule
        /// will also be deleted. If DeletionPolicy = "DEFAULT", the call will only succeed if the
        /// rule has no associated retrohunts, including completed retrohunts, and no
        /// associated detections. Regardless of this field's value, the rule
        /// deployment associated with this rule will also be deleted.
        /// Possible values: DEFAULT, FORCE
        /// </summary>
        [Output("deletionPolicy")]
        public Output<string?> DeletionPolicy { get; private set; } = null!;

        /// <summary>
        /// The display name of the severity level. Extracted from the meta section of
        /// the rule text.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The etag for this rule.
        /// If this is provided on update, the request will succeed if and only if it
        /// matches the server-computed value, and will fail with an ABORTED error
        /// otherwise.
        /// Populated in BASIC view and FULL view.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the Chronicle instance, which is the same as the customer ID.
        /// </summary>
        [Output("instance")]
        public Output<string> Instance { get; private set; } = null!;

        /// <summary>
        /// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Output only. Additional metadata specified in the meta section of text.
        /// Populated in FULL view.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>> Metadata { get; private set; } = null!;

        /// <summary>
        /// Full resource name for the rule. This unique identifier is generated using values provided for the URL parameters.
        /// Format:
        /// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Output only. Indicate the rule can run in near real time live rule.
        /// If this is true, the rule uses the near real time live rule when the run
        /// frequency is set to LIVE.
        /// </summary>
        [Output("nearRealTimeLiveRuleEligible")]
        public Output<bool> NearRealTimeLiveRuleEligible { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Output only. Resource names of the reference lists used in this rule.
        /// Populated in FULL view.
        /// </summary>
        [Output("referenceLists")]
        public Output<ImmutableArray<string>> ReferenceLists { get; private set; } = null!;

        /// <summary>
        /// Output only. The timestamp of when the rule revision was created.
        /// Populated in FULL, REVISION_METADATA_ONLY views.
        /// </summary>
        [Output("revisionCreateTime")]
        public Output<string> RevisionCreateTime { get; private set; } = null!;

        /// <summary>
        /// Output only. The revision ID of the rule.
        /// A new revision is created whenever the rule text is changed in any way.
        /// Format: v_{10 digits}_{9 digits}
        /// Populated in REVISION_METADATA_ONLY view and FULL view.
        /// </summary>
        [Output("revisionId")]
        public Output<string> RevisionId { get; private set; } = null!;

        /// <summary>
        /// Rule Id is the ID of the Rule.
        /// </summary>
        [Output("ruleId")]
        public Output<string> RuleId { get; private set; } = null!;

        /// <summary>
        /// Resource name of the DataAccessScope bound to this rule.
        /// Populated in BASIC view and FULL view.
        /// If reference lists are used in the rule, validations will be performed
        /// against this scope to ensure that the reference lists are compatible with
        /// both the user's and the rule's scopes.
        /// The scope should be in the format:
        /// "projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}".
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// (Output)
        /// Output only. The severity of a rule's compilation diagnostic.
        /// Possible values:
        /// SEVERITY_UNSPECIFIED
        /// WARNING
        /// ERROR
        /// </summary>
        [Output("severities")]
        public Output<ImmutableArray<Outputs.RuleSeverity>> Severities { get; private set; } = null!;

        /// <summary>
        /// The YARA-L content of the rule.
        /// Populated in FULL view.
        /// </summary>
        [Output("text")]
        public Output<string?> Text { get; private set; } = null!;

        /// <summary>
        /// Possible values:
        /// RULE_TYPE_UNSPECIFIED
        /// SINGLE_EVENT
        /// MULTI_EVENT
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Rule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Rule(string name, RuleArgs args, CustomResourceOptions? options = null)
            : base("gcp:chronicle/rule:Rule", name, args ?? new RuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Rule(string name, Input<string> id, RuleState? state = null, CustomResourceOptions? options = null)
            : base("gcp:chronicle/rule:Rule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Rule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Rule Get(string name, Input<string> id, RuleState? state = null, CustomResourceOptions? options = null)
        {
            return new Rule(name, id, state, options);
        }
    }

    public sealed class RuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Policy to determine if the rule should be deleted forcefully.
        /// If DeletionPolicy = "FORCE", any retrohunts and any detections associated with the rule
        /// will also be deleted. If DeletionPolicy = "DEFAULT", the call will only succeed if the
        /// rule has no associated retrohunts, including completed retrohunts, and no
        /// associated detections. Regardless of this field's value, the rule
        /// deployment associated with this rule will also be deleted.
        /// Possible values: DEFAULT, FORCE
        /// </summary>
        [Input("deletionPolicy")]
        public Input<string>? DeletionPolicy { get; set; }

        /// <summary>
        /// The etag for this rule.
        /// If this is provided on update, the request will succeed if and only if it
        /// matches the server-computed value, and will fail with an ABORTED error
        /// otherwise.
        /// Populated in BASIC view and FULL view.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The unique identifier for the Chronicle instance, which is the same as the customer ID.
        /// </summary>
        [Input("instance", required: true)]
        public Input<string> Instance { get; set; } = null!;

        /// <summary>
        /// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Rule Id is the ID of the Rule.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        /// <summary>
        /// Resource name of the DataAccessScope bound to this rule.
        /// Populated in BASIC view and FULL view.
        /// If reference lists are used in the rule, validations will be performed
        /// against this scope to ensure that the reference lists are compatible with
        /// both the user's and the rule's scopes.
        /// The scope should be in the format:
        /// "projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}".
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The YARA-L content of the rule.
        /// Populated in FULL view.
        /// </summary>
        [Input("text")]
        public Input<string>? Text { get; set; }

        public RuleArgs()
        {
        }
        public static new RuleArgs Empty => new RuleArgs();
    }

    public sealed class RuleState : global::Pulumi.ResourceArgs
    {
        [Input("allowedRunFrequencies")]
        private InputList<string>? _allowedRunFrequencies;

        /// <summary>
        /// Output only. The run frequencies that are allowed for the rule.
        /// Populated in BASIC view and FULL view.
        /// </summary>
        public InputList<string> AllowedRunFrequencies
        {
            get => _allowedRunFrequencies ?? (_allowedRunFrequencies = new InputList<string>());
            set => _allowedRunFrequencies = value;
        }

        /// <summary>
        /// Output only. The author of the rule. Extracted from the meta section of text.
        /// Populated in BASIC view and FULL view.
        /// </summary>
        [Input("author")]
        public Input<string>? Author { get; set; }

        [Input("compilationDiagnostics")]
        private InputList<Inputs.RuleCompilationDiagnosticGetArgs>? _compilationDiagnostics;

        /// <summary>
        /// Output only. A list of a rule's corresponding compilation diagnostic messages
        /// such as compilation errors and compilation warnings.
        /// Populated in FULL view.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RuleCompilationDiagnosticGetArgs> CompilationDiagnostics
        {
            get => _compilationDiagnostics ?? (_compilationDiagnostics = new InputList<Inputs.RuleCompilationDiagnosticGetArgs>());
            set => _compilationDiagnostics = value;
        }

        /// <summary>
        /// Output only. The current compilation state of the rule.
        /// Populated in FULL view.
        /// Possible values:
        /// COMPILATION_STATE_UNSPECIFIED
        /// SUCCEEDED
        /// FAILED
        /// </summary>
        [Input("compilationState")]
        public Input<string>? CompilationState { get; set; }

        /// <summary>
        /// Output only. The timestamp of when the rule was created.
        /// Populated in FULL view.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("dataTables")]
        private InputList<string>? _dataTables;

        /// <summary>
        /// Output only. Resource names of the data tables used in this rule.
        /// </summary>
        public InputList<string> DataTables
        {
            get => _dataTables ?? (_dataTables = new InputList<string>());
            set => _dataTables = value;
        }

        /// <summary>
        /// Policy to determine if the rule should be deleted forcefully.
        /// If DeletionPolicy = "FORCE", any retrohunts and any detections associated with the rule
        /// will also be deleted. If DeletionPolicy = "DEFAULT", the call will only succeed if the
        /// rule has no associated retrohunts, including completed retrohunts, and no
        /// associated detections. Regardless of this field's value, the rule
        /// deployment associated with this rule will also be deleted.
        /// Possible values: DEFAULT, FORCE
        /// </summary>
        [Input("deletionPolicy")]
        public Input<string>? DeletionPolicy { get; set; }

        /// <summary>
        /// The display name of the severity level. Extracted from the meta section of
        /// the rule text.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The etag for this rule.
        /// If this is provided on update, the request will succeed if and only if it
        /// matches the server-computed value, and will fail with an ABORTED error
        /// otherwise.
        /// Populated in BASIC view and FULL view.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The unique identifier for the Chronicle instance, which is the same as the customer ID.
        /// </summary>
        [Input("instance")]
        public Input<string>? Instance { get; set; }

        /// <summary>
        /// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Output only. Additional metadata specified in the meta section of text.
        /// Populated in FULL view.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Full resource name for the rule. This unique identifier is generated using values provided for the URL parameters.
        /// Format:
        /// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Output only. Indicate the rule can run in near real time live rule.
        /// If this is true, the rule uses the near real time live rule when the run
        /// frequency is set to LIVE.
        /// </summary>
        [Input("nearRealTimeLiveRuleEligible")]
        public Input<bool>? NearRealTimeLiveRuleEligible { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("referenceLists")]
        private InputList<string>? _referenceLists;

        /// <summary>
        /// Output only. Resource names of the reference lists used in this rule.
        /// Populated in FULL view.
        /// </summary>
        public InputList<string> ReferenceLists
        {
            get => _referenceLists ?? (_referenceLists = new InputList<string>());
            set => _referenceLists = value;
        }

        /// <summary>
        /// Output only. The timestamp of when the rule revision was created.
        /// Populated in FULL, REVISION_METADATA_ONLY views.
        /// </summary>
        [Input("revisionCreateTime")]
        public Input<string>? RevisionCreateTime { get; set; }

        /// <summary>
        /// Output only. The revision ID of the rule.
        /// A new revision is created whenever the rule text is changed in any way.
        /// Format: v_{10 digits}_{9 digits}
        /// Populated in REVISION_METADATA_ONLY view and FULL view.
        /// </summary>
        [Input("revisionId")]
        public Input<string>? RevisionId { get; set; }

        /// <summary>
        /// Rule Id is the ID of the Rule.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        /// <summary>
        /// Resource name of the DataAccessScope bound to this rule.
        /// Populated in BASIC view and FULL view.
        /// If reference lists are used in the rule, validations will be performed
        /// against this scope to ensure that the reference lists are compatible with
        /// both the user's and the rule's scopes.
        /// The scope should be in the format:
        /// "projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}".
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        [Input("severities")]
        private InputList<Inputs.RuleSeverityGetArgs>? _severities;

        /// <summary>
        /// (Output)
        /// Output only. The severity of a rule's compilation diagnostic.
        /// Possible values:
        /// SEVERITY_UNSPECIFIED
        /// WARNING
        /// ERROR
        /// </summary>
        public InputList<Inputs.RuleSeverityGetArgs> Severities
        {
            get => _severities ?? (_severities = new InputList<Inputs.RuleSeverityGetArgs>());
            set => _severities = value;
        }

        /// <summary>
        /// The YARA-L content of the rule.
        /// Populated in FULL view.
        /// </summary>
        [Input("text")]
        public Input<string>? Text { get; set; }

        /// <summary>
        /// Possible values:
        /// RULE_TYPE_UNSPECIFIED
        /// SINGLE_EVENT
        /// MULTI_EVENT
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public RuleState()
        {
        }
        public static new RuleState Empty => new RuleState();
    }
}
