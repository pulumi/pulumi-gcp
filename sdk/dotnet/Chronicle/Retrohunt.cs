// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Chronicle
{
    /// <summary>
    /// Retrohunt is an execution of a Rule over a time range in the past.
    /// 
    /// To get more information about Retrohunt, see:
    /// 
    /// * [API documentation](https://cloud.google.com/chronicle/docs/reference/rest/v1/projects.locations.instances.rules.retrohunts)
    /// * How-to Guides
    ///     * [Google SecOps Guides](https://cloud.google.com/chronicle/docs/secops/secops-overview)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Retrohunt can be imported using any of these accepted formats:
    /// 
    /// * `projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule}}/retrohunts/{{retrohunt}}`
    /// 
    /// * `{{project}}/{{location}}/{{instance}}/{{rule}}/{{retrohunt}}`
    /// 
    /// * `{{location}}/{{instance}}/{{rule}}/{{retrohunt}}`
    /// 
    /// When using the `pulumi import` command, Retrohunt can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:chronicle/retrohunt:Retrohunt default projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule}}/retrohunts/{{retrohunt}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:chronicle/retrohunt:Retrohunt default {{project}}/{{location}}/{{instance}}/{{rule}}/{{retrohunt}}
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gcp:chronicle/retrohunt:Retrohunt default {{location}}/{{instance}}/{{rule}}/{{retrohunt}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:chronicle/retrohunt:Retrohunt")]
    public partial class Retrohunt : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
        /// </summary>
        [Output("RetrohuntId")]
        public Output<string> RetrohuntId { get; private set; } = null!;

        /// <summary>
        /// Represents a time interval, encoded as a Timestamp start (inclusive) and a
        /// Timestamp end (exclusive).
        /// The start must be less than or equal to the end.
        /// When the start equals the end, the interval is empty (matches no time).
        /// When both start and end are unspecified, the interval matches any time.
        /// Structure is documented below.
        /// </summary>
        [Output("executionIntervals")]
        public Output<ImmutableArray<Outputs.RetrohuntExecutionInterval>> ExecutionIntervals { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the Chronicle instance, which is the same as the customer ID.
        /// </summary>
        [Output("instance")]
        public Output<string> Instance { get; private set; } = null!;

        /// <summary>
        /// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the retrohunt.
        /// Retrohunt is the child of a rule revision. {rule} in the format below is
        /// structured as {rule_id@revision_id}.
        /// Format:
        /// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Represents a time interval, encoded as a Timestamp start (inclusive) and a
        /// Timestamp end (exclusive).
        /// The start must be less than or equal to the end.
        /// When the start equals the end, the interval is empty (matches no time).
        /// When both start and end are unspecified, the interval matches any time.
        /// Structure is documented below.
        /// </summary>
        [Output("processInterval")]
        public Output<Outputs.RetrohuntProcessInterval> ProcessInterval { get; private set; } = null!;

        /// <summary>
        /// Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
        /// </summary>
        [Output("progressPercentage")]
        public Output<double> ProgressPercentage { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The Rule ID of the rule.
        /// </summary>
        [Output("rule")]
        public Output<string> Rule { get; private set; } = null!;

        /// <summary>
        /// Output only. The state of the retrohunt.
        /// Possible values:
        /// RUNNING
        /// DONE
        /// CANCELLED
        /// FAILED
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a Retrohunt resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Retrohunt(string name, RetrohuntArgs args, CustomResourceOptions? options = null)
            : base("gcp:chronicle/retrohunt:Retrohunt", name, args ?? new RetrohuntArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Retrohunt(string name, Input<string> id, RetrohuntState? state = null, CustomResourceOptions? options = null)
            : base("gcp:chronicle/retrohunt:Retrohunt", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Retrohunt resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Retrohunt Get(string name, Input<string> id, RetrohuntState? state = null, CustomResourceOptions? options = null)
        {
            return new Retrohunt(name, id, state, options);
        }
    }

    public sealed class RetrohuntArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
        /// </summary>
        [Input("RetrohuntId")]
        public Input<string>? RetrohuntId { get; set; }

        /// <summary>
        /// The unique identifier for the Chronicle instance, which is the same as the customer ID.
        /// </summary>
        [Input("instance", required: true)]
        public Input<string> Instance { get; set; } = null!;

        /// <summary>
        /// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Represents a time interval, encoded as a Timestamp start (inclusive) and a
        /// Timestamp end (exclusive).
        /// The start must be less than or equal to the end.
        /// When the start equals the end, the interval is empty (matches no time).
        /// When both start and end are unspecified, the interval matches any time.
        /// Structure is documented below.
        /// </summary>
        [Input("processInterval", required: true)]
        public Input<Inputs.RetrohuntProcessIntervalArgs> ProcessInterval { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Rule ID of the rule.
        /// </summary>
        [Input("rule", required: true)]
        public Input<string> Rule { get; set; } = null!;

        public RetrohuntArgs()
        {
        }
        public static new RetrohuntArgs Empty => new RetrohuntArgs();
    }

    public sealed class RetrohuntState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
        /// </summary>
        [Input("RetrohuntId")]
        public Input<string>? RetrohuntId { get; set; }

        [Input("executionIntervals")]
        private InputList<Inputs.RetrohuntExecutionIntervalGetArgs>? _executionIntervals;

        /// <summary>
        /// Represents a time interval, encoded as a Timestamp start (inclusive) and a
        /// Timestamp end (exclusive).
        /// The start must be less than or equal to the end.
        /// When the start equals the end, the interval is empty (matches no time).
        /// When both start and end are unspecified, the interval matches any time.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.RetrohuntExecutionIntervalGetArgs> ExecutionIntervals
        {
            get => _executionIntervals ?? (_executionIntervals = new InputList<Inputs.RetrohuntExecutionIntervalGetArgs>());
            set => _executionIntervals = value;
        }

        /// <summary>
        /// The unique identifier for the Chronicle instance, which is the same as the customer ID.
        /// </summary>
        [Input("instance")]
        public Input<string>? Instance { get; set; }

        /// <summary>
        /// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the retrohunt.
        /// Retrohunt is the child of a rule revision. {rule} in the format below is
        /// structured as {rule_id@revision_id}.
        /// Format:
        /// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Represents a time interval, encoded as a Timestamp start (inclusive) and a
        /// Timestamp end (exclusive).
        /// The start must be less than or equal to the end.
        /// When the start equals the end, the interval is empty (matches no time).
        /// When both start and end are unspecified, the interval matches any time.
        /// Structure is documented below.
        /// </summary>
        [Input("processInterval")]
        public Input<Inputs.RetrohuntProcessIntervalGetArgs>? ProcessInterval { get; set; }

        /// <summary>
        /// Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
        /// </summary>
        [Input("progressPercentage")]
        public Input<double>? ProgressPercentage { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The Rule ID of the rule.
        /// </summary>
        [Input("rule")]
        public Input<string>? Rule { get; set; }

        /// <summary>
        /// Output only. The state of the retrohunt.
        /// Possible values:
        /// RUNNING
        /// DONE
        /// CANCELLED
        /// FAILED
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public RetrohuntState()
        {
        }
        public static new RetrohuntState Empty => new RetrohuntState();
    }
}
