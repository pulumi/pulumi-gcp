// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.SecurityPosture
{
    /// <summary>
    /// A Posture represents a collection of policy set including its name, state, description
    /// and policy sets. A policy set includes set of policies along with their definition.
    /// A posture can be created at the organization level.
    /// Every update to a deployed posture creates a new posture revision with an updated revision_id.
    /// 
    /// To get more information about Posture, see:
    /// 
    /// * How-to Guides
    ///     * [Create and deploy a posture](https://cloud.google.com/security-command-center/docs/how-to-use-security-posture)
    /// 
    /// ## Example Usage
    /// ### Securityposture Posture Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var posture1 = new Gcp.SecurityPosture.Posture("posture1", new()
    ///     {
    ///         PostureId = "posture_1",
    ///         Parent = "organizations/123456789",
    ///         Location = "global",
    ///         State = "ACTIVE",
    ///         Description = "a new posture",
    ///         PolicySets = new[]
    ///         {
    ///             new Gcp.SecurityPosture.Inputs.PosturePolicySetArgs
    ///             {
    ///                 PolicySetId = "org_policy_set",
    ///                 Description = "set of org policies",
    ///                 Policies = new[]
    ///                 {
    ///                     new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyArgs
    ///                     {
    ///                         PolicyId = "canned_org_policy",
    ///                         Constraint = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintArgs
    ///                         {
    ///                             OrgPolicyConstraint = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintArgs
    ///                             {
    ///                                 CannedConstraintId = "storage.uniformBucketLevelAccess",
    ///                                 PolicyRules = new[]
    ///                                 {
    ///                                     new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleArgs
    ///                                     {
    ///                                         Enforce = true,
    ///                                         Condition = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleConditionArgs
    ///                                         {
    ///                                             Description = "condition description",
    ///                                             Expression = "resource.matchTag('org_id/tag_key_short_name,'tag_value_short_name')",
    ///                                             Title = "a CEL condition",
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyArgs
    ///                     {
    ///                         PolicyId = "custom_org_policy",
    ///                         Constraint = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintArgs
    ///                         {
    ///                             OrgPolicyConstraintCustom = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomArgs
    ///                             {
    ///                                 CustomConstraint = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomCustomConstraintArgs
    ///                                 {
    ///                                     Name = "organizations/123456789/customConstraints/custom.disableGkeAutoUpgrade",
    ///                                     DisplayName = "Disable GKE auto upgrade",
    ///                                     Description = "Only allow GKE NodePool resource to be created or updated if AutoUpgrade is not enabled where this custom constraint is enforced.",
    ///                                     ActionType = "ALLOW",
    ///                                     Condition = "resource.management.autoUpgrade == false",
    ///                                     MethodTypes = new[]
    ///                                     {
    ///                                         "CREATE",
    ///                                         "UPDATE",
    ///                                     },
    ///                                     ResourceTypes = new[]
    ///                                     {
    ///                                         "container.googleapis.com/NodePool",
    ///                                     },
    ///                                 },
    ///                                 PolicyRules = new[]
    ///                                 {
    ///                                     new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs
    ///                                     {
    ///                                         Enforce = true,
    ///                                         Condition = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleConditionArgs
    ///                                         {
    ///                                             Description = "condition description",
    ///                                             Expression = "resource.matchTagId('tagKeys/key_id','tagValues/value_id')",
    ///                                             Title = "a CEL condition",
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Gcp.SecurityPosture.Inputs.PosturePolicySetArgs
    ///             {
    ///                 PolicySetId = "sha_policy_set",
    ///                 Description = "set of sha policies",
    ///                 Policies = new[]
    ///                 {
    ///                     new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyArgs
    ///                     {
    ///                         PolicyId = "sha_builtin_module",
    ///                         Constraint = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintArgs
    ///                         {
    ///                             SecurityHealthAnalyticsModule = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsModuleArgs
    ///                             {
    ///                                 ModuleName = "BIGQUERY_TABLE_CMEK_DISABLED",
    ///                                 ModuleEnablementState = "ENABLED",
    ///                             },
    ///                         },
    ///                         Description = "enable BIGQUERY_TABLE_CMEK_DISABLED",
    ///                     },
    ///                     new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyArgs
    ///                     {
    ///                         PolicyId = "sha_custom_module",
    ///                         Constraint = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintArgs
    ///                         {
    ///                             SecurityHealthAnalyticsCustomModule = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleArgs
    ///                             {
    ///                                 DisplayName = "custom_SHA_policy",
    ///                                 Config = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigArgs
    ///                                 {
    ///                                     Predicate = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigPredicateArgs
    ///                                     {
    ///                                         Expression = "resource.rotationPeriod &gt; duration('2592000s')",
    ///                                     },
    ///                                     CustomOutput = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputArgs
    ///                                     {
    ///                                         Properties = new[]
    ///                                         {
    ///                                             new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyArgs
    ///                                             {
    ///                                                 Name = "duration",
    ///                                                 ValueExpression = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyValueExpressionArgs
    ///                                                 {
    ///                                                     Expression = "resource.rotationPeriod",
    ///                                                 },
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                     ResourceSelector = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigResourceSelectorArgs
    ///                                     {
    ///                                         ResourceTypes = new[]
    ///                                         {
    ///                                             "cloudkms.googleapis.com/CryptoKey",
    ///                                         },
    ///                                     },
    ///                                     Severity = "LOW",
    ///                                     Description = "Custom Module",
    ///                                     Recommendation = "Testing custom modules",
    ///                                 },
    ///                                 ModuleEnablementState = "ENABLED",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Posture can be imported using any of these accepted formats:
    /// 
    ///  * `{{parent}}/locations/{{location}}/postures/{{posture_id}}`
    /// 
    ///  When using the `pulumi import` command, Posture can be imported using one of the formats above. For example:
    /// 
    /// ```sh
    /// $ pulumi import gcp:securityposture/posture:Posture default {{parent}}/locations/{{location}}/postures/{{posture_id}}
    /// ```
    /// </summary>
    [GcpResourceType("gcp:securityposture/posture:Posture")]
    public partial class Posture : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time the Posture was created in UTC.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Description of the expression
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// For Resource freshness validation (https://google.aip.dev/154)
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Location of the resource, eg: global.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Immutable. The name of the custom constraint. This is unique within the organization.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// List of policy sets for the posture.
        /// Structure is documented below.
        /// </summary>
        [Output("policySets")]
        public Output<ImmutableArray<Outputs.PosturePolicySet>> PolicySets { get; private set; } = null!;

        /// <summary>
        /// Id of the posture. It is an immutable field.
        /// </summary>
        [Output("postureId")]
        public Output<string> PostureId { get; private set; } = null!;

        /// <summary>
        /// If set, there are currently changes in flight to the posture.
        /// </summary>
        [Output("reconciling")]
        public Output<bool> Reconciling { get; private set; } = null!;

        /// <summary>
        /// Revision_id of the posture.
        /// </summary>
        [Output("revisionId")]
        public Output<string> RevisionId { get; private set; } = null!;

        /// <summary>
        /// State of the posture. Update to state field should not be triggered along with
        /// with other field updates.
        /// Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Time the Posture was updated in UTC.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Posture resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Posture(string name, PostureArgs args, CustomResourceOptions? options = null)
            : base("gcp:securityposture/posture:Posture", name, args ?? new PostureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Posture(string name, Input<string> id, PostureState? state = null, CustomResourceOptions? options = null)
            : base("gcp:securityposture/posture:Posture", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Posture resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Posture Get(string name, Input<string> id, PostureState? state = null, CustomResourceOptions? options = null)
        {
            return new Posture(name, id, state, options);
        }
    }

    public sealed class PostureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the expression
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Location of the resource, eg: global.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        [Input("policySets", required: true)]
        private InputList<Inputs.PosturePolicySetArgs>? _policySets;

        /// <summary>
        /// List of policy sets for the posture.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.PosturePolicySetArgs> PolicySets
        {
            get => _policySets ?? (_policySets = new InputList<Inputs.PosturePolicySetArgs>());
            set => _policySets = value;
        }

        /// <summary>
        /// Id of the posture. It is an immutable field.
        /// </summary>
        [Input("postureId", required: true)]
        public Input<string> PostureId { get; set; } = null!;

        /// <summary>
        /// State of the posture. Update to state field should not be triggered along with
        /// with other field updates.
        /// Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
        /// </summary>
        [Input("state", required: true)]
        public Input<string> State { get; set; } = null!;

        public PostureArgs()
        {
        }
        public static new PostureArgs Empty => new PostureArgs();
    }

    public sealed class PostureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time the Posture was created in UTC.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Description of the expression
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// For Resource freshness validation (https://google.aip.dev/154)
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Location of the resource, eg: global.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Immutable. The name of the custom constraint. This is unique within the organization.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("policySets")]
        private InputList<Inputs.PosturePolicySetGetArgs>? _policySets;

        /// <summary>
        /// List of policy sets for the posture.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.PosturePolicySetGetArgs> PolicySets
        {
            get => _policySets ?? (_policySets = new InputList<Inputs.PosturePolicySetGetArgs>());
            set => _policySets = value;
        }

        /// <summary>
        /// Id of the posture. It is an immutable field.
        /// </summary>
        [Input("postureId")]
        public Input<string>? PostureId { get; set; }

        /// <summary>
        /// If set, there are currently changes in flight to the posture.
        /// </summary>
        [Input("reconciling")]
        public Input<bool>? Reconciling { get; set; }

        /// <summary>
        /// Revision_id of the posture.
        /// </summary>
        [Input("revisionId")]
        public Input<string>? RevisionId { get; set; }

        /// <summary>
        /// State of the posture. Update to state field should not be triggered along with
        /// with other field updates.
        /// Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Time the Posture was updated in UTC.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public PostureState()
        {
        }
        public static new PostureState Empty => new PostureState();
    }
}
