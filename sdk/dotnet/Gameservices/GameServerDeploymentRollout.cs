// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.GameServices
{
    /// <summary>
    /// This represents the rollout state. This is part of the game server
    /// deployment.
    /// 
    /// To get more information about GameServerDeploymentRollout, see:
    /// 
    /// * [API documentation](https://cloud.google.com/game-servers/docs/reference/rest/v1beta/GameServerDeploymentRollout)
    /// * How-to Guides
    ///     * [Official Documentation](https://cloud.google.com/game-servers/docs)
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/game_services_game_server_deployment_rollout.html.markdown.
    /// </summary>
    public partial class GameServerDeploymentRollout : Pulumi.CustomResource
    {
        /// <summary>
        /// This field points to the game server config that is applied by default to all realms and clusters. For
        /// example, 'projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config'.
        /// </summary>
        [Output("defaultGameServerConfig")]
        public Output<string> DefaultGameServerConfig { get; private set; } = null!;

        /// <summary>
        /// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
        /// </summary>
        [Output("deploymentId")]
        public Output<string> DeploymentId { get; private set; } = null!;

        /// <summary>
        /// The game_server_config_overrides contains the per game server config overrides. The overrides are processed
        /// in the order they are listed. As soon as a match is found for a cluster, the rest of the list is not
        /// processed.
        /// </summary>
        [Output("gameServerConfigOverrides")]
        public Output<ImmutableArray<Outputs.GameServerDeploymentRolloutGameServerConfigOverrides>> GameServerConfigOverrides { get; private set; } = null!;

        /// <summary>
        /// The resource id of the game server deployment eg:
        /// 'projects/my-project/locations/global/gameServerDeployments/my-deployment/rollout'.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a GameServerDeploymentRollout resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GameServerDeploymentRollout(string name, GameServerDeploymentRolloutArgs args, CustomResourceOptions? options = null)
            : base("gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private GameServerDeploymentRollout(string name, Input<string> id, GameServerDeploymentRolloutState? state = null, CustomResourceOptions? options = null)
            : base("gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GameServerDeploymentRollout resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GameServerDeploymentRollout Get(string name, Input<string> id, GameServerDeploymentRolloutState? state = null, CustomResourceOptions? options = null)
        {
            return new GameServerDeploymentRollout(name, id, state, options);
        }
    }

    public sealed class GameServerDeploymentRolloutArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This field points to the game server config that is applied by default to all realms and clusters. For
        /// example, 'projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config'.
        /// </summary>
        [Input("defaultGameServerConfig", required: true)]
        public Input<string> DefaultGameServerConfig { get; set; } = null!;

        /// <summary>
        /// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
        /// </summary>
        [Input("deploymentId", required: true)]
        public Input<string> DeploymentId { get; set; } = null!;

        [Input("gameServerConfigOverrides")]
        private InputList<Inputs.GameServerDeploymentRolloutGameServerConfigOverridesArgs>? _gameServerConfigOverrides;

        /// <summary>
        /// The game_server_config_overrides contains the per game server config overrides. The overrides are processed
        /// in the order they are listed. As soon as a match is found for a cluster, the rest of the list is not
        /// processed.
        /// </summary>
        public InputList<Inputs.GameServerDeploymentRolloutGameServerConfigOverridesArgs> GameServerConfigOverrides
        {
            get => _gameServerConfigOverrides ?? (_gameServerConfigOverrides = new InputList<Inputs.GameServerDeploymentRolloutGameServerConfigOverridesArgs>());
            set => _gameServerConfigOverrides = value;
        }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GameServerDeploymentRolloutArgs()
        {
        }
    }

    public sealed class GameServerDeploymentRolloutState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This field points to the game server config that is applied by default to all realms and clusters. For
        /// example, 'projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config'.
        /// </summary>
        [Input("defaultGameServerConfig")]
        public Input<string>? DefaultGameServerConfig { get; set; }

        /// <summary>
        /// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
        /// </summary>
        [Input("deploymentId")]
        public Input<string>? DeploymentId { get; set; }

        [Input("gameServerConfigOverrides")]
        private InputList<Inputs.GameServerDeploymentRolloutGameServerConfigOverridesGetArgs>? _gameServerConfigOverrides;

        /// <summary>
        /// The game_server_config_overrides contains the per game server config overrides. The overrides are processed
        /// in the order they are listed. As soon as a match is found for a cluster, the rest of the list is not
        /// processed.
        /// </summary>
        public InputList<Inputs.GameServerDeploymentRolloutGameServerConfigOverridesGetArgs> GameServerConfigOverrides
        {
            get => _gameServerConfigOverrides ?? (_gameServerConfigOverrides = new InputList<Inputs.GameServerDeploymentRolloutGameServerConfigOverridesGetArgs>());
            set => _gameServerConfigOverrides = value;
        }

        /// <summary>
        /// The resource id of the game server deployment eg:
        /// 'projects/my-project/locations/global/gameServerDeployments/my-deployment/rollout'.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public GameServerDeploymentRolloutState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class GameServerDeploymentRolloutGameServerConfigOverridesArgs : Pulumi.ResourceArgs
    {
        [Input("configVersion")]
        public Input<string>? ConfigVersion { get; set; }

        [Input("realmsSelector")]
        public Input<GameServerDeploymentRolloutGameServerConfigOverridesRealmsSelectorArgs>? RealmsSelector { get; set; }

        public GameServerDeploymentRolloutGameServerConfigOverridesArgs()
        {
        }
    }

    public sealed class GameServerDeploymentRolloutGameServerConfigOverridesGetArgs : Pulumi.ResourceArgs
    {
        [Input("configVersion")]
        public Input<string>? ConfigVersion { get; set; }

        [Input("realmsSelector")]
        public Input<GameServerDeploymentRolloutGameServerConfigOverridesRealmsSelectorGetArgs>? RealmsSelector { get; set; }

        public GameServerDeploymentRolloutGameServerConfigOverridesGetArgs()
        {
        }
    }

    public sealed class GameServerDeploymentRolloutGameServerConfigOverridesRealmsSelectorArgs : Pulumi.ResourceArgs
    {
        [Input("realms")]
        private InputList<string>? _realms;
        public InputList<string> Realms
        {
            get => _realms ?? (_realms = new InputList<string>());
            set => _realms = value;
        }

        public GameServerDeploymentRolloutGameServerConfigOverridesRealmsSelectorArgs()
        {
        }
    }

    public sealed class GameServerDeploymentRolloutGameServerConfigOverridesRealmsSelectorGetArgs : Pulumi.ResourceArgs
    {
        [Input("realms")]
        private InputList<string>? _realms;
        public InputList<string> Realms
        {
            get => _realms ?? (_realms = new InputList<string>());
            set => _realms = value;
        }

        public GameServerDeploymentRolloutGameServerConfigOverridesRealmsSelectorGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GameServerDeploymentRolloutGameServerConfigOverrides
    {
        public readonly string? ConfigVersion;
        public readonly GameServerDeploymentRolloutGameServerConfigOverridesRealmsSelector? RealmsSelector;

        [OutputConstructor]
        private GameServerDeploymentRolloutGameServerConfigOverrides(
            string? configVersion,
            GameServerDeploymentRolloutGameServerConfigOverridesRealmsSelector? realmsSelector)
        {
            ConfigVersion = configVersion;
            RealmsSelector = realmsSelector;
        }
    }

    [OutputType]
    public sealed class GameServerDeploymentRolloutGameServerConfigOverridesRealmsSelector
    {
        public readonly ImmutableArray<string> Realms;

        [OutputConstructor]
        private GameServerDeploymentRolloutGameServerConfigOverridesRealmsSelector(ImmutableArray<string> realms)
        {
            Realms = realms;
        }
    }
    }
}
