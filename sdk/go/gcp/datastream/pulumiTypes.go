// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datastream

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ConnectionProfileBigqueryProfile struct {
}

// ConnectionProfileBigqueryProfileInput is an input type that accepts ConnectionProfileBigqueryProfileArgs and ConnectionProfileBigqueryProfileOutput values.
// You can construct a concrete instance of `ConnectionProfileBigqueryProfileInput` via:
//
//	ConnectionProfileBigqueryProfileArgs{...}
type ConnectionProfileBigqueryProfileInput interface {
	pulumi.Input

	ToConnectionProfileBigqueryProfileOutput() ConnectionProfileBigqueryProfileOutput
	ToConnectionProfileBigqueryProfileOutputWithContext(context.Context) ConnectionProfileBigqueryProfileOutput
}

type ConnectionProfileBigqueryProfileArgs struct {
}

func (ConnectionProfileBigqueryProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileBigqueryProfile)(nil)).Elem()
}

func (i ConnectionProfileBigqueryProfileArgs) ToConnectionProfileBigqueryProfileOutput() ConnectionProfileBigqueryProfileOutput {
	return i.ToConnectionProfileBigqueryProfileOutputWithContext(context.Background())
}

func (i ConnectionProfileBigqueryProfileArgs) ToConnectionProfileBigqueryProfileOutputWithContext(ctx context.Context) ConnectionProfileBigqueryProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileBigqueryProfileOutput)
}

func (i ConnectionProfileBigqueryProfileArgs) ToConnectionProfileBigqueryProfilePtrOutput() ConnectionProfileBigqueryProfilePtrOutput {
	return i.ToConnectionProfileBigqueryProfilePtrOutputWithContext(context.Background())
}

func (i ConnectionProfileBigqueryProfileArgs) ToConnectionProfileBigqueryProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileBigqueryProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileBigqueryProfileOutput).ToConnectionProfileBigqueryProfilePtrOutputWithContext(ctx)
}

// ConnectionProfileBigqueryProfilePtrInput is an input type that accepts ConnectionProfileBigqueryProfileArgs, ConnectionProfileBigqueryProfilePtr and ConnectionProfileBigqueryProfilePtrOutput values.
// You can construct a concrete instance of `ConnectionProfileBigqueryProfilePtrInput` via:
//
//	        ConnectionProfileBigqueryProfileArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfileBigqueryProfilePtrInput interface {
	pulumi.Input

	ToConnectionProfileBigqueryProfilePtrOutput() ConnectionProfileBigqueryProfilePtrOutput
	ToConnectionProfileBigqueryProfilePtrOutputWithContext(context.Context) ConnectionProfileBigqueryProfilePtrOutput
}

type connectionProfileBigqueryProfilePtrType ConnectionProfileBigqueryProfileArgs

func ConnectionProfileBigqueryProfilePtr(v *ConnectionProfileBigqueryProfileArgs) ConnectionProfileBigqueryProfilePtrInput {
	return (*connectionProfileBigqueryProfilePtrType)(v)
}

func (*connectionProfileBigqueryProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileBigqueryProfile)(nil)).Elem()
}

func (i *connectionProfileBigqueryProfilePtrType) ToConnectionProfileBigqueryProfilePtrOutput() ConnectionProfileBigqueryProfilePtrOutput {
	return i.ToConnectionProfileBigqueryProfilePtrOutputWithContext(context.Background())
}

func (i *connectionProfileBigqueryProfilePtrType) ToConnectionProfileBigqueryProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileBigqueryProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileBigqueryProfilePtrOutput)
}

type ConnectionProfileBigqueryProfileOutput struct{ *pulumi.OutputState }

func (ConnectionProfileBigqueryProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileBigqueryProfile)(nil)).Elem()
}

func (o ConnectionProfileBigqueryProfileOutput) ToConnectionProfileBigqueryProfileOutput() ConnectionProfileBigqueryProfileOutput {
	return o
}

func (o ConnectionProfileBigqueryProfileOutput) ToConnectionProfileBigqueryProfileOutputWithContext(ctx context.Context) ConnectionProfileBigqueryProfileOutput {
	return o
}

func (o ConnectionProfileBigqueryProfileOutput) ToConnectionProfileBigqueryProfilePtrOutput() ConnectionProfileBigqueryProfilePtrOutput {
	return o.ToConnectionProfileBigqueryProfilePtrOutputWithContext(context.Background())
}

func (o ConnectionProfileBigqueryProfileOutput) ToConnectionProfileBigqueryProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileBigqueryProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfileBigqueryProfile) *ConnectionProfileBigqueryProfile {
		return &v
	}).(ConnectionProfileBigqueryProfilePtrOutput)
}

type ConnectionProfileBigqueryProfilePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileBigqueryProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileBigqueryProfile)(nil)).Elem()
}

func (o ConnectionProfileBigqueryProfilePtrOutput) ToConnectionProfileBigqueryProfilePtrOutput() ConnectionProfileBigqueryProfilePtrOutput {
	return o
}

func (o ConnectionProfileBigqueryProfilePtrOutput) ToConnectionProfileBigqueryProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileBigqueryProfilePtrOutput {
	return o
}

func (o ConnectionProfileBigqueryProfilePtrOutput) Elem() ConnectionProfileBigqueryProfileOutput {
	return o.ApplyT(func(v *ConnectionProfileBigqueryProfile) ConnectionProfileBigqueryProfile {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileBigqueryProfile
		return ret
	}).(ConnectionProfileBigqueryProfileOutput)
}

type ConnectionProfileForwardSshConnectivity struct {
	// Hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// SSH password.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password *string `pulumi:"password"`
	// Port for the SSH tunnel.
	Port *int `pulumi:"port"`
	// SSH private key.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PrivateKey *string `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username string `pulumi:"username"`
}

// ConnectionProfileForwardSshConnectivityInput is an input type that accepts ConnectionProfileForwardSshConnectivityArgs and ConnectionProfileForwardSshConnectivityOutput values.
// You can construct a concrete instance of `ConnectionProfileForwardSshConnectivityInput` via:
//
//	ConnectionProfileForwardSshConnectivityArgs{...}
type ConnectionProfileForwardSshConnectivityInput interface {
	pulumi.Input

	ToConnectionProfileForwardSshConnectivityOutput() ConnectionProfileForwardSshConnectivityOutput
	ToConnectionProfileForwardSshConnectivityOutputWithContext(context.Context) ConnectionProfileForwardSshConnectivityOutput
}

type ConnectionProfileForwardSshConnectivityArgs struct {
	// Hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// SSH password.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for the SSH tunnel.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SSH private key.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ConnectionProfileForwardSshConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileForwardSshConnectivity)(nil)).Elem()
}

func (i ConnectionProfileForwardSshConnectivityArgs) ToConnectionProfileForwardSshConnectivityOutput() ConnectionProfileForwardSshConnectivityOutput {
	return i.ToConnectionProfileForwardSshConnectivityOutputWithContext(context.Background())
}

func (i ConnectionProfileForwardSshConnectivityArgs) ToConnectionProfileForwardSshConnectivityOutputWithContext(ctx context.Context) ConnectionProfileForwardSshConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileForwardSshConnectivityOutput)
}

func (i ConnectionProfileForwardSshConnectivityArgs) ToConnectionProfileForwardSshConnectivityPtrOutput() ConnectionProfileForwardSshConnectivityPtrOutput {
	return i.ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(context.Background())
}

func (i ConnectionProfileForwardSshConnectivityArgs) ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(ctx context.Context) ConnectionProfileForwardSshConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileForwardSshConnectivityOutput).ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(ctx)
}

// ConnectionProfileForwardSshConnectivityPtrInput is an input type that accepts ConnectionProfileForwardSshConnectivityArgs, ConnectionProfileForwardSshConnectivityPtr and ConnectionProfileForwardSshConnectivityPtrOutput values.
// You can construct a concrete instance of `ConnectionProfileForwardSshConnectivityPtrInput` via:
//
//	        ConnectionProfileForwardSshConnectivityArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfileForwardSshConnectivityPtrInput interface {
	pulumi.Input

	ToConnectionProfileForwardSshConnectivityPtrOutput() ConnectionProfileForwardSshConnectivityPtrOutput
	ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(context.Context) ConnectionProfileForwardSshConnectivityPtrOutput
}

type connectionProfileForwardSshConnectivityPtrType ConnectionProfileForwardSshConnectivityArgs

func ConnectionProfileForwardSshConnectivityPtr(v *ConnectionProfileForwardSshConnectivityArgs) ConnectionProfileForwardSshConnectivityPtrInput {
	return (*connectionProfileForwardSshConnectivityPtrType)(v)
}

func (*connectionProfileForwardSshConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileForwardSshConnectivity)(nil)).Elem()
}

func (i *connectionProfileForwardSshConnectivityPtrType) ToConnectionProfileForwardSshConnectivityPtrOutput() ConnectionProfileForwardSshConnectivityPtrOutput {
	return i.ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(context.Background())
}

func (i *connectionProfileForwardSshConnectivityPtrType) ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(ctx context.Context) ConnectionProfileForwardSshConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileForwardSshConnectivityPtrOutput)
}

type ConnectionProfileForwardSshConnectivityOutput struct{ *pulumi.OutputState }

func (ConnectionProfileForwardSshConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileForwardSshConnectivity)(nil)).Elem()
}

func (o ConnectionProfileForwardSshConnectivityOutput) ToConnectionProfileForwardSshConnectivityOutput() ConnectionProfileForwardSshConnectivityOutput {
	return o
}

func (o ConnectionProfileForwardSshConnectivityOutput) ToConnectionProfileForwardSshConnectivityOutputWithContext(ctx context.Context) ConnectionProfileForwardSshConnectivityOutput {
	return o
}

func (o ConnectionProfileForwardSshConnectivityOutput) ToConnectionProfileForwardSshConnectivityPtrOutput() ConnectionProfileForwardSshConnectivityPtrOutput {
	return o.ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(context.Background())
}

func (o ConnectionProfileForwardSshConnectivityOutput) ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(ctx context.Context) ConnectionProfileForwardSshConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfileForwardSshConnectivity) *ConnectionProfileForwardSshConnectivity {
		return &v
	}).(ConnectionProfileForwardSshConnectivityPtrOutput)
}

// Hostname for the SSH tunnel.
func (o ConnectionProfileForwardSshConnectivityOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileForwardSshConnectivity) string { return v.Hostname }).(pulumi.StringOutput)
}

// SSH password.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileForwardSshConnectivityOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileForwardSshConnectivity) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel.
func (o ConnectionProfileForwardSshConnectivityOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionProfileForwardSshConnectivity) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SSH private key.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileForwardSshConnectivityOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileForwardSshConnectivity) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Username for the SSH tunnel.
func (o ConnectionProfileForwardSshConnectivityOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileForwardSshConnectivity) string { return v.Username }).(pulumi.StringOutput)
}

type ConnectionProfileForwardSshConnectivityPtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileForwardSshConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileForwardSshConnectivity)(nil)).Elem()
}

func (o ConnectionProfileForwardSshConnectivityPtrOutput) ToConnectionProfileForwardSshConnectivityPtrOutput() ConnectionProfileForwardSshConnectivityPtrOutput {
	return o
}

func (o ConnectionProfileForwardSshConnectivityPtrOutput) ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(ctx context.Context) ConnectionProfileForwardSshConnectivityPtrOutput {
	return o
}

func (o ConnectionProfileForwardSshConnectivityPtrOutput) Elem() ConnectionProfileForwardSshConnectivityOutput {
	return o.ApplyT(func(v *ConnectionProfileForwardSshConnectivity) ConnectionProfileForwardSshConnectivity {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileForwardSshConnectivity
		return ret
	}).(ConnectionProfileForwardSshConnectivityOutput)
}

// Hostname for the SSH tunnel.
func (o ConnectionProfileForwardSshConnectivityPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileForwardSshConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// SSH password.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileForwardSshConnectivityPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileForwardSshConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel.
func (o ConnectionProfileForwardSshConnectivityPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileForwardSshConnectivity) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// SSH private key.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileForwardSshConnectivityPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileForwardSshConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Username for the SSH tunnel.
func (o ConnectionProfileForwardSshConnectivityPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileForwardSshConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionProfileGcsProfile struct {
	// The Cloud Storage bucket name.
	Bucket string `pulumi:"bucket"`
	// The root path inside the Cloud Storage bucket.
	RootPath *string `pulumi:"rootPath"`
}

// ConnectionProfileGcsProfileInput is an input type that accepts ConnectionProfileGcsProfileArgs and ConnectionProfileGcsProfileOutput values.
// You can construct a concrete instance of `ConnectionProfileGcsProfileInput` via:
//
//	ConnectionProfileGcsProfileArgs{...}
type ConnectionProfileGcsProfileInput interface {
	pulumi.Input

	ToConnectionProfileGcsProfileOutput() ConnectionProfileGcsProfileOutput
	ToConnectionProfileGcsProfileOutputWithContext(context.Context) ConnectionProfileGcsProfileOutput
}

type ConnectionProfileGcsProfileArgs struct {
	// The Cloud Storage bucket name.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The root path inside the Cloud Storage bucket.
	RootPath pulumi.StringPtrInput `pulumi:"rootPath"`
}

func (ConnectionProfileGcsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileGcsProfile)(nil)).Elem()
}

func (i ConnectionProfileGcsProfileArgs) ToConnectionProfileGcsProfileOutput() ConnectionProfileGcsProfileOutput {
	return i.ToConnectionProfileGcsProfileOutputWithContext(context.Background())
}

func (i ConnectionProfileGcsProfileArgs) ToConnectionProfileGcsProfileOutputWithContext(ctx context.Context) ConnectionProfileGcsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileGcsProfileOutput)
}

func (i ConnectionProfileGcsProfileArgs) ToConnectionProfileGcsProfilePtrOutput() ConnectionProfileGcsProfilePtrOutput {
	return i.ToConnectionProfileGcsProfilePtrOutputWithContext(context.Background())
}

func (i ConnectionProfileGcsProfileArgs) ToConnectionProfileGcsProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileGcsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileGcsProfileOutput).ToConnectionProfileGcsProfilePtrOutputWithContext(ctx)
}

// ConnectionProfileGcsProfilePtrInput is an input type that accepts ConnectionProfileGcsProfileArgs, ConnectionProfileGcsProfilePtr and ConnectionProfileGcsProfilePtrOutput values.
// You can construct a concrete instance of `ConnectionProfileGcsProfilePtrInput` via:
//
//	        ConnectionProfileGcsProfileArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfileGcsProfilePtrInput interface {
	pulumi.Input

	ToConnectionProfileGcsProfilePtrOutput() ConnectionProfileGcsProfilePtrOutput
	ToConnectionProfileGcsProfilePtrOutputWithContext(context.Context) ConnectionProfileGcsProfilePtrOutput
}

type connectionProfileGcsProfilePtrType ConnectionProfileGcsProfileArgs

func ConnectionProfileGcsProfilePtr(v *ConnectionProfileGcsProfileArgs) ConnectionProfileGcsProfilePtrInput {
	return (*connectionProfileGcsProfilePtrType)(v)
}

func (*connectionProfileGcsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileGcsProfile)(nil)).Elem()
}

func (i *connectionProfileGcsProfilePtrType) ToConnectionProfileGcsProfilePtrOutput() ConnectionProfileGcsProfilePtrOutput {
	return i.ToConnectionProfileGcsProfilePtrOutputWithContext(context.Background())
}

func (i *connectionProfileGcsProfilePtrType) ToConnectionProfileGcsProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileGcsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileGcsProfilePtrOutput)
}

type ConnectionProfileGcsProfileOutput struct{ *pulumi.OutputState }

func (ConnectionProfileGcsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileGcsProfile)(nil)).Elem()
}

func (o ConnectionProfileGcsProfileOutput) ToConnectionProfileGcsProfileOutput() ConnectionProfileGcsProfileOutput {
	return o
}

func (o ConnectionProfileGcsProfileOutput) ToConnectionProfileGcsProfileOutputWithContext(ctx context.Context) ConnectionProfileGcsProfileOutput {
	return o
}

func (o ConnectionProfileGcsProfileOutput) ToConnectionProfileGcsProfilePtrOutput() ConnectionProfileGcsProfilePtrOutput {
	return o.ToConnectionProfileGcsProfilePtrOutputWithContext(context.Background())
}

func (o ConnectionProfileGcsProfileOutput) ToConnectionProfileGcsProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileGcsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfileGcsProfile) *ConnectionProfileGcsProfile {
		return &v
	}).(ConnectionProfileGcsProfilePtrOutput)
}

// The Cloud Storage bucket name.
func (o ConnectionProfileGcsProfileOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileGcsProfile) string { return v.Bucket }).(pulumi.StringOutput)
}

// The root path inside the Cloud Storage bucket.
func (o ConnectionProfileGcsProfileOutput) RootPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileGcsProfile) *string { return v.RootPath }).(pulumi.StringPtrOutput)
}

type ConnectionProfileGcsProfilePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileGcsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileGcsProfile)(nil)).Elem()
}

func (o ConnectionProfileGcsProfilePtrOutput) ToConnectionProfileGcsProfilePtrOutput() ConnectionProfileGcsProfilePtrOutput {
	return o
}

func (o ConnectionProfileGcsProfilePtrOutput) ToConnectionProfileGcsProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileGcsProfilePtrOutput {
	return o
}

func (o ConnectionProfileGcsProfilePtrOutput) Elem() ConnectionProfileGcsProfileOutput {
	return o.ApplyT(func(v *ConnectionProfileGcsProfile) ConnectionProfileGcsProfile {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileGcsProfile
		return ret
	}).(ConnectionProfileGcsProfileOutput)
}

// The Cloud Storage bucket name.
func (o ConnectionProfileGcsProfilePtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileGcsProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// The root path inside the Cloud Storage bucket.
func (o ConnectionProfileGcsProfilePtrOutput) RootPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileGcsProfile) *string {
		if v == nil {
			return nil
		}
		return v.RootPath
	}).(pulumi.StringPtrOutput)
}

type ConnectionProfileMysqlProfile struct {
	// Hostname for the MySQL connection.
	Hostname string `pulumi:"hostname"`
	// Password for the MySQL connection.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password string `pulumi:"password"`
	// Port for the MySQL connection.
	Port *int `pulumi:"port"`
	// SSL configuration for the MySQL connection.
	// Structure is documented below.
	SslConfig *ConnectionProfileMysqlProfileSslConfig `pulumi:"sslConfig"`
	// Username for the MySQL connection.
	Username string `pulumi:"username"`
}

// ConnectionProfileMysqlProfileInput is an input type that accepts ConnectionProfileMysqlProfileArgs and ConnectionProfileMysqlProfileOutput values.
// You can construct a concrete instance of `ConnectionProfileMysqlProfileInput` via:
//
//	ConnectionProfileMysqlProfileArgs{...}
type ConnectionProfileMysqlProfileInput interface {
	pulumi.Input

	ToConnectionProfileMysqlProfileOutput() ConnectionProfileMysqlProfileOutput
	ToConnectionProfileMysqlProfileOutputWithContext(context.Context) ConnectionProfileMysqlProfileOutput
}

type ConnectionProfileMysqlProfileArgs struct {
	// Hostname for the MySQL connection.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Password for the MySQL connection.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the MySQL connection.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SSL configuration for the MySQL connection.
	// Structure is documented below.
	SslConfig ConnectionProfileMysqlProfileSslConfigPtrInput `pulumi:"sslConfig"`
	// Username for the MySQL connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ConnectionProfileMysqlProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileMysqlProfile)(nil)).Elem()
}

func (i ConnectionProfileMysqlProfileArgs) ToConnectionProfileMysqlProfileOutput() ConnectionProfileMysqlProfileOutput {
	return i.ToConnectionProfileMysqlProfileOutputWithContext(context.Background())
}

func (i ConnectionProfileMysqlProfileArgs) ToConnectionProfileMysqlProfileOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileMysqlProfileOutput)
}

func (i ConnectionProfileMysqlProfileArgs) ToConnectionProfileMysqlProfilePtrOutput() ConnectionProfileMysqlProfilePtrOutput {
	return i.ToConnectionProfileMysqlProfilePtrOutputWithContext(context.Background())
}

func (i ConnectionProfileMysqlProfileArgs) ToConnectionProfileMysqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileMysqlProfileOutput).ToConnectionProfileMysqlProfilePtrOutputWithContext(ctx)
}

// ConnectionProfileMysqlProfilePtrInput is an input type that accepts ConnectionProfileMysqlProfileArgs, ConnectionProfileMysqlProfilePtr and ConnectionProfileMysqlProfilePtrOutput values.
// You can construct a concrete instance of `ConnectionProfileMysqlProfilePtrInput` via:
//
//	        ConnectionProfileMysqlProfileArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfileMysqlProfilePtrInput interface {
	pulumi.Input

	ToConnectionProfileMysqlProfilePtrOutput() ConnectionProfileMysqlProfilePtrOutput
	ToConnectionProfileMysqlProfilePtrOutputWithContext(context.Context) ConnectionProfileMysqlProfilePtrOutput
}

type connectionProfileMysqlProfilePtrType ConnectionProfileMysqlProfileArgs

func ConnectionProfileMysqlProfilePtr(v *ConnectionProfileMysqlProfileArgs) ConnectionProfileMysqlProfilePtrInput {
	return (*connectionProfileMysqlProfilePtrType)(v)
}

func (*connectionProfileMysqlProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileMysqlProfile)(nil)).Elem()
}

func (i *connectionProfileMysqlProfilePtrType) ToConnectionProfileMysqlProfilePtrOutput() ConnectionProfileMysqlProfilePtrOutput {
	return i.ToConnectionProfileMysqlProfilePtrOutputWithContext(context.Background())
}

func (i *connectionProfileMysqlProfilePtrType) ToConnectionProfileMysqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileMysqlProfilePtrOutput)
}

type ConnectionProfileMysqlProfileOutput struct{ *pulumi.OutputState }

func (ConnectionProfileMysqlProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileMysqlProfile)(nil)).Elem()
}

func (o ConnectionProfileMysqlProfileOutput) ToConnectionProfileMysqlProfileOutput() ConnectionProfileMysqlProfileOutput {
	return o
}

func (o ConnectionProfileMysqlProfileOutput) ToConnectionProfileMysqlProfileOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileOutput {
	return o
}

func (o ConnectionProfileMysqlProfileOutput) ToConnectionProfileMysqlProfilePtrOutput() ConnectionProfileMysqlProfilePtrOutput {
	return o.ToConnectionProfileMysqlProfilePtrOutputWithContext(context.Background())
}

func (o ConnectionProfileMysqlProfileOutput) ToConnectionProfileMysqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfileMysqlProfile) *ConnectionProfileMysqlProfile {
		return &v
	}).(ConnectionProfileMysqlProfilePtrOutput)
}

// Hostname for the MySQL connection.
func (o ConnectionProfileMysqlProfileOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfile) string { return v.Hostname }).(pulumi.StringOutput)
}

// Password for the MySQL connection.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfile) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the MySQL connection.
func (o ConnectionProfileMysqlProfileOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfile) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SSL configuration for the MySQL connection.
// Structure is documented below.
func (o ConnectionProfileMysqlProfileOutput) SslConfig() ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfile) *ConnectionProfileMysqlProfileSslConfig { return v.SslConfig }).(ConnectionProfileMysqlProfileSslConfigPtrOutput)
}

// Username for the MySQL connection.
func (o ConnectionProfileMysqlProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfile) string { return v.Username }).(pulumi.StringOutput)
}

type ConnectionProfileMysqlProfilePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileMysqlProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileMysqlProfile)(nil)).Elem()
}

func (o ConnectionProfileMysqlProfilePtrOutput) ToConnectionProfileMysqlProfilePtrOutput() ConnectionProfileMysqlProfilePtrOutput {
	return o
}

func (o ConnectionProfileMysqlProfilePtrOutput) ToConnectionProfileMysqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfilePtrOutput {
	return o
}

func (o ConnectionProfileMysqlProfilePtrOutput) Elem() ConnectionProfileMysqlProfileOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfile) ConnectionProfileMysqlProfile {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileMysqlProfile
		return ret
	}).(ConnectionProfileMysqlProfileOutput)
}

// Hostname for the MySQL connection.
func (o ConnectionProfileMysqlProfilePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Password for the MySQL connection.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the MySQL connection.
func (o ConnectionProfileMysqlProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfile) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// SSL configuration for the MySQL connection.
// Structure is documented below.
func (o ConnectionProfileMysqlProfilePtrOutput) SslConfig() ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfile) *ConnectionProfileMysqlProfileSslConfig {
		if v == nil {
			return nil
		}
		return v.SslConfig
	}).(ConnectionProfileMysqlProfileSslConfigPtrOutput)
}

// Username for the MySQL connection.
func (o ConnectionProfileMysqlProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionProfileMysqlProfileSslConfig struct {
	// PEM-encoded certificate of the CA that signed the source database
	// server's certificate.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	CaCertificate *string `pulumi:"caCertificate"`
	// (Output)
	// Indicates whether the clientKey field is set.
	CaCertificateSet *bool `pulumi:"caCertificateSet"`
	// PEM-encoded certificate that will be used by the replica to
	// authenticate against the source database server. If this field
	// is used then the 'clientKey' and the 'caCertificate' fields are
	// mandatory.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// (Output)
	// Indicates whether the clientCertificate field is set.
	ClientCertificateSet *bool `pulumi:"clientCertificateSet"`
	// PEM-encoded private key associated with the Client Certificate.
	// If this field is used then the 'client_certificate' and the
	// 'ca_certificate' fields are mandatory.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ClientKey *string `pulumi:"clientKey"`
	// (Output)
	// Indicates whether the clientKey field is set.
	ClientKeySet *bool `pulumi:"clientKeySet"`
}

// ConnectionProfileMysqlProfileSslConfigInput is an input type that accepts ConnectionProfileMysqlProfileSslConfigArgs and ConnectionProfileMysqlProfileSslConfigOutput values.
// You can construct a concrete instance of `ConnectionProfileMysqlProfileSslConfigInput` via:
//
//	ConnectionProfileMysqlProfileSslConfigArgs{...}
type ConnectionProfileMysqlProfileSslConfigInput interface {
	pulumi.Input

	ToConnectionProfileMysqlProfileSslConfigOutput() ConnectionProfileMysqlProfileSslConfigOutput
	ToConnectionProfileMysqlProfileSslConfigOutputWithContext(context.Context) ConnectionProfileMysqlProfileSslConfigOutput
}

type ConnectionProfileMysqlProfileSslConfigArgs struct {
	// PEM-encoded certificate of the CA that signed the source database
	// server's certificate.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// (Output)
	// Indicates whether the clientKey field is set.
	CaCertificateSet pulumi.BoolPtrInput `pulumi:"caCertificateSet"`
	// PEM-encoded certificate that will be used by the replica to
	// authenticate against the source database server. If this field
	// is used then the 'clientKey' and the 'caCertificate' fields are
	// mandatory.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// (Output)
	// Indicates whether the clientCertificate field is set.
	ClientCertificateSet pulumi.BoolPtrInput `pulumi:"clientCertificateSet"`
	// PEM-encoded private key associated with the Client Certificate.
	// If this field is used then the 'client_certificate' and the
	// 'ca_certificate' fields are mandatory.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// (Output)
	// Indicates whether the clientKey field is set.
	ClientKeySet pulumi.BoolPtrInput `pulumi:"clientKeySet"`
}

func (ConnectionProfileMysqlProfileSslConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileMysqlProfileSslConfig)(nil)).Elem()
}

func (i ConnectionProfileMysqlProfileSslConfigArgs) ToConnectionProfileMysqlProfileSslConfigOutput() ConnectionProfileMysqlProfileSslConfigOutput {
	return i.ToConnectionProfileMysqlProfileSslConfigOutputWithContext(context.Background())
}

func (i ConnectionProfileMysqlProfileSslConfigArgs) ToConnectionProfileMysqlProfileSslConfigOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileSslConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileMysqlProfileSslConfigOutput)
}

func (i ConnectionProfileMysqlProfileSslConfigArgs) ToConnectionProfileMysqlProfileSslConfigPtrOutput() ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return i.ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionProfileMysqlProfileSslConfigArgs) ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileMysqlProfileSslConfigOutput).ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(ctx)
}

// ConnectionProfileMysqlProfileSslConfigPtrInput is an input type that accepts ConnectionProfileMysqlProfileSslConfigArgs, ConnectionProfileMysqlProfileSslConfigPtr and ConnectionProfileMysqlProfileSslConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionProfileMysqlProfileSslConfigPtrInput` via:
//
//	        ConnectionProfileMysqlProfileSslConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfileMysqlProfileSslConfigPtrInput interface {
	pulumi.Input

	ToConnectionProfileMysqlProfileSslConfigPtrOutput() ConnectionProfileMysqlProfileSslConfigPtrOutput
	ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(context.Context) ConnectionProfileMysqlProfileSslConfigPtrOutput
}

type connectionProfileMysqlProfileSslConfigPtrType ConnectionProfileMysqlProfileSslConfigArgs

func ConnectionProfileMysqlProfileSslConfigPtr(v *ConnectionProfileMysqlProfileSslConfigArgs) ConnectionProfileMysqlProfileSslConfigPtrInput {
	return (*connectionProfileMysqlProfileSslConfigPtrType)(v)
}

func (*connectionProfileMysqlProfileSslConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileMysqlProfileSslConfig)(nil)).Elem()
}

func (i *connectionProfileMysqlProfileSslConfigPtrType) ToConnectionProfileMysqlProfileSslConfigPtrOutput() ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return i.ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(context.Background())
}

func (i *connectionProfileMysqlProfileSslConfigPtrType) ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileMysqlProfileSslConfigPtrOutput)
}

type ConnectionProfileMysqlProfileSslConfigOutput struct{ *pulumi.OutputState }

func (ConnectionProfileMysqlProfileSslConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileMysqlProfileSslConfig)(nil)).Elem()
}

func (o ConnectionProfileMysqlProfileSslConfigOutput) ToConnectionProfileMysqlProfileSslConfigOutput() ConnectionProfileMysqlProfileSslConfigOutput {
	return o
}

func (o ConnectionProfileMysqlProfileSslConfigOutput) ToConnectionProfileMysqlProfileSslConfigOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileSslConfigOutput {
	return o
}

func (o ConnectionProfileMysqlProfileSslConfigOutput) ToConnectionProfileMysqlProfileSslConfigPtrOutput() ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return o.ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionProfileMysqlProfileSslConfigOutput) ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfileMysqlProfileSslConfig) *ConnectionProfileMysqlProfileSslConfig {
		return &v
	}).(ConnectionProfileMysqlProfileSslConfigPtrOutput)
}

// PEM-encoded certificate of the CA that signed the source database
// server's certificate.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileSslConfigOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfileSslConfig) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// (Output)
// Indicates whether the clientKey field is set.
func (o ConnectionProfileMysqlProfileSslConfigOutput) CaCertificateSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfileSslConfig) *bool { return v.CaCertificateSet }).(pulumi.BoolPtrOutput)
}

// PEM-encoded certificate that will be used by the replica to
// authenticate against the source database server. If this field
// is used then the 'clientKey' and the 'caCertificate' fields are
// mandatory.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileSslConfigOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfileSslConfig) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// (Output)
// Indicates whether the clientCertificate field is set.
func (o ConnectionProfileMysqlProfileSslConfigOutput) ClientCertificateSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfileSslConfig) *bool { return v.ClientCertificateSet }).(pulumi.BoolPtrOutput)
}

// PEM-encoded private key associated with the Client Certificate.
// If this field is used then the 'client_certificate' and the
// 'ca_certificate' fields are mandatory.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileSslConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfileSslConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// (Output)
// Indicates whether the clientKey field is set.
func (o ConnectionProfileMysqlProfileSslConfigOutput) ClientKeySet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfileSslConfig) *bool { return v.ClientKeySet }).(pulumi.BoolPtrOutput)
}

type ConnectionProfileMysqlProfileSslConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileMysqlProfileSslConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileMysqlProfileSslConfig)(nil)).Elem()
}

func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) ToConnectionProfileMysqlProfileSslConfigPtrOutput() ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return o
}

func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return o
}

func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) Elem() ConnectionProfileMysqlProfileSslConfigOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) ConnectionProfileMysqlProfileSslConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileMysqlProfileSslConfig
		return ret
	}).(ConnectionProfileMysqlProfileSslConfigOutput)
}

// PEM-encoded certificate of the CA that signed the source database
// server's certificate.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Indicates whether the clientKey field is set.
func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) CaCertificateSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CaCertificateSet
	}).(pulumi.BoolPtrOutput)
}

// PEM-encoded certificate that will be used by the replica to
// authenticate against the source database server. If this field
// is used then the 'clientKey' and the 'caCertificate' fields are
// mandatory.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Indicates whether the clientCertificate field is set.
func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) ClientCertificateSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ClientCertificateSet
	}).(pulumi.BoolPtrOutput)
}

// PEM-encoded private key associated with the Client Certificate.
// If this field is used then the 'client_certificate' and the
// 'ca_certificate' fields are mandatory.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Indicates whether the clientKey field is set.
func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) ClientKeySet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ClientKeySet
	}).(pulumi.BoolPtrOutput)
}

type ConnectionProfileOracleProfile struct {
	// Connection string attributes
	ConnectionAttributes map[string]string `pulumi:"connectionAttributes"`
	// Database for the Oracle connection.
	DatabaseService string `pulumi:"databaseService"`
	// Hostname for the Oracle connection.
	Hostname string `pulumi:"hostname"`
	// Password for the Oracle connection.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password string `pulumi:"password"`
	// Port for the Oracle connection.
	Port *int `pulumi:"port"`
	// Username for the Oracle connection.
	Username string `pulumi:"username"`
}

// ConnectionProfileOracleProfileInput is an input type that accepts ConnectionProfileOracleProfileArgs and ConnectionProfileOracleProfileOutput values.
// You can construct a concrete instance of `ConnectionProfileOracleProfileInput` via:
//
//	ConnectionProfileOracleProfileArgs{...}
type ConnectionProfileOracleProfileInput interface {
	pulumi.Input

	ToConnectionProfileOracleProfileOutput() ConnectionProfileOracleProfileOutput
	ToConnectionProfileOracleProfileOutputWithContext(context.Context) ConnectionProfileOracleProfileOutput
}

type ConnectionProfileOracleProfileArgs struct {
	// Connection string attributes
	ConnectionAttributes pulumi.StringMapInput `pulumi:"connectionAttributes"`
	// Database for the Oracle connection.
	DatabaseService pulumi.StringInput `pulumi:"databaseService"`
	// Hostname for the Oracle connection.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Password for the Oracle connection.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the Oracle connection.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Username for the Oracle connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ConnectionProfileOracleProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileOracleProfile)(nil)).Elem()
}

func (i ConnectionProfileOracleProfileArgs) ToConnectionProfileOracleProfileOutput() ConnectionProfileOracleProfileOutput {
	return i.ToConnectionProfileOracleProfileOutputWithContext(context.Background())
}

func (i ConnectionProfileOracleProfileArgs) ToConnectionProfileOracleProfileOutputWithContext(ctx context.Context) ConnectionProfileOracleProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileOracleProfileOutput)
}

func (i ConnectionProfileOracleProfileArgs) ToConnectionProfileOracleProfilePtrOutput() ConnectionProfileOracleProfilePtrOutput {
	return i.ToConnectionProfileOracleProfilePtrOutputWithContext(context.Background())
}

func (i ConnectionProfileOracleProfileArgs) ToConnectionProfileOracleProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileOracleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileOracleProfileOutput).ToConnectionProfileOracleProfilePtrOutputWithContext(ctx)
}

// ConnectionProfileOracleProfilePtrInput is an input type that accepts ConnectionProfileOracleProfileArgs, ConnectionProfileOracleProfilePtr and ConnectionProfileOracleProfilePtrOutput values.
// You can construct a concrete instance of `ConnectionProfileOracleProfilePtrInput` via:
//
//	        ConnectionProfileOracleProfileArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfileOracleProfilePtrInput interface {
	pulumi.Input

	ToConnectionProfileOracleProfilePtrOutput() ConnectionProfileOracleProfilePtrOutput
	ToConnectionProfileOracleProfilePtrOutputWithContext(context.Context) ConnectionProfileOracleProfilePtrOutput
}

type connectionProfileOracleProfilePtrType ConnectionProfileOracleProfileArgs

func ConnectionProfileOracleProfilePtr(v *ConnectionProfileOracleProfileArgs) ConnectionProfileOracleProfilePtrInput {
	return (*connectionProfileOracleProfilePtrType)(v)
}

func (*connectionProfileOracleProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileOracleProfile)(nil)).Elem()
}

func (i *connectionProfileOracleProfilePtrType) ToConnectionProfileOracleProfilePtrOutput() ConnectionProfileOracleProfilePtrOutput {
	return i.ToConnectionProfileOracleProfilePtrOutputWithContext(context.Background())
}

func (i *connectionProfileOracleProfilePtrType) ToConnectionProfileOracleProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileOracleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileOracleProfilePtrOutput)
}

type ConnectionProfileOracleProfileOutput struct{ *pulumi.OutputState }

func (ConnectionProfileOracleProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileOracleProfile)(nil)).Elem()
}

func (o ConnectionProfileOracleProfileOutput) ToConnectionProfileOracleProfileOutput() ConnectionProfileOracleProfileOutput {
	return o
}

func (o ConnectionProfileOracleProfileOutput) ToConnectionProfileOracleProfileOutputWithContext(ctx context.Context) ConnectionProfileOracleProfileOutput {
	return o
}

func (o ConnectionProfileOracleProfileOutput) ToConnectionProfileOracleProfilePtrOutput() ConnectionProfileOracleProfilePtrOutput {
	return o.ToConnectionProfileOracleProfilePtrOutputWithContext(context.Background())
}

func (o ConnectionProfileOracleProfileOutput) ToConnectionProfileOracleProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileOracleProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfileOracleProfile) *ConnectionProfileOracleProfile {
		return &v
	}).(ConnectionProfileOracleProfilePtrOutput)
}

// Connection string attributes
func (o ConnectionProfileOracleProfileOutput) ConnectionAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectionProfileOracleProfile) map[string]string { return v.ConnectionAttributes }).(pulumi.StringMapOutput)
}

// Database for the Oracle connection.
func (o ConnectionProfileOracleProfileOutput) DatabaseService() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileOracleProfile) string { return v.DatabaseService }).(pulumi.StringOutput)
}

// Hostname for the Oracle connection.
func (o ConnectionProfileOracleProfileOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileOracleProfile) string { return v.Hostname }).(pulumi.StringOutput)
}

// Password for the Oracle connection.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileOracleProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileOracleProfile) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the Oracle connection.
func (o ConnectionProfileOracleProfileOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionProfileOracleProfile) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Username for the Oracle connection.
func (o ConnectionProfileOracleProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileOracleProfile) string { return v.Username }).(pulumi.StringOutput)
}

type ConnectionProfileOracleProfilePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileOracleProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileOracleProfile)(nil)).Elem()
}

func (o ConnectionProfileOracleProfilePtrOutput) ToConnectionProfileOracleProfilePtrOutput() ConnectionProfileOracleProfilePtrOutput {
	return o
}

func (o ConnectionProfileOracleProfilePtrOutput) ToConnectionProfileOracleProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileOracleProfilePtrOutput {
	return o
}

func (o ConnectionProfileOracleProfilePtrOutput) Elem() ConnectionProfileOracleProfileOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) ConnectionProfileOracleProfile {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileOracleProfile
		return ret
	}).(ConnectionProfileOracleProfileOutput)
}

// Connection string attributes
func (o ConnectionProfileOracleProfilePtrOutput) ConnectionAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) map[string]string {
		if v == nil {
			return nil
		}
		return v.ConnectionAttributes
	}).(pulumi.StringMapOutput)
}

// Database for the Oracle connection.
func (o ConnectionProfileOracleProfilePtrOutput) DatabaseService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseService
	}).(pulumi.StringPtrOutput)
}

// Hostname for the Oracle connection.
func (o ConnectionProfileOracleProfilePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Password for the Oracle connection.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileOracleProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the Oracle connection.
func (o ConnectionProfileOracleProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Username for the Oracle connection.
func (o ConnectionProfileOracleProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionProfilePostgresqlProfile struct {
	// Database for the PostgreSQL connection.
	Database string `pulumi:"database"`
	// Hostname for the PostgreSQL connection.
	Hostname string `pulumi:"hostname"`
	// Password for the PostgreSQL connection.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password string `pulumi:"password"`
	// Port for the PostgreSQL connection.
	Port *int `pulumi:"port"`
	// Username for the PostgreSQL connection.
	Username string `pulumi:"username"`
}

// ConnectionProfilePostgresqlProfileInput is an input type that accepts ConnectionProfilePostgresqlProfileArgs and ConnectionProfilePostgresqlProfileOutput values.
// You can construct a concrete instance of `ConnectionProfilePostgresqlProfileInput` via:
//
//	ConnectionProfilePostgresqlProfileArgs{...}
type ConnectionProfilePostgresqlProfileInput interface {
	pulumi.Input

	ToConnectionProfilePostgresqlProfileOutput() ConnectionProfilePostgresqlProfileOutput
	ToConnectionProfilePostgresqlProfileOutputWithContext(context.Context) ConnectionProfilePostgresqlProfileOutput
}

type ConnectionProfilePostgresqlProfileArgs struct {
	// Database for the PostgreSQL connection.
	Database pulumi.StringInput `pulumi:"database"`
	// Hostname for the PostgreSQL connection.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Password for the PostgreSQL connection.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the PostgreSQL connection.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Username for the PostgreSQL connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ConnectionProfilePostgresqlProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfilePostgresqlProfile)(nil)).Elem()
}

func (i ConnectionProfilePostgresqlProfileArgs) ToConnectionProfilePostgresqlProfileOutput() ConnectionProfilePostgresqlProfileOutput {
	return i.ToConnectionProfilePostgresqlProfileOutputWithContext(context.Background())
}

func (i ConnectionProfilePostgresqlProfileArgs) ToConnectionProfilePostgresqlProfileOutputWithContext(ctx context.Context) ConnectionProfilePostgresqlProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfilePostgresqlProfileOutput)
}

func (i ConnectionProfilePostgresqlProfileArgs) ToConnectionProfilePostgresqlProfilePtrOutput() ConnectionProfilePostgresqlProfilePtrOutput {
	return i.ToConnectionProfilePostgresqlProfilePtrOutputWithContext(context.Background())
}

func (i ConnectionProfilePostgresqlProfileArgs) ToConnectionProfilePostgresqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePostgresqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfilePostgresqlProfileOutput).ToConnectionProfilePostgresqlProfilePtrOutputWithContext(ctx)
}

// ConnectionProfilePostgresqlProfilePtrInput is an input type that accepts ConnectionProfilePostgresqlProfileArgs, ConnectionProfilePostgresqlProfilePtr and ConnectionProfilePostgresqlProfilePtrOutput values.
// You can construct a concrete instance of `ConnectionProfilePostgresqlProfilePtrInput` via:
//
//	        ConnectionProfilePostgresqlProfileArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfilePostgresqlProfilePtrInput interface {
	pulumi.Input

	ToConnectionProfilePostgresqlProfilePtrOutput() ConnectionProfilePostgresqlProfilePtrOutput
	ToConnectionProfilePostgresqlProfilePtrOutputWithContext(context.Context) ConnectionProfilePostgresqlProfilePtrOutput
}

type connectionProfilePostgresqlProfilePtrType ConnectionProfilePostgresqlProfileArgs

func ConnectionProfilePostgresqlProfilePtr(v *ConnectionProfilePostgresqlProfileArgs) ConnectionProfilePostgresqlProfilePtrInput {
	return (*connectionProfilePostgresqlProfilePtrType)(v)
}

func (*connectionProfilePostgresqlProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfilePostgresqlProfile)(nil)).Elem()
}

func (i *connectionProfilePostgresqlProfilePtrType) ToConnectionProfilePostgresqlProfilePtrOutput() ConnectionProfilePostgresqlProfilePtrOutput {
	return i.ToConnectionProfilePostgresqlProfilePtrOutputWithContext(context.Background())
}

func (i *connectionProfilePostgresqlProfilePtrType) ToConnectionProfilePostgresqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePostgresqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfilePostgresqlProfilePtrOutput)
}

type ConnectionProfilePostgresqlProfileOutput struct{ *pulumi.OutputState }

func (ConnectionProfilePostgresqlProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfilePostgresqlProfile)(nil)).Elem()
}

func (o ConnectionProfilePostgresqlProfileOutput) ToConnectionProfilePostgresqlProfileOutput() ConnectionProfilePostgresqlProfileOutput {
	return o
}

func (o ConnectionProfilePostgresqlProfileOutput) ToConnectionProfilePostgresqlProfileOutputWithContext(ctx context.Context) ConnectionProfilePostgresqlProfileOutput {
	return o
}

func (o ConnectionProfilePostgresqlProfileOutput) ToConnectionProfilePostgresqlProfilePtrOutput() ConnectionProfilePostgresqlProfilePtrOutput {
	return o.ToConnectionProfilePostgresqlProfilePtrOutputWithContext(context.Background())
}

func (o ConnectionProfilePostgresqlProfileOutput) ToConnectionProfilePostgresqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePostgresqlProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfilePostgresqlProfile) *ConnectionProfilePostgresqlProfile {
		return &v
	}).(ConnectionProfilePostgresqlProfilePtrOutput)
}

// Database for the PostgreSQL connection.
func (o ConnectionProfilePostgresqlProfileOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfilePostgresqlProfile) string { return v.Database }).(pulumi.StringOutput)
}

// Hostname for the PostgreSQL connection.
func (o ConnectionProfilePostgresqlProfileOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfilePostgresqlProfile) string { return v.Hostname }).(pulumi.StringOutput)
}

// Password for the PostgreSQL connection.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfilePostgresqlProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfilePostgresqlProfile) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the PostgreSQL connection.
func (o ConnectionProfilePostgresqlProfileOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionProfilePostgresqlProfile) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Username for the PostgreSQL connection.
func (o ConnectionProfilePostgresqlProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfilePostgresqlProfile) string { return v.Username }).(pulumi.StringOutput)
}

type ConnectionProfilePostgresqlProfilePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfilePostgresqlProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfilePostgresqlProfile)(nil)).Elem()
}

func (o ConnectionProfilePostgresqlProfilePtrOutput) ToConnectionProfilePostgresqlProfilePtrOutput() ConnectionProfilePostgresqlProfilePtrOutput {
	return o
}

func (o ConnectionProfilePostgresqlProfilePtrOutput) ToConnectionProfilePostgresqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePostgresqlProfilePtrOutput {
	return o
}

func (o ConnectionProfilePostgresqlProfilePtrOutput) Elem() ConnectionProfilePostgresqlProfileOutput {
	return o.ApplyT(func(v *ConnectionProfilePostgresqlProfile) ConnectionProfilePostgresqlProfile {
		if v != nil {
			return *v
		}
		var ret ConnectionProfilePostgresqlProfile
		return ret
	}).(ConnectionProfilePostgresqlProfileOutput)
}

// Database for the PostgreSQL connection.
func (o ConnectionProfilePostgresqlProfilePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfilePostgresqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// Hostname for the PostgreSQL connection.
func (o ConnectionProfilePostgresqlProfilePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfilePostgresqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Password for the PostgreSQL connection.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfilePostgresqlProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfilePostgresqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the PostgreSQL connection.
func (o ConnectionProfilePostgresqlProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionProfilePostgresqlProfile) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Username for the PostgreSQL connection.
func (o ConnectionProfilePostgresqlProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfilePostgresqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionProfilePrivateConnectivity struct {
	// A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`
	PrivateConnection string `pulumi:"privateConnection"`
}

// ConnectionProfilePrivateConnectivityInput is an input type that accepts ConnectionProfilePrivateConnectivityArgs and ConnectionProfilePrivateConnectivityOutput values.
// You can construct a concrete instance of `ConnectionProfilePrivateConnectivityInput` via:
//
//	ConnectionProfilePrivateConnectivityArgs{...}
type ConnectionProfilePrivateConnectivityInput interface {
	pulumi.Input

	ToConnectionProfilePrivateConnectivityOutput() ConnectionProfilePrivateConnectivityOutput
	ToConnectionProfilePrivateConnectivityOutputWithContext(context.Context) ConnectionProfilePrivateConnectivityOutput
}

type ConnectionProfilePrivateConnectivityArgs struct {
	// A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`
	PrivateConnection pulumi.StringInput `pulumi:"privateConnection"`
}

func (ConnectionProfilePrivateConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfilePrivateConnectivity)(nil)).Elem()
}

func (i ConnectionProfilePrivateConnectivityArgs) ToConnectionProfilePrivateConnectivityOutput() ConnectionProfilePrivateConnectivityOutput {
	return i.ToConnectionProfilePrivateConnectivityOutputWithContext(context.Background())
}

func (i ConnectionProfilePrivateConnectivityArgs) ToConnectionProfilePrivateConnectivityOutputWithContext(ctx context.Context) ConnectionProfilePrivateConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfilePrivateConnectivityOutput)
}

func (i ConnectionProfilePrivateConnectivityArgs) ToConnectionProfilePrivateConnectivityPtrOutput() ConnectionProfilePrivateConnectivityPtrOutput {
	return i.ToConnectionProfilePrivateConnectivityPtrOutputWithContext(context.Background())
}

func (i ConnectionProfilePrivateConnectivityArgs) ToConnectionProfilePrivateConnectivityPtrOutputWithContext(ctx context.Context) ConnectionProfilePrivateConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfilePrivateConnectivityOutput).ToConnectionProfilePrivateConnectivityPtrOutputWithContext(ctx)
}

// ConnectionProfilePrivateConnectivityPtrInput is an input type that accepts ConnectionProfilePrivateConnectivityArgs, ConnectionProfilePrivateConnectivityPtr and ConnectionProfilePrivateConnectivityPtrOutput values.
// You can construct a concrete instance of `ConnectionProfilePrivateConnectivityPtrInput` via:
//
//	        ConnectionProfilePrivateConnectivityArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfilePrivateConnectivityPtrInput interface {
	pulumi.Input

	ToConnectionProfilePrivateConnectivityPtrOutput() ConnectionProfilePrivateConnectivityPtrOutput
	ToConnectionProfilePrivateConnectivityPtrOutputWithContext(context.Context) ConnectionProfilePrivateConnectivityPtrOutput
}

type connectionProfilePrivateConnectivityPtrType ConnectionProfilePrivateConnectivityArgs

func ConnectionProfilePrivateConnectivityPtr(v *ConnectionProfilePrivateConnectivityArgs) ConnectionProfilePrivateConnectivityPtrInput {
	return (*connectionProfilePrivateConnectivityPtrType)(v)
}

func (*connectionProfilePrivateConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfilePrivateConnectivity)(nil)).Elem()
}

func (i *connectionProfilePrivateConnectivityPtrType) ToConnectionProfilePrivateConnectivityPtrOutput() ConnectionProfilePrivateConnectivityPtrOutput {
	return i.ToConnectionProfilePrivateConnectivityPtrOutputWithContext(context.Background())
}

func (i *connectionProfilePrivateConnectivityPtrType) ToConnectionProfilePrivateConnectivityPtrOutputWithContext(ctx context.Context) ConnectionProfilePrivateConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfilePrivateConnectivityPtrOutput)
}

type ConnectionProfilePrivateConnectivityOutput struct{ *pulumi.OutputState }

func (ConnectionProfilePrivateConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfilePrivateConnectivity)(nil)).Elem()
}

func (o ConnectionProfilePrivateConnectivityOutput) ToConnectionProfilePrivateConnectivityOutput() ConnectionProfilePrivateConnectivityOutput {
	return o
}

func (o ConnectionProfilePrivateConnectivityOutput) ToConnectionProfilePrivateConnectivityOutputWithContext(ctx context.Context) ConnectionProfilePrivateConnectivityOutput {
	return o
}

func (o ConnectionProfilePrivateConnectivityOutput) ToConnectionProfilePrivateConnectivityPtrOutput() ConnectionProfilePrivateConnectivityPtrOutput {
	return o.ToConnectionProfilePrivateConnectivityPtrOutputWithContext(context.Background())
}

func (o ConnectionProfilePrivateConnectivityOutput) ToConnectionProfilePrivateConnectivityPtrOutputWithContext(ctx context.Context) ConnectionProfilePrivateConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfilePrivateConnectivity) *ConnectionProfilePrivateConnectivity {
		return &v
	}).(ConnectionProfilePrivateConnectivityPtrOutput)
}

// A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`
func (o ConnectionProfilePrivateConnectivityOutput) PrivateConnection() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfilePrivateConnectivity) string { return v.PrivateConnection }).(pulumi.StringOutput)
}

type ConnectionProfilePrivateConnectivityPtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfilePrivateConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfilePrivateConnectivity)(nil)).Elem()
}

func (o ConnectionProfilePrivateConnectivityPtrOutput) ToConnectionProfilePrivateConnectivityPtrOutput() ConnectionProfilePrivateConnectivityPtrOutput {
	return o
}

func (o ConnectionProfilePrivateConnectivityPtrOutput) ToConnectionProfilePrivateConnectivityPtrOutputWithContext(ctx context.Context) ConnectionProfilePrivateConnectivityPtrOutput {
	return o
}

func (o ConnectionProfilePrivateConnectivityPtrOutput) Elem() ConnectionProfilePrivateConnectivityOutput {
	return o.ApplyT(func(v *ConnectionProfilePrivateConnectivity) ConnectionProfilePrivateConnectivity {
		if v != nil {
			return *v
		}
		var ret ConnectionProfilePrivateConnectivity
		return ret
	}).(ConnectionProfilePrivateConnectivityOutput)
}

// A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`
func (o ConnectionProfilePrivateConnectivityPtrOutput) PrivateConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfilePrivateConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateConnection
	}).(pulumi.StringPtrOutput)
}

type PrivateConnectionError struct {
	// A list of messages that carry the error details.
	Details map[string]string `pulumi:"details"`
	// A message containing more information about the error that occurred.
	Message *string `pulumi:"message"`
}

// PrivateConnectionErrorInput is an input type that accepts PrivateConnectionErrorArgs and PrivateConnectionErrorOutput values.
// You can construct a concrete instance of `PrivateConnectionErrorInput` via:
//
//	PrivateConnectionErrorArgs{...}
type PrivateConnectionErrorInput interface {
	pulumi.Input

	ToPrivateConnectionErrorOutput() PrivateConnectionErrorOutput
	ToPrivateConnectionErrorOutputWithContext(context.Context) PrivateConnectionErrorOutput
}

type PrivateConnectionErrorArgs struct {
	// A list of messages that carry the error details.
	Details pulumi.StringMapInput `pulumi:"details"`
	// A message containing more information about the error that occurred.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (PrivateConnectionErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectionError)(nil)).Elem()
}

func (i PrivateConnectionErrorArgs) ToPrivateConnectionErrorOutput() PrivateConnectionErrorOutput {
	return i.ToPrivateConnectionErrorOutputWithContext(context.Background())
}

func (i PrivateConnectionErrorArgs) ToPrivateConnectionErrorOutputWithContext(ctx context.Context) PrivateConnectionErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionErrorOutput)
}

// PrivateConnectionErrorArrayInput is an input type that accepts PrivateConnectionErrorArray and PrivateConnectionErrorArrayOutput values.
// You can construct a concrete instance of `PrivateConnectionErrorArrayInput` via:
//
//	PrivateConnectionErrorArray{ PrivateConnectionErrorArgs{...} }
type PrivateConnectionErrorArrayInput interface {
	pulumi.Input

	ToPrivateConnectionErrorArrayOutput() PrivateConnectionErrorArrayOutput
	ToPrivateConnectionErrorArrayOutputWithContext(context.Context) PrivateConnectionErrorArrayOutput
}

type PrivateConnectionErrorArray []PrivateConnectionErrorInput

func (PrivateConnectionErrorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateConnectionError)(nil)).Elem()
}

func (i PrivateConnectionErrorArray) ToPrivateConnectionErrorArrayOutput() PrivateConnectionErrorArrayOutput {
	return i.ToPrivateConnectionErrorArrayOutputWithContext(context.Background())
}

func (i PrivateConnectionErrorArray) ToPrivateConnectionErrorArrayOutputWithContext(ctx context.Context) PrivateConnectionErrorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionErrorArrayOutput)
}

type PrivateConnectionErrorOutput struct{ *pulumi.OutputState }

func (PrivateConnectionErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectionError)(nil)).Elem()
}

func (o PrivateConnectionErrorOutput) ToPrivateConnectionErrorOutput() PrivateConnectionErrorOutput {
	return o
}

func (o PrivateConnectionErrorOutput) ToPrivateConnectionErrorOutputWithContext(ctx context.Context) PrivateConnectionErrorOutput {
	return o
}

// A list of messages that carry the error details.
func (o PrivateConnectionErrorOutput) Details() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrivateConnectionError) map[string]string { return v.Details }).(pulumi.StringMapOutput)
}

// A message containing more information about the error that occurred.
func (o PrivateConnectionErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateConnectionError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type PrivateConnectionErrorArrayOutput struct{ *pulumi.OutputState }

func (PrivateConnectionErrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateConnectionError)(nil)).Elem()
}

func (o PrivateConnectionErrorArrayOutput) ToPrivateConnectionErrorArrayOutput() PrivateConnectionErrorArrayOutput {
	return o
}

func (o PrivateConnectionErrorArrayOutput) ToPrivateConnectionErrorArrayOutputWithContext(ctx context.Context) PrivateConnectionErrorArrayOutput {
	return o
}

func (o PrivateConnectionErrorArrayOutput) Index(i pulumi.IntInput) PrivateConnectionErrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateConnectionError {
		return vs[0].([]PrivateConnectionError)[vs[1].(int)]
	}).(PrivateConnectionErrorOutput)
}

type PrivateConnectionVpcPeeringConfig struct {
	// A free subnet for peering. (CIDR of /29)
	//
	// ***
	Subnet string `pulumi:"subnet"`
	// Fully qualified name of the VPC that Datastream will peer to.
	// Format: projects/{project}/global/{networks}/{name}
	Vpc string `pulumi:"vpc"`
}

// PrivateConnectionVpcPeeringConfigInput is an input type that accepts PrivateConnectionVpcPeeringConfigArgs and PrivateConnectionVpcPeeringConfigOutput values.
// You can construct a concrete instance of `PrivateConnectionVpcPeeringConfigInput` via:
//
//	PrivateConnectionVpcPeeringConfigArgs{...}
type PrivateConnectionVpcPeeringConfigInput interface {
	pulumi.Input

	ToPrivateConnectionVpcPeeringConfigOutput() PrivateConnectionVpcPeeringConfigOutput
	ToPrivateConnectionVpcPeeringConfigOutputWithContext(context.Context) PrivateConnectionVpcPeeringConfigOutput
}

type PrivateConnectionVpcPeeringConfigArgs struct {
	// A free subnet for peering. (CIDR of /29)
	//
	// ***
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// Fully qualified name of the VPC that Datastream will peer to.
	// Format: projects/{project}/global/{networks}/{name}
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (PrivateConnectionVpcPeeringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectionVpcPeeringConfig)(nil)).Elem()
}

func (i PrivateConnectionVpcPeeringConfigArgs) ToPrivateConnectionVpcPeeringConfigOutput() PrivateConnectionVpcPeeringConfigOutput {
	return i.ToPrivateConnectionVpcPeeringConfigOutputWithContext(context.Background())
}

func (i PrivateConnectionVpcPeeringConfigArgs) ToPrivateConnectionVpcPeeringConfigOutputWithContext(ctx context.Context) PrivateConnectionVpcPeeringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionVpcPeeringConfigOutput)
}

func (i PrivateConnectionVpcPeeringConfigArgs) ToPrivateConnectionVpcPeeringConfigPtrOutput() PrivateConnectionVpcPeeringConfigPtrOutput {
	return i.ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (i PrivateConnectionVpcPeeringConfigArgs) ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(ctx context.Context) PrivateConnectionVpcPeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionVpcPeeringConfigOutput).ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(ctx)
}

// PrivateConnectionVpcPeeringConfigPtrInput is an input type that accepts PrivateConnectionVpcPeeringConfigArgs, PrivateConnectionVpcPeeringConfigPtr and PrivateConnectionVpcPeeringConfigPtrOutput values.
// You can construct a concrete instance of `PrivateConnectionVpcPeeringConfigPtrInput` via:
//
//	        PrivateConnectionVpcPeeringConfigArgs{...}
//
//	or:
//
//	        nil
type PrivateConnectionVpcPeeringConfigPtrInput interface {
	pulumi.Input

	ToPrivateConnectionVpcPeeringConfigPtrOutput() PrivateConnectionVpcPeeringConfigPtrOutput
	ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(context.Context) PrivateConnectionVpcPeeringConfigPtrOutput
}

type privateConnectionVpcPeeringConfigPtrType PrivateConnectionVpcPeeringConfigArgs

func PrivateConnectionVpcPeeringConfigPtr(v *PrivateConnectionVpcPeeringConfigArgs) PrivateConnectionVpcPeeringConfigPtrInput {
	return (*privateConnectionVpcPeeringConfigPtrType)(v)
}

func (*privateConnectionVpcPeeringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectionVpcPeeringConfig)(nil)).Elem()
}

func (i *privateConnectionVpcPeeringConfigPtrType) ToPrivateConnectionVpcPeeringConfigPtrOutput() PrivateConnectionVpcPeeringConfigPtrOutput {
	return i.ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (i *privateConnectionVpcPeeringConfigPtrType) ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(ctx context.Context) PrivateConnectionVpcPeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionVpcPeeringConfigPtrOutput)
}

type PrivateConnectionVpcPeeringConfigOutput struct{ *pulumi.OutputState }

func (PrivateConnectionVpcPeeringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectionVpcPeeringConfig)(nil)).Elem()
}

func (o PrivateConnectionVpcPeeringConfigOutput) ToPrivateConnectionVpcPeeringConfigOutput() PrivateConnectionVpcPeeringConfigOutput {
	return o
}

func (o PrivateConnectionVpcPeeringConfigOutput) ToPrivateConnectionVpcPeeringConfigOutputWithContext(ctx context.Context) PrivateConnectionVpcPeeringConfigOutput {
	return o
}

func (o PrivateConnectionVpcPeeringConfigOutput) ToPrivateConnectionVpcPeeringConfigPtrOutput() PrivateConnectionVpcPeeringConfigPtrOutput {
	return o.ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (o PrivateConnectionVpcPeeringConfigOutput) ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(ctx context.Context) PrivateConnectionVpcPeeringConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateConnectionVpcPeeringConfig) *PrivateConnectionVpcPeeringConfig {
		return &v
	}).(PrivateConnectionVpcPeeringConfigPtrOutput)
}

// A free subnet for peering. (CIDR of /29)
//
// ***
func (o PrivateConnectionVpcPeeringConfigOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateConnectionVpcPeeringConfig) string { return v.Subnet }).(pulumi.StringOutput)
}

// Fully qualified name of the VPC that Datastream will peer to.
// Format: projects/{project}/global/{networks}/{name}
func (o PrivateConnectionVpcPeeringConfigOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateConnectionVpcPeeringConfig) string { return v.Vpc }).(pulumi.StringOutput)
}

type PrivateConnectionVpcPeeringConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateConnectionVpcPeeringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectionVpcPeeringConfig)(nil)).Elem()
}

func (o PrivateConnectionVpcPeeringConfigPtrOutput) ToPrivateConnectionVpcPeeringConfigPtrOutput() PrivateConnectionVpcPeeringConfigPtrOutput {
	return o
}

func (o PrivateConnectionVpcPeeringConfigPtrOutput) ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(ctx context.Context) PrivateConnectionVpcPeeringConfigPtrOutput {
	return o
}

func (o PrivateConnectionVpcPeeringConfigPtrOutput) Elem() PrivateConnectionVpcPeeringConfigOutput {
	return o.ApplyT(func(v *PrivateConnectionVpcPeeringConfig) PrivateConnectionVpcPeeringConfig {
		if v != nil {
			return *v
		}
		var ret PrivateConnectionVpcPeeringConfig
		return ret
	}).(PrivateConnectionVpcPeeringConfigOutput)
}

// A free subnet for peering. (CIDR of /29)
//
// ***
func (o PrivateConnectionVpcPeeringConfigPtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnectionVpcPeeringConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Subnet
	}).(pulumi.StringPtrOutput)
}

// Fully qualified name of the VPC that Datastream will peer to.
// Format: projects/{project}/global/{networks}/{name}
func (o PrivateConnectionVpcPeeringConfigPtrOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnectionVpcPeeringConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Vpc
	}).(pulumi.StringPtrOutput)
}

type StreamBackfillAll struct {
	// MySQL data source objects to avoid backfilling.
	// Structure is documented below.
	MysqlExcludedObjects *StreamBackfillAllMysqlExcludedObjects `pulumi:"mysqlExcludedObjects"`
	// PostgreSQL data source objects to avoid backfilling.
	// Structure is documented below.
	OracleExcludedObjects *StreamBackfillAllOracleExcludedObjects `pulumi:"oracleExcludedObjects"`
	// PostgreSQL data source objects to avoid backfilling.
	// Structure is documented below.
	PostgresqlExcludedObjects *StreamBackfillAllPostgresqlExcludedObjects `pulumi:"postgresqlExcludedObjects"`
}

// StreamBackfillAllInput is an input type that accepts StreamBackfillAllArgs and StreamBackfillAllOutput values.
// You can construct a concrete instance of `StreamBackfillAllInput` via:
//
//	StreamBackfillAllArgs{...}
type StreamBackfillAllInput interface {
	pulumi.Input

	ToStreamBackfillAllOutput() StreamBackfillAllOutput
	ToStreamBackfillAllOutputWithContext(context.Context) StreamBackfillAllOutput
}

type StreamBackfillAllArgs struct {
	// MySQL data source objects to avoid backfilling.
	// Structure is documented below.
	MysqlExcludedObjects StreamBackfillAllMysqlExcludedObjectsPtrInput `pulumi:"mysqlExcludedObjects"`
	// PostgreSQL data source objects to avoid backfilling.
	// Structure is documented below.
	OracleExcludedObjects StreamBackfillAllOracleExcludedObjectsPtrInput `pulumi:"oracleExcludedObjects"`
	// PostgreSQL data source objects to avoid backfilling.
	// Structure is documented below.
	PostgresqlExcludedObjects StreamBackfillAllPostgresqlExcludedObjectsPtrInput `pulumi:"postgresqlExcludedObjects"`
}

func (StreamBackfillAllArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAll)(nil)).Elem()
}

func (i StreamBackfillAllArgs) ToStreamBackfillAllOutput() StreamBackfillAllOutput {
	return i.ToStreamBackfillAllOutputWithContext(context.Background())
}

func (i StreamBackfillAllArgs) ToStreamBackfillAllOutputWithContext(ctx context.Context) StreamBackfillAllOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllOutput)
}

func (i StreamBackfillAllArgs) ToStreamBackfillAllPtrOutput() StreamBackfillAllPtrOutput {
	return i.ToStreamBackfillAllPtrOutputWithContext(context.Background())
}

func (i StreamBackfillAllArgs) ToStreamBackfillAllPtrOutputWithContext(ctx context.Context) StreamBackfillAllPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllOutput).ToStreamBackfillAllPtrOutputWithContext(ctx)
}

// StreamBackfillAllPtrInput is an input type that accepts StreamBackfillAllArgs, StreamBackfillAllPtr and StreamBackfillAllPtrOutput values.
// You can construct a concrete instance of `StreamBackfillAllPtrInput` via:
//
//	        StreamBackfillAllArgs{...}
//
//	or:
//
//	        nil
type StreamBackfillAllPtrInput interface {
	pulumi.Input

	ToStreamBackfillAllPtrOutput() StreamBackfillAllPtrOutput
	ToStreamBackfillAllPtrOutputWithContext(context.Context) StreamBackfillAllPtrOutput
}

type streamBackfillAllPtrType StreamBackfillAllArgs

func StreamBackfillAllPtr(v *StreamBackfillAllArgs) StreamBackfillAllPtrInput {
	return (*streamBackfillAllPtrType)(v)
}

func (*streamBackfillAllPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamBackfillAll)(nil)).Elem()
}

func (i *streamBackfillAllPtrType) ToStreamBackfillAllPtrOutput() StreamBackfillAllPtrOutput {
	return i.ToStreamBackfillAllPtrOutputWithContext(context.Background())
}

func (i *streamBackfillAllPtrType) ToStreamBackfillAllPtrOutputWithContext(ctx context.Context) StreamBackfillAllPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllPtrOutput)
}

type StreamBackfillAllOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAll)(nil)).Elem()
}

func (o StreamBackfillAllOutput) ToStreamBackfillAllOutput() StreamBackfillAllOutput {
	return o
}

func (o StreamBackfillAllOutput) ToStreamBackfillAllOutputWithContext(ctx context.Context) StreamBackfillAllOutput {
	return o
}

func (o StreamBackfillAllOutput) ToStreamBackfillAllPtrOutput() StreamBackfillAllPtrOutput {
	return o.ToStreamBackfillAllPtrOutputWithContext(context.Background())
}

func (o StreamBackfillAllOutput) ToStreamBackfillAllPtrOutputWithContext(ctx context.Context) StreamBackfillAllPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamBackfillAll) *StreamBackfillAll {
		return &v
	}).(StreamBackfillAllPtrOutput)
}

// MySQL data source objects to avoid backfilling.
// Structure is documented below.
func (o StreamBackfillAllOutput) MysqlExcludedObjects() StreamBackfillAllMysqlExcludedObjectsPtrOutput {
	return o.ApplyT(func(v StreamBackfillAll) *StreamBackfillAllMysqlExcludedObjects { return v.MysqlExcludedObjects }).(StreamBackfillAllMysqlExcludedObjectsPtrOutput)
}

// PostgreSQL data source objects to avoid backfilling.
// Structure is documented below.
func (o StreamBackfillAllOutput) OracleExcludedObjects() StreamBackfillAllOracleExcludedObjectsPtrOutput {
	return o.ApplyT(func(v StreamBackfillAll) *StreamBackfillAllOracleExcludedObjects { return v.OracleExcludedObjects }).(StreamBackfillAllOracleExcludedObjectsPtrOutput)
}

// PostgreSQL data source objects to avoid backfilling.
// Structure is documented below.
func (o StreamBackfillAllOutput) PostgresqlExcludedObjects() StreamBackfillAllPostgresqlExcludedObjectsPtrOutput {
	return o.ApplyT(func(v StreamBackfillAll) *StreamBackfillAllPostgresqlExcludedObjects {
		return v.PostgresqlExcludedObjects
	}).(StreamBackfillAllPostgresqlExcludedObjectsPtrOutput)
}

type StreamBackfillAllPtrOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamBackfillAll)(nil)).Elem()
}

func (o StreamBackfillAllPtrOutput) ToStreamBackfillAllPtrOutput() StreamBackfillAllPtrOutput {
	return o
}

func (o StreamBackfillAllPtrOutput) ToStreamBackfillAllPtrOutputWithContext(ctx context.Context) StreamBackfillAllPtrOutput {
	return o
}

func (o StreamBackfillAllPtrOutput) Elem() StreamBackfillAllOutput {
	return o.ApplyT(func(v *StreamBackfillAll) StreamBackfillAll {
		if v != nil {
			return *v
		}
		var ret StreamBackfillAll
		return ret
	}).(StreamBackfillAllOutput)
}

// MySQL data source objects to avoid backfilling.
// Structure is documented below.
func (o StreamBackfillAllPtrOutput) MysqlExcludedObjects() StreamBackfillAllMysqlExcludedObjectsPtrOutput {
	return o.ApplyT(func(v *StreamBackfillAll) *StreamBackfillAllMysqlExcludedObjects {
		if v == nil {
			return nil
		}
		return v.MysqlExcludedObjects
	}).(StreamBackfillAllMysqlExcludedObjectsPtrOutput)
}

// PostgreSQL data source objects to avoid backfilling.
// Structure is documented below.
func (o StreamBackfillAllPtrOutput) OracleExcludedObjects() StreamBackfillAllOracleExcludedObjectsPtrOutput {
	return o.ApplyT(func(v *StreamBackfillAll) *StreamBackfillAllOracleExcludedObjects {
		if v == nil {
			return nil
		}
		return v.OracleExcludedObjects
	}).(StreamBackfillAllOracleExcludedObjectsPtrOutput)
}

// PostgreSQL data source objects to avoid backfilling.
// Structure is documented below.
func (o StreamBackfillAllPtrOutput) PostgresqlExcludedObjects() StreamBackfillAllPostgresqlExcludedObjectsPtrOutput {
	return o.ApplyT(func(v *StreamBackfillAll) *StreamBackfillAllPostgresqlExcludedObjects {
		if v == nil {
			return nil
		}
		return v.PostgresqlExcludedObjects
	}).(StreamBackfillAllPostgresqlExcludedObjectsPtrOutput)
}

type StreamBackfillAllMysqlExcludedObjects struct {
	// MySQL databases on the server
	// Structure is documented below.
	MysqlDatabases []StreamBackfillAllMysqlExcludedObjectsMysqlDatabase `pulumi:"mysqlDatabases"`
}

// StreamBackfillAllMysqlExcludedObjectsInput is an input type that accepts StreamBackfillAllMysqlExcludedObjectsArgs and StreamBackfillAllMysqlExcludedObjectsOutput values.
// You can construct a concrete instance of `StreamBackfillAllMysqlExcludedObjectsInput` via:
//
//	StreamBackfillAllMysqlExcludedObjectsArgs{...}
type StreamBackfillAllMysqlExcludedObjectsInput interface {
	pulumi.Input

	ToStreamBackfillAllMysqlExcludedObjectsOutput() StreamBackfillAllMysqlExcludedObjectsOutput
	ToStreamBackfillAllMysqlExcludedObjectsOutputWithContext(context.Context) StreamBackfillAllMysqlExcludedObjectsOutput
}

type StreamBackfillAllMysqlExcludedObjectsArgs struct {
	// MySQL databases on the server
	// Structure is documented below.
	MysqlDatabases StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayInput `pulumi:"mysqlDatabases"`
}

func (StreamBackfillAllMysqlExcludedObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjects)(nil)).Elem()
}

func (i StreamBackfillAllMysqlExcludedObjectsArgs) ToStreamBackfillAllMysqlExcludedObjectsOutput() StreamBackfillAllMysqlExcludedObjectsOutput {
	return i.ToStreamBackfillAllMysqlExcludedObjectsOutputWithContext(context.Background())
}

func (i StreamBackfillAllMysqlExcludedObjectsArgs) ToStreamBackfillAllMysqlExcludedObjectsOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllMysqlExcludedObjectsOutput)
}

func (i StreamBackfillAllMysqlExcludedObjectsArgs) ToStreamBackfillAllMysqlExcludedObjectsPtrOutput() StreamBackfillAllMysqlExcludedObjectsPtrOutput {
	return i.ToStreamBackfillAllMysqlExcludedObjectsPtrOutputWithContext(context.Background())
}

func (i StreamBackfillAllMysqlExcludedObjectsArgs) ToStreamBackfillAllMysqlExcludedObjectsPtrOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllMysqlExcludedObjectsOutput).ToStreamBackfillAllMysqlExcludedObjectsPtrOutputWithContext(ctx)
}

// StreamBackfillAllMysqlExcludedObjectsPtrInput is an input type that accepts StreamBackfillAllMysqlExcludedObjectsArgs, StreamBackfillAllMysqlExcludedObjectsPtr and StreamBackfillAllMysqlExcludedObjectsPtrOutput values.
// You can construct a concrete instance of `StreamBackfillAllMysqlExcludedObjectsPtrInput` via:
//
//	        StreamBackfillAllMysqlExcludedObjectsArgs{...}
//
//	or:
//
//	        nil
type StreamBackfillAllMysqlExcludedObjectsPtrInput interface {
	pulumi.Input

	ToStreamBackfillAllMysqlExcludedObjectsPtrOutput() StreamBackfillAllMysqlExcludedObjectsPtrOutput
	ToStreamBackfillAllMysqlExcludedObjectsPtrOutputWithContext(context.Context) StreamBackfillAllMysqlExcludedObjectsPtrOutput
}

type streamBackfillAllMysqlExcludedObjectsPtrType StreamBackfillAllMysqlExcludedObjectsArgs

func StreamBackfillAllMysqlExcludedObjectsPtr(v *StreamBackfillAllMysqlExcludedObjectsArgs) StreamBackfillAllMysqlExcludedObjectsPtrInput {
	return (*streamBackfillAllMysqlExcludedObjectsPtrType)(v)
}

func (*streamBackfillAllMysqlExcludedObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamBackfillAllMysqlExcludedObjects)(nil)).Elem()
}

func (i *streamBackfillAllMysqlExcludedObjectsPtrType) ToStreamBackfillAllMysqlExcludedObjectsPtrOutput() StreamBackfillAllMysqlExcludedObjectsPtrOutput {
	return i.ToStreamBackfillAllMysqlExcludedObjectsPtrOutputWithContext(context.Background())
}

func (i *streamBackfillAllMysqlExcludedObjectsPtrType) ToStreamBackfillAllMysqlExcludedObjectsPtrOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllMysqlExcludedObjectsPtrOutput)
}

type StreamBackfillAllMysqlExcludedObjectsOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllMysqlExcludedObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjects)(nil)).Elem()
}

func (o StreamBackfillAllMysqlExcludedObjectsOutput) ToStreamBackfillAllMysqlExcludedObjectsOutput() StreamBackfillAllMysqlExcludedObjectsOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsOutput) ToStreamBackfillAllMysqlExcludedObjectsOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsOutput) ToStreamBackfillAllMysqlExcludedObjectsPtrOutput() StreamBackfillAllMysqlExcludedObjectsPtrOutput {
	return o.ToStreamBackfillAllMysqlExcludedObjectsPtrOutputWithContext(context.Background())
}

func (o StreamBackfillAllMysqlExcludedObjectsOutput) ToStreamBackfillAllMysqlExcludedObjectsPtrOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamBackfillAllMysqlExcludedObjects) *StreamBackfillAllMysqlExcludedObjects {
		return &v
	}).(StreamBackfillAllMysqlExcludedObjectsPtrOutput)
}

// MySQL databases on the server
// Structure is documented below.
func (o StreamBackfillAllMysqlExcludedObjectsOutput) MysqlDatabases() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput {
	return o.ApplyT(func(v StreamBackfillAllMysqlExcludedObjects) []StreamBackfillAllMysqlExcludedObjectsMysqlDatabase {
		return v.MysqlDatabases
	}).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput)
}

type StreamBackfillAllMysqlExcludedObjectsPtrOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllMysqlExcludedObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamBackfillAllMysqlExcludedObjects)(nil)).Elem()
}

func (o StreamBackfillAllMysqlExcludedObjectsPtrOutput) ToStreamBackfillAllMysqlExcludedObjectsPtrOutput() StreamBackfillAllMysqlExcludedObjectsPtrOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsPtrOutput) ToStreamBackfillAllMysqlExcludedObjectsPtrOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsPtrOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsPtrOutput) Elem() StreamBackfillAllMysqlExcludedObjectsOutput {
	return o.ApplyT(func(v *StreamBackfillAllMysqlExcludedObjects) StreamBackfillAllMysqlExcludedObjects {
		if v != nil {
			return *v
		}
		var ret StreamBackfillAllMysqlExcludedObjects
		return ret
	}).(StreamBackfillAllMysqlExcludedObjectsOutput)
}

// MySQL databases on the server
// Structure is documented below.
func (o StreamBackfillAllMysqlExcludedObjectsPtrOutput) MysqlDatabases() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput {
	return o.ApplyT(func(v *StreamBackfillAllMysqlExcludedObjects) []StreamBackfillAllMysqlExcludedObjectsMysqlDatabase {
		if v == nil {
			return nil
		}
		return v.MysqlDatabases
	}).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput)
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabase struct {
	// Database name.
	Database string `pulumi:"database"`
	// Tables in the database.
	// Structure is documented below.
	MysqlTables []StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable `pulumi:"mysqlTables"`
}

// StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseInput is an input type that accepts StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArgs and StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput values.
// You can construct a concrete instance of `StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseInput` via:
//
//	StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArgs{...}
type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseInput interface {
	pulumi.Input

	ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput
	ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutputWithContext(context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArgs struct {
	// Database name.
	Database pulumi.StringInput `pulumi:"database"`
	// Tables in the database.
	// Structure is documented below.
	MysqlTables StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayInput `pulumi:"mysqlTables"`
}

func (StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsMysqlDatabase)(nil)).Elem()
}

func (i StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArgs) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput {
	return i.ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutputWithContext(context.Background())
}

func (i StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArgs) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput)
}

// StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayInput is an input type that accepts StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArray and StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput values.
// You can construct a concrete instance of `StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayInput` via:
//
//	StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArray{ StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArgs{...} }
type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayInput interface {
	pulumi.Input

	ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput
	ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutputWithContext(context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArray []StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseInput

func (StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllMysqlExcludedObjectsMysqlDatabase)(nil)).Elem()
}

func (i StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArray) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput {
	return i.ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutputWithContext(context.Background())
}

func (i StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArray) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput)
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsMysqlDatabase)(nil)).Elem()
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput {
	return o
}

// Database name.
func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v StreamBackfillAllMysqlExcludedObjectsMysqlDatabase) string { return v.Database }).(pulumi.StringOutput)
}

// Tables in the database.
// Structure is documented below.
func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput) MysqlTables() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput {
	return o.ApplyT(func(v StreamBackfillAllMysqlExcludedObjectsMysqlDatabase) []StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable {
		return v.MysqlTables
	}).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput)
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllMysqlExcludedObjectsMysqlDatabase)(nil)).Elem()
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput) Index(i pulumi.IntInput) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamBackfillAllMysqlExcludedObjectsMysqlDatabase {
		return vs[0].([]StreamBackfillAllMysqlExcludedObjectsMysqlDatabase)[vs[1].(int)]
	}).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput)
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable struct {
	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	MysqlColumns []StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn `pulumi:"mysqlColumns"`
	// Table name.
	Table string `pulumi:"table"`
}

// StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableInput is an input type that accepts StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArgs and StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput values.
// You can construct a concrete instance of `StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableInput` via:
//
//	StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArgs{...}
type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableInput interface {
	pulumi.Input

	ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput
	ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutputWithContext(context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArgs struct {
	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	MysqlColumns StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput `pulumi:"mysqlColumns"`
	// Table name.
	Table pulumi.StringInput `pulumi:"table"`
}

func (StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable)(nil)).Elem()
}

func (i StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArgs) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput {
	return i.ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutputWithContext(context.Background())
}

func (i StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArgs) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput)
}

// StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayInput is an input type that accepts StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArray and StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput values.
// You can construct a concrete instance of `StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayInput` via:
//
//	StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArray{ StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArgs{...} }
type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayInput interface {
	pulumi.Input

	ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput
	ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutputWithContext(context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArray []StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableInput

func (StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable)(nil)).Elem()
}

func (i StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArray) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput {
	return i.ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutputWithContext(context.Background())
}

func (i StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArray) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput)
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable)(nil)).Elem()
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput {
	return o
}

// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
// Structure is documented below.
func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput) MysqlColumns() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return o.ApplyT(func(v StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable) []StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn {
		return v.MysqlColumns
	}).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput)
}

// Table name.
func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable) string { return v.Table }).(pulumi.StringOutput)
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable)(nil)).Elem()
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput) Index(i pulumi.IntInput) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable {
		return vs[0].([]StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTable)[vs[1].(int)]
	}).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput)
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn struct {
	// Column collation.
	Collation *string `pulumi:"collation"`
	// Column name.
	Column *string `pulumi:"column"`
	// The MySQL data type. Full data types list can be found here:
	// https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType *string `pulumi:"dataType"`
	// (Output)
	// Column length.
	Length *int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
}

// StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnInput is an input type that accepts StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArgs and StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput values.
// You can construct a concrete instance of `StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnInput` via:
//
//	StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArgs{...}
type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnInput interface {
	pulumi.Input

	ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput
	ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutputWithContext(context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArgs struct {
	// Column collation.
	Collation pulumi.StringPtrInput `pulumi:"collation"`
	// Column name.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The MySQL data type. Full data types list can be found here:
	// https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// (Output)
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
}

func (StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn)(nil)).Elem()
}

func (i StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArgs) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return i.ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutputWithContext(context.Background())
}

func (i StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArgs) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput)
}

// StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput is an input type that accepts StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArray and StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput values.
// You can construct a concrete instance of `StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput` via:
//
//	StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArray{ StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArgs{...} }
type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput interface {
	pulumi.Input

	ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput
	ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutputWithContext(context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArray []StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnInput

func (StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn)(nil)).Elem()
}

func (i StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArray) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return i.ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutputWithContext(context.Background())
}

func (i StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArray) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput)
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn)(nil)).Elem()
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return o
}

// Column collation.
func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn) *string {
		return v.Collation
	}).(pulumi.StringPtrOutput)
}

// Column name.
func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn) *string {
		return v.Column
	}).(pulumi.StringPtrOutput)
}

// The MySQL data type. Full data types list can be found here:
// https://dev.mysql.com/doc/refman/8.0/en/data-types.html
func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn) *string {
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Column length.
func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn) *int { return v.Length }).(pulumi.IntPtrOutput)
}

// Whether or not the column can accept a null value.
func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn) *bool {
		return v.Nullable
	}).(pulumi.BoolPtrOutput)
}

// The ordinal position of the column in the table.
func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn) *int {
		return v.OrdinalPosition
	}).(pulumi.IntPtrOutput)
}

// Whether or not the column represents a primary key.
func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn) *bool {
		return v.PrimaryKey
	}).(pulumi.BoolPtrOutput)
}

type StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn)(nil)).Elem()
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput() StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput) ToStreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutputWithContext(ctx context.Context) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return o
}

func (o StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput) Index(i pulumi.IntInput) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn {
		return vs[0].([]StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumn)[vs[1].(int)]
	}).(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput)
}

type StreamBackfillAllOracleExcludedObjects struct {
	// Oracle schemas/databases in the database server
	// Structure is documented below.
	OracleSchemas []StreamBackfillAllOracleExcludedObjectsOracleSchema `pulumi:"oracleSchemas"`
}

// StreamBackfillAllOracleExcludedObjectsInput is an input type that accepts StreamBackfillAllOracleExcludedObjectsArgs and StreamBackfillAllOracleExcludedObjectsOutput values.
// You can construct a concrete instance of `StreamBackfillAllOracleExcludedObjectsInput` via:
//
//	StreamBackfillAllOracleExcludedObjectsArgs{...}
type StreamBackfillAllOracleExcludedObjectsInput interface {
	pulumi.Input

	ToStreamBackfillAllOracleExcludedObjectsOutput() StreamBackfillAllOracleExcludedObjectsOutput
	ToStreamBackfillAllOracleExcludedObjectsOutputWithContext(context.Context) StreamBackfillAllOracleExcludedObjectsOutput
}

type StreamBackfillAllOracleExcludedObjectsArgs struct {
	// Oracle schemas/databases in the database server
	// Structure is documented below.
	OracleSchemas StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayInput `pulumi:"oracleSchemas"`
}

func (StreamBackfillAllOracleExcludedObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllOracleExcludedObjects)(nil)).Elem()
}

func (i StreamBackfillAllOracleExcludedObjectsArgs) ToStreamBackfillAllOracleExcludedObjectsOutput() StreamBackfillAllOracleExcludedObjectsOutput {
	return i.ToStreamBackfillAllOracleExcludedObjectsOutputWithContext(context.Background())
}

func (i StreamBackfillAllOracleExcludedObjectsArgs) ToStreamBackfillAllOracleExcludedObjectsOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllOracleExcludedObjectsOutput)
}

func (i StreamBackfillAllOracleExcludedObjectsArgs) ToStreamBackfillAllOracleExcludedObjectsPtrOutput() StreamBackfillAllOracleExcludedObjectsPtrOutput {
	return i.ToStreamBackfillAllOracleExcludedObjectsPtrOutputWithContext(context.Background())
}

func (i StreamBackfillAllOracleExcludedObjectsArgs) ToStreamBackfillAllOracleExcludedObjectsPtrOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllOracleExcludedObjectsOutput).ToStreamBackfillAllOracleExcludedObjectsPtrOutputWithContext(ctx)
}

// StreamBackfillAllOracleExcludedObjectsPtrInput is an input type that accepts StreamBackfillAllOracleExcludedObjectsArgs, StreamBackfillAllOracleExcludedObjectsPtr and StreamBackfillAllOracleExcludedObjectsPtrOutput values.
// You can construct a concrete instance of `StreamBackfillAllOracleExcludedObjectsPtrInput` via:
//
//	        StreamBackfillAllOracleExcludedObjectsArgs{...}
//
//	or:
//
//	        nil
type StreamBackfillAllOracleExcludedObjectsPtrInput interface {
	pulumi.Input

	ToStreamBackfillAllOracleExcludedObjectsPtrOutput() StreamBackfillAllOracleExcludedObjectsPtrOutput
	ToStreamBackfillAllOracleExcludedObjectsPtrOutputWithContext(context.Context) StreamBackfillAllOracleExcludedObjectsPtrOutput
}

type streamBackfillAllOracleExcludedObjectsPtrType StreamBackfillAllOracleExcludedObjectsArgs

func StreamBackfillAllOracleExcludedObjectsPtr(v *StreamBackfillAllOracleExcludedObjectsArgs) StreamBackfillAllOracleExcludedObjectsPtrInput {
	return (*streamBackfillAllOracleExcludedObjectsPtrType)(v)
}

func (*streamBackfillAllOracleExcludedObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamBackfillAllOracleExcludedObjects)(nil)).Elem()
}

func (i *streamBackfillAllOracleExcludedObjectsPtrType) ToStreamBackfillAllOracleExcludedObjectsPtrOutput() StreamBackfillAllOracleExcludedObjectsPtrOutput {
	return i.ToStreamBackfillAllOracleExcludedObjectsPtrOutputWithContext(context.Background())
}

func (i *streamBackfillAllOracleExcludedObjectsPtrType) ToStreamBackfillAllOracleExcludedObjectsPtrOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllOracleExcludedObjectsPtrOutput)
}

type StreamBackfillAllOracleExcludedObjectsOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllOracleExcludedObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllOracleExcludedObjects)(nil)).Elem()
}

func (o StreamBackfillAllOracleExcludedObjectsOutput) ToStreamBackfillAllOracleExcludedObjectsOutput() StreamBackfillAllOracleExcludedObjectsOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsOutput) ToStreamBackfillAllOracleExcludedObjectsOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsOutput) ToStreamBackfillAllOracleExcludedObjectsPtrOutput() StreamBackfillAllOracleExcludedObjectsPtrOutput {
	return o.ToStreamBackfillAllOracleExcludedObjectsPtrOutputWithContext(context.Background())
}

func (o StreamBackfillAllOracleExcludedObjectsOutput) ToStreamBackfillAllOracleExcludedObjectsPtrOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamBackfillAllOracleExcludedObjects) *StreamBackfillAllOracleExcludedObjects {
		return &v
	}).(StreamBackfillAllOracleExcludedObjectsPtrOutput)
}

// Oracle schemas/databases in the database server
// Structure is documented below.
func (o StreamBackfillAllOracleExcludedObjectsOutput) OracleSchemas() StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjects) []StreamBackfillAllOracleExcludedObjectsOracleSchema {
		return v.OracleSchemas
	}).(StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput)
}

type StreamBackfillAllOracleExcludedObjectsPtrOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllOracleExcludedObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamBackfillAllOracleExcludedObjects)(nil)).Elem()
}

func (o StreamBackfillAllOracleExcludedObjectsPtrOutput) ToStreamBackfillAllOracleExcludedObjectsPtrOutput() StreamBackfillAllOracleExcludedObjectsPtrOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsPtrOutput) ToStreamBackfillAllOracleExcludedObjectsPtrOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsPtrOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsPtrOutput) Elem() StreamBackfillAllOracleExcludedObjectsOutput {
	return o.ApplyT(func(v *StreamBackfillAllOracleExcludedObjects) StreamBackfillAllOracleExcludedObjects {
		if v != nil {
			return *v
		}
		var ret StreamBackfillAllOracleExcludedObjects
		return ret
	}).(StreamBackfillAllOracleExcludedObjectsOutput)
}

// Oracle schemas/databases in the database server
// Structure is documented below.
func (o StreamBackfillAllOracleExcludedObjectsPtrOutput) OracleSchemas() StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput {
	return o.ApplyT(func(v *StreamBackfillAllOracleExcludedObjects) []StreamBackfillAllOracleExcludedObjectsOracleSchema {
		if v == nil {
			return nil
		}
		return v.OracleSchemas
	}).(StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput)
}

type StreamBackfillAllOracleExcludedObjectsOracleSchema struct {
	// Tables in the database.
	// Structure is documented below.
	OracleTables []StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable `pulumi:"oracleTables"`
	// Schema name.
	Schema string `pulumi:"schema"`
}

// StreamBackfillAllOracleExcludedObjectsOracleSchemaInput is an input type that accepts StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs and StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput values.
// You can construct a concrete instance of `StreamBackfillAllOracleExcludedObjectsOracleSchemaInput` via:
//
//	StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs{...}
type StreamBackfillAllOracleExcludedObjectsOracleSchemaInput interface {
	pulumi.Input

	ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput
	ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOutputWithContext(context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs struct {
	// Tables in the database.
	// Structure is documented below.
	OracleTables StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayInput `pulumi:"oracleTables"`
	// Schema name.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsOracleSchema)(nil)).Elem()
}

func (i StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput {
	return i.ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOutputWithContext(context.Background())
}

func (i StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput)
}

// StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayInput is an input type that accepts StreamBackfillAllOracleExcludedObjectsOracleSchemaArray and StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput values.
// You can construct a concrete instance of `StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayInput` via:
//
//	StreamBackfillAllOracleExcludedObjectsOracleSchemaArray{ StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs{...} }
type StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayInput interface {
	pulumi.Input

	ToStreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput
	ToStreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutputWithContext(context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaArray []StreamBackfillAllOracleExcludedObjectsOracleSchemaInput

func (StreamBackfillAllOracleExcludedObjectsOracleSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllOracleExcludedObjectsOracleSchema)(nil)).Elem()
}

func (i StreamBackfillAllOracleExcludedObjectsOracleSchemaArray) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput {
	return i.ToStreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutputWithContext(context.Background())
}

func (i StreamBackfillAllOracleExcludedObjectsOracleSchemaArray) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput)
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsOracleSchema)(nil)).Elem()
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput {
	return o
}

// Tables in the database.
// Structure is documented below.
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput) OracleTables() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchema) []StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable {
		return v.OracleTables
	}).(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput)
}

// Schema name.
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchema) string { return v.Schema }).(pulumi.StringOutput)
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllOracleExcludedObjectsOracleSchema)(nil)).Elem()
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput) Index(i pulumi.IntInput) StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamBackfillAllOracleExcludedObjectsOracleSchema {
		return vs[0].([]StreamBackfillAllOracleExcludedObjectsOracleSchema)[vs[1].(int)]
	}).(StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput)
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable struct {
	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	OracleColumns []StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn `pulumi:"oracleColumns"`
	// Table name.
	Table string `pulumi:"table"`
}

// StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableInput is an input type that accepts StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs and StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput values.
// You can construct a concrete instance of `StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableInput` via:
//
//	StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs{...}
type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableInput interface {
	pulumi.Input

	ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput
	ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutputWithContext(context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs struct {
	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	OracleColumns StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayInput `pulumi:"oracleColumns"`
	// Table name.
	Table pulumi.StringInput `pulumi:"table"`
}

func (StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable)(nil)).Elem()
}

func (i StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput {
	return i.ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutputWithContext(context.Background())
}

func (i StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput)
}

// StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayInput is an input type that accepts StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArray and StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput values.
// You can construct a concrete instance of `StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayInput` via:
//
//	StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArray{ StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs{...} }
type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayInput interface {
	pulumi.Input

	ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput
	ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutputWithContext(context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArray []StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableInput

func (StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable)(nil)).Elem()
}

func (i StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArray) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput {
	return i.ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutputWithContext(context.Background())
}

func (i StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArray) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput)
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable)(nil)).Elem()
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput {
	return o
}

// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
// Structure is documented below.
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput) OracleColumns() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable) []StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn {
		return v.OracleColumns
	}).(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput)
}

// Table name.
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable) string { return v.Table }).(pulumi.StringOutput)
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable)(nil)).Elem()
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput) Index(i pulumi.IntInput) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable {
		return vs[0].([]StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable)[vs[1].(int)]
	}).(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput)
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn struct {
	// Column name.
	Column *string `pulumi:"column"`
	// The Oracle data type. Full data types list can be found here:
	// https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html
	DataType *string `pulumi:"dataType"`
	// (Output)
	// Column encoding.
	Encoding *string `pulumi:"encoding"`
	// (Output)
	// Column length.
	Length *int `pulumi:"length"`
	// (Output)
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// (Output)
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// (Output)
	// Column precision.
	Precision *int `pulumi:"precision"`
	// (Output)
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
	// (Output)
	// Column scale.
	Scale *int `pulumi:"scale"`
}

// StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnInput is an input type that accepts StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArgs and StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput values.
// You can construct a concrete instance of `StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnInput` via:
//
//	StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArgs{...}
type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnInput interface {
	pulumi.Input

	ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput
	ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutputWithContext(context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArgs struct {
	// Column name.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The Oracle data type. Full data types list can be found here:
	// https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// (Output)
	// Column encoding.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// (Output)
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// (Output)
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// (Output)
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// (Output)
	// Column precision.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
	// (Output)
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
	// (Output)
	// Column scale.
	Scale pulumi.IntPtrInput `pulumi:"scale"`
}

func (StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn)(nil)).Elem()
}

func (i StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArgs) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput {
	return i.ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutputWithContext(context.Background())
}

func (i StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArgs) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput)
}

// StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayInput is an input type that accepts StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArray and StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput values.
// You can construct a concrete instance of `StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayInput` via:
//
//	StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArray{ StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArgs{...} }
type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayInput interface {
	pulumi.Input

	ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput
	ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutputWithContext(context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArray []StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnInput

func (StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn)(nil)).Elem()
}

func (i StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArray) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return i.ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutputWithContext(context.Background())
}

func (i StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArray) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput)
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn)(nil)).Elem()
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput {
	return o
}

// Column name.
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn) *string {
		return v.Column
	}).(pulumi.StringPtrOutput)
}

// The Oracle data type. Full data types list can be found here:
// https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn) *string {
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Column encoding.
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn) *string {
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Column length.
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn) *int {
		return v.Length
	}).(pulumi.IntPtrOutput)
}

// (Output)
// Whether or not the column can accept a null value.
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn) *bool {
		return v.Nullable
	}).(pulumi.BoolPtrOutput)
}

// (Output)
// The ordinal position of the column in the table.
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn) *int {
		return v.OrdinalPosition
	}).(pulumi.IntPtrOutput)
}

// (Output)
// Column precision.
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn) *int {
		return v.Precision
	}).(pulumi.IntPtrOutput)
}

// (Output)
// Whether or not the column represents a primary key.
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn) *bool {
		return v.PrimaryKey
	}).(pulumi.BoolPtrOutput)
}

// (Output)
// Column scale.
func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput) Scale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn) *int { return v.Scale }).(pulumi.IntPtrOutput)
}

type StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn)(nil)).Elem()
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput() StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput) ToStreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutputWithContext(ctx context.Context) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return o
}

func (o StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput) Index(i pulumi.IntInput) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn {
		return vs[0].([]StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumn)[vs[1].(int)]
	}).(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput)
}

type StreamBackfillAllPostgresqlExcludedObjects struct {
	// PostgreSQL schemas on the server
	// Structure is documented below.
	PostgresqlSchemas []StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema `pulumi:"postgresqlSchemas"`
}

// StreamBackfillAllPostgresqlExcludedObjectsInput is an input type that accepts StreamBackfillAllPostgresqlExcludedObjectsArgs and StreamBackfillAllPostgresqlExcludedObjectsOutput values.
// You can construct a concrete instance of `StreamBackfillAllPostgresqlExcludedObjectsInput` via:
//
//	StreamBackfillAllPostgresqlExcludedObjectsArgs{...}
type StreamBackfillAllPostgresqlExcludedObjectsInput interface {
	pulumi.Input

	ToStreamBackfillAllPostgresqlExcludedObjectsOutput() StreamBackfillAllPostgresqlExcludedObjectsOutput
	ToStreamBackfillAllPostgresqlExcludedObjectsOutputWithContext(context.Context) StreamBackfillAllPostgresqlExcludedObjectsOutput
}

type StreamBackfillAllPostgresqlExcludedObjectsArgs struct {
	// PostgreSQL schemas on the server
	// Structure is documented below.
	PostgresqlSchemas StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayInput `pulumi:"postgresqlSchemas"`
}

func (StreamBackfillAllPostgresqlExcludedObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjects)(nil)).Elem()
}

func (i StreamBackfillAllPostgresqlExcludedObjectsArgs) ToStreamBackfillAllPostgresqlExcludedObjectsOutput() StreamBackfillAllPostgresqlExcludedObjectsOutput {
	return i.ToStreamBackfillAllPostgresqlExcludedObjectsOutputWithContext(context.Background())
}

func (i StreamBackfillAllPostgresqlExcludedObjectsArgs) ToStreamBackfillAllPostgresqlExcludedObjectsOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllPostgresqlExcludedObjectsOutput)
}

func (i StreamBackfillAllPostgresqlExcludedObjectsArgs) ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutput() StreamBackfillAllPostgresqlExcludedObjectsPtrOutput {
	return i.ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutputWithContext(context.Background())
}

func (i StreamBackfillAllPostgresqlExcludedObjectsArgs) ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllPostgresqlExcludedObjectsOutput).ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutputWithContext(ctx)
}

// StreamBackfillAllPostgresqlExcludedObjectsPtrInput is an input type that accepts StreamBackfillAllPostgresqlExcludedObjectsArgs, StreamBackfillAllPostgresqlExcludedObjectsPtr and StreamBackfillAllPostgresqlExcludedObjectsPtrOutput values.
// You can construct a concrete instance of `StreamBackfillAllPostgresqlExcludedObjectsPtrInput` via:
//
//	        StreamBackfillAllPostgresqlExcludedObjectsArgs{...}
//
//	or:
//
//	        nil
type StreamBackfillAllPostgresqlExcludedObjectsPtrInput interface {
	pulumi.Input

	ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutput() StreamBackfillAllPostgresqlExcludedObjectsPtrOutput
	ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutputWithContext(context.Context) StreamBackfillAllPostgresqlExcludedObjectsPtrOutput
}

type streamBackfillAllPostgresqlExcludedObjectsPtrType StreamBackfillAllPostgresqlExcludedObjectsArgs

func StreamBackfillAllPostgresqlExcludedObjectsPtr(v *StreamBackfillAllPostgresqlExcludedObjectsArgs) StreamBackfillAllPostgresqlExcludedObjectsPtrInput {
	return (*streamBackfillAllPostgresqlExcludedObjectsPtrType)(v)
}

func (*streamBackfillAllPostgresqlExcludedObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamBackfillAllPostgresqlExcludedObjects)(nil)).Elem()
}

func (i *streamBackfillAllPostgresqlExcludedObjectsPtrType) ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutput() StreamBackfillAllPostgresqlExcludedObjectsPtrOutput {
	return i.ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutputWithContext(context.Background())
}

func (i *streamBackfillAllPostgresqlExcludedObjectsPtrType) ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllPostgresqlExcludedObjectsPtrOutput)
}

type StreamBackfillAllPostgresqlExcludedObjectsOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllPostgresqlExcludedObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjects)(nil)).Elem()
}

func (o StreamBackfillAllPostgresqlExcludedObjectsOutput) ToStreamBackfillAllPostgresqlExcludedObjectsOutput() StreamBackfillAllPostgresqlExcludedObjectsOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsOutput) ToStreamBackfillAllPostgresqlExcludedObjectsOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutput() StreamBackfillAllPostgresqlExcludedObjectsPtrOutput {
	return o.ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutputWithContext(context.Background())
}

func (o StreamBackfillAllPostgresqlExcludedObjectsOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamBackfillAllPostgresqlExcludedObjects) *StreamBackfillAllPostgresqlExcludedObjects {
		return &v
	}).(StreamBackfillAllPostgresqlExcludedObjectsPtrOutput)
}

// PostgreSQL schemas on the server
// Structure is documented below.
func (o StreamBackfillAllPostgresqlExcludedObjectsOutput) PostgresqlSchemas() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjects) []StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema {
		return v.PostgresqlSchemas
	}).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput)
}

type StreamBackfillAllPostgresqlExcludedObjectsPtrOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllPostgresqlExcludedObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamBackfillAllPostgresqlExcludedObjects)(nil)).Elem()
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPtrOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutput() StreamBackfillAllPostgresqlExcludedObjectsPtrOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPtrOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPtrOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPtrOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPtrOutput) Elem() StreamBackfillAllPostgresqlExcludedObjectsOutput {
	return o.ApplyT(func(v *StreamBackfillAllPostgresqlExcludedObjects) StreamBackfillAllPostgresqlExcludedObjects {
		if v != nil {
			return *v
		}
		var ret StreamBackfillAllPostgresqlExcludedObjects
		return ret
	}).(StreamBackfillAllPostgresqlExcludedObjectsOutput)
}

// PostgreSQL schemas on the server
// Structure is documented below.
func (o StreamBackfillAllPostgresqlExcludedObjectsPtrOutput) PostgresqlSchemas() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput {
	return o.ApplyT(func(v *StreamBackfillAllPostgresqlExcludedObjects) []StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema {
		if v == nil {
			return nil
		}
		return v.PostgresqlSchemas
	}).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput)
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema struct {
	// Tables in the schema.
	// Structure is documented below.
	PostgresqlTables []StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable `pulumi:"postgresqlTables"`
	// Database name.
	Schema string `pulumi:"schema"`
}

// StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaInput is an input type that accepts StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArgs and StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput values.
// You can construct a concrete instance of `StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaInput` via:
//
//	StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArgs{...}
type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaInput interface {
	pulumi.Input

	ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput
	ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutputWithContext(context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArgs struct {
	// Tables in the schema.
	// Structure is documented below.
	PostgresqlTables StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayInput `pulumi:"postgresqlTables"`
	// Database name.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema)(nil)).Elem()
}

func (i StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArgs) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput {
	return i.ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutputWithContext(context.Background())
}

func (i StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArgs) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput)
}

// StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayInput is an input type that accepts StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArray and StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput values.
// You can construct a concrete instance of `StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayInput` via:
//
//	StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArray{ StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArgs{...} }
type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayInput interface {
	pulumi.Input

	ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput
	ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutputWithContext(context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArray []StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaInput

func (StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema)(nil)).Elem()
}

func (i StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArray) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput {
	return i.ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutputWithContext(context.Background())
}

func (i StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArray) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput)
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema)(nil)).Elem()
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput {
	return o
}

// Tables in the schema.
// Structure is documented below.
func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput) PostgresqlTables() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema) []StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable {
		return v.PostgresqlTables
	}).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput)
}

// Database name.
func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema) string { return v.Schema }).(pulumi.StringOutput)
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema)(nil)).Elem()
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput) Index(i pulumi.IntInput) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema {
		return vs[0].([]StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchema)[vs[1].(int)]
	}).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput)
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable struct {
	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	PostgresqlColumns []StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn `pulumi:"postgresqlColumns"`
	// Table name.
	Table string `pulumi:"table"`
}

// StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableInput is an input type that accepts StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArgs and StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput values.
// You can construct a concrete instance of `StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableInput` via:
//
//	StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArgs{...}
type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableInput interface {
	pulumi.Input

	ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput
	ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutputWithContext(context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArgs struct {
	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	PostgresqlColumns StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput `pulumi:"postgresqlColumns"`
	// Table name.
	Table pulumi.StringInput `pulumi:"table"`
}

func (StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable)(nil)).Elem()
}

func (i StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArgs) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput {
	return i.ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutputWithContext(context.Background())
}

func (i StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArgs) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput)
}

// StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayInput is an input type that accepts StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArray and StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput values.
// You can construct a concrete instance of `StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayInput` via:
//
//	StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArray{ StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArgs{...} }
type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayInput interface {
	pulumi.Input

	ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput
	ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutputWithContext(context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArray []StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableInput

func (StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable)(nil)).Elem()
}

func (i StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArray) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return i.ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutputWithContext(context.Background())
}

func (i StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArray) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput)
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable)(nil)).Elem()
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput {
	return o
}

// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
// Structure is documented below.
func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput) PostgresqlColumns() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable) []StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn {
		return v.PostgresqlColumns
	}).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput)
}

// Table name.
func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable) string {
		return v.Table
	}).(pulumi.StringOutput)
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable)(nil)).Elem()
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput) Index(i pulumi.IntInput) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable {
		return vs[0].([]StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTable)[vs[1].(int)]
	}).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput)
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn struct {
	// Column name.
	Column *string `pulumi:"column"`
	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `pulumi:"dataType"`
	// (Output)
	// Column length.
	Length *int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// (Output)
	// Column precision.
	Precision *int `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
	// (Output)
	// Column scale.
	Scale *int `pulumi:"scale"`
}

// StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput is an input type that accepts StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs and StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput values.
// You can construct a concrete instance of `StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput` via:
//
//	StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs{...}
type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput interface {
	pulumi.Input

	ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput
	ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutputWithContext(context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs struct {
	// Column name.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// (Output)
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// (Output)
	// Column precision.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
	// (Output)
	// Column scale.
	Scale pulumi.IntPtrInput `pulumi:"scale"`
}

func (StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)(nil)).Elem()
}

func (i StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return i.ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutputWithContext(context.Background())
}

func (i StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput)
}

// StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput is an input type that accepts StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray and StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput values.
// You can construct a concrete instance of `StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput` via:
//
//	StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray{ StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs{...} }
type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput interface {
	pulumi.Input

	ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput
	ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutputWithContext(context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray []StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput

func (StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)(nil)).Elem()
}

func (i StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return i.ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutputWithContext(context.Background())
}

func (i StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput)
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)(nil)).Elem()
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return o
}

// Column name.
func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *string {
		return v.Column
	}).(pulumi.StringPtrOutput)
}

// The PostgreSQL data type. Full data types list can be found here:
// https://www.postgresql.org/docs/current/datatype.html
func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *string {
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Column length.
func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *int {
		return v.Length
	}).(pulumi.IntPtrOutput)
}

// Whether or not the column can accept a null value.
func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *bool {
		return v.Nullable
	}).(pulumi.BoolPtrOutput)
}

// The ordinal position of the column in the table.
func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *int {
		return v.OrdinalPosition
	}).(pulumi.IntPtrOutput)
}

// (Output)
// Column precision.
func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *int {
		return v.Precision
	}).(pulumi.IntPtrOutput)
}

// Whether or not the column represents a primary key.
func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *bool {
		return v.PrimaryKey
	}).(pulumi.BoolPtrOutput)
}

// (Output)
// Column scale.
func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Scale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *int {
		return v.Scale
	}).(pulumi.IntPtrOutput)
}

type StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput struct{ *pulumi.OutputState }

func (StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)(nil)).Elem()
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput() StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput) ToStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutputWithContext(ctx context.Context) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return o
}

func (o StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput) Index(i pulumi.IntInput) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn {
		return vs[0].([]StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)[vs[1].(int)]
	}).(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput)
}

type StreamBackfillNone struct {
}

// StreamBackfillNoneInput is an input type that accepts StreamBackfillNoneArgs and StreamBackfillNoneOutput values.
// You can construct a concrete instance of `StreamBackfillNoneInput` via:
//
//	StreamBackfillNoneArgs{...}
type StreamBackfillNoneInput interface {
	pulumi.Input

	ToStreamBackfillNoneOutput() StreamBackfillNoneOutput
	ToStreamBackfillNoneOutputWithContext(context.Context) StreamBackfillNoneOutput
}

type StreamBackfillNoneArgs struct {
}

func (StreamBackfillNoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillNone)(nil)).Elem()
}

func (i StreamBackfillNoneArgs) ToStreamBackfillNoneOutput() StreamBackfillNoneOutput {
	return i.ToStreamBackfillNoneOutputWithContext(context.Background())
}

func (i StreamBackfillNoneArgs) ToStreamBackfillNoneOutputWithContext(ctx context.Context) StreamBackfillNoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillNoneOutput)
}

func (i StreamBackfillNoneArgs) ToStreamBackfillNonePtrOutput() StreamBackfillNonePtrOutput {
	return i.ToStreamBackfillNonePtrOutputWithContext(context.Background())
}

func (i StreamBackfillNoneArgs) ToStreamBackfillNonePtrOutputWithContext(ctx context.Context) StreamBackfillNonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillNoneOutput).ToStreamBackfillNonePtrOutputWithContext(ctx)
}

// StreamBackfillNonePtrInput is an input type that accepts StreamBackfillNoneArgs, StreamBackfillNonePtr and StreamBackfillNonePtrOutput values.
// You can construct a concrete instance of `StreamBackfillNonePtrInput` via:
//
//	        StreamBackfillNoneArgs{...}
//
//	or:
//
//	        nil
type StreamBackfillNonePtrInput interface {
	pulumi.Input

	ToStreamBackfillNonePtrOutput() StreamBackfillNonePtrOutput
	ToStreamBackfillNonePtrOutputWithContext(context.Context) StreamBackfillNonePtrOutput
}

type streamBackfillNonePtrType StreamBackfillNoneArgs

func StreamBackfillNonePtr(v *StreamBackfillNoneArgs) StreamBackfillNonePtrInput {
	return (*streamBackfillNonePtrType)(v)
}

func (*streamBackfillNonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamBackfillNone)(nil)).Elem()
}

func (i *streamBackfillNonePtrType) ToStreamBackfillNonePtrOutput() StreamBackfillNonePtrOutput {
	return i.ToStreamBackfillNonePtrOutputWithContext(context.Background())
}

func (i *streamBackfillNonePtrType) ToStreamBackfillNonePtrOutputWithContext(ctx context.Context) StreamBackfillNonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamBackfillNonePtrOutput)
}

type StreamBackfillNoneOutput struct{ *pulumi.OutputState }

func (StreamBackfillNoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamBackfillNone)(nil)).Elem()
}

func (o StreamBackfillNoneOutput) ToStreamBackfillNoneOutput() StreamBackfillNoneOutput {
	return o
}

func (o StreamBackfillNoneOutput) ToStreamBackfillNoneOutputWithContext(ctx context.Context) StreamBackfillNoneOutput {
	return o
}

func (o StreamBackfillNoneOutput) ToStreamBackfillNonePtrOutput() StreamBackfillNonePtrOutput {
	return o.ToStreamBackfillNonePtrOutputWithContext(context.Background())
}

func (o StreamBackfillNoneOutput) ToStreamBackfillNonePtrOutputWithContext(ctx context.Context) StreamBackfillNonePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamBackfillNone) *StreamBackfillNone {
		return &v
	}).(StreamBackfillNonePtrOutput)
}

type StreamBackfillNonePtrOutput struct{ *pulumi.OutputState }

func (StreamBackfillNonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamBackfillNone)(nil)).Elem()
}

func (o StreamBackfillNonePtrOutput) ToStreamBackfillNonePtrOutput() StreamBackfillNonePtrOutput {
	return o
}

func (o StreamBackfillNonePtrOutput) ToStreamBackfillNonePtrOutputWithContext(ctx context.Context) StreamBackfillNonePtrOutput {
	return o
}

func (o StreamBackfillNonePtrOutput) Elem() StreamBackfillNoneOutput {
	return o.ApplyT(func(v *StreamBackfillNone) StreamBackfillNone {
		if v != nil {
			return *v
		}
		var ret StreamBackfillNone
		return ret
	}).(StreamBackfillNoneOutput)
}

type StreamDestinationConfig struct {
	// A configuration for how data should be loaded to Cloud Storage.
	// Structure is documented below.
	BigqueryDestinationConfig *StreamDestinationConfigBigqueryDestinationConfig `pulumi:"bigqueryDestinationConfig"`
	// Destination connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
	DestinationConnectionProfile string `pulumi:"destinationConnectionProfile"`
	// A configuration for how data should be loaded to Cloud Storage.
	// Structure is documented below.
	GcsDestinationConfig *StreamDestinationConfigGcsDestinationConfig `pulumi:"gcsDestinationConfig"`
}

// StreamDestinationConfigInput is an input type that accepts StreamDestinationConfigArgs and StreamDestinationConfigOutput values.
// You can construct a concrete instance of `StreamDestinationConfigInput` via:
//
//	StreamDestinationConfigArgs{...}
type StreamDestinationConfigInput interface {
	pulumi.Input

	ToStreamDestinationConfigOutput() StreamDestinationConfigOutput
	ToStreamDestinationConfigOutputWithContext(context.Context) StreamDestinationConfigOutput
}

type StreamDestinationConfigArgs struct {
	// A configuration for how data should be loaded to Cloud Storage.
	// Structure is documented below.
	BigqueryDestinationConfig StreamDestinationConfigBigqueryDestinationConfigPtrInput `pulumi:"bigqueryDestinationConfig"`
	// Destination connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
	DestinationConnectionProfile pulumi.StringInput `pulumi:"destinationConnectionProfile"`
	// A configuration for how data should be loaded to Cloud Storage.
	// Structure is documented below.
	GcsDestinationConfig StreamDestinationConfigGcsDestinationConfigPtrInput `pulumi:"gcsDestinationConfig"`
}

func (StreamDestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfig)(nil)).Elem()
}

func (i StreamDestinationConfigArgs) ToStreamDestinationConfigOutput() StreamDestinationConfigOutput {
	return i.ToStreamDestinationConfigOutputWithContext(context.Background())
}

func (i StreamDestinationConfigArgs) ToStreamDestinationConfigOutputWithContext(ctx context.Context) StreamDestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigOutput)
}

func (i StreamDestinationConfigArgs) ToStreamDestinationConfigPtrOutput() StreamDestinationConfigPtrOutput {
	return i.ToStreamDestinationConfigPtrOutputWithContext(context.Background())
}

func (i StreamDestinationConfigArgs) ToStreamDestinationConfigPtrOutputWithContext(ctx context.Context) StreamDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigOutput).ToStreamDestinationConfigPtrOutputWithContext(ctx)
}

// StreamDestinationConfigPtrInput is an input type that accepts StreamDestinationConfigArgs, StreamDestinationConfigPtr and StreamDestinationConfigPtrOutput values.
// You can construct a concrete instance of `StreamDestinationConfigPtrInput` via:
//
//	        StreamDestinationConfigArgs{...}
//
//	or:
//
//	        nil
type StreamDestinationConfigPtrInput interface {
	pulumi.Input

	ToStreamDestinationConfigPtrOutput() StreamDestinationConfigPtrOutput
	ToStreamDestinationConfigPtrOutputWithContext(context.Context) StreamDestinationConfigPtrOutput
}

type streamDestinationConfigPtrType StreamDestinationConfigArgs

func StreamDestinationConfigPtr(v *StreamDestinationConfigArgs) StreamDestinationConfigPtrInput {
	return (*streamDestinationConfigPtrType)(v)
}

func (*streamDestinationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfig)(nil)).Elem()
}

func (i *streamDestinationConfigPtrType) ToStreamDestinationConfigPtrOutput() StreamDestinationConfigPtrOutput {
	return i.ToStreamDestinationConfigPtrOutputWithContext(context.Background())
}

func (i *streamDestinationConfigPtrType) ToStreamDestinationConfigPtrOutputWithContext(ctx context.Context) StreamDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigPtrOutput)
}

type StreamDestinationConfigOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfig)(nil)).Elem()
}

func (o StreamDestinationConfigOutput) ToStreamDestinationConfigOutput() StreamDestinationConfigOutput {
	return o
}

func (o StreamDestinationConfigOutput) ToStreamDestinationConfigOutputWithContext(ctx context.Context) StreamDestinationConfigOutput {
	return o
}

func (o StreamDestinationConfigOutput) ToStreamDestinationConfigPtrOutput() StreamDestinationConfigPtrOutput {
	return o.ToStreamDestinationConfigPtrOutputWithContext(context.Background())
}

func (o StreamDestinationConfigOutput) ToStreamDestinationConfigPtrOutputWithContext(ctx context.Context) StreamDestinationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamDestinationConfig) *StreamDestinationConfig {
		return &v
	}).(StreamDestinationConfigPtrOutput)
}

// A configuration for how data should be loaded to Cloud Storage.
// Structure is documented below.
func (o StreamDestinationConfigOutput) BigqueryDestinationConfig() StreamDestinationConfigBigqueryDestinationConfigPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfig) *StreamDestinationConfigBigqueryDestinationConfig {
		return v.BigqueryDestinationConfig
	}).(StreamDestinationConfigBigqueryDestinationConfigPtrOutput)
}

// Destination connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
func (o StreamDestinationConfigOutput) DestinationConnectionProfile() pulumi.StringOutput {
	return o.ApplyT(func(v StreamDestinationConfig) string { return v.DestinationConnectionProfile }).(pulumi.StringOutput)
}

// A configuration for how data should be loaded to Cloud Storage.
// Structure is documented below.
func (o StreamDestinationConfigOutput) GcsDestinationConfig() StreamDestinationConfigGcsDestinationConfigPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfig) *StreamDestinationConfigGcsDestinationConfig {
		return v.GcsDestinationConfig
	}).(StreamDestinationConfigGcsDestinationConfigPtrOutput)
}

type StreamDestinationConfigPtrOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfig)(nil)).Elem()
}

func (o StreamDestinationConfigPtrOutput) ToStreamDestinationConfigPtrOutput() StreamDestinationConfigPtrOutput {
	return o
}

func (o StreamDestinationConfigPtrOutput) ToStreamDestinationConfigPtrOutputWithContext(ctx context.Context) StreamDestinationConfigPtrOutput {
	return o
}

func (o StreamDestinationConfigPtrOutput) Elem() StreamDestinationConfigOutput {
	return o.ApplyT(func(v *StreamDestinationConfig) StreamDestinationConfig {
		if v != nil {
			return *v
		}
		var ret StreamDestinationConfig
		return ret
	}).(StreamDestinationConfigOutput)
}

// A configuration for how data should be loaded to Cloud Storage.
// Structure is documented below.
func (o StreamDestinationConfigPtrOutput) BigqueryDestinationConfig() StreamDestinationConfigBigqueryDestinationConfigPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfig) *StreamDestinationConfigBigqueryDestinationConfig {
		if v == nil {
			return nil
		}
		return v.BigqueryDestinationConfig
	}).(StreamDestinationConfigBigqueryDestinationConfigPtrOutput)
}

// Destination connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
func (o StreamDestinationConfigPtrOutput) DestinationConnectionProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfig) *string {
		if v == nil {
			return nil
		}
		return &v.DestinationConnectionProfile
	}).(pulumi.StringPtrOutput)
}

// A configuration for how data should be loaded to Cloud Storage.
// Structure is documented below.
func (o StreamDestinationConfigPtrOutput) GcsDestinationConfig() StreamDestinationConfigGcsDestinationConfigPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfig) *StreamDestinationConfigGcsDestinationConfig {
		if v == nil {
			return nil
		}
		return v.GcsDestinationConfig
	}).(StreamDestinationConfigGcsDestinationConfigPtrOutput)
}

type StreamDestinationConfigBigqueryDestinationConfig struct {
	// The guaranteed data freshness (in seconds) when querying tables created by the stream.
	// Editing this field will only affect new tables created in the future, but existing tables
	// will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
	DataFreshness *string `pulumi:"dataFreshness"`
	// A single target dataset to which all data will be streamed.
	// Structure is documented below.
	SingleTargetDataset *StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset `pulumi:"singleTargetDataset"`
	// Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
	// Structure is documented below.
	SourceHierarchyDatasets *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets `pulumi:"sourceHierarchyDatasets"`
}

// StreamDestinationConfigBigqueryDestinationConfigInput is an input type that accepts StreamDestinationConfigBigqueryDestinationConfigArgs and StreamDestinationConfigBigqueryDestinationConfigOutput values.
// You can construct a concrete instance of `StreamDestinationConfigBigqueryDestinationConfigInput` via:
//
//	StreamDestinationConfigBigqueryDestinationConfigArgs{...}
type StreamDestinationConfigBigqueryDestinationConfigInput interface {
	pulumi.Input

	ToStreamDestinationConfigBigqueryDestinationConfigOutput() StreamDestinationConfigBigqueryDestinationConfigOutput
	ToStreamDestinationConfigBigqueryDestinationConfigOutputWithContext(context.Context) StreamDestinationConfigBigqueryDestinationConfigOutput
}

type StreamDestinationConfigBigqueryDestinationConfigArgs struct {
	// The guaranteed data freshness (in seconds) when querying tables created by the stream.
	// Editing this field will only affect new tables created in the future, but existing tables
	// will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
	DataFreshness pulumi.StringPtrInput `pulumi:"dataFreshness"`
	// A single target dataset to which all data will be streamed.
	// Structure is documented below.
	SingleTargetDataset StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrInput `pulumi:"singleTargetDataset"`
	// Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
	// Structure is documented below.
	SourceHierarchyDatasets StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrInput `pulumi:"sourceHierarchyDatasets"`
}

func (StreamDestinationConfigBigqueryDestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfig)(nil)).Elem()
}

func (i StreamDestinationConfigBigqueryDestinationConfigArgs) ToStreamDestinationConfigBigqueryDestinationConfigOutput() StreamDestinationConfigBigqueryDestinationConfigOutput {
	return i.ToStreamDestinationConfigBigqueryDestinationConfigOutputWithContext(context.Background())
}

func (i StreamDestinationConfigBigqueryDestinationConfigArgs) ToStreamDestinationConfigBigqueryDestinationConfigOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigBigqueryDestinationConfigOutput)
}

func (i StreamDestinationConfigBigqueryDestinationConfigArgs) ToStreamDestinationConfigBigqueryDestinationConfigPtrOutput() StreamDestinationConfigBigqueryDestinationConfigPtrOutput {
	return i.ToStreamDestinationConfigBigqueryDestinationConfigPtrOutputWithContext(context.Background())
}

func (i StreamDestinationConfigBigqueryDestinationConfigArgs) ToStreamDestinationConfigBigqueryDestinationConfigPtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigBigqueryDestinationConfigOutput).ToStreamDestinationConfigBigqueryDestinationConfigPtrOutputWithContext(ctx)
}

// StreamDestinationConfigBigqueryDestinationConfigPtrInput is an input type that accepts StreamDestinationConfigBigqueryDestinationConfigArgs, StreamDestinationConfigBigqueryDestinationConfigPtr and StreamDestinationConfigBigqueryDestinationConfigPtrOutput values.
// You can construct a concrete instance of `StreamDestinationConfigBigqueryDestinationConfigPtrInput` via:
//
//	        StreamDestinationConfigBigqueryDestinationConfigArgs{...}
//
//	or:
//
//	        nil
type StreamDestinationConfigBigqueryDestinationConfigPtrInput interface {
	pulumi.Input

	ToStreamDestinationConfigBigqueryDestinationConfigPtrOutput() StreamDestinationConfigBigqueryDestinationConfigPtrOutput
	ToStreamDestinationConfigBigqueryDestinationConfigPtrOutputWithContext(context.Context) StreamDestinationConfigBigqueryDestinationConfigPtrOutput
}

type streamDestinationConfigBigqueryDestinationConfigPtrType StreamDestinationConfigBigqueryDestinationConfigArgs

func StreamDestinationConfigBigqueryDestinationConfigPtr(v *StreamDestinationConfigBigqueryDestinationConfigArgs) StreamDestinationConfigBigqueryDestinationConfigPtrInput {
	return (*streamDestinationConfigBigqueryDestinationConfigPtrType)(v)
}

func (*streamDestinationConfigBigqueryDestinationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigBigqueryDestinationConfig)(nil)).Elem()
}

func (i *streamDestinationConfigBigqueryDestinationConfigPtrType) ToStreamDestinationConfigBigqueryDestinationConfigPtrOutput() StreamDestinationConfigBigqueryDestinationConfigPtrOutput {
	return i.ToStreamDestinationConfigBigqueryDestinationConfigPtrOutputWithContext(context.Background())
}

func (i *streamDestinationConfigBigqueryDestinationConfigPtrType) ToStreamDestinationConfigBigqueryDestinationConfigPtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigBigqueryDestinationConfigPtrOutput)
}

type StreamDestinationConfigBigqueryDestinationConfigOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigBigqueryDestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfig)(nil)).Elem()
}

func (o StreamDestinationConfigBigqueryDestinationConfigOutput) ToStreamDestinationConfigBigqueryDestinationConfigOutput() StreamDestinationConfigBigqueryDestinationConfigOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigOutput) ToStreamDestinationConfigBigqueryDestinationConfigOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigOutput) ToStreamDestinationConfigBigqueryDestinationConfigPtrOutput() StreamDestinationConfigBigqueryDestinationConfigPtrOutput {
	return o.ToStreamDestinationConfigBigqueryDestinationConfigPtrOutputWithContext(context.Background())
}

func (o StreamDestinationConfigBigqueryDestinationConfigOutput) ToStreamDestinationConfigBigqueryDestinationConfigPtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamDestinationConfigBigqueryDestinationConfig) *StreamDestinationConfigBigqueryDestinationConfig {
		return &v
	}).(StreamDestinationConfigBigqueryDestinationConfigPtrOutput)
}

// The guaranteed data freshness (in seconds) when querying tables created by the stream.
// Editing this field will only affect new tables created in the future, but existing tables
// will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
func (o StreamDestinationConfigBigqueryDestinationConfigOutput) DataFreshness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfigBigqueryDestinationConfig) *string { return v.DataFreshness }).(pulumi.StringPtrOutput)
}

// A single target dataset to which all data will be streamed.
// Structure is documented below.
func (o StreamDestinationConfigBigqueryDestinationConfigOutput) SingleTargetDataset() StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfigBigqueryDestinationConfig) *StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset {
		return v.SingleTargetDataset
	}).(StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput)
}

// Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
// Structure is documented below.
func (o StreamDestinationConfigBigqueryDestinationConfigOutput) SourceHierarchyDatasets() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfigBigqueryDestinationConfig) *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets {
		return v.SourceHierarchyDatasets
	}).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput)
}

type StreamDestinationConfigBigqueryDestinationConfigPtrOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigBigqueryDestinationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigBigqueryDestinationConfig)(nil)).Elem()
}

func (o StreamDestinationConfigBigqueryDestinationConfigPtrOutput) ToStreamDestinationConfigBigqueryDestinationConfigPtrOutput() StreamDestinationConfigBigqueryDestinationConfigPtrOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigPtrOutput) ToStreamDestinationConfigBigqueryDestinationConfigPtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigPtrOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigPtrOutput) Elem() StreamDestinationConfigBigqueryDestinationConfigOutput {
	return o.ApplyT(func(v *StreamDestinationConfigBigqueryDestinationConfig) StreamDestinationConfigBigqueryDestinationConfig {
		if v != nil {
			return *v
		}
		var ret StreamDestinationConfigBigqueryDestinationConfig
		return ret
	}).(StreamDestinationConfigBigqueryDestinationConfigOutput)
}

// The guaranteed data freshness (in seconds) when querying tables created by the stream.
// Editing this field will only affect new tables created in the future, but existing tables
// will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
func (o StreamDestinationConfigBigqueryDestinationConfigPtrOutput) DataFreshness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigBigqueryDestinationConfig) *string {
		if v == nil {
			return nil
		}
		return v.DataFreshness
	}).(pulumi.StringPtrOutput)
}

// A single target dataset to which all data will be streamed.
// Structure is documented below.
func (o StreamDestinationConfigBigqueryDestinationConfigPtrOutput) SingleTargetDataset() StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigBigqueryDestinationConfig) *StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset {
		if v == nil {
			return nil
		}
		return v.SingleTargetDataset
	}).(StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput)
}

// Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
// Structure is documented below.
func (o StreamDestinationConfigBigqueryDestinationConfigPtrOutput) SourceHierarchyDatasets() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigBigqueryDestinationConfig) *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets {
		if v == nil {
			return nil
		}
		return v.SourceHierarchyDatasets
	}).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput)
}

type StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset struct {
	// Dataset ID in the format projects/{project}/datasets/{dataset_id} or
	// {project}:{dataset_id}
	DatasetId string `pulumi:"datasetId"`
}

// StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetInput is an input type that accepts StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs and StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput values.
// You can construct a concrete instance of `StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetInput` via:
//
//	StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs{...}
type StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetInput interface {
	pulumi.Input

	ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput() StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput
	ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputWithContext(context.Context) StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput
}

type StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs struct {
	// Dataset ID in the format projects/{project}/datasets/{dataset_id} or
	// {project}:{dataset_id}
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
}

func (StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset)(nil)).Elem()
}

func (i StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs) ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput() StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput {
	return i.ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputWithContext(context.Background())
}

func (i StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs) ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput)
}

func (i StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs) ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput() StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput {
	return i.ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutputWithContext(context.Background())
}

func (i StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs) ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput).ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutputWithContext(ctx)
}

// StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrInput is an input type that accepts StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs, StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtr and StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput values.
// You can construct a concrete instance of `StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrInput` via:
//
//	        StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs{...}
//
//	or:
//
//	        nil
type StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrInput interface {
	pulumi.Input

	ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput() StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput
	ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutputWithContext(context.Context) StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput
}

type streamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrType StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs

func StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtr(v *StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs) StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrInput {
	return (*streamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrType)(v)
}

func (*streamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset)(nil)).Elem()
}

func (i *streamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrType) ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput() StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput {
	return i.ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutputWithContext(context.Background())
}

func (i *streamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrType) ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput)
}

type StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset)(nil)).Elem()
}

func (o StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput) ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput() StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput) ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput) ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput() StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput {
	return o.ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutputWithContext(context.Background())
}

func (o StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput) ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset) *StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset {
		return &v
	}).(StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput)
}

// Dataset ID in the format projects/{project}/datasets/{dataset_id} or
// {project}:{dataset_id}
func (o StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset) string { return v.DatasetId }).(pulumi.StringOutput)
}

type StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset)(nil)).Elem()
}

func (o StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput) ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput() StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput) ToStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput) Elem() StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput {
	return o.ApplyT(func(v *StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset) StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset {
		if v != nil {
			return *v
		}
		var ret StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset
		return ret
	}).(StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput)
}

// Dataset ID in the format projects/{project}/datasets/{dataset_id} or
// {project}:{dataset_id}
func (o StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigBigqueryDestinationConfigSingleTargetDataset) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

type StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets struct {
	// Dataset template used for dynamic dataset creation.
	// Structure is documented below.
	DatasetTemplate StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate `pulumi:"datasetTemplate"`
}

// StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsInput is an input type that accepts StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs and StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput values.
// You can construct a concrete instance of `StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsInput` via:
//
//	StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs{...}
type StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsInput interface {
	pulumi.Input

	ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput
	ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputWithContext(context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput
}

type StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs struct {
	// Dataset template used for dynamic dataset creation.
	// Structure is documented below.
	DatasetTemplate StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateInput `pulumi:"datasetTemplate"`
}

func (StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets)(nil)).Elem()
}

func (i StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput {
	return i.ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputWithContext(context.Background())
}

func (i StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput)
}

func (i StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput {
	return i.ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutputWithContext(context.Background())
}

func (i StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput).ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutputWithContext(ctx)
}

// StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrInput is an input type that accepts StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs, StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtr and StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput values.
// You can construct a concrete instance of `StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrInput` via:
//
//	        StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs{...}
//
//	or:
//
//	        nil
type StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrInput interface {
	pulumi.Input

	ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput
	ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutputWithContext(context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput
}

type streamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrType StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs

func StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtr(v *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrInput {
	return (*streamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrType)(v)
}

func (*streamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets)(nil)).Elem()
}

func (i *streamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrType) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput {
	return i.ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutputWithContext(context.Background())
}

func (i *streamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrType) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput)
}

type StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets)(nil)).Elem()
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput {
	return o.ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutputWithContext(context.Background())
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets) *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets {
		return &v
	}).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput)
}

// Dataset template used for dynamic dataset creation.
// Structure is documented below.
func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput) DatasetTemplate() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput {
	return o.ApplyT(func(v StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate {
		return v.DatasetTemplate
	}).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput)
}

type StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets)(nil)).Elem()
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput) Elem() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput {
	return o.ApplyT(func(v *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets {
		if v != nil {
			return *v
		}
		var ret StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets
		return ret
	}).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput)
}

// Dataset template used for dynamic dataset creation.
// Structure is documented below.
func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput) DatasetTemplate() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasets) *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate {
		if v == nil {
			return nil
		}
		return &v.DatasetTemplate
	}).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput)
}

type StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate struct {
	// If supplied, every created dataset will have its name prefixed by the provided value.
	// The prefix and name will be separated by an underscore. i.e. _.
	DatasetIdPrefix *string `pulumi:"datasetIdPrefix"`
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery
	// table. The BigQuery Service Account associated with your project requires access to this
	// encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}.
	// See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
	//
	// ***
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// The geographic location where the dataset should reside.
	// See https://cloud.google.com/bigquery/docs/locations for supported locations.
	Location string `pulumi:"location"`
}

// StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateInput is an input type that accepts StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs and StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput values.
// You can construct a concrete instance of `StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateInput` via:
//
//	StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs{...}
type StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateInput interface {
	pulumi.Input

	ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput
	ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputWithContext(context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput
}

type StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs struct {
	// If supplied, every created dataset will have its name prefixed by the provided value.
	// The prefix and name will be separated by an underscore. i.e. _.
	DatasetIdPrefix pulumi.StringPtrInput `pulumi:"datasetIdPrefix"`
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery
	// table. The BigQuery Service Account associated with your project requires access to this
	// encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}.
	// See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
	//
	// ***
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
	// The geographic location where the dataset should reside.
	// See https://cloud.google.com/bigquery/docs/locations for supported locations.
	Location pulumi.StringInput `pulumi:"location"`
}

func (StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate)(nil)).Elem()
}

func (i StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput {
	return i.ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputWithContext(context.Background())
}

func (i StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput)
}

func (i StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput {
	return i.ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutputWithContext(context.Background())
}

func (i StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput).ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutputWithContext(ctx)
}

// StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrInput is an input type that accepts StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs, StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtr and StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput values.
// You can construct a concrete instance of `StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrInput` via:
//
//	        StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs{...}
//
//	or:
//
//	        nil
type StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrInput interface {
	pulumi.Input

	ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput
	ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutputWithContext(context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput
}

type streamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrType StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs

func StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtr(v *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrInput {
	return (*streamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrType)(v)
}

func (*streamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate)(nil)).Elem()
}

func (i *streamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrType) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput {
	return i.ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutputWithContext(context.Background())
}

func (i *streamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrType) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput)
}

type StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate)(nil)).Elem()
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput {
	return o.ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutputWithContext(context.Background())
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate) *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate {
		return &v
	}).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput)
}

// If supplied, every created dataset will have its name prefixed by the provided value.
// The prefix and name will be separated by an underscore. i.e. _.
func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput) DatasetIdPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate) *string {
		return v.DatasetIdPrefix
	}).(pulumi.StringPtrOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery
// table. The BigQuery Service Account associated with your project requires access to this
// encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}.
// See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
//
// ***
func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate) *string {
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// The geographic location where the dataset should reside.
// See https://cloud.google.com/bigquery/docs/locations for supported locations.
func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate) string {
		return v.Location
	}).(pulumi.StringOutput)
}

type StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate)(nil)).Elem()
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput) ToStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutputWithContext(ctx context.Context) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput {
	return o
}

func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput) Elem() StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput {
	return o.ApplyT(func(v *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate) StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate {
		if v != nil {
			return *v
		}
		var ret StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate
		return ret
	}).(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput)
}

// If supplied, every created dataset will have its name prefixed by the provided value.
// The prefix and name will be separated by an underscore. i.e. _.
func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput) DatasetIdPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate) *string {
		if v == nil {
			return nil
		}
		return v.DatasetIdPrefix
	}).(pulumi.StringPtrOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery
// table. The BigQuery Service Account associated with your project requires access to this
// encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}.
// See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
//
// ***
func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// The geographic location where the dataset should reside.
// See https://cloud.google.com/bigquery/docs/locations for supported locations.
func (o StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

type StreamDestinationConfigGcsDestinationConfig struct {
	// AVRO file format configuration.
	AvroFileFormat *StreamDestinationConfigGcsDestinationConfigAvroFileFormat `pulumi:"avroFileFormat"`
	// The maximum duration for which new events are added before a file is closed and a new file is created.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
	FileRotationInterval *string `pulumi:"fileRotationInterval"`
	// The maximum file size to be saved in the bucket.
	FileRotationMb *int `pulumi:"fileRotationMb"`
	// JSON file format configuration.
	// Structure is documented below.
	JsonFileFormat *StreamDestinationConfigGcsDestinationConfigJsonFileFormat `pulumi:"jsonFileFormat"`
	// Path inside the Cloud Storage bucket to write data to.
	Path *string `pulumi:"path"`
}

// StreamDestinationConfigGcsDestinationConfigInput is an input type that accepts StreamDestinationConfigGcsDestinationConfigArgs and StreamDestinationConfigGcsDestinationConfigOutput values.
// You can construct a concrete instance of `StreamDestinationConfigGcsDestinationConfigInput` via:
//
//	StreamDestinationConfigGcsDestinationConfigArgs{...}
type StreamDestinationConfigGcsDestinationConfigInput interface {
	pulumi.Input

	ToStreamDestinationConfigGcsDestinationConfigOutput() StreamDestinationConfigGcsDestinationConfigOutput
	ToStreamDestinationConfigGcsDestinationConfigOutputWithContext(context.Context) StreamDestinationConfigGcsDestinationConfigOutput
}

type StreamDestinationConfigGcsDestinationConfigArgs struct {
	// AVRO file format configuration.
	AvroFileFormat StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrInput `pulumi:"avroFileFormat"`
	// The maximum duration for which new events are added before a file is closed and a new file is created.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
	FileRotationInterval pulumi.StringPtrInput `pulumi:"fileRotationInterval"`
	// The maximum file size to be saved in the bucket.
	FileRotationMb pulumi.IntPtrInput `pulumi:"fileRotationMb"`
	// JSON file format configuration.
	// Structure is documented below.
	JsonFileFormat StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrInput `pulumi:"jsonFileFormat"`
	// Path inside the Cloud Storage bucket to write data to.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (StreamDestinationConfigGcsDestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigGcsDestinationConfig)(nil)).Elem()
}

func (i StreamDestinationConfigGcsDestinationConfigArgs) ToStreamDestinationConfigGcsDestinationConfigOutput() StreamDestinationConfigGcsDestinationConfigOutput {
	return i.ToStreamDestinationConfigGcsDestinationConfigOutputWithContext(context.Background())
}

func (i StreamDestinationConfigGcsDestinationConfigArgs) ToStreamDestinationConfigGcsDestinationConfigOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigGcsDestinationConfigOutput)
}

func (i StreamDestinationConfigGcsDestinationConfigArgs) ToStreamDestinationConfigGcsDestinationConfigPtrOutput() StreamDestinationConfigGcsDestinationConfigPtrOutput {
	return i.ToStreamDestinationConfigGcsDestinationConfigPtrOutputWithContext(context.Background())
}

func (i StreamDestinationConfigGcsDestinationConfigArgs) ToStreamDestinationConfigGcsDestinationConfigPtrOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigGcsDestinationConfigOutput).ToStreamDestinationConfigGcsDestinationConfigPtrOutputWithContext(ctx)
}

// StreamDestinationConfigGcsDestinationConfigPtrInput is an input type that accepts StreamDestinationConfigGcsDestinationConfigArgs, StreamDestinationConfigGcsDestinationConfigPtr and StreamDestinationConfigGcsDestinationConfigPtrOutput values.
// You can construct a concrete instance of `StreamDestinationConfigGcsDestinationConfigPtrInput` via:
//
//	        StreamDestinationConfigGcsDestinationConfigArgs{...}
//
//	or:
//
//	        nil
type StreamDestinationConfigGcsDestinationConfigPtrInput interface {
	pulumi.Input

	ToStreamDestinationConfigGcsDestinationConfigPtrOutput() StreamDestinationConfigGcsDestinationConfigPtrOutput
	ToStreamDestinationConfigGcsDestinationConfigPtrOutputWithContext(context.Context) StreamDestinationConfigGcsDestinationConfigPtrOutput
}

type streamDestinationConfigGcsDestinationConfigPtrType StreamDestinationConfigGcsDestinationConfigArgs

func StreamDestinationConfigGcsDestinationConfigPtr(v *StreamDestinationConfigGcsDestinationConfigArgs) StreamDestinationConfigGcsDestinationConfigPtrInput {
	return (*streamDestinationConfigGcsDestinationConfigPtrType)(v)
}

func (*streamDestinationConfigGcsDestinationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigGcsDestinationConfig)(nil)).Elem()
}

func (i *streamDestinationConfigGcsDestinationConfigPtrType) ToStreamDestinationConfigGcsDestinationConfigPtrOutput() StreamDestinationConfigGcsDestinationConfigPtrOutput {
	return i.ToStreamDestinationConfigGcsDestinationConfigPtrOutputWithContext(context.Background())
}

func (i *streamDestinationConfigGcsDestinationConfigPtrType) ToStreamDestinationConfigGcsDestinationConfigPtrOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigGcsDestinationConfigPtrOutput)
}

type StreamDestinationConfigGcsDestinationConfigOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigGcsDestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigGcsDestinationConfig)(nil)).Elem()
}

func (o StreamDestinationConfigGcsDestinationConfigOutput) ToStreamDestinationConfigGcsDestinationConfigOutput() StreamDestinationConfigGcsDestinationConfigOutput {
	return o
}

func (o StreamDestinationConfigGcsDestinationConfigOutput) ToStreamDestinationConfigGcsDestinationConfigOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigOutput {
	return o
}

func (o StreamDestinationConfigGcsDestinationConfigOutput) ToStreamDestinationConfigGcsDestinationConfigPtrOutput() StreamDestinationConfigGcsDestinationConfigPtrOutput {
	return o.ToStreamDestinationConfigGcsDestinationConfigPtrOutputWithContext(context.Background())
}

func (o StreamDestinationConfigGcsDestinationConfigOutput) ToStreamDestinationConfigGcsDestinationConfigPtrOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamDestinationConfigGcsDestinationConfig) *StreamDestinationConfigGcsDestinationConfig {
		return &v
	}).(StreamDestinationConfigGcsDestinationConfigPtrOutput)
}

// AVRO file format configuration.
func (o StreamDestinationConfigGcsDestinationConfigOutput) AvroFileFormat() StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfigGcsDestinationConfig) *StreamDestinationConfigGcsDestinationConfigAvroFileFormat {
		return v.AvroFileFormat
	}).(StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput)
}

// The maximum duration for which new events are added before a file is closed and a new file is created.
// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
func (o StreamDestinationConfigGcsDestinationConfigOutput) FileRotationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfigGcsDestinationConfig) *string { return v.FileRotationInterval }).(pulumi.StringPtrOutput)
}

// The maximum file size to be saved in the bucket.
func (o StreamDestinationConfigGcsDestinationConfigOutput) FileRotationMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfigGcsDestinationConfig) *int { return v.FileRotationMb }).(pulumi.IntPtrOutput)
}

// JSON file format configuration.
// Structure is documented below.
func (o StreamDestinationConfigGcsDestinationConfigOutput) JsonFileFormat() StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfigGcsDestinationConfig) *StreamDestinationConfigGcsDestinationConfigJsonFileFormat {
		return v.JsonFileFormat
	}).(StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput)
}

// Path inside the Cloud Storage bucket to write data to.
func (o StreamDestinationConfigGcsDestinationConfigOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfigGcsDestinationConfig) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type StreamDestinationConfigGcsDestinationConfigPtrOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigGcsDestinationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigGcsDestinationConfig)(nil)).Elem()
}

func (o StreamDestinationConfigGcsDestinationConfigPtrOutput) ToStreamDestinationConfigGcsDestinationConfigPtrOutput() StreamDestinationConfigGcsDestinationConfigPtrOutput {
	return o
}

func (o StreamDestinationConfigGcsDestinationConfigPtrOutput) ToStreamDestinationConfigGcsDestinationConfigPtrOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigPtrOutput {
	return o
}

func (o StreamDestinationConfigGcsDestinationConfigPtrOutput) Elem() StreamDestinationConfigGcsDestinationConfigOutput {
	return o.ApplyT(func(v *StreamDestinationConfigGcsDestinationConfig) StreamDestinationConfigGcsDestinationConfig {
		if v != nil {
			return *v
		}
		var ret StreamDestinationConfigGcsDestinationConfig
		return ret
	}).(StreamDestinationConfigGcsDestinationConfigOutput)
}

// AVRO file format configuration.
func (o StreamDestinationConfigGcsDestinationConfigPtrOutput) AvroFileFormat() StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigGcsDestinationConfig) *StreamDestinationConfigGcsDestinationConfigAvroFileFormat {
		if v == nil {
			return nil
		}
		return v.AvroFileFormat
	}).(StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput)
}

// The maximum duration for which new events are added before a file is closed and a new file is created.
// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
func (o StreamDestinationConfigGcsDestinationConfigPtrOutput) FileRotationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigGcsDestinationConfig) *string {
		if v == nil {
			return nil
		}
		return v.FileRotationInterval
	}).(pulumi.StringPtrOutput)
}

// The maximum file size to be saved in the bucket.
func (o StreamDestinationConfigGcsDestinationConfigPtrOutput) FileRotationMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigGcsDestinationConfig) *int {
		if v == nil {
			return nil
		}
		return v.FileRotationMb
	}).(pulumi.IntPtrOutput)
}

// JSON file format configuration.
// Structure is documented below.
func (o StreamDestinationConfigGcsDestinationConfigPtrOutput) JsonFileFormat() StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigGcsDestinationConfig) *StreamDestinationConfigGcsDestinationConfigJsonFileFormat {
		if v == nil {
			return nil
		}
		return v.JsonFileFormat
	}).(StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput)
}

// Path inside the Cloud Storage bucket to write data to.
func (o StreamDestinationConfigGcsDestinationConfigPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigGcsDestinationConfig) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

type StreamDestinationConfigGcsDestinationConfigAvroFileFormat struct {
}

// StreamDestinationConfigGcsDestinationConfigAvroFileFormatInput is an input type that accepts StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs and StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput values.
// You can construct a concrete instance of `StreamDestinationConfigGcsDestinationConfigAvroFileFormatInput` via:
//
//	StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs{...}
type StreamDestinationConfigGcsDestinationConfigAvroFileFormatInput interface {
	pulumi.Input

	ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput() StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput
	ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputWithContext(context.Context) StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput
}

type StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs struct {
}

func (StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigGcsDestinationConfigAvroFileFormat)(nil)).Elem()
}

func (i StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs) ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput() StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput {
	return i.ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputWithContext(context.Background())
}

func (i StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs) ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput)
}

func (i StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs) ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput() StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput {
	return i.ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutputWithContext(context.Background())
}

func (i StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs) ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput).ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutputWithContext(ctx)
}

// StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrInput is an input type that accepts StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs, StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtr and StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput values.
// You can construct a concrete instance of `StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrInput` via:
//
//	        StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs{...}
//
//	or:
//
//	        nil
type StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrInput interface {
	pulumi.Input

	ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput() StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput
	ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutputWithContext(context.Context) StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput
}

type streamDestinationConfigGcsDestinationConfigAvroFileFormatPtrType StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs

func StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtr(v *StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs) StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrInput {
	return (*streamDestinationConfigGcsDestinationConfigAvroFileFormatPtrType)(v)
}

func (*streamDestinationConfigGcsDestinationConfigAvroFileFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigGcsDestinationConfigAvroFileFormat)(nil)).Elem()
}

func (i *streamDestinationConfigGcsDestinationConfigAvroFileFormatPtrType) ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput() StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput {
	return i.ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutputWithContext(context.Background())
}

func (i *streamDestinationConfigGcsDestinationConfigAvroFileFormatPtrType) ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput)
}

type StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigGcsDestinationConfigAvroFileFormat)(nil)).Elem()
}

func (o StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput) ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput() StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput {
	return o
}

func (o StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput) ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput {
	return o
}

func (o StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput) ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput() StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput {
	return o.ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutputWithContext(context.Background())
}

func (o StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput) ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamDestinationConfigGcsDestinationConfigAvroFileFormat) *StreamDestinationConfigGcsDestinationConfigAvroFileFormat {
		return &v
	}).(StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput)
}

type StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigGcsDestinationConfigAvroFileFormat)(nil)).Elem()
}

func (o StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput) ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput() StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput {
	return o
}

func (o StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput) ToStreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput {
	return o
}

func (o StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput) Elem() StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput {
	return o.ApplyT(func(v *StreamDestinationConfigGcsDestinationConfigAvroFileFormat) StreamDestinationConfigGcsDestinationConfigAvroFileFormat {
		if v != nil {
			return *v
		}
		var ret StreamDestinationConfigGcsDestinationConfigAvroFileFormat
		return ret
	}).(StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput)
}

type StreamDestinationConfigGcsDestinationConfigJsonFileFormat struct {
	// Compression of the loaded JSON file.
	// Possible values are: `NO_COMPRESSION`, `GZIP`.
	Compression *string `pulumi:"compression"`
	// The schema file format along JSON data files.
	// Possible values are: `NO_SCHEMA_FILE`, `AVRO_SCHEMA_FILE`.
	SchemaFileFormat *string `pulumi:"schemaFileFormat"`
}

// StreamDestinationConfigGcsDestinationConfigJsonFileFormatInput is an input type that accepts StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs and StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput values.
// You can construct a concrete instance of `StreamDestinationConfigGcsDestinationConfigJsonFileFormatInput` via:
//
//	StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs{...}
type StreamDestinationConfigGcsDestinationConfigJsonFileFormatInput interface {
	pulumi.Input

	ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput() StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput
	ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputWithContext(context.Context) StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput
}

type StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs struct {
	// Compression of the loaded JSON file.
	// Possible values are: `NO_COMPRESSION`, `GZIP`.
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// The schema file format along JSON data files.
	// Possible values are: `NO_SCHEMA_FILE`, `AVRO_SCHEMA_FILE`.
	SchemaFileFormat pulumi.StringPtrInput `pulumi:"schemaFileFormat"`
}

func (StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigGcsDestinationConfigJsonFileFormat)(nil)).Elem()
}

func (i StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs) ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput() StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput {
	return i.ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputWithContext(context.Background())
}

func (i StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs) ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput)
}

func (i StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs) ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput() StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput {
	return i.ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutputWithContext(context.Background())
}

func (i StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs) ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput).ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutputWithContext(ctx)
}

// StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrInput is an input type that accepts StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs, StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtr and StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput values.
// You can construct a concrete instance of `StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrInput` via:
//
//	        StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs{...}
//
//	or:
//
//	        nil
type StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrInput interface {
	pulumi.Input

	ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput() StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput
	ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutputWithContext(context.Context) StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput
}

type streamDestinationConfigGcsDestinationConfigJsonFileFormatPtrType StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs

func StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtr(v *StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs) StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrInput {
	return (*streamDestinationConfigGcsDestinationConfigJsonFileFormatPtrType)(v)
}

func (*streamDestinationConfigGcsDestinationConfigJsonFileFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigGcsDestinationConfigJsonFileFormat)(nil)).Elem()
}

func (i *streamDestinationConfigGcsDestinationConfigJsonFileFormatPtrType) ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput() StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput {
	return i.ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutputWithContext(context.Background())
}

func (i *streamDestinationConfigGcsDestinationConfigJsonFileFormatPtrType) ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput)
}

type StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDestinationConfigGcsDestinationConfigJsonFileFormat)(nil)).Elem()
}

func (o StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput) ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput() StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput {
	return o
}

func (o StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput) ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput {
	return o
}

func (o StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput) ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput() StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput {
	return o.ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutputWithContext(context.Background())
}

func (o StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput) ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamDestinationConfigGcsDestinationConfigJsonFileFormat) *StreamDestinationConfigGcsDestinationConfigJsonFileFormat {
		return &v
	}).(StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput)
}

// Compression of the loaded JSON file.
// Possible values are: `NO_COMPRESSION`, `GZIP`.
func (o StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfigGcsDestinationConfigJsonFileFormat) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// The schema file format along JSON data files.
// Possible values are: `NO_SCHEMA_FILE`, `AVRO_SCHEMA_FILE`.
func (o StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput) SchemaFileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamDestinationConfigGcsDestinationConfigJsonFileFormat) *string { return v.SchemaFileFormat }).(pulumi.StringPtrOutput)
}

type StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput struct{ *pulumi.OutputState }

func (StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDestinationConfigGcsDestinationConfigJsonFileFormat)(nil)).Elem()
}

func (o StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput) ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput() StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput {
	return o
}

func (o StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput) ToStreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutputWithContext(ctx context.Context) StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput {
	return o
}

func (o StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput) Elem() StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput {
	return o.ApplyT(func(v *StreamDestinationConfigGcsDestinationConfigJsonFileFormat) StreamDestinationConfigGcsDestinationConfigJsonFileFormat {
		if v != nil {
			return *v
		}
		var ret StreamDestinationConfigGcsDestinationConfigJsonFileFormat
		return ret
	}).(StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput)
}

// Compression of the loaded JSON file.
// Possible values are: `NO_COMPRESSION`, `GZIP`.
func (o StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigGcsDestinationConfigJsonFileFormat) *string {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(pulumi.StringPtrOutput)
}

// The schema file format along JSON data files.
// Possible values are: `NO_SCHEMA_FILE`, `AVRO_SCHEMA_FILE`.
func (o StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput) SchemaFileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamDestinationConfigGcsDestinationConfigJsonFileFormat) *string {
		if v == nil {
			return nil
		}
		return v.SchemaFileFormat
	}).(pulumi.StringPtrOutput)
}

type StreamSourceConfig struct {
	// MySQL data source configuration.
	// Structure is documented below.
	MysqlSourceConfig *StreamSourceConfigMysqlSourceConfig `pulumi:"mysqlSourceConfig"`
	// MySQL data source configuration.
	// Structure is documented below.
	OracleSourceConfig *StreamSourceConfigOracleSourceConfig `pulumi:"oracleSourceConfig"`
	// PostgreSQL data source configuration.
	// Structure is documented below.
	PostgresqlSourceConfig *StreamSourceConfigPostgresqlSourceConfig `pulumi:"postgresqlSourceConfig"`
	// Source connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
	SourceConnectionProfile string `pulumi:"sourceConnectionProfile"`
}

// StreamSourceConfigInput is an input type that accepts StreamSourceConfigArgs and StreamSourceConfigOutput values.
// You can construct a concrete instance of `StreamSourceConfigInput` via:
//
//	StreamSourceConfigArgs{...}
type StreamSourceConfigInput interface {
	pulumi.Input

	ToStreamSourceConfigOutput() StreamSourceConfigOutput
	ToStreamSourceConfigOutputWithContext(context.Context) StreamSourceConfigOutput
}

type StreamSourceConfigArgs struct {
	// MySQL data source configuration.
	// Structure is documented below.
	MysqlSourceConfig StreamSourceConfigMysqlSourceConfigPtrInput `pulumi:"mysqlSourceConfig"`
	// MySQL data source configuration.
	// Structure is documented below.
	OracleSourceConfig StreamSourceConfigOracleSourceConfigPtrInput `pulumi:"oracleSourceConfig"`
	// PostgreSQL data source configuration.
	// Structure is documented below.
	PostgresqlSourceConfig StreamSourceConfigPostgresqlSourceConfigPtrInput `pulumi:"postgresqlSourceConfig"`
	// Source connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
	SourceConnectionProfile pulumi.StringInput `pulumi:"sourceConnectionProfile"`
}

func (StreamSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfig)(nil)).Elem()
}

func (i StreamSourceConfigArgs) ToStreamSourceConfigOutput() StreamSourceConfigOutput {
	return i.ToStreamSourceConfigOutputWithContext(context.Background())
}

func (i StreamSourceConfigArgs) ToStreamSourceConfigOutputWithContext(ctx context.Context) StreamSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOutput)
}

func (i StreamSourceConfigArgs) ToStreamSourceConfigPtrOutput() StreamSourceConfigPtrOutput {
	return i.ToStreamSourceConfigPtrOutputWithContext(context.Background())
}

func (i StreamSourceConfigArgs) ToStreamSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOutput).ToStreamSourceConfigPtrOutputWithContext(ctx)
}

// StreamSourceConfigPtrInput is an input type that accepts StreamSourceConfigArgs, StreamSourceConfigPtr and StreamSourceConfigPtrOutput values.
// You can construct a concrete instance of `StreamSourceConfigPtrInput` via:
//
//	        StreamSourceConfigArgs{...}
//
//	or:
//
//	        nil
type StreamSourceConfigPtrInput interface {
	pulumi.Input

	ToStreamSourceConfigPtrOutput() StreamSourceConfigPtrOutput
	ToStreamSourceConfigPtrOutputWithContext(context.Context) StreamSourceConfigPtrOutput
}

type streamSourceConfigPtrType StreamSourceConfigArgs

func StreamSourceConfigPtr(v *StreamSourceConfigArgs) StreamSourceConfigPtrInput {
	return (*streamSourceConfigPtrType)(v)
}

func (*streamSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfig)(nil)).Elem()
}

func (i *streamSourceConfigPtrType) ToStreamSourceConfigPtrOutput() StreamSourceConfigPtrOutput {
	return i.ToStreamSourceConfigPtrOutputWithContext(context.Background())
}

func (i *streamSourceConfigPtrType) ToStreamSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPtrOutput)
}

type StreamSourceConfigOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfig)(nil)).Elem()
}

func (o StreamSourceConfigOutput) ToStreamSourceConfigOutput() StreamSourceConfigOutput {
	return o
}

func (o StreamSourceConfigOutput) ToStreamSourceConfigOutputWithContext(ctx context.Context) StreamSourceConfigOutput {
	return o
}

func (o StreamSourceConfigOutput) ToStreamSourceConfigPtrOutput() StreamSourceConfigPtrOutput {
	return o.ToStreamSourceConfigPtrOutputWithContext(context.Background())
}

func (o StreamSourceConfigOutput) ToStreamSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceConfig) *StreamSourceConfig {
		return &v
	}).(StreamSourceConfigPtrOutput)
}

// MySQL data source configuration.
// Structure is documented below.
func (o StreamSourceConfigOutput) MysqlSourceConfig() StreamSourceConfigMysqlSourceConfigPtrOutput {
	return o.ApplyT(func(v StreamSourceConfig) *StreamSourceConfigMysqlSourceConfig { return v.MysqlSourceConfig }).(StreamSourceConfigMysqlSourceConfigPtrOutput)
}

// MySQL data source configuration.
// Structure is documented below.
func (o StreamSourceConfigOutput) OracleSourceConfig() StreamSourceConfigOracleSourceConfigPtrOutput {
	return o.ApplyT(func(v StreamSourceConfig) *StreamSourceConfigOracleSourceConfig { return v.OracleSourceConfig }).(StreamSourceConfigOracleSourceConfigPtrOutput)
}

// PostgreSQL data source configuration.
// Structure is documented below.
func (o StreamSourceConfigOutput) PostgresqlSourceConfig() StreamSourceConfigPostgresqlSourceConfigPtrOutput {
	return o.ApplyT(func(v StreamSourceConfig) *StreamSourceConfigPostgresqlSourceConfig { return v.PostgresqlSourceConfig }).(StreamSourceConfigPostgresqlSourceConfigPtrOutput)
}

// Source connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
func (o StreamSourceConfigOutput) SourceConnectionProfile() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfig) string { return v.SourceConnectionProfile }).(pulumi.StringOutput)
}

type StreamSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfig)(nil)).Elem()
}

func (o StreamSourceConfigPtrOutput) ToStreamSourceConfigPtrOutput() StreamSourceConfigPtrOutput {
	return o
}

func (o StreamSourceConfigPtrOutput) ToStreamSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigPtrOutput {
	return o
}

func (o StreamSourceConfigPtrOutput) Elem() StreamSourceConfigOutput {
	return o.ApplyT(func(v *StreamSourceConfig) StreamSourceConfig {
		if v != nil {
			return *v
		}
		var ret StreamSourceConfig
		return ret
	}).(StreamSourceConfigOutput)
}

// MySQL data source configuration.
// Structure is documented below.
func (o StreamSourceConfigPtrOutput) MysqlSourceConfig() StreamSourceConfigMysqlSourceConfigPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfig) *StreamSourceConfigMysqlSourceConfig {
		if v == nil {
			return nil
		}
		return v.MysqlSourceConfig
	}).(StreamSourceConfigMysqlSourceConfigPtrOutput)
}

// MySQL data source configuration.
// Structure is documented below.
func (o StreamSourceConfigPtrOutput) OracleSourceConfig() StreamSourceConfigOracleSourceConfigPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfig) *StreamSourceConfigOracleSourceConfig {
		if v == nil {
			return nil
		}
		return v.OracleSourceConfig
	}).(StreamSourceConfigOracleSourceConfigPtrOutput)
}

// PostgreSQL data source configuration.
// Structure is documented below.
func (o StreamSourceConfigPtrOutput) PostgresqlSourceConfig() StreamSourceConfigPostgresqlSourceConfigPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfig) *StreamSourceConfigPostgresqlSourceConfig {
		if v == nil {
			return nil
		}
		return v.PostgresqlSourceConfig
	}).(StreamSourceConfigPostgresqlSourceConfigPtrOutput)
}

// Source connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
func (o StreamSourceConfigPtrOutput) SourceConnectionProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionProfile
	}).(pulumi.StringPtrOutput)
}

type StreamSourceConfigMysqlSourceConfig struct {
	// MySQL objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *StreamSourceConfigMysqlSourceConfigExcludeObjects `pulumi:"excludeObjects"`
	// MySQL objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *StreamSourceConfigMysqlSourceConfigIncludeObjects `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non negative.
	// If not set (or set to 0), the system's default value will be used.
	MaxConcurrentBackfillTasks *int `pulumi:"maxConcurrentBackfillTasks"`
	// Maximum number of concurrent CDC tasks. The number should be non negative.
	// If not set (or set to 0), the system's default value will be used.
	MaxConcurrentCdcTasks *int `pulumi:"maxConcurrentCdcTasks"`
}

// StreamSourceConfigMysqlSourceConfigInput is an input type that accepts StreamSourceConfigMysqlSourceConfigArgs and StreamSourceConfigMysqlSourceConfigOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigInput` via:
//
//	StreamSourceConfigMysqlSourceConfigArgs{...}
type StreamSourceConfigMysqlSourceConfigInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigOutput() StreamSourceConfigMysqlSourceConfigOutput
	ToStreamSourceConfigMysqlSourceConfigOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigOutput
}

type StreamSourceConfigMysqlSourceConfigArgs struct {
	// MySQL objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrInput `pulumi:"excludeObjects"`
	// MySQL objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrInput `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non negative.
	// If not set (or set to 0), the system's default value will be used.
	MaxConcurrentBackfillTasks pulumi.IntPtrInput `pulumi:"maxConcurrentBackfillTasks"`
	// Maximum number of concurrent CDC tasks. The number should be non negative.
	// If not set (or set to 0), the system's default value will be used.
	MaxConcurrentCdcTasks pulumi.IntPtrInput `pulumi:"maxConcurrentCdcTasks"`
}

func (StreamSourceConfigMysqlSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfig)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigArgs) ToStreamSourceConfigMysqlSourceConfigOutput() StreamSourceConfigMysqlSourceConfigOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigArgs) ToStreamSourceConfigMysqlSourceConfigOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigOutput)
}

func (i StreamSourceConfigMysqlSourceConfigArgs) ToStreamSourceConfigMysqlSourceConfigPtrOutput() StreamSourceConfigMysqlSourceConfigPtrOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigPtrOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigArgs) ToStreamSourceConfigMysqlSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigOutput).ToStreamSourceConfigMysqlSourceConfigPtrOutputWithContext(ctx)
}

// StreamSourceConfigMysqlSourceConfigPtrInput is an input type that accepts StreamSourceConfigMysqlSourceConfigArgs, StreamSourceConfigMysqlSourceConfigPtr and StreamSourceConfigMysqlSourceConfigPtrOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigPtrInput` via:
//
//	        StreamSourceConfigMysqlSourceConfigArgs{...}
//
//	or:
//
//	        nil
type StreamSourceConfigMysqlSourceConfigPtrInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigPtrOutput() StreamSourceConfigMysqlSourceConfigPtrOutput
	ToStreamSourceConfigMysqlSourceConfigPtrOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigPtrOutput
}

type streamSourceConfigMysqlSourceConfigPtrType StreamSourceConfigMysqlSourceConfigArgs

func StreamSourceConfigMysqlSourceConfigPtr(v *StreamSourceConfigMysqlSourceConfigArgs) StreamSourceConfigMysqlSourceConfigPtrInput {
	return (*streamSourceConfigMysqlSourceConfigPtrType)(v)
}

func (*streamSourceConfigMysqlSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigMysqlSourceConfig)(nil)).Elem()
}

func (i *streamSourceConfigMysqlSourceConfigPtrType) ToStreamSourceConfigMysqlSourceConfigPtrOutput() StreamSourceConfigMysqlSourceConfigPtrOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigPtrOutputWithContext(context.Background())
}

func (i *streamSourceConfigMysqlSourceConfigPtrType) ToStreamSourceConfigMysqlSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigPtrOutput)
}

type StreamSourceConfigMysqlSourceConfigOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfig)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigOutput) ToStreamSourceConfigMysqlSourceConfigOutput() StreamSourceConfigMysqlSourceConfigOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigOutput) ToStreamSourceConfigMysqlSourceConfigOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigOutput) ToStreamSourceConfigMysqlSourceConfigPtrOutput() StreamSourceConfigMysqlSourceConfigPtrOutput {
	return o.ToStreamSourceConfigMysqlSourceConfigPtrOutputWithContext(context.Background())
}

func (o StreamSourceConfigMysqlSourceConfigOutput) ToStreamSourceConfigMysqlSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceConfigMysqlSourceConfig) *StreamSourceConfigMysqlSourceConfig {
		return &v
	}).(StreamSourceConfigMysqlSourceConfigPtrOutput)
}

// MySQL objects to exclude from the stream.
// Structure is documented below.
func (o StreamSourceConfigMysqlSourceConfigOutput) ExcludeObjects() StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfig) *StreamSourceConfigMysqlSourceConfigExcludeObjects {
		return v.ExcludeObjects
	}).(StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput)
}

// MySQL objects to retrieve from the source.
// Structure is documented below.
func (o StreamSourceConfigMysqlSourceConfigOutput) IncludeObjects() StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfig) *StreamSourceConfigMysqlSourceConfigIncludeObjects {
		return v.IncludeObjects
	}).(StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non negative.
// If not set (or set to 0), the system's default value will be used.
func (o StreamSourceConfigMysqlSourceConfigOutput) MaxConcurrentBackfillTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfig) *int { return v.MaxConcurrentBackfillTasks }).(pulumi.IntPtrOutput)
}

// Maximum number of concurrent CDC tasks. The number should be non negative.
// If not set (or set to 0), the system's default value will be used.
func (o StreamSourceConfigMysqlSourceConfigOutput) MaxConcurrentCdcTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfig) *int { return v.MaxConcurrentCdcTasks }).(pulumi.IntPtrOutput)
}

type StreamSourceConfigMysqlSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigMysqlSourceConfig)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigPtrOutput) ToStreamSourceConfigMysqlSourceConfigPtrOutput() StreamSourceConfigMysqlSourceConfigPtrOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigPtrOutput) ToStreamSourceConfigMysqlSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigPtrOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigPtrOutput) Elem() StreamSourceConfigMysqlSourceConfigOutput {
	return o.ApplyT(func(v *StreamSourceConfigMysqlSourceConfig) StreamSourceConfigMysqlSourceConfig {
		if v != nil {
			return *v
		}
		var ret StreamSourceConfigMysqlSourceConfig
		return ret
	}).(StreamSourceConfigMysqlSourceConfigOutput)
}

// MySQL objects to exclude from the stream.
// Structure is documented below.
func (o StreamSourceConfigMysqlSourceConfigPtrOutput) ExcludeObjects() StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigMysqlSourceConfig) *StreamSourceConfigMysqlSourceConfigExcludeObjects {
		if v == nil {
			return nil
		}
		return v.ExcludeObjects
	}).(StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput)
}

// MySQL objects to retrieve from the source.
// Structure is documented below.
func (o StreamSourceConfigMysqlSourceConfigPtrOutput) IncludeObjects() StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigMysqlSourceConfig) *StreamSourceConfigMysqlSourceConfigIncludeObjects {
		if v == nil {
			return nil
		}
		return v.IncludeObjects
	}).(StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non negative.
// If not set (or set to 0), the system's default value will be used.
func (o StreamSourceConfigMysqlSourceConfigPtrOutput) MaxConcurrentBackfillTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigMysqlSourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentBackfillTasks
	}).(pulumi.IntPtrOutput)
}

// Maximum number of concurrent CDC tasks. The number should be non negative.
// If not set (or set to 0), the system's default value will be used.
func (o StreamSourceConfigMysqlSourceConfigPtrOutput) MaxConcurrentCdcTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigMysqlSourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentCdcTasks
	}).(pulumi.IntPtrOutput)
}

type StreamSourceConfigMysqlSourceConfigExcludeObjects struct {
	// MySQL databases on the server
	// Structure is documented below.
	MysqlDatabases []StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase `pulumi:"mysqlDatabases"`
}

// StreamSourceConfigMysqlSourceConfigExcludeObjectsInput is an input type that accepts StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs and StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigExcludeObjectsInput` via:
//
//	StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs{...}
type StreamSourceConfigMysqlSourceConfigExcludeObjectsInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput
	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs struct {
	// MySQL databases on the server
	// Structure is documented below.
	MysqlDatabases StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayInput `pulumi:"mysqlDatabases"`
}

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjects)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput)
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput).ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutputWithContext(ctx)
}

// StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrInput is an input type that accepts StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs, StreamSourceConfigMysqlSourceConfigExcludeObjectsPtr and StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrInput` via:
//
//	        StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs{...}
//
//	or:
//
//	        nil
type StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput
	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput
}

type streamSourceConfigMysqlSourceConfigExcludeObjectsPtrType StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs

func StreamSourceConfigMysqlSourceConfigExcludeObjectsPtr(v *StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs) StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrInput {
	return (*streamSourceConfigMysqlSourceConfigExcludeObjectsPtrType)(v)
}

func (*streamSourceConfigMysqlSourceConfigExcludeObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigMysqlSourceConfigExcludeObjects)(nil)).Elem()
}

func (i *streamSourceConfigMysqlSourceConfigExcludeObjectsPtrType) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutputWithContext(context.Background())
}

func (i *streamSourceConfigMysqlSourceConfigExcludeObjectsPtrType) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput)
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjects)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput {
	return o.ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutputWithContext(context.Background())
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceConfigMysqlSourceConfigExcludeObjects) *StreamSourceConfigMysqlSourceConfigExcludeObjects {
		return &v
	}).(StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput)
}

// MySQL databases on the server
// Structure is documented below.
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput) MysqlDatabases() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigExcludeObjects) []StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase {
		return v.MysqlDatabases
	}).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput)
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigMysqlSourceConfigExcludeObjects)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput) Elem() StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput {
	return o.ApplyT(func(v *StreamSourceConfigMysqlSourceConfigExcludeObjects) StreamSourceConfigMysqlSourceConfigExcludeObjects {
		if v != nil {
			return *v
		}
		var ret StreamSourceConfigMysqlSourceConfigExcludeObjects
		return ret
	}).(StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput)
}

// MySQL databases on the server
// Structure is documented below.
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput) MysqlDatabases() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput {
	return o.ApplyT(func(v *StreamSourceConfigMysqlSourceConfigExcludeObjects) []StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase {
		if v == nil {
			return nil
		}
		return v.MysqlDatabases
	}).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput)
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase struct {
	// Database name.
	Database string `pulumi:"database"`
	// Tables in the database.
	// Structure is documented below.
	MysqlTables []StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable `pulumi:"mysqlTables"`
}

// StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseInput is an input type that accepts StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs and StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseInput` via:
//
//	StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs{...}
type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput
	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs struct {
	// Database name.
	Database pulumi.StringInput `pulumi:"database"`
	// Tables in the database.
	// Structure is documented below.
	MysqlTables StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayInput `pulumi:"mysqlTables"`
}

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput)
}

// StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayInput is an input type that accepts StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArray and StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayInput` via:
//
//	StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArray{ StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs{...} }
type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput
	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArray []StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseInput

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArray) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArray) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput)
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput {
	return o
}

// Database name.
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase) string { return v.Database }).(pulumi.StringOutput)
}

// Tables in the database.
// Structure is documented below.
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput) MysqlTables() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase) []StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable {
		return v.MysqlTables
	}).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput)
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase {
		return vs[0].([]StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabase)[vs[1].(int)]
	}).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput)
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable struct {
	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	MysqlColumns []StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn `pulumi:"mysqlColumns"`
	// Table name.
	Table string `pulumi:"table"`
}

// StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableInput is an input type that accepts StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArgs and StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableInput` via:
//
//	StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArgs{...}
type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput
	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArgs struct {
	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	MysqlColumns StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput `pulumi:"mysqlColumns"`
	// Table name.
	Table pulumi.StringInput `pulumi:"table"`
}

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArgs) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArgs) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput)
}

// StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayInput is an input type that accepts StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArray and StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayInput` via:
//
//	StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArray{ StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArgs{...} }
type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput
	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArray []StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableInput

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArray) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArray) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput)
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput {
	return o
}

// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
// Structure is documented below.
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput) MysqlColumns() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable) []StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn {
		return v.MysqlColumns
	}).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput)
}

// Table name.
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable) string {
		return v.Table
	}).(pulumi.StringOutput)
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable {
		return vs[0].([]StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTable)[vs[1].(int)]
	}).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput)
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn struct {
	// Column collation.
	Collation *string `pulumi:"collation"`
	// Column name.
	Column *string `pulumi:"column"`
	// The MySQL data type. Full data types list can be found here:
	// https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType *string `pulumi:"dataType"`
	// (Output)
	// Column length.
	Length *int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
}

// StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnInput is an input type that accepts StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs and StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnInput` via:
//
//	StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs{...}
type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput
	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs struct {
	// Column collation.
	Collation pulumi.StringPtrInput `pulumi:"collation"`
	// Column name.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The MySQL data type. Full data types list can be found here:
	// https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// (Output)
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
}

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput)
}

// StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput is an input type that accepts StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray and StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput` via:
//
//	StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray{ StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs{...} }
type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput
	ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray []StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnInput

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput)
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return o
}

// Column collation.
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *string {
		return v.Collation
	}).(pulumi.StringPtrOutput)
}

// Column name.
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *string {
		return v.Column
	}).(pulumi.StringPtrOutput)
}

// The MySQL data type. Full data types list can be found here:
// https://dev.mysql.com/doc/refman/8.0/en/data-types.html
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *string {
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Column length.
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *int {
		return v.Length
	}).(pulumi.IntPtrOutput)
}

// Whether or not the column can accept a null value.
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *bool {
		return v.Nullable
	}).(pulumi.BoolPtrOutput)
}

// The ordinal position of the column in the table.
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *int {
		return v.OrdinalPosition
	}).(pulumi.IntPtrOutput)
}

// Whether or not the column represents a primary key.
func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *bool {
		return v.PrimaryKey
	}).(pulumi.BoolPtrOutput)
}

type StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput() StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput) ToStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn {
		return vs[0].([]StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn)[vs[1].(int)]
	}).(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput)
}

type StreamSourceConfigMysqlSourceConfigIncludeObjects struct {
	// MySQL databases on the server
	// Structure is documented below.
	MysqlDatabases []StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase `pulumi:"mysqlDatabases"`
}

// StreamSourceConfigMysqlSourceConfigIncludeObjectsInput is an input type that accepts StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs and StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigIncludeObjectsInput` via:
//
//	StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs{...}
type StreamSourceConfigMysqlSourceConfigIncludeObjectsInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput
	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs struct {
	// MySQL databases on the server
	// Structure is documented below.
	MysqlDatabases StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayInput `pulumi:"mysqlDatabases"`
}

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjects)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput)
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput).ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutputWithContext(ctx)
}

// StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrInput is an input type that accepts StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs, StreamSourceConfigMysqlSourceConfigIncludeObjectsPtr and StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrInput` via:
//
//	        StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs{...}
//
//	or:
//
//	        nil
type StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput
	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput
}

type streamSourceConfigMysqlSourceConfigIncludeObjectsPtrType StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs

func StreamSourceConfigMysqlSourceConfigIncludeObjectsPtr(v *StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs) StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrInput {
	return (*streamSourceConfigMysqlSourceConfigIncludeObjectsPtrType)(v)
}

func (*streamSourceConfigMysqlSourceConfigIncludeObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigMysqlSourceConfigIncludeObjects)(nil)).Elem()
}

func (i *streamSourceConfigMysqlSourceConfigIncludeObjectsPtrType) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutputWithContext(context.Background())
}

func (i *streamSourceConfigMysqlSourceConfigIncludeObjectsPtrType) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput)
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjects)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput {
	return o.ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutputWithContext(context.Background())
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceConfigMysqlSourceConfigIncludeObjects) *StreamSourceConfigMysqlSourceConfigIncludeObjects {
		return &v
	}).(StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput)
}

// MySQL databases on the server
// Structure is documented below.
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput) MysqlDatabases() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigIncludeObjects) []StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase {
		return v.MysqlDatabases
	}).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput)
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigMysqlSourceConfigIncludeObjects)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput) Elem() StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput {
	return o.ApplyT(func(v *StreamSourceConfigMysqlSourceConfigIncludeObjects) StreamSourceConfigMysqlSourceConfigIncludeObjects {
		if v != nil {
			return *v
		}
		var ret StreamSourceConfigMysqlSourceConfigIncludeObjects
		return ret
	}).(StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput)
}

// MySQL databases on the server
// Structure is documented below.
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput) MysqlDatabases() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput {
	return o.ApplyT(func(v *StreamSourceConfigMysqlSourceConfigIncludeObjects) []StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase {
		if v == nil {
			return nil
		}
		return v.MysqlDatabases
	}).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput)
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase struct {
	// Database name.
	Database string `pulumi:"database"`
	// Tables in the database.
	// Structure is documented below.
	MysqlTables []StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable `pulumi:"mysqlTables"`
}

// StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseInput is an input type that accepts StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArgs and StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseInput` via:
//
//	StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArgs{...}
type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput
	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArgs struct {
	// Database name.
	Database pulumi.StringInput `pulumi:"database"`
	// Tables in the database.
	// Structure is documented below.
	MysqlTables StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayInput `pulumi:"mysqlTables"`
}

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArgs) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArgs) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput)
}

// StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayInput is an input type that accepts StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArray and StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayInput` via:
//
//	StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArray{ StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArgs{...} }
type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput
	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArray []StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseInput

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArray) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArray) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput)
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput {
	return o
}

// Database name.
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase) string { return v.Database }).(pulumi.StringOutput)
}

// Tables in the database.
// Structure is documented below.
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput) MysqlTables() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase) []StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable {
		return v.MysqlTables
	}).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput)
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase {
		return vs[0].([]StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabase)[vs[1].(int)]
	}).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput)
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable struct {
	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	MysqlColumns []StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn `pulumi:"mysqlColumns"`
	// Table name.
	Table string `pulumi:"table"`
}

// StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableInput is an input type that accepts StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArgs and StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableInput` via:
//
//	StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArgs{...}
type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput
	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArgs struct {
	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	MysqlColumns StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput `pulumi:"mysqlColumns"`
	// Table name.
	Table pulumi.StringInput `pulumi:"table"`
}

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArgs) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArgs) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput)
}

// StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayInput is an input type that accepts StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArray and StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayInput` via:
//
//	StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArray{ StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArgs{...} }
type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput
	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArray []StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableInput

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArray) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArray) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput)
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput {
	return o
}

// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
// Structure is documented below.
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput) MysqlColumns() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable) []StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn {
		return v.MysqlColumns
	}).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput)
}

// Table name.
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable) string {
		return v.Table
	}).(pulumi.StringOutput)
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable {
		return vs[0].([]StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTable)[vs[1].(int)]
	}).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput)
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn struct {
	// Column collation.
	Collation *string `pulumi:"collation"`
	// Column name.
	Column *string `pulumi:"column"`
	// The MySQL data type. Full data types list can be found here:
	// https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType *string `pulumi:"dataType"`
	// (Output)
	// Column length.
	Length *int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
}

// StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnInput is an input type that accepts StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs and StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnInput` via:
//
//	StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs{...}
type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput
	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs struct {
	// Column collation.
	Collation pulumi.StringPtrInput `pulumi:"collation"`
	// Column name.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The MySQL data type. Full data types list can be found here:
	// https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// (Output)
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
}

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput)
}

// StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput is an input type that accepts StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray and StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput` via:
//
//	StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray{ StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs{...} }
type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput
	ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutputWithContext(context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray []StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnInput

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn)(nil)).Elem()
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return i.ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput)
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return o
}

// Column collation.
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *string {
		return v.Collation
	}).(pulumi.StringPtrOutput)
}

// Column name.
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *string {
		return v.Column
	}).(pulumi.StringPtrOutput)
}

// The MySQL data type. Full data types list can be found here:
// https://dev.mysql.com/doc/refman/8.0/en/data-types.html
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *string {
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Column length.
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *int {
		return v.Length
	}).(pulumi.IntPtrOutput)
}

// Whether or not the column can accept a null value.
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *bool {
		return v.Nullable
	}).(pulumi.BoolPtrOutput)
}

// The ordinal position of the column in the table.
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *int {
		return v.OrdinalPosition
	}).(pulumi.IntPtrOutput)
}

// Whether or not the column represents a primary key.
func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn) *bool {
		return v.PrimaryKey
	}).(pulumi.BoolPtrOutput)
}

type StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn)(nil)).Elem()
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput() StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput) ToStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutputWithContext(ctx context.Context) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput {
	return o
}

func (o StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn {
		return vs[0].([]StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumn)[vs[1].(int)]
	}).(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput)
}

type StreamSourceConfigOracleSourceConfig struct {
	// Configuration to drop large object values.
	DropLargeObjects *StreamSourceConfigOracleSourceConfigDropLargeObjects `pulumi:"dropLargeObjects"`
	// Oracle objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *StreamSourceConfigOracleSourceConfigExcludeObjects `pulumi:"excludeObjects"`
	// Oracle objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *StreamSourceConfigOracleSourceConfigIncludeObjects `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non negative.
	// If not set (or set to 0), the system's default value will be used.
	MaxConcurrentBackfillTasks *int `pulumi:"maxConcurrentBackfillTasks"`
	// Maximum number of concurrent CDC tasks. The number should be non negative.
	// If not set (or set to 0), the system's default value will be used.
	MaxConcurrentCdcTasks *int `pulumi:"maxConcurrentCdcTasks"`
	// Configuration to drop large object values.
	StreamLargeObjects *StreamSourceConfigOracleSourceConfigStreamLargeObjects `pulumi:"streamLargeObjects"`
}

// StreamSourceConfigOracleSourceConfigInput is an input type that accepts StreamSourceConfigOracleSourceConfigArgs and StreamSourceConfigOracleSourceConfigOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigInput` via:
//
//	StreamSourceConfigOracleSourceConfigArgs{...}
type StreamSourceConfigOracleSourceConfigInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigOutput() StreamSourceConfigOracleSourceConfigOutput
	ToStreamSourceConfigOracleSourceConfigOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigOutput
}

type StreamSourceConfigOracleSourceConfigArgs struct {
	// Configuration to drop large object values.
	DropLargeObjects StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrInput `pulumi:"dropLargeObjects"`
	// Oracle objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects StreamSourceConfigOracleSourceConfigExcludeObjectsPtrInput `pulumi:"excludeObjects"`
	// Oracle objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects StreamSourceConfigOracleSourceConfigIncludeObjectsPtrInput `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non negative.
	// If not set (or set to 0), the system's default value will be used.
	MaxConcurrentBackfillTasks pulumi.IntPtrInput `pulumi:"maxConcurrentBackfillTasks"`
	// Maximum number of concurrent CDC tasks. The number should be non negative.
	// If not set (or set to 0), the system's default value will be used.
	MaxConcurrentCdcTasks pulumi.IntPtrInput `pulumi:"maxConcurrentCdcTasks"`
	// Configuration to drop large object values.
	StreamLargeObjects StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrInput `pulumi:"streamLargeObjects"`
}

func (StreamSourceConfigOracleSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfig)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigArgs) ToStreamSourceConfigOracleSourceConfigOutput() StreamSourceConfigOracleSourceConfigOutput {
	return i.ToStreamSourceConfigOracleSourceConfigOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigArgs) ToStreamSourceConfigOracleSourceConfigOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigOutput)
}

func (i StreamSourceConfigOracleSourceConfigArgs) ToStreamSourceConfigOracleSourceConfigPtrOutput() StreamSourceConfigOracleSourceConfigPtrOutput {
	return i.ToStreamSourceConfigOracleSourceConfigPtrOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigArgs) ToStreamSourceConfigOracleSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigOutput).ToStreamSourceConfigOracleSourceConfigPtrOutputWithContext(ctx)
}

// StreamSourceConfigOracleSourceConfigPtrInput is an input type that accepts StreamSourceConfigOracleSourceConfigArgs, StreamSourceConfigOracleSourceConfigPtr and StreamSourceConfigOracleSourceConfigPtrOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigPtrInput` via:
//
//	        StreamSourceConfigOracleSourceConfigArgs{...}
//
//	or:
//
//	        nil
type StreamSourceConfigOracleSourceConfigPtrInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigPtrOutput() StreamSourceConfigOracleSourceConfigPtrOutput
	ToStreamSourceConfigOracleSourceConfigPtrOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigPtrOutput
}

type streamSourceConfigOracleSourceConfigPtrType StreamSourceConfigOracleSourceConfigArgs

func StreamSourceConfigOracleSourceConfigPtr(v *StreamSourceConfigOracleSourceConfigArgs) StreamSourceConfigOracleSourceConfigPtrInput {
	return (*streamSourceConfigOracleSourceConfigPtrType)(v)
}

func (*streamSourceConfigOracleSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigOracleSourceConfig)(nil)).Elem()
}

func (i *streamSourceConfigOracleSourceConfigPtrType) ToStreamSourceConfigOracleSourceConfigPtrOutput() StreamSourceConfigOracleSourceConfigPtrOutput {
	return i.ToStreamSourceConfigOracleSourceConfigPtrOutputWithContext(context.Background())
}

func (i *streamSourceConfigOracleSourceConfigPtrType) ToStreamSourceConfigOracleSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigPtrOutput)
}

type StreamSourceConfigOracleSourceConfigOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfig)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigOutput) ToStreamSourceConfigOracleSourceConfigOutput() StreamSourceConfigOracleSourceConfigOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigOutput) ToStreamSourceConfigOracleSourceConfigOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigOutput) ToStreamSourceConfigOracleSourceConfigPtrOutput() StreamSourceConfigOracleSourceConfigPtrOutput {
	return o.ToStreamSourceConfigOracleSourceConfigPtrOutputWithContext(context.Background())
}

func (o StreamSourceConfigOracleSourceConfigOutput) ToStreamSourceConfigOracleSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceConfigOracleSourceConfig) *StreamSourceConfigOracleSourceConfig {
		return &v
	}).(StreamSourceConfigOracleSourceConfigPtrOutput)
}

// Configuration to drop large object values.
func (o StreamSourceConfigOracleSourceConfigOutput) DropLargeObjects() StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfig) *StreamSourceConfigOracleSourceConfigDropLargeObjects {
		return v.DropLargeObjects
	}).(StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput)
}

// Oracle objects to exclude from the stream.
// Structure is documented below.
func (o StreamSourceConfigOracleSourceConfigOutput) ExcludeObjects() StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfig) *StreamSourceConfigOracleSourceConfigExcludeObjects {
		return v.ExcludeObjects
	}).(StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput)
}

// Oracle objects to retrieve from the source.
// Structure is documented below.
func (o StreamSourceConfigOracleSourceConfigOutput) IncludeObjects() StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfig) *StreamSourceConfigOracleSourceConfigIncludeObjects {
		return v.IncludeObjects
	}).(StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non negative.
// If not set (or set to 0), the system's default value will be used.
func (o StreamSourceConfigOracleSourceConfigOutput) MaxConcurrentBackfillTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfig) *int { return v.MaxConcurrentBackfillTasks }).(pulumi.IntPtrOutput)
}

// Maximum number of concurrent CDC tasks. The number should be non negative.
// If not set (or set to 0), the system's default value will be used.
func (o StreamSourceConfigOracleSourceConfigOutput) MaxConcurrentCdcTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfig) *int { return v.MaxConcurrentCdcTasks }).(pulumi.IntPtrOutput)
}

// Configuration to drop large object values.
func (o StreamSourceConfigOracleSourceConfigOutput) StreamLargeObjects() StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfig) *StreamSourceConfigOracleSourceConfigStreamLargeObjects {
		return v.StreamLargeObjects
	}).(StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput)
}

type StreamSourceConfigOracleSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigOracleSourceConfig)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigPtrOutput) ToStreamSourceConfigOracleSourceConfigPtrOutput() StreamSourceConfigOracleSourceConfigPtrOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigPtrOutput) ToStreamSourceConfigOracleSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigPtrOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigPtrOutput) Elem() StreamSourceConfigOracleSourceConfigOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfig) StreamSourceConfigOracleSourceConfig {
		if v != nil {
			return *v
		}
		var ret StreamSourceConfigOracleSourceConfig
		return ret
	}).(StreamSourceConfigOracleSourceConfigOutput)
}

// Configuration to drop large object values.
func (o StreamSourceConfigOracleSourceConfigPtrOutput) DropLargeObjects() StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfig) *StreamSourceConfigOracleSourceConfigDropLargeObjects {
		if v == nil {
			return nil
		}
		return v.DropLargeObjects
	}).(StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput)
}

// Oracle objects to exclude from the stream.
// Structure is documented below.
func (o StreamSourceConfigOracleSourceConfigPtrOutput) ExcludeObjects() StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfig) *StreamSourceConfigOracleSourceConfigExcludeObjects {
		if v == nil {
			return nil
		}
		return v.ExcludeObjects
	}).(StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput)
}

// Oracle objects to retrieve from the source.
// Structure is documented below.
func (o StreamSourceConfigOracleSourceConfigPtrOutput) IncludeObjects() StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfig) *StreamSourceConfigOracleSourceConfigIncludeObjects {
		if v == nil {
			return nil
		}
		return v.IncludeObjects
	}).(StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non negative.
// If not set (or set to 0), the system's default value will be used.
func (o StreamSourceConfigOracleSourceConfigPtrOutput) MaxConcurrentBackfillTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentBackfillTasks
	}).(pulumi.IntPtrOutput)
}

// Maximum number of concurrent CDC tasks. The number should be non negative.
// If not set (or set to 0), the system's default value will be used.
func (o StreamSourceConfigOracleSourceConfigPtrOutput) MaxConcurrentCdcTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentCdcTasks
	}).(pulumi.IntPtrOutput)
}

// Configuration to drop large object values.
func (o StreamSourceConfigOracleSourceConfigPtrOutput) StreamLargeObjects() StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfig) *StreamSourceConfigOracleSourceConfigStreamLargeObjects {
		if v == nil {
			return nil
		}
		return v.StreamLargeObjects
	}).(StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput)
}

type StreamSourceConfigOracleSourceConfigDropLargeObjects struct {
}

// StreamSourceConfigOracleSourceConfigDropLargeObjectsInput is an input type that accepts StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs and StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigDropLargeObjectsInput` via:
//
//	StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs{...}
type StreamSourceConfigOracleSourceConfigDropLargeObjectsInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigDropLargeObjectsOutput() StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput
	ToStreamSourceConfigOracleSourceConfigDropLargeObjectsOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput
}

type StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs struct {
}

func (StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigDropLargeObjects)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs) ToStreamSourceConfigOracleSourceConfigDropLargeObjectsOutput() StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput {
	return i.ToStreamSourceConfigOracleSourceConfigDropLargeObjectsOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs) ToStreamSourceConfigOracleSourceConfigDropLargeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput)
}

func (i StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs) ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput {
	return i.ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs) ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput).ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutputWithContext(ctx)
}

// StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrInput is an input type that accepts StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs, StreamSourceConfigOracleSourceConfigDropLargeObjectsPtr and StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrInput` via:
//
//	        StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs{...}
//
//	or:
//
//	        nil
type StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput
	ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput
}

type streamSourceConfigOracleSourceConfigDropLargeObjectsPtrType StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs

func StreamSourceConfigOracleSourceConfigDropLargeObjectsPtr(v *StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs) StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrInput {
	return (*streamSourceConfigOracleSourceConfigDropLargeObjectsPtrType)(v)
}

func (*streamSourceConfigOracleSourceConfigDropLargeObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigOracleSourceConfigDropLargeObjects)(nil)).Elem()
}

func (i *streamSourceConfigOracleSourceConfigDropLargeObjectsPtrType) ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput {
	return i.ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutputWithContext(context.Background())
}

func (i *streamSourceConfigOracleSourceConfigDropLargeObjectsPtrType) ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput)
}

type StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigDropLargeObjects)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput) ToStreamSourceConfigOracleSourceConfigDropLargeObjectsOutput() StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput) ToStreamSourceConfigOracleSourceConfigDropLargeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput) ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput {
	return o.ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutputWithContext(context.Background())
}

func (o StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput) ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceConfigOracleSourceConfigDropLargeObjects) *StreamSourceConfigOracleSourceConfigDropLargeObjects {
		return &v
	}).(StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput)
}

type StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigOracleSourceConfigDropLargeObjects)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput) ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput) ToStreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput) Elem() StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfigDropLargeObjects) StreamSourceConfigOracleSourceConfigDropLargeObjects {
		if v != nil {
			return *v
		}
		var ret StreamSourceConfigOracleSourceConfigDropLargeObjects
		return ret
	}).(StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput)
}

type StreamSourceConfigOracleSourceConfigExcludeObjects struct {
	// Oracle schemas/databases in the database server
	// Structure is documented below.
	OracleSchemas []StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema `pulumi:"oracleSchemas"`
}

// StreamSourceConfigOracleSourceConfigExcludeObjectsInput is an input type that accepts StreamSourceConfigOracleSourceConfigExcludeObjectsArgs and StreamSourceConfigOracleSourceConfigExcludeObjectsOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigExcludeObjectsInput` via:
//
//	StreamSourceConfigOracleSourceConfigExcludeObjectsArgs{...}
type StreamSourceConfigOracleSourceConfigExcludeObjectsInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOutput
	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOutput
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsArgs struct {
	// Oracle schemas/databases in the database server
	// Structure is documented below.
	OracleSchemas StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayInput `pulumi:"oracleSchemas"`
}

func (StreamSourceConfigOracleSourceConfigExcludeObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjects)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsArgs) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOutput {
	return i.ToStreamSourceConfigOracleSourceConfigExcludeObjectsOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsArgs) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigExcludeObjectsOutput)
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsArgs) ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput {
	return i.ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsArgs) ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigExcludeObjectsOutput).ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutputWithContext(ctx)
}

// StreamSourceConfigOracleSourceConfigExcludeObjectsPtrInput is an input type that accepts StreamSourceConfigOracleSourceConfigExcludeObjectsArgs, StreamSourceConfigOracleSourceConfigExcludeObjectsPtr and StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigExcludeObjectsPtrInput` via:
//
//	        StreamSourceConfigOracleSourceConfigExcludeObjectsArgs{...}
//
//	or:
//
//	        nil
type StreamSourceConfigOracleSourceConfigExcludeObjectsPtrInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput
	ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput
}

type streamSourceConfigOracleSourceConfigExcludeObjectsPtrType StreamSourceConfigOracleSourceConfigExcludeObjectsArgs

func StreamSourceConfigOracleSourceConfigExcludeObjectsPtr(v *StreamSourceConfigOracleSourceConfigExcludeObjectsArgs) StreamSourceConfigOracleSourceConfigExcludeObjectsPtrInput {
	return (*streamSourceConfigOracleSourceConfigExcludeObjectsPtrType)(v)
}

func (*streamSourceConfigOracleSourceConfigExcludeObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigOracleSourceConfigExcludeObjects)(nil)).Elem()
}

func (i *streamSourceConfigOracleSourceConfigExcludeObjectsPtrType) ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput {
	return i.ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutputWithContext(context.Background())
}

func (i *streamSourceConfigOracleSourceConfigExcludeObjectsPtrType) ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput)
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjects)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput {
	return o.ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutputWithContext(context.Background())
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceConfigOracleSourceConfigExcludeObjects) *StreamSourceConfigOracleSourceConfigExcludeObjects {
		return &v
	}).(StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput)
}

// Oracle schemas/databases in the database server
// Structure is documented below.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOutput) OracleSchemas() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjects) []StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema {
		return v.OracleSchemas
	}).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput)
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigOracleSourceConfigExcludeObjects)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput) Elem() StreamSourceConfigOracleSourceConfigExcludeObjectsOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfigExcludeObjects) StreamSourceConfigOracleSourceConfigExcludeObjects {
		if v != nil {
			return *v
		}
		var ret StreamSourceConfigOracleSourceConfigExcludeObjects
		return ret
	}).(StreamSourceConfigOracleSourceConfigExcludeObjectsOutput)
}

// Oracle schemas/databases in the database server
// Structure is documented below.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput) OracleSchemas() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfigExcludeObjects) []StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema {
		if v == nil {
			return nil
		}
		return v.OracleSchemas
	}).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput)
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema struct {
	// Tables in the database.
	// Structure is documented below.
	OracleTables []StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable `pulumi:"oracleTables"`
	// Schema name.
	Schema string `pulumi:"schema"`
}

// StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaInput is an input type that accepts StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArgs and StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaInput` via:
//
//	StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArgs{...}
type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput
	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArgs struct {
	// Tables in the database.
	// Structure is documented below.
	OracleTables StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayInput `pulumi:"oracleTables"`
	// Schema name.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArgs) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput {
	return i.ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArgs) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput)
}

// StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayInput is an input type that accepts StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArray and StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayInput` via:
//
//	StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArray{ StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArgs{...} }
type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput
	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArray []StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaInput

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArray) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput {
	return i.ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArray) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput)
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput {
	return o
}

// Tables in the database.
// Structure is documented below.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput) OracleTables() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema) []StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable {
		return v.OracleTables
	}).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput)
}

// Schema name.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema) string { return v.Schema }).(pulumi.StringOutput)
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema {
		return vs[0].([]StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchema)[vs[1].(int)]
	}).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput)
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable struct {
	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	OracleColumns []StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn `pulumi:"oracleColumns"`
	// Table name.
	Table string `pulumi:"table"`
}

// StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableInput is an input type that accepts StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArgs and StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableInput` via:
//
//	StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArgs{...}
type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput
	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArgs struct {
	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	OracleColumns StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayInput `pulumi:"oracleColumns"`
	// Table name.
	Table pulumi.StringInput `pulumi:"table"`
}

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArgs) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput {
	return i.ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArgs) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput)
}

// StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayInput is an input type that accepts StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArray and StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayInput` via:
//
//	StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArray{ StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArgs{...} }
type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput
	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArray []StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableInput

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArray) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput {
	return i.ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArray) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput)
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput {
	return o
}

// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
// Structure is documented below.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput) OracleColumns() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable) []StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn {
		return v.OracleColumns
	}).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput)
}

// Table name.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable) string {
		return v.Table
	}).(pulumi.StringOutput)
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable {
		return vs[0].([]StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTable)[vs[1].(int)]
	}).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput)
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn struct {
	// Column name.
	Column *string `pulumi:"column"`
	// The Oracle data type. Full data types list can be found here:
	// https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html
	DataType *string `pulumi:"dataType"`
	// (Output)
	// Column encoding.
	Encoding *string `pulumi:"encoding"`
	// (Output)
	// Column length.
	Length *int `pulumi:"length"`
	// (Output)
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// (Output)
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// (Output)
	// Column precision.
	Precision *int `pulumi:"precision"`
	// (Output)
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
	// (Output)
	// Column scale.
	Scale *int `pulumi:"scale"`
}

// StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnInput is an input type that accepts StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArgs and StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnInput` via:
//
//	StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArgs{...}
type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput
	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArgs struct {
	// Column name.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The Oracle data type. Full data types list can be found here:
	// https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// (Output)
	// Column encoding.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// (Output)
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// (Output)
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// (Output)
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// (Output)
	// Column precision.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
	// (Output)
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
	// (Output)
	// Column scale.
	Scale pulumi.IntPtrInput `pulumi:"scale"`
}

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArgs) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput {
	return i.ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArgs) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput)
}

// StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayInput is an input type that accepts StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArray and StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayInput` via:
//
//	StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArray{ StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArgs{...} }
type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput
	ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArray []StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnInput

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArray) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return i.ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArray) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput)
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput {
	return o
}

// Column name.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn) *string {
		return v.Column
	}).(pulumi.StringPtrOutput)
}

// The Oracle data type. Full data types list can be found here:
// https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn) *string {
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Column encoding.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn) *string {
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Column length.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn) *int {
		return v.Length
	}).(pulumi.IntPtrOutput)
}

// (Output)
// Whether or not the column can accept a null value.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn) *bool {
		return v.Nullable
	}).(pulumi.BoolPtrOutput)
}

// (Output)
// The ordinal position of the column in the table.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn) *int {
		return v.OrdinalPosition
	}).(pulumi.IntPtrOutput)
}

// (Output)
// Column precision.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn) *int {
		return v.Precision
	}).(pulumi.IntPtrOutput)
}

// (Output)
// Whether or not the column represents a primary key.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn) *bool {
		return v.PrimaryKey
	}).(pulumi.BoolPtrOutput)
}

// (Output)
// Column scale.
func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput) Scale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn) *int {
		return v.Scale
	}).(pulumi.IntPtrOutput)
}

type StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput() StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput) ToStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn {
		return vs[0].([]StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumn)[vs[1].(int)]
	}).(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput)
}

type StreamSourceConfigOracleSourceConfigIncludeObjects struct {
	// Oracle schemas/databases in the database server
	// Structure is documented below.
	OracleSchemas []StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema `pulumi:"oracleSchemas"`
}

// StreamSourceConfigOracleSourceConfigIncludeObjectsInput is an input type that accepts StreamSourceConfigOracleSourceConfigIncludeObjectsArgs and StreamSourceConfigOracleSourceConfigIncludeObjectsOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigIncludeObjectsInput` via:
//
//	StreamSourceConfigOracleSourceConfigIncludeObjectsArgs{...}
type StreamSourceConfigOracleSourceConfigIncludeObjectsInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOutput
	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOutput
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsArgs struct {
	// Oracle schemas/databases in the database server
	// Structure is documented below.
	OracleSchemas StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayInput `pulumi:"oracleSchemas"`
}

func (StreamSourceConfigOracleSourceConfigIncludeObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjects)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsArgs) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOutput {
	return i.ToStreamSourceConfigOracleSourceConfigIncludeObjectsOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsArgs) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigIncludeObjectsOutput)
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsArgs) ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput {
	return i.ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsArgs) ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigIncludeObjectsOutput).ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutputWithContext(ctx)
}

// StreamSourceConfigOracleSourceConfigIncludeObjectsPtrInput is an input type that accepts StreamSourceConfigOracleSourceConfigIncludeObjectsArgs, StreamSourceConfigOracleSourceConfigIncludeObjectsPtr and StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigIncludeObjectsPtrInput` via:
//
//	        StreamSourceConfigOracleSourceConfigIncludeObjectsArgs{...}
//
//	or:
//
//	        nil
type StreamSourceConfigOracleSourceConfigIncludeObjectsPtrInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput
	ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput
}

type streamSourceConfigOracleSourceConfigIncludeObjectsPtrType StreamSourceConfigOracleSourceConfigIncludeObjectsArgs

func StreamSourceConfigOracleSourceConfigIncludeObjectsPtr(v *StreamSourceConfigOracleSourceConfigIncludeObjectsArgs) StreamSourceConfigOracleSourceConfigIncludeObjectsPtrInput {
	return (*streamSourceConfigOracleSourceConfigIncludeObjectsPtrType)(v)
}

func (*streamSourceConfigOracleSourceConfigIncludeObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigOracleSourceConfigIncludeObjects)(nil)).Elem()
}

func (i *streamSourceConfigOracleSourceConfigIncludeObjectsPtrType) ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput {
	return i.ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutputWithContext(context.Background())
}

func (i *streamSourceConfigOracleSourceConfigIncludeObjectsPtrType) ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput)
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjects)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput {
	return o.ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutputWithContext(context.Background())
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceConfigOracleSourceConfigIncludeObjects) *StreamSourceConfigOracleSourceConfigIncludeObjects {
		return &v
	}).(StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput)
}

// Oracle schemas/databases in the database server
// Structure is documented below.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOutput) OracleSchemas() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjects) []StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema {
		return v.OracleSchemas
	}).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput)
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigOracleSourceConfigIncludeObjects)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput) Elem() StreamSourceConfigOracleSourceConfigIncludeObjectsOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfigIncludeObjects) StreamSourceConfigOracleSourceConfigIncludeObjects {
		if v != nil {
			return *v
		}
		var ret StreamSourceConfigOracleSourceConfigIncludeObjects
		return ret
	}).(StreamSourceConfigOracleSourceConfigIncludeObjectsOutput)
}

// Oracle schemas/databases in the database server
// Structure is documented below.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput) OracleSchemas() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfigIncludeObjects) []StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema {
		if v == nil {
			return nil
		}
		return v.OracleSchemas
	}).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput)
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema struct {
	// Tables in the database.
	// Structure is documented below.
	OracleTables []StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable `pulumi:"oracleTables"`
	// Schema name.
	Schema string `pulumi:"schema"`
}

// StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaInput is an input type that accepts StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArgs and StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaInput` via:
//
//	StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArgs{...}
type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput
	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArgs struct {
	// Tables in the database.
	// Structure is documented below.
	OracleTables StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayInput `pulumi:"oracleTables"`
	// Schema name.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArgs) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput {
	return i.ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArgs) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput)
}

// StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayInput is an input type that accepts StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArray and StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayInput` via:
//
//	StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArray{ StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArgs{...} }
type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput
	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArray []StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaInput

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArray) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput {
	return i.ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArray) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput)
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput {
	return o
}

// Tables in the database.
// Structure is documented below.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput) OracleTables() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema) []StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable {
		return v.OracleTables
	}).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput)
}

// Schema name.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema) string { return v.Schema }).(pulumi.StringOutput)
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema {
		return vs[0].([]StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchema)[vs[1].(int)]
	}).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput)
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable struct {
	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	OracleColumns []StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn `pulumi:"oracleColumns"`
	// Table name.
	Table string `pulumi:"table"`
}

// StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableInput is an input type that accepts StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArgs and StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableInput` via:
//
//	StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArgs{...}
type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput
	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArgs struct {
	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	OracleColumns StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayInput `pulumi:"oracleColumns"`
	// Table name.
	Table pulumi.StringInput `pulumi:"table"`
}

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArgs) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput {
	return i.ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArgs) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput)
}

// StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayInput is an input type that accepts StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArray and StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayInput` via:
//
//	StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArray{ StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArgs{...} }
type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput
	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArray []StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableInput

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArray) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput {
	return i.ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArray) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput)
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput {
	return o
}

// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
// Structure is documented below.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput) OracleColumns() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable) []StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn {
		return v.OracleColumns
	}).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput)
}

// Table name.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable) string {
		return v.Table
	}).(pulumi.StringOutput)
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable {
		return vs[0].([]StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTable)[vs[1].(int)]
	}).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput)
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn struct {
	// Column name.
	Column *string `pulumi:"column"`
	// The Oracle data type. Full data types list can be found here:
	// https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html
	DataType *string `pulumi:"dataType"`
	// (Output)
	// Column encoding.
	Encoding *string `pulumi:"encoding"`
	// (Output)
	// Column length.
	Length *int `pulumi:"length"`
	// (Output)
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// (Output)
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// (Output)
	// Column precision.
	Precision *int `pulumi:"precision"`
	// (Output)
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
	// (Output)
	// Column scale.
	Scale *int `pulumi:"scale"`
}

// StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnInput is an input type that accepts StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArgs and StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnInput` via:
//
//	StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArgs{...}
type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput
	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArgs struct {
	// Column name.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The Oracle data type. Full data types list can be found here:
	// https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// (Output)
	// Column encoding.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// (Output)
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// (Output)
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// (Output)
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// (Output)
	// Column precision.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
	// (Output)
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
	// (Output)
	// Column scale.
	Scale pulumi.IntPtrInput `pulumi:"scale"`
}

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArgs) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput {
	return i.ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArgs) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput)
}

// StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayInput is an input type that accepts StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArray and StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayInput` via:
//
//	StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArray{ StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArgs{...} }
type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput
	ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArray []StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnInput

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArray) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return i.ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArray) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput)
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput {
	return o
}

// Column name.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn) *string {
		return v.Column
	}).(pulumi.StringPtrOutput)
}

// The Oracle data type. Full data types list can be found here:
// https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn) *string {
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Column encoding.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn) *string {
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Column length.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn) *int {
		return v.Length
	}).(pulumi.IntPtrOutput)
}

// (Output)
// Whether or not the column can accept a null value.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn) *bool {
		return v.Nullable
	}).(pulumi.BoolPtrOutput)
}

// (Output)
// The ordinal position of the column in the table.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn) *int {
		return v.OrdinalPosition
	}).(pulumi.IntPtrOutput)
}

// (Output)
// Column precision.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn) *int {
		return v.Precision
	}).(pulumi.IntPtrOutput)
}

// (Output)
// Whether or not the column represents a primary key.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn) *bool {
		return v.PrimaryKey
	}).(pulumi.BoolPtrOutput)
}

// (Output)
// Column scale.
func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput) Scale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn) *int {
		return v.Scale
	}).(pulumi.IntPtrOutput)
}

type StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput() StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput) ToStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn {
		return vs[0].([]StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumn)[vs[1].(int)]
	}).(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput)
}

type StreamSourceConfigOracleSourceConfigStreamLargeObjects struct {
}

// StreamSourceConfigOracleSourceConfigStreamLargeObjectsInput is an input type that accepts StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs and StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigStreamLargeObjectsInput` via:
//
//	StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs{...}
type StreamSourceConfigOracleSourceConfigStreamLargeObjectsInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput() StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput
	ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput
}

type StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs struct {
}

func (StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigStreamLargeObjects)(nil)).Elem()
}

func (i StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs) ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput() StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput {
	return i.ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs) ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput)
}

func (i StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs) ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput {
	return i.ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutputWithContext(context.Background())
}

func (i StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs) ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput).ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutputWithContext(ctx)
}

// StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrInput is an input type that accepts StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs, StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtr and StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput values.
// You can construct a concrete instance of `StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrInput` via:
//
//	        StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs{...}
//
//	or:
//
//	        nil
type StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrInput interface {
	pulumi.Input

	ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput
	ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutputWithContext(context.Context) StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput
}

type streamSourceConfigOracleSourceConfigStreamLargeObjectsPtrType StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs

func StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtr(v *StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs) StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrInput {
	return (*streamSourceConfigOracleSourceConfigStreamLargeObjectsPtrType)(v)
}

func (*streamSourceConfigOracleSourceConfigStreamLargeObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigOracleSourceConfigStreamLargeObjects)(nil)).Elem()
}

func (i *streamSourceConfigOracleSourceConfigStreamLargeObjectsPtrType) ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput {
	return i.ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutputWithContext(context.Background())
}

func (i *streamSourceConfigOracleSourceConfigStreamLargeObjectsPtrType) ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput)
}

type StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigOracleSourceConfigStreamLargeObjects)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput) ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput() StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput) ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput) ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput {
	return o.ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutputWithContext(context.Background())
}

func (o StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput) ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceConfigOracleSourceConfigStreamLargeObjects) *StreamSourceConfigOracleSourceConfigStreamLargeObjects {
		return &v
	}).(StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput)
}

type StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigOracleSourceConfigStreamLargeObjects)(nil)).Elem()
}

func (o StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput) ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput() StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput) ToStreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput) Elem() StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput {
	return o.ApplyT(func(v *StreamSourceConfigOracleSourceConfigStreamLargeObjects) StreamSourceConfigOracleSourceConfigStreamLargeObjects {
		if v != nil {
			return *v
		}
		var ret StreamSourceConfigOracleSourceConfigStreamLargeObjects
		return ret
	}).(StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput)
}

type StreamSourceConfigPostgresqlSourceConfig struct {
	// PostgreSQL objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *StreamSourceConfigPostgresqlSourceConfigExcludeObjects `pulumi:"excludeObjects"`
	// PostgreSQL objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *StreamSourceConfigPostgresqlSourceConfigIncludeObjects `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non
	// negative. If not set (or set to 0), the system's default value will be used.
	MaxConcurrentBackfillTasks *int `pulumi:"maxConcurrentBackfillTasks"`
	// The name of the publication that includes the set of all tables
	// that are defined in the stream's include_objects.
	Publication string `pulumi:"publication"`
	// The name of the logical replication slot that's configured with
	// the pgoutput plugin.
	ReplicationSlot string `pulumi:"replicationSlot"`
}

// StreamSourceConfigPostgresqlSourceConfigInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigArgs and StreamSourceConfigPostgresqlSourceConfigOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigArgs{...}
type StreamSourceConfigPostgresqlSourceConfigInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigOutput() StreamSourceConfigPostgresqlSourceConfigOutput
	ToStreamSourceConfigPostgresqlSourceConfigOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigOutput
}

type StreamSourceConfigPostgresqlSourceConfigArgs struct {
	// PostgreSQL objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrInput `pulumi:"excludeObjects"`
	// PostgreSQL objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrInput `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non
	// negative. If not set (or set to 0), the system's default value will be used.
	MaxConcurrentBackfillTasks pulumi.IntPtrInput `pulumi:"maxConcurrentBackfillTasks"`
	// The name of the publication that includes the set of all tables
	// that are defined in the stream's include_objects.
	Publication pulumi.StringInput `pulumi:"publication"`
	// The name of the logical replication slot that's configured with
	// the pgoutput plugin.
	ReplicationSlot pulumi.StringInput `pulumi:"replicationSlot"`
}

func (StreamSourceConfigPostgresqlSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfig)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigArgs) ToStreamSourceConfigPostgresqlSourceConfigOutput() StreamSourceConfigPostgresqlSourceConfigOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigArgs) ToStreamSourceConfigPostgresqlSourceConfigOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigOutput)
}

func (i StreamSourceConfigPostgresqlSourceConfigArgs) ToStreamSourceConfigPostgresqlSourceConfigPtrOutput() StreamSourceConfigPostgresqlSourceConfigPtrOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigPtrOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigArgs) ToStreamSourceConfigPostgresqlSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigOutput).ToStreamSourceConfigPostgresqlSourceConfigPtrOutputWithContext(ctx)
}

// StreamSourceConfigPostgresqlSourceConfigPtrInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigArgs, StreamSourceConfigPostgresqlSourceConfigPtr and StreamSourceConfigPostgresqlSourceConfigPtrOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigPtrInput` via:
//
//	        StreamSourceConfigPostgresqlSourceConfigArgs{...}
//
//	or:
//
//	        nil
type StreamSourceConfigPostgresqlSourceConfigPtrInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigPtrOutput() StreamSourceConfigPostgresqlSourceConfigPtrOutput
	ToStreamSourceConfigPostgresqlSourceConfigPtrOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigPtrOutput
}

type streamSourceConfigPostgresqlSourceConfigPtrType StreamSourceConfigPostgresqlSourceConfigArgs

func StreamSourceConfigPostgresqlSourceConfigPtr(v *StreamSourceConfigPostgresqlSourceConfigArgs) StreamSourceConfigPostgresqlSourceConfigPtrInput {
	return (*streamSourceConfigPostgresqlSourceConfigPtrType)(v)
}

func (*streamSourceConfigPostgresqlSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigPostgresqlSourceConfig)(nil)).Elem()
}

func (i *streamSourceConfigPostgresqlSourceConfigPtrType) ToStreamSourceConfigPostgresqlSourceConfigPtrOutput() StreamSourceConfigPostgresqlSourceConfigPtrOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigPtrOutputWithContext(context.Background())
}

func (i *streamSourceConfigPostgresqlSourceConfigPtrType) ToStreamSourceConfigPostgresqlSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigPtrOutput)
}

type StreamSourceConfigPostgresqlSourceConfigOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfig)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigOutput) ToStreamSourceConfigPostgresqlSourceConfigOutput() StreamSourceConfigPostgresqlSourceConfigOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigOutput) ToStreamSourceConfigPostgresqlSourceConfigOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigOutput) ToStreamSourceConfigPostgresqlSourceConfigPtrOutput() StreamSourceConfigPostgresqlSourceConfigPtrOutput {
	return o.ToStreamSourceConfigPostgresqlSourceConfigPtrOutputWithContext(context.Background())
}

func (o StreamSourceConfigPostgresqlSourceConfigOutput) ToStreamSourceConfigPostgresqlSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceConfigPostgresqlSourceConfig) *StreamSourceConfigPostgresqlSourceConfig {
		return &v
	}).(StreamSourceConfigPostgresqlSourceConfigPtrOutput)
}

// PostgreSQL objects to exclude from the stream.
// Structure is documented below.
func (o StreamSourceConfigPostgresqlSourceConfigOutput) ExcludeObjects() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfig) *StreamSourceConfigPostgresqlSourceConfigExcludeObjects {
		return v.ExcludeObjects
	}).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput)
}

// PostgreSQL objects to retrieve from the source.
// Structure is documented below.
func (o StreamSourceConfigPostgresqlSourceConfigOutput) IncludeObjects() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfig) *StreamSourceConfigPostgresqlSourceConfigIncludeObjects {
		return v.IncludeObjects
	}).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non
// negative. If not set (or set to 0), the system's default value will be used.
func (o StreamSourceConfigPostgresqlSourceConfigOutput) MaxConcurrentBackfillTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfig) *int { return v.MaxConcurrentBackfillTasks }).(pulumi.IntPtrOutput)
}

// The name of the publication that includes the set of all tables
// that are defined in the stream's include_objects.
func (o StreamSourceConfigPostgresqlSourceConfigOutput) Publication() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfig) string { return v.Publication }).(pulumi.StringOutput)
}

// The name of the logical replication slot that's configured with
// the pgoutput plugin.
func (o StreamSourceConfigPostgresqlSourceConfigOutput) ReplicationSlot() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfig) string { return v.ReplicationSlot }).(pulumi.StringOutput)
}

type StreamSourceConfigPostgresqlSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigPostgresqlSourceConfig)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigPtrOutput) ToStreamSourceConfigPostgresqlSourceConfigPtrOutput() StreamSourceConfigPostgresqlSourceConfigPtrOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigPtrOutput) ToStreamSourceConfigPostgresqlSourceConfigPtrOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigPtrOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigPtrOutput) Elem() StreamSourceConfigPostgresqlSourceConfigOutput {
	return o.ApplyT(func(v *StreamSourceConfigPostgresqlSourceConfig) StreamSourceConfigPostgresqlSourceConfig {
		if v != nil {
			return *v
		}
		var ret StreamSourceConfigPostgresqlSourceConfig
		return ret
	}).(StreamSourceConfigPostgresqlSourceConfigOutput)
}

// PostgreSQL objects to exclude from the stream.
// Structure is documented below.
func (o StreamSourceConfigPostgresqlSourceConfigPtrOutput) ExcludeObjects() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigPostgresqlSourceConfig) *StreamSourceConfigPostgresqlSourceConfigExcludeObjects {
		if v == nil {
			return nil
		}
		return v.ExcludeObjects
	}).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput)
}

// PostgreSQL objects to retrieve from the source.
// Structure is documented below.
func (o StreamSourceConfigPostgresqlSourceConfigPtrOutput) IncludeObjects() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigPostgresqlSourceConfig) *StreamSourceConfigPostgresqlSourceConfigIncludeObjects {
		if v == nil {
			return nil
		}
		return v.IncludeObjects
	}).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non
// negative. If not set (or set to 0), the system's default value will be used.
func (o StreamSourceConfigPostgresqlSourceConfigPtrOutput) MaxConcurrentBackfillTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigPostgresqlSourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentBackfillTasks
	}).(pulumi.IntPtrOutput)
}

// The name of the publication that includes the set of all tables
// that are defined in the stream's include_objects.
func (o StreamSourceConfigPostgresqlSourceConfigPtrOutput) Publication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigPostgresqlSourceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Publication
	}).(pulumi.StringPtrOutput)
}

// The name of the logical replication slot that's configured with
// the pgoutput plugin.
func (o StreamSourceConfigPostgresqlSourceConfigPtrOutput) ReplicationSlot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamSourceConfigPostgresqlSourceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ReplicationSlot
	}).(pulumi.StringPtrOutput)
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjects struct {
	// PostgreSQL schemas on the server
	// Structure is documented below.
	PostgresqlSchemas []StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema `pulumi:"postgresqlSchemas"`
}

// StreamSourceConfigPostgresqlSourceConfigExcludeObjectsInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs and StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigExcludeObjectsInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs{...}
type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput
	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs struct {
	// PostgreSQL schemas on the server
	// Structure is documented below.
	PostgresqlSchemas StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayInput `pulumi:"postgresqlSchemas"`
}

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjects)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput)
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput).ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutputWithContext(ctx)
}

// StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs, StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtr and StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrInput` via:
//
//	        StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs{...}
//
//	or:
//
//	        nil
type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput
	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput
}

type streamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrType StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs

func StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtr(v *StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrInput {
	return (*streamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrType)(v)
}

func (*streamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigPostgresqlSourceConfigExcludeObjects)(nil)).Elem()
}

func (i *streamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrType) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutputWithContext(context.Background())
}

func (i *streamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrType) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput)
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjects)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput {
	return o.ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutputWithContext(context.Background())
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceConfigPostgresqlSourceConfigExcludeObjects) *StreamSourceConfigPostgresqlSourceConfigExcludeObjects {
		return &v
	}).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput)
}

// PostgreSQL schemas on the server
// Structure is documented below.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput) PostgresqlSchemas() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjects) []StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema {
		return v.PostgresqlSchemas
	}).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput)
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigPostgresqlSourceConfigExcludeObjects)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput) Elem() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput {
	return o.ApplyT(func(v *StreamSourceConfigPostgresqlSourceConfigExcludeObjects) StreamSourceConfigPostgresqlSourceConfigExcludeObjects {
		if v != nil {
			return *v
		}
		var ret StreamSourceConfigPostgresqlSourceConfigExcludeObjects
		return ret
	}).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput)
}

// PostgreSQL schemas on the server
// Structure is documented below.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput) PostgresqlSchemas() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput {
	return o.ApplyT(func(v *StreamSourceConfigPostgresqlSourceConfigExcludeObjects) []StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema {
		if v == nil {
			return nil
		}
		return v.PostgresqlSchemas
	}).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput)
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema struct {
	// Tables in the schema.
	// Structure is documented below.
	PostgresqlTables []StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable `pulumi:"postgresqlTables"`
	// Database name.
	Schema string `pulumi:"schema"`
}

// StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs and StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs{...}
type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput
	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs struct {
	// Tables in the schema.
	// Structure is documented below.
	PostgresqlTables StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayInput `pulumi:"postgresqlTables"`
	// Database name.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput)
}

// StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArray and StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArray{ StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs{...} }
type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput
	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArray []StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaInput

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArray) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArray) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput)
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput {
	return o
}

// Tables in the schema.
// Structure is documented below.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput) PostgresqlTables() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema) []StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable {
		return v.PostgresqlTables
	}).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput)
}

// Database name.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema) string { return v.Schema }).(pulumi.StringOutput)
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema {
		return vs[0].([]StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchema)[vs[1].(int)]
	}).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput)
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable struct {
	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	PostgresqlColumns []StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn `pulumi:"postgresqlColumns"`
	// Table name.
	Table string `pulumi:"table"`
}

// StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArgs and StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArgs{...}
type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput
	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArgs struct {
	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	PostgresqlColumns StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput `pulumi:"postgresqlColumns"`
	// Table name.
	Table pulumi.StringInput `pulumi:"table"`
}

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArgs) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArgs) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput)
}

// StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArray and StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArray{ StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArgs{...} }
type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput
	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArray []StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableInput

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArray) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArray) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput)
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput {
	return o
}

// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
// Structure is documented below.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput) PostgresqlColumns() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable) []StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn {
		return v.PostgresqlColumns
	}).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput)
}

// Table name.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable) string {
		return v.Table
	}).(pulumi.StringOutput)
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable {
		return vs[0].([]StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTable)[vs[1].(int)]
	}).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput)
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn struct {
	// Column name.
	Column *string `pulumi:"column"`
	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `pulumi:"dataType"`
	// (Output)
	// Column length.
	Length *int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// (Output)
	// Column precision.
	Precision *int `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
	// (Output)
	// Column scale.
	Scale *int `pulumi:"scale"`
}

// StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs and StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs{...}
type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput
	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs struct {
	// Column name.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// (Output)
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// (Output)
	// Column precision.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
	// (Output)
	// Column scale.
	Scale pulumi.IntPtrInput `pulumi:"scale"`
}

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput)
}

// StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray and StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray{ StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs{...} }
type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput
	ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray []StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput)
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return o
}

// Column name.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *string {
		return v.Column
	}).(pulumi.StringPtrOutput)
}

// The PostgreSQL data type. Full data types list can be found here:
// https://www.postgresql.org/docs/current/datatype.html
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *string {
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Column length.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *int {
		return v.Length
	}).(pulumi.IntPtrOutput)
}

// Whether or not the column can accept a null value.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *bool {
		return v.Nullable
	}).(pulumi.BoolPtrOutput)
}

// The ordinal position of the column in the table.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *int {
		return v.OrdinalPosition
	}).(pulumi.IntPtrOutput)
}

// (Output)
// Column precision.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *int {
		return v.Precision
	}).(pulumi.IntPtrOutput)
}

// Whether or not the column represents a primary key.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *bool {
		return v.PrimaryKey
	}).(pulumi.BoolPtrOutput)
}

// (Output)
// Column scale.
func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Scale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *int {
		return v.Scale
	}).(pulumi.IntPtrOutput)
}

type StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput() StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput) ToStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn {
		return vs[0].([]StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)[vs[1].(int)]
	}).(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput)
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjects struct {
	// PostgreSQL schemas on the server
	// Structure is documented below.
	PostgresqlSchemas []StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema `pulumi:"postgresqlSchemas"`
}

// StreamSourceConfigPostgresqlSourceConfigIncludeObjectsInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs and StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigIncludeObjectsInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs{...}
type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput
	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs struct {
	// PostgreSQL schemas on the server
	// Structure is documented below.
	PostgresqlSchemas StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayInput `pulumi:"postgresqlSchemas"`
}

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjects)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput)
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput).ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutputWithContext(ctx)
}

// StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs, StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtr and StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrInput` via:
//
//	        StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs{...}
//
//	or:
//
//	        nil
type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput
	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput
}

type streamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrType StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs

func StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtr(v *StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrInput {
	return (*streamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrType)(v)
}

func (*streamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigPostgresqlSourceConfigIncludeObjects)(nil)).Elem()
}

func (i *streamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrType) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutputWithContext(context.Background())
}

func (i *streamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrType) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput)
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjects)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput {
	return o.ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutputWithContext(context.Background())
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceConfigPostgresqlSourceConfigIncludeObjects) *StreamSourceConfigPostgresqlSourceConfigIncludeObjects {
		return &v
	}).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput)
}

// PostgreSQL schemas on the server
// Structure is documented below.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput) PostgresqlSchemas() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjects) []StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema {
		return v.PostgresqlSchemas
	}).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput)
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceConfigPostgresqlSourceConfigIncludeObjects)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput) Elem() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput {
	return o.ApplyT(func(v *StreamSourceConfigPostgresqlSourceConfigIncludeObjects) StreamSourceConfigPostgresqlSourceConfigIncludeObjects {
		if v != nil {
			return *v
		}
		var ret StreamSourceConfigPostgresqlSourceConfigIncludeObjects
		return ret
	}).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput)
}

// PostgreSQL schemas on the server
// Structure is documented below.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput) PostgresqlSchemas() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput {
	return o.ApplyT(func(v *StreamSourceConfigPostgresqlSourceConfigIncludeObjects) []StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema {
		if v == nil {
			return nil
		}
		return v.PostgresqlSchemas
	}).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput)
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema struct {
	// Tables in the schema.
	// Structure is documented below.
	PostgresqlTables []StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable `pulumi:"postgresqlTables"`
	// Database name.
	Schema string `pulumi:"schema"`
}

// StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArgs and StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArgs{...}
type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput
	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArgs struct {
	// Tables in the schema.
	// Structure is documented below.
	PostgresqlTables StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayInput `pulumi:"postgresqlTables"`
	// Database name.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArgs) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArgs) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput)
}

// StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArray and StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArray{ StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArgs{...} }
type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput
	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArray []StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaInput

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArray) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArray) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput)
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput {
	return o
}

// Tables in the schema.
// Structure is documented below.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput) PostgresqlTables() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema) []StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable {
		return v.PostgresqlTables
	}).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput)
}

// Database name.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema) string { return v.Schema }).(pulumi.StringOutput)
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema {
		return vs[0].([]StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchema)[vs[1].(int)]
	}).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput)
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable struct {
	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	PostgresqlColumns []StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn `pulumi:"postgresqlColumns"`
	// Table name.
	Table string `pulumi:"table"`
}

// StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArgs and StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArgs{...}
type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput
	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArgs struct {
	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	PostgresqlColumns StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput `pulumi:"postgresqlColumns"`
	// Table name.
	Table pulumi.StringInput `pulumi:"table"`
}

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArgs) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArgs) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput)
}

// StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArray and StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArray{ StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArgs{...} }
type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput
	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArray []StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableInput

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArray) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArray) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput)
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput {
	return o
}

// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
// Structure is documented below.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput) PostgresqlColumns() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable) []StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn {
		return v.PostgresqlColumns
	}).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput)
}

// Table name.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable) string {
		return v.Table
	}).(pulumi.StringOutput)
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable {
		return vs[0].([]StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTable)[vs[1].(int)]
	}).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput)
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn struct {
	// Column name.
	Column *string `pulumi:"column"`
	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `pulumi:"dataType"`
	// (Output)
	// Column length.
	Length *int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// (Output)
	// Column precision.
	Precision *int `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
	// (Output)
	// Column scale.
	Scale *int `pulumi:"scale"`
}

// StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs and StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs{...}
type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput
	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs struct {
	// Column name.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// (Output)
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// (Output)
	// Column precision.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
	// (Output)
	// Column scale.
	Scale pulumi.IntPtrInput `pulumi:"scale"`
}

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput)
}

// StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput is an input type that accepts StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray and StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput values.
// You can construct a concrete instance of `StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput` via:
//
//	StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray{ StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs{...} }
type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput interface {
	pulumi.Input

	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput
	ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutputWithContext(context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray []StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)(nil)).Elem()
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return i.ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutputWithContext(context.Background())
}

func (i StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput)
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return o
}

// Column name.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *string {
		return v.Column
	}).(pulumi.StringPtrOutput)
}

// The PostgreSQL data type. Full data types list can be found here:
// https://www.postgresql.org/docs/current/datatype.html
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *string {
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Column length.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *int {
		return v.Length
	}).(pulumi.IntPtrOutput)
}

// Whether or not the column can accept a null value.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *bool {
		return v.Nullable
	}).(pulumi.BoolPtrOutput)
}

// The ordinal position of the column in the table.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *int {
		return v.OrdinalPosition
	}).(pulumi.IntPtrOutput)
}

// (Output)
// Column precision.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *int {
		return v.Precision
	}).(pulumi.IntPtrOutput)
}

// Whether or not the column represents a primary key.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *bool {
		return v.PrimaryKey
	}).(pulumi.BoolPtrOutput)
}

// (Output)
// Column scale.
func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput) Scale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn) *int {
		return v.Scale
	}).(pulumi.IntPtrOutput)
}

type StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)(nil)).Elem()
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput() StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput) ToStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutputWithContext(ctx context.Context) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput {
	return o
}

func (o StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput) Index(i pulumi.IntInput) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn {
		return vs[0].([]StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumn)[vs[1].(int)]
	}).(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileBigqueryProfileInput)(nil)).Elem(), ConnectionProfileBigqueryProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileBigqueryProfilePtrInput)(nil)).Elem(), ConnectionProfileBigqueryProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileForwardSshConnectivityInput)(nil)).Elem(), ConnectionProfileForwardSshConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileForwardSshConnectivityPtrInput)(nil)).Elem(), ConnectionProfileForwardSshConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileGcsProfileInput)(nil)).Elem(), ConnectionProfileGcsProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileGcsProfilePtrInput)(nil)).Elem(), ConnectionProfileGcsProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileMysqlProfileInput)(nil)).Elem(), ConnectionProfileMysqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileMysqlProfilePtrInput)(nil)).Elem(), ConnectionProfileMysqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileMysqlProfileSslConfigInput)(nil)).Elem(), ConnectionProfileMysqlProfileSslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileMysqlProfileSslConfigPtrInput)(nil)).Elem(), ConnectionProfileMysqlProfileSslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileOracleProfileInput)(nil)).Elem(), ConnectionProfileOracleProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileOracleProfilePtrInput)(nil)).Elem(), ConnectionProfileOracleProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfilePostgresqlProfileInput)(nil)).Elem(), ConnectionProfilePostgresqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfilePostgresqlProfilePtrInput)(nil)).Elem(), ConnectionProfilePostgresqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfilePrivateConnectivityInput)(nil)).Elem(), ConnectionProfilePrivateConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfilePrivateConnectivityPtrInput)(nil)).Elem(), ConnectionProfilePrivateConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionErrorInput)(nil)).Elem(), PrivateConnectionErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionErrorArrayInput)(nil)).Elem(), PrivateConnectionErrorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionVpcPeeringConfigInput)(nil)).Elem(), PrivateConnectionVpcPeeringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionVpcPeeringConfigPtrInput)(nil)).Elem(), PrivateConnectionVpcPeeringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllInput)(nil)).Elem(), StreamBackfillAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllPtrInput)(nil)).Elem(), StreamBackfillAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsInput)(nil)).Elem(), StreamBackfillAllMysqlExcludedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsPtrInput)(nil)).Elem(), StreamBackfillAllMysqlExcludedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseInput)(nil)).Elem(), StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayInput)(nil)).Elem(), StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableInput)(nil)).Elem(), StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayInput)(nil)).Elem(), StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnInput)(nil)).Elem(), StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput)(nil)).Elem(), StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsInput)(nil)).Elem(), StreamBackfillAllOracleExcludedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsPtrInput)(nil)).Elem(), StreamBackfillAllOracleExcludedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsOracleSchemaInput)(nil)).Elem(), StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayInput)(nil)).Elem(), StreamBackfillAllOracleExcludedObjectsOracleSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableInput)(nil)).Elem(), StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayInput)(nil)).Elem(), StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnInput)(nil)).Elem(), StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayInput)(nil)).Elem(), StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsInput)(nil)).Elem(), StreamBackfillAllPostgresqlExcludedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPtrInput)(nil)).Elem(), StreamBackfillAllPostgresqlExcludedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaInput)(nil)).Elem(), StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayInput)(nil)).Elem(), StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableInput)(nil)).Elem(), StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayInput)(nil)).Elem(), StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput)(nil)).Elem(), StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput)(nil)).Elem(), StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillNoneInput)(nil)).Elem(), StreamBackfillNoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamBackfillNonePtrInput)(nil)).Elem(), StreamBackfillNoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigInput)(nil)).Elem(), StreamDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigPtrInput)(nil)).Elem(), StreamDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigInput)(nil)).Elem(), StreamDestinationConfigBigqueryDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigPtrInput)(nil)).Elem(), StreamDestinationConfigBigqueryDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetInput)(nil)).Elem(), StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrInput)(nil)).Elem(), StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsInput)(nil)).Elem(), StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrInput)(nil)).Elem(), StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateInput)(nil)).Elem(), StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrInput)(nil)).Elem(), StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigGcsDestinationConfigInput)(nil)).Elem(), StreamDestinationConfigGcsDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigGcsDestinationConfigPtrInput)(nil)).Elem(), StreamDestinationConfigGcsDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigGcsDestinationConfigAvroFileFormatInput)(nil)).Elem(), StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrInput)(nil)).Elem(), StreamDestinationConfigGcsDestinationConfigAvroFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigGcsDestinationConfigJsonFileFormatInput)(nil)).Elem(), StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrInput)(nil)).Elem(), StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigInput)(nil)).Elem(), StreamSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPtrInput)(nil)).Elem(), StreamSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigPtrInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayInput)(nil)).Elem(), StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigPtrInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigDropLargeObjectsInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigExcludeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsPtrInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigExcludeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigIncludeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsPtrInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigIncludeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigStreamLargeObjectsInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrInput)(nil)).Elem(), StreamSourceConfigOracleSourceConfigStreamLargeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigPtrInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayInput)(nil)).Elem(), StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArray{})
	pulumi.RegisterOutputType(ConnectionProfileBigqueryProfileOutput{})
	pulumi.RegisterOutputType(ConnectionProfileBigqueryProfilePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileForwardSshConnectivityOutput{})
	pulumi.RegisterOutputType(ConnectionProfileForwardSshConnectivityPtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileGcsProfileOutput{})
	pulumi.RegisterOutputType(ConnectionProfileGcsProfilePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileMysqlProfileOutput{})
	pulumi.RegisterOutputType(ConnectionProfileMysqlProfilePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileMysqlProfileSslConfigOutput{})
	pulumi.RegisterOutputType(ConnectionProfileMysqlProfileSslConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileOracleProfileOutput{})
	pulumi.RegisterOutputType(ConnectionProfileOracleProfilePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfilePostgresqlProfileOutput{})
	pulumi.RegisterOutputType(ConnectionProfilePostgresqlProfilePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfilePrivateConnectivityOutput{})
	pulumi.RegisterOutputType(ConnectionProfilePrivateConnectivityPtrOutput{})
	pulumi.RegisterOutputType(PrivateConnectionErrorOutput{})
	pulumi.RegisterOutputType(PrivateConnectionErrorArrayOutput{})
	pulumi.RegisterOutputType(PrivateConnectionVpcPeeringConfigOutput{})
	pulumi.RegisterOutputType(PrivateConnectionVpcPeeringConfigPtrOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllPtrOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllMysqlExcludedObjectsOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllMysqlExcludedObjectsPtrOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArrayOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllOracleExcludedObjectsOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllOracleExcludedObjectsPtrOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllOracleExcludedObjectsOracleSchemaOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllOracleExcludedObjectsOracleSchemaArrayOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArrayOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArrayOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllPostgresqlExcludedObjectsOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllPostgresqlExcludedObjectsPtrOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArrayOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArrayOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput{})
	pulumi.RegisterOutputType(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput{})
	pulumi.RegisterOutputType(StreamBackfillNoneOutput{})
	pulumi.RegisterOutputType(StreamBackfillNonePtrOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigPtrOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigBigqueryDestinationConfigOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigBigqueryDestinationConfigPtrOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetPtrOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsPtrOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplatePtrOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigGcsDestinationConfigOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigGcsDestinationConfigPtrOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigGcsDestinationConfigAvroFileFormatOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigGcsDestinationConfigAvroFileFormatPtrOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigGcsDestinationConfigJsonFileFormatOutput{})
	pulumi.RegisterOutputType(StreamDestinationConfigGcsDestinationConfigJsonFileFormatPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigExcludeObjectsOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigExcludeObjectsPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigIncludeObjectsOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigIncludeObjectsPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigDropLargeObjectsOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigDropLargeObjectsPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigExcludeObjectsOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigExcludeObjectsPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigIncludeObjectsOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigIncludeObjectsPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigStreamLargeObjectsOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigOracleSourceConfigStreamLargeObjectsPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnOutput{})
	pulumi.RegisterOutputType(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArrayOutput{})
}
