// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datastream

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConnectionProfileBigqueryProfile struct {
}

// ConnectionProfileBigqueryProfileInput is an input type that accepts ConnectionProfileBigqueryProfileArgs and ConnectionProfileBigqueryProfileOutput values.
// You can construct a concrete instance of `ConnectionProfileBigqueryProfileInput` via:
//
//	ConnectionProfileBigqueryProfileArgs{...}
type ConnectionProfileBigqueryProfileInput interface {
	pulumi.Input

	ToConnectionProfileBigqueryProfileOutput() ConnectionProfileBigqueryProfileOutput
	ToConnectionProfileBigqueryProfileOutputWithContext(context.Context) ConnectionProfileBigqueryProfileOutput
}

type ConnectionProfileBigqueryProfileArgs struct {
}

func (ConnectionProfileBigqueryProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileBigqueryProfile)(nil)).Elem()
}

func (i ConnectionProfileBigqueryProfileArgs) ToConnectionProfileBigqueryProfileOutput() ConnectionProfileBigqueryProfileOutput {
	return i.ToConnectionProfileBigqueryProfileOutputWithContext(context.Background())
}

func (i ConnectionProfileBigqueryProfileArgs) ToConnectionProfileBigqueryProfileOutputWithContext(ctx context.Context) ConnectionProfileBigqueryProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileBigqueryProfileOutput)
}

func (i ConnectionProfileBigqueryProfileArgs) ToConnectionProfileBigqueryProfilePtrOutput() ConnectionProfileBigqueryProfilePtrOutput {
	return i.ToConnectionProfileBigqueryProfilePtrOutputWithContext(context.Background())
}

func (i ConnectionProfileBigqueryProfileArgs) ToConnectionProfileBigqueryProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileBigqueryProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileBigqueryProfileOutput).ToConnectionProfileBigqueryProfilePtrOutputWithContext(ctx)
}

// ConnectionProfileBigqueryProfilePtrInput is an input type that accepts ConnectionProfileBigqueryProfileArgs, ConnectionProfileBigqueryProfilePtr and ConnectionProfileBigqueryProfilePtrOutput values.
// You can construct a concrete instance of `ConnectionProfileBigqueryProfilePtrInput` via:
//
//	        ConnectionProfileBigqueryProfileArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfileBigqueryProfilePtrInput interface {
	pulumi.Input

	ToConnectionProfileBigqueryProfilePtrOutput() ConnectionProfileBigqueryProfilePtrOutput
	ToConnectionProfileBigqueryProfilePtrOutputWithContext(context.Context) ConnectionProfileBigqueryProfilePtrOutput
}

type connectionProfileBigqueryProfilePtrType ConnectionProfileBigqueryProfileArgs

func ConnectionProfileBigqueryProfilePtr(v *ConnectionProfileBigqueryProfileArgs) ConnectionProfileBigqueryProfilePtrInput {
	return (*connectionProfileBigqueryProfilePtrType)(v)
}

func (*connectionProfileBigqueryProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileBigqueryProfile)(nil)).Elem()
}

func (i *connectionProfileBigqueryProfilePtrType) ToConnectionProfileBigqueryProfilePtrOutput() ConnectionProfileBigqueryProfilePtrOutput {
	return i.ToConnectionProfileBigqueryProfilePtrOutputWithContext(context.Background())
}

func (i *connectionProfileBigqueryProfilePtrType) ToConnectionProfileBigqueryProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileBigqueryProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileBigqueryProfilePtrOutput)
}

type ConnectionProfileBigqueryProfileOutput struct{ *pulumi.OutputState }

func (ConnectionProfileBigqueryProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileBigqueryProfile)(nil)).Elem()
}

func (o ConnectionProfileBigqueryProfileOutput) ToConnectionProfileBigqueryProfileOutput() ConnectionProfileBigqueryProfileOutput {
	return o
}

func (o ConnectionProfileBigqueryProfileOutput) ToConnectionProfileBigqueryProfileOutputWithContext(ctx context.Context) ConnectionProfileBigqueryProfileOutput {
	return o
}

func (o ConnectionProfileBigqueryProfileOutput) ToConnectionProfileBigqueryProfilePtrOutput() ConnectionProfileBigqueryProfilePtrOutput {
	return o.ToConnectionProfileBigqueryProfilePtrOutputWithContext(context.Background())
}

func (o ConnectionProfileBigqueryProfileOutput) ToConnectionProfileBigqueryProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileBigqueryProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfileBigqueryProfile) *ConnectionProfileBigqueryProfile {
		return &v
	}).(ConnectionProfileBigqueryProfilePtrOutput)
}

type ConnectionProfileBigqueryProfilePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileBigqueryProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileBigqueryProfile)(nil)).Elem()
}

func (o ConnectionProfileBigqueryProfilePtrOutput) ToConnectionProfileBigqueryProfilePtrOutput() ConnectionProfileBigqueryProfilePtrOutput {
	return o
}

func (o ConnectionProfileBigqueryProfilePtrOutput) ToConnectionProfileBigqueryProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileBigqueryProfilePtrOutput {
	return o
}

func (o ConnectionProfileBigqueryProfilePtrOutput) Elem() ConnectionProfileBigqueryProfileOutput {
	return o.ApplyT(func(v *ConnectionProfileBigqueryProfile) ConnectionProfileBigqueryProfile {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileBigqueryProfile
		return ret
	}).(ConnectionProfileBigqueryProfileOutput)
}

type ConnectionProfileForwardSshConnectivity struct {
	// Hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// SSH password.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password *string `pulumi:"password"`
	// Port for the SSH tunnel.
	Port *int `pulumi:"port"`
	// SSH private key.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PrivateKey *string `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username string `pulumi:"username"`
}

// ConnectionProfileForwardSshConnectivityInput is an input type that accepts ConnectionProfileForwardSshConnectivityArgs and ConnectionProfileForwardSshConnectivityOutput values.
// You can construct a concrete instance of `ConnectionProfileForwardSshConnectivityInput` via:
//
//	ConnectionProfileForwardSshConnectivityArgs{...}
type ConnectionProfileForwardSshConnectivityInput interface {
	pulumi.Input

	ToConnectionProfileForwardSshConnectivityOutput() ConnectionProfileForwardSshConnectivityOutput
	ToConnectionProfileForwardSshConnectivityOutputWithContext(context.Context) ConnectionProfileForwardSshConnectivityOutput
}

type ConnectionProfileForwardSshConnectivityArgs struct {
	// Hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// SSH password.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for the SSH tunnel.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SSH private key.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ConnectionProfileForwardSshConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileForwardSshConnectivity)(nil)).Elem()
}

func (i ConnectionProfileForwardSshConnectivityArgs) ToConnectionProfileForwardSshConnectivityOutput() ConnectionProfileForwardSshConnectivityOutput {
	return i.ToConnectionProfileForwardSshConnectivityOutputWithContext(context.Background())
}

func (i ConnectionProfileForwardSshConnectivityArgs) ToConnectionProfileForwardSshConnectivityOutputWithContext(ctx context.Context) ConnectionProfileForwardSshConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileForwardSshConnectivityOutput)
}

func (i ConnectionProfileForwardSshConnectivityArgs) ToConnectionProfileForwardSshConnectivityPtrOutput() ConnectionProfileForwardSshConnectivityPtrOutput {
	return i.ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(context.Background())
}

func (i ConnectionProfileForwardSshConnectivityArgs) ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(ctx context.Context) ConnectionProfileForwardSshConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileForwardSshConnectivityOutput).ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(ctx)
}

// ConnectionProfileForwardSshConnectivityPtrInput is an input type that accepts ConnectionProfileForwardSshConnectivityArgs, ConnectionProfileForwardSshConnectivityPtr and ConnectionProfileForwardSshConnectivityPtrOutput values.
// You can construct a concrete instance of `ConnectionProfileForwardSshConnectivityPtrInput` via:
//
//	        ConnectionProfileForwardSshConnectivityArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfileForwardSshConnectivityPtrInput interface {
	pulumi.Input

	ToConnectionProfileForwardSshConnectivityPtrOutput() ConnectionProfileForwardSshConnectivityPtrOutput
	ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(context.Context) ConnectionProfileForwardSshConnectivityPtrOutput
}

type connectionProfileForwardSshConnectivityPtrType ConnectionProfileForwardSshConnectivityArgs

func ConnectionProfileForwardSshConnectivityPtr(v *ConnectionProfileForwardSshConnectivityArgs) ConnectionProfileForwardSshConnectivityPtrInput {
	return (*connectionProfileForwardSshConnectivityPtrType)(v)
}

func (*connectionProfileForwardSshConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileForwardSshConnectivity)(nil)).Elem()
}

func (i *connectionProfileForwardSshConnectivityPtrType) ToConnectionProfileForwardSshConnectivityPtrOutput() ConnectionProfileForwardSshConnectivityPtrOutput {
	return i.ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(context.Background())
}

func (i *connectionProfileForwardSshConnectivityPtrType) ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(ctx context.Context) ConnectionProfileForwardSshConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileForwardSshConnectivityPtrOutput)
}

type ConnectionProfileForwardSshConnectivityOutput struct{ *pulumi.OutputState }

func (ConnectionProfileForwardSshConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileForwardSshConnectivity)(nil)).Elem()
}

func (o ConnectionProfileForwardSshConnectivityOutput) ToConnectionProfileForwardSshConnectivityOutput() ConnectionProfileForwardSshConnectivityOutput {
	return o
}

func (o ConnectionProfileForwardSshConnectivityOutput) ToConnectionProfileForwardSshConnectivityOutputWithContext(ctx context.Context) ConnectionProfileForwardSshConnectivityOutput {
	return o
}

func (o ConnectionProfileForwardSshConnectivityOutput) ToConnectionProfileForwardSshConnectivityPtrOutput() ConnectionProfileForwardSshConnectivityPtrOutput {
	return o.ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(context.Background())
}

func (o ConnectionProfileForwardSshConnectivityOutput) ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(ctx context.Context) ConnectionProfileForwardSshConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfileForwardSshConnectivity) *ConnectionProfileForwardSshConnectivity {
		return &v
	}).(ConnectionProfileForwardSshConnectivityPtrOutput)
}

// Hostname for the SSH tunnel.
func (o ConnectionProfileForwardSshConnectivityOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileForwardSshConnectivity) string { return v.Hostname }).(pulumi.StringOutput)
}

// SSH password.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileForwardSshConnectivityOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileForwardSshConnectivity) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel.
func (o ConnectionProfileForwardSshConnectivityOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionProfileForwardSshConnectivity) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SSH private key.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileForwardSshConnectivityOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileForwardSshConnectivity) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Username for the SSH tunnel.
func (o ConnectionProfileForwardSshConnectivityOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileForwardSshConnectivity) string { return v.Username }).(pulumi.StringOutput)
}

type ConnectionProfileForwardSshConnectivityPtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileForwardSshConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileForwardSshConnectivity)(nil)).Elem()
}

func (o ConnectionProfileForwardSshConnectivityPtrOutput) ToConnectionProfileForwardSshConnectivityPtrOutput() ConnectionProfileForwardSshConnectivityPtrOutput {
	return o
}

func (o ConnectionProfileForwardSshConnectivityPtrOutput) ToConnectionProfileForwardSshConnectivityPtrOutputWithContext(ctx context.Context) ConnectionProfileForwardSshConnectivityPtrOutput {
	return o
}

func (o ConnectionProfileForwardSshConnectivityPtrOutput) Elem() ConnectionProfileForwardSshConnectivityOutput {
	return o.ApplyT(func(v *ConnectionProfileForwardSshConnectivity) ConnectionProfileForwardSshConnectivity {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileForwardSshConnectivity
		return ret
	}).(ConnectionProfileForwardSshConnectivityOutput)
}

// Hostname for the SSH tunnel.
func (o ConnectionProfileForwardSshConnectivityPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileForwardSshConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// SSH password.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileForwardSshConnectivityPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileForwardSshConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel.
func (o ConnectionProfileForwardSshConnectivityPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileForwardSshConnectivity) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// SSH private key.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileForwardSshConnectivityPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileForwardSshConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Username for the SSH tunnel.
func (o ConnectionProfileForwardSshConnectivityPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileForwardSshConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionProfileGcsProfile struct {
	// The Cloud Storage bucket name.
	Bucket string `pulumi:"bucket"`
	// The root path inside the Cloud Storage bucket.
	RootPath *string `pulumi:"rootPath"`
}

// ConnectionProfileGcsProfileInput is an input type that accepts ConnectionProfileGcsProfileArgs and ConnectionProfileGcsProfileOutput values.
// You can construct a concrete instance of `ConnectionProfileGcsProfileInput` via:
//
//	ConnectionProfileGcsProfileArgs{...}
type ConnectionProfileGcsProfileInput interface {
	pulumi.Input

	ToConnectionProfileGcsProfileOutput() ConnectionProfileGcsProfileOutput
	ToConnectionProfileGcsProfileOutputWithContext(context.Context) ConnectionProfileGcsProfileOutput
}

type ConnectionProfileGcsProfileArgs struct {
	// The Cloud Storage bucket name.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The root path inside the Cloud Storage bucket.
	RootPath pulumi.StringPtrInput `pulumi:"rootPath"`
}

func (ConnectionProfileGcsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileGcsProfile)(nil)).Elem()
}

func (i ConnectionProfileGcsProfileArgs) ToConnectionProfileGcsProfileOutput() ConnectionProfileGcsProfileOutput {
	return i.ToConnectionProfileGcsProfileOutputWithContext(context.Background())
}

func (i ConnectionProfileGcsProfileArgs) ToConnectionProfileGcsProfileOutputWithContext(ctx context.Context) ConnectionProfileGcsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileGcsProfileOutput)
}

func (i ConnectionProfileGcsProfileArgs) ToConnectionProfileGcsProfilePtrOutput() ConnectionProfileGcsProfilePtrOutput {
	return i.ToConnectionProfileGcsProfilePtrOutputWithContext(context.Background())
}

func (i ConnectionProfileGcsProfileArgs) ToConnectionProfileGcsProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileGcsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileGcsProfileOutput).ToConnectionProfileGcsProfilePtrOutputWithContext(ctx)
}

// ConnectionProfileGcsProfilePtrInput is an input type that accepts ConnectionProfileGcsProfileArgs, ConnectionProfileGcsProfilePtr and ConnectionProfileGcsProfilePtrOutput values.
// You can construct a concrete instance of `ConnectionProfileGcsProfilePtrInput` via:
//
//	        ConnectionProfileGcsProfileArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfileGcsProfilePtrInput interface {
	pulumi.Input

	ToConnectionProfileGcsProfilePtrOutput() ConnectionProfileGcsProfilePtrOutput
	ToConnectionProfileGcsProfilePtrOutputWithContext(context.Context) ConnectionProfileGcsProfilePtrOutput
}

type connectionProfileGcsProfilePtrType ConnectionProfileGcsProfileArgs

func ConnectionProfileGcsProfilePtr(v *ConnectionProfileGcsProfileArgs) ConnectionProfileGcsProfilePtrInput {
	return (*connectionProfileGcsProfilePtrType)(v)
}

func (*connectionProfileGcsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileGcsProfile)(nil)).Elem()
}

func (i *connectionProfileGcsProfilePtrType) ToConnectionProfileGcsProfilePtrOutput() ConnectionProfileGcsProfilePtrOutput {
	return i.ToConnectionProfileGcsProfilePtrOutputWithContext(context.Background())
}

func (i *connectionProfileGcsProfilePtrType) ToConnectionProfileGcsProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileGcsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileGcsProfilePtrOutput)
}

type ConnectionProfileGcsProfileOutput struct{ *pulumi.OutputState }

func (ConnectionProfileGcsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileGcsProfile)(nil)).Elem()
}

func (o ConnectionProfileGcsProfileOutput) ToConnectionProfileGcsProfileOutput() ConnectionProfileGcsProfileOutput {
	return o
}

func (o ConnectionProfileGcsProfileOutput) ToConnectionProfileGcsProfileOutputWithContext(ctx context.Context) ConnectionProfileGcsProfileOutput {
	return o
}

func (o ConnectionProfileGcsProfileOutput) ToConnectionProfileGcsProfilePtrOutput() ConnectionProfileGcsProfilePtrOutput {
	return o.ToConnectionProfileGcsProfilePtrOutputWithContext(context.Background())
}

func (o ConnectionProfileGcsProfileOutput) ToConnectionProfileGcsProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileGcsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfileGcsProfile) *ConnectionProfileGcsProfile {
		return &v
	}).(ConnectionProfileGcsProfilePtrOutput)
}

// The Cloud Storage bucket name.
func (o ConnectionProfileGcsProfileOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileGcsProfile) string { return v.Bucket }).(pulumi.StringOutput)
}

// The root path inside the Cloud Storage bucket.
func (o ConnectionProfileGcsProfileOutput) RootPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileGcsProfile) *string { return v.RootPath }).(pulumi.StringPtrOutput)
}

type ConnectionProfileGcsProfilePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileGcsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileGcsProfile)(nil)).Elem()
}

func (o ConnectionProfileGcsProfilePtrOutput) ToConnectionProfileGcsProfilePtrOutput() ConnectionProfileGcsProfilePtrOutput {
	return o
}

func (o ConnectionProfileGcsProfilePtrOutput) ToConnectionProfileGcsProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileGcsProfilePtrOutput {
	return o
}

func (o ConnectionProfileGcsProfilePtrOutput) Elem() ConnectionProfileGcsProfileOutput {
	return o.ApplyT(func(v *ConnectionProfileGcsProfile) ConnectionProfileGcsProfile {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileGcsProfile
		return ret
	}).(ConnectionProfileGcsProfileOutput)
}

// The Cloud Storage bucket name.
func (o ConnectionProfileGcsProfilePtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileGcsProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// The root path inside the Cloud Storage bucket.
func (o ConnectionProfileGcsProfilePtrOutput) RootPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileGcsProfile) *string {
		if v == nil {
			return nil
		}
		return v.RootPath
	}).(pulumi.StringPtrOutput)
}

type ConnectionProfileMysqlProfile struct {
	// Hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// SSH password.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password string `pulumi:"password"`
	// Port for the SSH tunnel.
	Port *int `pulumi:"port"`
	// SSL configuration for the MySQL connection.
	// Structure is documented below.
	SslConfig *ConnectionProfileMysqlProfileSslConfig `pulumi:"sslConfig"`
	// Username for the SSH tunnel.
	Username string `pulumi:"username"`
}

// ConnectionProfileMysqlProfileInput is an input type that accepts ConnectionProfileMysqlProfileArgs and ConnectionProfileMysqlProfileOutput values.
// You can construct a concrete instance of `ConnectionProfileMysqlProfileInput` via:
//
//	ConnectionProfileMysqlProfileArgs{...}
type ConnectionProfileMysqlProfileInput interface {
	pulumi.Input

	ToConnectionProfileMysqlProfileOutput() ConnectionProfileMysqlProfileOutput
	ToConnectionProfileMysqlProfileOutputWithContext(context.Context) ConnectionProfileMysqlProfileOutput
}

type ConnectionProfileMysqlProfileArgs struct {
	// Hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// SSH password.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the SSH tunnel.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SSL configuration for the MySQL connection.
	// Structure is documented below.
	SslConfig ConnectionProfileMysqlProfileSslConfigPtrInput `pulumi:"sslConfig"`
	// Username for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ConnectionProfileMysqlProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileMysqlProfile)(nil)).Elem()
}

func (i ConnectionProfileMysqlProfileArgs) ToConnectionProfileMysqlProfileOutput() ConnectionProfileMysqlProfileOutput {
	return i.ToConnectionProfileMysqlProfileOutputWithContext(context.Background())
}

func (i ConnectionProfileMysqlProfileArgs) ToConnectionProfileMysqlProfileOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileMysqlProfileOutput)
}

func (i ConnectionProfileMysqlProfileArgs) ToConnectionProfileMysqlProfilePtrOutput() ConnectionProfileMysqlProfilePtrOutput {
	return i.ToConnectionProfileMysqlProfilePtrOutputWithContext(context.Background())
}

func (i ConnectionProfileMysqlProfileArgs) ToConnectionProfileMysqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileMysqlProfileOutput).ToConnectionProfileMysqlProfilePtrOutputWithContext(ctx)
}

// ConnectionProfileMysqlProfilePtrInput is an input type that accepts ConnectionProfileMysqlProfileArgs, ConnectionProfileMysqlProfilePtr and ConnectionProfileMysqlProfilePtrOutput values.
// You can construct a concrete instance of `ConnectionProfileMysqlProfilePtrInput` via:
//
//	        ConnectionProfileMysqlProfileArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfileMysqlProfilePtrInput interface {
	pulumi.Input

	ToConnectionProfileMysqlProfilePtrOutput() ConnectionProfileMysqlProfilePtrOutput
	ToConnectionProfileMysqlProfilePtrOutputWithContext(context.Context) ConnectionProfileMysqlProfilePtrOutput
}

type connectionProfileMysqlProfilePtrType ConnectionProfileMysqlProfileArgs

func ConnectionProfileMysqlProfilePtr(v *ConnectionProfileMysqlProfileArgs) ConnectionProfileMysqlProfilePtrInput {
	return (*connectionProfileMysqlProfilePtrType)(v)
}

func (*connectionProfileMysqlProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileMysqlProfile)(nil)).Elem()
}

func (i *connectionProfileMysqlProfilePtrType) ToConnectionProfileMysqlProfilePtrOutput() ConnectionProfileMysqlProfilePtrOutput {
	return i.ToConnectionProfileMysqlProfilePtrOutputWithContext(context.Background())
}

func (i *connectionProfileMysqlProfilePtrType) ToConnectionProfileMysqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileMysqlProfilePtrOutput)
}

type ConnectionProfileMysqlProfileOutput struct{ *pulumi.OutputState }

func (ConnectionProfileMysqlProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileMysqlProfile)(nil)).Elem()
}

func (o ConnectionProfileMysqlProfileOutput) ToConnectionProfileMysqlProfileOutput() ConnectionProfileMysqlProfileOutput {
	return o
}

func (o ConnectionProfileMysqlProfileOutput) ToConnectionProfileMysqlProfileOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileOutput {
	return o
}

func (o ConnectionProfileMysqlProfileOutput) ToConnectionProfileMysqlProfilePtrOutput() ConnectionProfileMysqlProfilePtrOutput {
	return o.ToConnectionProfileMysqlProfilePtrOutputWithContext(context.Background())
}

func (o ConnectionProfileMysqlProfileOutput) ToConnectionProfileMysqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfileMysqlProfile) *ConnectionProfileMysqlProfile {
		return &v
	}).(ConnectionProfileMysqlProfilePtrOutput)
}

// Hostname for the SSH tunnel.
func (o ConnectionProfileMysqlProfileOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfile) string { return v.Hostname }).(pulumi.StringOutput)
}

// SSH password.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfile) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the SSH tunnel.
func (o ConnectionProfileMysqlProfileOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfile) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SSL configuration for the MySQL connection.
// Structure is documented below.
func (o ConnectionProfileMysqlProfileOutput) SslConfig() ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfile) *ConnectionProfileMysqlProfileSslConfig { return v.SslConfig }).(ConnectionProfileMysqlProfileSslConfigPtrOutput)
}

// Username for the SSH tunnel.
func (o ConnectionProfileMysqlProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfile) string { return v.Username }).(pulumi.StringOutput)
}

type ConnectionProfileMysqlProfilePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileMysqlProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileMysqlProfile)(nil)).Elem()
}

func (o ConnectionProfileMysqlProfilePtrOutput) ToConnectionProfileMysqlProfilePtrOutput() ConnectionProfileMysqlProfilePtrOutput {
	return o
}

func (o ConnectionProfileMysqlProfilePtrOutput) ToConnectionProfileMysqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfilePtrOutput {
	return o
}

func (o ConnectionProfileMysqlProfilePtrOutput) Elem() ConnectionProfileMysqlProfileOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfile) ConnectionProfileMysqlProfile {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileMysqlProfile
		return ret
	}).(ConnectionProfileMysqlProfileOutput)
}

// Hostname for the SSH tunnel.
func (o ConnectionProfileMysqlProfilePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// SSH password.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel.
func (o ConnectionProfileMysqlProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfile) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// SSL configuration for the MySQL connection.
// Structure is documented below.
func (o ConnectionProfileMysqlProfilePtrOutput) SslConfig() ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfile) *ConnectionProfileMysqlProfileSslConfig {
		if v == nil {
			return nil
		}
		return v.SslConfig
	}).(ConnectionProfileMysqlProfileSslConfigPtrOutput)
}

// Username for the SSH tunnel.
func (o ConnectionProfileMysqlProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionProfileMysqlProfileSslConfig struct {
	// PEM-encoded certificate of the CA that signed the source database
	// server's certificate.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	CaCertificate *string `pulumi:"caCertificate"`
	// -
	// Indicates whether the clientKey field is set.
	CaCertificateSet *bool `pulumi:"caCertificateSet"`
	// PEM-encoded certificate that will be used by the replica to
	// authenticate against the source database server. If this field
	// is used then the 'clientKey' and the 'caCertificate' fields are
	// mandatory.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// -
	// Indicates whether the clientCertificate field is set.
	ClientCertificateSet *bool `pulumi:"clientCertificateSet"`
	// PEM-encoded private key associated with the Client Certificate.
	// If this field is used then the 'client_certificate' and the
	// 'ca_certificate' fields are mandatory.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ClientKey *string `pulumi:"clientKey"`
	// -
	// Indicates whether the clientKey field is set.
	ClientKeySet *bool `pulumi:"clientKeySet"`
}

// ConnectionProfileMysqlProfileSslConfigInput is an input type that accepts ConnectionProfileMysqlProfileSslConfigArgs and ConnectionProfileMysqlProfileSslConfigOutput values.
// You can construct a concrete instance of `ConnectionProfileMysqlProfileSslConfigInput` via:
//
//	ConnectionProfileMysqlProfileSslConfigArgs{...}
type ConnectionProfileMysqlProfileSslConfigInput interface {
	pulumi.Input

	ToConnectionProfileMysqlProfileSslConfigOutput() ConnectionProfileMysqlProfileSslConfigOutput
	ToConnectionProfileMysqlProfileSslConfigOutputWithContext(context.Context) ConnectionProfileMysqlProfileSslConfigOutput
}

type ConnectionProfileMysqlProfileSslConfigArgs struct {
	// PEM-encoded certificate of the CA that signed the source database
	// server's certificate.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// -
	// Indicates whether the clientKey field is set.
	CaCertificateSet pulumi.BoolPtrInput `pulumi:"caCertificateSet"`
	// PEM-encoded certificate that will be used by the replica to
	// authenticate against the source database server. If this field
	// is used then the 'clientKey' and the 'caCertificate' fields are
	// mandatory.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// -
	// Indicates whether the clientCertificate field is set.
	ClientCertificateSet pulumi.BoolPtrInput `pulumi:"clientCertificateSet"`
	// PEM-encoded private key associated with the Client Certificate.
	// If this field is used then the 'client_certificate' and the
	// 'ca_certificate' fields are mandatory.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// -
	// Indicates whether the clientKey field is set.
	ClientKeySet pulumi.BoolPtrInput `pulumi:"clientKeySet"`
}

func (ConnectionProfileMysqlProfileSslConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileMysqlProfileSslConfig)(nil)).Elem()
}

func (i ConnectionProfileMysqlProfileSslConfigArgs) ToConnectionProfileMysqlProfileSslConfigOutput() ConnectionProfileMysqlProfileSslConfigOutput {
	return i.ToConnectionProfileMysqlProfileSslConfigOutputWithContext(context.Background())
}

func (i ConnectionProfileMysqlProfileSslConfigArgs) ToConnectionProfileMysqlProfileSslConfigOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileSslConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileMysqlProfileSslConfigOutput)
}

func (i ConnectionProfileMysqlProfileSslConfigArgs) ToConnectionProfileMysqlProfileSslConfigPtrOutput() ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return i.ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionProfileMysqlProfileSslConfigArgs) ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileMysqlProfileSslConfigOutput).ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(ctx)
}

// ConnectionProfileMysqlProfileSslConfigPtrInput is an input type that accepts ConnectionProfileMysqlProfileSslConfigArgs, ConnectionProfileMysqlProfileSslConfigPtr and ConnectionProfileMysqlProfileSslConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionProfileMysqlProfileSslConfigPtrInput` via:
//
//	        ConnectionProfileMysqlProfileSslConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfileMysqlProfileSslConfigPtrInput interface {
	pulumi.Input

	ToConnectionProfileMysqlProfileSslConfigPtrOutput() ConnectionProfileMysqlProfileSslConfigPtrOutput
	ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(context.Context) ConnectionProfileMysqlProfileSslConfigPtrOutput
}

type connectionProfileMysqlProfileSslConfigPtrType ConnectionProfileMysqlProfileSslConfigArgs

func ConnectionProfileMysqlProfileSslConfigPtr(v *ConnectionProfileMysqlProfileSslConfigArgs) ConnectionProfileMysqlProfileSslConfigPtrInput {
	return (*connectionProfileMysqlProfileSslConfigPtrType)(v)
}

func (*connectionProfileMysqlProfileSslConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileMysqlProfileSslConfig)(nil)).Elem()
}

func (i *connectionProfileMysqlProfileSslConfigPtrType) ToConnectionProfileMysqlProfileSslConfigPtrOutput() ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return i.ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(context.Background())
}

func (i *connectionProfileMysqlProfileSslConfigPtrType) ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileMysqlProfileSslConfigPtrOutput)
}

type ConnectionProfileMysqlProfileSslConfigOutput struct{ *pulumi.OutputState }

func (ConnectionProfileMysqlProfileSslConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileMysqlProfileSslConfig)(nil)).Elem()
}

func (o ConnectionProfileMysqlProfileSslConfigOutput) ToConnectionProfileMysqlProfileSslConfigOutput() ConnectionProfileMysqlProfileSslConfigOutput {
	return o
}

func (o ConnectionProfileMysqlProfileSslConfigOutput) ToConnectionProfileMysqlProfileSslConfigOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileSslConfigOutput {
	return o
}

func (o ConnectionProfileMysqlProfileSslConfigOutput) ToConnectionProfileMysqlProfileSslConfigPtrOutput() ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return o.ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionProfileMysqlProfileSslConfigOutput) ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfileMysqlProfileSslConfig) *ConnectionProfileMysqlProfileSslConfig {
		return &v
	}).(ConnectionProfileMysqlProfileSslConfigPtrOutput)
}

// PEM-encoded certificate of the CA that signed the source database
// server's certificate.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileSslConfigOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfileSslConfig) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// -
// Indicates whether the clientKey field is set.
func (o ConnectionProfileMysqlProfileSslConfigOutput) CaCertificateSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfileSslConfig) *bool { return v.CaCertificateSet }).(pulumi.BoolPtrOutput)
}

// PEM-encoded certificate that will be used by the replica to
// authenticate against the source database server. If this field
// is used then the 'clientKey' and the 'caCertificate' fields are
// mandatory.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileSslConfigOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfileSslConfig) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// -
// Indicates whether the clientCertificate field is set.
func (o ConnectionProfileMysqlProfileSslConfigOutput) ClientCertificateSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfileSslConfig) *bool { return v.ClientCertificateSet }).(pulumi.BoolPtrOutput)
}

// PEM-encoded private key associated with the Client Certificate.
// If this field is used then the 'client_certificate' and the
// 'ca_certificate' fields are mandatory.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileSslConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfileSslConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// -
// Indicates whether the clientKey field is set.
func (o ConnectionProfileMysqlProfileSslConfigOutput) ClientKeySet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectionProfileMysqlProfileSslConfig) *bool { return v.ClientKeySet }).(pulumi.BoolPtrOutput)
}

type ConnectionProfileMysqlProfileSslConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileMysqlProfileSslConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileMysqlProfileSslConfig)(nil)).Elem()
}

func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) ToConnectionProfileMysqlProfileSslConfigPtrOutput() ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return o
}

func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) ToConnectionProfileMysqlProfileSslConfigPtrOutputWithContext(ctx context.Context) ConnectionProfileMysqlProfileSslConfigPtrOutput {
	return o
}

func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) Elem() ConnectionProfileMysqlProfileSslConfigOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) ConnectionProfileMysqlProfileSslConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileMysqlProfileSslConfig
		return ret
	}).(ConnectionProfileMysqlProfileSslConfigOutput)
}

// PEM-encoded certificate of the CA that signed the source database
// server's certificate.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// -
// Indicates whether the clientKey field is set.
func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) CaCertificateSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CaCertificateSet
	}).(pulumi.BoolPtrOutput)
}

// PEM-encoded certificate that will be used by the replica to
// authenticate against the source database server. If this field
// is used then the 'clientKey' and the 'caCertificate' fields are
// mandatory.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// -
// Indicates whether the clientCertificate field is set.
func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) ClientCertificateSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ClientCertificateSet
	}).(pulumi.BoolPtrOutput)
}

// PEM-encoded private key associated with the Client Certificate.
// If this field is used then the 'client_certificate' and the
// 'ca_certificate' fields are mandatory.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// -
// Indicates whether the clientKey field is set.
func (o ConnectionProfileMysqlProfileSslConfigPtrOutput) ClientKeySet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileMysqlProfileSslConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ClientKeySet
	}).(pulumi.BoolPtrOutput)
}

type ConnectionProfileOracleProfile struct {
	// Connection string attributes
	ConnectionAttributes map[string]string `pulumi:"connectionAttributes"`
	// Database for the Oracle connection.
	DatabaseService string `pulumi:"databaseService"`
	// Hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// SSH password.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password string `pulumi:"password"`
	// Port for the SSH tunnel.
	Port *int `pulumi:"port"`
	// Username for the SSH tunnel.
	Username string `pulumi:"username"`
}

// ConnectionProfileOracleProfileInput is an input type that accepts ConnectionProfileOracleProfileArgs and ConnectionProfileOracleProfileOutput values.
// You can construct a concrete instance of `ConnectionProfileOracleProfileInput` via:
//
//	ConnectionProfileOracleProfileArgs{...}
type ConnectionProfileOracleProfileInput interface {
	pulumi.Input

	ToConnectionProfileOracleProfileOutput() ConnectionProfileOracleProfileOutput
	ToConnectionProfileOracleProfileOutputWithContext(context.Context) ConnectionProfileOracleProfileOutput
}

type ConnectionProfileOracleProfileArgs struct {
	// Connection string attributes
	ConnectionAttributes pulumi.StringMapInput `pulumi:"connectionAttributes"`
	// Database for the Oracle connection.
	DatabaseService pulumi.StringInput `pulumi:"databaseService"`
	// Hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// SSH password.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the SSH tunnel.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Username for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ConnectionProfileOracleProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileOracleProfile)(nil)).Elem()
}

func (i ConnectionProfileOracleProfileArgs) ToConnectionProfileOracleProfileOutput() ConnectionProfileOracleProfileOutput {
	return i.ToConnectionProfileOracleProfileOutputWithContext(context.Background())
}

func (i ConnectionProfileOracleProfileArgs) ToConnectionProfileOracleProfileOutputWithContext(ctx context.Context) ConnectionProfileOracleProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileOracleProfileOutput)
}

func (i ConnectionProfileOracleProfileArgs) ToConnectionProfileOracleProfilePtrOutput() ConnectionProfileOracleProfilePtrOutput {
	return i.ToConnectionProfileOracleProfilePtrOutputWithContext(context.Background())
}

func (i ConnectionProfileOracleProfileArgs) ToConnectionProfileOracleProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileOracleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileOracleProfileOutput).ToConnectionProfileOracleProfilePtrOutputWithContext(ctx)
}

// ConnectionProfileOracleProfilePtrInput is an input type that accepts ConnectionProfileOracleProfileArgs, ConnectionProfileOracleProfilePtr and ConnectionProfileOracleProfilePtrOutput values.
// You can construct a concrete instance of `ConnectionProfileOracleProfilePtrInput` via:
//
//	        ConnectionProfileOracleProfileArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfileOracleProfilePtrInput interface {
	pulumi.Input

	ToConnectionProfileOracleProfilePtrOutput() ConnectionProfileOracleProfilePtrOutput
	ToConnectionProfileOracleProfilePtrOutputWithContext(context.Context) ConnectionProfileOracleProfilePtrOutput
}

type connectionProfileOracleProfilePtrType ConnectionProfileOracleProfileArgs

func ConnectionProfileOracleProfilePtr(v *ConnectionProfileOracleProfileArgs) ConnectionProfileOracleProfilePtrInput {
	return (*connectionProfileOracleProfilePtrType)(v)
}

func (*connectionProfileOracleProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileOracleProfile)(nil)).Elem()
}

func (i *connectionProfileOracleProfilePtrType) ToConnectionProfileOracleProfilePtrOutput() ConnectionProfileOracleProfilePtrOutput {
	return i.ToConnectionProfileOracleProfilePtrOutputWithContext(context.Background())
}

func (i *connectionProfileOracleProfilePtrType) ToConnectionProfileOracleProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileOracleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileOracleProfilePtrOutput)
}

type ConnectionProfileOracleProfileOutput struct{ *pulumi.OutputState }

func (ConnectionProfileOracleProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileOracleProfile)(nil)).Elem()
}

func (o ConnectionProfileOracleProfileOutput) ToConnectionProfileOracleProfileOutput() ConnectionProfileOracleProfileOutput {
	return o
}

func (o ConnectionProfileOracleProfileOutput) ToConnectionProfileOracleProfileOutputWithContext(ctx context.Context) ConnectionProfileOracleProfileOutput {
	return o
}

func (o ConnectionProfileOracleProfileOutput) ToConnectionProfileOracleProfilePtrOutput() ConnectionProfileOracleProfilePtrOutput {
	return o.ToConnectionProfileOracleProfilePtrOutputWithContext(context.Background())
}

func (o ConnectionProfileOracleProfileOutput) ToConnectionProfileOracleProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileOracleProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfileOracleProfile) *ConnectionProfileOracleProfile {
		return &v
	}).(ConnectionProfileOracleProfilePtrOutput)
}

// Connection string attributes
func (o ConnectionProfileOracleProfileOutput) ConnectionAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectionProfileOracleProfile) map[string]string { return v.ConnectionAttributes }).(pulumi.StringMapOutput)
}

// Database for the Oracle connection.
func (o ConnectionProfileOracleProfileOutput) DatabaseService() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileOracleProfile) string { return v.DatabaseService }).(pulumi.StringOutput)
}

// Hostname for the SSH tunnel.
func (o ConnectionProfileOracleProfileOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileOracleProfile) string { return v.Hostname }).(pulumi.StringOutput)
}

// SSH password.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileOracleProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileOracleProfile) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the SSH tunnel.
func (o ConnectionProfileOracleProfileOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionProfileOracleProfile) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Username for the SSH tunnel.
func (o ConnectionProfileOracleProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfileOracleProfile) string { return v.Username }).(pulumi.StringOutput)
}

type ConnectionProfileOracleProfilePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileOracleProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileOracleProfile)(nil)).Elem()
}

func (o ConnectionProfileOracleProfilePtrOutput) ToConnectionProfileOracleProfilePtrOutput() ConnectionProfileOracleProfilePtrOutput {
	return o
}

func (o ConnectionProfileOracleProfilePtrOutput) ToConnectionProfileOracleProfilePtrOutputWithContext(ctx context.Context) ConnectionProfileOracleProfilePtrOutput {
	return o
}

func (o ConnectionProfileOracleProfilePtrOutput) Elem() ConnectionProfileOracleProfileOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) ConnectionProfileOracleProfile {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileOracleProfile
		return ret
	}).(ConnectionProfileOracleProfileOutput)
}

// Connection string attributes
func (o ConnectionProfileOracleProfilePtrOutput) ConnectionAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) map[string]string {
		if v == nil {
			return nil
		}
		return v.ConnectionAttributes
	}).(pulumi.StringMapOutput)
}

// Database for the Oracle connection.
func (o ConnectionProfileOracleProfilePtrOutput) DatabaseService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseService
	}).(pulumi.StringPtrOutput)
}

// Hostname for the SSH tunnel.
func (o ConnectionProfileOracleProfilePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// SSH password.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfileOracleProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel.
func (o ConnectionProfileOracleProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Username for the SSH tunnel.
func (o ConnectionProfileOracleProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileOracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionProfilePostgresqlProfile struct {
	// Database for the PostgreSQL connection.
	Database string `pulumi:"database"`
	// Hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// SSH password.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password string `pulumi:"password"`
	// Port for the SSH tunnel.
	Port *int `pulumi:"port"`
	// Username for the SSH tunnel.
	Username string `pulumi:"username"`
}

// ConnectionProfilePostgresqlProfileInput is an input type that accepts ConnectionProfilePostgresqlProfileArgs and ConnectionProfilePostgresqlProfileOutput values.
// You can construct a concrete instance of `ConnectionProfilePostgresqlProfileInput` via:
//
//	ConnectionProfilePostgresqlProfileArgs{...}
type ConnectionProfilePostgresqlProfileInput interface {
	pulumi.Input

	ToConnectionProfilePostgresqlProfileOutput() ConnectionProfilePostgresqlProfileOutput
	ToConnectionProfilePostgresqlProfileOutputWithContext(context.Context) ConnectionProfilePostgresqlProfileOutput
}

type ConnectionProfilePostgresqlProfileArgs struct {
	// Database for the PostgreSQL connection.
	Database pulumi.StringInput `pulumi:"database"`
	// Hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// SSH password.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the SSH tunnel.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Username for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ConnectionProfilePostgresqlProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfilePostgresqlProfile)(nil)).Elem()
}

func (i ConnectionProfilePostgresqlProfileArgs) ToConnectionProfilePostgresqlProfileOutput() ConnectionProfilePostgresqlProfileOutput {
	return i.ToConnectionProfilePostgresqlProfileOutputWithContext(context.Background())
}

func (i ConnectionProfilePostgresqlProfileArgs) ToConnectionProfilePostgresqlProfileOutputWithContext(ctx context.Context) ConnectionProfilePostgresqlProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfilePostgresqlProfileOutput)
}

func (i ConnectionProfilePostgresqlProfileArgs) ToConnectionProfilePostgresqlProfilePtrOutput() ConnectionProfilePostgresqlProfilePtrOutput {
	return i.ToConnectionProfilePostgresqlProfilePtrOutputWithContext(context.Background())
}

func (i ConnectionProfilePostgresqlProfileArgs) ToConnectionProfilePostgresqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePostgresqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfilePostgresqlProfileOutput).ToConnectionProfilePostgresqlProfilePtrOutputWithContext(ctx)
}

// ConnectionProfilePostgresqlProfilePtrInput is an input type that accepts ConnectionProfilePostgresqlProfileArgs, ConnectionProfilePostgresqlProfilePtr and ConnectionProfilePostgresqlProfilePtrOutput values.
// You can construct a concrete instance of `ConnectionProfilePostgresqlProfilePtrInput` via:
//
//	        ConnectionProfilePostgresqlProfileArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfilePostgresqlProfilePtrInput interface {
	pulumi.Input

	ToConnectionProfilePostgresqlProfilePtrOutput() ConnectionProfilePostgresqlProfilePtrOutput
	ToConnectionProfilePostgresqlProfilePtrOutputWithContext(context.Context) ConnectionProfilePostgresqlProfilePtrOutput
}

type connectionProfilePostgresqlProfilePtrType ConnectionProfilePostgresqlProfileArgs

func ConnectionProfilePostgresqlProfilePtr(v *ConnectionProfilePostgresqlProfileArgs) ConnectionProfilePostgresqlProfilePtrInput {
	return (*connectionProfilePostgresqlProfilePtrType)(v)
}

func (*connectionProfilePostgresqlProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfilePostgresqlProfile)(nil)).Elem()
}

func (i *connectionProfilePostgresqlProfilePtrType) ToConnectionProfilePostgresqlProfilePtrOutput() ConnectionProfilePostgresqlProfilePtrOutput {
	return i.ToConnectionProfilePostgresqlProfilePtrOutputWithContext(context.Background())
}

func (i *connectionProfilePostgresqlProfilePtrType) ToConnectionProfilePostgresqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePostgresqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfilePostgresqlProfilePtrOutput)
}

type ConnectionProfilePostgresqlProfileOutput struct{ *pulumi.OutputState }

func (ConnectionProfilePostgresqlProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfilePostgresqlProfile)(nil)).Elem()
}

func (o ConnectionProfilePostgresqlProfileOutput) ToConnectionProfilePostgresqlProfileOutput() ConnectionProfilePostgresqlProfileOutput {
	return o
}

func (o ConnectionProfilePostgresqlProfileOutput) ToConnectionProfilePostgresqlProfileOutputWithContext(ctx context.Context) ConnectionProfilePostgresqlProfileOutput {
	return o
}

func (o ConnectionProfilePostgresqlProfileOutput) ToConnectionProfilePostgresqlProfilePtrOutput() ConnectionProfilePostgresqlProfilePtrOutput {
	return o.ToConnectionProfilePostgresqlProfilePtrOutputWithContext(context.Background())
}

func (o ConnectionProfilePostgresqlProfileOutput) ToConnectionProfilePostgresqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePostgresqlProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfilePostgresqlProfile) *ConnectionProfilePostgresqlProfile {
		return &v
	}).(ConnectionProfilePostgresqlProfilePtrOutput)
}

// Database for the PostgreSQL connection.
func (o ConnectionProfilePostgresqlProfileOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfilePostgresqlProfile) string { return v.Database }).(pulumi.StringOutput)
}

// Hostname for the SSH tunnel.
func (o ConnectionProfilePostgresqlProfileOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfilePostgresqlProfile) string { return v.Hostname }).(pulumi.StringOutput)
}

// SSH password.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfilePostgresqlProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfilePostgresqlProfile) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the SSH tunnel.
func (o ConnectionProfilePostgresqlProfileOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionProfilePostgresqlProfile) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Username for the SSH tunnel.
func (o ConnectionProfilePostgresqlProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProfilePostgresqlProfile) string { return v.Username }).(pulumi.StringOutput)
}

type ConnectionProfilePostgresqlProfilePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfilePostgresqlProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfilePostgresqlProfile)(nil)).Elem()
}

func (o ConnectionProfilePostgresqlProfilePtrOutput) ToConnectionProfilePostgresqlProfilePtrOutput() ConnectionProfilePostgresqlProfilePtrOutput {
	return o
}

func (o ConnectionProfilePostgresqlProfilePtrOutput) ToConnectionProfilePostgresqlProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePostgresqlProfilePtrOutput {
	return o
}

func (o ConnectionProfilePostgresqlProfilePtrOutput) Elem() ConnectionProfilePostgresqlProfileOutput {
	return o.ApplyT(func(v *ConnectionProfilePostgresqlProfile) ConnectionProfilePostgresqlProfile {
		if v != nil {
			return *v
		}
		var ret ConnectionProfilePostgresqlProfile
		return ret
	}).(ConnectionProfilePostgresqlProfileOutput)
}

// Database for the PostgreSQL connection.
func (o ConnectionProfilePostgresqlProfilePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfilePostgresqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// Hostname for the SSH tunnel.
func (o ConnectionProfilePostgresqlProfilePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfilePostgresqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// SSH password.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionProfilePostgresqlProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfilePostgresqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel.
func (o ConnectionProfilePostgresqlProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionProfilePostgresqlProfile) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Username for the SSH tunnel.
func (o ConnectionProfilePostgresqlProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfilePostgresqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type PrivateConnectionVpcPeeringConfig struct {
	// A free subnet for peering. (CIDR of /29)
	Subnet string `pulumi:"subnet"`
	// Fully qualified name of the VPC that Datastream will peer to.
	// Format: projects/{project}/global/{networks}/{name}
	Vpc string `pulumi:"vpc"`
}

// PrivateConnectionVpcPeeringConfigInput is an input type that accepts PrivateConnectionVpcPeeringConfigArgs and PrivateConnectionVpcPeeringConfigOutput values.
// You can construct a concrete instance of `PrivateConnectionVpcPeeringConfigInput` via:
//
//	PrivateConnectionVpcPeeringConfigArgs{...}
type PrivateConnectionVpcPeeringConfigInput interface {
	pulumi.Input

	ToPrivateConnectionVpcPeeringConfigOutput() PrivateConnectionVpcPeeringConfigOutput
	ToPrivateConnectionVpcPeeringConfigOutputWithContext(context.Context) PrivateConnectionVpcPeeringConfigOutput
}

type PrivateConnectionVpcPeeringConfigArgs struct {
	// A free subnet for peering. (CIDR of /29)
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// Fully qualified name of the VPC that Datastream will peer to.
	// Format: projects/{project}/global/{networks}/{name}
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (PrivateConnectionVpcPeeringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectionVpcPeeringConfig)(nil)).Elem()
}

func (i PrivateConnectionVpcPeeringConfigArgs) ToPrivateConnectionVpcPeeringConfigOutput() PrivateConnectionVpcPeeringConfigOutput {
	return i.ToPrivateConnectionVpcPeeringConfigOutputWithContext(context.Background())
}

func (i PrivateConnectionVpcPeeringConfigArgs) ToPrivateConnectionVpcPeeringConfigOutputWithContext(ctx context.Context) PrivateConnectionVpcPeeringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionVpcPeeringConfigOutput)
}

func (i PrivateConnectionVpcPeeringConfigArgs) ToPrivateConnectionVpcPeeringConfigPtrOutput() PrivateConnectionVpcPeeringConfigPtrOutput {
	return i.ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (i PrivateConnectionVpcPeeringConfigArgs) ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(ctx context.Context) PrivateConnectionVpcPeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionVpcPeeringConfigOutput).ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(ctx)
}

// PrivateConnectionVpcPeeringConfigPtrInput is an input type that accepts PrivateConnectionVpcPeeringConfigArgs, PrivateConnectionVpcPeeringConfigPtr and PrivateConnectionVpcPeeringConfigPtrOutput values.
// You can construct a concrete instance of `PrivateConnectionVpcPeeringConfigPtrInput` via:
//
//	        PrivateConnectionVpcPeeringConfigArgs{...}
//
//	or:
//
//	        nil
type PrivateConnectionVpcPeeringConfigPtrInput interface {
	pulumi.Input

	ToPrivateConnectionVpcPeeringConfigPtrOutput() PrivateConnectionVpcPeeringConfigPtrOutput
	ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(context.Context) PrivateConnectionVpcPeeringConfigPtrOutput
}

type privateConnectionVpcPeeringConfigPtrType PrivateConnectionVpcPeeringConfigArgs

func PrivateConnectionVpcPeeringConfigPtr(v *PrivateConnectionVpcPeeringConfigArgs) PrivateConnectionVpcPeeringConfigPtrInput {
	return (*privateConnectionVpcPeeringConfigPtrType)(v)
}

func (*privateConnectionVpcPeeringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectionVpcPeeringConfig)(nil)).Elem()
}

func (i *privateConnectionVpcPeeringConfigPtrType) ToPrivateConnectionVpcPeeringConfigPtrOutput() PrivateConnectionVpcPeeringConfigPtrOutput {
	return i.ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (i *privateConnectionVpcPeeringConfigPtrType) ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(ctx context.Context) PrivateConnectionVpcPeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionVpcPeeringConfigPtrOutput)
}

type PrivateConnectionVpcPeeringConfigOutput struct{ *pulumi.OutputState }

func (PrivateConnectionVpcPeeringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectionVpcPeeringConfig)(nil)).Elem()
}

func (o PrivateConnectionVpcPeeringConfigOutput) ToPrivateConnectionVpcPeeringConfigOutput() PrivateConnectionVpcPeeringConfigOutput {
	return o
}

func (o PrivateConnectionVpcPeeringConfigOutput) ToPrivateConnectionVpcPeeringConfigOutputWithContext(ctx context.Context) PrivateConnectionVpcPeeringConfigOutput {
	return o
}

func (o PrivateConnectionVpcPeeringConfigOutput) ToPrivateConnectionVpcPeeringConfigPtrOutput() PrivateConnectionVpcPeeringConfigPtrOutput {
	return o.ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (o PrivateConnectionVpcPeeringConfigOutput) ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(ctx context.Context) PrivateConnectionVpcPeeringConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateConnectionVpcPeeringConfig) *PrivateConnectionVpcPeeringConfig {
		return &v
	}).(PrivateConnectionVpcPeeringConfigPtrOutput)
}

// A free subnet for peering. (CIDR of /29)
func (o PrivateConnectionVpcPeeringConfigOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateConnectionVpcPeeringConfig) string { return v.Subnet }).(pulumi.StringOutput)
}

// Fully qualified name of the VPC that Datastream will peer to.
// Format: projects/{project}/global/{networks}/{name}
func (o PrivateConnectionVpcPeeringConfigOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateConnectionVpcPeeringConfig) string { return v.Vpc }).(pulumi.StringOutput)
}

type PrivateConnectionVpcPeeringConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateConnectionVpcPeeringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectionVpcPeeringConfig)(nil)).Elem()
}

func (o PrivateConnectionVpcPeeringConfigPtrOutput) ToPrivateConnectionVpcPeeringConfigPtrOutput() PrivateConnectionVpcPeeringConfigPtrOutput {
	return o
}

func (o PrivateConnectionVpcPeeringConfigPtrOutput) ToPrivateConnectionVpcPeeringConfigPtrOutputWithContext(ctx context.Context) PrivateConnectionVpcPeeringConfigPtrOutput {
	return o
}

func (o PrivateConnectionVpcPeeringConfigPtrOutput) Elem() PrivateConnectionVpcPeeringConfigOutput {
	return o.ApplyT(func(v *PrivateConnectionVpcPeeringConfig) PrivateConnectionVpcPeeringConfig {
		if v != nil {
			return *v
		}
		var ret PrivateConnectionVpcPeeringConfig
		return ret
	}).(PrivateConnectionVpcPeeringConfigOutput)
}

// A free subnet for peering. (CIDR of /29)
func (o PrivateConnectionVpcPeeringConfigPtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnectionVpcPeeringConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Subnet
	}).(pulumi.StringPtrOutput)
}

// Fully qualified name of the VPC that Datastream will peer to.
// Format: projects/{project}/global/{networks}/{name}
func (o PrivateConnectionVpcPeeringConfigPtrOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnectionVpcPeeringConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Vpc
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileBigqueryProfileInput)(nil)).Elem(), ConnectionProfileBigqueryProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileBigqueryProfilePtrInput)(nil)).Elem(), ConnectionProfileBigqueryProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileForwardSshConnectivityInput)(nil)).Elem(), ConnectionProfileForwardSshConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileForwardSshConnectivityPtrInput)(nil)).Elem(), ConnectionProfileForwardSshConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileGcsProfileInput)(nil)).Elem(), ConnectionProfileGcsProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileGcsProfilePtrInput)(nil)).Elem(), ConnectionProfileGcsProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileMysqlProfileInput)(nil)).Elem(), ConnectionProfileMysqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileMysqlProfilePtrInput)(nil)).Elem(), ConnectionProfileMysqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileMysqlProfileSslConfigInput)(nil)).Elem(), ConnectionProfileMysqlProfileSslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileMysqlProfileSslConfigPtrInput)(nil)).Elem(), ConnectionProfileMysqlProfileSslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileOracleProfileInput)(nil)).Elem(), ConnectionProfileOracleProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfileOracleProfilePtrInput)(nil)).Elem(), ConnectionProfileOracleProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfilePostgresqlProfileInput)(nil)).Elem(), ConnectionProfilePostgresqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionProfilePostgresqlProfilePtrInput)(nil)).Elem(), ConnectionProfilePostgresqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionVpcPeeringConfigInput)(nil)).Elem(), PrivateConnectionVpcPeeringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionVpcPeeringConfigPtrInput)(nil)).Elem(), PrivateConnectionVpcPeeringConfigArgs{})
	pulumi.RegisterOutputType(ConnectionProfileBigqueryProfileOutput{})
	pulumi.RegisterOutputType(ConnectionProfileBigqueryProfilePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileForwardSshConnectivityOutput{})
	pulumi.RegisterOutputType(ConnectionProfileForwardSshConnectivityPtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileGcsProfileOutput{})
	pulumi.RegisterOutputType(ConnectionProfileGcsProfilePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileMysqlProfileOutput{})
	pulumi.RegisterOutputType(ConnectionProfileMysqlProfilePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileMysqlProfileSslConfigOutput{})
	pulumi.RegisterOutputType(ConnectionProfileMysqlProfileSslConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileOracleProfileOutput{})
	pulumi.RegisterOutputType(ConnectionProfileOracleProfilePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfilePostgresqlProfileOutput{})
	pulumi.RegisterOutputType(ConnectionProfilePostgresqlProfilePtrOutput{})
	pulumi.RegisterOutputType(PrivateConnectionVpcPeeringConfigOutput{})
	pulumi.RegisterOutputType(PrivateConnectionVpcPeeringConfigPtrOutput{})
}
