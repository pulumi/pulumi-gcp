// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A volume is a file system container in a storage pool that stores application, database, and user data.
//
// You can create a volume's capacity using the available capacity in the storage pool and you can define and resize the capacity without disruption to any processes.
//
// Storage pool settings apply to the volumes contained within them automatically.
//
// To get more information about Volume, see:
//
// * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.volumes)
// * How-to Guides
//   - [Quickstart](https://cloud.google.com/netapp/volumes/docs/get-started/quickstarts/create-volume)
//   - [Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/volumes/overview)
//
// ## Example Usage
// ### Volume Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/netapp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
//				Name: "test-network",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultStoragePool, err := netapp.NewStoragePool(ctx, "defaultStoragePool", &netapp.StoragePoolArgs{
//				Location:     pulumi.String("us-west2"),
//				ServiceLevel: pulumi.String("PREMIUM"),
//				CapacityGib:  pulumi.String("2048"),
//				Network:      *pulumi.String(defaultNetwork.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = netapp.NewVolume(ctx, "testVolume", &netapp.VolumeArgs{
//				Location:    pulumi.String("us-west2"),
//				CapacityGib: pulumi.String("100"),
//				ShareName:   pulumi.String("test-volume"),
//				StoragePool: defaultStoragePool.Name,
//				Protocols: pulumi.StringArray{
//					pulumi.String("NFSV3"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Volume can be imported using any of these accepted formats* `projects/{{project}}/locations/{{location}}/volumes/{{name}}` * `{{project}}/{{location}}/{{name}}` * `{{location}}/{{name}}` When using the `pulumi import` command, Volume can be imported using one of the formats above. For example
//
// ```sh
//
//	$ pulumi import gcp:netapp/volume:Volume default projects/{{project}}/locations/{{location}}/volumes/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:netapp/volume:Volume default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:netapp/volume:Volume default {{location}}/{{name}}
//
// ```
type Volume struct {
	pulumi.CustomResourceState

	// Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
	ActiveDirectory pulumi.StringOutput `pulumi:"activeDirectory"`
	// Capacity of the volume (in GiB).
	CapacityGib pulumi.StringOutput `pulumi:"capacityGib"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
	EncryptionType pulumi.StringOutput `pulumi:"encryptionType"`
	// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
	// Structure is documented below.
	ExportPolicy VolumeExportPolicyPtrOutput `pulumi:"exportPolicy"`
	// Indicates whether the volume is part of a volume replication relationship.
	HasReplication pulumi.BoolOutput `pulumi:"hasReplication"`
	// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
	KerberosEnabled pulumi.BoolPtrOutput `pulumi:"kerberosEnabled"`
	// Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
	KmsConfig pulumi.StringOutput `pulumi:"kmsConfig"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
	LdapEnabled pulumi.BoolOutput `pulumi:"ldapEnabled"`
	// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
	Location pulumi.StringOutput `pulumi:"location"`
	// Reports mount instructions for this volume.
	// Structure is documented below.
	MountOptions VolumeMountOptionArrayOutput `pulumi:"mountOptions"`
	// The name of the volume. Needs to be unique per location.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
	Network pulumi.StringOutput `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The protocol of the volume. Allowed combinations are `['NFSV3']`, `['NFSV4']`, `['SMB']`, `['NFSV3', 'NFSV4']`, `['SMB', 'NFSV3']` and `['SMB', 'NFSV4']`.
	// Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// Name of the Private Service Access allocated range. Inherited from storage pool.
	PsaRange pulumi.StringOutput `pulumi:"psaRange"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// List of actions that are restricted on this volume.
	// Each value may be one of: `DELETE`.
	RestrictedActions pulumi.StringArrayOutput `pulumi:"restrictedActions"`
	// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
	// Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
	// Possible values are: `NTFS`, `UNIX`.
	SecurityStyle pulumi.StringOutput `pulumi:"securityStyle"`
	// Service level of the volume. Inherited from storage pool.
	ServiceLevel pulumi.StringOutput `pulumi:"serviceLevel"`
	// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
	ShareName pulumi.StringOutput `pulumi:"shareName"`
	// Settings for volumes with SMB access.
	// Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
	SmbSettings pulumi.StringArrayOutput `pulumi:"smbSettings"`
	// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots. Will enable "Previous Versions" support for SMB.
	SnapshotDirectory pulumi.BoolPtrOutput `pulumi:"snapshotDirectory"`
	// Snapshot policy defines the schedule for automatic snapshot creation.
	// To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
	// Structure is documented below.
	SnapshotPolicy VolumeSnapshotPolicyPtrOutput `pulumi:"snapshotPolicy"`
	// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accomodate the volume.
	StoragePool pulumi.StringOutput `pulumi:"storagePool"`
	// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
	UnixPermissions pulumi.StringOutput `pulumi:"unixPermissions"`
	// Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
	UsedGib pulumi.StringOutput `pulumi:"usedGib"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CapacityGib == nil {
		return nil, errors.New("invalid value for required argument 'CapacityGib'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Protocols == nil {
		return nil, errors.New("invalid value for required argument 'Protocols'")
	}
	if args.ShareName == nil {
		return nil, errors.New("invalid value for required argument 'ShareName'")
	}
	if args.StoragePool == nil {
		return nil, errors.New("invalid value for required argument 'StoragePool'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Volume
	err := ctx.RegisterResource("gcp:netapp/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("gcp:netapp/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
	ActiveDirectory *string `pulumi:"activeDirectory"`
	// Capacity of the volume (in GiB).
	CapacityGib *string `pulumi:"capacityGib"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
	EncryptionType *string `pulumi:"encryptionType"`
	// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
	// Structure is documented below.
	ExportPolicy *VolumeExportPolicy `pulumi:"exportPolicy"`
	// Indicates whether the volume is part of a volume replication relationship.
	HasReplication *bool `pulumi:"hasReplication"`
	// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
	KerberosEnabled *bool `pulumi:"kerberosEnabled"`
	// Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
	KmsConfig *string `pulumi:"kmsConfig"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
	LdapEnabled *bool `pulumi:"ldapEnabled"`
	// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
	Location *string `pulumi:"location"`
	// Reports mount instructions for this volume.
	// Structure is documented below.
	MountOptions []VolumeMountOption `pulumi:"mountOptions"`
	// The name of the volume. Needs to be unique per location.
	//
	// ***
	Name *string `pulumi:"name"`
	// VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
	Network *string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The protocol of the volume. Allowed combinations are `['NFSV3']`, `['NFSV4']`, `['SMB']`, `['NFSV3', 'NFSV4']`, `['SMB', 'NFSV3']` and `['SMB', 'NFSV4']`.
	// Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
	Protocols []string `pulumi:"protocols"`
	// Name of the Private Service Access allocated range. Inherited from storage pool.
	PsaRange *string `pulumi:"psaRange"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// List of actions that are restricted on this volume.
	// Each value may be one of: `DELETE`.
	RestrictedActions []string `pulumi:"restrictedActions"`
	// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
	// Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
	// Possible values are: `NTFS`, `UNIX`.
	SecurityStyle *string `pulumi:"securityStyle"`
	// Service level of the volume. Inherited from storage pool.
	ServiceLevel *string `pulumi:"serviceLevel"`
	// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
	ShareName *string `pulumi:"shareName"`
	// Settings for volumes with SMB access.
	// Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
	SmbSettings []string `pulumi:"smbSettings"`
	// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots. Will enable "Previous Versions" support for SMB.
	SnapshotDirectory *bool `pulumi:"snapshotDirectory"`
	// Snapshot policy defines the schedule for automatic snapshot creation.
	// To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
	// Structure is documented below.
	SnapshotPolicy *VolumeSnapshotPolicy `pulumi:"snapshotPolicy"`
	// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accomodate the volume.
	StoragePool *string `pulumi:"storagePool"`
	// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
	UnixPermissions *string `pulumi:"unixPermissions"`
	// Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
	UsedGib *string `pulumi:"usedGib"`
}

type VolumeState struct {
	// Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
	ActiveDirectory pulumi.StringPtrInput
	// Capacity of the volume (in GiB).
	CapacityGib pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
	EncryptionType pulumi.StringPtrInput
	// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
	// Structure is documented below.
	ExportPolicy VolumeExportPolicyPtrInput
	// Indicates whether the volume is part of a volume replication relationship.
	HasReplication pulumi.BoolPtrInput
	// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
	KerberosEnabled pulumi.BoolPtrInput
	// Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
	KmsConfig pulumi.StringPtrInput
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
	LdapEnabled pulumi.BoolPtrInput
	// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
	Location pulumi.StringPtrInput
	// Reports mount instructions for this volume.
	// Structure is documented below.
	MountOptions VolumeMountOptionArrayInput
	// The name of the volume. Needs to be unique per location.
	//
	// ***
	Name pulumi.StringPtrInput
	// VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
	Network pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The protocol of the volume. Allowed combinations are `['NFSV3']`, `['NFSV4']`, `['SMB']`, `['NFSV3', 'NFSV4']`, `['SMB', 'NFSV3']` and `['SMB', 'NFSV4']`.
	// Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
	Protocols pulumi.StringArrayInput
	// Name of the Private Service Access allocated range. Inherited from storage pool.
	PsaRange pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// List of actions that are restricted on this volume.
	// Each value may be one of: `DELETE`.
	RestrictedActions pulumi.StringArrayInput
	// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
	// Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
	// Possible values are: `NTFS`, `UNIX`.
	SecurityStyle pulumi.StringPtrInput
	// Service level of the volume. Inherited from storage pool.
	ServiceLevel pulumi.StringPtrInput
	// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
	ShareName pulumi.StringPtrInput
	// Settings for volumes with SMB access.
	// Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
	SmbSettings pulumi.StringArrayInput
	// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots. Will enable "Previous Versions" support for SMB.
	SnapshotDirectory pulumi.BoolPtrInput
	// Snapshot policy defines the schedule for automatic snapshot creation.
	// To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
	// Structure is documented below.
	SnapshotPolicy VolumeSnapshotPolicyPtrInput
	// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accomodate the volume.
	StoragePool pulumi.StringPtrInput
	// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
	UnixPermissions pulumi.StringPtrInput
	// Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
	UsedGib pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// Capacity of the volume (in GiB).
	CapacityGib string `pulumi:"capacityGib"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
	// Structure is documented below.
	ExportPolicy *VolumeExportPolicy `pulumi:"exportPolicy"`
	// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
	KerberosEnabled *bool `pulumi:"kerberosEnabled"`
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
	Location string `pulumi:"location"`
	// The name of the volume. Needs to be unique per location.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The protocol of the volume. Allowed combinations are `['NFSV3']`, `['NFSV4']`, `['SMB']`, `['NFSV3', 'NFSV4']`, `['SMB', 'NFSV3']` and `['SMB', 'NFSV4']`.
	// Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
	Protocols []string `pulumi:"protocols"`
	// List of actions that are restricted on this volume.
	// Each value may be one of: `DELETE`.
	RestrictedActions []string `pulumi:"restrictedActions"`
	// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
	// Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
	// Possible values are: `NTFS`, `UNIX`.
	SecurityStyle *string `pulumi:"securityStyle"`
	// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
	ShareName string `pulumi:"shareName"`
	// Settings for volumes with SMB access.
	// Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
	SmbSettings []string `pulumi:"smbSettings"`
	// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots. Will enable "Previous Versions" support for SMB.
	SnapshotDirectory *bool `pulumi:"snapshotDirectory"`
	// Snapshot policy defines the schedule for automatic snapshot creation.
	// To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
	// Structure is documented below.
	SnapshotPolicy *VolumeSnapshotPolicy `pulumi:"snapshotPolicy"`
	// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accomodate the volume.
	StoragePool string `pulumi:"storagePool"`
	// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
	UnixPermissions *string `pulumi:"unixPermissions"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// Capacity of the volume (in GiB).
	CapacityGib pulumi.StringInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
	// Structure is documented below.
	ExportPolicy VolumeExportPolicyPtrInput
	// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
	KerberosEnabled pulumi.BoolPtrInput
	// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
	Location pulumi.StringInput
	// The name of the volume. Needs to be unique per location.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The protocol of the volume. Allowed combinations are `['NFSV3']`, `['NFSV4']`, `['SMB']`, `['NFSV3', 'NFSV4']`, `['SMB', 'NFSV3']` and `['SMB', 'NFSV4']`.
	// Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
	Protocols pulumi.StringArrayInput
	// List of actions that are restricted on this volume.
	// Each value may be one of: `DELETE`.
	RestrictedActions pulumi.StringArrayInput
	// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
	// Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
	// Possible values are: `NTFS`, `UNIX`.
	SecurityStyle pulumi.StringPtrInput
	// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
	ShareName pulumi.StringInput
	// Settings for volumes with SMB access.
	// Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
	SmbSettings pulumi.StringArrayInput
	// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots. Will enable "Previous Versions" support for SMB.
	SnapshotDirectory pulumi.BoolPtrInput
	// Snapshot policy defines the schedule for automatic snapshot creation.
	// To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
	// Structure is documented below.
	SnapshotPolicy VolumeSnapshotPolicyPtrInput
	// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accomodate the volume.
	StoragePool pulumi.StringInput
	// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
	UnixPermissions pulumi.StringPtrInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//	VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
func (o VolumeOutput) ActiveDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ActiveDirectory }).(pulumi.StringOutput)
}

// Capacity of the volume (in GiB).
func (o VolumeOutput) CapacityGib() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.CapacityGib }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o VolumeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o VolumeOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
func (o VolumeOutput) EncryptionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.EncryptionType }).(pulumi.StringOutput)
}

// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
// Structure is documented below.
func (o VolumeOutput) ExportPolicy() VolumeExportPolicyPtrOutput {
	return o.ApplyT(func(v *Volume) VolumeExportPolicyPtrOutput { return v.ExportPolicy }).(VolumeExportPolicyPtrOutput)
}

// Indicates whether the volume is part of a volume replication relationship.
func (o VolumeOutput) HasReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.HasReplication }).(pulumi.BoolOutput)
}

// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
func (o VolumeOutput) KerberosEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.KerberosEnabled }).(pulumi.BoolPtrOutput)
}

// Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
func (o VolumeOutput) KmsConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.KmsConfig }).(pulumi.StringOutput)
}

// Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o VolumeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
func (o VolumeOutput) LdapEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.LdapEnabled }).(pulumi.BoolOutput)
}

// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
func (o VolumeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Reports mount instructions for this volume.
// Structure is documented below.
func (o VolumeOutput) MountOptions() VolumeMountOptionArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeMountOptionArrayOutput { return v.MountOptions }).(VolumeMountOptionArrayOutput)
}

// The name of the volume. Needs to be unique per location.
//
// ***
func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
func (o VolumeOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o VolumeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The protocol of the volume. Allowed combinations are `['NFSV3']`, `['NFSV4']`, `['SMB']`, `['NFSV3', 'NFSV4']`, `['SMB', 'NFSV3']` and `['SMB', 'NFSV4']`.
// Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
func (o VolumeOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// Name of the Private Service Access allocated range. Inherited from storage pool.
func (o VolumeOutput) PsaRange() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.PsaRange }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o VolumeOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// List of actions that are restricted on this volume.
// Each value may be one of: `DELETE`.
func (o VolumeOutput) RestrictedActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringArrayOutput { return v.RestrictedActions }).(pulumi.StringArrayOutput)
}

// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
// Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
// Possible values are: `NTFS`, `UNIX`.
func (o VolumeOutput) SecurityStyle() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.SecurityStyle }).(pulumi.StringOutput)
}

// Service level of the volume. Inherited from storage pool.
func (o VolumeOutput) ServiceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ServiceLevel }).(pulumi.StringOutput)
}

// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
func (o VolumeOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ShareName }).(pulumi.StringOutput)
}

// Settings for volumes with SMB access.
// Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
func (o VolumeOutput) SmbSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringArrayOutput { return v.SmbSettings }).(pulumi.StringArrayOutput)
}

// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots. Will enable "Previous Versions" support for SMB.
func (o VolumeOutput) SnapshotDirectory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.SnapshotDirectory }).(pulumi.BoolPtrOutput)
}

// Snapshot policy defines the schedule for automatic snapshot creation.
// To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
// Structure is documented below.
func (o VolumeOutput) SnapshotPolicy() VolumeSnapshotPolicyPtrOutput {
	return o.ApplyT(func(v *Volume) VolumeSnapshotPolicyPtrOutput { return v.SnapshotPolicy }).(VolumeSnapshotPolicyPtrOutput)
}

// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accomodate the volume.
func (o VolumeOutput) StoragePool() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.StoragePool }).(pulumi.StringOutput)
}

// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
func (o VolumeOutput) UnixPermissions() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.UnixPermissions }).(pulumi.StringOutput)
}

// Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
func (o VolumeOutput) UsedGib() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.UsedGib }).(pulumi.StringOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].([]*Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].(map[string]*Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMapInput)(nil)).Elem(), VolumeMap{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}
